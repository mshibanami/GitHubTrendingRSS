<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Monthly Trending</title>
    <description>Monthly Trending of Lua in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:54:40 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>Saghen/blink.cmp</title>
      <link>https://github.com/Saghen/blink.cmp</link>
      <description>&lt;p&gt;Performant, batteries-included completion plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;Blink Completion (blink.cmp)&lt;/h2&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; Performant, batteries-included completion plugin for Neovim &lt;/p&gt; 
&lt;p align=&quot;center&quot; style=&quot;text-decoration: none; border: none;&quot;&gt; &lt;a href=&quot;https://github.com/saghen/blink.cmp/stargazers&quot; style=&quot;text-decoration: none&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/saghen/blink.cmp?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/saghen/blink.cmp/issues&quot; style=&quot;text-decoration: none&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/saghen/blink.cmp?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/saghen/blink.cmp/contributors&quot; style=&quot;text-decoration: none&quot;&gt; &lt;img alt=&quot;Contributors&quot; src=&quot;https://img.shields.io/github/contributors/saghen/blink.cmp?color=%23DDB6F2&amp;amp;label=CONTRIBUTORS&amp;amp;logo=git&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://cmp.saghen.dev&quot;&gt;Documentation&lt;/a&gt; · &lt;a href=&quot;https://cmp.saghen.dev/installation&quot;&gt;Installation&lt;/a&gt; · &lt;a href=&quot;https://cmp.saghen.dev/recipes&quot;&gt;Recipes&lt;/a&gt; · &lt;a href=&quot;https://cmp.saghen.dev/configuration/general&quot;&gt;Configuration&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;blink.cmp&lt;/strong&gt; is a completion plugin with support for LSPs, cmdline, signature help, and snippets. It uses an &lt;a href=&quot;https://cmp.saghen.dev/configuration/fuzzy.html#rust-vs-lua-implementation&quot;&gt;optional&lt;/a&gt; custom &lt;a href=&quot;https://github.com/saghen/frizbee&quot;&gt;fuzzy matcher&lt;/a&gt; for typo resistance. It provides extensibility via pluggable sources (LSP, buffer, snippets, etc), component based rendering and dynamic configuration.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/bd1e25dd-48b0-4d33-90f4-1468d822f2be&quot;&gt;https://github.com/user-attachments/assets/bd1e25dd-48b0-4d33-90f4-1468d822f2be&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Works out of the box with no additional configuration&lt;/li&gt; 
 &lt;li&gt;Updates on every keystroke (0.5-4ms async, single core)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/saghen/frizbee&quot;&gt;Typo resistant fuzzy&lt;/a&gt; with frecency and proximity bonus&lt;/li&gt; 
 &lt;li&gt;Extensive LSP support (&lt;a href=&quot;https://cmp.saghen.dev/development/lsp-tracker&quot;&gt;tracker&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/configuration/snippets.html&quot;&gt;Snippet support&lt;/a&gt;: native &lt;code&gt;vim.snippet&lt;/code&gt; (including &lt;code&gt;friendly-snippets&lt;/code&gt;), &lt;code&gt;LuaSnip&lt;/code&gt; and &lt;code&gt;mini.snippets&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;External sources support (&lt;a href=&quot;https://cmp.saghen.dev/configuration/sources.html#community-sources&quot;&gt;community sources&lt;/a&gt; and &lt;a href=&quot;https://github.com/saghen/blink.compat&quot;&gt;compatibility layer for &lt;code&gt;nvim-cmp&lt;/code&gt; sources&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/configuration/completion.html#auto-brackets&quot;&gt;Auto-bracket support&lt;/a&gt; based on semantic tokens&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/configuration/signature.html&quot;&gt;Signature help&lt;/a&gt; (experimental, opt-in)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/modes/cmdline.html&quot;&gt;Command line completion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/modes/term&quot;&gt;Terminal completion&lt;/a&gt; (0.11+ only! No source for shell completions exists yet, contributions welcome!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/#compared-to-built-in-completion&quot;&gt;Comparison with built-in completion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/#compared-to-nvim-cmp&quot;&gt;Comparison with nvim-cmp&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Head over to the &lt;a href=&quot;https://cmp.saghen.dev/installation&quot;&gt;documentation website&lt;/a&gt; for installation instructions and configuration options.&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/&quot;&gt;@hrsh7th&lt;/a&gt; nvim-cmp used as inspiration and cmp-path/cmp-cmdline implementations modified for path/cmdline sources&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/garymjr&quot;&gt;@garymjr&lt;/a&gt; nvim-snippets implementation modified for snippets source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/redxtech&quot;&gt;@redxtech&lt;/a&gt; Help with design and testing&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aaditya-sahay&quot;&gt;@aaditya-sahay&lt;/a&gt; Help with rust, design and testing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stefanboca&quot;&gt;@stefanboca&lt;/a&gt; Author of &lt;a href=&quot;https://github.com/saghen/blink.compat&quot;&gt;blink.compat&lt;/a&gt; and maintainer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/soifou&quot;&gt;@soifou&lt;/a&gt; Maintainer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lopi-py&quot;&gt;@lopi-py&lt;/a&gt; Windowing code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scottmckendry&quot;&gt;@scottmckendry&lt;/a&gt; CI and prebuilt binaries&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Balssh&quot;&gt;@balssh&lt;/a&gt; + &lt;a href=&quot;https://github.com/konradmalik&quot;&gt;@konradmalik&lt;/a&gt; Nix flake, nixpkg and nixvim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/abeldekat&quot;&gt;@abeldekat&lt;/a&gt; mini.snippets source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FelipeLema&quot;&gt;@FelipeLema&lt;/a&gt; vsnip source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wurli&quot;&gt;@wurli&lt;/a&gt; Terminal completions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mikavilpas&quot;&gt;@mikavilpas&lt;/a&gt; + &lt;a href=&quot;https://github.com/xzbdmw&quot;&gt;@xzbdmw&lt;/a&gt; Dot-repeat (&lt;code&gt;.&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FerretDetective&quot;&gt;@FerretDetective&lt;/a&gt; &lt;code&gt;complete_func&lt;/code&gt; source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/krovuxdev&quot;&gt;@krovuxdev&lt;/a&gt; Community moderation and help&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nvimtools/none-ls.nvim</title>
      <link>https://github.com/nvimtools/none-ls.nvim</link>
      <description>&lt;p&gt;null-ls.nvim reloaded / Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;none-ls.nvim&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt; Reloaded, maintained by the community.&lt;/p&gt; 
&lt;p&gt;Only the repo name is changed for compatibility concerns. All the API and future changes will keep in place as-is.&lt;/p&gt; 
&lt;h2&gt;Migration&lt;/h2&gt; 
&lt;p&gt;Replace &lt;code&gt;jose-elias-alvarez/null-ls.nvim&lt;/code&gt; with &lt;code&gt;nvimtools/none-ls.nvim&lt;/code&gt; in your choice of package manager.&lt;/p&gt; 
&lt;p&gt;That&#39;s it.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Open a pull request to become a collaborator. If you have contributed to &lt;code&gt;null-ls.nvim&lt;/code&gt; before, simply open an issue or comment on that commit.&lt;/p&gt; 
&lt;p&gt;If you want to make changes, open a new pull request. Find another collaborator to review your changes, as a review is required for the PR to be merged by yourself (subject to change if there are more collaborators in the future).&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;null-ls.nvim&lt;/h1&gt; 
&lt;p&gt;Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.&lt;/p&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;Neovim&#39;s LSP ecosystem is growing, and plugins like &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt; make it a joy to work with LSP features like code actions and diagnostics.&lt;/p&gt; 
&lt;p&gt;Unlike the VS Code and coc.nvim ecosystems, Neovim doesn&#39;t provide a way for non-LSP sources to hook into its LSP client. null-ls is an attempt to bridge that gap and simplify the process of creating, sharing, and setting up LSP sources using pure Lua.&lt;/p&gt; 
&lt;p&gt;null-ls is also an attempt to reduce the boilerplate required to set up general-purpose language servers and improve performance by removing the need for external processes.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;null-ls is in &lt;strong&gt;beta status&lt;/strong&gt;. Please see below for steps to follow if something doesn&#39;t work the way you expect (or doesn&#39;t work at all).&lt;/p&gt; 
&lt;p&gt;null-ls is developed on and tested against the latest stable version of Neovim. Support for versions built from &lt;code&gt;HEAD&lt;/code&gt; is provided on a best-effort basis, and users are encouraged to contribute fixes to any issues exclusive to these versions.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;null-ls sources are able to hook into the following LSP features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Code actions&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Diagnostics (file- and project-level)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Formatting (including range formatting)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Hover&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Completion&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;null-ls includes built-in sources for each of these features to provide out-of-the-box functionality. See &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTINS.md&quot;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTIN_CONFIG.md&quot;&gt;BUILTIN_CONFIG&lt;/a&gt; for instructions on how to set up and configure these sources.&lt;/p&gt; 
&lt;p&gt;null-ls also provides helpers to streamline the process of spawning and transforming the output of command-line processes into an LSP-friendly format. If you want to create your own source, either for personal use or for a plugin, see &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/HELPERS.md&quot;&gt;HELPERS&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;Install null-ls using your favorite package manager. The plugin depends on &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt;, which you are (probably) already using.&lt;/p&gt; 
&lt;p&gt;To get started, you must set up null-ls and register at least one source. See &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/BUILTINS.md&quot;&gt;BUILTINS&lt;/a&gt; for a list of available built-in sources and &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/CONFIG.md&quot;&gt;CONFIG&lt;/a&gt; for information about setting up and configuring null-ls.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local null_ls = require(&quot;null-ls&quot;)

null_ls.setup({
    sources = {
        null_ls.builtins.formatting.stylua,
        null_ls.builtins.completion.spell,
        require(&quot;none-ls.diagnostics.eslint&quot;), -- requires none-ls-extras.nvim
    },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The definitive source for information about null-ls is its &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/MAIN.md&quot;&gt;documentation&lt;/a&gt;, which contains information about how null-ls works, how to set it up, and how to create sources.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions to add new features and built-ins for any language are always welcome. See &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/doc/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for guidelines.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;Parsing buffer content&lt;/h3&gt; 
&lt;p&gt;The following example demonstrates a diagnostic source that will parse the current buffer&#39;s content and show instances of the word &lt;code&gt;really&lt;/code&gt; as LSP warnings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local null_ls = require(&quot;null-ls&quot;)

local no_really = {
    method = null_ls.methods.DIAGNOSTICS,
    filetypes = { &quot;markdown&quot;, &quot;text&quot; },
    generator = {
        fn = function(params)
            local diagnostics = {}
            -- sources have access to a params object
            -- containing info about the current file and editor state
            for i, line in ipairs(params.content) do
                local col, end_col = line:find(&quot;really&quot;)
                if col and end_col then
                    -- null-ls fills in undefined positions
                    -- and converts source diagnostics into the required format
                    table.insert(diagnostics, {
                        row = i,
                        col = col,
                        end_col = end_col + 1,
                        source = &quot;no-really&quot;,
                        message = &quot;Don&#39;t use &#39;really!&#39;&quot;,
                        severity = vim.diagnostic.severity.WARN,
                    })
                end
            end
            return diagnostics
        end,
    },
}

null_ls.register(no_really)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Parsing CLI program output&lt;/h3&gt; 
&lt;p&gt;null-ls includes helpers to simplify the process of spawning and capturing the output of CLI programs. This example shows how to pass the content of the current buffer to &lt;code&gt;markdownlint&lt;/code&gt; via &lt;code&gt;stdin&lt;/code&gt; and convert its output (which it sends to &lt;code&gt;stderr&lt;/code&gt;) into LSP diagnostics:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local null_ls = require(&quot;null-ls&quot;)
local helpers = require(&quot;null-ls.helpers&quot;)

local markdownlint = {
    method = null_ls.methods.DIAGNOSTICS,
    filetypes = { &quot;markdown&quot; },
    -- null_ls.generator creates an async source
    -- that spawns the command with the given arguments and options
    generator = null_ls.generator({
        command = &quot;markdownlint&quot;,
        args = { &quot;--stdin&quot; },
        to_stdin = true,
        from_stderr = true,
        -- choose an output format (raw, json, or line)
        format = &quot;line&quot;,
        check_exit_code = function(code, stderr)
            local success = code &amp;lt;= 1

            if not success then
                -- can be noisy for things that run often (e.g. diagnostics), but can
                -- be useful for things that run on demand (e.g. formatting)
                print(stderr)
            end

            return success
        end,
        -- use helpers to parse the output from string matchers,
        -- or parse it manually with a function
        on_output = helpers.diagnostics.from_patterns({
            {
                pattern = [[:(%d+):(%d+) [%w-/]+ (.*)]],
                groups = { &quot;row&quot;, &quot;col&quot;, &quot;message&quot; },
            },
            {
                pattern = [[:(%d+) [%w-/]+ (.*)]],
                groups = { &quot;row&quot;, &quot;message&quot; },
            },
        }),
    }),
}

null_ls.register(markdownlint)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Something isn&#39;t working! What do I do?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you run into issues when using null-ls, please follow the steps below and &lt;strong&gt;do not&lt;/strong&gt; open an issue on the Neovim repository. null-ls is not an actual LSP server, so we need to determine whether issues are specific to this plugin before sending anything upstream.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure your configuration is in line with the latest version of this document.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/#how-do-i-enable-debug-mode-and-get-debug-output&quot;&gt;Enable debug mode&lt;/a&gt; and check the output of your source(s). If the CLI program is not properly configured or is otherwise not running as expected, that&#39;s an issue with the program, not null-ls.&lt;/li&gt; 
 &lt;li&gt;Check the documentation for available configuration options that might solve your issue.&lt;/li&gt; 
 &lt;li&gt;If you&#39;re having trouble configuring null-ls or want to know how to achieve a specific result, open a discussion.&lt;/li&gt; 
 &lt;li&gt;If you believe the issue is with null-ls itself or you want to request a new feature, open an issue and provide the information requested in the issue template.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;My &lt;code&gt;:checkhealth&lt;/code&gt; output is wrong! What do I do?&lt;/h3&gt; 
&lt;p&gt;Checking whether a given command is executable is tricky, and null-ls&#39; health check doesn&#39;t handle all cases. null-ls&#39; internal command resolution is independent of its health check output, which is for informational purposes.&lt;/p&gt; 
&lt;p&gt;If you&#39;re not sure whether a given command is running as expected, &lt;a href=&quot;https://raw.githubusercontent.com/nvimtools/none-ls.nvim/main/#how-do-i-enable-debug-mode-and-get-debug-output&quot;&gt;enable debug mode&lt;/a&gt; and check your log.&lt;/p&gt; 
&lt;h3&gt;How do I format files?&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;. See &lt;code&gt;:help vim.lsp.buf.format()&lt;/code&gt; for usage instructions.&lt;/p&gt; 
&lt;h3&gt;How do I format files on save?&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvimtools/none-ls.nvim/wiki/Formatting-on-save&quot;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How do I stop Neovim from asking me which server I want to use for formatting?&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvimtools/none-ls.nvim/wiki/Avoiding-LSP-formatting-conflicts&quot;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How do I view project-level diagnostics?&lt;/h3&gt; 
&lt;p&gt;For a built-in solution, use &lt;code&gt;:lua vim.diagnostic.setqflist()&lt;/code&gt;. You can also use a plugin like &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How do I enable debug mode and get debug output?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Set &lt;code&gt;debug&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your config:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;null-ls&quot;).setup({
    debug = true,
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;:NullLsLog&lt;/code&gt; to open your debug log in the current Neovim instance or &lt;code&gt;:NullLsInfo&lt;/code&gt; to get the path to your debug log.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;As with LSP logging, debug mode will slow down Neovim. Make sure to disable the option after you&#39;ve collected the information you&#39;re looking for.&lt;/p&gt; 
&lt;h3&gt;Does it work with (other plugin)?&lt;/h3&gt; 
&lt;p&gt;In most cases, yes. null-ls tries to act like an actual LSP server as much as possible, so it should work seamlessly with most LSP-related plugins. If you run into problems, please try to determine which plugin is causing them and open an issue.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nvimtools/none-ls.nvim/wiki/Compatibility-with-other-plugins&quot;&gt;This wiki page&lt;/a&gt; mentions plugins that require specific configuration options / tweaks to work with null-ls.&lt;/p&gt; 
&lt;h3&gt;How does it work?&lt;/h3&gt; 
&lt;p&gt;Thanks to hard work by @folke, the plugin wraps the mechanism Neovim uses to spawn language servers to start a client entirely in-memory. The client attaches to buffers that match defined sources and receives and responds to requests, document changes, and other events from Neovim.&lt;/p&gt; 
&lt;h3&gt;Will it affect my performance?&lt;/h3&gt; 
&lt;p&gt;More testing is necessary, but since null-ls uses pure Lua and runs entirely in memory without any external processes, in most cases it should run faster than similar solutions. If you notice that performance is worse with null-ls than with an alternative, please open an issue!&lt;/p&gt; 
&lt;h3&gt;I am seeing a formatting &lt;code&gt;timeout&lt;/code&gt; error message&lt;/h3&gt; 
&lt;p&gt;This issue occurs when a formatter takes longer than the default timeout value. This is an automatic mechanism and controlled by Neovim. You might want to increase the timeout in your call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.buf.format({ timeout_ms = 2000 })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;The test suite includes unit and integration tests and depends on plenary.nvim. Run &lt;code&gt;make test&lt;/code&gt; in the root of the project to run the suite or &lt;code&gt;FILE=filename_spec.lua make test-file&lt;/code&gt; to test an individual file.&lt;/p&gt; 
&lt;p&gt;To avoid a dependency on any plugin managers, the test suite will set up its plugin runtime under the &lt;code&gt;./tests&lt;/code&gt; directory to always have a plenary version available.&lt;/p&gt; 
&lt;p&gt;If you run into plenary-related issues while running the tests, make sure you have an up-to-date version of the plugin by clearing that cache with: &lt;code&gt;make clean&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;All tests expect to run on the latest release version of Neovim and are not guaranteed to work on versions built from &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/mattn/efm-langserver&quot;&gt;efm-langserver&lt;/a&gt; and &lt;a href=&quot;https://github.com/iamcco/diagnostic-languageserver&quot;&gt;diagnostic-languageserver&lt;/a&gt;: general-purpose language servers that can provide formatting and diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-lint&quot;&gt;nvim-lint&lt;/a&gt;: a Lua plugin that focuses on providing diagnostics from CLI output.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/mhartington/formatter.nvim&quot;&gt;formatter.nvim&lt;/a&gt;: a Lua plugin that (surprise) focuses on formatting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/lewis6991/hover.nvim&quot;&gt;hover.nvim&lt;/a&gt;: Hover plugin framework for Neovim.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>koreader/koreader</title>
      <link>https://github.com/koreader/koreader</link>
      <description>&lt;p&gt;An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Cervantes, Kindle, Kobo, PocketBook and Android devices&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://koreader.rocks&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/koreader/koreader.github.io/master/koreader-logo.png&quot; alt=&quot;KOReader&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;KOReader is a document viewer primarily aimed at e-ink readers.&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/COPYING&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/koreader/koreader&quot; alt=&quot;AGPL Licence&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/koreader/koreader.svg?sanitize=true&quot; alt=&quot;Latest release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/koreader/koreader&quot;&gt;&lt;img src=&quot;https://img.shields.io/gitter/room/koreader/koreader?color=red&quot; alt=&quot;Gitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://www.mobileread.com/forums/forumdisplay.php?f=276&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/forum-on_mobileread-lightgrey&quot; alt=&quot;Mobileread&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/koreader/koreader&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/koreader/koreader.svg?style=shield&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/koreader/koreader&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/koreader/koreader/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;Coverage Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hosted.weblate.org/engage/koreader/?utm_source=widget&quot;&gt;&lt;img src=&quot;https://hosted.weblate.org/widgets/koreader/-/koreader/svg-badge.svg?sanitize=true&quot; alt=&quot;Weblate Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/releases&quot;&gt;Download&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/user_guide/&quot;&gt;User guide&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;Wiki&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/doc/&quot;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Main features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;portable&lt;/strong&gt;: runs on embedded devices (Cervantes, Kindle, Kobo, PocketBook, reMarkable), Android and Linux computers. Developers can run a KOReader emulator in Linux and MacOS.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;multi-format documents&lt;/strong&gt;: supports fixed page formats (PDF, DjVu, CBT, CBZ) and reflowable e-book formats (EPUB, FB2, Mobi, DOC, RTF, HTML, CHM, TXT). Scanned PDF/DjVu documents can also be reflowed with the built-in K2pdfopt library. &lt;a href=&quot;https://github.com/koreader/koreader/wiki/ZIP&quot;&gt;ZIP files&lt;/a&gt; are also supported for some formats.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;full-featured reading&lt;/strong&gt;: multi-lingual user interface with a highly customizable reader view and many typesetting options. You can set arbitrary page margins, override line spacing and choose external fonts and styles. It has multi-lingual hyphenation dictionaries bundled into the application.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;integrated&lt;/strong&gt; with &lt;em&gt;calibre&lt;/em&gt; (search metadata, receive ebooks wirelessly, browse library via OPDS), &lt;em&gt;Wallabag&lt;/em&gt;, &lt;em&gt;Wikipedia&lt;/em&gt;, &lt;em&gt;Google Translate&lt;/em&gt; and other content providers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;optimized for e-ink devices&lt;/strong&gt;: custom UI without animation, with paginated menus, adjustable text contrast, and easy zoom to fit content or page in paged media.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;extensible&lt;/strong&gt;: via plugins&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;fast&lt;/strong&gt;: on some older devices, it has been measured to have less than half the page-turn delay as the built in reading software.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;and much more&lt;/strong&gt;: look up words with StarDict dictionaries / Wikipedia, add your own online OPDS catalogs and RSS feeds, over-the-air software updates, an FTP client, an SSH server, …&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please check the &lt;a href=&quot;http://koreader.rocks/user_guide/&quot;&gt;user guide&lt;/a&gt; and the &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;wiki&lt;/a&gt; to discover more features and to help us document them.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-menu-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-footnotes-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary.png&quot;&gt;&lt;img src=&quot;https://github.com/koreader/koreader-artwork/raw/master/koreader-dictionary-thumbnail.png&quot; alt=&quot;&quot; width=&quot;200px&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Please follow the model specific steps for your device:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Android-devices&quot;&gt;Android&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-BQ-devices&quot;&gt;Cervantes&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Kindle-devices&quot;&gt;Kindle&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Kobo-devices&quot;&gt;Kobo&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-desktop-linux&quot;&gt;Linux&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-PocketBook-devices&quot;&gt;Pocketbook&lt;/a&gt; • &lt;a href=&quot;https://github.com/koreader/koreader/wiki/Installation-on-Remarkable&quot;&gt;reMarkable&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building.md&quot;&gt;Setting up a build environment&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Collaborating_with_Git.md&quot;&gt;Collaborating with Git&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Building_targets.md&quot;&gt;Building targets&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/koreader/koreader/master/doc/Porting.md&quot;&gt;Porting&lt;/a&gt; • &lt;a href=&quot;http://koreader.rocks/doc/&quot;&gt;Developer docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;KOReader is developed and supported by volunteers all around the world. There are many ways you can help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Abug&quot;&gt;fix bugs&lt;/a&gt; and &lt;a href=&quot;https://github.com/koreader/koreader/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&quot;&gt;implement new features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hosted.weblate.org/engage/koreader/?utm_source=widget&quot;&gt;translate the program into your language&lt;/a&gt; or improve an existing translation&lt;/li&gt; 
 &lt;li&gt;document lesser-known features on the &lt;a href=&quot;https://github.com/koreader/koreader/wiki&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;help others with your knowledge on the &lt;a href=&quot;http://www.mobileread.com/forums/forumdisplay.php?f=276&quot;&gt;forum&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Right now we only support &lt;a href=&quot;https://liberapay.com/KOReader&quot;&gt;liberapay&lt;/a&gt; donations.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/koreader/koreader/commits/master&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/koreader/koreader?color=orange&quot; alt=&quot;Last commit&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/koreader/koreader/pulse&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/koreader/koreader&quot; alt=&quot;Commit activity&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mistweaverco/kulala.nvim</title>
      <link>https://github.com/mistweaverco/kulala.nvim</link>
      <description>&lt;p&gt;A fully-featured 🤏 HTTP-client 🐼 interface 🖥️ for Neovim ❤️.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/logo.svg?sanitize=true&quot; alt=&quot;Kulala Logo&quot; /&gt;&lt;/p&gt; 
 &lt;h1&gt;kulala.nvim&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/mistweaverco/kulala.nvim/graphs/contributors&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/badge-made-with-love.svg?sanitize=true&quot; alt=&quot;Made with love&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mistweaverco/kulala.nvim/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/mistweaverco/kulala.nvim?style=for-the-badge&quot; alt=&quot;GitHub release (latest by date)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/QyVQmfY4Rt&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/badge-discord.svg?sanitize=true&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/mistweaverco/kulala.nvim/actions/workflows/tests.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/mistweaverco/kulala.nvim/tests.yml?label=main&amp;amp;branch=main&amp;amp;style=for-the-badge&quot; alt=&quot;Main status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mistweaverco/kulala.nvim/actions/workflows/tests.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/mistweaverco/kulala.nvim/tests.yml?branch=develop&amp;amp;label=develop&amp;amp;style=for-the-badge&quot; alt=&quot;Develop status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/requirements&quot;&gt;Requirements&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://neovim.getkulala.net/docs/usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://neovim.getkulala.net/docs/usage/http-file-spec&quot;&gt;HTTP File Spec&lt;/a&gt; • &lt;a href=&quot;https://github.com/mistweaverco/kulala-github-action&quot;&gt;Kulala GH Action&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;A fully-featured REST Client Interface for Neovim.&lt;/p&gt; 
 &lt;p&gt;Kulala is swahili for &quot;rest&quot; or &quot;relax&quot;.&lt;/p&gt; 
 &lt;p&gt;It allows you to make HTTP requests from within Neovim.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mistweaverco/kulala.nvim/main/assets/demo.gif&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;h2&gt;Features&lt;/h2&gt; 
 &lt;p&gt;Protocols: HTTP, GRPC, GraphQL, WebSocket, Streaming&lt;/p&gt; 
 &lt;p&gt;Specs: HTTP File Spec and IntelliJ HTTP Client compliant&lt;/p&gt; 
 &lt;p&gt;Variables: Environment, Document, Request, Dynamic, Prompt, &lt;code&gt;http-client.env&lt;/code&gt; files&lt;/p&gt; 
 &lt;p&gt;Importing and running requests from external &lt;code&gt;*.http&lt;/code&gt; files&lt;/p&gt; 
 &lt;p&gt;Importing and saving request/response data to/from external files&lt;/p&gt; 
 &lt;p&gt;JS and Lua scripting: Pre-request, Post-request, Conditional, Inline, External&lt;/p&gt; 
 &lt;p&gt;Authentication: Basic, Bearer, Digest, NTLM, OAuth2, Negotiate, AWS, SSL&lt;/p&gt; 
 &lt;p&gt;Response formatting and live filtering&lt;/p&gt; 
 &lt;p&gt;Assertions, automated testing and reporting&lt;/p&gt; 
 &lt;p&gt;Built-in LSP completion and formatting&lt;/p&gt; 
 &lt;p&gt;Import/export to/from Postman, OpenAPI, Bruno&lt;/p&gt; 
 &lt;p&gt;CLI tooling and CI hooks&lt;/p&gt; 
 &lt;p&gt;Scratchpad: for making requests&lt;/p&gt; 
 &lt;p&gt;100% Compatibility with IntelliJ HTTP Client&lt;/p&gt; 
 &lt;h1&gt;•&lt;/h1&gt; 
 &lt;p&gt;Together with our standalone products &lt;a href=&quot;https://github.com/mistweaverco/kulala-ls&quot;&gt;Kulala Language Server&lt;/a&gt; and &lt;a href=&quot;https://github.com/mistweaverco/kulala-fmt&quot;&gt;Kulala Formatter&lt;/a&gt;, we aim to provide the best REST Client experience on the web without leaving your favourite editor!&lt;/p&gt; 
 &lt;h1&gt;••&lt;/h1&gt; 
 &lt;p&gt;Kulala team loves feature requests and feedback, so if you have any ideas or suggestions, please let us know!&lt;br /&gt; We will be happy to implement them ❤️&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Requires Neovim 0.10.0+ and cURL.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/requirements&quot;&gt;requirements&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Via &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lazy&quot;).setup({
  {
    &quot;mistweaverco/kulala.nvim&quot;,
    keys = {
      { &quot;&amp;lt;leader&amp;gt;Rs&quot;, desc = &quot;Send request&quot; },
      { &quot;&amp;lt;leader&amp;gt;Ra&quot;, desc = &quot;Send all requests&quot; },
      { &quot;&amp;lt;leader&amp;gt;Rb&quot;, desc = &quot;Open scratchpad&quot; },
    },
    ft = {&quot;http&quot;, &quot;rest&quot;},
    opts = {
      global_keymaps = false,
      global_keymaps_prefix = &quot;&amp;lt;leader&amp;gt;R&quot;,
      kulala_keymaps_prefix = &quot;&quot;,
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] By default global keymaps are disabled, change to &lt;code&gt;global_keymaps = true&lt;/code&gt; to get a complete set of key mappings for Kulala. Check the &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/keymaps&quot;&gt;keymaps documentation&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See complete &lt;a href=&quot;https://neovim.getkulala.net/docs/getting-started/configuration-options&quot;&gt;configuration options&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Honorable mentions&lt;/h2&gt; 
&lt;h3&gt;rest.nvim&lt;/h3&gt; 
&lt;p&gt;For getting this project started.&lt;/p&gt; 
&lt;p&gt;This project was heavily inspired by the idea of having a REST client in Neovim.&lt;/p&gt; 
&lt;p&gt;The actual state of &lt;a href=&quot;https://github.com/rest-nvim/rest.nvim&quot;&gt;rest.nvim&lt;/a&gt; as archived kicked off the development of kulala.nvim.&lt;/p&gt; 
&lt;h3&gt;curl.nvim&lt;/h3&gt; 
&lt;p&gt;If you want a simple scratchpad for making HTTP requests, check out &lt;a href=&quot;https://github.com/oysandvik94/curl.nvim&quot;&gt;curl.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It&#39;s very different to this project, but it&#39;s a great tool for making HTTP requests from within Neovim and maybe just your cup of tea.&lt;/p&gt; 
&lt;h3&gt;httpbin.org&lt;/h3&gt; 
&lt;p&gt;For providing a great service for testing HTTP requests and making it in all the kulala examples.&lt;/p&gt; 
&lt;p&gt;Thanks for making it easy to test and develop this plugin.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nvim-neotest/neotest</title>
      <link>https://github.com/nvim-neotest/neotest</link>
      <description>&lt;p&gt;An extensible framework for interacting with tests within NeoVim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neotest&lt;/h1&gt; 
&lt;p&gt;A framework for interacting with tests within NeoVim.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/24252670/166156510-440d9047-c76e-4967-8c17-944399222645.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This is early stage software.&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#supported-runners&quot;&gt;Supported Runners&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#consumers&quot;&gt;Consumers&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#output-window&quot;&gt;Output Window&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#summary-window&quot;&gt;Summary Window&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#diagnostic-messages&quot;&gt;Diagnostic Messages&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#status-signs&quot;&gt;Status Signs&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#strategies&quot;&gt;Strategies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#writing-adapters&quot;&gt;Writing Adapters&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#parsing-tests&quot;&gt;Parsing tests in a directory&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neotest/neotest/master/#collecting-results&quot;&gt;Collecting results&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;See &lt;code&gt;:h neotest&lt;/code&gt; for details on neotest is designed and how to interact with it programmatically.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/neotest/neotest&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/neotest/neotest?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Neotest uses &lt;a href=&quot;https://github.com/nvim-neotest/nvim-nio&quot;&gt;nvim-nio&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim/&quot;&gt;plenary.nvim&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Most adapters will also require &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Neotest uses the &lt;code&gt;CursorHold&lt;/code&gt; event. This uses the &lt;code&gt;updatetime&lt;/code&gt; setting which is by default very high, and lowering this can lead to excessive writes to disk. It&#39;s recommended to use &lt;a href=&quot;https://github.com/antoinemadec/FixCursorHold.nvim&quot;&gt;https://github.com/antoinemadec/FixCursorHold.nvim&lt;/a&gt; which allows detaching &lt;code&gt;updatetime&lt;/code&gt; from the frequency of the &lt;code&gt;CursorHold&lt;/code&gt; event. The repo claims it is no longer needed but it is still recommended (See &lt;a href=&quot;https://github.com/antoinemadec/FixCursorHold.nvim/issues/13&quot;&gt;this issue&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;Install with your favourite package manager alongside nvim-dap&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Shougo/dein.vim&quot;&gt;&lt;strong&gt;dein&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call dein#add(&quot;nvim-lua/plenary.nvim&quot;)
call dein#add(&quot;antoinemadec/FixCursorHold.nvim&quot;)
call dein#add(&quot;nvim-treesitter/nvim-treesitter&quot;)
call dein#add(&quot;nvim-neotest/nvim-nio&quot;)
call dein#add(&quot;nvim-neotest/neotest&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;antoinemadec/FixCursorHold.nvim&#39;
Plug &#39;nvim-treesitter/nvim-treesitter&#39;
Plug &#39;nvim-neotest/nvim-nio&#39;
Plug &#39;nvim-neotest/neotest&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &quot;nvim-neotest/neotest&quot;,
  requires = {
    &quot;nvim-neotest/nvim-nio&quot;,
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;antoinemadec/FixCursorHold.nvim&quot;,
    &quot;nvim-treesitter/nvim-treesitter&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;nvim-neotest/neotest&quot;,
  dependencies = {
    &quot;nvim-neotest/nvim-nio&quot;,
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;antoinemadec/FixCursorHold.nvim&quot;,
    &quot;nvim-treesitter/nvim-treesitter&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get started you will also need to install an adapter for your test runner. See the adapter&#39;s documentation for their specific setup instructions.&lt;/p&gt; 
&lt;h3&gt;Supported Runners&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Test Runner&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Adapter&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;pytest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/nvim-neotest/neotest-python&quot;&gt;neotest-python&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;python-unittest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/nvim-neotest/neotest-python&quot;&gt;neotest-python&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;plenary&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/nvim-neotest/neotest-plenary&quot;&gt;neotest-plenary&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;go&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/akinsho/neotest-go&quot;&gt;neotest-go&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://github.com/fredrikaverpil/neotest-golang&quot;&gt;neotest-golang&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;jest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/haydenmeade/neotest-jest&quot;&gt;neotest-jest&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;vitest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/marilari88/neotest-vitest&quot;&gt;neotest-vitest&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;bun&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/arthur944/neotest-bun&quot;&gt;neotest-bun&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;stenciljs&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/benelan/neotest-stenciljs&quot;&gt;neotest-stenciljs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;playwright&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/thenbe/neotest-playwright&quot;&gt;neotest-playwright&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;rspec&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/olimorris/neotest-rspec&quot;&gt;neotest-rspec&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;minitest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/zidhuss/neotest-minitest&quot;&gt;neotest-minitest&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;dart, flutter&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/sidlatau/neotest-dart&quot;&gt;neotest-dart&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;testthat&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/shunsambongi/neotest-testthat&quot;&gt;neotest-testthat&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;phpunit&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/olimorris/neotest-phpunit&quot;&gt;neotest-phpunit&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;pest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/V13Axel/neotest-pest&quot;&gt;neotest-pest&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;rust (treesitter)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/rouge8/neotest-rust&quot;&gt;neotest-rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;rust (LSP)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim&quot;&gt;rustaceanvim&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;elixir&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jfpedroza/neotest-elixir&quot;&gt;neotest-elixir&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;dotnet (treesitter)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Issafalcon/neotest-dotnet&quot;&gt;neotest-dotnet&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;dotnet (vstest)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/nsidorenco/neotest-vstest&quot;&gt;neotest-vstest&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;scala&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/stevanmilic/neotest-scala&quot;&gt;neotest-scala&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;haskell&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/mrcjkb/neotest-haskell&quot;&gt;neotest-haskell&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;deno&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/MarkEmmons/neotest-deno&quot;&gt;neotest-deno&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;java&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/rcasia/neotest-java&quot;&gt;neotest-java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;kotlin&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/codymikol/neotest-kotlin.nvim&quot;&gt;neotest-kotlin&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;foundry&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/llllvvuu/neotest-foundry&quot;&gt;neotest-foundry&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;zig&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/lawrence-laz/neotest-zig&quot;&gt;neotest-zig&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;c++ (google test)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/alfaix/neotest-gtest&quot;&gt;neotest-gtest&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;gradle&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/weilbith/neotest-gradle&quot;&gt;neotest-gradle&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;bazel&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/sluongng/neotest-bazel&quot;&gt;neotest-bazel&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;bash&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/rcasia/neotest-bash&quot;&gt;neotest-bash&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;hardhat&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/TheSnakeWitcher/hardhat.nvim&quot;&gt;neotest-hardhat&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;swift (Swift Testing)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/mmllr/neotest-swift-testing&quot;&gt;neotest-swift-testing&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For any runner without an adapter you can use &lt;a href=&quot;https://github.com/nvim-neotest/neotest-vim-test&quot;&gt;neotest-vim-test&lt;/a&gt; which supports any runner that vim-test supports. The vim-test adapter does not support some of the more advanced features such as error locations or per-test output. If you&#39;re using the vim-test adapter then install &lt;a href=&quot;https://github.com/vim-test/vim-test/&quot;&gt;vim-test&lt;/a&gt; too.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Provide your adapters and other config to the setup function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neotest&quot;).setup({
  adapters = {
    require(&quot;neotest-python&quot;)({
      dap = { justMyCode = false },
    }),
    require(&quot;neotest-plenary&quot;),
    require(&quot;neotest-vim-test&quot;)({
      ignore_file_types = { &quot;python&quot;, &quot;vim&quot;, &quot;lua&quot; },
    }),
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;code&gt;:h neotest.Config&lt;/code&gt; for configuration options and &lt;code&gt;:h neotest.setup()&lt;/code&gt; for the default values.&lt;/p&gt; 
&lt;p&gt;It is highly recommended to use &lt;a href=&quot;https://github.com/folke/lazydev.nvim&quot;&gt;lazydev.nvim&lt;/a&gt; to enable type checking for neotest to get type checking, documentation and autocompletion for all API functions.&lt;/p&gt; 
&lt;p&gt;The default icons use &lt;a href=&quot;https://github.com/microsoft/vscode-codicons&quot;&gt;codicons&lt;/a&gt;. It&#39;s recommended to use this &lt;a href=&quot;https://github.com/ChristianChiarulli/neovim-codicons&quot;&gt;fork&lt;/a&gt; which fixes alignment issues for the terminal. If your terminal doesn&#39;t support font fallback and you need to have icons included in your font, you can patch it via &lt;a href=&quot;https://github.com/ryanoasis/nerd-fonts#option-8-patch-your-own-font&quot;&gt;Font Patcher&lt;/a&gt;. There is a simple step by step guide &lt;a href=&quot;https://github.com/mortepau/codicons.nvim#how-to-patch-fonts&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The interface for using neotest is very simple.&lt;/p&gt; 
&lt;p&gt;Run the nearest test&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neotest&quot;).run.run()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the current file&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neotest&quot;).run.run(vim.fn.expand(&quot;%&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Debug the nearest test (requires nvim-dap and adapter support)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neotest&quot;).run.run({strategy = &quot;dap&quot;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;code&gt;:h neotest.run.run()&lt;/code&gt; for parameters.&lt;/p&gt; 
&lt;p&gt;Stop the nearest test, see &lt;code&gt;:h neotest.run.stop()&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neotest&quot;).run.stop()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attach to the nearest test, see &lt;code&gt;:h neotest.run.attach()&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neotest&quot;).run.attach()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Consumers&lt;/h2&gt; 
&lt;p&gt;For extra features neotest provides consumers which interact with the state of the tests and their results.&lt;/p&gt; 
&lt;p&gt;Some consumers will be passive while others can be interacted with.&lt;/p&gt; 
&lt;h3&gt;Watch Tests&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neotest.watch&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Watches files related to tests for changes and re-runs tests&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/24252670/229367494-6775d7f1-a8fb-461b-bbbd-d6124031293e.mp4&quot;&gt;https://user-images.githubusercontent.com/24252670/229367494-6775d7f1-a8fb-461b-bbbd-d6124031293e.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Output Window&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neotest.output&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Displays output of tests &lt;img src=&quot;https://user-images.githubusercontent.com/24252670/166143146-e7821fe9-c11c-4e21-9cc0-73989b51e8ed.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Displays per-test output &lt;img src=&quot;https://user-images.githubusercontent.com/24252670/166143189-0f51b544-3aec-4cfc-93d7-74f3d209aef6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Output Panel&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neotest.output_panel&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Records all output of tests over time in a single window &lt;img src=&quot;https://user-images.githubusercontent.com/24252670/201535290-d726c781-a780-4318-b595-a10832b9f191.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Summary Window&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neotest.summary&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Displays test suite structure from project root. &lt;img src=&quot;https://user-images.githubusercontent.com/24252670/166143333-df8b409f-d6f3-4d3d-a676-5f8a4a4cb8bb.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Provides mappings for running, attaching, stopping and showing output.&lt;/p&gt; 
&lt;h3&gt;Diagnostic Messages&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neotest.diagnostic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Use vim.diagnostic to display error messages where they occur while running.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/24252670/166143466-0fdea24c-6f0a-4199-9026-66f89d7d1dbc.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Status Signs&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neotest.status&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Displays the status of a test/namespace beside the beginning of the definition.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/24252670/166143402-b318ef91-c053-4973-b929-5ee97572f2c2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;See the help doc for a list of all consumers and their documentation.&lt;/p&gt; 
&lt;h2&gt;Strategies&lt;/h2&gt; 
&lt;p&gt;Strategies are methods of running tests. They provide the functionality to attach to running processes and so attaching will mean different things for different strategies.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Name&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;integrated&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Default strategy that will run a process in the background and allow opening a floating terminal to attach.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;dap&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Uses nvim-dap to debug tests (adapter must support providing an nvim-dap configuration)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Custom strategies can implemented by providing a function which takes a &lt;code&gt;neotest.RunSpec&lt;/code&gt; and returns an table that fits the &lt;code&gt;neotest.Process&lt;/code&gt; interface. Plenary&#39;s async library can be used to run asynchronously.&lt;/p&gt; 
&lt;h2&gt;Writing Adapters&lt;/h2&gt; 
&lt;p&gt;This section is for people wishing to develop their own neotest adapters. The documentation here and the underlying libraries are WIP and open to feedback/change. Please raise issues with any problems understanding or using the this doc. The best place to figure out how to create an adapter is by looking at the existing ones.&lt;/p&gt; 
&lt;p&gt;Adapters must fulfill an interface to run (defined &lt;a href=&quot;https://github.com/nvim-neotest/neotest/raw/master/lua/neotest/adapters/interface.lua&quot;&gt;here&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Much of the functionality is built around using a custom tree object that defines the structure of the test suite. There are helpers that adapters can use within their code (all defined under &lt;code&gt;neotest.lib&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;Adapters must solve three problems:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Parse tests&lt;/li&gt; 
 &lt;li&gt;Construct test commands&lt;/li&gt; 
 &lt;li&gt;Collect results&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Parsing Tests&lt;/h3&gt; 
&lt;p&gt;There are two stages to this, finding files which is often a simple file name check (it&#39;s OK if a test file has no actual tests in it) and parsing test files.&lt;/p&gt; 
&lt;p&gt;For languages supported by nvim-treesitter, the easiest way to parse tests is to use the neotest treesitter wrapper to parse a query to constuct a tree structure.&lt;/p&gt; 
&lt;p&gt;The query can define capture groups for tests and namespaces. Each type must have &lt;code&gt;&amp;lt;type&amp;gt;.name&lt;/code&gt; and &lt;code&gt;&amp;lt;type&amp;gt;.definition&lt;/code&gt; capture groups. They can be used multiple times in the query&lt;/p&gt; 
&lt;p&gt;Example from neotest-plenary:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local lib = require(&quot;neotest.lib&quot;)

function PlenaryNeotestAdapter.discover_positions(path)
  local query = [[
  ;; describe blocks
  ((function_call
      name: (identifier) @func_name (#match? @func_name &quot;^describe$&quot;)
      arguments: (arguments (_) @namespace.name (function_definition))
  )) @namespace.definition


  ;; it blocks
  ((function_call
      name: (identifier) @func_name
      arguments: (arguments (_) @test.name (function_definition))
  ) (#match? @func_name &quot;^it$&quot;)) @test.definition

  ;; async it blocks (async.it)
  ((function_call
      name: (
        dot_index_expression
          field: (identifier) @func_name
      )
      arguments: (arguments (_) @test.name (function_definition))
    ) (#match? @func_name &quot;^it$&quot;)) @test.definition
    ]]
  return lib.treesitter.parse_positions(path, query, { nested_namespaces = true })
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For languages unsupported by treesitter you can use regexes like neotest-vim-test or hook into the test runner.&lt;/p&gt; 
&lt;h3&gt;Constructing Test Commands&lt;/h3&gt; 
&lt;p&gt;This is the easiest part of writing an adapter. You need to handle the different types of positions that a user may run (directory, file, namespace and test).&lt;/p&gt; 
&lt;p&gt;If you are hooking into the runner, you may not be running the test runner command directly. neotest-python and neotest-plenary both are examples of this, with a script being used to run each runner to handle parsing results and storing them for result collection later.&lt;/p&gt; 
&lt;h3&gt;Collecting Results&lt;/h3&gt; 
&lt;p&gt;Collecting results will be the most involved process in the adapter, with complexity depending on the test runner and desired features.&lt;/p&gt; 
&lt;p&gt;For the most basic implementation an adapter can choose to only run tests individually and use the exit code as an indicator of the result (this is how neotest-vim-test works) but this impacts peformance and also loses out on more advanced features.&lt;/p&gt; 
&lt;p&gt;If tests can be run together then the adapter must provide results for at least each individual test. Results for namespaces, files and directories will be inferred from their child tests.&lt;/p&gt; 
&lt;p&gt;For collecting test specific error messages, error locations etc you&#39;ll need to parse output or hook into the runner. See neotest-python and neotest-plenary for examples on how this can be done.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iDvel/rime-ice</title>
      <link>https://github.com/iDvel/rime-ice</link>
      <description>&lt;p&gt;Rime 配置：雾凇拼音 | 长期维护的简体词库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;雾凇拼音&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL--3.0--only-34ad9b&quot; alt=&quot;License: GPL 3.0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/iDvel/rime-ice?filter=!nightly&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/actions/workflows/release.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/iDvel/rime-ice/release.yml&quot; alt=&quot;GitHub Actions Workflow Status&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/stars/iDvel/rime-ice&quot; alt=&quot;GitHub Repo stars&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;功能齐全，词库体验良好，长期更新修订。&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;a href=&quot;https://rime.im/&quot;&gt;Rime Input Method Engine / 中州韵输入法引擎&lt;/a&gt; 是一个跨平台的输入法算法框架。&lt;/p&gt; 
&lt;p&gt;这里是 Rime 的一份配置仓库，用户需要下载各平台对应的前端，并将此配置应用到配置目录。&lt;/p&gt; 
&lt;p&gt;雾凇拼音提供了一套开箱即用的完整配置，包含输入方案（全拼、常见双拼）、长期维护的开源词库及各项扩展功能。&lt;/p&gt; 
&lt;p&gt;详细介绍：&lt;a href=&quot;https://dvel.me/posts/rime-ice/&quot;&gt;Rime 配置：雾凇拼音&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/133&quot;&gt;常见问题&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/CHANGELOG.md&quot;&gt;更新日志&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;基本套路&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;简体 | 全拼 | 双拼&lt;/li&gt; 
 &lt;li&gt;主要功能 
  &lt;ul&gt; 
   &lt;li&gt;轻量的英文输入，支持中英混输&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://dvel.me/posts/make-rime-en-better/&quot;&gt;优化英文输入体验&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;拆字反查（&lt;kbd&gt;uU&lt;/kbd&gt;+拼音），拆字辅码（拼音+&lt;kbd&gt;`&lt;/kbd&gt;+拆字辅码）&lt;/li&gt; 
   &lt;li&gt;自整理的 Emoji&lt;/li&gt; 
   &lt;li&gt;以词定字（左右中括号：&lt;kbd&gt;[&lt;/kbd&gt;、&lt;kbd&gt;]&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;长词优先&lt;/li&gt; 
   &lt;li&gt;Unicode（&lt;kbd&gt;U&lt;/kbd&gt;+Unicode 码位）&lt;/li&gt; 
   &lt;li&gt;数字、人民币大写（&lt;kbd&gt;R&lt;/kbd&gt;+数字）&lt;/li&gt; 
   &lt;li&gt;日期、时间、星期（详见方案 &lt;code&gt;/date_translator&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;农历（转写：&lt;kbd&gt;N&lt;/kbd&gt;+八位数字；获取当前农历：全拼&lt;kbd&gt;nl&lt;/kbd&gt;，双拼&lt;kbd&gt;lunar&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;简易计算器（&lt;kbd&gt;cC&lt;/kbd&gt;+算式）&lt;/li&gt; 
   &lt;li&gt;常见错音错字提示&lt;/li&gt; 
   &lt;li&gt;置顶候选项（详见方案 &lt;code&gt;/pin_cand_filter&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;所有标点符号直接上屏&lt;/li&gt; 
   &lt;li&gt;特殊符号、字符输入（全拼&lt;kbd&gt;v&lt;/kbd&gt;+首字母缩写；双拼&lt;kbd&gt;V&lt;/kbd&gt;+首字母缩写）&lt;/li&gt; 
   &lt;li&gt;拼音纠错（模糊音）&lt;/li&gt; 
   &lt;li&gt;更多默认未启用的功能请参考 &lt;code&gt;lua/&lt;/code&gt; 及方案注释&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;简体字表、词库 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&quot;&gt;通用规范汉字表&lt;/a&gt;（by 中华人民共和国教育部）8K 常用汉字&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.unicode.org/Public/&quot;&gt;Unihan 字库&lt;/a&gt;（by Unicode lnc | &lt;a href=&quot;https://www.unicode.org/license.txt&quot;&gt;UNICODE LICENSE V3&lt;/a&gt;）40K 大字库， &lt;strong&gt;默认未启用&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D%E8%A1%A8&quot;&gt;现代汉语常用词表&lt;/a&gt;（by 中国国家语言文字工作委员会）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&quot;&gt;华宇野风词库&lt;/a&gt;（by 野风）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rime/rime-essay-simp&quot;&gt;简化字八股文&lt;/a&gt;（by rime | &lt;a href=&quot;https://github.com/rime/rime-essay-simp/raw/master/LICENSE&quot;&gt;LGPL&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/thunlp/THUOCL&quot;&gt;清华大学开源词库&lt;/a&gt;（by THUNLP | &lt;a href=&quot;https://github.com/thunlp/THUOCL/raw/master/LICENSE&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://ai.tencent.com/ailab/nlp/en/download.html&quot;&gt;腾讯词向量&lt;/a&gt;（@Huandeep &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/24&quot;&gt;整理&lt;/a&gt; | by Tencent AI Lab | &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;词库修订 
  &lt;ul&gt; 
   &lt;li&gt;校对大量异形词、错别字、错误注音&lt;/li&gt; 
   &lt;li&gt;全词库完成注音&lt;/li&gt; 
   &lt;li&gt;同义多音字注音&lt;/li&gt; 
   &lt;li&gt;参考 
    &lt;ul&gt; 
     &lt;li&gt;《现代汉语词典》&lt;/li&gt; 
     &lt;li&gt;《同义词词林》&lt;/li&gt; 
     &lt;li&gt;《新华成语大词典》&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;http://www.jiaodui.com/bbs/&quot;&gt;校对标准论坛&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Rime、Squirrel、Weasel 常用配置项的详尽注释&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;长期维护词库&lt;/h2&gt; 
&lt;p&gt;因为没有找到一份比较好的词库，干脆自己维护一个。综合了几个不错的词库，精心调教了很多。&lt;/p&gt; 
&lt;p&gt;主要维护的词库：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; 字表。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base&lt;/code&gt; 基础词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; 扩展词库，小词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; 扩展词库，大词库。&lt;/li&gt; 
 &lt;li&gt;Emoji&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;维护内容主要是异形词、错别字的校对，错误注音的修正，缺失的常用词汇的增添，词频的调整。&lt;/p&gt; 
&lt;p&gt;欢迎在词库方面提 issue &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/666&quot;&gt;#666&lt;/a&gt; ，我会及时更新修正。&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;使用说明&lt;/h2&gt; 
&lt;h3&gt;选择和安装 RIME 前端&lt;/h3&gt; 
&lt;p&gt;要使用雾凇拼音默认提供的所有功能，请保证&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;您的 RIME 前端提供的 librime 版本 ≥ 1.8.5 且&lt;/li&gt; 
 &lt;li&gt;含有 librime-lua 依赖&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;以下是主流平台上的一些 RIME 前端安装建议。部分信息具有时效性，请以当下具体情况为准：&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;系统&lt;/th&gt; 
   &lt;th&gt;RIME 前端&lt;/th&gt; 
   &lt;th&gt;雾凇拼音版本要求&lt;/th&gt; 
   &lt;th&gt;备注&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx5-android/fcitx5-android/releases&quot;&gt;fcitx5-android&lt;/a&gt; + plugin.rime（小企鹅输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 0.0.8&lt;/td&gt; 
   &lt;td&gt;暂不支持九宫格&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/osfans/trime&quot;&gt;Trime&lt;/a&gt;（同文输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 3.2.11&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95/id6446617683&quot;&gt;Hamster&lt;/a&gt;（仓输入法）&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;闭源；有内购&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;ibus + &lt;a href=&quot;https://github.com/rime/ibus-rime&quot;&gt;ibus-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;fcitx5 + &lt;a href=&quot;https://github.com/fcitx/fcitx5-rime&quot;&gt;fcitx5-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/squirrel&quot;&gt;Squirrel&lt;/a&gt;（鼠须管）&lt;/td&gt; 
   &lt;td&gt;≥ 1.0.0&lt;/td&gt; 
   &lt;td&gt;0.16.0 - 0.18.0 版本请参考&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/1062&quot;&gt;🔗&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx-contrib/fcitx5-macos&quot;&gt;fcitx5-macos&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;支持&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/941&quot;&gt;卷轴模式&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/weasel&quot;&gt;Weasel&lt;/a&gt;（小狼毫）&lt;/td&gt; 
   &lt;td&gt;≥ 0.15.0&lt;/td&gt; 
   &lt;td&gt;0.14.3 可手动更新 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/197&quot;&gt;rime.dll&lt;/a&gt;（但不支持彩色 emoji）&lt;br /&gt;Weasel 当下有兼容性问题，建议安装其他输入法备用&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Linux 依赖问题的具体解释请参考 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/840&quot;&gt;#840&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;雾凇拼音的部分配置可能要求更高的 librime 或者客户端版本，这些功能已在具体配置文件中注明。&lt;/p&gt; 
&lt;p&gt;以下安装方式，选择其一：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85&quot;&gt;手动安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#git-%E5%AE%89%E8%A3%85&quot;&gt;Git 安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%B8%9C%E9%A3%8E%E7%A0%B4-plum&quot;&gt;东风破 plum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC&quot;&gt;自动部署脚本&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95-hamster&quot;&gt;仓输入法&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#arch-linux&quot;&gt;Arch Linux&lt;/a&gt;（AUR）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;手动安装&lt;/h3&gt; 
&lt;p&gt;您可以将仓库打包下载，将所有文件复制粘贴到 RIME 前端的配置目录，重新部署。&lt;/p&gt; 
&lt;p&gt;只需要使用或者更新词库的话，可以手动粘贴覆盖 &lt;code&gt;cn_dicts&lt;/code&gt; &lt;code&gt;en_dicts&lt;/code&gt; &lt;code&gt;opencc&lt;/code&gt; 三个文件夹。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] 雾凇拼音中多个文件可能与其他方案同名冲突，如果是新手想一键安装，建议备份原先配置，&lt;strong&gt;清空配置目录&lt;/strong&gt;再导入。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;单独使用词库注意事项：&lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 下面包含了大写字母，这和配置有些许绑定，可以直接删除，详细说明：&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/356&quot;&gt;#356&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;您也可以前往 &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases&quot;&gt;Release&lt;/a&gt; 界面，下载特定版本的词典文件（具体描述见 Release 说明），覆盖配置目录的对应文件。&lt;/p&gt; 
&lt;h3&gt;Git 安装&lt;/h3&gt; 
&lt;p&gt;您如果熟悉 git 常用操作，可以使用 git clone 命令将本仓库克隆到对应前端的用户目录。由于本库提交历史较多且更改频繁，添加 &lt;code&gt;--depth&lt;/code&gt; 参数可以显著减少传输体积。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/iDvel/rime-ice.git Rime --depth 1

# 更新
cd Rime
git pull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过 checkout 命令，您也可以实现更新部分文件的效果。&lt;/p&gt; 
&lt;h3&gt;东风破 &lt;a href=&quot;https://github.com/rime/plum&quot;&gt;plum&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;选择配方（&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;）来进行安装或更新。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;/plum/ 简易安装教程&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;安装 plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 请先安装 git 和 bash，并加入环境变量
# 请确保和 github.com 的连接稳定
cd ~
git clone https://github.com/rime/plum.git plum
# 卸载 plum 只需要删除 ~/plum 文件夹即可
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;使用 plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
bash rime-install &amp;lt;recipe_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr /&gt; 
&lt;/details&gt; 
&lt;p&gt;词库配方只是更新具体词库文件，并不更新 &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;，因为用户可能会挂载其他词库。如果更新后部署时报错，可能是增、删、改了文件名，需要检查上面两个文件和词库的对应关系。&lt;/p&gt; 
&lt;p&gt;℞ 安装或更新全部文件&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新所有词库文件（包含下面三个）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新拼音词库文件（ &lt;code&gt;cn_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新英文词库文件（ &lt;code&gt;en_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新 opencc （ &lt;code&gt;opencc/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;下面这个配方会在 &lt;code&gt;radical_pinyin.custom.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.custom.yaml&lt;/code&gt; 里将 &lt;code&gt;speller/algebra&lt;/code&gt; 修改为对应的双拼拼写，选择一个自己使用的双拼作为参数。&lt;/p&gt; 
&lt;p&gt;℞ 双拼补丁&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/config:schema=flypy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=double_pinyin
bash rime-install iDvel/rime-ice:others/recipes/config:schema=mspy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=sogou
bash rime-install iDvel/rime-ice:others/recipes/config:schema=abc
bash rime-install iDvel/rime-ice:others/recipes/config:schema=ziguang
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 下载特定版本的配置&lt;/p&gt; 
&lt;p&gt;在仓库后加 &lt;code&gt;@tag&lt;/code&gt; 即可，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bash rime-install iDvel/rime-ice@2024.05.21:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;仓输入法 &lt;a href=&quot;https://github.com/imfuxiao/Hamster&quot;&gt;Hamster&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;参考 &lt;a href=&quot;https://github.com/imfuxiao/Hamster/wiki/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%22%E9%9B%BE%E6%B7%9E%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%96%B9%E6%A1%88%22&quot;&gt;如何导入&quot;雾凇拼音输入方案&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;仓输入法目前已内置雾凇拼音。&lt;/p&gt; 
&lt;p&gt;使用九宫格，需要同时启用九宫格方案（输入方案设置）和九宫格布局（键盘设置 - 键盘布局 - 中文 9 键）。&lt;/p&gt; 
&lt;h3&gt;自动部署脚本&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Mark24Code/rime-auto-deploy&quot;&gt;Mark24Code/rime-auto-deploy&lt;/a&gt; 一个自动部署脚本，集成了雾凇拼音，帮助无痛快速安装、部署 Rime 输入法（中州韵、小狼毫，鼠须管）以及部署配置。&lt;/p&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;使用 AUR helper 安装 &lt;a href=&quot;https://aur.archlinux.org/packages/rime-ice-git&quot;&gt;rime-ice-git&lt;/a&gt; 包即可。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# paru 默认会每次重新评估 pkgver，所以有新的提交时 paru 会自动更新，
# yay 默认未开启此功能，可以通过此命令开启
# yay -Y --devel --save

paru -S rime-ice-git
# yay -S rime-ice-git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;推荐使用&lt;a href=&quot;https://github.com/rime/home/wiki/Configuration#%E8%A3%9C%E9%9D%AA&quot;&gt;补丁&lt;/a&gt;的方式启用。&lt;/p&gt; 
&lt;p&gt;参考下面的配置示例，修改对应输入法框架用户目录（见下）中的 &lt;code&gt;default.custom.yaml&lt;/code&gt; 文件&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iBus 为 &lt;code&gt;$HOME/.config/ibus/rime/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fcitx5 为 &lt;code&gt;$HOME/.local/share/fcitx5/rime/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;default.custom.yaml&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;patch:
  # 仅使用「雾凇拼音」的默认配置，配置此行即可
  __include: rime_ice_suggestion:/
  # 以下根据自己所需自行定义，仅做参考。
  # 针对对应处方的定制条目，请使用 &amp;lt;recipe&amp;gt;.custom.yaml 中配置，例如 rime_ice.custom.yaml
  __patch:
    key_binder/bindings/+:
      # 开启逗号句号翻页
      - { when: paging, accept: comma, send: Page_Up }
      - { when: has_menu, accept: period, send: Page_Down }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;h2&gt;感谢 ❤️&lt;/h2&gt; 
&lt;p&gt;特别感谢上文已经提及的词库、词典的作者、贡献者及整理者；特别感谢以及下列词库、方案、脚本的作者及贡献者（提及的均为 GitHub id）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@mozillazg 开发的汉字转拼音工具和数据库（MIT）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt&quot;&gt;melt_eng&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;） ：提供了部分（约 1000 条）英文词汇以及原始英文方案参考；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin&quot;&gt;部件拆字方案&lt;/a&gt;（@mirtlecn | &lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin/raw/master/LICENSE&quot;&gt;GPL 3.0&lt;/a&gt;）：提供的拆字反查和候选筛选插件；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&quot;&gt;长词优先插件&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;Unicode 插件&lt;/a&gt;（@shewer | &lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yanhuacuo/98wubi/raw/master/lua/number.lua&quot;&gt;数字、人民币大写插件&lt;/a&gt;（@98wubi）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/boomker/rime-fast-xhup&quot;&gt;农历插件&lt;/a&gt;（@boomker | &lt;a href=&quot;https://github.com/boomker/rime-fast-xhup/raw/master/LICENSE&quot;&gt;LGPL 3.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;未能在此处详述的、在本库源码注释中提及的项目及作者给予的帮助和参考&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/Huandeep&quot;&gt;@Huandeep&lt;/a&gt; 整理的多个词库。&lt;/p&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/mirtlecn&quot;&gt;@Mirtle&lt;/a&gt; 完善的多个功能。&lt;/p&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/Lithium-7&quot;&gt;@Lithium-7&lt;/a&gt; 对词库的大量修订。&lt;/p&gt; 
&lt;p&gt;感谢所有贡献者。&lt;/p&gt; 
&lt;!-- 搜狗转 Rime：[lewangdev/scel2txt](https://github.com/lewangdev/scel2txt) --&gt; 
&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSourceSupport&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;赞助 ☕&lt;/h2&gt; 
&lt;p&gt;如果觉得项目不错，可以请 Dvel 吃个煎饼馃子。&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&quot; alt=&quot;请 Dvel 吃个煎饼馃子&quot; width=&quot;600&quot; /&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/LazyVim</title>
      <link>https://github.com/LazyVim/LazyVim</link>
      <description>&lt;p&gt;Neovim config for the lazy&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/292349/213446185-2db63fd5-8c84-459c-9f04-e286382d6e80.png&quot; /&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;Install&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io/configuration&quot;&gt;Configure&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/LazyVim/LazyVim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;LazyVim is a Neovim setup powered by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;💤 lazy.nvim&lt;/a&gt; to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/211285846-0b7bb3bf-0462-4029-b64c-4ee1d037fc1c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/213447056-92290767-ea16-430c-8727-ce994c93e9cc.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔥 Transform your Neovim into a full-fledged IDE&lt;/li&gt; 
 &lt;li&gt;💤 Easily customize and extend your config with &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🚀 Blazingly fast&lt;/li&gt; 
 &lt;li&gt;🧹 Sane default settings for options, autocmds, and keymaps&lt;/li&gt; 
 &lt;li&gt;📦 Comes with a wealth of plugins pre-configured and ready to use&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.11.2&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;a &lt;strong&gt;C&lt;/strong&gt; compiler for &lt;code&gt;nvim-treesitter&lt;/code&gt;. See &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter#requirements&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a starter template for &lt;strong&gt;LazyVim&lt;/strong&gt; &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Try it with Docker&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -w /root -it --rm alpine:edge sh -uelic &#39;
  apk add git lazygit fzf curl neovim ripgrep alpine-sdk --update
  git clone https://github.com/LazyVim/starter ~/.config/nvim
  cd ~/.config/nvim
  nvim
&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Install the &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;LazyVim Starter&lt;/a&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Make a backup of your current Neovim files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Clone the starter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/LazyVim/starter ~/.config/nvim
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder, so you can add it to your own repo later&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rm -rf ~/.config/nvim/.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Start Neovim!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the comments in the files on how to customize &lt;strong&gt;LazyVim&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;There&#39;s a great video created by &lt;a href=&quot;https://github.com/elijahmanor&quot;&gt;@elijahmanor&lt;/a&gt; with a walkthrough to get started.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=N93cTbtLCIM&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/N93cTbtLCIM/hqdefault.jpg&quot; alt=&quot;Watch the video&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dusty-phillips&quot;&gt;@dusty-phillips&lt;/a&gt; wrote a comprehensive book called &lt;a href=&quot;https://lazyvim-ambitious-devs.phillips.codes&quot;&gt;LazyVim for Ambitious Developers&lt;/a&gt; available for free online.&lt;/p&gt; 
&lt;h2&gt;📂 File Structure&lt;/h2&gt; 
&lt;p&gt;The files under config will be automatically loaded at the appropriate time, so you don&#39;t need to require those files manually. &lt;strong&gt;LazyVim&lt;/strong&gt; comes with a set of default config files that will be loaded &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; your own. See &lt;a href=&quot;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/config&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can add your custom plugin specs under &lt;code&gt;lua/plugins/&lt;/code&gt;. All files there will be automatically loaded by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;
~/.config/nvim
├── lua
│&amp;nbsp;&amp;nbsp; ├── config
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── autocmds.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymaps.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── lazy.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── options.lua
│&amp;nbsp;&amp;nbsp; └── plugins
│&amp;nbsp;&amp;nbsp;     ├── spec1.lua
│&amp;nbsp;&amp;nbsp;     ├── **
│&amp;nbsp;&amp;nbsp;     └── spec2.lua
└── init.lua
&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ibhagwan/fzf-lua</title>
      <link>https://github.com/ibhagwan/fzf-lua</link>
      <description>&lt;p&gt;Improved fzf.vim written in lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;fzf &lt;span&gt;❤️&lt;/span&gt; lua&lt;/h1&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim-0.9-57A143?style=flat-square&amp;amp;logo=neovim&quot; alt=&quot;Neovim version&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#installation&quot;&gt;Installation&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#commands&quot;&gt;Commands&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#customization&quot;&gt;Customization&lt;/a&gt; • &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/ibhagwan/fzf-lua/demo.gif&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;“because you can and you love fzf” - &lt;a href=&quot;https://github.com/junegunn&quot;&gt;@junegunn&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&quot;fzf changed my command life, it can change yours too, if you allow it&quot; - &lt;a href=&quot;https://github.com/ibhagwan&quot;&gt;@ibhagwan&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To quickly test this plugin without changing your configuration run (will run in its own sandbox with the default keybinds below):&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] it&#39;s good practice to first &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/scripts/mini.sh&quot;&gt;read the script&lt;/a&gt; before running &lt;code&gt;sh -c&lt;/code&gt; directly from the web&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sh -c &quot;$(curl -s https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/scripts/mini.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-\&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;buffers&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;grep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;live_grep&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;builtin commands&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F1&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;neovim help&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/ibhagwan/fzf-lua&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/ibhagwan/fzf-lua?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;ibhagwan/fzf-lua&quot;,
  -- optional for icon support
  dependencies = { &quot;nvim-tree/nvim-web-devicons&quot; },
  -- or if using mini.icons/mini.nvim
  -- dependencies = { &quot;nvim-mini/mini.icons&quot; },
  opts = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Show dependencies&lt;/summary&gt; 
 &lt;h3&gt;Dependencies&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/releases&quot;&gt;&lt;code&gt;neovim&lt;/code&gt;&lt;/a&gt; version &amp;gt;= &lt;code&gt;0.9&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.36&lt;/code&gt; or &lt;a href=&quot;https://github.com/skim-rs/skim&quot;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; binary installed&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; or &lt;a href=&quot;https://github.com/nvim-mini/mini.icons&quot;&gt;mini.icons&lt;/a&gt; (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Optional dependencies&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; - better &lt;code&gt;find&lt;/code&gt; utility&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt; - better &lt;code&gt;grep&lt;/code&gt; utility&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt; - syntax highlighted previews when using fzf&#39;s native previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;delta&lt;/a&gt; - syntax highlighted git pager for git status previews&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; - for Debug Adapter Protocol (DAP) support&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; - for viewing treesitter context within the previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; or &lt;a href=&quot;https://github.com/OXY2DEV/markview.nvim&quot;&gt;markview.nvim&lt;/a&gt; - for rendering markdown files in the previewer&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Below are a few optional dependencies for viewing media files (which you need to configure in &lt;code&gt;previewer.builtin.extensions&lt;/code&gt;):&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/hpjansson/chafa&quot;&gt;chafa&lt;/a&gt; - terminal image previewer (recommended, supports most file formats)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/atanunq/viu&quot;&gt;viu&lt;/a&gt; - terminal image previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/jstkdng/ueberzugpp&quot;&gt;ueberzugpp&lt;/a&gt; - terminal image previewer using X11/Wayland child windows, sixels, kitty and iterm2&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!TIP] If your terminal supports the kitty graphics protocol (e.g. kitty, ghostty, etc) install @folke&#39;s &lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt; to render images using the &lt;code&gt;snacks.image&lt;/code&gt; module, it will be auto-detected by fzf-lua and requires no configuration.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;Windows Notes&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt; is required for &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;git&lt;/a&gt; for Windows is required for &lt;code&gt;git&lt;/code&gt; (though installing &lt;code&gt;git-bash&lt;/code&gt;|&lt;code&gt;sh&lt;/code&gt; &lt;strong&gt;is not required&lt;/strong&gt;).&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Installation of dependencies (fzf, rg, fd, etc) is possible via &lt;a href=&quot;https://github.com/ScoopInstaller/Install&quot;&gt;scoop&lt;/a&gt;, &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; or &lt;a href=&quot;https://github.com/microsoft/winget-cli&quot;&gt;winget-cli&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Although almost everything works on Windows exactly as the *NIX/OSX check out the &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/README-Win.md&quot;&gt;Windows README&lt;/a&gt; for known issues and limitations.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Fzf-lua aims to be as plug and play as possible with sane defaults, you can run any fzf-lua command like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&quot;fzf-lua&quot;).files()
-- once loaded we can use the global object
:lua FzfLua.files()
-- or the vim command:
:FzfLua files
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or with arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ cwd = &#39;~/.config&#39; })
-- or using the `FzfLua` vim command:
:FzfLua files cwd=~/.config
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Resume&lt;/h3&gt; 
&lt;p&gt;Resuming work from where you left off is as easy as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.resume()
-- or
:FzfLua resume
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, resuming work on a specific picker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ resume = true })
-- or
:FzfLua files resume=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Combining Pickers&lt;/h3&gt; 
&lt;p&gt;Fzf-Lua can combine any of the available pickers into a single display using the &lt;code&gt;combine&lt;/code&gt; method, for example file history (oldfiles) and git-files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.combine({ pickers = &quot;oldfiles;git_files&quot; })
-- or using the `FzfLua` vim command:
:FzfLua combine pickers=oldfiles;git_files
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The first picker options determine the options used by the combined picker, that includes formatters, previewer, path_shorten, etc. To avoid errors combine only pickers of the same entry types (i.e files)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Global Picker&lt;/h3&gt; 
&lt;p&gt;Fzf-Lua conveniently comes with a VS-Code like picker by default (customizable) combining files, buffers and LSP symbols:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prefix&lt;/th&gt; 
   &lt;th&gt;Behavior&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;no prefix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Buffers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;LSP Symbols (current buffer)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;LSP Symbols (workspace/project)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.global()
-- or using the `FzfLua` vim command:
:FzfLua global
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;LIST OF AVAILABLE COMMANDS BELOW&lt;/strong&gt; 👇&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Buffers and Files&lt;/summary&gt; 
 &lt;h3&gt;Buffers and Files&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open buffers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; on a path&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oldfiles&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;opened files history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;quickfix_stack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;quickfix stack&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;loclist_stack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;location stack&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open buffers lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;blines&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;current buffer lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;treesitter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;current buffer treesitter symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tabs&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open tabs&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;args&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;argument list&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Search&lt;/summary&gt; 
 &lt;h3&gt;Search&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search for a pattern with &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_last&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;run search again with the last pattern&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_cword&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search word under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_cWORD&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search WORD under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_visual&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search visual selection&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_project&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search all project lines (fzf.vim&#39;s &lt;code&gt;:Rg&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_curbuf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search current buffer lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search the quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search the location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_curbuf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep current buffer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep the quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep the location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep current project&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_resume&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep continue last search&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_glob&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live_grep with &lt;code&gt;rg --glob&lt;/code&gt; support&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_native&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;performant version of &lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tags&lt;/summary&gt; 
 &lt;h3&gt;Tags&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search project tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;btags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search buffer tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;grep project tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_cword&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; word under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_cWORD&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; WORD under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_visual&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; visual selection&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_live_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep project tags&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Git&lt;/summary&gt; 
 &lt;h3&gt;Git&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_files&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git ls-files&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_status&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_diff&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git diff {ref}&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_hunks&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git hunks {ref}&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_commits&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git commit log (project)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_bcommits&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git commit log (buffer)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_blame&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git blame (buffer)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_branches&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git branches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_worktrees&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git worktrees&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_tags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_stash&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git stash&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;LSP / Diagnostics&lt;/summary&gt; 
 &lt;h3&gt;LSP/Diagnostics&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_references&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;References&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_definitions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Definitions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_declarations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Declarations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_typedefs&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Type Definitions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_implementations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Implementations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_document_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Document Symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_live_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Symbols (live query)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Incoming Calls&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Outgoing Calls&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_code_actions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Code Actions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_finder&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;All LSP locations, combined view&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Document Diagnostics&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Diagnostics&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_document_diagnostics&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;alias to &lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_workspace_diagnostics&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;alias to &lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Misc&lt;/summary&gt; 
 &lt;h3&gt;Misc&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;resume last command/query&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;builtin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua builtin commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;combine&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;combine different fzf-lua pickers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;global&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;global picker for files,buffers and symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;profiles&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua configuration profiles&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;helptags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;help tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;manpages&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;man pages&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;colorschemes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;color schemes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;awesome_colorschemes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Awesome Neovim color schemes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;highlights&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;highlight groups&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;commands&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;neovim commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;command_history&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;command history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;search_history&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;marks&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:marks&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;jumps&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:jumps&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;changes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:changes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;registers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:registers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tagstack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;autocmds&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:autocmd&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;nvim_options&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;neovim options&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;keymaps&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;key mappings&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;filetypes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;filetypes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;menus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;menus&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;spellcheck&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;misspelled words in buffer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;spell_suggest&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;spelling suggestions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;packadd&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:packadd 
     &lt;package&gt;&lt;/package&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neovim API&lt;/summary&gt; 
 &lt;h3&gt;Neovim API&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;code&gt;:help vim.ui.select&lt;/code&gt; for more info&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;register_ui_select&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;register fzf-lua as the UI interface for &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;deregister_ui_select&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;de-register fzf-lua with &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;nvim-dap&lt;/summary&gt; 
 &lt;h3&gt;nvim-dap&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Requires &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_commands&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,run &lt;code&gt;nvim-dap&lt;/code&gt; builtin commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_configurations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,run debug configurations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_breakpoints&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,delete breakpoints&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_variables&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;active session variables&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_frames&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;active session jump to frame&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tmux&lt;/summary&gt; 
 &lt;h3&gt;tmux&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tmux_buffers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list tmux paste buffers&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Zoxide&lt;/summary&gt; 
 &lt;h3&gt;zoxide&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;zoxide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list recent directories&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Completion Functions&lt;/summary&gt; 
 &lt;h3&gt;Completion Functions&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_path&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete path under cursor (incl dirs)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_file&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete file under cursor (excl dirs)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_line&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete line (all open buffers)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_bline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete line (current buffer only)&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Refer to &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/OPTIONS.md&quot;&gt;OPTIONS&lt;/a&gt; to see detailed usage notes and a comprehensive list of yet more(!) available options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup {
  -- MISC GLOBAL SETUP OPTIONS, SEE BELOW
  -- fzf_bin = ...,
  -- each of these options can also be passed as function that return options table
  -- e.g. winopts = function() return { ... } end
  winopts = { ...  },     -- UI Options
  keymap = { ...  },      -- Neovim keymaps / fzf binds
  actions = { ...  },     -- Fzf &quot;accept&quot; binds
  fzf_opts = { ...  },    -- Fzf CLI flags
  fzf_colors = { ...  },  -- Fzf `--color` specification
  hls = { ...  },         -- Highlights
  previewers = { ...  },  -- Previewers options
  -- SPECIFIC COMMAND/PICKER OPTIONS, SEE BELOW
  -- files = { ... },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;DEFAULT OPTIONS OF THE DIFFERENT CONFIG SECTIONS BELOW&lt;/strong&gt; 👇&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;globals&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- Use skim (or a speccific fzf binary/version) instead of fzf?
  -- fzf_bin = &#39;sk&#39;,
  -- Padding can help kitty term users with double-width icon rendering
  file_icon_padding = &#39;&#39;,
  -- Uncomment if your terminal/font does not support unicode character
  -- &#39;EN SPACE&#39; (U+2002), the below sets it to &#39;NBSP&#39; (U+00A0) instead
  -- nbsp = &#39;\xc2\xa0&#39;,
  -- Function override for opening the help window (default bound to `&amp;lt;F1&amp;gt;`)
  -- Override this function if you want to customize window config of the
  -- help window (location, width, border, etc.)
  help_open_win = vim.api.nvim_open_win,
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;winopts&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;winopts = {
    -- split = &quot;belowright new&quot;,-- open in a split instead?
            -- &quot;belowright new&quot;  : split below
            -- &quot;aboveleft new&quot;   : split above
            -- &quot;belowright vnew&quot; : split right
            -- &quot;aboveleft vnew   : split left
    -- Only valid when using a float window
    -- (i.e. when &#39;split&#39; is not defined, default)
    height           = 0.85,            -- window height
    width            = 0.80,            -- window width
    row              = 0.35,            -- window row position (0=top, 1=bottom)
    col              = 0.50,            -- window col position (0=left, 1=right)
    -- border argument passthrough to nvim_open_win()
    border           = &quot;rounded&quot;,
    -- Backdrop opacity, 0 is fully opaque, 100 is fully transparent (i.e. disabled)
    backdrop         = 60,
    -- title         = &quot;Title&quot;,
    -- title_pos     = &quot;center&quot;,        -- &#39;left&#39;, &#39;center&#39; or &#39;right&#39;
    -- title_flags   = false,           -- uncomment to disable title flags
    fullscreen       = false,           -- start fullscreen?
    -- enable treesitter highlighting for the main fzf window will only have
    -- effect where grep like results are present, i.e. &quot;file:line:col:text&quot;
    -- due to highlight color collisions will also override `fzf_colors`
    -- set `fzf_colors=false` or `fzf_colors.hl=...` to override
    treesitter       = {
      enabled    = true,
      fzf_colors = { [&quot;hl&quot;] = &quot;-1:reverse&quot;, [&quot;hl+&quot;] = &quot;-1:reverse&quot; }
    },
    preview = {
      -- default     = &#39;bat&#39;,           -- override the default previewer?
                                        -- default uses the &#39;builtin&#39; previewer
      border         = &quot;rounded&quot;,       -- preview border: accepts both `nvim_open_win`
                                        -- and fzf values (e.g. &quot;border-top&quot;, &quot;none&quot;)
                                        -- native fzf previewers (bat/cat/git/etc)
                                        -- can also be set to `fun(winopts, metadata)`
      wrap           = false,           -- preview line wrap (fzf&#39;s &#39;wrap|nowrap&#39;)
      hidden         = false,           -- start preview hidden
      vertical       = &quot;down:45%&quot;,      -- up|down:size
      horizontal     = &quot;right:60%&quot;,     -- right|left:size
      layout         = &quot;flex&quot;,          -- horizontal|vertical|flex
      flip_columns   = 100,             -- #cols to switch to horizontal on flex
      -- Only used with the builtin previewer:
      title          = true,            -- preview border title (file/buf)?
      title_pos      = &quot;center&quot;,        -- left|center|right, title alignment
      scrollbar      = &quot;float&quot;,         -- `false` or string:&#39;float|border&#39;
                                        -- float:  in-window floating border
                                        -- border: in-border &quot;block&quot; marker
      scrolloff      = -1,              -- float scrollbar offset from right
                                        -- applies only when scrollbar = &#39;float&#39;
      delay          = 20,              -- delay(ms) displaying the preview
                                        -- prevents lag on fast scrolling
      winopts = {                       -- builtin previewer window options
        number            = true,
        relativenumber    = false,
        cursorline        = true,
        cursorlineopt     = &quot;both&quot;,
        cursorcolumn      = false,
        signcolumn        = &quot;no&quot;,
        list              = false,
        foldenable        = false,
        foldmethod        = &quot;manual&quot;,
      },
    },
    on_create = function()
      -- called once upon creation of the fzf main window
      -- can be used to add custom fzf-lua mappings, e.g:
      --   vim.keymap.set(&quot;t&quot;, &quot;&amp;lt;C-j&amp;gt;&quot;, &quot;&amp;lt;Down&amp;gt;&quot;, { silent = true, buffer = true })
    end,
    -- called once _after_ the fzf interface is closed
    -- on_close = function() ... end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;keymap&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;keymap = {
    -- Below are the default binds, setting any value in these tables will override
    -- the defaults, to inherit from the defaults change [1] from `false` to `true`
    builtin = {
      -- neovim `:tmap` mappings for the fzf win
      -- true,        -- uncomment to inherit all the below in your custom config
      [&quot;&amp;lt;M-Esc&amp;gt;&quot;]     = &quot;hide&quot;,     -- hide fzf-lua, `:FzfLua resume` to continue
      [&quot;&amp;lt;F1&amp;gt;&quot;]        = &quot;toggle-help&quot;,
      [&quot;&amp;lt;F2&amp;gt;&quot;]        = &quot;toggle-fullscreen&quot;,
      -- Only valid with the &#39;builtin&#39; previewer
      [&quot;&amp;lt;F3&amp;gt;&quot;]        = &quot;toggle-preview-wrap&quot;,
      [&quot;&amp;lt;F4&amp;gt;&quot;]        = &quot;toggle-preview&quot;,
      -- Rotate preview clockwise/counter-clockwise
      [&quot;&amp;lt;F5&amp;gt;&quot;]        = &quot;toggle-preview-cw&quot;,
      -- Preview toggle behavior default/extend
      [&quot;&amp;lt;F6&amp;gt;&quot;]        = &quot;toggle-preview-behavior&quot;,
      -- `ts-ctx` binds require `nvim-treesitter-context`
      [&quot;&amp;lt;F7&amp;gt;&quot;]        = &quot;toggle-preview-ts-ctx&quot;,
      [&quot;&amp;lt;F8&amp;gt;&quot;]        = &quot;preview-ts-ctx-dec&quot;,
      [&quot;&amp;lt;F9&amp;gt;&quot;]        = &quot;preview-ts-ctx-inc&quot;,
      [&quot;&amp;lt;S-Left&amp;gt;&quot;]    = &quot;preview-reset&quot;,
      [&quot;&amp;lt;S-down&amp;gt;&quot;]    = &quot;preview-page-down&quot;,
      [&quot;&amp;lt;S-up&amp;gt;&quot;]      = &quot;preview-page-up&quot;,
      [&quot;&amp;lt;M-S-down&amp;gt;&quot;]  = &quot;preview-down&quot;,
      [&quot;&amp;lt;M-S-up&amp;gt;&quot;]    = &quot;preview-up&quot;,
    },
    fzf = {
      -- fzf &#39;--bind=&#39; options
      -- true,        -- uncomment to inherit all the below in your custom config
      [&quot;ctrl-z&quot;]      = &quot;abort&quot;,
      [&quot;ctrl-u&quot;]      = &quot;unix-line-discard&quot;,
      [&quot;ctrl-f&quot;]      = &quot;half-page-down&quot;,
      [&quot;ctrl-b&quot;]      = &quot;half-page-up&quot;,
      [&quot;ctrl-a&quot;]      = &quot;beginning-of-line&quot;,
      [&quot;ctrl-e&quot;]      = &quot;end-of-line&quot;,
      [&quot;alt-a&quot;]       = &quot;toggle-all&quot;,
      [&quot;alt-g&quot;]       = &quot;first&quot;,
      [&quot;alt-G&quot;]       = &quot;last&quot;,
      -- Only valid with fzf previewers (bat/cat/git/etc)
      [&quot;f3&quot;]          = &quot;toggle-preview-wrap&quot;,
      [&quot;f4&quot;]          = &quot;toggle-preview&quot;,
      [&quot;shift-down&quot;]  = &quot;preview-page-down&quot;,
      [&quot;shift-up&quot;]    = &quot;preview-page-up&quot;,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;actions&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;actions = {
    -- Below are the default actions, setting any value in these tables will override
    -- the defaults, to inherit from the defaults change [1] from `false` to `true`
    files = {
      -- true,        -- uncomment to inherit all the below in your custom config
      -- Pickers inheriting these actions:
      --   files, git_files, git_status, grep, lsp, oldfiles, quickfix, loclist,
      --   tags, btags, args, buffers, tabs, lines, blines
      -- `file_edit_or_qf` opens a single selection or sends multiple selection to quickfix
      -- replace `enter` with `file_edit` to open all files/bufs whether single or multiple
      -- replace `enter` with `file_switch_or_edit` to attempt a switch in current tab first
      [&quot;enter&quot;]       = FzfLua.actions.file_edit_or_qf,
      [&quot;ctrl-s&quot;]      = FzfLua.actions.file_split,
      [&quot;ctrl-v&quot;]      = FzfLua.actions.file_vsplit,
      [&quot;ctrl-t&quot;]      = FzfLua.actions.file_tabedit,
      [&quot;alt-q&quot;]       = FzfLua.actions.file_sel_to_qf,
      [&quot;alt-Q&quot;]       = FzfLua.actions.file_sel_to_ll,
      [&quot;alt-i&quot;]       = FzfLua.actions.toggle_ignore,
      [&quot;alt-h&quot;]       = FzfLua.actions.toggle_hidden,
      [&quot;alt-f&quot;]       = FzfLua.actions.toggle_follow,
    },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;fzf_opts&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf_opts = {
    -- options are sent as `&amp;lt;left&amp;gt;=&amp;lt;right&amp;gt;`
    -- set to `false` to remove a flag
    -- set to `true` for a no-value flag
    -- for raw args use `fzf_args` instead
    [&quot;--ansi&quot;]           = true,
    [&quot;--info&quot;]           = &quot;inline-right&quot;, -- fzf &amp;lt; v0.42 = &quot;inline&quot;
    [&quot;--height&quot;]         = &quot;100%&quot;,
    [&quot;--layout&quot;]         = &quot;reverse&quot;,
    [&quot;--border&quot;]         = &quot;none&quot;,
    [&quot;--highlight-line&quot;] = true,           -- fzf &amp;gt;= v0.53
  }

-- Only used when fzf_bin = &quot;fzf-tmux&quot;, by default opens as a
-- popup 80% width, 80% height (note `-p` requires tmux &amp;gt; 3.2)
-- and removes the sides margin added by `fzf-tmux` (fzf#3162)
-- for more options run `fzf-tmux --help`
-- NOTE: since fzf v0.53 / sk v0.15 it is recommended to use
-- native tmux integration by adding the below to `fzf_opts`
-- fzf_opts = { [&quot;--tmux&quot;] = &quot;center,80%,60%&quot; }
fzf_tmux_opts = { [&quot;-p&quot;] = &quot;80%,80%&quot;, [&quot;--margin&quot;] = &quot;0,0&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;fzf_colors&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] See the &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#fzf-colors&quot;&gt;Fzf Colors&lt;/a&gt; section for more info.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- 
  -- Set fzf&#39;s terminal colorscheme (optional)
  --
  -- Set to `true` to automatically generate an fzf&#39;s colorscheme from
  -- Neovim&#39;s current colorscheme:
  -- fzf_colors       = true,
  -- 
  -- Building a custom colorscheme, has the below specifications:
  -- If rhs is of type &quot;string&quot; rhs will be passed raw, e.g.:
  --   `[&quot;fg&quot;] = &quot;underline&quot;` will be translated to `--color fg:underline`
  -- If rhs is of type &quot;table&quot;, the following convention is used:
  --   [1] &quot;what&quot; field to extract from the hlgroup, i.e &quot;fg&quot;, &quot;bg&quot;, etc.
  --   [2] Neovim highlight group(s), can be either &quot;string&quot; or &quot;table&quot;
  --       when type is &quot;table&quot; the first existing highlight group is used
  --   [3+] any additional fields are passed raw to fzf&#39;s command line args
  -- Example of a &quot;fully loaded&quot; color option:
  --   `[&quot;fg&quot;] = { &quot;fg&quot;, { &quot;NonExistentHl&quot;, &quot;Comment&quot; }, &quot;underline&quot;, &quot;bold&quot; }`
  -- Assuming `Comment.fg=#010101` the resulting fzf command line will be:
  --   `--color fg:#010101:underline:bold`
  -- NOTE: to pass raw arguments `fzf_opts[&quot;--color&quot;]` or `fzf_args`
  -- NOTE: below is an example, not the defaults:
  fzf_colors = {
      true,   -- inherit fzf colors that aren&#39;t specified below from
              -- the auto-generated theme similar to `fzf_colors=true`
      [&quot;fg&quot;]          = { &quot;fg&quot;, &quot;CursorLine&quot; },
      [&quot;bg&quot;]          = { &quot;bg&quot;, &quot;Normal&quot; },
      [&quot;hl&quot;]          = { &quot;fg&quot;, &quot;Comment&quot; },
      [&quot;fg+&quot;]         = { &quot;fg&quot;, &quot;Normal&quot;, &quot;underline&quot; },
      [&quot;bg+&quot;]         = { &quot;bg&quot;, { &quot;CursorLine&quot;, &quot;Normal&quot; } },
      [&quot;hl+&quot;]         = { &quot;fg&quot;, &quot;Statement&quot; },
      [&quot;info&quot;]        = { &quot;fg&quot;, &quot;PreProc&quot; },
      [&quot;prompt&quot;]      = { &quot;fg&quot;, &quot;Conditional&quot; },
      [&quot;pointer&quot;]     = { &quot;fg&quot;, &quot;Exception&quot; },
      [&quot;marker&quot;]      = { &quot;fg&quot;, &quot;Keyword&quot; },
      [&quot;spinner&quot;]     = { &quot;fg&quot;, &quot;Label&quot; },
      [&quot;header&quot;]      = { &quot;fg&quot;, &quot;Comment&quot; },
      [&quot;gutter&quot;]      = &quot;-1&quot;,
  },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;hls&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] See the &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#highlights&quot;&gt;highlights&lt;/a&gt; section below for all available highlight groups.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hls = {
    normal = &quot;Normal&quot;          -- highlight group for normal fg/bg
    preview_normal = &quot;Normal&quot;  -- highlight group for preview fg/bg
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;previewers&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;previewers = {
    cat = {
      cmd             = &quot;cat&quot;,
      args            = &quot;-n&quot;,
    },
    bat = {
      cmd             = &quot;bat&quot;,
      args            = &quot;--color=always --style=numbers,changes&quot;,
    },
    head = {
      cmd             = &quot;head&quot;,
      args            = nil,
    },
    git_diff = {
      -- if required, use `{file}` for argument positioning
      -- e.g. `cmd_modified = &quot;git diff --color HEAD {file} | cut -c -30&quot;`
      cmd_deleted     = &quot;git diff --color HEAD --&quot;,
      cmd_modified    = &quot;git diff --color HEAD&quot;,
      cmd_untracked   = &quot;git diff --color --no-index /dev/null&quot;,
      -- git-delta is automatically detected as pager, set `pager=false`
      -- to disable, can also be set under &#39;git.status.preview_pager&#39;
    },
    man = {
      -- NOTE: remove the `-c` flag when using man-db
      -- replace with `man -P cat %s | col -bx` on OSX
      cmd             = &quot;man -c %s | col -bx&quot;,
    },
    builtin = {
      syntax          = true,         -- preview syntax highlight?
      syntax_limit_l  = 0,            -- syntax limit (lines), 0=nolimit
      syntax_limit_b  = 1024*1024,    -- syntax limit (bytes), 0=nolimit
      limit_b         = 1024*1024*10, -- preview limit (bytes), 0=nolimit
      -- previewer treesitter options:
      -- enable specific filetypes with: `{ enabled = { &quot;lua&quot; } }
      -- exclude specific filetypes with: `{ disabled = { &quot;lua&quot; } }
      -- disable `nvim-treesitter-context` with `context = false`
      -- disable fully with: `treesitter = false` or `{ enabled = false }`
      treesitter      = {
        enabled = true,
        disabled = {},
        -- nvim-treesitter-context config options
        context = { max_lines = 1, trim_scope = &quot;inner&quot; }
      },
      -- By default, the main window dimensions are calculated as if the
      -- preview is visible, when hidden the main window will extend to
      -- full size. Set the below to &quot;extend&quot; to prevent the main window
      -- from being modified when toggling the preview.
      toggle_behavior = &quot;default&quot;,
      -- Title transform function, by default only displays the tail
      -- title_fnamemodify = function(s) return vim.fn.fnamemodify(s, &quot;:t&quot;) end,
      -- preview extensions using a custom shell command:
      -- for example, use `viu` for image previews
      -- will do nothing if `viu` isn&#39;t executable
      extensions      = {
        -- neovim terminal only supports `viu` block output
        [&quot;png&quot;]       = { &quot;viu&quot;, &quot;-b&quot; },
        -- by default the filename is added as last argument
        -- if required, use `{file}` for argument positioning
        [&quot;svg&quot;]       = { &quot;chafa&quot;, &quot;{file}&quot; },
        [&quot;jpg&quot;]       = { &quot;ueberzug&quot; },
      },
      -- if using `ueberzug` in the above extensions map
      -- set the default image scaler, possible scalers:
      --   false (none), &quot;crop&quot;, &quot;distort&quot;, &quot;fit_contain&quot;,
      --   &quot;contain&quot;, &quot;forced_cover&quot;, &quot;cover&quot;
      -- https://github.com/seebye/ueberzug
      ueberzug_scaler = &quot;cover&quot;,
      -- render_markdown.nvim integration, enabled by default for markdown
      render_markdown = { enabled = true, filetypes = { [&quot;markdown&quot;] = true } },
      -- snacks.images integration, enabled by default
      snacks_image = { enabled = true, render_inline = true },
    },
    -- Code Action previewers, default is &quot;codeaction&quot; (set via `lsp.code_actions.previewer`)
    -- &quot;codeaction_native&quot; uses fzf&#39;s native previewer, recommended when combined with git-delta
    codeaction = {
      -- options for vim.diff(): https://neovim.io/doc/user/lua.html#vim.diff()
      diff_opts = { ctxlen = 3 },
    },
    codeaction_native = {
      diff_opts = { ctxlen = 3 },
      -- git-delta is automatically detected as pager, set `pager=false`
      -- to disable, can also be set under &#39;lsp.code_actions.preview_pager&#39;
      -- recommended styling for delta
      --pager = [[delta --width=$COLUMNS --hunk-header-style=&quot;omit&quot; --file-style=&quot;omit&quot;]],
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;picker options&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- use `defaults` (table or function) if you wish to set &quot;global-picker&quot; defaults
  -- for example, using &quot;mini.icons&quot; globally and open the quickfix list at the top
  --   defaults = {
  --     file_icons   = &quot;mini&quot;,
  --     copen        = &quot;topleft copen&quot;,
  --   },
  files = {
    -- previewer      = &quot;bat&quot;,          -- uncomment to override previewer
                                        -- (name from &#39;previewers&#39; table)
                                        -- set to &#39;false&#39; to disable
    prompt            = &#39;Files❯ &#39;,
    multiprocess      = true,           -- run command in a separate process
    git_icons         = false,          -- show git icons?
    file_icons        = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,           -- colorize file|git icons
    -- path_shorten   = 1,              -- &#39;true&#39; or number, shorten path?
    -- Uncomment for custom vscode-like formatter where the filename is first:
    -- e.g. &quot;fzf-lua/previewer/fzf.lua&quot; =&amp;gt; &quot;fzf.lua previewer/fzf-lua&quot;
    -- formatter      = &quot;path.filename_first&quot;,
    -- executed command priority is &#39;cmd&#39; (if exists)
    -- otherwise auto-detect prioritizes `fd`:`rg`:`find`
    -- default options are controlled by &#39;fd|rg|find|_opts&#39;
    -- cmd            = &quot;rg --files&quot;,
    find_opts         = [[-type f \! -path &#39;*/.git/*&#39;]],
    rg_opts           = [[--color=never --hidden --files -g &quot;!.git&quot;]],
    fd_opts           = [[--color=never --hidden --type f --type l --exclude .git]],
    dir_opts          = [[/s/b/a:-d]],
    -- by default, cwd appears in the header only if {opts} contain a cwd
    -- parameter to a different folder than the current working directory
    -- uncomment if you wish to force display of the cwd as part of the
    -- query prompt string (fzf.vim style), header line or both
    -- cwd_header = true,
    cwd_prompt             = true,
    cwd_prompt_shorten_len = 32,        -- shorten prompt beyond this length
    cwd_prompt_shorten_val = 1,         -- shortened path parts length
    toggle_ignore_flag = &quot;--no-ignore&quot;, -- flag toggled in `actions.toggle_ignore`
    toggle_hidden_flag = &quot;--hidden&quot;,    -- flag toggled in `actions.toggle_hidden`
    toggle_follow_flag = &quot;-L&quot;,          -- flag toggled in `actions.toggle_follow`
    hidden             = true,          -- enable hidden files by default
    follow             = false,         -- do not follow symlinks by default
    no_ignore          = false,         -- respect &quot;.gitignore&quot;  by default
    actions = {
      -- inherits from &#39;actions.files&#39;, here we can override
      -- or set bind to &#39;false&#39; to disable a default action
      -- uncomment to override `actions.file_edit_or_qf`
      --   [&quot;enter&quot;]     = actions.file_edit,
      -- custom actions are available too
      --   [&quot;ctrl-y&quot;]    = function(selected) print(selected[1]) end,
    }
  },
  git = {
    files = {
      prompt        = &#39;GitFiles❯ &#39;,
      cmd           = &#39;git ls-files --exclude-standard&#39;,
      multiprocess  = true,           -- run command in a separate process
      git_icons     = true,           -- show git icons?
      file_icons    = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
      color_icons   = true,           -- colorize file|git icons
      -- force display the cwd header line regardless of your current working
      -- directory can also be used to hide the header when not wanted
      -- cwd_header = true
    },
    status = {
      prompt        = &#39;GitStatus❯ &#39;,
      cmd           = &quot;git -c color.status=false --no-optional-locks status --porcelain=v1 -u&quot;,
      multiprocess  = true,           -- run command in a separate process
      file_icons    = true,
      color_icons   = true,
      previewer     = &quot;git_diff&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        -- actions inherit from &#39;actions.files&#39; and merge
        [&quot;right&quot;]  = { fn = actions.git_unstage, reload = true },
        [&quot;left&quot;]   = { fn = actions.git_stage, reload = true },
        [&quot;ctrl-x&quot;] = { fn = actions.git_reset, reload = true },
      },
      -- If you wish to use a single stage|unstage toggle instead
      -- using &#39;ctrl-s&#39; modify the &#39;actions&#39; table as shown below
      -- actions = {
      --   [&quot;right&quot;]   = false,
      --   [&quot;left&quot;]    = false,
      --   [&quot;ctrl-x&quot;]  = { fn = actions.git_reset, reload = true },
      --   [&quot;ctrl-s&quot;]  = { fn = actions.git_stage_unstage, reload = true },
      -- },
    },
    diff = {
      cmd               = &quot;git --no-pager diff --name-only {ref}&quot;,
      ref               = &quot;HEAD&quot;,
      preview           = &quot;git diff {ref} {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      file_icons        = true,
      color_icons       = true,
      fzf_opts          = { [&quot;--multi&quot;] = true },
    },
    hunks = {
      cmd               = &quot;git --no-pager diff --color=always {ref}&quot;,
      ref               = &quot;HEAD&quot;,
      file_icons        = true,
      color_icons       = true,
      fzf_opts          = {
      [&quot;--multi&quot;] = true,
      [&quot;--delimiter&quot;] = &quot;:&quot;,
      [&quot;--nth&quot;] = &quot;3..&quot;,
      },
    },
    commits = {
      prompt        = &#39;Commits❯ &#39;,
      cmd           = [[git log --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot;]],
      preview       = &quot;git show --color {1}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]   = actions.git_checkout,
        -- remove `exec_silent` or set to `false` to exit after yank
        [&quot;ctrl-y&quot;]  = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    bcommits = {
      prompt        = &#39;BCommits❯ &#39;,
      -- default preview shows a git diff vs the previous commit
      -- if you prefer to see the entire commit you can use:
      --   git show --color {1} --rotate-to={file}
      --   {1}    : commit SHA (fzf field index expression)
      --   {file} : filepath placement within the commands
      cmd           = [[git log --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot; {file}]],
      preview       = &quot;git show --color {1} -- {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]   = actions.git_buf_edit,
        [&quot;ctrl-s&quot;]  = actions.git_buf_split,
        [&quot;ctrl-v&quot;]  = actions.git_buf_vsplit,
        [&quot;ctrl-t&quot;]  = actions.git_buf_tabedit,
        [&quot;ctrl-y&quot;]  = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    blame = {
      prompt        = &quot;Blame&amp;gt; &quot;,
      cmd           = [[git blame --color-lines {file}]],
      preview       = &quot;git show --color {1} -- {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]  = actions.git_goto_line,
        [&quot;ctrl-s&quot;] = actions.git_buf_split,
        [&quot;ctrl-v&quot;] = actions.git_buf_vsplit,
        [&quot;ctrl-t&quot;] = actions.git_buf_tabedit,
        [&quot;ctrl-y&quot;] = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    branches = {
      prompt   = &#39;Branches❯ &#39;,
      cmd      = &quot;git branch --all --color&quot;,
      preview  = &quot;git log --graph --pretty=oneline --abbrev-commit --color {1}&quot;,
      remotes  = &quot;local&quot;, -- &quot;detach|local&quot;, switch behavior for remotes
      actions  = {
        [&quot;enter&quot;]   = actions.git_switch,
        [&quot;ctrl-x&quot;]  = { fn = actions.git_branch_del, reload = true },
        [&quot;ctrl-a&quot;]  = { fn = actions.git_branch_add, field_index = &quot;{q}&quot;, reload = true },
      },
      -- If you wish to add branch and switch immediately
      -- cmd_add  = { &quot;git&quot;, &quot;checkout&quot;, &quot;-b&quot; },
      cmd_add  = { &quot;git&quot;, &quot;branch&quot; },
      -- If you wish to delete unmerged branches add &quot;--force&quot;
      -- cmd_del  = { &quot;git&quot;, &quot;branch&quot;, &quot;--delete&quot;, &quot;--force&quot; },
      cmd_del  = { &quot;git&quot;, &quot;branch&quot;, &quot;--delete&quot; },
    },
    tags = {
      prompt   = &quot;Tags&amp;gt; &quot;,
      cmd      = [[git for-each-ref --color --sort=&quot;-taggerdate&quot; --format ]]
          .. [[&quot;%(color:yellow)%(refname:short)%(color:reset) ]]
          .. [[%(color:green)(%(taggerdate:relative))%(color:reset)]]
          .. [[ %(subject) %(color:blue)%(taggername)%(color:reset)&quot; refs/tags]],
      preview  = [[git log --graph --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot; {1}]],
      actions  = { [&quot;enter&quot;] = actions.git_checkout },
    },
    stash = {
      prompt          = &#39;Stash&amp;gt; &#39;,
      cmd             = &quot;git --no-pager stash list&quot;,
      preview         = &quot;git --no-pager stash show --patch --color {1}&quot;,
      actions = {
        [&quot;enter&quot;]     = actions.git_stash_apply,
        [&quot;ctrl-x&quot;]    = { fn = actions.git_stash_drop, reload = true },
      },
    },
    icons = {
      [&quot;M&quot;]           = { icon = &quot;M&quot;, color = &quot;yellow&quot; },
      [&quot;D&quot;]           = { icon = &quot;D&quot;, color = &quot;red&quot; },
      [&quot;A&quot;]           = { icon = &quot;A&quot;, color = &quot;green&quot; },
      [&quot;R&quot;]           = { icon = &quot;R&quot;, color = &quot;yellow&quot; },
      [&quot;C&quot;]           = { icon = &quot;C&quot;, color = &quot;yellow&quot; },
      [&quot;T&quot;]           = { icon = &quot;T&quot;, color = &quot;magenta&quot; },
      [&quot;?&quot;]           = { icon = &quot;?&quot;, color = &quot;magenta&quot; },
      -- override git icons?
      -- [&quot;M&quot;]        = { icon = &quot;★&quot;, color = &quot;red&quot; },
      -- [&quot;D&quot;]        = { icon = &quot;✗&quot;, color = &quot;red&quot; },
      -- [&quot;A&quot;]        = { icon = &quot;+&quot;, color = &quot;green&quot; },
    },
  },
  grep = {
    prompt            = &#39;Rg❯ &#39;,
    input_prompt      = &#39;Grep For❯ &#39;,
    multiprocess      = true,           -- run command in a separate process
    git_icons         = false,          -- show git icons?
    file_icons        = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,           -- colorize file|git icons
    -- executed command priority is &#39;cmd&#39; (if exists)
    -- otherwise auto-detect prioritizes `rg` over `grep`
    -- default options are controlled by &#39;rg|grep_opts&#39;
    -- cmd            = &quot;rg --vimgrep&quot;,
    grep_opts         = &quot;--binary-files=without-match --line-number --recursive --color=auto --perl-regexp -e&quot;,
    rg_opts           = &quot;--column --line-number --no-heading --color=always --smart-case --max-columns=4096 -e&quot;,
    hidden             = false,       -- disable hidden files by default
    follow             = false,       -- do not follow symlinks by default
    no_ignore          = false,       -- respect &quot;.gitignore&quot;  by default
    -- Uncomment to use the rg config file `$RIPGREP_CONFIG_PATH`
    -- RIPGREP_CONFIG_PATH = vim.env.RIPGREP_CONFIG_PATH
    --
    -- Set to &#39;true&#39; to always parse globs in both &#39;grep&#39; and &#39;live_grep&#39;
    -- search strings will be split using the &#39;glob_separator&#39; and translated
    -- to &#39;--iglob=&#39; arguments, requires &#39;rg&#39;
    -- can still be used when &#39;false&#39; by calling &#39;live_grep_glob&#39; directly
    rg_glob           = true,         -- default to glob parsing with `rg`
    glob_flag         = &quot;--iglob&quot;,    -- for case sensitive globs use &#39;--glob&#39;
    glob_separator    = &quot;%s%-%-&quot;,     -- query separator pattern (lua): &#39; --&#39;
    -- advanced usage: for custom argument parsing define
    -- &#39;rg_glob_fn&#39; to return a pair:
    --   first returned argument is the new search query
    --   second returned argument are additional rg flags
    -- rg_glob_fn = function(query, opts)
    --   ...
    --   return new_query, flags
    -- end,
    --
    -- Enable with narrow term width, split results to multiple lines
    -- NOTE: multiline requires fzf &amp;gt;= v0.53 and is ignored otherwise
    -- multiline      = 1,      -- Display as: PATH:LINE:COL\nTEXT
    -- multiline      = 2,      -- Display as: PATH:LINE:COL\nTEXT\n
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;
      [&quot;ctrl-g&quot;]      = { actions.grep_lgrep }
      -- uncomment to enable &#39;.gitignore&#39; toggle for grep
      -- [&quot;ctrl-r&quot;]   = { actions.toggle_ignore }
    },
    no_header             = false,    -- hide grep|cwd header?
    no_header_i           = false,    -- hide interactive header?
  },
  args = {
    prompt            = &#39;Args❯ &#39;,
    files_only        = true,
    -- actions inherit from &#39;actions.files&#39; and merge
    actions           = { [&quot;ctrl-x&quot;] = { fn = actions.arg_del, reload = true } },
  },
  oldfiles = {
    prompt            = &#39;History❯ &#39;,
    cwd_only          = false,
    stat_file         = true,         -- verify files exist on disk
    -- can also be a lua function, for example:
    -- stat_file = FzfLua.utils.file_is_readable,
    -- stat_file = function() return true end,
    include_current_session = false,  -- include bufs from current session
  },
  buffers = {
    prompt            = &#39;Buffers❯ &#39;,
    file_icons        = true,         -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,         -- colorize file|git icons
    sort_lastused     = true,         -- sort buffers() by last used
    show_unloaded     = true,         -- show unloaded buffers
    cwd_only          = false,        -- buffers for the cwd only
    cwd               = nil,          -- buffers list for a given dir
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- by supplying a table of functions we&#39;re telling
      -- fzf-lua to not close the fzf window, this way we
      -- can resume the buffers picker on the same window
      -- eliminating an otherwise unaesthetic win &quot;flash&quot;
      [&quot;ctrl-x&quot;]      = { fn = actions.buf_del, reload = true },
    }
  },
  tabs = {
    prompt            = &#39;Tabs❯ &#39;,
    tab_title         = &quot;Tab&quot;,
    tab_marker        = &quot;&amp;lt;&amp;lt;&quot;,
    locate            = true,         -- position cursor at current window
    file_icons        = true,         -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,         -- colorize file|git icons
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      [&quot;enter&quot;]       = actions.buf_switch,
      [&quot;ctrl-x&quot;]      = { fn = actions.buf_del, reload = true },
    },
    fzf_opts = {
      -- hide tabnr
      [&quot;--delimiter&quot;] = &quot;[\\):]&quot;,
      [&quot;--with-nth&quot;]  = &#39;2..&#39;,
    },
  },
  -- `blines` has the same defaults as `lines` aside from prompt and `show_bufname`
  lines = {
    prompt            = &#39;Lines❯ &#39;,
    file_icons        = true,
    show_bufname      = true,         -- display buffer name
    show_unloaded     = true,         -- show unloaded buffers
    show_unlisted     = false,        -- exclude &#39;help&#39; buffers
    no_term_buffers   = true,         -- exclude &#39;term&#39; buffers
    sort_lastused     = true,         -- sort by most recent
    winopts  = { treesitter = true }, -- enable TS highlights
    fzf_opts = {
      -- do not include bufnr in fuzzy matching
      -- tiebreak by line no.
      [&quot;--multi&quot;]     = true,
      [&quot;--delimiter&quot;] = &quot;[\t]&quot;,
      [&quot;--tabstop&quot;]   = &quot;1&quot;,
      [&quot;--tiebreak&quot;]  = &quot;index&quot;,
      [&quot;--with-nth&quot;]  = &quot;2..&quot;,
      [&quot;--nth&quot;]       = &quot;4..&quot;,
    },
  },
  tags = {
    prompt                = &#39;Tags❯ &#39;,
    ctags_file            = nil,      -- auto-detect from tags-option
    multiprocess          = true,
    file_icons            = true,
    color_icons           = true,
    -- &#39;tags_live_grep&#39; options, `rg` prioritizes over `grep`
    rg_opts               = &quot;--no-heading --color=always --smart-case&quot;,
    grep_opts             = &quot;--color=auto --perl-regexp&quot;,
    fzf_opts              = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;
      [&quot;ctrl-g&quot;]          = { actions.grep_lgrep }
    },
    no_header             = false,    -- hide grep|cwd header?
    no_header_i           = false,    -- hide interactive header?
  },
  btags = {
    prompt                = &#39;BTags❯ &#39;,
    ctags_file            = nil,      -- auto-detect from tags-option
    ctags_autogen         = true,     -- dynamically generate ctags each call
    multiprocess          = true,
    file_icons            = false,
    rg_opts               = &quot;--color=never --no-heading&quot;,
    grep_opts             = &quot;--color=never --perl-regexp&quot;,
    fzf_opts              = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    -- actions inherit from &#39;actions.files&#39;
  },
  colorschemes = {
    prompt            = &#39;Colorschemes❯ &#39;,
    live_preview      = true,       -- apply the colorscheme on preview?
    actions           = { [&quot;enter&quot;] = actions.colorscheme },
    winopts           = { height = 0.55, width = 0.30, },
    -- uncomment to ignore colorschemes names (lua patterns)
    -- ignore_patterns   = { &quot;^delek$&quot;, &quot;^blue$&quot; },
  },
  awesome_colorschemes = {
    prompt            = &#39;Colorschemes❯ &#39;,
    live_preview      = true,       -- apply the colorscheme on preview?
    max_threads       = 5,          -- max download/update threads
    winopts           = { row = 0, col = 0.99, width = 0.50 },
    fzf_opts          = {
      [&quot;--multi&quot;]     = true,
      [&quot;--delimiter&quot;] = &quot;[:]&quot;,
      [&quot;--with-nth&quot;]  = &quot;3..&quot;,
      [&quot;--tiebreak&quot;]  = &quot;index&quot;,
    },
    actions           = {
      [&quot;enter&quot;]   = actions.colorscheme,
      [&quot;ctrl-g&quot;]  = { fn = actions.toggle_bg, exec_silent = true },
      [&quot;ctrl-r&quot;]  = { fn = actions.cs_update, reload = true },
      [&quot;ctrl-x&quot;]  = { fn = actions.cs_delete, reload = true },
    },
  },
  keymaps = {
    prompt            = &quot;Keymaps&amp;gt; &quot;,
    winopts           = { preview = { layout = &quot;vertical&quot; } },
    fzf_opts          = { [&quot;--tiebreak&quot;] = &quot;index&quot;, },
    -- by default, we ignore &amp;lt;Plug&amp;gt; and &amp;lt;SNR&amp;gt; mappings
    -- set `ignore_patterns = false` to disable filtering
    ignore_patterns   = { &quot;^&amp;lt;SNR&amp;gt;&quot;, &quot;^&amp;lt;Plug&amp;gt;&quot; },
    show_desc         = true,
    show_details      = true,
    actions           = {
      [&quot;enter&quot;]       = actions.keymap_apply,
      [&quot;ctrl-s&quot;]      = actions.keymap_split,
      [&quot;ctrl-v&quot;]      = actions.keymap_vsplit,
      [&quot;ctrl-t&quot;]      = actions.keymap_tabedit,
    },
  },
  nvim_options = {
    prompt            = &quot;Nvim Options&amp;gt; &quot;,
    separator         = &quot;│&quot;,  -- separator between option name and value
    color_values      = true, -- colorize boolean values
    actions           = {
      [&quot;enter&quot;]     = { fn = actions.nvim_opt_edit_local, reload = true },
      [&quot;alt-enter&quot;] = { fn = actions.nvim_opt_edit_global, reload = true },
    },
  },
  quickfix = {
    file_icons        = true,
    valid_only        = false, -- select among only the valid quickfix entries
  },
  quickfix_stack = {
    prompt = &quot;Quickfix Stack&amp;gt; &quot;,
    marker = &quot;&amp;gt;&quot;,                   -- current list marker
  },
  lsp = {
    prompt_postfix    = &#39;❯ &#39;,       -- will be appended to the LSP label
                                    -- to override use &#39;prompt&#39; instead
    cwd_only          = false,      -- LSP/diagnostics for cwd only?
    async_or_timeout  = 5000,       -- timeout(ms) or &#39;true&#39; for async calls
    file_icons        = true,
    git_icons         = false,
    jump1             = true,       -- skip the UI when result is a single entry
    jump1_action      = FzfLua.actions.file_edit
    -- The equivalent of using `includeDeclaration` in lsp buf calls, e.g:
    -- :lua vim.lsp.buf.references({includeDeclaration = false})
    includeDeclaration = true,      -- include current declaration in LSP context
    -- settings for &#39;lsp_{document|workspace|lsp_live_workspace}_symbols&#39;
    symbols = {
        -- lsp_query      = &quot;foo&quot;       -- query passed to the LSP directly
        -- query          = &quot;bar&quot;       -- query passed to fzf prompt for fuzzy matching
        locate            = false,      -- attempt to position cursor at current symbol
        async_or_timeout  = true,       -- symbols are async by default
        symbol_style      = 1,          -- style for document/workspace symbols
                                        -- false: disable,    1: icon+kind
                                        --     2: icon only,  3: kind only
                                        -- NOTE: icons are extracted from
                                        -- vim.lsp.protocol.CompletionItemKind
        -- icons for symbol kind
        -- see https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind
        -- see https://github.com/neovim/neovim/blob/829d92eca3d72a701adc6e6aa17ccd9fe2082479/runtime/lua/vim/lsp/protocol.lua#L117
        symbol_icons     = {
          File          = &quot;󰈙&quot;,
          Module        = &quot;&quot;,
          Namespace     = &quot;󰦮&quot;,
          Package       = &quot;&quot;,
          Class         = &quot;󰆧&quot;,
          Method        = &quot;󰊕&quot;,
          Property      = &quot;&quot;,
          Field         = &quot;&quot;,
          Constructor   = &quot;&quot;,
          Enum          = &quot;&quot;,
          Interface     = &quot;&quot;,
          Function      = &quot;󰊕&quot;,
          Variable      = &quot;󰀫&quot;,
          Constant      = &quot;󰏿&quot;,
          String        = &quot;&quot;,
          Number        = &quot;󰎠&quot;,
          Boolean       = &quot;󰨙&quot;,
          Array         = &quot;󱡠&quot;,
          Object        = &quot;&quot;,
          Key           = &quot;󰌋&quot;,
          Null          = &quot;󰟢&quot;,
          EnumMember    = &quot;&quot;,
          Struct        = &quot;󰆼&quot;,
          Event         = &quot;&quot;,
          Operator      = &quot;󰆕&quot;,
          TypeParameter = &quot;󰗴&quot;,
        },
        -- colorize using Treesitter &#39;@&#39; highlight groups (&quot;@function&quot;, etc).
        -- or &#39;false&#39; to disable highlighting
        symbol_hl         = function(s) return &quot;@&quot; .. s:lower() end,
        -- additional symbol formatting, works with or without style
        symbol_fmt        = function(s, opts) return &quot;[&quot; .. s .. &quot;]&quot; end,
        -- prefix child symbols. set to any string or `false` to disable
        child_prefix      = true,
        fzf_opts          = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    },
    code_actions = {
        prompt            = &#39;Code Actions&amp;gt; &#39;,
        async_or_timeout  = 5000,
        -- when git-delta is installed use &quot;codeaction_native&quot; for beautiful diffs
        -- try it out with `:FzfLua lsp_code_actions previewer=codeaction_native`
        -- scroll up to `previewers.codeaction{_native}` for more previewer options
        previewer        = &quot;codeaction&quot;,
    },
    finder = {
        prompt      = &quot;LSP Finder&amp;gt; &quot;,
        file_icons  = true,
        color_icons = true,
        async       = true,         -- async by default
        silent      = true,         -- suppress &quot;not found&quot;
        separator   = &quot;| &quot;,         -- separator after provider prefix, `false` to disable
        includeDeclaration = true,  -- include current declaration in LSP context
        -- by default display all LSP locations
        -- to customize, duplicate table and delete unwanted providers
        providers   = {
            { &quot;references&quot;,      prefix = FzfLua.utils.ansi_codes.blue(&quot;ref &quot;) },
            { &quot;definitions&quot;,     prefix = FzfLua.utils.ansi_codes.green(&quot;def &quot;) },
            { &quot;declarations&quot;,    prefix = FzfLua.utils.ansi_codes.magenta(&quot;decl&quot;) },
            { &quot;typedefs&quot;,        prefix = FzfLua.utils.ansi_codes.red(&quot;tdef&quot;) },
            { &quot;implementations&quot;, prefix = FzfLua.utils.ansi_codes.green(&quot;impl&quot;) },
            { &quot;incoming_calls&quot;,  prefix = FzfLua.utils.ansi_codes.cyan(&quot;in  &quot;) },
            { &quot;outgoing_calls&quot;,  prefix = FzfLua.utils.ansi_codes.yellow(&quot;out &quot;) },
        },
    }
  },
  diagnostics ={
    prompt            = &#39;Diagnostics❯ &#39;,
    cwd_only          = false,
    file_icons        = false,
    git_icons         = false,
    color_headings    = true,   -- use diag highlights to color source &amp;amp; filepath
    diag_icons        = true,   -- display icons from diag sign definitions
    diag_source       = true,   -- display diag source (e.g. [pycodestyle])
    diag_code         = true,   -- display diag code (e.g. [undefined])
    icon_padding      = &#39;&#39;,     -- add padding for wide diagnostics signs
    multiline         = 2,      -- split heading and diag to separate lines
    -- severity_only:   keep any matching exact severity
    -- severity_limit:  keep any equal or more severe (lower)
    -- severity_bound:  keep any equal or less severe (higher)
  },
  marks = {
    marks = &quot;&quot;, -- filter vim marks with a lua pattern
    -- for example if you want to only show user defined marks
    -- you would set this option as %a this would match characters from [A-Za-z]
    -- or if you want to show only numbers you would set the pattern to %d (0-9).
  },
  complete_path = {
    cmd          = nil, -- default: auto detect fd|rg|find
    complete     = { [&quot;enter&quot;] = actions.complete },
    word_pattern = nil, -- default: &quot;[^%s\&quot;&#39;]*&quot;
  },
  complete_file = {
    cmd          = nil, -- default: auto detect rg|fd|find
    file_icons   = true,
    color_icons  = true,
    word_pattern = nil,
    -- actions inherit from &#39;actions.files&#39; and merge
    actions      = { [&quot;enter&quot;] = actions.complete },
    -- previewer hidden by default
    winopts      = { preview = { hidden = true } },
  },
  zoxide = {
    cmd          = &quot;zoxide query --list --score&quot;,
    scope        = &quot;global&quot;, -- cd action scope &quot;local|win|tab&quot;
    git_root     = false,    -- auto-detect git root
    formatter    = &quot;path.dirname_first&quot;,
    fzf_opts     = {
      [&quot;--no-multi&quot;]  = true,
      [&quot;--delimiter&quot;] = &quot;[\t]&quot;,
      [&quot;--tabstop&quot;]   = &quot;4&quot;,
      [&quot;--tiebreak&quot;]  = &quot;end,index&quot;, -- prefer dirs ending with search term
      [&quot;--nth&quot;]       = &quot;2..&quot;,       -- exclude score from fuzzy matching
    },
    actions      = { enter = actions.cd }
  },
  -- uncomment to use fzf native previewers
  -- (instead of using a neovim floating window)
  -- manpages = { previewer = &quot;man_native&quot; },
  -- helptags = { previewer = &quot;help_native&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] To experiment with different options without modifying the global config, options can be sent as inline parameters to the function calls. Expand below to see examples of inline customization and Refer to &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/OPTIONS.md&quot;&gt;OPTIONS&lt;/a&gt; for yet more examples.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR EXAMPLES OF INLINE CUSTOMIZATION&lt;/summary&gt; 
 &lt;h4&gt;Inline Customization&lt;/h4&gt; 
 &lt;p&gt;Different &lt;code&gt;fzf&lt;/code&gt; layout:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ fzf_opts = {[&#39;--layout&#39;] = &#39;reverse-list&#39;} })
-- Or via the vimL command
:FzfLua files fzf_opts.--layout=reverse-list
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using &lt;code&gt;files&lt;/code&gt; with a different command and working directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ prompt=&quot;LS&amp;gt; &quot;, cmd = &quot;ls&quot;, cwd=&quot;~/.config&quot; })
-- Or via the vimL command
:FzfLua files prompt=&quot;LS&amp;gt;\ &quot; cmd=ls cwd=~/.config
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using &lt;code&gt;live_grep&lt;/code&gt; with &lt;code&gt;git grep&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.live_grep({ cmd = &quot;git grep --line-number --column --color=always&quot; })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;code&gt;spell_suggest&lt;/code&gt; with non-default window size relative to cursor:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.spell_suggest({ winopts = { height=0.33, width=0.33, relative=&quot;cursor&quot; } })
-- Or via the vimL command
:FzfLua spell_suggest winopts={height=0.33,width=0.33,relative=cursor}
:FzfLua spell_suggest winopts={height=0.33,width=0.33} winopts.relative=cursor
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Profiles&lt;/h3&gt; 
&lt;p&gt;Conveniently, fzf-lua comes with a set of preconfigured profiles if you do not want to tinker with customization.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;:FzfLua profiles&lt;/code&gt; to experiment with the different profiles, once you&#39;ve found what you like and wish to make the profile persist, send a &lt;code&gt;string&lt;/code&gt; argument at the first index of the table sent to the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;code&gt;setup&lt;/code&gt; can be called multiple times for profile &quot;live&quot; switching, see &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/tree/main/lua/fzf-lua/profiles&quot;&gt;profiles&lt;/a&gt; page for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-native&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also start with a profile as &quot;baseline&quot; and customize it, for example, telescope defaults with &lt;code&gt;bat&lt;/code&gt; previewer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&quot;fzf-lua&quot;.setup({&quot;telescope&quot;,winopts={preview={default=&quot;bat&quot;}}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Combining of profiles is also available by sending table instead of string as the first argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&quot;fzf-lua&quot;.setup({{&quot;telescope&quot;,&quot;fzf-native&quot;},winopts={fullscreen=true}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] The default profile is a combination of border-fused+hide profiles, without the &quot;hide&quot; profile pressing esc terminates the fzf process which makes for an imperfect resume limited to resuming only the picker/query (without cursor position, selection, etc), to restore the default esc behavior combine any existing profile with &quot;hide&quot; by using a table in &lt;code&gt;opts[1]&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup({
  { &quot;fzf-native&quot;, &quot;hide&quot; },
  -- your other settings here
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Coming from fzf.vim?&lt;/h4&gt; 
&lt;p&gt;Easy! just use the &lt;code&gt;fzf-vim&lt;/code&gt; profile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-vim&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Using the &lt;code&gt;fzf-vim&lt;/code&gt; profile will automatically create &lt;code&gt;fzf.vim&lt;/code&gt;&#39;s user commands (i.e. &lt;code&gt;:Files&lt;/code&gt;, &lt;code&gt;:Rg&lt;/code&gt;), if you wish to use a different profile you can create the same user commands by running &lt;code&gt;:FzfLua setup_fzfvim_cmds&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK TO SEE THE AVAILABLE PROFILES&lt;/summary&gt; 
 &lt;h4&gt;Available Profiles&lt;/h4&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Profile&lt;/th&gt; 
    &lt;th&gt;Details&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, uses neovim &quot;builtin&quot; buffer previewer and devicons (if available)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default-title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, using title for picker info (default on neovim &amp;gt;= 0.9)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default-prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, using prompt for picker info (default on neovim &amp;lt; 0.9)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-native&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;utilizes fzf&#39;s native previewing ability in the terminal where possible using &lt;code&gt;bat&lt;/code&gt; for previews&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-tmux&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and opens in a tmux popup (requires tmux &amp;gt; 3.2)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-vim&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;closest to &lt;code&gt;fzf.vim&lt;/code&gt;&#39;s defaults (+icons), also sets up user commands (&lt;code&gt;:Files&lt;/code&gt;, &lt;code&gt;:Rg&lt;/code&gt;, etc)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;max-perf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and disables icons globally for max performance&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;closest match to telescope defaults in look and feel and keybinds&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;uses &lt;a href=&quot;https://github.com/skim-rs/skim&quot;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; as an fzf alternative, (requires the &lt;code&gt;sk&lt;/code&gt; binary)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;borderless&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;borderless and minimalistic seamless look &amp;amp; feel&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;borderless-full&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;borderless with description in window title (instead of prompt)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;border-fused&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;single border around both fzf and the previewer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;ivy&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;UI at bottom, similar to telescope&#39;s ivy layout&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;hide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;send fzf process to background instead of termination&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h3&gt;Extensibility&lt;/h3&gt; 
&lt;p&gt;Fzf-lua can be easily extended and customised for your own needs: have a look at a full list of examples and plugins browsing the 💡&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/wiki/Advanced&quot;&gt;Wiki&lt;/a&gt; 💡&lt;/p&gt; 
&lt;p&gt;Have ideas for new pickers, plugins or extensions? Add it to the wiki, it&#39;s open edit!&lt;/p&gt; 
&lt;h3&gt;Insert-mode completion&lt;/h3&gt; 
&lt;p&gt;Fzf-lua comes with a set of completion functions for paths/files and lines from open buffers as well as custom completion, for example, set path/completion using &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;n&quot;, &quot;v&quot;, &quot;i&quot; }, &quot;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&quot;,
  function() FzfLua.complete_path() end,
  { silent = true, desc = &quot;Fuzzy complete path&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with a custom command and preview:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] only &lt;code&gt;complete_file&lt;/code&gt; supports a previewer as &lt;code&gt;complete_path&lt;/code&gt; mixes both files and directories.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;i&quot; }, &quot;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&quot;,
  function()
    FzfLua.complete_file({
      cmd = &quot;rg --files&quot;,
      winopts = { preview = { hidden = true } }
    })
  end, { silent = true, desc = &quot;Fuzzy complete file&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR CUSTOM COMPLETION DETAILS&lt;/summary&gt; 
 &lt;h4&gt;Custom Completion&lt;/h4&gt; 
 &lt;p&gt;Every fzf-lua function can be easily converted to a completion function by sending &lt;code&gt;complete = true&lt;/code&gt; in the options:&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;By default fzf-lua will insert the entry at the cursor location as if you used &lt;code&gt;p&lt;/code&gt; to paste the selected entry.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;FzfLua.fzf_exec({&quot;foo&quot;, &quot;bar&quot;}, {complete = true})
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Custom completion is possible using a custom completion callback, the example below will replace the text from the current cursor column with the selected entry:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;FzfLua.fzf_exec({&quot;foo&quot;, &quot;bar&quot;}, {
  -- @param selected: the selected entry or entries
  -- @param opts: fzf-lua caller/provider options
  -- @param line: originating buffer completed line
  -- @param col: originating cursor column location
  -- @return newline: will replace the current buffer line
  -- @return newcol?: optional, sets the new cursor column
  complete = function(selected, opts, line, col)
    local newline = line:sub(1, col) .. selected[1]
    -- set cursor to EOL, since `nvim_win_set_cursor`
    -- is 0-based we have to lower the col value by 1
    return newline, #newline - 1
  end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Highlights&lt;/h3&gt; 
&lt;p&gt;Highlight groups can be easily customized either via the lua API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua vim.api.nvim_set_hl(0, &quot;FzfLuaBorder&quot;, { link = &quot;FloatBorder&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or via &lt;code&gt;setup&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup {
  hls = { border = &quot;FloatBorder&quot; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or temporarily in the call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ hls={preview_title=&quot;IncSearch&quot;} })
-- vimL equivalent
:FzfLua files hls.preview_title=IncSearch
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK TO SEE AVAILABLE HIGHLIGHT GROUPS&lt;/summary&gt; 
 &lt;h4&gt;Highlight groups&lt;/h4&gt; 
 &lt;p&gt;FzfLua conveniently creates the below highlights, each hlgroup can be temporarily overridden by its corresponding &lt;code&gt;winopts&lt;/code&gt; option:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Highlight Group&lt;/th&gt; 
    &lt;th&gt;Default&lt;/th&gt; 
    &lt;th&gt;Override Via&lt;/th&gt; 
    &lt;th&gt;Notes&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;Normal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;Normal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win title&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTitleFlags&lt;/td&gt; 
    &lt;td&gt;CursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.title_flags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win title flags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBackdrop&lt;/td&gt; 
    &lt;td&gt;*bg=Black&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.backdrop&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Backdrop color&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewTitle&lt;/td&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview title&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursor&lt;/td&gt; 
    &lt;td&gt;Cursor&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursor&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;Cursor&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; 
    &lt;td&gt;CursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursorline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;Cursorline&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursorLineNr&lt;/td&gt; 
    &lt;td&gt;CursorLineNr&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursorlinenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;CursorLineNr&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaSearch&lt;/td&gt; 
    &lt;td&gt;IncSearch&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.search&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview search matches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollBorderEmpty&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollborder_e&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll empty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollBorderFull&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollborder_f&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll full&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollFloatEmpty&lt;/td&gt; 
    &lt;td&gt;PmenuSbar&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollfloat_e&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll empty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollFloatFull&lt;/td&gt; 
    &lt;td&gt;PmenuThumb&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollfloat_f&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll full&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHelpNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.help_normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Help win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHelpBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.help_border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Help win border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHeaderBind&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.header_bind&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Header keybind&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHeaderText&lt;/td&gt; 
    &lt;td&gt;*Brown1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.header_text&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Header text&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPathColNr&lt;/td&gt; 
    &lt;td&gt;*CadetBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.path_colnr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path col nr (&lt;code&gt;qf,lsp,diag&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPathLineNr&lt;/td&gt; 
    &lt;td&gt;*LightGreen&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.path_linenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path line nr (&lt;code&gt;qf,lsp,diag&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufName&lt;/td&gt; 
    &lt;td&gt;Directory&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_name&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer name (&lt;code&gt;lines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufId&lt;/td&gt; 
    &lt;td&gt;TabLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_id&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer ID (&lt;code&gt;lines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufNr&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_nr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer number (&lt;code&gt;buffers,tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufLineNr&lt;/td&gt; 
    &lt;td&gt;LineNr&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_linenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line nr (&lt;code&gt;lines,blines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufFlagCur&lt;/td&gt; 
    &lt;td&gt;*Brown1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_flag_cur&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line (&lt;code&gt;buffers&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufFlagAlt&lt;/td&gt; 
    &lt;td&gt;*CadetBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_flag_alt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line (&lt;code&gt;buffers&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTabTitle&lt;/td&gt; 
    &lt;td&gt;*LightSkyBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.tab_title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Tab title (&lt;code&gt;tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTabMarker&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.tab_marker&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Tab marker (&lt;code&gt;tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaDirIcon&lt;/td&gt; 
    &lt;td&gt;Directory&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.dir_icon&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Paths directory icon&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaDirPart&lt;/td&gt; 
    &lt;td&gt;Comment&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.dir_part&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path formatters directory hl group&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFilePart&lt;/td&gt; 
    &lt;td&gt;@none&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.file_part&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path formatters file hl group&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaLivePrompt&lt;/td&gt; 
    &lt;td&gt;*PaleVioletRed1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.live_prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&quot;live&quot; queries prompt text&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaLiveSym&lt;/td&gt; 
    &lt;td&gt;*PaleVioletRed1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.live_sym&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;LSP live symbols query match&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;fg|bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfCursorLine&lt;/td&gt; 
    &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.cursorline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;fg+|bg+&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfMatch&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.match&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;hl+&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;border&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfScrollbar&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.scrollbar&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;scrollbar&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfSeparator&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.separator&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;separator&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfGutter&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.gutter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;gutter&lt;/code&gt; (hl &lt;code&gt;bg&lt;/code&gt; is used)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfHeader&lt;/td&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.header&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;header&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfInfo&lt;/td&gt; 
    &lt;td&gt;NonText&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.info&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;info&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.pointer&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfMarker&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.marker&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;marker&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfSpinner&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.spinner&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;spinner&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfPrompt&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;prompt&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfQuery&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.query&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;header&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;sup&gt;&lt;sub&gt;*Not a highlight group, RGB color from &lt;code&gt;nvim_get_color_map&lt;/code&gt;&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR FZF COLORS DETAILS&lt;/summary&gt; 
 &lt;h4&gt;Fzf Colors&lt;/h4&gt; 
 &lt;p&gt;Fzf&#39;s terminal colors are controlled by fzf&#39;s &lt;code&gt;--color&lt;/code&gt; flag which can be configured during setup via &lt;code&gt;fzf_colors&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to have fzf-lua automatically generate an fzf colorscheme from your current Neovim colorscheme:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup({ fzf_colors = true })
-- Or in the direct call options
:lua FzfLua.files({ fzf_colors = true })
:FzfLua files fzf_colors=true
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Customizing the fzf colorscheme (see &lt;code&gt;man fzf&lt;/code&gt; for all color options):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup {
  fzf_colors = {
    -- First existing highlight group will be used
    -- values in 3rd+ index will be passed raw
    -- i.e:  `--color fg+:#010101:bold:underline`
    [&quot;fg+&quot;] = { &quot;fg&quot; , { &quot;Comment&quot;, &quot;Normal&quot; }, &quot;bold&quot;, &quot;underline&quot; },
    -- It is also possible to pass raw values directly
    [&quot;gutter&quot;] = &quot;-1&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Conveniently, fzf-lua can also be configured using fzf.vim&#39;s &lt;code&gt;g:fzf_colors&lt;/code&gt;, i.e:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Similarly, first existing highlight group will be used
:lua vim.g.fzf_colors = { [&quot;gutter&quot;] = { &quot;bg&quot;, &quot;DoesNotExist&quot;, &quot;IncSearch&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;However, the above doesn&#39;t allow combining both neovim highlights and raw args, if you&#39;re only using fzf-lua we can hijack &lt;code&gt;g:fzf_colors&lt;/code&gt; to accept fzf-lua style values (i.e. table at 2nd index and 3rd+ raw args):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua vim.g.fzf_colors = { [&quot;fg+&quot;] = { &quot;fg&quot;, { &quot;ErrorMsg&quot; }, &quot;bold&quot;, &quot;underline&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Big thank you to all those I borrowed code/ideas from, I read so many configs and plugin codes that I probably forgot where I found some samples from so if I missed your name feel free to contact me and I&#39;ll add it below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/&quot;&gt;@junegunn&lt;/a&gt; for creating the magical &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; and &lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot;&gt;fzf.vim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vijaymarupudi/&quot;&gt;@vijaymarupudi&lt;/a&gt; for the wonderful &lt;a href=&quot;https://github.com/vijaymarupudi/nvim-fzf&quot;&gt;nvim-fzf&lt;/a&gt; plugin which started this endeavour&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tjdevries/&quot;&gt;@tjdevries&lt;/a&gt; for too many great things to list here and borrowing code from &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;nvim-telescope&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lukas-reineke&quot;&gt;@lukas-reineke&lt;/a&gt; for inspiration after browsing &lt;a href=&quot;https://github.com/lukas-reineke/dotfiles&quot;&gt;dotfiles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindrets&quot;&gt;@sindrets&lt;/a&gt; for borrowing utilities from &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kevinhwang91&quot;&gt;@kevinhwang91&lt;/a&gt; for inspiring the builtin previewer code while using &lt;a href=&quot;https://github.com/kevinhwang91/nvim-bqf&quot;&gt;nvim-bqf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Arrow-kb/FS25_RealisticLivestock</title>
      <link>https://github.com/Arrow-kb/FS25_RealisticLivestock</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FS25_RealisticLivestock&lt;/h1&gt; 
&lt;p&gt;Realistic Livestock mod for FS25.&lt;/p&gt; 
&lt;h1&gt;Features:&lt;/h1&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Male Animals&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Higher value&lt;/li&gt; 
 &lt;li&gt;Required for reproduction&lt;/li&gt; 
 &lt;li&gt;No male models (im not a 3d artist)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Visual Animals&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The limit of visual animals per husbandry has been increased from 25 in the vanilla game, up to 200 at maximum which can be changed with a slider&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Individual Animals&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All animals are now 100% individual and the archaic cluster system has been scrapped, allowing for more variety in gameplay and animals&lt;/li&gt; 
 &lt;li&gt;Every animal has its own unique identifier based on the UK&#39;s cattle identification system&lt;/li&gt; 
 &lt;li&gt;Every animal has a birthday and a country of origin&lt;/li&gt; 
 &lt;li&gt;Every animal can be named&lt;/li&gt; 
 &lt;li&gt;Supported animals have ear tags on their left and right ears, detailing their country of origin, farm ID, animal ID, name and birthday, as well as a partial identifier on their behind&lt;/li&gt; 
 &lt;li&gt;Supported animals have nose rings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Enhanced Pregnancy System&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Animals of different species have varying amounts of potential offspring per each pregnancy (example: cows can have 0-3 calves)&lt;/li&gt; 
 &lt;li&gt;Offspring is created inside the mother when she is impregnated instead of at birth&lt;/li&gt; 
 &lt;li&gt;Ability to view the number of expected offspring and their due date&lt;/li&gt; 
 &lt;li&gt;The reproduction duration is now unique for every animal, not every animal of the same species will take the same length of time to deliver their offspring&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Genetics System&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;New genetics system&lt;/li&gt; 
 &lt;li&gt;Every animal has several genetic modifiers completely unique to them&lt;/li&gt; 
 &lt;li&gt;Current genetics are health, fertility, metabolism, productivity and meat quality&lt;/li&gt; 
 &lt;li&gt;Genetics impact several different areas of the animal, such as pregnancy and sale value&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Weight System&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;New weight system&lt;/li&gt; 
 &lt;li&gt;Every animal has a weight unique to them, and each day they will gravitate to/from their ideal weight (based on their metabolism) due to how much they eat and drink&lt;/li&gt; 
 &lt;li&gt;Weight affects sale value and health, and can unhealthy weight can result in death especially for young animals&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Enhanced UI&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;New family tree visible in the animal screen&lt;/li&gt; 
 &lt;li&gt;Lots of additional information is shown in the animal screen and the info box about each animal&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Enhanced Production&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported animals will have their production based on various factors&lt;/li&gt; 
 &lt;li&gt;Cows will only produce milk when lactating, and their yield will rise and fall based on their previous pregnancy&lt;/li&gt; 
 &lt;li&gt;Sheep will only produce wool in warm months&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Death and Aging&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Animal aging is no longer limited to 5 years&lt;/li&gt; 
 &lt;li&gt;Every animal type has an expected lifespan, and every animal has a chance to die of old age the older they get, but can live past their expected lifespan&lt;/li&gt; 
 &lt;li&gt;Animals can die from health, random accidents and bad pregnancies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;ins&gt;&lt;strong&gt;Enhanced Animal Dealer&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The animal dealer has been completely overhauled&lt;/li&gt; 
 &lt;li&gt;Every supported country in the world now has several unique farms, which each produce up to 3 types of animals&lt;/li&gt; 
 &lt;li&gt;Each farm will send some of their animals to the animal dealer every day&lt;/li&gt; 
 &lt;li&gt;Every animal is unique and is no longer a template, and are generated based on the quality of the farm they come from&lt;/li&gt; 
 &lt;li&gt;Every animal sent to the dealer will eventually disappear and will no longer be able to be bought, but will be replaced with new ones&lt;/li&gt; 
 &lt;li&gt;Most animals are local to your country, but some will be imported from abroad&lt;/li&gt; 
 &lt;li&gt;Animals at the dealer have a chance to be pregnant and will all have unique genetic qualities which will impact their price and usefulness&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Screenshots&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/724f08c2-ce0a-48b7-9056-50a8622f5742&quot; alt=&quot;fsScreen_2025_05_07_17_28_58-min&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/333ffa00-1041-457c-b406-2efe4127d5a4&quot; alt=&quot;screenshot4&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/3731d7e0-6bae-411d-957f-5b4496a1607f&quot; alt=&quot;screenshot3&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/cee43caf-9401-421d-8ada-745d4fa41c7a&quot; alt=&quot;screenshot5&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;In Progress&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Diseases&lt;/li&gt; 
 &lt;li&gt;Message log tab for husbandries&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>PathOfBuildingCommunity/PathOfBuilding-PoE2</title>
      <link>https://github.com/PathOfBuildingCommunity/PathOfBuilding-PoE2</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Path of Building 2 Community&lt;/h1&gt; 
&lt;h2&gt;Welcome to Path of Building 2, an offline build planner for Path of Exile 2!&lt;/h2&gt; 
&lt;p float=&quot;middle&quot;&gt; &lt;img alt=&quot;Tree tab&quot; src=&quot;https://github.com/user-attachments/assets/225bf25f-1ac4-4639-b280-565a24d2a2fc&quot; width=&quot;48%&quot; /&gt; &lt;img alt=&quot;Items tab&quot; src=&quot;https://github.com/user-attachments/assets/de8e6dc0-1e1a-46c5-b8a4-18877e67d48d&quot; width=&quot;48%&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;p&gt;Head over to the &lt;a href=&quot;https://github.com/PathOfBuildingCommunity/PathOfBuilding-PoE2/releases&quot;&gt;Releases&lt;/a&gt; page to download the install wizard or portable zip.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Comprehensive offence + defence calculations: 
  &lt;ul&gt; 
   &lt;li&gt;Calculate your skill DPS, damage over time, life/mana/ES totals and much more!&lt;/li&gt; 
   &lt;li&gt;Can factor in auras, buffs, charges, curses, monster resistances and more, to estimate your effective DPS&lt;/li&gt; 
   &lt;li&gt;Also calculates life/mana reservations&lt;/li&gt; 
   &lt;li&gt;Shows a summary of character stats in the side bar, as well as a detailed calculations breakdown tab which can show you how the stats were derived&lt;/li&gt; 
   &lt;li&gt;Supports all skills and support gems, and most passives and item modifiers 
    &lt;ul&gt; 
     &lt;li&gt;Throughout the program, supported modifiers will show in blue and unsupported ones in red&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Full support for minions&lt;/li&gt; 
   &lt;li&gt;Support for party play and support builds&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Passive skill tree planner: 
  &lt;ul&gt; 
   &lt;li&gt;Support for jewels including most radius/conversion and timeless jewels&lt;/li&gt; 
   &lt;li&gt;Features alternate path tracing (mouse over a sequence of nodes while holding shift, then click to allocate them all)&lt;/li&gt; 
   &lt;li&gt;Fully integrated with the offence/defence calculations; see exactly how each node will affect your character!&lt;/li&gt; 
   &lt;li&gt;Can import PathOfExile.com and PoEPlanner.com passive tree links; links shortened with PoEURL.com also work&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Skill planner: 
  &lt;ul&gt; 
   &lt;li&gt;Add any number of main or supporting skills to your build&lt;/li&gt; 
   &lt;li&gt;Supporting skills (auras, curses, buffs) can be toggled on and off&lt;/li&gt; 
   &lt;li&gt;Automatically applies Socketed Gem modifiers from the item a skill is socketed into&lt;/li&gt; 
   &lt;li&gt;Automatically applies support gems granted by items&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Item planner: 
  &lt;ul&gt; 
   &lt;li&gt;Add items from in game by copying and pasting them straight into the program!&lt;/li&gt; 
   &lt;li&gt;Automatically adds quality to non-corrupted items&lt;/li&gt; 
   &lt;li&gt;Search the trade site for the most impactful items&lt;/li&gt; 
   &lt;li&gt;Fully integrated with the offence/defence calculations; see exactly how much of an upgrade a given item is!&lt;/li&gt; 
   &lt;li&gt;Contains a searchable database of all uniques that are currently in game (and some that aren&#39;t yet!) 
    &lt;ul&gt; 
     &lt;li&gt;You can choose the modifier rolls when you add a unique to your build&lt;/li&gt; 
     &lt;li&gt;Includes all league-specific items and legacy variants&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Features an item crafting system: 
    &lt;ul&gt; 
     &lt;li&gt;You can select from any of the game&#39;s base item types&lt;/li&gt; 
     &lt;li&gt;You can select prefix/suffix modifiers from lists&lt;/li&gt; 
     &lt;li&gt;Custom modifiers can be added, with Master and Essence modifiers available&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Also contains a database of rare item templates: 
    &lt;ul&gt; 
     &lt;li&gt;Allows you to create rare items for your build to approximate the gear you will be using&lt;/li&gt; 
     &lt;li&gt;Choose which modifiers appear on each item, and the rolls for each modifier, to suit your needs&lt;/li&gt; 
     &lt;li&gt;Has templates that should cover the majority of builds&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Other features: 
  &lt;ul&gt; 
   &lt;li&gt;You can import passive tree, items, and skills from existing characters&lt;/li&gt; 
   &lt;li&gt;Share builds with other users by generating a share code&lt;/li&gt; 
   &lt;li&gt;Automatic updating; most updates will only take a couple of seconds to apply&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;You can find the full version history &lt;a href=&quot;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding-PoE2/dev/CHANGELOG.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;You can find instructions on how to contribute code and bug reports &lt;a href=&quot;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding-PoE2/dev/CONTRIBUTING.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licence&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For 3rd-party licences, see &lt;a href=&quot;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding-PoE2/dev/LICENSE.md&quot;&gt;LICENSE&lt;/a&gt;. The licencing information is considered to be part of the documentation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>L3MON4D3/LuaSnip</title>
      <link>https://github.com/L3MON4D3/LuaSnip</link>
      <description>&lt;p&gt;Snippet Engine for Neovim written in Lua.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://matrix.to/#/%23luasnip:matrix.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/matrix/luasnip:matrix.org?label=Matrix&amp;amp;logo=matrix&quot; alt=&quot;LuaSnip&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;LuaSnip&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&quot;&gt;https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tabstops&lt;/li&gt; 
 &lt;li&gt;Text-Transformations using Lua functions&lt;/li&gt; 
 &lt;li&gt;Conditional Expansion&lt;/li&gt; 
 &lt;li&gt;Defining nested Snippets&lt;/li&gt; 
 &lt;li&gt;Filetype-specific Snippets&lt;/li&gt; 
 &lt;li&gt;Choices&lt;/li&gt; 
 &lt;li&gt;Dynamic Snippet creation&lt;/li&gt; 
 &lt;li&gt;Regex-Trigger&lt;/li&gt; 
 &lt;li&gt;Autotriggered Snippets&lt;/li&gt; 
 &lt;li&gt;Easy Postfix Snippets&lt;/li&gt; 
 &lt;li&gt;Fast&lt;/li&gt; 
 &lt;li&gt;Parse &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/specification#snippet_syntax&quot;&gt;LSP-Style&lt;/a&gt; Snippets either directly in Lua, as a VSCode package or a SnipMate snippet collection.&lt;/li&gt; 
 &lt;li&gt;Expand LSP-Snippets with &lt;a href=&quot;https://github.com/hrsh7th/nvim-compe&quot;&gt;nvim-compe&lt;/a&gt; (or its&#39; successor, &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt; (requires &lt;a href=&quot;https://github.com/saadparwaiz1/cmp_luasnip&quot;&gt;cmp_luasnip&lt;/a&gt;))&lt;/li&gt; 
 &lt;li&gt;Snippet history (jump back into older snippets)&lt;/li&gt; 
 &lt;li&gt;Resolve filetype at the cursor using Treesitter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Drawbacks&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Snippets that make use of the entire functionality of this plugin have to be defined in Lua (but 95% of snippets can be written in LSP-syntax).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Requirements&lt;/h1&gt; 
&lt;p&gt;Neovim &amp;gt;= 0.7 (extmarks) &lt;code&gt;jsregexp&lt;/code&gt; for &lt;code&gt;lsp-snippet-transformations&lt;/code&gt; (see &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#transformations&quot;&gt;here&lt;/a&gt; for some tips on installing it).&lt;/p&gt; 
&lt;h1&gt;Setup&lt;/h1&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;With your preferred plugin manager i.e. &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;, &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;Packer&lt;/a&gt; or &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy&lt;/a&gt;&lt;br /&gt; &lt;strong&gt;Packer&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use({
	&quot;L3MON4D3/LuaSnip&quot;,
	-- follow latest release.
	tag = &quot;v2.*&quot;, -- Replace &amp;lt;CurrentMajor&amp;gt; by the latest released major (first number of latest release)
	-- install jsregexp (optional!:).
	run = &quot;make install_jsregexp&quot;
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;lazy&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
	&quot;L3MON4D3/LuaSnip&quot;,
	-- follow latest release.
	version = &quot;v2.*&quot;, -- Replace &amp;lt;CurrentMajor&amp;gt; by the latest released major (first number of latest release)
	-- install jsregexp (optional!).
	build = &quot;make install_jsregexp&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; follow latest release and install jsregexp.
Plug &#39;L3MON4D3/LuaSnip&#39;, {&#39;tag&#39;: &#39;v2.*&#39;, &#39;do&#39;: &#39;make install_jsregexp&#39;} &quot; Replace &amp;lt;CurrentMajor&amp;gt; by the latest released major (first number of latest release)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Check the &lt;code&gt;Releases&lt;/code&gt;-section to the right for the latest major version.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;LuaSnip uses &lt;a href=&quot;https://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt; (with some leeway, big patches might end up as a Minor version)!&lt;br /&gt; Releases will be tagged as &lt;code&gt;vMajor.Minor.Patch&lt;/code&gt;, we recommend following the latest Major release.&lt;br /&gt; Consider watching the repository&#39;s releases so you&#39;re notified when a new version becomes available.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] On Windows, you need a C compiler and &lt;code&gt;make&lt;/code&gt; to install &lt;code&gt;jsregexp&lt;/code&gt;. If your compiler choice is not &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt;, or &lt;code&gt;zig&lt;/code&gt;, you need to explicitly specify the &lt;code&gt;CC&lt;/code&gt; variable in the build command: &lt;code&gt;make install_jsregexp CC=your_compiler_program&lt;/code&gt;. Also, make sure &lt;code&gt;%GIT%/bin&lt;/code&gt; directory is added in the &lt;code&gt;$PATH&lt;/code&gt; so that &lt;code&gt;make&lt;/code&gt; can use &lt;code&gt;%GIT%/bin/sh.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Keymaps&lt;/h2&gt; 
&lt;p&gt;In Vim script, with &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; for jumping forward/expanding a snippet, &lt;code&gt;&amp;lt;Shift-Tab&amp;gt;&lt;/code&gt; for jumping backward, and &lt;code&gt;&amp;lt;Ctrl-E&amp;gt;&lt;/code&gt; for changing the current choice when in a &lt;code&gt;choiceNode&lt;/code&gt;...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; press &amp;lt;Tab&amp;gt; to expand or jump in a snippet. These can also be mapped separately
&quot; via &amp;lt;Plug&amp;gt;luasnip-expand-snippet and &amp;lt;Plug&amp;gt;luasnip-jump-next.
imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; luasnip#expand_or_jumpable() ? &#39;&amp;lt;Plug&amp;gt;luasnip-expand-or-jump&#39; : &#39;&amp;lt;Tab&amp;gt;&#39;
&quot; -1 for jumping backwards.
inoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require&#39;luasnip&#39;.jump(-1)&amp;lt;Cr&amp;gt;

snoremap &amp;lt;silent&amp;gt; &amp;lt;Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(1)&amp;lt;Cr&amp;gt;
snoremap &amp;lt;silent&amp;gt; &amp;lt;S-Tab&amp;gt; &amp;lt;cmd&amp;gt;lua require(&#39;luasnip&#39;).jump(-1)&amp;lt;Cr&amp;gt;

&quot; For changing choices in choiceNodes (not strictly necessary for a basic setup).
imap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;
smap &amp;lt;silent&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;C-E&amp;gt; luasnip#choice_active() ? &#39;&amp;lt;Plug&amp;gt;luasnip-next-choice&#39; : &#39;&amp;lt;C-E&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... or in Lua, with a different set of keys: &lt;code&gt;&amp;lt;Ctrl-K&amp;gt;&lt;/code&gt; for expanding, &lt;code&gt;&amp;lt;Ctrl-L&amp;gt;&lt;/code&gt; for jumping forward, &lt;code&gt;&amp;lt;Ctrl-J&amp;gt;&lt;/code&gt; for jumping backward, and &lt;code&gt;&amp;lt;Ctrl-E&amp;gt;&lt;/code&gt; for changing the active choice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local ls = require(&quot;luasnip&quot;)

vim.keymap.set({&quot;i&quot;}, &quot;&amp;lt;C-K&amp;gt;&quot;, function() ls.expand() end, {silent = true})
vim.keymap.set({&quot;i&quot;, &quot;s&quot;}, &quot;&amp;lt;C-L&amp;gt;&quot;, function() ls.jump( 1) end, {silent = true})
vim.keymap.set({&quot;i&quot;, &quot;s&quot;}, &quot;&amp;lt;C-J&amp;gt;&quot;, function() ls.jump(-1) end, {silent = true})

vim.keymap.set({&quot;i&quot;, &quot;s&quot;}, &quot;&amp;lt;C-E&amp;gt;&quot;, function()
	if ls.choice_active() then
		ls.change_choice(1)
	end
end, {silent = true})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&#39;s wiki also contains &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings#luasnip&quot;&gt;an example&lt;/a&gt; for setting up a super-tab-like mapping.&lt;/p&gt; 
&lt;h2&gt;Add Snippets&lt;/h2&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&quot;&gt;the doc&lt;/a&gt; for a general explanation of the loaders and their benefits. The following list serves only as a short overview.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;VS Code-like&lt;/strong&gt;: To use existing VS Code style snippets from a plugin (e.g. &lt;a href=&quot;https://github.com/rafamadriz/friendly-snippets&quot;&gt;rafamadriz/friendly-snippets&lt;/a&gt;) simply install the plugin and then add&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;luasnip.loaders.from_vscode&quot;).lazy_load()
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;somewhere in your Neovim config. LuaSnip will then load the snippets contained in the plugin on startup. You can also easily &lt;strong&gt;load your own custom VSCode style snippets&lt;/strong&gt; by passing the path to the custom snippet-directory to the load function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- load snippets from path/of/your/nvim/config/my-cool-snippets
require(&quot;luasnip.loaders.from_vscode&quot;).lazy_load({ paths = { &quot;./my-cool-snippets&quot; } })
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;  &amp;gt; NOTE:
  &amp;gt; It&#39;s mandatory to have a `package.json` file in the snippet directory. For examples, see [friendly-snippets](https://github.com/rafamadriz/friendly-snippets/blob/main/package.json).
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more info on the VS Code loader, check the &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L501&quot;&gt;examples&lt;/a&gt; or &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#loaders&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;SnipMate-like&lt;/strong&gt;: Very similar to VS Code packages; install a plugin that provides snippets and call the &lt;code&gt;load&lt;/code&gt;-function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;luasnip.loaders.from_snipmate&quot;).lazy_load()
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The SnipMate format is very simple, so adding &lt;strong&gt;custom snippets&lt;/strong&gt; only requires a few steps:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;add a directory beside your &lt;code&gt;init.vim&lt;/code&gt; (or any other place that is in your &lt;code&gt;runtimepath&lt;/code&gt;) named &lt;code&gt;snippets&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;inside that directory, create files named &lt;code&gt;&amp;lt;filetype&amp;gt;.snippets&lt;/code&gt; and add snippets for the given filetype in it (for inspiration, check &lt;a href=&quot;https://github.com/honza/vim-snippets/tree/master/snippets&quot;&gt;honza/vim-snippets&lt;/a&gt;). &lt;pre&gt;&lt;code class=&quot;language-snipmate&quot;&gt;# comment
snippet &amp;lt;trigger&amp;gt; &amp;lt;description&amp;gt;
&amp;lt;snippet-body&amp;gt;
snippet if C-style if
if ($1)
	$0
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Again, there are some &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/b5a72f1fbde545be101fcd10b70bcd51ea4367de/Examples/snippets.lua#L517&quot;&gt;examples&lt;/a&gt; and &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#snipmate&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;: Add the snippets by calling &lt;code&gt;require(&quot;luasnip&quot;).add_snippets(filetype, snippets)&lt;/code&gt;. An example for this can be found &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua#L190&quot;&gt;here&lt;/a&gt;.&lt;br /&gt; This can also be done much cleaner, with all the benefits that come with using a loader, by using the &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua&quot;&gt;loader for Lua&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There&#39;s also a repository collecting snippets for various languages, &lt;a href=&quot;https://github.com/molleweide/LuaSnip-snippets.nvim&quot;&gt;molleweide/LuaSnip-snippets.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;h3&gt;Getting started&lt;/h3&gt; 
&lt;p&gt;You have two main choices: use SnipMate/VS Code snippets (easier) or write snippets in Lua (more complex but also more feature-rich). Here are some suggestions for getting started in either case:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SnipMate or VS Code snippets&lt;/strong&gt;: if you only want to write/load SnipMate or VS Code snippets and ignore Lua snippets (and this is definitely recommended if you don&#39;t yet need Lua snippets&#39; more complicated features), check out the sections on loading &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#vscode&quot;&gt;VS Code&lt;/a&gt; or &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#snipmate&quot;&gt;SnipMate&lt;/a&gt; packages in &lt;code&gt;DOC.md&lt;/code&gt;. Of those two, SnipMate is definitely the more comfortable way of writing snippets.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lua snippets&lt;/strong&gt;: we suggest first watching or reading one of the introductory guides in the &lt;a href=&quot;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/#resources-for-new-users&quot;&gt;Resources for new users&lt;/a&gt; section below. After getting familiar with the basics, you should check out the important LuaSnip features in the following list: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#config-options&quot;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/a&gt;: Notable: &lt;code&gt;region_check_events&lt;/code&gt; for jumping to the end of snippets the cursor is no longer inside of, &lt;code&gt;delete_check_events&lt;/code&gt; for cleaning up snippets whose text was deleted, and &lt;code&gt;enable_autosnippets&lt;/code&gt; to enable automatic snippet expansion.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#extras&quot;&gt;&lt;code&gt;extras&lt;/code&gt;&lt;/a&gt;: This module contains many functions that make writing snippets significantly easier; &lt;code&gt;fmt&lt;/code&gt; and &lt;code&gt;lambda&lt;/code&gt; are especially useful.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#lua&quot;&gt;&lt;code&gt;lua-loader&lt;/code&gt;&lt;/a&gt;: A very useful way to load snippets, more comfortable than calling &lt;code&gt;add_snippets&lt;/code&gt;.&lt;br /&gt; Also supports hot reload (limited to buffers in the same Neovim instance as the edited file) and &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#edit_snippets&quot;&gt;jumping to the files that provide snippets to the current buffer&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Advanced nodes: &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#functionnode&quot;&gt;&lt;code&gt;functionNode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#dynamicnode&quot;&gt;&lt;code&gt;dynamicNode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#choicenode&quot;&gt;&lt;code&gt;choiceNode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#restorenode&quot;&gt;&lt;code&gt;restoreNode&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt; Instead of reading about them in the doc, the first three are explained very well in &lt;a href=&quot;https://www.youtube.com/watch?v=KtQZRAkgLqo&quot;&gt;this video&lt;/a&gt; by TJ DeVries.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Official docs and examples&lt;/h3&gt; 
&lt;p&gt;Note: instead of immediately reading the official documentation, you may want to check out the &lt;a href=&quot;https://raw.githubusercontent.com/L3MON4D3/LuaSnip/master/#resources-for-new-users&quot;&gt;Resources for new users&lt;/a&gt; section below since the docs are written more as a reference manual than as a tutorial for new users.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md&quot;&gt;&lt;code&gt;DOC.md&lt;/code&gt;&lt;/a&gt; is the main documentation—it gives an overview of how to write snippets, explains the role and use case of each LuaSnip node, shows how to load snippets from Lua, VS Code, and SnipMate formats, and covers the available LuaSnip API.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:help luasnip.txt&lt;/code&gt; is a plain text version of &lt;code&gt;DOC.md&lt;/code&gt; available with Neovim&#39;s &lt;code&gt;:help&lt;/code&gt; feature.&lt;/li&gt; 
 &lt;li&gt;The file &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/Examples/snippets.lua&quot;&gt;&lt;code&gt;Examples/snippets.lua&lt;/code&gt;&lt;/a&gt; contains many example snippets written in Lua—we highly recommend looking through (or better yet, &lt;code&gt;:luafile&lt;/code&gt;ing) these example snippets before using LuaSnip&#39;s advanced features.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/wiki&quot;&gt;Wiki&lt;/a&gt; contains some useful LuaSnip extensions and some examples of advanced snippets and configs.&lt;/li&gt; 
 &lt;li&gt;Configuration is documented &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#config-options&quot;&gt;in &lt;code&gt;DOC.md&lt;/code&gt;&lt;/a&gt; as well.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;【中文版】DOC in Chinese is &lt;a href=&quot;https://zjp-cn.github.io/neovim0.6-blogs/nvim/luasnip/doc1.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Resources for new users&lt;/h3&gt; 
&lt;p&gt;Here are some LuaSnip videos and tutorials on the Web:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Dn800rlPIho&quot;&gt;Introductory&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=KtQZRAkgLqo&quot;&gt;advanced&lt;/a&gt; YouTube videos by the one and only &lt;a href=&quot;https://github.com/tjdevries&quot;&gt;TJ DeVries&lt;/a&gt;. Unfortunately there were some breaking changes in LuaSnip since these videos were recorded: 
  &lt;ul&gt; 
   &lt;li&gt;Snippets are now added via &lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#adding-snippets&quot;&gt;&lt;code&gt;ls.add_snippets&lt;/code&gt;&lt;/a&gt; instead of with &lt;code&gt;ls.snippets = {}&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.ejmastnak.com/tutorials/vim-latex/luasnip/&quot;&gt;guide to writing snippets in Lua&lt;/a&gt; with LaTeX-themed GIFs and real-life examples by &lt;a href=&quot;https://github.com/ejmastnak&quot;&gt;@ejmastnak&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://evesdropper.dev/files/luasnip&quot;&gt;collection of LuaSnip guides&lt;/a&gt; by &lt;a href=&quot;https://github.com/evesdropper&quot;&gt;@evesdropper&lt;/a&gt;, with most of them also in a LaTeX context&lt;/li&gt; 
 &lt;li&gt;An introductory LuaSnip &lt;a href=&quot;https://www.youtube.com/watch?v=ub0REXjhpmk&quot;&gt;video tutorial for beginners&lt;/a&gt; by Ziontee113&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Inspired by &lt;a href=&quot;https://github.com/hrsh7th/vim-vsnip/&quot;&gt;vsnip.vim&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>olimorris/codecompanion.nvim</title>
      <link>https://github.com/olimorris/codecompanion.nvim</link>
      <description>&lt;p&gt;✨ AI Coding, Vim Style&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://codecompanion.olimorris.dev&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/64da6a69-a54d-4799-b034-59d9efd27b76&quot; alt=&quot;CodeCompanion.nvim&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/olimorris/codecompanion.nvim?color=c678dd&amp;amp;logoColor=e06c75&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/olimorris/codecompanion.nvim/ci.yml?branch=main&amp;amp;label=tests&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/olimorris/codecompanion.nvim?style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Code with LLMs and Agents via the &lt;a href=&quot;https://codecompanion.olimorris.dev/getting-started.html&quot;&gt;in-built&lt;/a&gt; adapters, the &lt;a href=&quot;https://codecompanion.olimorris.dev/configuration/adapters#community-adapters&quot;&gt;community&lt;/a&gt; adapters or by &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/adapters.html&quot;&gt;building&lt;/a&gt; your own&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;New features are always announced &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/discussions/categories/announcements&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;💜&lt;/span&gt; Sponsors&lt;/h2&gt; 
&lt;p&gt;Thank you to the following people:&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;!-- sponsors --&gt;&lt;a href=&quot;https://github.com/unicell&quot;&gt;&lt;img src=&quot;https://github.com/unicell.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Qiu Yu&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/adam-e-trepanier&quot;&gt;&lt;img src=&quot;https://github.com/adam-e-trepanier.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Adam Trepanier&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jfgordon2&quot;&gt;&lt;img src=&quot;https://github.com/jfgordon2.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Jeff Gordon&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/llinfeng&quot;&gt;&lt;img src=&quot;https://github.com/llinfeng.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Linfeng Li&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/prettymuchbryce&quot;&gt;&lt;img src=&quot;https://github.com/prettymuchbryce.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Bryce Neal&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/pratyushmittal&quot;&gt;&lt;img src=&quot;https://github.com/pratyushmittal.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Pratyush Mittal&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/toupeira&quot;&gt;&lt;img src=&quot;https://github.com/toupeira.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Markus Koller&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JuanCrg90&quot;&gt;&lt;img src=&quot;https://github.com/JuanCrg90.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Juan Carlos Ruiz&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Alexander-Garcia&quot;&gt;&lt;img src=&quot;https://github.com/Alexander-Garcia.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Alexander Garcia&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/LumenYoung&quot;&gt;&lt;img src=&quot;https://github.com/LumenYoung.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Lumen Yang&quot; /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;If &lt;i&gt;you&lt;/i&gt; love CodeCompanion and use it in your workflow, please consider &lt;a href=&quot;https://github.com/sponsors/olimorris&quot;&gt;sponsoring me&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;💬&lt;/span&gt; &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;Copilot Chat&lt;/a&gt; meets &lt;a href=&quot;https://zed.dev/blog/zed-ai&quot;&gt;Zed AI&lt;/a&gt;, in Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🔌&lt;/span&gt; Support for LLMs from Anthropic, Copilot, GitHub Models, DeepSeek, Gemini, Mistral AI, Novita, Ollama, OpenAI, Azure OpenAI, HuggingFace and xAI (or &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/adapters.html&quot;&gt;bring your own&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🤖&lt;/span&gt; Support for &lt;a href=&quot;https://agentclientprotocol.com&quot;&gt;Agent Client Protocol&lt;/a&gt;, enabling coding with agents like &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/overview&quot;&gt;Claude Code&lt;/a&gt; and &lt;a href=&quot;https://github.com/google-gemini/gemini-cli&quot;&gt;Gemini CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🫶&lt;/span&gt; User contributed and supported &lt;a href=&quot;https://codecompanion.olimorris.dev/configuration/adapters#community-adapters&quot;&gt;adapters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/inline-assistant.html&quot;&gt;Inline transformations&lt;/a&gt;, code creation and refactoring&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🎨&lt;/span&gt; &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/variables.html&quot;&gt;Variables&lt;/a&gt;, &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/slash-commands.html&quot;&gt;Slash Commands&lt;/a&gt;, &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/tools.html&quot;&gt;Tools&lt;/a&gt; and &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/workflows.html&quot;&gt;Workflows&lt;/a&gt; to improve LLM output&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🧠&lt;/span&gt; Support for &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/memory.html&quot;&gt;memory&lt;/a&gt; files like &lt;code&gt;CLAUDE.md&lt;/code&gt;, &lt;code&gt;.cursor/rules&lt;/code&gt; and your own custom ones&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🔮&lt;/span&gt; Native &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/index.html#super-diff&quot;&gt;Super Diff&lt;/a&gt; for tracking agent edits&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;✨&lt;/span&gt; Built-in &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/action-palette.html&quot;&gt;prompt library&lt;/a&gt; for common tasks like advice on LSP errors and code explanations&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🏗&lt;/span&gt; Create your own &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/prompts.html&quot;&gt;custom prompts&lt;/a&gt;, Variables and Slash Commands&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;📚&lt;/span&gt; Have &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/introduction.html#quickly-accessing-a-chat-buffer&quot;&gt;multiple chats&lt;/a&gt; open at the same time&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;🎨&lt;/span&gt; Support for &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/#images-vision&quot;&gt;vision and images&lt;/a&gt; as input&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💪&lt;/span&gt; Async execution for fast performance&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h2&gt;&lt;span&gt;📸&lt;/span&gt; In Action&lt;/h2&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/aa109f1d-0ec9-4f08-bd9a-df99da03b9a4&quot;&gt;The Chat Buffer&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/3cc83544-2690-49b5-8be6-51e671db52ef&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/362b7cfd-e794-4d9c-9a74-90d5e2a87a32&quot;&gt;Tools + Agentic Workflows&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/59efa262-e768-4f36-9901-9d02b018fcf0&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/dcddcb85-cba0-4017-9723-6e6b7f080fee&quot;&gt;Inline Assistant&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/11a42705-d9de-4eb5-a9ab-c8a2772fb4d4&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; Getting Started&lt;/h2&gt; 
&lt;p&gt;Everything you need to know about CodeCompanion (installation, configuration and usage) is within the &lt;a href=&quot;https://codecompanion.olimorris.dev&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🧰&lt;/span&gt; Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Before raising an &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/issues&quot;&gt;issue&lt;/a&gt;, there are a number of steps you can take to troubleshoot a problem:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Checkhealth&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;:checkhealth codecompanion&lt;/code&gt; and check all dependencies are installed correctly. Also take note of the log file path.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Turn on logging&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Update your config and turn debug logging on:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- lazy.nvim
{
  &quot;olimorris/codecompanion.nvim&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;nvim-treesitter/nvim-treesitter&quot;,
  },
  opts = {
    -- NOTE: The log_level is in `opts.opts`
    opts = {
      log_level = &quot;DEBUG&quot;, -- or &quot;TRACE&quot;
    },
  },
},

-- Other package managers
require(&quot;codecompanion&quot;).setup({
  opts = {
    log_level = &quot;DEBUG&quot;, -- or &quot;TRACE&quot;
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and inspect the log file as per the location from the checkhealth command.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try with a &lt;code&gt;minimal.lua&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A large proportion of issues which are raised in Neovim plugins are to do with a user&#39;s own config. That&#39;s why I always ask users to fill in a &lt;code&gt;minimal.lua&lt;/code&gt; file when they raise an issue. We can rule out their config being an issue and it allows me to recreate the problem.&lt;/p&gt; 
&lt;p&gt;For this purpose, I have included a &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/raw/main/minimal.lua&quot;&gt;minimal.lua&lt;/a&gt; file in the repository for you to test out if you&#39;re facing issues. Simply copy the file, edit it and run neovim with &lt;code&gt;nvim --clean -u minimal.lua&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h2&gt;&lt;span&gt;🎁&lt;/span&gt; Contributing&lt;/h2&gt; 
&lt;p&gt;I am open to contributions but they will be implemented at my discretion. Feel free to open up a discussion before embarking on a PR and please read the &lt;a href=&quot;https://raw.githubusercontent.com/olimorris/codecompanion.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;👏&lt;/span&gt; Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc&quot;&gt;Steven Arcangeli&lt;/a&gt; for his genius creation of the chat buffer and his feedback early on&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/piersolenski/wtf.nvim&quot;&gt;Wtf.nvim&lt;/a&gt; for the LSP assistant action&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;CopilotChat.nvim&lt;/a&gt; for the rendering and usability of the chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;Aerial.nvim&lt;/a&gt; for the Tree-sitter parsing which inspired the symbols Slash Command&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Saghen&quot;&gt;Saghen&lt;/a&gt; for the fantastic docs inspiration from &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; and continued PRs to the project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/catwell&quot;&gt;Catwell&lt;/a&gt; for the &lt;a href=&quot;https://github.com/catwell/cw-lua/raw/master/deque/deque.lua&quot;&gt;queue&lt;/a&gt; inspiration that I use to stack agents and tools&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ravitemer&quot;&gt;ravitemer&lt;/a&gt; for the fantastic extensions API&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Davidyz&quot;&gt;Davidyz&lt;/a&gt; for his continued, excellent contributions that keep CodeCompanion going&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/conradirwin&quot;&gt;Conrad Irwin&lt;/a&gt;, &lt;a href=&quot;https://github.com/agu-z&quot;&gt;Agus Zubiaga&lt;/a&gt; and Morgan Krey from &lt;a href=&quot;https://github.com/zed-industries&quot;&gt;Zed Industries&lt;/a&gt; for their support in implementing &lt;a href=&quot;https://agentclientprotocol.com&quot;&gt;ACP&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>amzxyz/rime_wanxiang</title>
      <link>https://github.com/amzxyz/rime_wanxiang</link>
      <description>&lt;p&gt;Rime万象拼音输入方案：标准版与增强版可选，词库基于AI筛选和语料辅助筛选精干高效，配合全新语法模型，输入不再纠结。PRO版本支持10种双拼，6种辅助码，并且可以扩展更多，支持中英混输，内置超级注释、带调全拼输入码显示、快符与重复上屏、候选手动排序、tips等功能扩展，大大增强使用体验。　　Q群：11033572&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; 
&lt;h1&gt;万象系列方案 &lt;a href=&quot;https://deepwiki.com/amzxyz/rime_wanxiang&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;hr /&gt; 
&lt;h2&gt;万象拼音——基于深度优化的词库和语言模型&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;万象词库与万象语言模型&lt;/a&gt; 是一种带声调的词库，经过AI和大基数语料筛选、加频，结合语言模型获得更准确的整句输出。还结合了中英文混输，一套词库，多种用法，具体可以点击链接了解优势&lt;/p&gt; 
&lt;h3&gt;优势&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;词库词语全部加音调&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;设计6种辅助码，头部使用全拼编码，可以转化为任何双拼编码&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;词库解码顺序为：全拼拼音；墨奇码；鹤形；自然码；虎码首末；五笔前2；汉心码&lt;/li&gt; 
   &lt;li&gt;因此，万象拼音支持拼音和辅助码任意两两组合&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他类型辅助码用户可以通过LMDG工具包进行词库辅助码刷新，使用zrm-fuzhu方案包，替换为刷新后的词库即可使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;万象词库中的带声调拼音标注+词组构成+词频是整个万象项目的核心，是使用体验的基石，方案的其它功能皆可自定义，我希望使用者可以基于词库+转写的方式获得输入体验&lt;/strong&gt; &lt;a href=&quot;https://docs.qq.com/smartsheet/DWHZsdnZZaGh5bWJI?viewId=vUQPXH&amp;amp;tab=BB08J2&quot;&gt;万象词库问题收集反馈表&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;效果大赏&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202502200358104987_%E6%95%88%E6%9E%9C.png&quot; alt=&quot;效果.png&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;版本差异&lt;/th&gt; 
   &lt;th&gt;标准版&lt;/th&gt; 
   &lt;th&gt;增强版&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;方案文件&lt;/td&gt; 
   &lt;td&gt;wanxiang.schema.yaml&lt;/td&gt; 
   &lt;td&gt;wanxiang_pro.schema.yaml&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;是否调频&lt;/td&gt; 
   &lt;td&gt;默认开启&lt;/td&gt; 
   &lt;td&gt;默认关闭&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;用户词记录&lt;/td&gt; 
   &lt;td&gt;无差别自动记录，词库混乱&lt;/td&gt; 
   &lt;td&gt;需手动造词``引导，词库可控&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;用户词位置&lt;/td&gt; 
   &lt;td&gt;wanxiang.userdb&lt;/td&gt; 
   &lt;td&gt;zc.userdb&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;辅助码&lt;/td&gt; 
   &lt;td&gt;有基于声调的辅助&lt;/td&gt; 
   &lt;td&gt;有7种辅助码可选，同时兼容声调辅助&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;简码&lt;/td&gt; 
   &lt;td&gt;全拼开启基于转写的简码，双拼未开启&lt;/td&gt; 
   &lt;td&gt;有携带部分数据但未配置(自己设置的才是自己的)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;词库格式&lt;/td&gt; 
   &lt;td&gt;你➩nǐ➩1000&lt;/td&gt; 
   &lt;td&gt;你➩nǐ;re➩1000&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;新手快速入门&lt;/h3&gt; 
&lt;p&gt;不了解rime基础的可以参考友情链接，初步了解rime运行的些许特性：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.mintimate.cc/zh/guide/installRime.html&quot;&gt;oh my rime&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://xishansnow.github.io/posts/41ac964d.html&quot;&gt;rime参数配置&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;整个rime配置生态都是通的，里面有非常完整的使用方法，(诸如放到哪里、换个皮肤、什么是用户目录。。。)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;友情提示：&lt;/strong&gt; &lt;em&gt;如果你是第一次使用万象，可以不要用你过往经验来定义万象，按如下的步骤将万象跑起来后,体验一下万象的功能，然后学习一下万象的各项内容之后再考虑。&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;①快速运行：&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;将方案文件置于用户目录中，直接部署，等待部署完成后，&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;输入以下指令(斜杠引导)切换为对应的双拼/全拼，切换后按照提示重新部署，完成。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;这样的指令能帮你一次性完成4个补丁文件的输入类型修改，运行逻辑：根目录无自定义文件则复制custom文件夹相关文件出来并修改为对应的输入方案，如果根目录存在则只修改输入方案，不进行复制，因此不会被覆盖。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ios仓输入法，平台特殊，需要额外去：方案文件管理-使用键盘文件覆盖应用文件，才能完成文件变更&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;/flypy    → 小鹤双拼
/mspy     → 微软双拼
/zrm      → 自然码
/sogou    → 搜狗双拼
/abc      → 智能ABC
/ziguang  → 紫光双拼
/pyjj     → 拼音加加
/gbpy     → 国标双拼
/lxsq     → 乱序17
/pinyin   → 全拼
/zrlong   → 自然龙(反查是全拼)
/hxlong   → 汉心龙(反查是全拼)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;②进阶custom patch法（已经尽量为你简化）强烈推荐，适用于长期稳定使用：&lt;/h4&gt; 
&lt;p&gt;其实快速运行中我们已经完成了custom patch的部署，里面还预设了一些示例，这些例子只是例子，请务必详细阅读每一行，保留有用的删除无用的，千万不要改完双拼就万事大吉了，每一行详细查阅、理解、修改。custom是对对应方案文件的最后一道补丁，是真正属于你自己的配置文件，他不会被升级所覆盖。&lt;/p&gt; 
&lt;p&gt;方案提供了custom文件夹，预设了一些文件与教程，请不要删除相关文件，根据文件夹中内容进行相关修改变更：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;不要在default.custom写东西,任何patch都要对方案文件进行patch，default.custom留给前端操作请务必悉知！&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wanxiang.custom.yaml是对wanxiang.schema.yaml的补丁以此类推
可以打补丁的类型：
schema,default,weasel,squirrel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;注意不要删除和变更每一个custom的表头。&lt;/p&gt; 
&lt;p&gt;更详细参照：&lt;a href=&quot;https://docs.qq.com/doc/DQ0FqSXBmYVpWVFpy?rtkey=&quot;&gt;🚀 Rime 万象拼音输入方案 新手安装配置指南&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;③脚本更新：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;脚本的下载地址 &lt;a href=&quot;https://github.com/rimeinn/rime-wanxiang-update-tools&quot;&gt;万象方案更新脚本&lt;/a&gt;。这里以win版本的小狼毫为例，如果你是&lt;strong&gt;中文系统&lt;/strong&gt;请下载更新脚本的 powershell &lt;strong&gt;非utf-8版本&lt;/strong&gt;，具体文件名：&lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; 。在使用万象之前，请安装小狼毫，安装小狼毫的过程中，请一切保持默认即可，等你熟悉之后可以自定义。本入门最终会带你一步步设置使用&lt;strong&gt;小鹤双拼+墨奇辅助码&lt;/strong&gt;的方案。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;下载更新脚本：直接点击上面地址首页右边最新 release 链接，然后下载对应的 &lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; 文件即可。下载完成后，直接双击运行刚刚下载的ps1脚本。如果杀毒报错，请将你下载的文件恢复后，添加到信任文件。如果执行一闪而过、或者遇到乱码再尝试下载 utf-8 版本，具体文件名：&lt;code&gt;rime-wanxiang-update-windows-utf-8.ps1&lt;/code&gt;。如果提示权限不足，可以在 powershell 终端中执行 &lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser&lt;/code&gt; 再尝试运行下载的 ps1 脚本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;脚本执行后，需要你确认你使用的是全拼还是双拼用户，如果你是全拼用户，请根据提示输入 0 后回车。如果你双拼用户，需要你确认你使用的辅助码类型，默认的万象方案支持汉心、简单鹤、墨奇、虎码、五笔、自然码共计6种辅助码类型。如果没有你想要的辅助码类型，也不要着急，可在熟悉万象之后自定义。根据提示输入你使用的辅助码类型的数字后回车即可。这里我按墨奇辅助码输入。更不要着急怎么选择双拼方案，后面会告诉你的。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;脚本继续执行，提示选择是否全部更新，不要管，你是新手，直接选全部更新，输入 0 回车。然后就默默的等待脚本执行完后，按任意键退出即可。默认情况下，万象的双拼方案为自然码。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在使用脚本更新之前，务必使用进阶custom patch法维护好你的配置，更新不会覆盖custom.yaml类文件&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;④&lt;strong&gt;自定义数据获取：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在线custom目录随有三个数据源提供，按自己需求自行整理取用，这部分数据没有随zip方案包一起供应，需在线下载。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;jm_flypy.txt 用于提供小鹤类型的简码，下载后放置于根目录txt自定义库即可使用；&lt;/li&gt; 
 &lt;li&gt;jm_zrm.txt 用于提供自然码类型的简码，下载后放置于根目录txt自定义库即可使用；&lt;/li&gt; 
 &lt;li&gt;tips_user.txt tips用到的“翻译”类型的数据，下载后放置于lua/tips里面重新部署。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;答疑&lt;/h3&gt; 
&lt;h4&gt;为什么词库这么大，我见过只有单字携带辅助码的方案，词库可以缩小吗？&lt;/h4&gt; 
&lt;p&gt;在这里我借助wiki深入阐述一下这个问题并解答这些问题：&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%87%E8%B1%A1%E8%AF%8D%E5%BA%93PRO%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5&quot;&gt;万象词库PRO的设计理念&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%85%B3%E9%97%AD%E8%B0%83%E9%A2%91%E4%BB%A5%E5%8F%8A%E4%B8%8E%E4%B9%8B%E5%85%B3%E8%81%94%E7%9A%84%E6%8E%AA%E6%96%BD%E6%9C%89%E5%93%AA%E4%BA%9B&quot;&gt;为什么PRO版本默认关闭调频的说明&lt;/a&gt; &lt;code&gt;enable_user_dict: false # 是否开启自动调频，true为开启&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;功能一览&lt;/h3&gt; 
&lt;h4&gt;辅助码&lt;/h4&gt; 
&lt;p&gt;辅助码可以在输入一个确定得拼音后面继续输入一个部首的读音，使得这个字出现在靠前甚至第一位。这种方式易于理解，无须记忆字根，一切基于拼音得基础上。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041144502563_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121653.png&quot; alt=&quot;截图_选择区域_20240704121653.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能1&lt;/strong&gt; &lt;strong&gt;（仅PRO）&lt;/strong&gt; 直接辅助--如果想要 &lt;code&gt;镇&lt;/code&gt; 字显示在前面 那么在本方案下提供两种方式，第一种就是辅助码声母，&lt;code&gt;vf&lt;/code&gt;继续输入&lt;code&gt;j&lt;/code&gt; 也就是金字旁得声母即可出现结果，如果还是出现不了你要的结果，可以输入另外主体字的声母来继续缩小范围。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041147131421_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121809.png&quot; alt=&quot;截图_选择区域_20240704121809.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;句子中间或者单字输入时需要输入全位辅助码时由于与双拼词语重码，因为我们设计的基本辅助码是2位，加上双拼共4位，由于在整句中我们为了整句输入的顺畅，不会将4码聚拢作为优先级较高的选择，这样会在很多时候造成你想打的句子缩成一团变成全辅助码的词汇。此时可以通过追加/的方式使其聚拢，这种方式是由于我们是直接辅助码导致的，如果我们通过一个符号引导辅助码，那么在输入时要每一个都用到符号，而采用这种方式我们只需要在必要的时候使用/节省了输入的按键开支，下面由两个图片说明问题：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202408210142513354_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093644.png&quot; alt=&quot;截图_选择区域_20240821093644.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202408210143144721_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093701.png&quot; alt=&quot;截图_选择区域_20240821093701.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能2&lt;/strong&gt; &lt;strong&gt;（仅PRO）&lt;/strong&gt; 间接辅助--除以上直接使用辅助外,我们还支持中间加入/来引导辅助码的输入,即:功能1是&quot;nire/&quot; 在有需求的时候末尾增加斜杠能让系统侧重于单字,平时则永远在动态切分,这个模式也是比较吃词库的,当你的词组完整,遇到的异常就少,当词组不完整,你想输入三个字2+2=2编码结构,恰好辅助码与双拼编码重合就会出现3+3的聚拢,此时将你想输入的三个字放入词库中,这个问题就得到了解决,还有得项目通过Lua重新切分来解决,看似巧妙,实际上比较吃操作,影响节奏,无疑万象在很多选择上面选择了更加难的路线,用词库的全面性来托举. 而在功能2中是&quot;ni/re&quot;,也就是说辅助码必须经过/来引导,如果你不输入/它将与普通双拼无异,优点是类似vsg能够派生出&quot;中国&quot;,更适用于新手辅助码或者叫辅助码轻量使用者.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能3&lt;/strong&gt; 第二种方式是通过反查字库来定位，只是通过不同的方案实现，在输入主要拼音后，通过符号&lt;code&gt;`&lt;/code&gt; 来引导进入反查状态，引导后继续输入&lt;code&gt;jn&lt;/code&gt;金 则包含金的字就会被选出来；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041149125588_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121635.png&quot; alt=&quot;截图_选择区域_20240704121635.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;引导后继续输入&lt;code&gt;mu 木&lt;/code&gt;则带&lt;code&gt;木&lt;/code&gt;的字就会被选出来&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041149524870_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121611.png&quot; alt=&quot;截图_选择区域_20240704121611.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;实际上我们同时支持，&lt;code&gt;两分：你(ni`rfer，ni`re)、多分：莫（mu`ckrida）、笔画：你ni`pspzhpd&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能4&lt;/strong&gt; 通过 拼音状态下&lt;code&gt; ``〔反查：部件|笔画〕&lt;/code&gt; 来引导拆字模式 举例 &lt;code&gt;震&lt;/code&gt; 假设你不认识，你可以通过&lt;code&gt;雨和辰&lt;/code&gt; 来合并输入，拼音状态输入后，继续输入其它字符字母az会消失如下图，输入 &lt;code&gt;yu if&lt;/code&gt; 即雨 辰，结果出现了我们要的震字，且给出了辅助码 &lt;code&gt;y&lt;/code&gt; 和 &lt;code&gt;i&lt;/code&gt; ，&lt;code&gt;y&lt;/code&gt;是雨的声母&lt;code&gt;y&lt;/code&gt;，&lt;code&gt;i&lt;/code&gt;是辰的声母&lt;code&gt;ch&lt;/code&gt;，同时兼容通过hspnz代表横竖撇捺折五笔画。功能3是功能4的另一种表现形式,或者叫用法。这个功能依赖wanxiang_reverse.schema.yaml方案,可以通过custom配置成任意全拼双拼以匹配主方案一致的输入方式,因此是不是输入jn=jin需要看你具体的双拼类型。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202409280324599355_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240928112256.png&quot; alt=&quot;截图_选择区域_20240928112256.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能5&lt;/strong&gt; 句子中间或者单字输入时需要可以使用更精确的聚拢方式&quot;声调辅助&quot;，7890数字按键代表1234声，轻声归并到4声，在功能4中我们可以在双拼两码后面3个编码的位置任意插入声调与两位辅助码混合使用，就是除了不用斜杠了，我们还顺序自由了，下面由两个图片说明问题,其实在键盘上想要安排四个按键是很难得,不是占用这个按键就是占用另外的,还有得朋友觉得离得远,还有得更是不需要声调,要把候选做成9个。这些都是存在的情况,现在的处理也是妥协后的结果,要想完全不占用按键类似的办法可以改成大写字母来代表,像地球拼音则是使用大于小于号这一片的符号来表示,我们的词库有声调这个基础,一定程度上还是要利用起来：&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202505120222182012_截图_选择区域_20250512101814.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/20250512022217432_截图_选择区域_20250512101752.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202505120222163619_截图_选择区域_20250512101713.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;功能6&lt;/strong&gt; 混合输入:字母、汉字、数字、用于连接的特殊符号等组合，以及英文混输，我们统一放在了wanxiang_mixedcode.schema.yaml混合编码方案里，此功能无需引导，直接输入，不参与组句，类似：1000wclips、AD钙奶、PN结、Type-C以及纯英文，同样可以通过custom来定义你所使用的双拼。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260105536966_%E6%B7%B7%E5%90%88%E7%BC%96%E7%A0%81.jpg&quot; alt=&quot;东风5C&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;整合说明&lt;/strong&gt; 万象方案整合度很高，我们不希望使用户文件夹变得复杂，功能5中我们将两类习惯的五笔画和多分拆字和两分拆字整合到了一起，可以认为是4个挂接方案；在功能6中，我们将 英文输入、中英混合编码、以及一些其他混合编码整合到了一起，共享方案转写，两个功能都保证了可配置性，都能与你所使用的双拼契合， 对于词库也都整合到了dicts里面，为了能更好的统一更新和分发，仓库中我们支持基础版本词库、携带pro的辅助码版本词库、英文词库、混合词库4个类别，在release中各自归类，最终做到了根目录15个文件、4个文件夹示人，其中的custom目录还携带了用户自定义的法宝秘籍，能称得上简约而不简单。&lt;/p&gt; 
&lt;h4&gt;其他亮点功能&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;日期、时间、节日、节气、问候模板：&lt;/strong&gt; 可以在按键配置的地方定制引导前缀&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;key_binder/shijian_keys: [&quot;/&quot;, &quot;o&quot;]&lt;/code&gt; 这样的配置以为你你可以/sj也可以osj，某些方案o有别的作用时候可以去掉o,灵活处理。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;#时间：osj 或者 /sj
#日期：orq 或者 /rq
#农历：onl 或者 /nl
#星期：oxq 或者 /xq
#今年第几周：oww 或者 /ww
#节气：ojq 或者 /jq
#日期+时间：ors 或者 /rs
#时间戳：ott 或者 /tt
#大写N日期：N20250315 或者 N0302 即不添加年
#节日：ojr 或者 /jr
#问候模板：/day 或者 oday
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260107542641_N20250102.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260108069991_N0102.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;Unicode：&lt;/strong&gt; 大写 U 开头，如 U62fc 得到「拼」。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260111366093_U码.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;数字、金额大写：&lt;/strong&gt; 大写 R 开头，如 R1234 得到「一千二百三十四、壹仟贰佰叁拾肆元整」。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260124573417_金额大写.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;/引导模式：&lt;/strong&gt; 通过输入 /sx 快捷输入关于“数学”的特殊符号，具体能输入什么可以打开 symbols.yaml学习。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126183029_符号数学.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126173818_符号大于.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126167252_符号圆点.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;计算器：&lt;/strong&gt; 通过输入大写V引导继续输入如：V3+5 候选框就会有8和3+5=8，基础功能 &lt;code&gt;+ - * / % ^&lt;/code&gt; 还支持 &lt;code&gt;sin(x) cos(x)&lt;/code&gt; 等众多运算方式，打开super_calculator.lua阅读相关用法。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260127113759_计算器1.png&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260127126065_计算器2.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;自动上屏：&lt;/strong&gt; 例如：三位、四位简码唯一时，自动上屏如&lt;code&gt;jjkw岌岌可危&lt;/code&gt; &lt;code&gt;zmhu怎么回事&lt;/code&gt; 。默认未开启，方案文件中&lt;code&gt;speller:&lt;/code&gt;字段下取消注释这两句开启 &lt;code&gt;# auto_select: true # auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;错音错字提示：&lt;/strong&gt; 例如：输入&lt;code&gt;gei yu给予&lt;/code&gt;，获得&lt;code&gt;jǐ yǔ&lt;/code&gt;提示，此功能与全拼、双拼类型无关全部支持；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260127525844_错音给予.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260127524705_错音崩溃.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;快符Lua：&lt;/strong&gt; 例如通过 &lt;code&gt;a/&lt;/code&gt; ，快速自动上屏“！”符号或者定义为任意字符，享受26字母的扩展。其中值设置为&lt;code&gt;repeat&lt;/code&gt;则意味着按下对应按键能否重复上一次上屏的内容；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;超级tips：&lt;/strong&gt; 支持将表情、化学式、翻译、简码 提示等等你能想到得数据获得提示显示并将通过一个自定义按键直接上屏，默认为“.” 也表现为句号，如需句号翻页可以采用其他作为触发。避免了这类内容占用候选框，通过Control+t 进行开关。⚠️仓输入法、超越输入法设置按键交由rime去处理，没有特殊需求应该一律交给rime；&lt;/p&gt; 
&lt;p&gt;化学式：&lt;img src=&quot;https://storage.deepin.org/thread/202509260128462735_tips化学式.jpg&quot; height=&quot;80&quot; /&gt;符号：&lt;img src=&quot;https://storage.deepin.org/thread/202509260128454675_tips符号.jpg&quot; height=&quot;80&quot; /&gt;表情：&lt;img src=&quot;https://storage.deepin.org/thread/202509260128457494_tips表情.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;首选格式化：&lt;/strong&gt; 将自定义短语中，诸如\n \s \t 等行中标识符转换为实际的换行、空格、制表符等等，使得类似输入jys可以打出一首带格式的《静夜思》，这将成为类似书名号输入场景的利器。&lt;/p&gt; 
&lt;p&gt;例：&lt;code&gt;静夜思\n\s\s李白\n床前明月光\n疑似地上霜\n举头望明月\n低头思故乡 jys&lt;/code&gt;&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260129305342_格式化.jpg&quot; height=&quot;260&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;首选加成对符号：&lt;/strong&gt; 将输入中的短语通过输入追加\a 这样的末尾编码，触发相对于a这个字母映射的成对符号，例如：&lt;code&gt; sj mk lq lh ji\l=《三毛流浪记》&lt;/code&gt;可以通过custom自定义符号和触发方式。&lt;/p&gt; 
&lt;p&gt;工作逻辑：输入词汇编码 &amp;gt; 按下锁定按钮\ &amp;gt; 按下映射字符\a &amp;gt; 《候选包裹成对符号》&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260130219621_首选成对符号1.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260130208277_首选成对符号2.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260130199763_首选成对符号3.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;英文候选格式化：&lt;/strong&gt; 输入hello则得到hello，输入首字母大写Hello则得到Hello和一众首字母大写的联想词，输入前两码大写HEllo则得到全为大写的HELLO和一众大写英文。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260133175234_首字母大写.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260133175362_双字母大写.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;辅助码提示（仅PRO）：&lt;/strong&gt; 任意长度候选词的辅助码提示能力，默认开启1个字的辅助码，可以在方案文件中定义更长的长度。Ctrl+a可以实时在开启辅助码提示、开启声调全拼提示、关闭注释 三个状态循环，Ctrl+c开启拆分辅助提示，优先级高于普通辅助提示；&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134283927_辅助码提示.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134278003_声调提示.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134284782_拆分提示.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;输入码音调显示：&lt;/strong&gt; 通过Ctrl+s可以使得输入码实时动态显示全拼并加音调，这是万象特色功能；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;用户按需造词（仅PRO）：&lt;/strong&gt; 默认通过&lt;code&gt;``&lt;/code&gt;引导的方式进入用户词自造词模式，继续输入则&lt;code&gt;``&lt;/code&gt;前缀消失，后面打出来的字上屏后完成造词。 pro版本讲究自主可控，由于辅助码的使用在很多时候不熟悉的时候可能会上屏更加异常的词汇或者生僻字，有的用户还不会使用Esc退出输入，而是选择直接敲下空格。按需造词可以有效把控造出的词是有意义的，而且默认靠后，原因简单基本上有意义的高频词万象已经提供，你应该使用辅助码将其前置。&lt;strong&gt;重点&lt;/strong&gt;：在此基础上我们还支持“后触发”当你输入编码后发现没有你要的行业词汇，此时在后面双击&lt;code&gt;``&lt;/code&gt; 就可以在不删除编码的情况下完成造词。还有一个是次选造词，如果次选是你想要的，并且是词库组合成的，上屏就会记录下来。&lt;/p&gt; 
&lt;p&gt;总结一下，造词功能由：①&lt;code&gt;``&lt;/code&gt;起始的主动造词，②&lt;code&gt;``&lt;/code&gt;在编码后面的主动造词，③次选造词。三个特性构成&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;无感造词（仅PRO）：&lt;/strong&gt; 在关闭调频的情况下，通过逐步选字选词的方式上屏将为你记录整段，且不会产生小碎片，所造词汇与db用户词是一回事，遵循用户词管理的相关逻辑，其中直接上屏不造词。相比按需造词更加不打断输入。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;用户词删除：&lt;/strong&gt; 使用Ctrl+del是rime系统删除用户词,就可以将用户词标记为c&amp;lt;=0，这在rime系统中就表现为不使用，假性删除。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;手动排序（Lua）：&lt;/strong&gt; ①词典候选类型：对选中的候选词操作，使用Ctrl+j向左一步，Ctrl+k向右一步，Ctrl+l(零)移除选中排序信息，Ctrl+p 置顶选中候选。其作用于当时编码与候选词；②动态生成的Lua候选，很多时候我们对日期、时间等输出格式首选有着自己的追求，复杂的配置又往往提升了使用难度，于是我们基于排序Lua实现了动态内容的按序号索引的排序，也就是说该序号下原本生成的格式整个发生了位置变化，使用方法一致。信息储存于Lua文件夹下排序数据库中sequence.userdb，支持导出导入数据便于多设备共用。&lt;/p&gt; 
&lt;p&gt;排序信息同步：&lt;/p&gt; 
&lt;p&gt;A 先点击同步，多见于右键菜单，保证创建了相应的同步目录，如没有自定义则位于用户目录下/sync&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;打开用户目录，会有installation.yaml文件，打开后会有如下信息，我们将installation_id认为是设备id，初次会创建自动串号，你也可以将其修改为当前设备名称&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;distribution_code_name: &quot;fcitx-rime&quot;
distribution_name: Rime
distribution_version: 5.1.9
install_time: &quot;Mon Jun 23 18:47:55 2025&quot;
installation_id: &quot;ff9b2823-8733-44bb-a497-daf382b74ca5&quot;  #这里可以随意编辑，比如修改为windows
rime_version: 1.13.1
update_time: &quot;Sat Sep  6 16:08:56 2025&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;得到这个id后我们就可以下一步构建出同步文件的名称sequence_设备id.txt&lt;/p&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;首先确定一个主要管理设备，在/sync中创建一个描述设备清单的文件 &lt;code&gt;sequence_device_list.txt&lt;/code&gt;，这个清单告诉程序要读取同目录下哪些文件进行合并&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-内部内容为：&quot;&gt;sequence_deepin.txt
sequence_windows.txt
sequence_iPhone.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;按「部署」，会进行以下几步：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;①、自动导出数据到 &lt;code&gt;sequence_deepin.txt&lt;/code&gt; 文件(假设为当前设备)，因此这个当前设备文件会被覆盖，请不要手动修改避免丢失；&lt;/p&gt; 
&lt;p&gt;②、读取列表中列出的文件，按时序以保留最新动作为依据进行去重合并，合并后数据将会回写到 &lt;code&gt;sequence_deepin.txt&lt;/code&gt; 文件；&lt;/p&gt; 
&lt;p&gt;③、将合并后的文件导入db数据库，完成数据合并，注意p=0的重置后的编码不会导入数据库，如数据库原本有对应的词汇，将删除对应的键。&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;通过云同步将/sync完成同步到windows设备，同步后，编辑 &lt;code&gt;sequence_device_list.txt&lt;/code&gt;将sequence_windows.txt写入文件，让同步程序再次完成多端同步&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;此时目录中已经存在如下文件，此时重新部署，稍作等待将会完成&lt;code&gt;sequence_windows.txt&lt;/code&gt;的输出&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_device_list.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_deepin.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_windows.txt&lt;/code&gt; #同步后新增&lt;/p&gt; 
&lt;p&gt;再次手动完成手动云同步，及时让文件对齐。&lt;/p&gt; 
&lt;p&gt;B 重复以上操作完成更多设备的添加和同步&lt;/p&gt; 
&lt;p&gt;由于此流程为模拟rime同步的方式，rime的同步本质上就是多端的数据合并的过程，可靠性可能相较于原生较弱一些，尤其是iPhone可能遇到更多问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;声调辅助回退（Lua）：&lt;/strong&gt; 万象是将7890用于代表1234声，轻声归并到了4，我们支持在例如输入ni9后发现我可能要4声，ni0，此时我们无需删除数字9而是直接输入对的0，类似手动在7890之间轮巡，能有效快速提升声调辅助的效率，减少使用负担，也是万象独创功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;删除键限制（Lua）：&lt;/strong&gt; 可以在输入中当持续按下删除编码为0时会卡住，抬起重新按下才能继续删除已经上屏内容，避免误删除上屏内容。目前仅PC可用，也是万象独创功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;输入长度限制（Lua）：&lt;/strong&gt; 对两类场景进行限制，避免数据并发卡顿：1、重复输入8个连续相同的字母，aaaaaaaa会提示:已超最大重复声母。因为连续多个的重复字母会造成严重的卡顿；2、分词片段限制在30个，也就是30个字，过长的语句价值不大还会造成卡顿。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tab循环切换音节：&lt;/strong&gt; 当输入多个字词时想要给前面补充辅助码，可以多次按下tab循环切换，这种可能比那些复杂的快捷键好用一些；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;翻译模式：&lt;/strong&gt; 输入状态按下Ctrl+E快捷键进入翻译模式，原理是opencc查表进行中英文互译，能否翻译取决于词表的丰富度；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字符集过滤：&lt;/strong&gt; 默认开启过滤，写在charset.dict.yaml的就是可以通过的字表，默认为8105+𰻞𰻞，如果你想什么字在小字集模式可以通过可以写在这里，配套开关【小字集、大字集】，快捷键Ctrl+g&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自定义词库：&lt;/strong&gt; 自定义词库首先要利用&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;LMDG&lt;/a&gt;中的脚本将你自己的词库刷成与万象同类型的声调、或者声调+辅助码的形态，因为主词库要参与转写。对于custom_phrase则需要手动编辑编码为实际输入的编码&lt;/p&gt; 
&lt;img alt=&quot;pay&quot; src=&quot;./custom/万象输入方案.png&quot; /&gt; 
&lt;h2&gt;鸣谢&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;感谢网友的热情提报问题，使得模型和词库体验进一步提升。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;赞赏&lt;/h2&gt; 
&lt;p&gt;如果觉得项目好用，可以请AMZ喝咖啡&lt;/p&gt; 
&lt;img alt=&quot;pay&quot; src=&quot;./custom/赞赏.jpg&quot; height=&quot;312&quot; width=&quot;446&quot; /&gt;</description>
    </item>
    
    <item>
      <title>apache/apisix</title>
      <link>https://github.com/apache/apisix</link>
      <description>&lt;p&gt;The Cloud-Native API Gateway and AI Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX API Gateway ｜ AI Gateway&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/logos/apisix-white-bg.jpg&quot; alt=&quot;APISIX logo&quot; height=&quot;150px&quot; align=&quot;right&quot; /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/apisix/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/apache/apisix&quot; alt=&quot;Commit activity&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&quot; alt=&quot;Percentage of issues still open&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Slack/Join%20Apache%20APISIX?icon=slack&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; 
&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; 
&lt;p&gt;APISIX can serve as an &lt;strong&gt;&lt;a href=&quot;https://apisix.apache.org/ai-gateway/&quot;&gt;AI Gateway&lt;/a&gt;&lt;/strong&gt; through its flexible plugin system, providing AI proxying, load balancing for LLMs, retries and fallbacks, token-based rate limiting, and robust security to ensure the efficiency and reliability of AI agents. APISIX also provides the &lt;a href=&quot;https://apisix.apache.org/blog/2025/04/21/host-mcp-server-with-api-gateway/&quot;&gt;&lt;code&gt;mcp-bridge&lt;/code&gt;&lt;/a&gt; plugin to seamlessly convert stdio-based MCP servers to scalable HTTP SSE services.&lt;/p&gt; 
&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&quot;https://github.com/apache/apisix-ingress-controller&quot;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&quot; alt=&quot;Technical architecture of Apache APISIX&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.g2.com/products/apache-apisix/reviews&quot;&gt;Kindly Write a Review&lt;/a&gt; for APISIX in G2.&lt;/li&gt; 
 &lt;li&gt;Mailing List: Mail to &lt;a href=&quot;mailto:dev-subscribe@apisix.apache.org&quot;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; 
 &lt;li&gt;Slack Workspace - &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;invitation link&lt;/a&gt; (Please open an &lt;a href=&quot;https://apisix.apache.org/docs/general/submit-issue&quot;&gt;issue&lt;/a&gt; if this link is expired), and then join the #apisix channel (Channels -&amp;gt; Browse channels -&amp;gt; search for &quot;apisix&quot;).&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;You can use APISIX API Gateway as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX API Gateway can run from bare-metal to Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&quot;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&quot;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&quot;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&quot;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&quot;&gt;3.1.*&lt;/a&gt;, &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;5.0&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&quot;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&quot;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&quot;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; 
   &lt;li&gt;Proxy Websocket&lt;/li&gt; 
   &lt;li&gt;Proxy Protocol&lt;/li&gt; 
   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&quot;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/http3.md&quot;&gt;HTTP/3 with QUIC&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&quot;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&quot;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; 
   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; 
   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/tutorials/health-check.md&quot;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; 
   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&quot;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&quot;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&quot;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&quot;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree#operator-list&quot;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&quot;arg_age&quot;, &quot;&amp;gt;&quot;, 24}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&quot;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&quot;&gt;Support priority&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&quot;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&quot;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Rich authentication &amp;amp; authorization support: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&quot;&gt;key-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&quot;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&quot;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&quot;&gt;casbin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&quot;&gt;keycloak&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&quot;&gt;casdoor&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&quot;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&quot;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&quot;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&quot;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&quot;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&quot;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&quot;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&quot;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&quot;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&quot;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&quot;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Zipkin tracing: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open source APM: support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&quot;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul.md&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&quot;&gt;Consul_kv&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&quot;&gt;Nacos&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&quot;&gt;Eureka&lt;/a&gt; and &lt;a href=&quot;https://github.com/api7/apisix-seed/raw/main/docs/en/latest/zookeeper.md&quot;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Monitoring And Metrics: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&quot;https://etcd.io/docs/v3.5/op-guide/clustering/&quot;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; 
   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/deployment-modes.md#standalone&quot;&gt;Standalone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&quot;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; 
   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&quot;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller.&lt;/li&gt; 
   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&quot;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&quot;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&quot;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&quot;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&quot;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&quot;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&quot;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&quot;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&quot;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&quot;&gt;File Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&quot;&gt;SolarWinds Loggly Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tencent-cloud-cls.md&quot;&gt;TencentCloud CLS&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/clickhouse-logger.md&quot;&gt;ClickHouse&lt;/a&gt;: push logs to ClickHouse.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/elasticsearch-logger.md&quot;&gt;Elasticsearch&lt;/a&gt;: push logs to Elasticsearch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&quot;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-helm-chart&quot;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in jwt-auth authentication plugin using &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/secret.md&quot;&gt;APISIX Secret&lt;/a&gt; resource.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&quot;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&quot;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; 
   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/external-plugin.png&quot; alt=&quot;Multi Language Support into Apache APISIX&quot; /&gt;&lt;/li&gt; 
   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&quot;https://github.com/apache/apisix-java-plugin-runner&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-go-plugin-runner&quot;&gt;Golang&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-python-plugin-runner&quot;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; 
   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&quot;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&quot;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&quot;https://github.com/proxy-wasm/spec#sdks&quot;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&quot;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&quot;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&quot;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&quot;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/installation-guide/&quot;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more documents, please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&quot;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/blog/2022/06/07/installation-performance-test-of-apigateway-apisix-on-aws-graviton3&quot;&gt;APISIX also works perfectly in AWS graviton3 C7g.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;User Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&quot;&gt;European eFactory Platform: API Security Gateway – Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&quot;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog/tags/case-studies/&quot;&gt;More Stories&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses APISIX API Gateway?&lt;/h2&gt; 
&lt;p&gt;A wide variety of companies and organizations use APISIX API Gateway for research, production and commercial product, below are some of them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Airwallex&lt;/li&gt; 
 &lt;li&gt;Bilibili&lt;/li&gt; 
 &lt;li&gt;CVTE&lt;/li&gt; 
 &lt;li&gt;European eFactory Platform&lt;/li&gt; 
 &lt;li&gt;European Copernicus Reference System&lt;/li&gt; 
 &lt;li&gt;Geely&lt;/li&gt; 
 &lt;li&gt;HONOR&lt;/li&gt; 
 &lt;li&gt;Horizon Robotics&lt;/li&gt; 
 &lt;li&gt;iQIYI&lt;/li&gt; 
 &lt;li&gt;Lenovo&lt;/li&gt; 
 &lt;li&gt;NASA JPL&lt;/li&gt; 
 &lt;li&gt;Nayuki&lt;/li&gt; 
 &lt;li&gt;OPPO&lt;/li&gt; 
 &lt;li&gt;QingCloud&lt;/li&gt; 
 &lt;li&gt;Swisscom&lt;/li&gt; 
 &lt;li&gt;Tencent Game&lt;/li&gt; 
 &lt;li&gt;Travelsky&lt;/li&gt; 
 &lt;li&gt;vivo&lt;/li&gt; 
 &lt;li&gt;Sina Weibo&lt;/li&gt; 
 &lt;li&gt;WeCity&lt;/li&gt; 
 &lt;li&gt;WPS&lt;/li&gt; 
 &lt;li&gt;XPENG&lt;/li&gt; 
 &lt;li&gt;Zoom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&quot;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apache.org/logos/#apisix&quot;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>beyond-all-reason/Beyond-All-Reason</title>
      <link>https://github.com/beyond-all-reason/Beyond-All-Reason</link>
      <description>&lt;p&gt;Main game repository for Beyond All Reason.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beyond-All-Reason&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/discord/225695362004811776&quot; alt=&quot;Discord&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Open source RTS game built on top of the Recoil RTS Engine&lt;/p&gt; 
&lt;h2&gt;Where to download&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/download&quot;&gt;https://www.beyondallreason.info/download&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;How to play&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/guides&quot;&gt;https://www.beyondallreason.info/guides&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development Quick Start&lt;/h2&gt; 
&lt;p&gt;Beyond All Reason (BAR), consists of 2 primary components, the lobby (Chobby - &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby&quot;&gt;https://github.com/beyond-all-reason/BYAR-Chobby&lt;/a&gt;) and the game code itself (this repository).&lt;/p&gt; 
&lt;p&gt;The game runs on top of the Recoil engine &lt;a href=&quot;https://github.com/beyond-all-reason/spring&quot;&gt;https://github.com/beyond-all-reason/spring&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In order to develop the game (this repository) you first need a working install of the lobby/launcher. There are 2 ways to do this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.beyondallreason.info/download#How-To-Install&quot;&gt;Download the full BAR application&lt;/a&gt; from the website and run it. This is probably what you will have done if you have previously installed and played the game.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OR if you want to develop the lobby client, follow &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&quot;&gt;the guide in the Chobby README&lt;/a&gt;. First download a &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby/releases&quot;&gt;release of Chobby&lt;/a&gt; and then launch Chobby, this will automatically download and install the engine and other dependencies.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Once you have a working install of BAR you need a local development copy of the game code to work with. This code will live in the BAR install directory.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;To find the BAR install directory simply open the launcher (not full game) and click the &quot;Open install directory&quot; button. This is one of the 3 buttons (&lt;code&gt;Toggle log&lt;/code&gt; and &lt;code&gt;Upload log&lt;/code&gt; are the other 2). For Windows installs this might be your user&#39;s &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the BAR install directory create the empty file &lt;code&gt;devmode.txt&lt;/code&gt;. E.g: &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data/devmode.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the BAR install directory in the &lt;code&gt;data&lt;/code&gt; folder in the &lt;code&gt;games&lt;/code&gt; sub-directory (create &lt;code&gt;games&lt;/code&gt; if it doesn&#39;t exist) clone the code for this repository into a directory with a name ending in &lt;code&gt;.sdd&lt;/code&gt;. For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/beyond-all-reason/Beyond-All-Reason.git BAR.sdd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure that you have the correct path by looking for the file &lt;code&gt;Beyond-All-Reason/data/games/BAR.sdd/modinfo.lua&lt;/code&gt;&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Now you have the game code launch the full game from the launcher as normal. Then go to &lt;code&gt;Settings &amp;gt; Developer &amp;gt; Singleplayer&lt;/code&gt; and select &lt;code&gt;Beyond All Reason Dev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch a match normally through the game UI. This match will use the dev copy of the LUA code which is in &lt;code&gt;BAR-install-directory/data/games/BAR.sdd&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If developing Chobby also clone the code into the &lt;code&gt;games&lt;/code&gt; directory. Follow the guide in the &lt;a href=&quot;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&quot;&gt;Chobby README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;More on the &lt;code&gt;.sdd&lt;/code&gt; directory to run raw LUA and the structure expected by Spring Engine is &lt;a href=&quot;https://springrts.com/wiki/Gamedev:Structure&quot;&gt;documented here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AstroNvim/astrocommunity</title>
      <link>https://github.com/AstroNvim/astrocommunity</link>
      <description>&lt;p&gt;A community repository of common plugin specifications&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot; id=&quot;madewithlua&quot;&gt; 
 &lt;img src=&quot;https://astronvim.com/logo/astronvim.svg?sanitize=true&quot; width=&quot;110&quot; , height=&quot;100&quot; /&gt; 
&lt;/div&gt; 
&lt;h1 align=&quot;center&quot;&gt;AstroNvim Community Repository&lt;/h1&gt; 
&lt;p&gt;AstroNvim&#39;s community repository contains plugin configuration specifications — a collection of plugins contributed by the community for AstroNvim, a NeoVim configuration. These specifications help manage the variety of plugins used in AstroNvim.&lt;/p&gt; 
&lt;h2&gt;📦 Setup&lt;/h2&gt; 
&lt;p&gt;To integrate the community plugins, add the provided configurations to your &lt;code&gt;plugins&lt;/code&gt; setup preferably before you import your own plugins to guarantee all AstroCommunity changes are loaded before your own overrides. If you are using the &lt;a href=&quot;https://github.com/AstroNvim/template&quot;&gt;AstroNvim Template&lt;/a&gt; This can be done in your &lt;code&gt;lua/community.lua&lt;/code&gt; file. If you&#39;re unfamiliar with configuring plugins, we recommend referring to the &lt;a href=&quot;https://docs.astronvim.com/configuration/customizing_plugins/&quot;&gt;AstroNvim documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Importing AstroCommunity Plugins&lt;/h3&gt; 
&lt;p&gt;Integrate the following content within your &lt;code&gt;lua/community.lua&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;AstroNvim/astrocommunity&quot;,
  { import = &quot;astrocommunity.colorscheme.catppuccin&quot; },
  -- ... import any community contributed plugins here
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing AstroCommunity Installations&lt;/h3&gt; 
&lt;p&gt;Once you have AstroCommunity imports defined in your &lt;code&gt;lua/community.lua&lt;/code&gt; you can then further customize the installations in your own plugin definitions (typically done in the &lt;code&gt;lua/plugins/&lt;/code&gt; directory). Here is an example assuming you have Catppuccin installed as shown above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  { -- further customize the options set by the community
    &quot;catppuccin&quot;,
    opts = {
      integrations = {
        sandwich = false,
        noice = true,
        mini = true,
        leap = true,
        markdown = true,
        neotest = true,
        cmp = true,
        overseer = true,
        lsp_trouble = true,
        rainbow_delimiters = true,
      },
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To disable imports, set the &lt;code&gt;enabled&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;. You have two approaches to modify an existing plugin: use the full repository name (e.g., &quot;m4xshen/smartcolumn.nvim&quot;) or the module name (e.g., &quot;catppuccin&quot;). Remember, the module name might differ from the folder name.&lt;/li&gt; 
 &lt;li&gt;It&#39;s recommended to use the full import path when customizing a plugin, and not the shorthand notation of just the repository name.&lt;/li&gt; 
 &lt;li&gt;You can override many aspects of community plugins including settings, dependencies, and versions. For more details on available options, refer to the &lt;a href=&quot;https://lazy.folke.io/&quot;&gt;lazy.nvim documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve written a plugin configuration and wish to add it with the AstroCommunity repository, please follow our &lt;a href=&quot;https://raw.githubusercontent.com/AstroNvim/astrocommunity/main/CONTRIBUTING.md&quot;&gt;Contribution Guidelines&lt;/a&gt; and submit a pull request. Ensure you&#39;ve rigorously tested your changes before submission. This isn&#39;t an official repository, so its stability relies on community contributions. We&#39;re excited to see how this project grows and evolves!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kdheepak/lazygit.nvim</title>
      <link>https://github.com/kdheepak/lazygit.nvim</link>
      <description>&lt;p&gt;Plugin for calling lazygit from within neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lazygit.nvim&lt;/h1&gt; 
&lt;p&gt;Plugin for calling &lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot;&gt;lazygit&lt;/a&gt; from within neovim.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1813121/87866391-79fcfe00-c93e-11ea-94a9-204947de1b39.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/akinsho/nvim-toggleterm.lua#custom-terminals&quot;&gt;akinsho/nvim-toggleterm&lt;/a&gt; or &lt;a href=&quot;https://github.com/voldikss/vim-floaterm&quot;&gt;voldikss/vim-floaterm&lt;/a&gt; as an alternative to this package.&lt;/p&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;&lt;code&gt;vim-plug&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; nvim v0.7.2
Plug &#39;kdheepak/lazygit.nvim&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- nvim v0.7.2
use({
    &quot;kdheepak/lazygit.nvim&quot;,
    -- optional for floating window border decoration
    requires = {
        &quot;nvim-lua/plenary.nvim&quot;,
    },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- nvim v0.8.0
return {
    &quot;kdheepak/lazygit.nvim&quot;,
    lazy = true,
    cmd = {
        &quot;LazyGit&quot;,
        &quot;LazyGitConfig&quot;,
        &quot;LazyGitCurrentFile&quot;,
        &quot;LazyGitFilter&quot;,
        &quot;LazyGitFilterCurrentFile&quot;,
    },
    -- optional for floating window border decoration
    dependencies = {
        &quot;nvim-lua/plenary.nvim&quot;,
    },
    -- setting the keybinding for LazyGit with &#39;keys&#39; is recommended in
    -- order to load the plugin when the command is run for the first time
    keys = {
        { &quot;&amp;lt;leader&amp;gt;lg&quot;, &quot;&amp;lt;cmd&amp;gt;LazyGit&amp;lt;cr&amp;gt;&quot;, desc = &quot;LazyGit&quot; }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Feel free to use any plugin manager. Just remember that if you are not using the latest neovim release, you will need to use &lt;a href=&quot;https://github.com/kdheepak/lazygit.vim/tree/nvim-v0.4.3&quot;&gt;the &lt;code&gt;nvim-v0.4.3&lt;/code&gt; branch&lt;/a&gt;. Integration with &lt;code&gt;nvr&lt;/code&gt; works better on the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt; 
&lt;p&gt;You can check what version of &lt;code&gt;neovim&lt;/code&gt; you have:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nvim --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;The following are configuration options and their defaults.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lazygit_floating_window_winblend = 0 &quot; transparency of floating window
let g:lazygit_floating_window_scaling_factor = 0.9 &quot; scaling factor for floating window
let g:lazygit_floating_window_border_chars = [&#39;╭&#39;,&#39;─&#39;, &#39;╮&#39;, &#39;│&#39;, &#39;╯&#39;,&#39;─&#39;, &#39;╰&#39;, &#39;│&#39;] &quot; customize lazygit popup window border characters
let g:lazygit_floating_window_use_plenary = 0 &quot; use plenary.nvim to manage floating window if available
let g:lazygit_use_neovim_remote = 1 &quot; fallback to 0 if neovim-remote is not installed

let g:lazygit_use_custom_config_file_path = 0 &quot; config file path is evaluated if this value is 1
let g:lazygit_config_file_path = &#39;&#39; &quot; custom config file path
&quot; OR
let g:lazygit_config_file_path = [] &quot; list of custom config file paths
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.g.lazygit_floating_window_winblend = 0 -- transparency of floating window
vim.g.lazygit_floating_window_scaling_factor = 0.9 -- scaling factor for floating window
vim.g.lazygit_floating_window_border_chars = {&#39;╭&#39;,&#39;─&#39;, &#39;╮&#39;, &#39;│&#39;, &#39;╯&#39;,&#39;─&#39;, &#39;╰&#39;, &#39;│&#39;} -- customize lazygit popup window border characters
vim.g.lazygit_floating_window_use_plenary = 0 -- use plenary.nvim to manage floating window if available
vim.g.lazygit_use_neovim_remote = 1 -- fallback to 0 if neovim-remote is not installed

vim.g.lazygit_use_custom_config_file_path = 0 -- config file path is evaluated if this value is 1
vim.g.lazygit_config_file_path = &#39;&#39; -- custom config file path
-- OR
vim.g.lazygit_config_file_path = {} -- table of custom config file paths

vim.g.lazygit_on_exit_callback = nil -- optional function callback when exiting lazygit (useful for example to refresh some UI elements after lazy git has made some changes)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Call &lt;code&gt;:LazyGit&lt;/code&gt; to start a floating window with &lt;code&gt;lazygit&lt;/code&gt; in the current working directory. And set up a mapping to call &lt;code&gt;:LazyGit&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; setup mapping to call :LazyGit
nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;gg :LazyGit&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Call &lt;code&gt;:LazyGitCurrentFile&lt;/code&gt; to start a floating window with &lt;code&gt;lazygit&lt;/code&gt; in the project root of the current file.&lt;/p&gt; 
&lt;p&gt;Open the configuration file for &lt;code&gt;lazygit&lt;/code&gt; directly from vim.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:LazyGitConfig&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the file does not exist it&#39;ll load the defaults for you.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1813121/78830902-46721580-79d8-11ea-8809-291b346b6c42.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Open project commits with &lt;code&gt;lazygit&lt;/code&gt; directly from vim in floating window.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:LazyGitFilter&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open buffer commits with &lt;code&gt;lazygit&lt;/code&gt; directly from vim in floating window.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:LazyGitFilterCurrentFile&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Using neovim-remote&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you have &lt;a href=&quot;https://github.com/mhinz/neovim-remote&quot;&gt;neovim-remote&lt;/a&gt; and have configured to use it in neovim, it&#39;ll launch the commit editor inside your neovim instance when you use &lt;code&gt;C&lt;/code&gt; inside &lt;code&gt;lazygit&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pip install neovim-remote&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ -n &quot;$NVIM_LISTEN_ADDRESS&quot; ]; then
    alias nvim=nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Set &lt;code&gt;EDITOR&lt;/code&gt; environment variable in &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ -n &quot;$NVIM_LISTEN_ADDRESS&quot; ]; then
    export VISUAL=&quot;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&quot;
    export EDITOR=&quot;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&quot;
else
    export VISUAL=&quot;nvim&quot;
    export EDITOR=&quot;nvim&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;Add the following to &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;if has(&#39;nvim&#39;) &amp;amp;&amp;amp; executable(&#39;nvr&#39;)
  let $GIT_EDITOR = &quot;nvr -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&quot;
endif
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have &lt;code&gt;neovim-remote&lt;/code&gt; and don&#39;t want &lt;code&gt;lazygit.nvim&lt;/code&gt; to use it, you can disable it using the following configuration option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lazygit_use_neovim_remote = 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Using nvim --listen and nvim --server to edit files in same process&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can use vanilla nvim server to edit files in the same nvim instance when you use &lt;code&gt;e&lt;/code&gt; inside &lt;code&gt;lazygit&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You have to start nvim with the &lt;code&gt;--listen&lt;/code&gt; parameter. An easy way to ensure this is to use an alias:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# ~/.bashrc
alias vim=&#39;nvim --listen /tmp/nvim-server.pipe&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;You have to modify lazygit to attempt connecting to existing nvim instance on edit:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;# ~/.config/jesseduffield/lazygit/config.yml
os:
  editCommand: &#39;nvim&#39;
  editCommandTemplate: &#39;{{editor}} --server /tmp/nvim-server.pipe --remote-tab &quot;$(pwd)/{{filename}}&quot;&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Telescope Plugin&lt;/h3&gt; 
&lt;p&gt;The Telescope plugin is used to track all git repository visited in one nvim session.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Why a telescope Plugin&lt;/strong&gt; ?&lt;/p&gt; 
&lt;p&gt;Assuming you have one or more submodule(s) in your project and you want to commit changes in both the submodule(s) and the main repo. Though switching between submodules and main repo is not straight forward. A solution at first could be:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;open a file inside the submodule&lt;/li&gt; 
 &lt;li&gt;open lazygit&lt;/li&gt; 
 &lt;li&gt;do commit&lt;/li&gt; 
 &lt;li&gt;then open a file in the main repo&lt;/li&gt; 
 &lt;li&gt;open lazygit&lt;/li&gt; 
 &lt;li&gt;do commit&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;That is really annoying. Instead, you can open it with telescope.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How to use&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- nvim v0.7.2
use({
    &quot;kdheepak/lazygit.nvim&quot;,
    requires = {
        &quot;nvim-telescope/telescope.nvim&quot;,
        &quot;nvim-lua/plenary.nvim&quot;,
    },
    config = function()
        require(&quot;telescope&quot;).load_extension(&quot;lazygit&quot;)
    end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- nvim v0.8.0
{
    &quot;kdheepak/lazygit.nvim&quot;,
    lazy = false,
    cmd = {
        &quot;LazyGit&quot;,
        &quot;LazyGitConfig&quot;,
        &quot;LazyGitCurrentFile&quot;,
        &quot;LazyGitFilter&quot;,
        &quot;LazyGitFilterCurrentFile&quot;,
    },
    -- optional for floating window border decoration
    dependencies = {
        &quot;nvim-telescope/telescope.nvim&quot;,
        &quot;nvim-lua/plenary.nvim&quot;,
    },
    config = function()
        require(&quot;telescope&quot;).load_extension(&quot;lazygit&quot;)
    end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lazy loading &lt;code&gt;lazygit.nvim&lt;/code&gt; for telescope functionality is not supported. Open an issue if you wish to have this feature.&lt;/p&gt; 
&lt;p&gt;If you are not using Packer, to load the telescope extension, you have to add this line to your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;telescope&#39;).load_extension(&#39;lazygit&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default the paths of each repo is stored only when lazygit is triggered. Though, this may not be convenient, so it possible to do something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;autocmd BufEnter * :lua require(&#39;lazygit.utils&#39;).project_root_dir()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That makes sure that any opened buffer which is contained in a git repo will be tracked.&lt;/p&gt; 
&lt;p&gt;Once you have loaded the extension, you can invoke the plugin using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lua require(&quot;telescope&quot;).extensions.lazygit.lazygit()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Highlighting groups&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Default Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LazyGitFloat&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;em&gt;Normal&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Float terminal foreground and background&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LazyGitBorder&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;em&gt;Normal&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Float terminal border&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>xmake-io/xmake</title>
      <link>https://github.com/xmake-io/xmake</link>
      <description>&lt;p&gt;🔥 A cross-platform build utility based on Lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://xmake.io&quot;&gt; &lt;img width=&quot;160&quot; height=&quot;160&quot; src=&quot;https://xmake.io/assets/img/logo.png&quot; /&gt; &lt;/a&gt; 
 &lt;h1&gt;xmake&lt;/h1&gt; 
 &lt;div&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/actions?query=workflow%3AWindows&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/windows.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=windows&quot; alt=&quot;github-ci&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/actions?query=workflow%3ALinux&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/linux.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=linux&quot; alt=&quot;github-ci&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/actions?query=workflow%3AmacOS&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/macos.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=apple&quot; alt=&quot;github-ci&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/release/xmake-io/xmake.svg?style=flat-square&quot; alt=&quot;Github All Releases&quot; /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/raw/master/LICENSE.md&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/xmake-io/xmake.svg?colorB=f48041&amp;amp;style=flat-square&quot; alt=&quot;license&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://www.reddit.com/r/xmake/&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/chat-on%20reddit-ff3f34.svg?style=flat-square&quot; alt=&quot;Reddit&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://t.me/tbooxorg&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/chat-on%20telegram-blue.svg?style=flat-square&quot; alt=&quot;Telegram&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://jq.qq.com/?_wv=1027&amp;amp;k=5hpwWFv&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/chat-on%20QQ-ff69b4.svg?style=flat-square&quot; alt=&quot;QQ&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://discord.gg/xmake&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg?style=flat-square&quot; alt=&quot;Discord&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://xmake.io/about/sponsor&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/donate-us-orange.svg?style=flat-square&quot; alt=&quot;Donate&quot; /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;p&gt;&lt;b&gt;A cross-platform build utility based on Lua&lt;/b&gt;&lt;br /&gt; &lt;i&gt;Modern C/C++ build tool: Simple, Fast, Powerful dependency package integration&lt;/i&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Support this project&lt;/h2&gt; 
&lt;p&gt;Support this project by &lt;a href=&quot;https://xmake.io/about/sponsor&quot;&gt;becoming a sponsor&lt;/a&gt;. Your logo will show up here with a link to your website. 🙏&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/xmake#sponsors&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/xmake/sponsors.svg?width=890&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/xmake#backers&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/xmake/backers.svg?width=890&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Technical support&lt;/h2&gt; 
&lt;p&gt;You can also consider sponsoring us to get extra technical support services via the &lt;a href=&quot;https://github.com/sponsors/waruqi&quot;&gt;Github sponsor program&lt;/a&gt;. If you do, you can get access to the &lt;a href=&quot;https://github.com/xmake-io/technical-support&quot;&gt;xmake-io/technical-support&lt;/a&gt; repository, which has the following benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Handling Issues with higher priority&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; One-to-one technical consulting service&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Review your xmake.lua and provide suggestions for improvement&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction (&lt;a href=&quot;https://raw.githubusercontent.com/xmake-io/xmake/dev/README_zh.md&quot;&gt;中文&lt;/a&gt;)&lt;/h2&gt; 
&lt;p&gt;What is Xmake?&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Xmake is a cross-platform build utility based on the Lua scripting language.&lt;/li&gt; 
 &lt;li&gt;Xmake is very lightweight and has no dependencies outside of the standard library.&lt;/li&gt; 
 &lt;li&gt;Uses the &lt;code&gt;xmake.lua&lt;/code&gt; file to maintain project builds with a simple and readable syntax.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Xmake can be used to directly build source code (like with Make or Ninja), or it can generate project source files like CMake or Meson. It also has a &lt;em&gt;built-in&lt;/em&gt; package management system to help users integrate C/C++ dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Although less precise, one can still understand Xmake in the following way:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Xmake ≈ Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to know more, please refer to the &lt;a href=&quot;https://xmake.io/guide/quick-start&quot;&gt;Documentation&lt;/a&gt;, &lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;GitHub&lt;/a&gt; or &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;. You are also welcome to join our &lt;a href=&quot;https://xmake.io/about/contact&quot;&gt;community&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The official Xmake repository can be found at &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-io/xmake-repo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/xmake-io/xmake-docs/raw/master/docs/public/assets/img/index/xmake-basic-render.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;With cURL&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -fsSL https://xmake.io/shget.text | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;With Wget&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget https://xmake.io/shget.text -O - | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;With PowerShell&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;irm https://xmake.io/psget.text | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Other installation methods&lt;/h3&gt; 
&lt;p&gt;If you don&#39;t want to use the above scripts to install Xmake, visit the &lt;a href=&quot;https://xmake.io/guide/quick-start.html#installation&quot;&gt;Installation Guide&lt;/a&gt; for other installation methods (building from source, package managers, etc.).&lt;/p&gt; 
&lt;h2&gt;Simple Project Description&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;console&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Creates a new target &lt;code&gt;console&lt;/code&gt; of kind &lt;code&gt;binary&lt;/code&gt;, and adds all the files ending in &lt;code&gt;.c&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Package dependencies&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;tbox 1.6.*&quot;, &quot;zlib&quot;, &quot;libpng ~1.6&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Adds a requirement of tbox v1.6, zlib (any version), and libpng v1.6.&lt;/p&gt; 
&lt;p&gt;The official xmake package repository exists at: &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/xmake-io/xmake-docs/raw/master/assets/img/index/package.gif&quot; width=&quot;650px&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Command line interface reference&lt;/h2&gt; 
&lt;p&gt;The below assumes you are currently in the project&#39;s root directory.&lt;/p&gt; 
&lt;h3&gt;Build a project&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run target&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake run console
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Debug target&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake run -d console
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run test&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configure platform&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake f -p [windows|linux|macosx|android|iphoneos ..] -a [x86|arm64 ..] -m [debug|release]
$ xmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Menu configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake f --menu
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://xmake.io/assets/img/index/menuconf.png&quot; width=&quot;650px&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Supported platforms&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (x86, x64, arm, arm64, arm64ec)&lt;/li&gt; 
 &lt;li&gt;macOS (i386, x86_64, arm64)&lt;/li&gt; 
 &lt;li&gt;Linux (i386, x86_64, arm, arm64, riscv, mips, 390x, sh4 ...)&lt;/li&gt; 
 &lt;li&gt;*BSD (i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;Android (x86, x86_64, armeabi, armeabi-v7a, arm64-v8a)&lt;/li&gt; 
 &lt;li&gt;iOS (armv7, armv7s, arm64, i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;WatchOS (armv7k, i386)&lt;/li&gt; 
 &lt;li&gt;AppleTVOS (armv7, arm64, i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;AppleXROS (arm64, x86_64)&lt;/li&gt; 
 &lt;li&gt;MSYS (i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;MinGW (i386, x86_64, arm, arm64)&lt;/li&gt; 
 &lt;li&gt;Cygwin (i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;Wasm (wasm32, wasm64)&lt;/li&gt; 
 &lt;li&gt;Haiku (i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;Harmony (x86_64, armeabi-v7a, arm64-v8a)&lt;/li&gt; 
 &lt;li&gt;Cross (cross-toolchains ..)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported toolchains&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake show -l toolchains
xcode         Xcode IDE
msvc          Microsoft Visual C/C++ Compiler
clang-cl      LLVM Clang C/C++ Compiler compatible with msvc
yasm          The Yasm Modular Assembler
clang         A C language family frontend for LLVM
go            Go Programming Language Compiler
dlang         D Programming Language Compiler (Auto)
dmd           D Programming Language Compiler
ldc           The LLVM-based D Compiler
gdc           The GNU D Compiler (GDC)
gfortran      GNU Fortran Programming Language Compiler
zig           Zig Programming Language Compiler
sdcc          Small Device C Compiler
cuda          CUDA Toolkit (nvcc, nvc, nvc++, nvfortran)
ndk           Android NDK
rust          Rust Programming Language Compiler
swift         Swift Programming Language Compiler
llvm          A collection of modular and reusable compiler and toolchain technologies
cross         Common cross compilation toolchain
nasm          NASM Assembler
gcc           GNU Compiler Collection
mingw         Minimalist GNU for Windows
gnu-rm        GNU Arm Embedded Toolchain
envs          Environment variables toolchain
fasm          Flat Assembler
tinycc        Tiny C Compiler
emcc          A toolchain for compiling to asm.js and WebAssembly
icc           Intel C/C++ Compiler
ifort         Intel Fortran Compiler
ifx           Intel LLVM Fortran Compiler
muslcc        The musl-based cross-compilation toolchain
fpc           Free Pascal Programming Language Compiler
wasi          WASI-enabled WebAssembly C/C++ toolchain
nim           Nim Programming Language Compiler
circle        A new C++20 compiler
armcc         ARM Compiler Version 5 of Keil MDK
armclang      ARM Compiler Version 6 of Keil MDK
c51           Keil development tools for the 8051 Microcontroller Architecture
icx           Intel LLVM C/C++ Compiler
dpcpp         Intel LLVM C++ Compiler for data parallel programming model based on Khronos SYCL
masm32        The MASM32 SDK
iverilog      Icarus Verilog
verilator     Verilator open-source SystemVerilog simulator and lint system
cosmocc       build-once run-anywhere
hdk           Harmony SDK
ti-c2000      TI-CGT C2000 compiler
ti-c6000      TI-CGT C6000 compiler
iararm        IAR ARM C/C++ Compiler
kotlin-native Kotlin Native Programming Language Compiler
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Supported languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;C and C++&lt;/li&gt; 
 &lt;li&gt;Objective-C and Objective-C++&lt;/li&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
 &lt;li&gt;Assembly&lt;/li&gt; 
 &lt;li&gt;Golang&lt;/li&gt; 
 &lt;li&gt;Rust&lt;/li&gt; 
 &lt;li&gt;Dlang&lt;/li&gt; 
 &lt;li&gt;Fortran&lt;/li&gt; 
 &lt;li&gt;Cuda&lt;/li&gt; 
 &lt;li&gt;Zig&lt;/li&gt; 
 &lt;li&gt;Vala&lt;/li&gt; 
 &lt;li&gt;Pascal&lt;/li&gt; 
 &lt;li&gt;Nim&lt;/li&gt; 
 &lt;li&gt;Verilog&lt;/li&gt; 
 &lt;li&gt;FASM&lt;/li&gt; 
 &lt;li&gt;NASM&lt;/li&gt; 
 &lt;li&gt;YASM&lt;/li&gt; 
 &lt;li&gt;MASM32&lt;/li&gt; 
 &lt;li&gt;Cppfront&lt;/li&gt; 
 &lt;li&gt;Kotlin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Xmake exhibits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple yet flexible configuration grammar.&lt;/li&gt; 
 &lt;li&gt;Quick, dependency-free installation.&lt;/li&gt; 
 &lt;li&gt;Easy compilation for most all supported platforms.&lt;/li&gt; 
 &lt;li&gt;Supports cross-compilation with intelligent analysis of cross toolchain information.&lt;/li&gt; 
 &lt;li&gt;Extremely fast parallel compilation support.&lt;/li&gt; 
 &lt;li&gt;Supports C++ modules (new in C++20).&lt;/li&gt; 
 &lt;li&gt;Supports cross-platform C/C++ dependencies with built-in package manager.&lt;/li&gt; 
 &lt;li&gt;Multi-language compilation support including mixed-language projects.&lt;/li&gt; 
 &lt;li&gt;Rich plug-in support with various project generators (ex. Visual Studio/Makefiles/CMake/&lt;code&gt;compile_commands.json&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;REPL interactive execution support&lt;/li&gt; 
 &lt;li&gt;Incremental compilation support with automatic analysis of header files&lt;/li&gt; 
 &lt;li&gt;Built-in toolchain management&lt;/li&gt; 
 &lt;li&gt;A large number of expansion modules&lt;/li&gt; 
 &lt;li&gt;Remote compilation support&lt;/li&gt; 
 &lt;li&gt;Distributed compilation support&lt;/li&gt; 
 &lt;li&gt;Local and remote build cache support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Project Types&lt;/h2&gt; 
&lt;p&gt;Xmake supports the below types of projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Static libraries&lt;/li&gt; 
 &lt;li&gt;Shared libraries&lt;/li&gt; 
 &lt;li&gt;Console/CLI applications&lt;/li&gt; 
 &lt;li&gt;CUDA programs&lt;/li&gt; 
 &lt;li&gt;Qt applications&lt;/li&gt; 
 &lt;li&gt;WDK drivers (umdf/kmdf/wdm)&lt;/li&gt; 
 &lt;li&gt;WinSDK applications&lt;/li&gt; 
 &lt;li&gt;MFC applications&lt;/li&gt; 
 &lt;li&gt;Darwin applications (with metal support)&lt;/li&gt; 
 &lt;li&gt;Frameworks and bundles (in Darwin)&lt;/li&gt; 
 &lt;li&gt;SWIG modules (Lua, Python, ...)&lt;/li&gt; 
 &lt;li&gt;LuaRocks modules&lt;/li&gt; 
 &lt;li&gt;Protobuf programs&lt;/li&gt; 
 &lt;li&gt;Lex/Yacc programs&lt;/li&gt; 
 &lt;li&gt;Linux kernel modules&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Package management&lt;/h2&gt; 
&lt;h3&gt;Download and build&lt;/h3&gt; 
&lt;p&gt;Xmake can automatically fetch and install dependencies!&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://xmake.io/assets/img/index/package_manage.png&quot; width=&quot;650px&quot; /&gt; &lt;/p&gt; 
&lt;h3&gt;Supported package repositories&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official package repository &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; (tbox &amp;gt;1.6.1)&lt;/li&gt; 
 &lt;li&gt;Official package manager &lt;a href=&quot;https://github.com/xmake-io/xrepo&quot;&gt;Xrepo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://xmake.io/guide/package-management/using-official-packages.html#using-self-built-private-package-repository&quot;&gt;User-built repositories&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Conan (conan::openssl/1.1.1g)&lt;/li&gt; 
 &lt;li&gt;Conda (conda::libpng 1.3.67)&lt;/li&gt; 
 &lt;li&gt;Vcpkg (vcpkg:ffmpeg)&lt;/li&gt; 
 &lt;li&gt;Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)&lt;/li&gt; 
 &lt;li&gt;Pacman on archlinux/msys2 (pacman::libcurl)&lt;/li&gt; 
 &lt;li&gt;Apt on ubuntu/debian (apt::zlib1g-dev)&lt;/li&gt; 
 &lt;li&gt;Clib (clib::clibs/bytes@0.0.4)&lt;/li&gt; 
 &lt;li&gt;Dub (dub::log 0.4.3)&lt;/li&gt; 
 &lt;li&gt;Portage on Gentoo/Linux (portage::libhandy)&lt;/li&gt; 
 &lt;li&gt;Nimble for nimlang (nimble::zip &amp;gt;1.3)&lt;/li&gt; 
 &lt;li&gt;Cargo for rust (cargo::base64 0.13.0)&lt;/li&gt; 
 &lt;li&gt;Zypper on openSUSE (zypper::libsfml2 2.5)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Package management features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;The official repository provides nearly 500+ packages with simple compilation on all supported platforms&lt;/li&gt; 
 &lt;li&gt;Full platform package support, support for cross-compiled dependent packages&lt;/li&gt; 
 &lt;li&gt;Support package virtual environment using &lt;code&gt;xrepo env shell&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Precompiled package acceleration for Windows (NT)&lt;/li&gt; 
 &lt;li&gt;Support self-built package repositories and private repository deployment&lt;/li&gt; 
 &lt;li&gt;Third-party package repository support for repositories such as: vcpkg, conan, conda, etc.&lt;/li&gt; 
 &lt;li&gt;Supports automatic pulling of remote toolchains&lt;/li&gt; 
 &lt;li&gt;Supports dependency version locking&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Processing architecture&lt;/h2&gt; 
&lt;p&gt;Below is a diagram showing roughly the architecture of Xmake, and thus how it functions.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://xmake.io/assets/img/index/package_arch.png&quot; width=&quot;650px&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Distributed Compilation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Cross-platform support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support for MSVC, Clang, GCC and other cross-compilation toolchains.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support for building for Android, Linux, Windows NT, and Darwin hosts.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; No dependencies other than the compilation toolchain.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support for build server load balancing scheduling.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support for real time compressed transfer of large files (lz4).&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Almost zero configuration cost, no shared filesystem required, for convenience and security.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more details see: &lt;a href=&quot;https://xmake.io/guide/extras/distributed-compilation.html&quot;&gt;Distributed Compilation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Remote Compilation&lt;/h2&gt; 
&lt;p&gt;For more details see: &lt;a href=&quot;https://xmake.io/guide/extras/remote-compilation.html&quot;&gt;Remote Compilation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Local/Remote Build Cache&lt;/h2&gt; 
&lt;p&gt;For more details see: &lt;a href=&quot;https://xmake.io/guide/extras/build-cache.html&quot;&gt;Build Cache Acceleration&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Xmake&#39;s speed on is par with Ninja! The test project: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/core&quot;&gt;xmake-core&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Multi-task parallel compilation&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;buildsystem&lt;/th&gt; 
   &lt;th&gt;Termux (8core/-j12)&lt;/th&gt; 
   &lt;th&gt;buildsystem&lt;/th&gt; 
   &lt;th&gt;MacOS (8core/-j12)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;xmake&lt;/td&gt; 
   &lt;td&gt;24.890s&lt;/td&gt; 
   &lt;td&gt;xmake&lt;/td&gt; 
   &lt;td&gt;12.264s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ninja&lt;/td&gt; 
   &lt;td&gt;25.682s&lt;/td&gt; 
   &lt;td&gt;ninja&lt;/td&gt; 
   &lt;td&gt;11.327s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmake(gen+make)&lt;/td&gt; 
   &lt;td&gt;5.416s+28.473s&lt;/td&gt; 
   &lt;td&gt;cmake(gen+make)&lt;/td&gt; 
   &lt;td&gt;1.203s+14.030s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; 
   &lt;td&gt;4.458s+24.842s&lt;/td&gt; 
   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; 
   &lt;td&gt;0.988s+11.644s&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Single task compilation&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;buildsystem&lt;/th&gt; 
   &lt;th&gt;Termux (-j1)&lt;/th&gt; 
   &lt;th&gt;buildsystem&lt;/th&gt; 
   &lt;th&gt;MacOS (-j1)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;xmake&lt;/td&gt; 
   &lt;td&gt;1m57.707s&lt;/td&gt; 
   &lt;td&gt;xmake&lt;/td&gt; 
   &lt;td&gt;39.937s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ninja&lt;/td&gt; 
   &lt;td&gt;1m52.845s&lt;/td&gt; 
   &lt;td&gt;ninja&lt;/td&gt; 
   &lt;td&gt;38.995s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmake(gen+make)&lt;/td&gt; 
   &lt;td&gt;5.416s+2m10.539s&lt;/td&gt; 
   &lt;td&gt;cmake(gen+make)&lt;/td&gt; 
   &lt;td&gt;1.203s+41.737s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; 
   &lt;td&gt;4.458s+1m54.868s&lt;/td&gt; 
   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; 
   &lt;td&gt;0.988s+38.022s&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;More Examples&lt;/h2&gt; 
&lt;h3&gt;Debug and release profiles&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_rules(&quot;mode.debug&quot;, &quot;mode.release&quot;)

target(&quot;console&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    if is_mode(&quot;debug&quot;) then
        add_defines(&quot;DEBUG&quot;)
    end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom scripts&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    after_build(function (target)
        print(&quot;hello: %s&quot;, target:name())
        os.exec(&quot;echo %s&quot;, target:targetfile())
    end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Automatic integration of dependent packages&lt;/h3&gt; 
&lt;p&gt;Download and use packages in &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; or third-party repositories:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;tbox &amp;gt;1.6.1&quot;, &quot;libuv master&quot;, &quot;vcpkg::ffmpeg&quot;, &quot;brew::pcre2/libpcre2-8&quot;)
add_requires(&quot;conan::openssl/1.1.1g&quot;, {alias = &quot;openssl&quot;, optional = true, debug = true})
target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    add_packages(&quot;tbox&quot;, &quot;libuv&quot;, &quot;vcpkg::ffmpeg&quot;, &quot;brew::pcre2/libpcre2-8&quot;, &quot;openssl&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition, we can also use the &lt;a href=&quot;https://github.com/xmake-io/xrepo&quot;&gt;xrepo&lt;/a&gt; command to quickly install dependencies.&lt;/p&gt; 
&lt;h3&gt;Qt QuickApp Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    add_rules(&quot;qt.quickapp&quot;)
    add_files(&quot;src/*.cpp&quot;)
    add_files(&quot;src/qml.qrc&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cuda Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.cu&quot;)
    add_cugencodes(&quot;native&quot;)
    add_cugencodes(&quot;compute_35&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WDK/UMDF Driver Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;echo&quot;)
    add_rules(&quot;wdk.driver&quot;, &quot;wdk.env.umdf&quot;)
    add_files(&quot;driver/*.c&quot;)
    add_files(&quot;driver/*.inx&quot;)
    add_includedirs(&quot;exe&quot;)

target(&quot;app&quot;)
    add_rules(&quot;wdk.binary&quot;, &quot;wdk.env.umdf&quot;)
    add_files(&quot;exe/*.cpp&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more WDK driver examples (UMDF/KMDF/WDM), please visit &lt;a href=&quot;https://xmake.io/examples/cpp/wdk.html&quot;&gt;WDK Program Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Darwin Applications&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    add_rules(&quot;xcode.application&quot;)
    add_files(&quot;src/*.m&quot;, &quot;src/**.storyboard&quot;, &quot;src/*.xcassets&quot;)
    add_files(&quot;src/Info.plist&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Framework and Bundle Program (Darwin)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    add_rules(&quot;xcode.framework&quot;) -- or xcode.bundle
    add_files(&quot;src/*.m&quot;)
    add_files(&quot;src/Info.plist&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;OpenMP Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;libomp&quot;, {optional = true})
target(&quot;loop&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.cpp&quot;)
    add_rules(&quot;c++.openmp&quot;)
    add_packages(&quot;libomp&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Zig Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/main.zig&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Automatically fetch remote toolchain&lt;/h3&gt; 
&lt;h4&gt;fetch a special version of LLVM&lt;/h4&gt; 
&lt;p&gt;Require the Clang version packaged with LLM-10 to compile a project.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;llvm 10.x&quot;, {alias = &quot;llvm-10&quot;})
target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    set_toolchains(&quot;llvm@llvm-10&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fetch a cross-compilation toolchain&lt;/h4&gt; 
&lt;p&gt;We can also pull a specified cross-compilation toolchain in to compile the project.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;muslcc&quot;)
target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    set_toolchains(&quot;@muslcc&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fetch toolchain and packages&lt;/h4&gt; 
&lt;p&gt;We can also use the specified &lt;code&gt;muslcc&lt;/code&gt; cross-compilation toolchain to compile and integrate all dependent packages.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;muslcc&quot;)
add_requires(&quot;zlib&quot;, &quot;libogg&quot;, {system = false})

set_toolchains(&quot;@muslcc&quot;)

target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    add_packages(&quot;zlib&quot;, &quot;libogg&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;h4&gt;Generate IDE project file plugin（makefile, vs2002 - vs2026 .. ）&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake project -k vsxmake -m &quot;debug,release&quot; # New vsproj generator (Recommended)
$ xmake project -k vs -m &quot;debug,release&quot;
$ xmake project -k cmake
$ xmake project -k ninja
$ xmake project -k compile_commands
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Run a custom lua script plugin&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake l ./test.lua
$ xmake l -c &quot;print(&#39;hello xmake!&#39;)&quot;
$ xmake l lib.detect.find_tool gcc
$ xmake l
&amp;gt; print(&quot;hello xmake!&quot;)
&amp;gt; {1, 2, 3}
&amp;lt; {
    1,
    2,
    3
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see a list of builtin plugins, please visit &lt;a href=&quot;https://xmake.io/guide/extensions/builtin-plugins.html&quot;&gt;Builtin plugins&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please download and install other plugins from the plugins repository &lt;a href=&quot;https://github.com/xmake-io/xmake-plugins&quot;&gt;xmake-plugins&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;IDE/Editor Integration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-vscode&quot;&gt;xmake-vscode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/xmake-io/xmake-vscode/master/res/problem.gif&quot; width=&quot;650px&quot; /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-sublime&quot;&gt;xmake-sublime&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/xmake-io/xmake-sublime/master/res/problem.gif&quot; width=&quot;650px&quot; /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-idea&quot;&gt;xmake-idea&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/xmake-io/xmake-idea/master/res/problem.gif&quot; width=&quot;650px&quot; /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/luzhlon/xmake.vim&quot;&gt;xmake.vim&lt;/a&gt; (third-party, thanks &lt;a href=&quot;https://github.com/luzhlon&quot;&gt;@luzhlon&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/HelloWorld886/xmake-visualstudio&quot;&gt;xmake-visualstudio&lt;/a&gt; (third-party, thanks &lt;a href=&quot;https://github.com/HelloWorld886&quot;&gt;@HelloWorld886&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Arthapz/xmake-project-manager&quot;&gt;xmake-qtcreator&lt;/a&gt; (third-party, thanks &lt;a href=&quot;https://github.com/Arthapz&quot;&gt;@Arthapz&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Xmake Gradle Plugin (JNI)&lt;/h3&gt; 
&lt;p&gt;We can use the &lt;a href=&quot;https://github.com/xmake-io/xmake-gradle&quot;&gt;xmake-gradle&lt;/a&gt; plugin to compile JNI libraries via gradle.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;plugins {
  id &#39;org.tboox.gradle-xmake-plugin&#39; version &#39;1.1.5&#39;
}

android {
    externalNativeBuild {
        xmake {
            path &quot;jni/xmake.lua&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;xmakeBuild&lt;/code&gt; task will be injected into the &lt;code&gt;assemble&lt;/code&gt; task automatically if the &lt;code&gt;gradle-xmake-plugin&lt;/code&gt; has been applied.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ ./gradlew app:assembleDebug
&amp;gt; Task :nativelib:xmakeConfigureForArm64
&amp;gt; Task :nativelib:xmakeBuildForArm64
&amp;gt;&amp;gt; xmake build
[ 50%]: cache compiling.debug nativelib.cc
[ 75%]: linking.debug libnativelib.so
[100%]: build ok!
&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/arm64-v8a
&amp;gt; Task :nativelib:xmakeConfigureForArmv7
&amp;gt; Task :nativelib:xmakeBuildForArmv7
&amp;gt;&amp;gt; xmake build
[ 50%]: cache compiling.debug nativelib.cc
[ 75%]: linking.debug libnativelib.so
[100%]: build ok!
&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/armeabi-v7a
&amp;gt; Task :nativelib:preBuild
&amp;gt; Task :nativelib:assemble
&amp;gt; Task :app:assembleDebug
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;CI Integration&lt;/h2&gt; 
&lt;h3&gt;GitHub Action&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/xmake-io/github-action-setup-xmake&quot;&gt;github-action-setup-xmake&lt;/a&gt; plugin for GitHub Actions can allow you to use Xmake with minimal efforts if you use GitHub Actions for your CI pipeline.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;uses: xmake-io/github-action-setup-xmake@v1
with:
  xmake-version: latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Who is using Xmake?&lt;/h2&gt; 
&lt;p&gt;The list of people and projects who are using Xmake is available &lt;a href=&quot;https://xmake.io/about/who_is_using_xmake.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are using Xmake, you are welcome to submit your information to the above list through a PR, so that other users and the developers can gauge interest. This also lets users use xmake more confidently and gives us motivation to continue to maintain it.&lt;/p&gt; 
&lt;p&gt;This will help the Xmake project and it&#39;s community grow stronger and expand!&lt;/p&gt; 
&lt;h2&gt;Contacts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Email：&lt;a href=&quot;mailto:waruqi@gmail.com&quot;&gt;waruqi@gmail.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Homepage：&lt;a href=&quot;https://xmake.io&quot;&gt;xmake.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Community 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/xmake/&quot;&gt;Chat on Reddit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://t.me/tbooxorg&quot;&gt;Chat on Telegram&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://discord.gg/xmake&quot;&gt;Chat on Discord&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Chat on QQ Group: 343118190, 662147501&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Source Code：&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WeChat Public: tboox-os&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;This project exists thanks to all the people who have &lt;a href=&quot;https://raw.githubusercontent.com/xmake-io/xmake/dev/CONTRIBUTING.md&quot;&gt;contributed&lt;/a&gt;: &lt;a href=&quot;https://github.com/xmake-io/xmake/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/xmake/contributors.svg?width=890&amp;amp;button=false&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TitanSnow&quot;&gt;TitanSnow&lt;/a&gt;: Provide the xmake &lt;a href=&quot;https://github.com/TitanSnow/ts-xmake-logo&quot;&gt;logo&lt;/a&gt; and install scripts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/uael&quot;&gt;uael&lt;/a&gt;: Provide the semantic versioning library &lt;a href=&quot;https://github.com/uael/sv&quot;&gt;sv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;OpportunityLiu&lt;/a&gt;: Improve cuda, tests and ci&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xq114&quot;&gt;xq144&lt;/a&gt;: Improve &lt;code&gt;xrepo env shell&lt;/code&gt;, and contribute a lot of packages to the &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; repository.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/star-hengxing&quot;&gt;star-hengxing&lt;/a&gt;: Contribute a lot of packages to the &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; repository.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Arthapz&quot;&gt;Arthapz&lt;/a&gt;: Contribute new C++ Modules implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SirLynix&quot;&gt;SirLynix&lt;/a&gt;: Contributed many packages and let more people know about xmake.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;enderger&lt;/code&gt;: Helped smooth out the edges on the English translation of the README&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Powered by&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSource&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jetbrains.svg?sanitize=true&quot; alt=&quot;JetBrains logo.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NeogitOrg/neogit</title>
      <link>https://github.com/NeogitOrg/neogit</link>
      <description>&lt;p&gt;An interactive and powerful Git interface for Neovim, inspired by Magit&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot; markdown=&quot;1&quot;&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href=&quot;https://www.warp.dev/neogit&quot;&gt; &lt;img alt=&quot;Warp sponsorship&quot; width=&quot;600&quot; src=&quot;https://github.com/user-attachments/assets/c58acc85-7438-46a7-a89a-0f404c269256&quot; /&gt; &lt;/a&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://www.warp.dev/neogit&quot;&gt;Warp, the intelligent terminal for developers&lt;/a&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.warp.dev/neogit&quot;&gt;Try running neogit in Warp&lt;/a&gt;&lt;br /&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   &lt;img src=&quot;https://github.com/NeogitOrg/neogit/assets/7228095/7684545f-47b5-40e2-aedd-ccf56e0553f4&quot; width=&quot;400px&quot; /&gt;
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;h1&gt;Neogit&lt;/h1&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;strong&gt;A git interface for &lt;a href=&quot;https://neovim.io&quot;&gt;Neovim&lt;/a&gt;, inspired by &lt;a href=&quot;https://magit.vc&quot;&gt;Magit&lt;/a&gt;.&lt;/strong&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;p&gt;&lt;a href=&quot;http://www.lua.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&quot; alt=&quot;Lua&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://neovim.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim%200.10+-green.svg?style=for-the-badge&amp;amp;logo=neovim&quot; alt=&quot;Neovim&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/MIT-yellow.svg?style=for-the-badge&quot; alt=&quot;MIT&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/NeogitOrg/neogit&quot;&gt; &lt;img src=&quot;https://dotfyle.com/plugins/NeogitOrg/neogit/shield?style=for-the-badge&quot; /&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/NeogitOrg/neogit/assets/7228095/d964cbb4-a557-4e97-ac5b-ea571a001f5c&quot; alt=&quot;preview&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Here&#39;s an example spec for &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;Lazy&lt;/a&gt;, but you&#39;re free to use whichever plugin manager suits you.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;NeogitOrg/neogit&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,         -- required
    &quot;sindrets/diffview.nvim&quot;,        -- optional - Diff integration

    -- Only one of these is needed.
    &quot;nvim-telescope/telescope.nvim&quot;, -- optional
    &quot;ibhagwan/fzf-lua&quot;,              -- optional
    &quot;echasnovski/mini.pick&quot;,         -- optional
    &quot;folke/snacks.nvim&quot;,             -- optional
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch will always be compatible with the latest &lt;strong&gt;stable&lt;/strong&gt; release of Neovim, and usually with the latest &lt;strong&gt;nightly&lt;/strong&gt; build as well.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;You can configure neogit by running the &lt;code&gt;require(&#39;neogit&#39;).setup {}&lt;/code&gt; function, passing a table as the argument.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default Config&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local neogit = require(&quot;neogit&quot;)

neogit.setup {
  -- Hides the hints at the top of the status buffer
  disable_hint = false,
  -- Disables changing the buffer highlights based on where the cursor is.
  disable_context_highlighting = false,
  -- Disables signs for sections/items/hunks
  disable_signs = false,
  -- Offer to force push when branches diverge
  prompt_force_push = true,
  -- Changes what mode the Commit Editor starts in. `true` will leave nvim in normal mode, `false` will change nvim to
  -- insert mode, and `&quot;auto&quot;` will change nvim to insert mode IF the commit message is empty, otherwise leaving it in
  -- normal mode.
  disable_insert_on_commit = &quot;auto&quot;,
  -- When enabled, will watch the `.git/` directory for changes and refresh the status buffer in response to filesystem
  -- events.
  filewatcher = {
    interval = 1000,
    enabled = true,
  },
  -- &quot;ascii&quot;   is the graph the git CLI generates
  -- &quot;unicode&quot; is the graph like https://github.com/rbong/vim-flog
  -- &quot;kitty&quot;   is the graph like https://github.com/isakbm/gitgraph.nvim - use https://github.com/rbong/flog-symbols if you don&#39;t use Kitty
  graph_style = &quot;ascii&quot;,
  -- Show relative date by default. When set, use `strftime` to display dates
  commit_date_format = nil,
  log_date_format = nil,
  -- Show message with spinning animation when a git command is running.
  process_spinner = false,
  -- Used to generate URL&#39;s for branch popup action &quot;pull request&quot;, &quot;open commit&quot; and &quot;open tree&quot;
  git_services = {
    [&quot;github.com&quot;] = {
      pull_request = &quot;https://github.com/${owner}/${repository}/compare/${branch_name}?expand=1&quot;,
      commit = &quot;https://github.com/${owner}/${repository}/commit/${oid}&quot;,
      tree = &quot;https://${host}/${owner}/${repository}/tree/${branch_name}&quot;,
    },
    [&quot;bitbucket.org&quot;] = {
      pull_request = &quot;https://bitbucket.org/${owner}/${repository}/pull-requests/new?source=${branch_name}&amp;amp;t=1&quot;,
      commit = &quot;https://bitbucket.org/${owner}/${repository}/commits/${oid}&quot;,
      tree = &quot;https://bitbucket.org/${owner}/${repository}/branch/${branch_name}&quot;,
    },
    [&quot;gitlab.com&quot;] = {
      pull_request = &quot;https://gitlab.com/${owner}/${repository}/merge_requests/new?merge_request[source_branch]=${branch_name}&quot;,
      commit = &quot;https://gitlab.com/${owner}/${repository}/-/commit/${oid}&quot;,
      tree = &quot;https://gitlab.com/${owner}/${repository}/-/tree/${branch_name}?ref_type=heads&quot;,
    },
    [&quot;azure.com&quot;] = {
      pull_request = &quot;https://dev.azure.com/${owner}/_git/${repository}/pullrequestcreate?sourceRef=${branch_name}&amp;amp;targetRef=${target}&quot;,
      commit = &quot;&quot;,
      tree = &quot;&quot;,
    },
  },
  -- Allows a different telescope sorter. Defaults to &#39;fuzzy_with_index_bias&#39;. The example below will use the native fzf
  -- sorter instead. By default, this function returns `nil`.
  telescope_sorter = function()
    return require(&quot;telescope&quot;).extensions.fzf.native_fzf_sorter()
  end,
  -- Persist the values of switches/options within and across sessions
  remember_settings = true,
  -- Scope persisted settings on a per-project basis
  use_per_project_settings = true,
  -- Table of settings to never persist. Uses format &quot;Filetype--cli-value&quot;
  ignored_settings = {},
  -- Configure highlight group features
  highlight = {
    italic = true,
    bold = true,
    underline = true
  },
  -- Set to false if you want to be responsible for creating _ALL_ keymappings
  use_default_keymaps = true,
  -- Neogit refreshes its internal state after specific events, which can be expensive depending on the repository size.
  -- Disabling `auto_refresh` will make it so you have to manually refresh the status after you open it.
  auto_refresh = true,
  -- Value used for `--sort` option for `git branch` command
  -- By default, branches will be sorted by commit date descending
  -- Flag description: https://git-scm.com/docs/git-branch#Documentation/git-branch.txt---sortltkeygt
  -- Sorting keys: https://git-scm.com/docs/git-for-each-ref#_options
  sort_branches = &quot;-committerdate&quot;,
  -- Value passed to the `--&amp;lt;commit_order&amp;gt;-order` flag of the `git log` command
  -- Determines how commits are traversed and displayed in the log / graph:
  --   &quot;topo&quot;         topological order (parents always before children, good for graphs, slower on large repos)
  --   &quot;date&quot;         chronological order by commit date
  --   &quot;author-date&quot;  chronological order by author date
  --   &quot;&quot;             disable explicit ordering (fastest, recommended for very large repos)
  commit_order = &quot;topo&quot;
  -- Default for new branch name prompts
  initial_branch_name = &quot;&quot;,
  -- Change the default way of opening neogit
  kind = &quot;tab&quot;,
  -- Floating window style 
  floating = {
    relative = &quot;editor&quot;,
    width = 0.8,
    height = 0.7,
    style = &quot;minimal&quot;,
    border = &quot;rounded&quot;,
  },
  -- Disable line numbers
  disable_line_numbers = true,
  -- Disable relative line numbers
  disable_relative_line_numbers = true,
  -- The time after which an output console is shown for slow running commands
  console_timeout = 2000,
  -- Automatically show console if a command takes more than console_timeout milliseconds
  auto_show_console = true,
  -- Automatically close the console if the process exits with a 0 (success) status
  auto_close_console = true,
  notification_icon = &quot;󰊢&quot;,
  status = {
    show_head_commit_hash = true,
    recent_commit_count = 10,
    HEAD_padding = 10,
    HEAD_folded = false,
    mode_padding = 3,
    mode_text = {
      M = &quot;modified&quot;,
      N = &quot;new file&quot;,
      A = &quot;added&quot;,
      D = &quot;deleted&quot;,
      C = &quot;copied&quot;,
      U = &quot;updated&quot;,
      R = &quot;renamed&quot;,
      DD = &quot;unmerged&quot;,
      AU = &quot;unmerged&quot;,
      UD = &quot;unmerged&quot;,
      UA = &quot;unmerged&quot;,
      DU = &quot;unmerged&quot;,
      AA = &quot;unmerged&quot;,
      UU = &quot;unmerged&quot;,
      [&quot;?&quot;] = &quot;&quot;,
    },
  },
  commit_editor = {
    kind = &quot;tab&quot;,
    show_staged_diff = true,
    -- Accepted values:
    -- &quot;split&quot; to show the staged diff below the commit editor
    -- &quot;vsplit&quot; to show it to the right
    -- &quot;split_above&quot; Like :top split
    -- &quot;vsplit_left&quot; like :vsplit, but open to the left
    -- &quot;auto&quot; &quot;vsplit&quot; if window would have 80 cols, otherwise &quot;split&quot;
    staged_diff_split_kind = &quot;split&quot;,
    spell_check = true,
  },
  commit_select_view = {
    kind = &quot;tab&quot;,
  },
  commit_view = {
    kind = &quot;vsplit&quot;,
    verify_commit = vim.fn.executable(&quot;gpg&quot;) == 1, -- Can be set to true or false, otherwise we try to find the binary
  },
  log_view = {
    kind = &quot;tab&quot;,
  },
  rebase_editor = {
    kind = &quot;auto&quot;,
  },
  reflog_view = {
    kind = &quot;tab&quot;,
  },
  merge_editor = {
    kind = &quot;auto&quot;,
  },
  preview_buffer = {
    kind = &quot;floating_console&quot;,
  },
  popup = {
    kind = &quot;split&quot;,
  },
  stash = {
    kind = &quot;tab&quot;,
  },
  refs_view = {
    kind = &quot;tab&quot;,
  },
  signs = {
    -- { CLOSED, OPENED }
    hunk = { &quot;&quot;, &quot;&quot; },
    item = { &quot;&amp;gt;&quot;, &quot;v&quot; },
    section = { &quot;&amp;gt;&quot;, &quot;v&quot; },
  },
  -- Each Integration is auto-detected through plugin presence, however, it can be disabled by setting to `false`
  integrations = {
    -- If enabled, use telescope for menu selection rather than vim.ui.select.
    -- Allows multi-select and some things that vim.ui.select doesn&#39;t.
    telescope = nil,
    -- Neogit only provides inline diffs. If you want a more traditional way to look at diffs, you can use `diffview`.
    -- The diffview integration enables the diff popup.
    --
    -- Requires you to have `sindrets/diffview.nvim` installed.
    diffview = nil,

    -- If enabled, uses fzf-lua for menu selection. If the telescope integration
    -- is also selected then telescope is used instead
    -- Requires you to have `ibhagwan/fzf-lua` installed.
    fzf_lua = nil,

    -- If enabled, uses mini.pick for menu selection. If the telescope integration
    -- is also selected then telescope is used instead
    -- Requires you to have `echasnovski/mini.pick` installed.
    mini_pick = nil,

    -- If enabled, uses snacks.picker for menu selection. If the telescope integration
    -- is also selected then telescope is used instead
    -- Requires you to have `folke/snacks.nvim` installed.
    snacks = nil,
  },
  sections = {
    -- Reverting/Cherry Picking
    sequencer = {
      folded = false,
      hidden = false,
    },
    untracked = {
      folded = false,
      hidden = false,
    },
    unstaged = {
      folded = false,
      hidden = false,
    },
    staged = {
      folded = false,
      hidden = false,
    },
    stashes = {
      folded = true,
      hidden = false,
    },
    unpulled_upstream = {
      folded = true,
      hidden = false,
    },
    unmerged_upstream = {
      folded = false,
      hidden = false,
    },
    unpulled_pushRemote = {
      folded = true,
      hidden = false,
    },
    unmerged_pushRemote = {
      folded = false,
      hidden = false,
    },
    recent = {
      folded = true,
      hidden = false,
    },
    rebase = {
      folded = true,
      hidden = false,
    },
  },
  mappings = {
    commit_editor = {
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
      [&quot;&amp;lt;m-p&amp;gt;&quot;] = &quot;PrevMessage&quot;,
      [&quot;&amp;lt;m-n&amp;gt;&quot;] = &quot;NextMessage&quot;,
      [&quot;&amp;lt;m-r&amp;gt;&quot;] = &quot;ResetMessage&quot;,
    },
    commit_editor_I = {
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
    },
    rebase_editor = {
      [&quot;p&quot;] = &quot;Pick&quot;,
      [&quot;r&quot;] = &quot;Reword&quot;,
      [&quot;e&quot;] = &quot;Edit&quot;,
      [&quot;s&quot;] = &quot;Squash&quot;,
      [&quot;f&quot;] = &quot;Fixup&quot;,
      [&quot;x&quot;] = &quot;Execute&quot;,
      [&quot;d&quot;] = &quot;Drop&quot;,
      [&quot;b&quot;] = &quot;Break&quot;,
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;OpenCommit&quot;,
      [&quot;gk&quot;] = &quot;MoveUp&quot;,
      [&quot;gj&quot;] = &quot;MoveDown&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
      [&quot;[c&quot;] = &quot;OpenOrScrollUp&quot;,
      [&quot;]c&quot;] = &quot;OpenOrScrollDown&quot;,
    },
    rebase_editor_I = {
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-c&amp;gt;&quot;] = &quot;Submit&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&amp;lt;c-k&amp;gt;&quot;] = &quot;Abort&quot;,
    },
    finder = {
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;Select&quot;,
      [&quot;&amp;lt;c-c&amp;gt;&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;Close&quot;,
      [&quot;&amp;lt;c-n&amp;gt;&quot;] = &quot;Next&quot;,
      [&quot;&amp;lt;c-p&amp;gt;&quot;] = &quot;Previous&quot;,
      [&quot;&amp;lt;down&amp;gt;&quot;] = &quot;Next&quot;,
      [&quot;&amp;lt;up&amp;gt;&quot;] = &quot;Previous&quot;,
      [&quot;&amp;lt;tab&amp;gt;&quot;] = &quot;InsertCompletion&quot;,
      [&quot;&amp;lt;c-y&amp;gt;&quot;] = &quot;CopySelection&quot;,
      [&quot;&amp;lt;space&amp;gt;&quot;] = &quot;MultiselectToggleNext&quot;,
      [&quot;&amp;lt;s-space&amp;gt;&quot;] = &quot;MultiselectTogglePrevious&quot;,
      [&quot;&amp;lt;c-j&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;ScrollWheelDown&amp;gt;&quot;] = &quot;ScrollWheelDown&quot;,
      [&quot;&amp;lt;ScrollWheelUp&amp;gt;&quot;] = &quot;ScrollWheelUp&quot;,
      [&quot;&amp;lt;ScrollWheelLeft&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;ScrollWheelRight&amp;gt;&quot;] = &quot;NOP&quot;,
      [&quot;&amp;lt;LeftMouse&amp;gt;&quot;] = &quot;MouseClick&quot;,
      [&quot;&amp;lt;2-LeftMouse&amp;gt;&quot;] = &quot;NOP&quot;,
    },
    -- Setting any of these to `false` will disable the mapping.
    popup = {
      [&quot;?&quot;] = &quot;HelpPopup&quot;,
      [&quot;A&quot;] = &quot;CherryPickPopup&quot;,
      [&quot;d&quot;] = &quot;DiffPopup&quot;,
      [&quot;M&quot;] = &quot;RemotePopup&quot;,
      [&quot;P&quot;] = &quot;PushPopup&quot;,
      [&quot;X&quot;] = &quot;ResetPopup&quot;,
      [&quot;Z&quot;] = &quot;StashPopup&quot;,
      [&quot;i&quot;] = &quot;IgnorePopup&quot;,
      [&quot;t&quot;] = &quot;TagPopup&quot;,
      [&quot;b&quot;] = &quot;BranchPopup&quot;,
      [&quot;B&quot;] = &quot;BisectPopup&quot;,
      [&quot;w&quot;] = &quot;WorktreePopup&quot;,
      [&quot;c&quot;] = &quot;CommitPopup&quot;,
      [&quot;f&quot;] = &quot;FetchPopup&quot;,
      [&quot;l&quot;] = &quot;LogPopup&quot;,
      [&quot;m&quot;] = &quot;MergePopup&quot;,
      [&quot;p&quot;] = &quot;PullPopup&quot;,
      [&quot;r&quot;] = &quot;RebasePopup&quot;,
      [&quot;v&quot;] = &quot;RevertPopup&quot;,
    },
    status = {
      [&quot;j&quot;] = &quot;MoveDown&quot;,
      [&quot;k&quot;] = &quot;MoveUp&quot;,
      [&quot;o&quot;] = &quot;OpenTree&quot;,
      [&quot;q&quot;] = &quot;Close&quot;,
      [&quot;I&quot;] = &quot;InitRepo&quot;,
      [&quot;1&quot;] = &quot;Depth1&quot;,
      [&quot;2&quot;] = &quot;Depth2&quot;,
      [&quot;3&quot;] = &quot;Depth3&quot;,
      [&quot;4&quot;] = &quot;Depth4&quot;,
      [&quot;Q&quot;] = &quot;Command&quot;,
      [&quot;&amp;lt;tab&amp;gt;&quot;] = &quot;Toggle&quot;,
      [&quot;za&quot;] = &quot;Toggle&quot;,
      [&quot;zo&quot;] = &quot;OpenFold&quot;,
      [&quot;x&quot;] = &quot;Discard&quot;,
      [&quot;s&quot;] = &quot;Stage&quot;,
      [&quot;S&quot;] = &quot;StageUnstaged&quot;,
      [&quot;&amp;lt;c-s&amp;gt;&quot;] = &quot;StageAll&quot;,
      [&quot;u&quot;] = &quot;Unstage&quot;,
      [&quot;K&quot;] = &quot;Untrack&quot;,
      [&quot;U&quot;] = &quot;UnstageStaged&quot;,
      [&quot;y&quot;] = &quot;ShowRefs&quot;,
      [&quot;$&quot;] = &quot;CommandHistory&quot;,
      [&quot;Y&quot;] = &quot;YankSelected&quot;,
      [&quot;&amp;lt;c-r&amp;gt;&quot;] = &quot;RefreshBuffer&quot;,
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;GoToFile&quot;,
      [&quot;&amp;lt;s-cr&amp;gt;&quot;] = &quot;PeekFile&quot;,
      [&quot;&amp;lt;c-v&amp;gt;&quot;] = &quot;VSplitOpen&quot;,
      [&quot;&amp;lt;c-x&amp;gt;&quot;] = &quot;SplitOpen&quot;,
      [&quot;&amp;lt;c-t&amp;gt;&quot;] = &quot;TabOpen&quot;,
      [&quot;{&quot;] = &quot;GoToPreviousHunkHeader&quot;,
      [&quot;}&quot;] = &quot;GoToNextHunkHeader&quot;,
      [&quot;[c&quot;] = &quot;OpenOrScrollUp&quot;,
      [&quot;]c&quot;] = &quot;OpenOrScrollDown&quot;,
      [&quot;&amp;lt;c-k&amp;gt;&quot;] = &quot;PeekUp&quot;,
      [&quot;&amp;lt;c-j&amp;gt;&quot;] = &quot;PeekDown&quot;,
      [&quot;&amp;lt;c-n&amp;gt;&quot;] = &quot;NextSection&quot;,
      [&quot;&amp;lt;c-p&amp;gt;&quot;] = &quot;PreviousSection&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;You can either open Neogit by using the &lt;code&gt;Neogit&lt;/code&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:Neogit             &quot; Open the status buffer in a new tab
:Neogit cwd=&amp;lt;cwd&amp;gt;   &quot; Use a different repository path
:Neogit cwd=%:p:h   &quot; Uses the repository of the current file
:Neogit kind=&amp;lt;kind&amp;gt; &quot; Open specified popup directly
:Neogit commit      &quot; Open commit popup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or using the lua api:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local neogit = require(&#39;neogit&#39;)

-- open using defaults
neogit.open()

-- open a specific popup
neogit.open({ &quot;commit&quot; })

-- open as a split
neogit.open({ kind = &quot;split&quot; })

-- open with different project
neogit.open({ cwd = &quot;~&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;kind&lt;/code&gt; option can be one of the following values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tab&lt;/code&gt; (default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_above&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_above_all&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_below&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;split_below_all&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vsplit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;floating&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;auto&lt;/code&gt; (&lt;code&gt;vsplit&lt;/code&gt; if window would have 80 cols, otherwise &lt;code&gt;split&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Popups&lt;/h2&gt; 
&lt;p&gt;The following popup menus are available from all buffers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bisect&lt;/li&gt; 
 &lt;li&gt;Branch + Branch Config&lt;/li&gt; 
 &lt;li&gt;Cherry Pick&lt;/li&gt; 
 &lt;li&gt;Commit&lt;/li&gt; 
 &lt;li&gt;Diff&lt;/li&gt; 
 &lt;li&gt;Fetch&lt;/li&gt; 
 &lt;li&gt;Ignore&lt;/li&gt; 
 &lt;li&gt;Log&lt;/li&gt; 
 &lt;li&gt;Merge&lt;/li&gt; 
 &lt;li&gt;Pull&lt;/li&gt; 
 &lt;li&gt;Push&lt;/li&gt; 
 &lt;li&gt;Rebase&lt;/li&gt; 
 &lt;li&gt;Remote + Remote Config&lt;/li&gt; 
 &lt;li&gt;Reset&lt;/li&gt; 
 &lt;li&gt;Revert&lt;/li&gt; 
 &lt;li&gt;Stash&lt;/li&gt; 
 &lt;li&gt;Tag&lt;/li&gt; 
 &lt;li&gt;Worktree&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Many popups will use whatever is currently under the cursor or selected as input for an action. For example, to cherry-pick a range of commits from the log view, a linewise visual selection can be made, and using either &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;pick&lt;/code&gt; from the cherry-pick menu will use the selection.&lt;/p&gt; 
&lt;p&gt;This works for just about everything that has an object-ID in git, and if you find one that you think &lt;em&gt;should&lt;/em&gt; work but doesn&#39;t, open an issue :)&lt;/p&gt; 
&lt;h2&gt;Highlight Groups&lt;/h2&gt; 
&lt;p&gt;See the built-in documentation for a comprehensive list of highlight groups. If your theme doesn&#39;t style a particular group, we&#39;ll try our best to do a nice job.&lt;/p&gt; 
&lt;h2&gt;Events&lt;/h2&gt; 
&lt;p&gt;Neogit emits the following events:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Event&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Event Data&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitStatusRefreshed&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Status has been reloaded&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitCommitComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Commit has been created&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitPushComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Push has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitPullComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pull has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitFetchComplete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fetch has completed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchCreate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was created, starting from &lt;code&gt;base&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, base: string? }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchDelete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was deleted&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchCheckout&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was checked out&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was reset to a commit/branch&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, resetting_to: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitBranchRename&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Branch was renamed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch_name: string, new_name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitRebase&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A rebase finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commit: string, status: &quot;ok&quot;|&quot;conflict&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitReset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A branch was reset to a certain commit&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commit: string, mode: &quot;soft&quot;|&quot;mixed&quot;|&quot;hard&quot;|&quot;keep&quot;|&quot;index&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitTagCreate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A tag was placed on a certain commit&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ name: string, ref: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitTagDelete&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A tag was removed&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ name: string }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitCherryPick&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;One or more commits were cherry-picked&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ commits: string[] }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitMerge&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A merge finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ branch: string, args = string[], status: &quot;ok&quot;|&quot;conflict&quot; }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NeogitStash&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;A stash finished&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;{ success: boolean }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;Neogit follows semantic versioning.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/NeogitOrg/neogit/raw/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;a href=&quot;https://github.com/NeogitOrg/Neogit/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=NeogitOrg/Neogit&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kolja&quot;&gt;kolja&lt;/a&gt; for the Neogit Logo&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isakbm/gitgraph.nvim&quot;&gt;gitgraph.nvim&lt;/a&gt; for the &quot;kitty&quot; git graph renderer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rbong/vim-flog&quot;&gt;vim-flog&lt;/a&gt; for the &quot;unicode&quot; git graph renderer&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>3rd/image.nvim</title>
      <link>https://github.com/3rd/image.nvim</link>
      <description>&lt;p&gt;🖼️ Bringing images to Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🖼️ image.nvim&lt;/h1&gt; 
&lt;p&gt;This plugin adds image support to Neovim using &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/graphics-protocol/&quot;&gt;Kitty&#39;s Graphics Protocol&lt;/a&gt; or &lt;a href=&quot;https://github.com/jstkdng/ueberzugpp&quot;&gt;ueberzugpp&lt;/a&gt;. &lt;br /&gt; It works great with Kitty and Tmux, and it handles all the rendering complexity for you.&lt;/p&gt; 
&lt;p&gt;Join on Discord: &lt;a href=&quot;https://discord.gg/GTwbCxBNgz&quot;&gt;https://discord.gg/GTwbCxBNgz&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/0ae46acf-3240-446a-a458-7c7dfd03b9b7&quot;&gt;https://github.com/user-attachments/assets/0ae46acf-3240-446a-a458-7c7dfd03b9b7&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We provide:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A library for working with images&lt;/li&gt; 
 &lt;li&gt;A set of built-in integrations like Markdown and Neorg&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Try it out quickly by downloading &lt;a href=&quot;https://raw.githubusercontent.com/3rd/image.nvim/master/minimal-setup.lua&quot;&gt;minimal-setup.lua&lt;/a&gt; from the root of this repository and running &lt;code&gt;nvim --clean -c &quot;:luafile minimal-setup.lua&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;h3&gt;Quick start for the best experience&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/&quot;&gt;Kitty&lt;/a&gt; terminal&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://raw.githubusercontent.com/3rd/image.nvim/master/#imagemagick&quot;&gt;ImageMagick&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install the &lt;a href=&quot;https://raw.githubusercontent.com/3rd/image.nvim/master/#plugin-installation&quot;&gt;plugin&lt;/a&gt; and tweak the &lt;a href=&quot;https://raw.githubusercontent.com/3rd/image.nvim/master/#configuration&quot;&gt;configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Optionally configure &lt;a href=&quot;https://raw.githubusercontent.com/3rd/image.nvim/master/#tmux&quot;&gt;Tmux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Check the &lt;a href=&quot;https://raw.githubusercontent.com/3rd/image.nvim/master/#how-to-&quot;&gt;How to ...?&lt;/a&gt; section&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;h4&gt;Rendering backend&lt;/h4&gt; 
&lt;p&gt;We support three rendering backends, so first you need to set up one of these:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sw.kovidgoyal.net/kitty/&quot;&gt;Kitty&lt;/a&gt; &lt;strong&gt;(recommended)&lt;/strong&gt; &amp;gt;= 28.0 for the &lt;code&gt;kitty&lt;/code&gt; backend 
  &lt;ul&gt; 
   &lt;li&gt;Has the best performance, native clipping, caching, etc.&lt;/li&gt; 
   &lt;li&gt;You need to use Kitty or a terminal emulator that implements &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/graphics-protocol/&quot;&gt;Kitty&#39;s Graphics Protocol&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/wez/wezterm&quot;&gt;WezTerm&lt;/a&gt; implements it, but the performance is bad and it&#39;s not fully compliant. Most things work, but due to these issues it&#39;s not &lt;em&gt;officially supported&lt;/em&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://ghostty.org/&quot;&gt;Ghostty&lt;/a&gt; not that much information about this yet! SUBJECT TO CHANGE&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jstkdng/ueberzugpp&quot;&gt;Überzug++&lt;/a&gt; for the &lt;code&gt;ueberzug&lt;/code&gt; backend 
  &lt;ul&gt; 
   &lt;li&gt;Works with any terminal emulator.&lt;/li&gt; 
   &lt;li&gt;Has much lower performance.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Sixel-supporting terminals for the &lt;code&gt;sixel&lt;/code&gt; backend 
  &lt;ul&gt; 
   &lt;li&gt;Works with terminals that support the Sixel graphics protocol&lt;/li&gt; 
   &lt;li&gt;Compatible with many terminals including XTerm, WezTerm, foot, and others&lt;/li&gt; 
   &lt;li&gt;No additional dependencies beyond ImageMagick (which must have Sixel support)&lt;/li&gt; 
   &lt;li&gt;Pretty crap performance, although very usable with &lt;code&gt;only_render_image_at_cursor=true&lt;/code&gt; and &lt;code&gt;only_render_image_at_cursor_mode=&quot;popup&quot;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;ImageMagick&lt;/h4&gt; 
&lt;p&gt;We need to convert, scale, and crop images, and for that we use ImageMagick. &lt;br /&gt; There are two ways we can do this, and you need to pick and follow the setup for the one you prefer.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Via CLI wrapping (default) - using the &lt;code&gt;magick_cli&lt;/code&gt; processor 
  &lt;ul&gt; 
   &lt;li&gt;Shells out to ImageMagick&#39;s CLI utilities like &lt;code&gt;identify&lt;/code&gt; and &lt;code&gt;convert&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Slightly scary in some scenarios as we could potentially pass untrusted input to a shell. We try to keep things secure, but this would be the main selling point of using the bindings instead.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Via FFI bindings - using the &lt;code&gt;magick_rock&lt;/code&gt; processor and the &lt;a href=&quot;https://github.com/leafo/magick&quot;&gt;magick Lua rock&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Has slightly better performance.&lt;/li&gt; 
   &lt;li&gt;Requires a working LuaRocks setup and building the magick rock.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For the &lt;code&gt;magick_cli&lt;/code&gt; processor (default) you need a regular installation of ImageMagick. &lt;br /&gt; For the &lt;code&gt;magick_rock&lt;/code&gt; processor you need to install the development version of ImageMagick.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;NixOS&lt;/summary&gt; 
 &lt;p&gt;NixOS users need to install the &lt;code&gt;imagemagick&lt;/code&gt; package. For &lt;code&gt;magick_rock&lt;/code&gt; you need to install &lt;code&gt;luajitPackages.magick&lt;/code&gt; as well (&lt;a href=&quot;https://github.com/NixOS/nixpkgs/pull/243687&quot;&gt;thanks&lt;/a&gt; to &lt;a href=&quot;https://github.com/donovanglover&quot;&gt;@donovanglover&lt;/a&gt;).&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;details&gt; 
    &lt;summary&gt;Home Manager&lt;/summary&gt; 
    &lt;p&gt;&lt;em&gt;thanks to &lt;a href=&quot;https://github.com/wuliuqii&quot;&gt;@wuliuqii&lt;/a&gt; in &lt;a href=&quot;https://github.com/3rd/image.nvim/issues/13&quot;&gt;#13&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
    &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{ pkgs, ... }:

{
  programs.neovim = {
      enable = true;
      extraLuaPackages = ps: [ ps.magick ];
      extraPackages = [ pkgs.imagemagick ];
      # ... other config
  };
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/details&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;details&gt; 
    &lt;summary&gt;Vanilla NixOS&lt;/summary&gt; 
    &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;# https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/editors/neovim/utils.nix#L27
{ pkgs, neovimUtils, wrapNeovimUnstable, ... }:

let
config = pkgs.neovimUtils.makeNeovimConfig {
  extraLuaPackages = p: [ p.magick ];
  extraPackages = p: [ p.imagemagick ];
  # ... other config
};
in {
  nixpkgs.overlays = [
      (_: super: {
      neovim-custom = pkgs.wrapNeovimUnstable
          (super.neovim-unwrapped.overrideAttrs (oldAttrs: {
          buildInputs = oldAttrs.buildInputs ++ [ super.tree-sitter ];
          })) config;
      })
  ];
  environment.systemPackages = with pkgs; [ neovim-custom ];
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/details&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt;  
&lt;details&gt; 
 &lt;summary&gt;Arch&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo pacman -S imagemagick
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Ubuntu/Debian&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# for magick_cli
sudo apt install imagemagick
# for magick_rock
sudo apt install libmagickwand-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;macOS&lt;/summary&gt; 
 &lt;p&gt;The setup is the same for both &lt;code&gt;magick_rock&lt;/code&gt; and &lt;code&gt;magick_cli&lt;/code&gt;:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Homebrew: &lt;code&gt;brew install imagemagick&lt;/code&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;strong&gt;For some users&lt;/strong&gt; homebrew might install it into a weird location, so you have to add &lt;code&gt;$(brew --prefix)/lib&lt;/code&gt; to &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; by adding something like &lt;code&gt;export DYLD_FALLBACK_LIBRARY_PATH=&quot;$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH&quot;&lt;/code&gt; to your shell profile (probably &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;MacPorts: &lt;code&gt;sudo port install imagemagick&lt;/code&gt; 
   &lt;ul&gt; 
    &lt;li&gt;You must add &lt;code&gt;/opt/local/lib&lt;/code&gt; to &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt;, similar to homebrew.&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Fedora&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# for magick_cli
sudo dnf install ImageMagick
# for magick_rock
sudo dnf install ImageMagick-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Tmux&lt;/h4&gt; 
&lt;p&gt;This plugin will always have first class support for Tmux, to make it work make sure you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use Tmux &lt;a href=&quot;https://github.com/tmux/tmux/wiki/FAQ#:~:text=tmux%203.3%2C%20the-,allow%2Dpassthrough,-option%20must%20be&quot;&gt;&amp;gt;= 3.3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set -gq allow-passthrough on&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set -g visual-activity off&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Other&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/curl/curl&quot;&gt;cURL&lt;/a&gt; for remote image support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Extra: Installing Überzug++&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;NixOS&lt;/summary&gt; 
 &lt;p&gt;NixOS users need to install the &lt;code&gt;ueberzugpp&lt;/code&gt; package.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;details&gt; 
    &lt;summary&gt;Home Manager&lt;/summary&gt; 
    &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{ pkgs, ... }:

{
  programs.neovim = {
      enable = true;
      extraLuaPackages = ps: [ ps.magick ];
      extraPackages = [
        pkgs.ueberzugpp
        pkgs.imagemagick
      ];
      # ... other config
  };
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/details&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;details&gt; 
    &lt;summary&gt;Vanilla NixOS&lt;/summary&gt; 
    &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;# https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/editors/neovim/utils.nix#L27
{ pkgs, neovimUtils, wrapNeovimUnstable, ... }:

let
config = pkgs.neovimUtils.makeNeovimConfig {
  extraLuaPackages = p: [ p.magick ];
  extraPackages = p: [
    p.ueberzugpp
    p.imagemagick
  ];
  # ... other config
};
in {
  nixpkgs.overlays = [
      (_: super: {
      neovim-custom = pkgs.wrapNeovimUnstable
          (super.neovim-unwrapped.overrideAttrs (oldAttrs: {
          buildInputs = oldAttrs.buildInputs ++ [ super.tree-sitter ];
          })) config;
      })
  ];
  environment.systemPackages = with pkgs; [ neovim-custom ];
}
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/details&gt; &lt;/li&gt;
 &lt;/ul&gt;
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Pip&lt;/summary&gt;   
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo pip install ueberzugpp
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Arch&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo pacman -S ueberzugpp
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Ubuntu/Debian/Fedora&lt;/summary&gt; 
 &lt;p&gt;Follow instructions on &lt;a href=&quot;https://software.opensuse.org/download.html?project=home%3Ajustkidding&amp;amp;package=ueberzugpp&quot;&gt;this link&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;macOS&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Homebrew: &lt;code&gt;brew install jstkdng/programs/ueberzugpp&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;For some users&lt;/strong&gt; homebrew might install it into a weird location, so you have to add &lt;code&gt;$(brew --prefix)/lib&lt;/code&gt; to &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; by adding something like &lt;code&gt;export DYLD_FALLBACK_LIBRARY_PATH=&quot;$(brew -- prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH&quot;&lt;/code&gt; to your shell profile (probably &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;Setup the configuration 
   &lt;ul&gt; 
    &lt;li&gt;Put this in &lt;code&gt;~/.config/ueberzugpp/config.json&lt;/code&gt; (the same for MacOS): &lt;pre&gt;&lt;code&gt;{
    &quot;layer&quot;: {
        &quot;silent&quot;: true,
        &quot;use-escape-codes&quot;: false,
        &quot;no-stdin&quot;: false,
        &quot;_comment&quot;: &quot;Replace wayland in output with iterm2, if you want ssh support, x11 if you want to use it in xorg, sixel if you want to use sixels, chafa if you want to use the terminal colors.&quot;,
        &quot;_comment2&quot;: &quot;Kitty is not mentioned in the list above, because image.nvim has native support for it.&quot;,
        &quot;output&quot;: &quot;wayland&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;li&gt;You can remove the lines with &lt;code&gt;_comment&lt;/code&gt; and &lt;code&gt;_comment2&lt;/code&gt;, once you have tried every available option until one or more worked!&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt;
 &lt;/ul&gt;
&lt;/details&gt;   
&lt;h3&gt;Plugin installation&lt;/h3&gt; 
&lt;p&gt;After you&#39;ve set up the dependencies, install the &lt;code&gt;image.nvim&lt;/code&gt; plugin.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;For magick_cli using Lazy&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;3rd/image.nvim&quot;,
    build = false, -- so that it doesn&#39;t build the rock https://github.com/3rd/image.nvim/issues/91#issuecomment-2453430239
    opts = {
        processor = &quot;magick_cli&quot;,
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;For magick_rock using Lazy &amp;gt;= v11.*&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lazy&quot;).setup({
    rocks = {
        hererocks = true,  -- recommended if you do not have global installation of Lua 5.1.
    },
    spec = {
        {
            &quot;3rd/image.nvim&quot;,
            opts = {}
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;For magick_rock using Lazy &amp;lt; v11.x&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;It&#39;s recommended that you use &lt;a href=&quot;https://github.com/vhyrro/luarocks.nvim&quot;&gt;vhyrro/luarocks.nvim&lt;/a&gt; to install Lua rocks for Neovim while using lazy, but you can install them manually as well.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;With luarocks.nvim&lt;/strong&gt; &lt;br /&gt; Please read the luarocks.nvim README, it currently has an external dependency.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;vhyrro/luarocks.nvim&quot;,
    priority = 1001, -- this plugin needs to run before anything else
    opts = {
        rocks = { &quot;magick&quot; },
    },
},
{
    &quot;3rd/image.nvim&quot;,
    dependencies = { &quot;luarocks.nvim&quot; },
    opts = {}
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Without luarocks.nvim&lt;/strong&gt; &lt;br /&gt; You have to install the Lua rock manually.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Install &lt;a href=&quot;https://luarocks.org/&quot;&gt;LuaRocks&lt;/a&gt; on your system via your system package manager&lt;/li&gt; 
  &lt;li&gt;Run &lt;code&gt;luarocks --local --lua-version=5.1 install magick&lt;/code&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Example for configuring Neovim to load user-installed installed Lua rocks:
package.path = package.path .. &quot;;&quot; .. vim.fn.expand(&quot;$HOME&quot;) .. &quot;/.luarocks/share/lua/5.1/?/init.lua&quot;
package.path = package.path .. &quot;;&quot; .. vim.fn.expand(&quot;$HOME&quot;) .. &quot;/.luarocks/share/lua/5.1/?.lua&quot;

{
    &quot;3rd/image.nvim&quot;,
    opts = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;For magick_rock using Rocks.nvim&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;:Rocks install image.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;h3&gt;Default configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;image&quot;).setup({
  backend = &quot;kitty&quot;, -- or &quot;ueberzug&quot; or &quot;sixel&quot;
  processor = &quot;magick_cli&quot;, -- or &quot;magick_rock&quot;
  integrations = {
    markdown = {
      enabled = true,
      clear_in_insert_mode = false,
      download_remote_images = true,
      only_render_image_at_cursor = false,
      only_render_image_at_cursor_mode = &quot;popup&quot;, -- or &quot;inline&quot;
      floating_windows = false, -- if true, images will be rendered in floating markdown windows
      filetypes = { &quot;markdown&quot;, &quot;vimwiki&quot; }, -- markdown extensions (ie. quarto) can go here
    },
    neorg = {
      enabled = true,
      filetypes = { &quot;norg&quot; },
    },
    typst = {
      enabled = true,
      filetypes = { &quot;typst&quot; },
    },
    html = {
      enabled = false,
    },
    css = {
      enabled = false,
    },
  },
  max_width = nil,
  max_height = nil,
  max_width_window_percentage = nil,
  max_height_window_percentage = 50,
  scale_factor = 1.0,
  window_overlap_clear_enabled = false, -- toggles images when windows are overlapped
  window_overlap_clear_ft_ignore = { &quot;cmp_menu&quot;, &quot;cmp_docs&quot;, &quot;snacks_notif&quot;, &quot;scrollview&quot;, &quot;scrollview_sign&quot; },
  editor_only_render_when_focused = false, -- auto show/hide images when the editor gains/looses focus
  tmux_show_only_in_active_window = false, -- auto show/hide images in the correct Tmux window (needs visual-activity off)
  hijack_file_patterns = { &quot;*.png&quot;, &quot;*.jpg&quot;, &quot;*.jpeg&quot;, &quot;*.gif&quot;, &quot;*.webp&quot;, &quot;*.avif&quot; }, -- render image files as images when opened
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Backends&lt;/h3&gt; 
&lt;p&gt;All the backends support rendering inside Tmux.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;kitty&lt;/code&gt; - best in class, works great and is very snappy&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ueberzug&lt;/code&gt; - backed by &lt;a href=&quot;https://github.com/jstkdng/ueberzugpp&quot;&gt;ueberzugpp&lt;/a&gt;, supports any terminal, but has lower performance 
  &lt;ul&gt; 
   &lt;li&gt;Supports multiple images thanks to &lt;a href=&quot;https://github.com/jstkdng/ueberzugpp/issues/74&quot;&gt;@jstkdng&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sixel&lt;/code&gt; - uses the Sixel graphics protocol, widely supported by many terminals 
  &lt;ul&gt; 
   &lt;li&gt;Works with XTerm, WezTerm, foot, and other Sixel-compatible terminals&lt;/li&gt; 
   &lt;li&gt;ImageMagick is required for Sixel encoding&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; - uses &lt;a href=&quot;https://github.com/MDeiml/tree-sitter-markdown&quot;&gt;tree-sitter-markdown&lt;/a&gt; and supports any Markdown-based grammars (Quarto, VimWiki Markdown)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neorg&lt;/code&gt; - uses &lt;a href=&quot;https://github.com/nvim-neorg/tree-sitter-norg&quot;&gt;tree-sitter-norg&lt;/a&gt; (also check &lt;a href=&quot;https://github.com/nvim-neorg/neorg/issues/971&quot;&gt;https://github.com/nvim-neorg/neorg/issues/971&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;typst&lt;/code&gt; - thanks to @etiennecollin (&lt;a href=&quot;https://github.com/3rd/image.nvim/pull/223&quot;&gt;https://github.com/3rd/image.nvim/pull/223&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;html&lt;/code&gt; and &lt;code&gt;css&lt;/code&gt; - thanks to @zuloo (&lt;a href=&quot;https://github.com/3rd/image.nvim/pull/163&quot;&gt;https://github.com/3rd/image.nvim/pull/163&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can configure where images are searched for on a per-integration basis by passing a function to &lt;code&gt;resolve_image_path&lt;/code&gt; as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;image&#39;).setup({
  integrations = {
    markdown = {
      resolve_image_path = function(document_path, image_path, fallback)
        -- document_path is the path to the file that contains the image
        -- image_path is the potentially relative path to the image. for
        -- markdown it&#39;s `![](this text)`

        -- you can call the fallback function to get the default behavior
        return fallback(document_path, image_path)
      end,
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://github.com/3rd/image.nvim/issues/190#issuecomment-2378156235&quot;&gt;https://github.com/3rd/image.nvim/issues/190#issuecomment-2378156235&lt;/a&gt; for how to configure this for Obsidian.&lt;/p&gt; 
&lt;h2&gt;How to ...?&lt;/h2&gt; 
&lt;h4&gt;General&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;Enable / disable / get plugin status&lt;/summary&gt; 
 &lt;p&gt;You can enable/disable the plugin and check its status on demand.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;image&quot;).enable() -- enable the plugin
require(&quot;image&quot;).disable() -- disable the plugin
print(require(&quot;image&quot;).is_enabled()) -- bool
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Integrations&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;Render images only when under the cursor&lt;/summary&gt; 
 &lt;p&gt;This is a built-in feature that you can configure per-integration using the following options:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;image&quot;).setup({
  integrations = {
    markdown = {
        only_render_image_at_cursor = true, -- defaults to false
        only_render_image_at_cursor_mode = &quot;popup&quot;, -- &quot;popup&quot; or &quot;inline&quot;, defaults to &quot;popup&quot;
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;Check &lt;a href=&quot;https://raw.githubusercontent.com/3rd/image.nvim/master/lua/types.lua&quot;&gt;types.lua&lt;/a&gt; for a better overview of how everything is modeled.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local api = require(&quot;image&quot;)

-- from a file (absolute path)
local image = api.from_file(&quot;/path/to/image.png&quot;, {
  id = &quot;my_image_id&quot;, -- optional, defaults to a random string
  window = 1000, -- optional, binds image to a window and its bounds
  buffer = 1000, -- optional, binds image to a buffer (paired with window binding)
  with_virtual_padding = true, -- optional, pads vertically with extmarks, defaults to false

  -- optional, binds image to an extmark which it follows. Forced to be true when
  -- `with_virtual_padding` is true. defaults to false.
  inline = true,

  -- geometry (optional)
  x = 1,
  y = 1,
  width = 10,
  height = 10
})

-- from a URL
api.from_url(&quot;https://gist.ro/s/remote.png&quot;, {
    -- all the same options from above
}, function(img)
    -- do stuff with the image
end
)

image:render() -- render image
image:render(geometry) -- update image geometry and render it
image:clear()

image:move(x, y) -- move image
image:brightness(value) -- change brightness
image:saturation(value) -- change saturation
image:hue(value) -- change hue

-- create a report, also available as :ImageReport
require(&quot;image&quot;).create_report()
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Thank you&lt;/h3&gt; 
&lt;p&gt;Deep thanks to the &lt;a href=&quot;https://github.com/3rd/image.nvim/graphs/contributors&quot;&gt;awesome people&lt;/a&gt; who have gifted their time and energy to this project, and to those who work on Neovim and the dependencies without which this would not be possible.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/benlubas&quot;&gt;@benlubas&lt;/a&gt; for their countless amazing contributions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/edluffy&quot;&gt;@edluffy&lt;/a&gt; for &lt;a href=&quot;https://github.com/edluffy/hologram.nvim&quot;&gt;hologram.nvim&lt;/a&gt; - of which I borrowed a lot of code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vhyrro&quot;&gt;@vhyrro&lt;/a&gt; for their great ideas and &lt;a href=&quot;https://github.com/vhyrro/hologram.nvim&quot;&gt;hologram.nvim fork&lt;/a&gt; changes&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kovidgoyal&quot;&gt;@kovidgoyal&lt;/a&gt; for &lt;a href=&quot;https://github.com/kovidgoyal/kitty&quot;&gt;Kitty&lt;/a&gt; - the program I spend most of my time in&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jstkdng&quot;&gt;@jstkdng&lt;/a&gt; for &lt;a href=&quot;https://github.com/jstkdng/ueberzugpp&quot;&gt;ueberzugpp&lt;/a&gt; - the revived version of ueberzug&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://repobeats.axiom.co/api/embed/fac3ac11abb0ea10e07af68d2ccdc20a1263325d.svg?sanitize=true&quot; alt=&quot;Analytics&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;The story behind&lt;/h3&gt; 
&lt;p&gt;Some years ago, I took a trip to Emacs land for a few months to learn Elisp and also research what Org-mode is, how it works, and look for features of interest for my workflow.&lt;/p&gt; 
&lt;p&gt;I already had my own document syntax, albeit a very simple one, hacked together with Vimscript and a lot of Regex, and I was looking for ideas to improve it and build features on top of it.&lt;/p&gt; 
&lt;p&gt;I kept working on my &lt;a href=&quot;https://github.com/3rd/syslang&quot;&gt;syntax&lt;/a&gt; over the years, rewrote it many times, and today it&#39;s a proper Tree-sitter grammar, that I use for all my needs, from second braining to managing my tasks and time. It&#39;s helped me control my ADHD and be productive long before I was diagnosed, and it&#39;s still helping me be so much better than I&#39;d be without it today.&lt;/p&gt; 
&lt;p&gt;One thing Emacs and Org-mode had that I liked was the ability to embed images in the document. Of course, we don&#39;t &lt;em&gt;&quot;need&quot;&lt;/em&gt; it, but... I really wanted to have images in my documents.&lt;/p&gt; 
&lt;p&gt;About 3 years ago, I made my &lt;a href=&quot;https://www.reddit.com/r/neovim/comments/ieh7l4/im_building_an_image_plugin_and_need_some_help/&quot;&gt;first attempt&lt;/a&gt; at solving this problem but didn&#39;t get far. If you have similar interests, you might have seen the &lt;a href=&quot;https://www.youtube.com/watch?v=cnt9mPOjrLg&quot;&gt;vimage.nvim demo video&lt;/a&gt; on YouTube.&lt;/p&gt; 
&lt;p&gt;It was using &lt;a href=&quot;https://github.com/seebye/ueberzug&quot;&gt;ueberzug&lt;/a&gt;, which is now dead. It was buggy and didn&#39;t handle things like window-relative positioning, attaching images to windows and buffers, folds, etc.&lt;/p&gt; 
&lt;p&gt;Kitty&#39;s graphics protocol was a thing, but it didn&#39;t work with Tmux, which I&#39;ll probably use forever or replace it with something of my own.&lt;/p&gt; 
&lt;p&gt;Now, things have changed, and I&#39;m happy to announce that rendering images using &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/graphics-protocol.html&quot;&gt;Kitty&#39;s graphics protocol&lt;/a&gt; from Neovim inside Tmux is working, and it&#39;s working pretty well!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>neovim/nvim-lspconfig</title>
      <link>https://github.com/neovim/nvim-lspconfig</link>
      <description>&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; 
&lt;p&gt;nvim-lspconfig is a collection of LSP server configurations for the &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;Nvim LSP client&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;View &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;all configs&lt;/a&gt;, or run &lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim.&lt;/p&gt; 
&lt;h2&gt;Important ⚠️&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;lspconfig&#39;)&lt;/code&gt; (the legacy &quot;framework&quot; of nvim-lspconfig) &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/issues/3693&quot;&gt;is &lt;strong&gt;deprecated&lt;/strong&gt;&lt;/a&gt; in favor of &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;vim.lsp.config&lt;/a&gt; (Nvim 0.11+). 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lua/lspconfig.lua&quot;&gt;lspconfig.lua&lt;/a&gt; &lt;em&gt;module&lt;/em&gt; will be dropped. Calls to &lt;code&gt;require(&#39;lspconfig&#39;)&lt;/code&gt; will show a warning, which will later become an error.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;nvim-lspconfig itself is &lt;strong&gt;NOT deprecated&lt;/strong&gt;. It provides server-specific configs. 
  &lt;ul&gt; 
   &lt;li&gt;The configs live in the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;lsp/&lt;/a&gt; directory. &lt;code&gt;vim.lsp.config&lt;/code&gt; automatically finds them and merges them with any local &lt;code&gt;lsp/*.lua&lt;/code&gt; configs defined by you or a plugin.&lt;/li&gt; 
   &lt;li&gt;The old configs in &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lua/lspconfig/&quot;&gt;lua/lspconfig/&lt;/a&gt; are &lt;strong&gt;deprecated&lt;/strong&gt; and will be removed.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Migration instructions&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Upgrade to Nvim 0.11+&lt;/li&gt; 
 &lt;li&gt;(Optional) Use &lt;code&gt;vim.lsp.config(&#39;…&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.….setup{}&lt;/code&gt;) to &lt;em&gt;customize&lt;/em&gt; or &lt;em&gt;define&lt;/em&gt; a config.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;vim.lsp.enable(&#39;…&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.….setup{}&lt;/code&gt;) to &lt;em&gt;enable&lt;/em&gt; a config, so that it activates for its &lt;code&gt;filetypes&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;These configs are &lt;strong&gt;best-effort and supported by the community (you).&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&quot;&gt;contributions&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, not the issue tracker.&lt;/li&gt; 
 &lt;li&gt;If you found a bug in Nvim LSP (&lt;code&gt;:help lsp&lt;/code&gt;), &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; report it here. Only configuration data lives here.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/neovim/nvim-lspconfig&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Nvim 0.11.3+. 
  &lt;ul&gt; 
   &lt;li&gt;Support for Nvim 0.10 &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/issues/3693&quot;&gt;will be removed&lt;/a&gt;. Upgrade Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install nvim-lspconfig using Vim&#39;s &quot;packages&quot; feature: &lt;pre&gt;&lt;code&gt;git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or with Nvim 0.12 (nightly), you can use the builtin &lt;code&gt;vim.pack&lt;/code&gt; plugin manager: &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add{
  { src = &#39;https://github.com/neovim/nvim-lspconfig&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or use a 3rd-party plugin manager.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install a language server, e.g. &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md#pyright&quot;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g pyright
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable its config in your init.lua (&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-quickstart&quot;&gt;:help lsp-quickstart&lt;/a&gt;). &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.enable(&#39;pyright&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Ensure your project/workspace contains a root marker as specified in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Open a code file in Nvim. LSP will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;code&gt;:help lspconfig-all&lt;/code&gt; for the full list of server-specific details. For servers not on your &lt;code&gt;$PATH&lt;/code&gt; (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually set the &lt;code&gt;cmd&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;jdtls&#39;, {
  cmd = { &#39;/path/to/jdtls&#39; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Nvim sets default options and mappings when LSP is active in a buffer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-defaults&quot;&gt;:help lsp-defaults&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#diagnostic-defaults&quot;&gt;:help diagnostic-defaults&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To customize, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-attach&quot;&gt;:help lsp-attach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-buf&quot;&gt;:help lsp-buf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Extra settings can be specified for each LSP server. With Nvim 0.11+ you can &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;extend a config&lt;/a&gt; by calling &lt;code&gt;vim.lsp.config(&#39;…&#39;, {…})&lt;/code&gt;. (You can also copy any config directly from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt; and put it in a local &lt;code&gt;lsp/&lt;/code&gt; directory in your &#39;runtimepath&#39;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;rust_analyzer&#39;, {
  -- Server-specific settings. See `:help lsp-quickstart`
  settings = {
    [&#39;rust-analyzer&#39;] = {},
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Create a new config&lt;/h2&gt; 
&lt;p&gt;To create a new config you can either (1) use &lt;code&gt;vim.lsp.config&lt;/code&gt; or (2) create a file &lt;code&gt;lsp/&amp;lt;config-name&amp;gt;.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;.&lt;/p&gt; 
&lt;h3&gt;Example: define a new config as code&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.config(&#39;foo&#39;, {cmd={&#39;true&#39;}})&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. 😎&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Example: define a new config as a file&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a file &lt;code&gt;lsp/foo.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;. &lt;pre&gt;&lt;code&gt;:exe &#39;edit&#39; stdpath(&#39;config&#39;) .. &#39;/lsp/foo.lua&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add this code to the file (or copy any of the examples from the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;lsp/ directory&lt;/a&gt; in this repo): &lt;pre&gt;&lt;code&gt;return {
  cmd = { &#39;true&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Save the file (with &lt;code&gt;++p&lt;/code&gt; to ensure its parent directory is created). &lt;pre&gt;&lt;code&gt;:write ++p
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable the config. &lt;pre&gt;&lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. 🌈&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Start with &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to troubleshoot. The most common reasons a language server does not start or attach are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in the config from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is a name instead of an absolute path, ensure it is on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Missing filetype plugins. Some languages are not detected by Nvim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set filetype?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Not triggering root detection. Some language servers require a &quot;workspace&quot;, which is found by looking for an ancestor directory that contains a &quot;root marker&quot;. The most common root marker is &lt;code&gt;.git/&lt;/code&gt;, but each config defines other &quot;root marker&quot; names. Root markers/directories are listed in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can also explicitly set a root instead of relying on automatic detection by enabling &lt;code&gt;&#39;exrc&#39;&lt;/code&gt; and adding an &lt;code&gt;.nvim.lua&lt;/code&gt; at the desired root dir with the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;&amp;lt;client name&amp;gt;&#39;, {
  root_dir = vim.fn.fnamemodify(debug.getinfo(1, &#39;S&#39;).source:sub(2), &#39;:p:h&#39;),
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that prior to nvim 0.12 &lt;code&gt;exrc&lt;/code&gt; file is executed only if it&#39;s inside of a cwd where you start &lt;code&gt;nvim&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bug reports&lt;/h2&gt; 
&lt;p&gt;If you found a bug with LSP functionality, &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;. Add this to your init.lua to enable verbose logging:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.set_log_level(&quot;debug&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attempt to run the language server, then run &lt;code&gt;:LspLog&lt;/code&gt; to open the log. Most of the time, the reason for failure is present in the logs.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; (alias to &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;) shows the status of active and configured language servers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStop [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Stops the given server. Defaults to stopping all servers active on the current buffer. To force stop add &lt;code&gt;++force&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspRestart [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Restarts the given client, and attempts to reattach to all previously attached buffers. Defaults to restarting all active servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;If a language server is missing from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;configs.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create a new file at &lt;code&gt;lsp/&amp;lt;server_name&amp;gt;.lua&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Copy an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tree/master/lsp&quot;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lsp/texlab.lua&quot;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; or in the &lt;a href=&quot;https://app.element.io/#/room/#neovim:matrix.org&quot;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Release process&lt;/h2&gt; 
&lt;p&gt;To publish a release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create and push a new &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tags&quot;&gt;tag&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;After pushing the tag, a &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/.github/workflows/release.yml&quot;&gt;GitHub action&lt;/a&gt; will automatically package the plugin and publish the release to LuaRocks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright Neovim contributors. All rights reserved.&lt;/p&gt; 
&lt;p&gt;nvim-lspconfig is licensed under the terms of the Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
