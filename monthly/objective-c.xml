<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Objective-C Monthly Trending</title>
    <description>Monthly Trending of Objective-C in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:55:27 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>SDWebImage/SDWebImage</title>
      <link>https://github.com/SDWebImage/SDWebImage</link>
      <description>&lt;p&gt;Asynchronous image downloader with cache support as a UIImageView category&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/SDWebImage_logo.png&quot; title=&quot;SDWebImage logo&quot; float=&quot;left&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/actions/workflows/CI.yml&quot;&gt;&lt;img src=&quot;https://github.com/SDWebImage/SDWebImage/actions/workflows/CI.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoadocs.org/docsets/SDWebImage/&quot;&gt;&lt;img src=&quot;http://img.shields.io/cocoapods/v/SDWebImage.svg?style=flat&quot; alt=&quot;Pod Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoadocs.org/docsets/SDWebImage/&quot;&gt;&lt;img src=&quot;http://img.shields.io/cocoapods/p/SDWebImage.svg?style=flat&quot; alt=&quot;Pod Platform&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;&gt;&lt;img src=&quot;http://img.shields.io/cocoapods/l/SDWebImage.svg?style=flat&quot; alt=&quot;Pod License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;SwiftPM compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/documentation/xcode/creating_a_mac_version_of_your_ipad_app/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Catalyst-compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;Mac Catalyst compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/SDWebImage/SDWebImage&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/SDWebImage/SDWebImage/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This library provides an async image downloader with cache support. For convenience, we added categories for UI elements like &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;MKAnnotationView&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡NOTE: &lt;code&gt;SD&lt;/code&gt; is the prefix for &lt;strong&gt;Simple Design&lt;/strong&gt; (which is the team name in Daily Motion company from the author Olivier Poitrey)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Categories for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;MKAnnotationView&lt;/code&gt; adding web image and cache management&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; An asynchronous image downloader&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; An asynchronous memory + disk image caching with automatic cache expiration handling&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; A background image decompression to avoid frame rate drop&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#progressive-animation&quot;&gt;Progressive image loading&lt;/a&gt; (including animated image, like GIF showing in Web browser)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#thumbnail-decoding-550&quot;&gt;Thumbnail image decoding&lt;/a&gt; to save CPU &amp;amp;&amp;amp; Memory for large images&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-coder-420&quot;&gt;Extendable image coder&lt;/a&gt; to support massive image format, like WebP&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&quot;&gt;Full-stack solution for animated images&lt;/a&gt; which keep a balance between CPU &amp;amp;&amp;amp; Memory&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#transformer-50&quot;&gt;Customizable and composable transformations&lt;/a&gt; can be applied to the images right after download&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-cache-50&quot;&gt;Customizable and multiple caches system&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#custom-loader-50&quot;&gt;Customizable and multiple loaders system&lt;/a&gt; to expand the capabilities, like &lt;a href=&quot;https://github.com/SDWebImage/SDWebImagePhotosPlugin&quot;&gt;Photos Library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/How-to-use#use-view-indicator-50&quot;&gt;Image loading indicators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#image-transition-430&quot;&gt;Image loading transition animation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; A guarantee that the same URL won&#39;t be downloaded several times&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; A guarantee that bogus URLs won&#39;t be retried again and again&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; A guarantee that main thread will never be blocked&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Modern Objective-C and better Swift support&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Performances!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;For Apple visionOS&lt;/h2&gt; 
&lt;p&gt;From 5.19+, SDWebImage supports visionOS on all Package Managers (include CocoaPods/Carthage/SPM). Upgrade the related tools if you&#39;re facing issues.&lt;/p&gt; 
&lt;p&gt;For 5.18+, SDWebImage can be compiled for visionOS platform. However, it&#39;s still in beta and may contains issues unlike the stable iOS UIKit support. Welcome to have a try and &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/issues&quot;&gt;report issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To build on visionOS, currently we only support the standard Xcode integration.&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;Installation with Swift Package Manager&lt;/code&gt; and &lt;code&gt;Manual Installation Guide&lt;/code&gt; below.&lt;/p&gt; 
&lt;h2&gt;Supported Image Formats&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Image formats supported by Apple system (JPEG, PNG, TIFF, BMP, ...), including &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#gif-coder&quot;&gt;GIF&lt;/a&gt;/&lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#apng-coder&quot;&gt;APNG&lt;/a&gt; animated image&lt;/li&gt; 
 &lt;li&gt;HEIC format from iOS 11/macOS 10.13, including animated HEIC from iOS 13/macOS 10.15 via &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#heic-coder&quot;&gt;SDWebImageHEICCoder&lt;/a&gt;. For lower firmware, use coder plugin &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageHEIFCoder&quot;&gt;SDWebImageHEIFCoder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WebP format from iOS 14/macOS 11.0 via &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#awebp-coder&quot;&gt;SDWebImageAWebPCoder&lt;/a&gt;. For lower firmware, use coder plugin &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageWebPCoder&quot;&gt;SDWebImageWebPCoder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;JPEG-XL format from iOS 17/macOS 14.0 built-in. For lower firmware, use coder plugin &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageJPEGXLCoder&quot;&gt;SDWebImageJPEGXLCoder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support extendable coder plugins for new image formats like BPG, AVIF. And vector format like PDF, SVG. See all the list in &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Coder-Plugin-List&quot;&gt;Image coder plugin List&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡NOTE: For new user&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;SDWebImage use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Coder-Plugin-List&quot;&gt;Coder Plugin System&lt;/a&gt; to support both Apple&#39;s built-in and external image format. For static image we always use Apple&#39;s built-in as fallback, but not for animated image. Currently (updated to 5.19.x version) we only register traditional animated format like GIF/APNG by default, without the modern format like AWebP/HEICS/AVIF, even on the latest firmware.&lt;/p&gt; 
&lt;p&gt;If you want these animated image format support, simply register by yourself with one-line code, see more in &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#awebp-coder&quot;&gt;WebP Coder&lt;/a&gt; and &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#heic-coder&quot;&gt;HEIC Coder&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;In future we will change this behavior by always registering all Apple&#39;s built-in animated image format, to make it easy for new user to integrate.&lt;/p&gt; 
&lt;h2&gt;Additional modules and Ecosystem&lt;/h2&gt; 
&lt;p&gt;In order to keep SDWebImage focused and limited to the core features, but also allow extensibility and custom behaviors, during the 5.0 refactoring we focused on modularizing the library. As such, we have moved/built new modules to &lt;a href=&quot;https://github.com/SDWebImage&quot;&gt;SDWebImage org&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;SwiftUI&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/xcode/swiftui/&quot;&gt;SwiftUI&lt;/a&gt; is an innovative UI framework written in Swift to build user interfaces across all Apple platforms.&lt;/p&gt; 
&lt;p&gt;We support SwiftUI by building a brand new framework called &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageSwiftUI&quot;&gt;SDWebImageSwiftUI&lt;/a&gt;, which is built on top of SDWebImage core functions (caching, loading and animation).&lt;/p&gt; 
&lt;p&gt;The new framework introduce two View structs &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt; for SwiftUI world, &lt;code&gt;ImageIndicator&lt;/code&gt; modifier for any View, &lt;code&gt;ImageManager&lt;/code&gt; observable object for data source. Supports iOS 13+/macOS 10.15+/tvOS 13+/watchOS 6+ and Swift 5.1. Have a nice try and provide feedback!&lt;/p&gt; 
&lt;h4&gt;Coders for additional image formats&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageWebPCoder&quot;&gt;SDWebImageWebPCoder&lt;/a&gt; - coder for WebP format. iOS 9+/macOS 10.11+. Based on &lt;a href=&quot;https://chromium.googlesource.com/webm/libwebp&quot;&gt;libwebp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageHEIFCoder&quot;&gt;SDWebImageHEIFCoder&lt;/a&gt; - coder for HEIF format, iOS 9+/macOS 10.11+ support. Based on &lt;a href=&quot;https://github.com/strukturag/libheif&quot;&gt;libheif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageBPGCoder&quot;&gt;SDWebImageBPGCoder&lt;/a&gt; - coder for BPG format. Based on &lt;a href=&quot;https://github.com/mirrorer/libbpg&quot;&gt;libbpg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageFLIFCoder&quot;&gt;SDWebImageFLIFCoder&lt;/a&gt; - coder for FLIF format. Based on &lt;a href=&quot;https://github.com/FLIF-hub/FLIF&quot;&gt;libflif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageAVIFCoder&quot;&gt;SDWebImageAVIFCoder&lt;/a&gt; - coder for AVIF (AV1-based) format. Based on &lt;a href=&quot;https://github.com/AOMediaCodec/libavif&quot;&gt;libavif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImagePDFCoder&quot;&gt;SDWebImagePDFCoder&lt;/a&gt; - coder for PDF vector format. Using built-in frameworks&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageSVGCoder&quot;&gt;SDWebImageSVGCoder&lt;/a&gt; - coder for SVG vector format. Using built-in frameworks&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageSVGNativeCoder&quot;&gt;SDWebImageSVGNativeCoder&lt;/a&gt; - coder for SVG-Native vector format. Based on &lt;a href=&quot;https://github.com/adobe/svg-native-viewer&quot;&gt;svg-native&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageLottieCoder&quot;&gt;SDWebImageLottieCoder&lt;/a&gt; - coder for Lottie animation format. Based on &lt;a href=&quot;https://github.com/Samsung/rlottie&quot;&gt;rlottie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageJPEGXLCoder&quot;&gt;SDWebImageJPEGXLCoder&lt;/a&gt; - coder for JPEG-XL format. iOS 9+/macOS 10.11+. Based on &lt;a href=&quot;https://github.com/libjxl/libjxl&quot;&gt;libjxl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;and more from community!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Custom Caches&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageYYPlugin&quot;&gt;SDWebImageYYPlugin&lt;/a&gt; - plugin to support caching images with &lt;a href=&quot;https://github.com/ibireme/YYCache&quot;&gt;YYCache&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImagePINPlugin&quot;&gt;SDWebImagePINPlugin&lt;/a&gt; - plugin to support caching images with &lt;a href=&quot;https://github.com/pinterest/PINCache&quot;&gt;PINCache&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Custom Loaders&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImagePhotosPlugin&quot;&gt;SDWebImagePhotosPlugin&lt;/a&gt; - plugin to support loading images from Photos (using &lt;code&gt;Photos.framework&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageLinkPlugin&quot;&gt;SDWebImageLinkPlugin&lt;/a&gt; - plugin to support loading images from rich link url, as well as &lt;code&gt;LPLinkView&lt;/code&gt; (using &lt;code&gt;LinkPresentation.framework&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Integration with 3rd party libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageLottiePlugin&quot;&gt;SDWebImageLottiePlugin&lt;/a&gt; - plugin to support &lt;a href=&quot;https://github.com/airbnb/lottie-ios&quot;&gt;Lottie-iOS&lt;/a&gt;, vector animation rending with remote JSON files&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageSVGKitPlugin&quot;&gt;SDWebImageSVGKitPlugin&lt;/a&gt; - plugin to support &lt;a href=&quot;https://github.com/SVGKit/SVGKit&quot;&gt;SVGKit&lt;/a&gt;, SVG rendering using Core Animation, iOS 9+/macOS 10.11+ support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageFLPlugin&quot;&gt;SDWebImageFLPlugin&lt;/a&gt; - plugin to support &lt;a href=&quot;https://github.com/Flipboard/FLAnimatedImage&quot;&gt;FLAnimatedImage&lt;/a&gt; as the engine for animated GIFs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageYYPlugin&quot;&gt;SDWebImageYYPlugin&lt;/a&gt; - plugin to integrate &lt;a href=&quot;https://github.com/ibireme/YYImage&quot;&gt;YYImage&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/ibireme/YYCache&quot;&gt;YYCache&lt;/a&gt; for image rendering &amp;amp; caching&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Community driven popular libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/firebase/FirebaseUI-iOS&quot;&gt;FirebaseUI&lt;/a&gt; - Firebase Storage binding for query images, based on SDWebImage loader system&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DylanVann/react-native-fast-image&quot;&gt;react-native-fast-image&lt;/a&gt; - React Native fast image component, based on SDWebImage Animated Image solution&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpenFlutter/flutter_image_compress&quot;&gt;flutter_image_compress&lt;/a&gt; - Flutter compresses image plugin, based on SDWebImage WebP coder plugin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Make our lives easier&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/libwebp-Xcode&quot;&gt;libwebp-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&quot;https://chromium.googlesource.com/webm/libwebp&quot;&gt;libwebp&lt;/a&gt; + an Xcode project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/libheif-Xcode&quot;&gt;libheif-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&quot;https://github.com/strukturag/libheif&quot;&gt;libheif&lt;/a&gt; + an Xcode project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SDWebImage/libavif-Xcode&quot;&gt;libavif-Xcode&lt;/a&gt; - A wrapper for &lt;a href=&quot;https://github.com/AOMediaCodec/libavif&quot;&gt;libavif&lt;/a&gt; + an Xcode project.&lt;/li&gt; 
 &lt;li&gt;and more third-party C/C++ image codec libraries with CocoaPods/Carthage/SwiftPM support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use those directly, or create similar components of your own, by using the customizable architecture of SDWebImage.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 9.0 or later&lt;/li&gt; 
 &lt;li&gt;tvOS 9.0 or later&lt;/li&gt; 
 &lt;li&gt;watchOS 2.0 or later&lt;/li&gt; 
 &lt;li&gt;macOS 10.11 or later (10.15 for Catalyst)&lt;/li&gt; 
 &lt;li&gt;visionOS 1.0 or later&lt;/li&gt; 
 &lt;li&gt;Xcode 15.0 or later&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Backwards compatibility&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;For iOS 8, macOS 10.10 or Xcode &amp;lt; 11, use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases/tag/5.9.5&quot;&gt;any 5.x version up to 5.9.5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For iOS 7, macOS 10.9 or Xcode &amp;lt; 8, use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases/tag/4.4.6&quot;&gt;any 4.x version up to 4.4.6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For macOS 10.8, use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases/tag/4.3.0&quot;&gt;any 4.x version up to 4.3.0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For iOS 5 and 6, use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases/tag/3.7.6&quot;&gt;any 3.x version up to 3.7.6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For iOS &amp;lt; 5.0, please use the last &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/tree/2.0-compat&quot;&gt;2.0 version&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read this Readme doc&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage#how-to-use&quot;&gt;How to use section&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://sdwebimage.github.io/&quot;&gt;Latest Documentation&lt;/a&gt; and &lt;a href=&quot;http://cocoadocs.org/docsets/SDWebImage/&quot;&gt;CocoaDocs for old version&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Try the example by downloading the project from Github or even easier using CocoaPods try &lt;code&gt;pod try SDWebImage&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Installation-Guide&quot;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/SDWebImage-5.0-Migration-guide.md&quot;&gt;SDWebImage 5.0 Migration Guide&lt;/a&gt; to get an idea of the changes from 4.x to 5.x&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/SDWebImage-4.0-Migration-guide.md&quot;&gt;SDWebImage 4.0 Migration Guide&lt;/a&gt; to get an idea of the changes from 3.x to 4.x&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Common-Problems&quot;&gt;Common Problems&lt;/a&gt; to find the solution for common problems&lt;/li&gt; 
 &lt;li&gt;Go to the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki&quot;&gt;Wiki Page&lt;/a&gt; for more information such as &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage&quot;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses It&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find out &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Who-Uses-SDWebImage&quot;&gt;who uses SDWebImage&lt;/a&gt; and add your app to the list.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/sdwebimage&quot;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;sdwebimage&#39;)&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/sdwebimage&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;need IRC channel&lt;/strong&gt;, use &lt;a href=&quot;https://gitter.im/SDWebImage/community&quot;&gt;Gitter&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/.github/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For &lt;strong&gt;development contribution guide&lt;/strong&gt;, read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/How-to-Contribute&quot;&gt;How-To-Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For &lt;strong&gt;understanding code architecture&lt;/strong&gt;, read the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/5.6-Code-Architecture-Analysis&quot;&gt;Code Architecture Analysis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How To Use&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-C&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;#import &amp;lt;SDWebImage/SDWebImage.h&amp;gt;
...
[imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;http://www.domain.com/path/to/image.jpg&quot;]
             placeholderImage:[UIImage imageNamed:@&quot;placeholder.png&quot;]];
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SDWebImage

imageView.sd_setImage(with: URL(string: &quot;http://www.domain.com/path/to/image.jpg&quot;), placeholderImage: UIImage(named: &quot;placeholder.png&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;For details about how to use the library and clear examples, see &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Docs/HowToUse.md&quot;&gt;The detailed How to use&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Animated Images (GIF) support&lt;/h2&gt; 
&lt;p&gt;In 5.0, we introduced a brand new mechanism for supporting animated images. This includes animated image loading, rendering, decoding, and also supports customizations (for advanced users).&lt;/p&gt; 
&lt;p&gt;This animated image solution is available for &lt;code&gt;iOS&lt;/code&gt;/&lt;code&gt;tvOS&lt;/code&gt;/&lt;code&gt;macOS&lt;/code&gt;. The &lt;code&gt;SDAnimatedImage&lt;/code&gt; is subclass of &lt;code&gt;UIImage/NSImage&lt;/code&gt;, and &lt;code&gt;SDAnimatedImageView&lt;/code&gt; is subclass of &lt;code&gt;UIImageView/NSImageView&lt;/code&gt;, to make them compatible with the common frameworks APIs.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;SDAnimatedImageView&lt;/code&gt; supports the familiar image loading category methods, works like drop-in replacement for &lt;code&gt;UIImageView/NSImageView&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Don&#39;t have &lt;code&gt;UIView&lt;/code&gt; (like &lt;code&gt;WatchKit&lt;/code&gt; or &lt;code&gt;CALayer&lt;/code&gt;)? you can still use &lt;code&gt;SDAnimatedPlayer&lt;/code&gt; the player engine for advanced playback and rendering.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&quot;&gt;Animated Image&lt;/a&gt; for more detailed information.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-C&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;SDAnimatedImageView *imageView = [SDAnimatedImageView new];
SDAnimatedImage *animatedImage = [SDAnimatedImage imageNamed:@&quot;image.gif&quot;];
imageView.image = animatedImage;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let imageView = SDAnimatedImageView()
let animatedImage = SDAnimatedImage(named: &quot;image.gif&quot;)
imageView.image = animatedImage
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;FLAnimatedImage integration has its own dedicated repo&lt;/h4&gt; 
&lt;p&gt;In order to clean up things and make our core project do less things, we decided that the &lt;code&gt;FLAnimatedImage&lt;/code&gt; integration does not belong here. From 5.0, this will still be available, but under a dedicated repo &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageFLPlugin&quot;&gt;SDWebImageFLPlugin&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are 5 ways to use SDWebImage in your project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;using CocoaPods&lt;/li&gt; 
 &lt;li&gt;using Carthage&lt;/li&gt; 
 &lt;li&gt;using Swift Package Manager&lt;/li&gt; 
 &lt;li&gt;download binary XCFramework&lt;/li&gt; 
 &lt;li&gt;manual install (build frameworks or embed Xcode Project)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation with CocoaPods&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries in your projects. See the &lt;a href=&quot;http://cocoapods.org/#get_started&quot;&gt;Get Started&lt;/a&gt; section for more details.&lt;/p&gt; 
&lt;h4&gt;Podfile&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;
pod &#39;SDWebImage&#39;, &#39;~&amp;gt; 5.0&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Swift and static framework&lt;/h5&gt; 
&lt;p&gt;Swift project previously had to use &lt;code&gt;use_frameworks!&lt;/code&gt; to make all Pods into dynamic framework to let CocoaPods work.&lt;/p&gt; 
&lt;p&gt;However, starting with &lt;code&gt;CocoaPods 1.5.0+&lt;/code&gt; (with &lt;code&gt;Xcode 9+&lt;/code&gt;), which supports to build both Objective-C &amp;amp;&amp;amp; Swift code into static framework. You can use modular headers to use SDWebImage as static framework, without the need of &lt;code&gt;use_frameworks!&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;
# Uncomment the next line when you want all Pods as static framework
# use_modular_headers!
pod &#39;SDWebImage&#39;, :modular_headers =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more on &lt;a href=&quot;http://blog.cocoapods.org/CocoaPods-1.5.0/&quot;&gt;CocoaPods 1.5.0 — Swift Static Libraries&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If not, you still need to add &lt;code&gt;use_frameworks!&lt;/code&gt; to use SDWebImage as dynamic framework:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;platform :ios, &#39;8.0&#39;
use_frameworks!
pod &#39;SDWebImage&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Subspecs&lt;/h4&gt; 
&lt;p&gt;There are 2 subspecs available now: &lt;code&gt;Core&lt;/code&gt; and &lt;code&gt;MapKit&lt;/code&gt; (this means you can install only some of the SDWebImage modules. By default, you get just &lt;code&gt;Core&lt;/code&gt;, so if you need &lt;code&gt;MapKit&lt;/code&gt;, you need to specify it).&lt;/p&gt; 
&lt;p&gt;Podfile example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod &#39;SDWebImage/MapKit&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installation with Carthage&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is a lightweight dependency manager for Swift and Objective-C. It leverages CocoaTouch modules and is less invasive than CocoaPods.&lt;/p&gt; 
&lt;p&gt;To install with carthage, follow the instruction on &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like: SDWebImage, SDWebImageMapKit or both.&lt;/p&gt; 
&lt;p&gt;Make the following entry in your Cartfile: &lt;code&gt;github &quot;SDWebImage/SDWebImage&quot;&lt;/code&gt; Then run &lt;code&gt;carthage update&lt;/code&gt; If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&quot;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&quot;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡NOTE: At this time, Carthage does not provide a way to build only specific repository subcomponents (or equivalent of CocoaPods&#39;s subspecs). All components and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;SDWebImageMapKit&lt;/code&gt;, feel free to delete that framework from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;💡NOTE: &lt;a href=&quot;https://developer.apple.com/support/third-party-SDK-requirements/&quot;&gt;Apple requires SDWebImage contains signatures&lt;/a&gt;. So, by default the &lt;code&gt;carthage build&lt;/code&gt; binary framework does not do codesign, this will cause validation error. You can sign yourself with the Apple Developer Program identity, or using the binary framework:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;binary &quot;https://github.com/SDWebImage/SDWebImage/raw/master/SDWebImage.json&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installation with Swift Package Manager (Xcode 11+)&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; (SwiftPM) is a tool for managing the distribution of Swift code as well as C-family dependency. From Xcode 11, SwiftPM got natively integrated with Xcode.&lt;/p&gt; 
&lt;p&gt;SDWebImage support SwiftPM from version 5.1.0. To use SwiftPM, you should use Xcode 11 to open your project. Click &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Swift Packages&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Package Dependency&lt;/code&gt;, enter &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage.git&quot;&gt;SDWebImage repo&#39;s URL&lt;/a&gt;. Or you can login Xcode with your GitHub account and just type &lt;code&gt;SDWebImage&lt;/code&gt; to search.&lt;/p&gt; 
&lt;p&gt;After select the package, you can choose the dependency type (tagged version, branch or commit). Then Xcode will setup all the stuff for you.&lt;/p&gt; 
&lt;p&gt;If you&#39;re a framework author and use SDWebImage as a dependency, update your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let package = Package(
    // 5.1.0 ..&amp;lt; 6.0.0
    dependencies: [
        .package(url: &quot;https://github.com/SDWebImage/SDWebImage.git&quot;, from: &quot;5.1.0&quot;)
    ],
    // ...
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Download binary XCFramework&lt;/h3&gt; 
&lt;p&gt;From 5.19.2, SDWebImage provide the canonical official binary XCFramework on &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/releases&quot;&gt;GitHub release pages&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download XCFramework&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can choose to download &lt;code&gt;SDWebImage-dynamic.xcframework.zip&lt;/code&gt; for dynamic linked one, or &lt;code&gt;SDWebImage-static.xcframework.zip&lt;/code&gt; for static-linked one.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Integrate to Xcode Project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Drag the unzipped &lt;code&gt;.xcframework&lt;/code&gt; into your Xcode Project&#39;s Framework tab.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Verify signature of binary XCFramework&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;From Xcode 15 Apple will verify the signature of binary XCFramework, to avoid supply chain attack.&lt;/p&gt; 
&lt;p&gt;The fingerprint currently should be &lt;code&gt;FC 3B 10 13 86 34 4C 50 DB 70 2A 9A D1 01 6F B5 1A 3E CC 8B 9D A9 B7 AE 47 A0 48 D4 D0 63 39 83&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The certificate is stored in the repo &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Certificate/SDWebImage%20Signing%20Certificate.cer&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The public key is stored in the repo &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/Certificate/SDWebImage%20Signing%20Certificate.pem&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See more: &lt;a href=&quot;https://developer.apple.com/documentation/Xcode/verifying-the-origin-of-your-xcframeworks&quot;&gt;Verifying the origin of your XCFrameworks&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Manual Installation Guide&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check your command line Xcode version&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;sudo xcode-select -s /path/to/Xcode.app
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export DEVELOPER_DIR=/path/to/Xcode.app/Contents/Developer
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the script to build frameworks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;./Scripts/build-frameworks.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the script to merge XCFramework&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;./Scripts/create-xcframework.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use your own certificate to sign XCFramework&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// https://developer.apple.com/support/third-party-SDK-requirements/
codesign --timestamp -v --sign &quot;your own certificate&quot; SDWebImage.xcframework
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more on wiki: &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/Installation-Guide#manual-installation-guide&quot;&gt;Manual install Guide&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Import headers in your source files&lt;/h3&gt; 
&lt;p&gt;In the source files where you need to use the library, import the umbrella header file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;#import &amp;lt;SDWebImage/SDWebImage.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s also recommend to use the module import syntax, available for CocoaPods(enable &lt;code&gt;modular_headers&lt;/code&gt;)/Carthage/SwiftPM.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objecitivec&quot;&gt;@import SDWebImage;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build Project&lt;/h3&gt; 
&lt;p&gt;At this point your workspace should build without error. If you are having problem, post to the Issue and the community can help you solve it.&lt;/p&gt; 
&lt;h2&gt;Data Collection Practices&lt;/h2&gt; 
&lt;p&gt;From Xcode 15, we provide the new &lt;code&gt;PrivacyInfo.xcprivacy&lt;/code&gt; file for privacy details, see &lt;a href=&quot;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests?language=objc&quot;&gt;Describing data use in privacy manifests&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can exports the privacy report after archive your App by integrate SDWebImage via SwiftPM/XCFramework or CocoaPods (&lt;code&gt;use_frameworks&lt;/code&gt; set to true).&lt;/p&gt; 
&lt;p&gt;For old version or if you&#39;re using static ar archive, as required by the &lt;a href=&quot;https://developer.apple.com/app-store/app-privacy-details/&quot;&gt;App privacy details on the App Store&lt;/a&gt;, here&#39;s SDWebImage&#39;s list of &lt;a href=&quot;https://sdwebimage.github.io/DataCollection/index.html&quot;&gt;Data Collection Practices&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rs&quot;&gt;Olivier Poitrey&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Collaborators&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mythodeia&quot;&gt;Konstantinos K.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bpoplauschi&quot;&gt;Bogdan Poplauschi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyline75489&quot;&gt;Chester Liu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dreampiggy&quot;&gt;DreamPiggy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zhongwuzw&quot;&gt;Wu Zhong&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Thank you to all the people who have already contributed to SDWebImage.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/SDWebImage/contributors.svg?width=890&quot; alt=&quot;Contributors&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;All source code is licensed under the &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/raw/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;To learn about SDWebImage&#39;s architecture design for contribution, read &lt;a href=&quot;https://github.com/SDWebImage/SDWebImage/wiki/5.6-Code-Architecture-Analysis&quot;&gt;The Core of SDWebImage v5.6 Architecture&lt;/a&gt;. Thanks @looseyi for the post and translation.&lt;/p&gt; 
&lt;h4&gt;High Level Diagram&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageHighLevelDiagram.jpeg&quot; title=&quot;SDWebImage high level diagram&quot; /&gt; &lt;/p&gt; 
&lt;h4&gt;Overall Class Diagram&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageClassDiagram.png&quot; title=&quot;SDWebImage overall class diagram&quot; /&gt; &lt;/p&gt; 
&lt;h4&gt;Top Level API Diagram&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageTopLevelClassDiagram.png&quot; title=&quot;SDWebImage top level API diagram&quot; /&gt; &lt;/p&gt; 
&lt;h4&gt;Main Sequence Diagram&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageSequenceDiagram.png&quot; title=&quot;SDWebImage sequence diagram&quot; /&gt; &lt;/p&gt; 
&lt;h4&gt;More detailed diagrams&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageManagerClassDiagram.png&quot;&gt;Manager API Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageCodersClassDiagram.png&quot;&gt;Coders API Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageLoaderClassDiagram.png&quot;&gt;Loader API Diagram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImage/master/Docs/Diagrams/SDWebImageCacheClassDiagram.png&quot;&gt;Cache API Diagram&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tisfeng/Easydict</title>
      <link>https://github.com/tisfeng/Easydict</link>
      <description>&lt;p&gt;一个简洁优雅的词典翻译 macOS App。开箱即用，支持离线 OCR 识别，支持有道词典，🍎 苹果系统词典，🍎 苹果系统翻译，OpenAI，Gemini，DeepL，Google，Bing，腾讯，百度，阿里，小牛，彩云和火山翻译。A concise and elegant Dictionary and Translator macOS App for looking up words and translating text.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/icon_512x512@2x.png&quot; height=&quot;256&quot; /&gt; &lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;Easydict&lt;/h1&gt; 
&lt;h4 align=&quot;center&quot;&gt; Easy to look up words or translate text&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/tisfeng/easydict/raw/main/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/tisfeng/easydict&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/tisfeng/Easydict/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/tisfeng/easydict/total.svg?sanitize=true&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/badge/-macOS-black?&amp;amp;logo=apple&amp;amp;logoColor=white&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/-macOS-black?&amp;amp;logo=apple&amp;amp;logoColor=white&quot; alt=&quot;macOS&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/README.md&quot;&gt;中文&lt;/a&gt; &amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; 
 &lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/README_EN.md&quot;&gt;English&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Easydict&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;Easydict&lt;/code&gt; 是一个简洁易用的词典翻译 macOS App，能够轻松优雅地查找单词或翻译文本。Easydict 开箱即用，能自动识别输入文本语言，支持输入翻译，划词翻译和 OCR 截图翻译，可同时查询多个翻译服务结果，目前支持 &lt;a href=&quot;https://www.youdao.com/&quot;&gt;有道词典&lt;/a&gt;，&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/docs/How-to-use-macOS-system-dictionary-in-Easydict-zh.md&quot;&gt;&lt;strong&gt;🍎 苹果系统词典&lt;/strong&gt;&lt;/a&gt;，&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/docs/How-to-use-macOS-system-translation-in-Easydict-zh.md&quot;&gt;🍎 &lt;strong&gt;苹果系统翻译&lt;/strong&gt;&lt;/a&gt;，&lt;a href=&quot;https://chat.openai.com/&quot;&gt;OpenAI&lt;/a&gt;，&lt;a href=&quot;https://gemini.google.com/&quot;&gt;Gemini&lt;/a&gt;，&lt;a href=&quot;https://www.deepseek.com/&quot;&gt;DeepSeek&lt;/a&gt;，&lt;a href=&quot;https://www.deepl.com/translator&quot;&gt;DeepL&lt;/a&gt;，&lt;a href=&quot;https://translate.google.com&quot;&gt;Google&lt;/a&gt;，&lt;a href=&quot;https://fanyi.qq.com/&quot;&gt;腾讯&lt;/a&gt;，&lt;a href=&quot;https://www.bing.com/translator&quot;&gt;Bing&lt;/a&gt;，&lt;a href=&quot;https://fanyi.baidu.com/&quot;&gt;百度&lt;/a&gt;，&lt;a href=&quot;https://niutrans.com/&quot;&gt;小牛翻译&lt;/a&gt;，&lt;a href=&quot;https://fanyi.caiyunapp.com/&quot;&gt;彩云小译&lt;/a&gt;，&lt;a href=&quot;https://translate.alibaba.com/&quot;&gt;阿里翻译&lt;/a&gt; 和 &lt;a href=&quot;https://translate.volcengine.com/translate&quot;&gt;火山翻译&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/Log-1688378715.png&quot; alt=&quot;Log&quot; /&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/iShot_2023-05-28_16.32.18-1685262784.png&quot; /&gt; &lt;/td&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/iShot_2023-05-28_16.32.26-1685262803.png&quot; /&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/immerse-1686534718.gif&quot; alt=&quot;immerse-1686534718.gif&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;功能&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 开箱即用，便捷查询单词或翻译文本。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 自动识别输入语言，自动查询目标偏好语言。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 自动划词查询，划词后自动显示查询图标，鼠标悬浮即可查询。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 支持为不同窗口配置不同的服务。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 支持智能查询模式。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 支持系统 OCR 截图翻译，静默截图 OCR。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 支持系统 TTS，支持 Bing，Google，有道和百度在线 TTS 服务。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 支持 &lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/docs/How-to-use-macOS-system-dictionary-in-Easydict-zh.md&quot;&gt;🍎 苹果系统词典&lt;/a&gt;，支持第三方词典，可手动导入 mdict 词典。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 支持 macOS 系统翻译。详情请看 &lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/docs/How-to-use-macOS-system-translation-in-Easydict-zh.md&quot;&gt;如何在 Easydict 中使用 🍎 macOS 系统翻译？&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 支持有道词典，OpenAI，Gemini，DeepSeek，DeepL，Google，Bing，腾讯，百度，小牛，彩云，阿里和火山翻译。&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; 支持 48 种语言。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;如果觉得这个应用还不错，给个 &lt;a href=&quot;https://github.com/tisfeng/Easydict&quot;&gt;Star&lt;/a&gt; ⭐️ 支持一下吧 (^-^)&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Swift 重构计划&lt;/h2&gt; 
&lt;p&gt;我们计划用 Swift 重构项目，如果你对这个开源项目感兴趣，熟悉 Swift/SwiftUI，欢迎加入我们的开发组，一起完善这个项目 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/194&quot;&gt;#194&lt;/a&gt;。&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;目录&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#easydict&quot;&gt;Easydict&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%8A%9F%E8%83%BD&quot;&gt;功能&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#swift-%E9%87%8D%E6%9E%84%E8%AE%A1%E5%88%92&quot;&gt;Swift 重构计划&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E7%9B%AE%E5%BD%95&quot;&gt;目录&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%AE%89%E8%A3%85&quot;&gt;安装&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#1-%E6%89%8B%E5%8A%A8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85&quot;&gt;1. 手动下载安装&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#2-homebrew-%E5%AE%89%E8%A3%85&quot;&gt;2. Homebrew 安装&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%BC%80%E5%8F%91%E8%80%85%E6%9E%84%E5%BB%BA&quot;&gt;开发者构建&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83&quot;&gt;构建环境&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E4%BD%BF%E7%94%A8&quot;&gt;使用&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E9%BC%A0%E6%A0%87%E5%88%92%E8%AF%8D&quot;&gt;鼠标划词&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%85%B3%E4%BA%8E%E6%9D%83%E9%99%90&quot;&gt;关于权限&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#ocr&quot;&gt;OCR&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E8%AF%AD%E7%A7%8D%E8%AF%86%E5%88%AB&quot;&gt;语种识别&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#tts-%E6%9C%8D%E5%8A%A1&quot;&gt;TTS 服务&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E6%9F%A5%E8%AF%A2%E6%9C%8D%E5%8A%A1&quot;&gt;查询服务&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%90%84%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E8%A8%80&quot;&gt;各个服务支持的语言&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#-%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F%E8%AF%8D%E5%85%B8&quot;&gt;🍎 苹果系统词典&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#openai-%E7%BF%BB%E8%AF%91&quot;&gt;OpenAI 翻译&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#openai-%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%BC%8F&quot;&gt;OpenAI 查询模式&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%86%85%E7%BD%AE-ai-%E7%BF%BB%E8%AF%91&quot;&gt;内置 AI 翻译&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#gemini-%E7%BF%BB%E8%AF%91&quot;&gt;Gemini 翻译&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#deepl-%E7%BF%BB%E8%AF%91&quot;&gt;DeepL 翻译&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E8%87%AA%E5%AE%9A%E4%B9%89-deepl-%E6%8E%A5%E5%8F%A3%E5%9C%B0%E5%9D%80&quot;&gt;自定义 DeepL 接口地址&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E9%85%8D%E7%BD%AE-api-%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F&quot;&gt;配置 API 调用方式&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E8%85%BE%E8%AE%AF%E7%BF%BB%E8%AF%91&quot;&gt;腾讯翻译&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#bing-%E7%BF%BB%E8%AF%91&quot;&gt;Bing 翻译&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%B0%8F%E7%89%9B%E7%BF%BB%E8%AF%91&quot;&gt;小牛翻译&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%BD%A9%E4%BA%91%E5%B0%8F%E8%AF%91&quot;&gt;彩云小译&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E9%98%BF%E9%87%8C%E7%BF%BB%E8%AF%91&quot;&gt;阿里翻译&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E6%99%BA%E8%83%BD%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%BC%8F&quot;&gt;智能查询模式&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%BA%94%E7%94%A8%E5%86%85%E6%9F%A5%E8%AF%A2&quot;&gt;应用内查询&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#url-scheme&quot;&gt;URL Scheme&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E9%85%8D%E5%90%88-popclip-%E4%BD%BF%E7%94%A8&quot;&gt;配合 PopClip 使用&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E8%AE%BE%E7%BD%AE&quot;&gt;设置&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E9%80%9A%E7%94%A8&quot;&gt;通用&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E6%9C%8D%E5%8A%A1&quot;&gt;服务&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%BA%94%E7%94%A8%E5%86%85%E5%BF%AB%E6%8D%B7%E9%94%AE&quot;&gt;应用内快捷键&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#tips&quot;&gt;Tips&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E7%B1%BB%E4%BC%BC%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE&quot;&gt;类似开源项目&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%88%9D%E8%A1%B7&quot;&gt;初衷&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97&quot;&gt;贡献指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#star-history&quot;&gt;Star History&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E8%87%B4%E8%B0%A2&quot;&gt;致谢&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E5%A3%B0%E6%98%8E&quot;&gt;声明&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E8%B5%9E%E5%8A%A9%E6%94%AF%E6%8C%81&quot;&gt;赞助支持&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/#%E8%B5%9E%E5%8A%A9%E5%88%97%E8%A1%A8&quot;&gt;赞助列表&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;安装&lt;/h2&gt; 
&lt;p&gt;你可以使用下面两种方式之一安装。&lt;/p&gt; 
&lt;p&gt;Easydict 最新版本支持系统 macOS 13.0+，如果系统版本为 macOS 11.0+，请使用 &lt;a href=&quot;https://github.com/tisfeng/Easydict/releases/tag/2.7.2&quot;&gt;2.7.2&lt;/a&gt;。&lt;/p&gt; 
&lt;h3&gt;1. 手动下载安装&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/tisfeng/Easydict/releases&quot;&gt;下载&lt;/a&gt; 最新版本的 Easydict。&lt;/p&gt; 
&lt;h3&gt;2. Homebrew 安装&lt;/h3&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/1#issuecomment-1445286763&quot;&gt;BingoKingo&lt;/a&gt; 提供的最初安装版本。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install --cask easydict
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;开发者构建&lt;/h3&gt; 
&lt;p&gt;如果你是一名开发者，或者对这个项目感兴趣，也可以尝试手动构建运行，整个过程非常简单，甚至不需懂 macOS 开发知识。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; 构建步骤 &lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;ol&gt; 
  &lt;li&gt;下载这个 Repo，然后使用 &lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;Xcode&lt;/a&gt; 打开 &lt;code&gt;Easydict.xcworkspace&lt;/code&gt; 文件（⚠️⚠️⚠️ 注意不是 &lt;code&gt;Easydict.xcodeproj&lt;/code&gt; ⚠️⚠️⚠️）。&lt;/li&gt; 
  &lt;li&gt;使用 &lt;code&gt;Cmd + R&lt;/code&gt; 编译运行即可。&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20231212125308372-1702356789.png&quot; alt=&quot;image-20231212125308372&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;以下是可选步骤，仅面向开发协作者。&lt;/p&gt; 
 &lt;p&gt;如果经常需要调试一些权限相关的功能，例如取词或 OCR，可选择使用自己的苹果账号运行，请修改 &lt;code&gt;Easydict-debug.xcconfig&lt;/code&gt; 文件中的 &lt;code&gt;DEVELOPMENT_TEAM&lt;/code&gt; 为你自己的 Apple Team ID（你可以登录苹果开发者网站找到它），&lt;code&gt;CODE_SIGN_IDENTITY&lt;/code&gt; 改为 Apple Development。&lt;/p&gt; 
 &lt;p&gt;注意不要提交 &lt;code&gt;Easydict-debug.xcconfig&lt;/code&gt; 文件，你可以使用下面 git 命令忽略这个文件的本地修改&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git update-index --skip-worktree Easydict-debug.xcconfig
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;构建环境&lt;/h4&gt; 
 &lt;p&gt;Xcode 13+, macOS Big Sur 11.3+。为避免不必要的问题，建议使用最新的 Xcode 和 macOS 版本 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/79&quot;&gt;https://github.com/tisfeng/Easydict/issues/79&lt;/a&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] 由于最新代码使用了 String Catalog 功能，因此需要 Xcode 15+ 才能编译。 如果你的 Xcode 版本较低，请使用 &lt;a href=&quot;https://github.com/tisfeng/Easydict/tree/xcode-14&quot;&gt;xcode-14&lt;/a&gt; 分支，注意这是一个固定版本分支，不受维护。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;如果运行遇到下面错误，请尝试升级 CocoaPods 到最新版本，然后执行 &lt;code&gt;pod install&lt;/code&gt;。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/12012&quot;&gt;DT_TOOLCHAIN_DIR cannot be used to evaluate LD_RUNPATH_SEARCH_PATHS, use TOOLCHAIN_DIR instead&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;使用&lt;/h2&gt; 
&lt;p&gt;Easydict 启动之后，除了应用主界面（默认隐藏），还会有一个菜单图标，点击菜单选项即可触发相应的功能，如下所示：&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/xb77fI-1684688321.png&quot; width=&quot;50%&quot; /&gt; 
&lt;/div&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;方式&lt;/th&gt; 
   &lt;th&gt;描述&lt;/th&gt; 
   &lt;th&gt;预览&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;鼠标划词翻译&lt;/td&gt; 
   &lt;td&gt;划词后自动显示查询图标，鼠标悬浮即可查询&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/iShot_2023-01-20_11.01.35-1674183779.gif&quot; alt=&quot;iShot_2023-01-20_11.01.35-1674183779&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;快捷键划词翻译&lt;/td&gt; 
   &lt;td&gt;选中需要翻译的文本之后，按下划词翻译快捷键即可（默认 &lt;code&gt;⌥ + D&lt;/code&gt;）&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/iShot_2023-01-20_11.24.37-1674185125.gif&quot; alt=&quot;iShot_2023-01-20_11.24.37-1674185125&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;截图翻译&lt;/td&gt; 
   &lt;td&gt;按下截图翻译快捷键（默认 &lt;code&gt;⌥ + S&lt;/code&gt;），截取需要翻译的区域&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/iShot_2023-01-20_11.26.25-1674185209.gif&quot; alt=&quot;iShot_2023-01-20_11.26.25-1674185209&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;输入翻译&lt;/td&gt; 
   &lt;td&gt;按下输入翻译快捷键（默认 &lt;code&gt;⌥ + A&lt;/code&gt; 或 &lt;code&gt;⌥ + F&lt;/code&gt;），输入需要翻译的文本，&lt;code&gt;Enter&lt;/code&gt; 键翻译&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/iShot_2023-01-20_11.28.46-1674185354.gif&quot; alt=&quot;iShot_2023-01-20_11.28.46-1674185354&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;静默截图 OCR&lt;/td&gt; 
   &lt;td&gt;按下静默截图快捷键（默认 &lt;code&gt;⌥ + ⇧ + S&lt;/code&gt;），截取需要 OCR 的区域，截图 OCR 结果将自动保存到剪贴板&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://github.com/Jerry23011/Easydict/assets/89069957/c16f3c20-1748-411e-be04-11d8fe0e61af&quot; alt=&quot;屏幕录制 2023-05-20 22 39 11&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;鼠标划词&lt;/h3&gt; 
&lt;p&gt;目前支持多种鼠标快捷划词方式：双击划词、鼠标滑动划词、三击划词（段落）和 Shift 划词（多段落），在某些应用中【鼠标滑动划词】可能会失败，此时可换其他划词方式。&lt;/p&gt; 
&lt;p&gt;快捷键划词在任意应用中都可以正常工作。如遇到不能鼠标划词的应用，可提 issue 解决 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/84&quot;&gt;https://github.com/tisfeng/Easydict/issues/84&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;划词功能流程：Accessibility &amp;gt; AppleScript &amp;gt; 模拟快捷键，优先使用辅助功能 Accessibility 取词，在 Accessibility 取词失败（未授权或应用不支持）时，如果是浏览器应用（如 Safari, Chrome），会尝试使用 AppleScript 取词。若 AppleScript 取词还是失败，最后则进行强制取词——模拟快捷键 Cmd+C 取词。&lt;/p&gt; 
&lt;p&gt;因此，建议开启浏览器中的 &lt;code&gt;允许 Apple 事件中的 JavaScript&lt;/code&gt; 选项，这样可以避免某些网页的事件拦截，例如这种 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/85&quot;&gt;网页强制附带版权信息&lt;/a&gt; 问题，优化取词体验。&lt;/p&gt; 
&lt;p&gt;对于 Safari 用户，强烈建议开启该选项，因为 Safari 不支持 Accessibility 取词，而 AppleScript 取词体验远优于模拟快捷键取词。&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20230708115811617-1688788691.png&quot; width=&quot;45%&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20230708115827839-1688788707.png&quot; width=&quot;45%&quot; /&gt; 
&lt;/div&gt; 
&lt;h3&gt;关于权限&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;划词翻译，需要开启 &lt;code&gt;辅助功能&lt;/code&gt; 权限，鼠标划词功能仅在第一次使用时会触发申请辅助功能权限，授权后才能正常使用自动划词翻译功能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;截图翻译，需要开启 &lt;code&gt;屏幕录制&lt;/code&gt; 权限，应用仅会在第一次使用 &lt;strong&gt;截图翻译&lt;/strong&gt; 时会自动弹出权限申请对话框，若授权失败，后续需自己去系统设置中开启。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;OCR&lt;/h2&gt; 
&lt;p&gt;目前仅支持系统 OCR，稍后会引入第三方 OCR 服务。&lt;/p&gt; 
&lt;p&gt;系统 OCR 支持语言：简体中文，繁体中文，英语，日语，韩语，法语，西班牙语，葡萄牙语，德语，意大利语，俄语，乌克兰语。&lt;/p&gt; 
&lt;h2&gt;语种识别&lt;/h2&gt; 
&lt;p&gt;目前支持系统语种识别，百度和 Google 语种识别三种，但考虑到在线识别的速度问题以及不稳定性（Google 还需要翻墙），其他两种识别服务只用于辅助优化。&lt;/p&gt; 
&lt;p&gt;默认使用系统语种识别，经调教后，系统语种识别的准确率已经很高了，能够满足大部分用户的需求。&lt;/p&gt; 
&lt;p&gt;如果在实际使用中还是觉得系统语种识别不准确，可在设置中开启百度语种识别或 Google 语种识别优化，但请注意，这可能会导致响应速度变慢，而且识别率也不会 100% 符合用户期望。如遇到识别有误情况，建议手动指定语种类型。&lt;/p&gt; 
&lt;h2&gt;TTS 服务&lt;/h2&gt; 
&lt;p&gt;目前支持系统 TTS，支持 Bing，Google，有道和百度在线 TTS 服务。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;系统 TTS：最稳定可靠，但效果不是很好。通常作为备用选项，即使用其他 TTS 报错时会改用系统 TTS。&lt;/li&gt; 
 &lt;li&gt;Bing TTS：综合效果最好，实时合成神经网络语音，但比较耗时，且文本越长，合成时间越长，目前限制最多只能合成 2000 个字符，约 10 分钟。&lt;/li&gt; 
 &lt;li&gt;Google TTS：英文效果不错，接口稳定，但需要翻墙，且一次请求最多只能合成 200 个字符。&lt;/li&gt; 
 &lt;li&gt;有道 TTS：整体效果不错，接口稳定，尤其英语单词发音极好，但最多只能合成 600 个字符。&lt;/li&gt; 
 &lt;li&gt;百度 TTS：英文句子发音很好，口音很有特色，但最多只能合成约 1000 个字符。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;默认使用有道 TTS，用户可在设置中切换偏好 TTS 服务。&lt;/p&gt; 
&lt;p&gt;鉴于有道 TTS 的英语单词效果很好，因此英文单词优先使用有道 TTS，其他文本则使用默认 TTS 服务。&lt;/p&gt; 
&lt;p&gt;除系统 TTS 外，其他 TTS 服务都是非官方接口，可能不稳定。&lt;/p&gt; 
&lt;h2&gt;查询服务&lt;/h2&gt; 
&lt;p&gt;目前支持有道词典，苹果系统词典，苹果系统翻译，DeepL，Google，Bing，百度和火山翻译。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Google 翻译中国版已无法使用，只能使用国际版，因此需要走代理才能使用 Google 翻译。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;h3&gt;各个服务支持的语言&lt;/h3&gt; &lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th align=&quot;center&quot;&gt;语言&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;有道词典&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;🍎 苹果系统翻译&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;DeepL 翻译&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;Bing 翻译&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;Google 翻译&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;百度翻译&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;火山翻译&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;中文（简体）&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;中文（繁体）&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;英语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;日语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;韩语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;法语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;西班牙语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;葡萄牙语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;意大利语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;德语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;俄语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;阿拉伯语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;瑞典语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;罗马尼亚语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;泰语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;斯洛伐克语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;荷兰语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;匈牙利语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;希腊语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;丹麦语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;芬兰语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;波兰语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;捷克语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;土耳其语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;立陶宛语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;拉脱维亚语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;乌克兰语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;保加利亚语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;印尼语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;马来语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;斯洛文尼亚语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;爱沙尼亚语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;越南语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;波斯语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;印地语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;泰卢固语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;泰米尔语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;乌尔都语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;菲律宾语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;高棉语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;老挝语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;孟加拉语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;缅甸语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;挪威语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;塞尔维亚语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;克罗地亚语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;蒙古语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;希伯来语&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;🍎 苹果系统词典&lt;/h3&gt; 
&lt;p&gt;Easydict 自动支持词典 App 中系统自带的词典，如牛津英汉汉英词典（简体中文-英语），现代汉语规范词典（简体中文）等，只需在词典 App 设置页启用相应的词典即可。&lt;/p&gt; 
&lt;p&gt;另外，苹果词典也支持自定义导入词典，因此我们可以通过导入 .dictionary 格式的词典来添加第三方词典，如简明英汉字典，朗文当代高级英语辞典等。&lt;/p&gt; 
&lt;p&gt;详情请看 &lt;a href=&quot;https://raw.githubusercontent.com/tisfeng/Easydict/main/docs/How-to-use-macOS-system-dictionary-in-Easydict-zh.md&quot;&gt;如何在 Easydict 中使用 🍎 macOS 系统词典？&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/HModYw-1696150530.png&quot; /&gt; &lt;/td&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20230928231225548-1695913945.png&quot; /&gt; &lt;/td&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20230928231345494-1695914025.png&quot; /&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;OpenAI 翻译&lt;/h3&gt; 
&lt;p&gt;1.3.0 版本开始支持 OpenAI 翻译，需要使用 OpenAI API key。&lt;/p&gt; 
&lt;p&gt;如果你没有自己的 OpenAI APIKey，可以借助一些开源项目将第三方的 LLM 接口转为标准的 OpenAI 接口，这样就能直接在 &lt;code&gt;Easydict&lt;/code&gt; 中使用了。&lt;/p&gt; 
&lt;p&gt;例如 &lt;a href=&quot;https://github.com/songquanpeng/one-api&quot;&gt;one-api&lt;/a&gt;，one-api 是一个很好的 OpenAI 接口管理开源项目，支持多家 LLM 接口，包括 Azure、Anthropic Claude、Google Gemini、智谱 ChatGLM、百度文心一言、讯飞星火认知、阿里通义千问、360 智脑，腾讯混元，Moonshot AI，Groq，零一万物，阶跃星辰，DeepSeek，Cohere 等，可用于二次分发管理 key，仅单可执行文件，已打包好 Docker 镜像，一键部署，开箱即用。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] &lt;a href=&quot;https://github.com/tisfeng/Easydict/releases&quot;&gt;2.6.0&lt;/a&gt; 版本实现了新的 SwiftUI 设置页（支持 macOS 13+），支持 GUI 方式配置服务 API key，其他系统版本则需要在 Easydict 的输入框中使用命令方式配置。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] 如果电脑硬件支持，建议升级 macOS 系统，以享受更好的用户体验。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/tisfeng/Easydict/assets/25194972/5b8f2785-b0ee-4a9e-bd41-1a9dd56b0231&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h4&gt;OpenAI 查询模式&lt;/h4&gt; 
&lt;p&gt;目前 OpenAI 支持三种查询模式：单词，句子和长翻译，默认都是开启的，其中单词和句子也可关闭。&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/2KIWfp-1695612945.png&quot; /&gt; &lt;/td&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/tCMiec-1695637289.png&quot; /&gt; &lt;/td&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/qNk8ND-1695820293.png&quot; /&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;温馨提示：如果你只是偶尔不希望分析句子，可以不用关闭句子类型，只需要在【句子】后面添加一个波浪符～，这样就会变成翻译类型了。&lt;/p&gt; 
&lt;img width=&quot;475&quot; alt=&quot;image&quot; src=&quot;https://github.com/tisfeng/Easydict/assets/25194972/b8c2f0e3-a263-42fb-9cb0-efc68b8201c3&quot; /&gt; 
&lt;h3&gt;内置 AI 翻译&lt;/h3&gt; 
&lt;p&gt;目前部分 LLM 服务厂商提供有限制的免费 AI 模型，例如 &lt;a href=&quot;https://console.groq.com&quot;&gt;Groq&lt;/a&gt;，&lt;a href=&quot;https://aistudio.google.com/app/apikey&quot;&gt;Google Gemini&lt;/a&gt; 等。&lt;/p&gt; 
&lt;p&gt;为方便新用户尝鲜使用这些大模型 AI 翻译，我们添加了一个内置 AI 翻译服务。&lt;/p&gt; 
&lt;p&gt;但请注意，内置的模型都有一定使用限制（主要是免费额度上的限制），我们不保证它们能一直稳定使用，建议用户还是使用 &lt;a href=&quot;https://github.com/songquanpeng/one-api&quot;&gt;one-api&lt;/a&gt; 搭建自己的大模型服务。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/tisfeng/Easydict/assets/25194972/6272d9aa-ddf1-47fb-be02-646ebf244248&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Gemini 翻译&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://gemini.google.com/&quot;&gt;Gemini 翻译&lt;/a&gt; 需要 API key，可在官网&lt;a href=&quot;https://makersuite.google.com/app/apikey&quot;&gt;控制台&lt;/a&gt;免费获取。&lt;/p&gt; 
&lt;h3&gt;DeepL 翻译&lt;/h3&gt; 
&lt;p&gt;DeepL 免费版网页 API 对用户单个 IP 有频率限制，频繁使用会触发 429 too many requests 报错，因此 1.3.0 版本增加了对 DeepL 官方 API 的支持，暂时还没写界面，需通过命令方式启用。&lt;/p&gt; 
&lt;p&gt;如果你有 DeepL AuthKey，建议使用个人的 AuthKey，这样可以避免频率限制，用户体验会更好。如果没有，可以使用切换代理来规避 429 报错。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] 切换代理 IP，这是通用的解决方案，对其他有频率限制的服务同样有效。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;自定义 DeepL 接口地址&lt;/h4&gt; 
&lt;p&gt;如果没有自己的 AuthKey，又需要大量使用 DeepL 翻译，那么可以考虑自己部署支持 DeepL 的接口服务，或者使用支持 DeepL 的第三方服务。&lt;/p&gt; 
&lt;p&gt;使用自定义 DeepL 接口地址的方式，在 Easydict 程序中等同于 DeepL 官方 AuthKey API 形式。&lt;/p&gt; 
&lt;p&gt;Easydict 支持 &lt;a href=&quot;https://github.com/OwO-Network/DeepLX&quot;&gt;DeepLX&lt;/a&gt; 接口，详情请看 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/464&quot;&gt;#464&lt;/a&gt;。&lt;/p&gt; 
&lt;h4&gt;配置 API 调用方式&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;默认优先使用网页版 API，在网页版 API 失败时会使用个人的 AuthKey（如果有）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;优先使用个人的 AuthKey，失败时使用网页版 API。若高频率使用 DeepL，建议使用这种方式，能减少一次失败的请求，提高响应速度。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;只使用个人的 AuthKey&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;腾讯翻译&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://fanyi.qq.com/&quot;&gt;腾讯翻译&lt;/a&gt; 需要 API key，为使用方便，我们内置了一个 key，这个 key 有额度限制，不保证一直能用。&lt;/p&gt; 
&lt;p&gt;建议使用自己的 API key，每个注册用户腾讯翻译每月赠送 500 万字符流量，足以日常使用了。&lt;/p&gt; 
&lt;h3&gt;Bing 翻译&lt;/h3&gt; 
&lt;p&gt;目前 Bing 翻译使用的是网页接口，当触发频率限制 429 报错时，除了切换代理，还可以通过手动设置请求 cookie 来续命，具体续命多久暂时不清楚。&lt;/p&gt; 
&lt;p&gt;具体步骤是，使用浏览器打开 &lt;a href=&quot;https://www.bing.com/translator&quot;&gt;Bing Translator&lt;/a&gt;，登录，然后在控制台执行以下代码获取 cookie&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;cookieStore.get(&quot;MUID&quot;).then(result =&amp;gt; console.log(encodeURIComponent(&quot;MUID=&quot; + result.value)));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;最后将 cookie 填写到 Easydict&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Bing TTS 用的也是网页接口，同样容易触发接口限制，且不会报错提示，因此如果将 Bing 设为默认的 TTS，建议设置 cookie。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;小牛翻译&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://niutrans.com/&quot;&gt;小牛翻译&lt;/a&gt; 需要 API key，为使用方便，我们内置了一个 key，这个 key 有额度限制，不保证一直能用。&lt;/p&gt; 
&lt;p&gt;建议使用自己的 API key，每个注册用户小牛翻译每日赠送 20 万字符流量。&lt;/p&gt; 
&lt;h3&gt;彩云小译&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://fanyi.caiyunapp.com/&quot;&gt;彩云小译&lt;/a&gt; 需要 Token，为使用方便，我们内置了一个 token，这个 token 有一定限制，不保证一直能用。&lt;/p&gt; 
&lt;p&gt;建议使用自己的 Token，新用户注册会获得 100 万字的免费翻译额度。&lt;/p&gt; 
&lt;h3&gt;阿里翻译&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://translate.alibaba.com/&quot;&gt;阿里翻译&lt;/a&gt; 虽然目前支持网页版接口，但这个接口有一定限制，不保证一直能用。&lt;/p&gt; 
&lt;p&gt;建议使用自己的 API key，阿里翻译每月免费额度一百万字符。&lt;/p&gt; 
&lt;h2&gt;智能查询模式&lt;/h2&gt; 
&lt;p&gt;目前查询服务主要分为两类：查询单词（如苹果词典）和翻译文本（如 DeepL），另外有些服务（如有道和谷歌），同时支持查询单词和翻译文本。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;typedef NS_OPTIONS(NSUInteger, EZQueryTextType) {
    EZQueryTextTypeNone = 0, // 0
    EZQueryTextTypeTranslation = 1 &amp;lt;&amp;lt; 0, // 01 = 1
    EZQueryTextTypeDictionary = 1 &amp;lt;&amp;lt; 1, // 10 = 2
    EZQueryTextTypeSentence = 1 &amp;lt;&amp;lt; 2, // 100 = 4
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Easydict 可以根据查询文本的内容，自动启用相应的查询服务。&lt;/p&gt; 
&lt;p&gt;具体来说，在智能查询模式下，当查询单词时，则只会调用支持【单词查询】的服务；当翻译文本时，则只会调用支持【文本翻译】的服务。&lt;/p&gt; 
&lt;p&gt;对于单词查询，支持查询单词服务的效果明显比简单翻译更好，例如苹果词典和有道词典；而进行长文本翻译时，启用单词查询服务没有意义，例如使用苹果词典来翻译。&lt;/p&gt; 
&lt;p&gt;默认情况下，所有的翻译服务都支持单词查询（单词也属于文本的一种），用户可以手动调整，如设置 Google 智能模式只翻译文本，只需要使用下面命令修改为 &lt;code&gt;translation | sentence&lt;/code&gt; 即可。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;easydict://writeKeyValue?Google-IntelligentQueryTextType=5  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;同样，对于一些同时支持查询单词和翻译文本的服务，如有道词典，也可以设置它智能模式只查询单词，设置类型为 &lt;code&gt;dictionary&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;easydict://writeKeyValue?Youdao-IntelligentQueryTextType=2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;默认情况下，所有窗口都未开启智能查询模式，用户可手动启用此功能：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;easydict://writeKeyValue?IntelligentQueryMode-window1=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;window1 代表迷你窗口，window2 代表侧悬浮窗口，赋值 0 表示关闭，1 表示开启。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] 智能查询模式，只表示是否智能启用该查询服务，用户可随时手动点击服务右侧箭头按钮展开查询。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20231001112741097-1696130861.png&quot; /&gt; &lt;/td&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20231001115013334-1696132213.png&quot; /&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;应用内查询&lt;/h3&gt; 
&lt;p&gt;支持 Easydict 应用内便捷查询。在输入框或翻译结果，如遇到不熟悉的单词，可通过重压右击唤出菜单，选择第一个“应用内查询”。&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20231019101421740-1697681661-1697681993.png&quot; width=&quot;50%&quot; /&gt; 
&lt;/div&gt; 
&lt;h2&gt;URL Scheme&lt;/h2&gt; 
&lt;p&gt;Easydict 支持 URL scheme 快速查询：&lt;code&gt;easydict://query?text=xxx&lt;/code&gt;，如 &lt;code&gt;easydict://query?text=good&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;如果查询内容 xxx 包含特殊字符，需进行 URL encode，如 &lt;code&gt;easydict://query?text=good%20girl&lt;/code&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] 旧版本的 easydict://xxx 在某些场景下可能会出现问题，因此建议使用完整的 URL Scheme: easydict://query?text=xxx&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;配合 PopClip 使用&lt;/h2&gt; 
&lt;p&gt;你需要先安装 &lt;a href=&quot;https://pilotmoon.com/popclip/&quot;&gt;PopClip&lt;/a&gt;，然后选中以下代码块，&lt;code&gt;PopClip&lt;/code&gt; 会显示 &quot;安装扩展 Easydict&quot;，点击它即可。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-applescript&quot;&gt;-- #popclip
-- name: Easydict
-- icon: iconify:ri:translate
-- language: applescript
tell application &quot;Easydict&quot;
  launch
  open location &quot;easydict://query?text={popclip text}&quot;
end tell
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20231215193536900-1702640137.png&quot; alt=&quot;image-20231215193536900&quot; /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;参考：&lt;a href=&quot;https://www.popclip.app/dev/applescript-actions&quot;&gt;https://www.popclip.app/dev/applescript-actions&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;设置&lt;/h2&gt; 
&lt;p&gt;设置页提供了一些设置修改，如开启查询后自动播放单词发音，修改翻译快捷键，开启、关闭服务，或调整服务顺序等。&lt;/p&gt; 
&lt;h3&gt;通用&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/5IacMJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;服务&lt;/h3&gt; 
&lt;p&gt;Easydict 有 3 种窗口类型，可以分别为它们设置不同的服务。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;迷你窗口：鼠标自动划词时显示。&lt;/li&gt; 
 &lt;li&gt;侧悬浮窗口：快捷键划词和截图翻译时显示。&lt;/li&gt; 
 &lt;li&gt;主窗口：默认关闭，可在设置中开启，程序启动时显示。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;应用内快捷键&lt;/h2&gt; 
&lt;p&gt;Easydict 有一些应用内快捷键，方便你在使用过程中更加高效。&lt;/p&gt; 
&lt;p&gt;不同于前面的翻译快捷键全局生效，下面这些快捷键只在 Easydict 窗口前台显示时生效。&lt;/p&gt; 
&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/Mlw8ty-1681955887.png&quot; width=&quot;50%&quot; /&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Enter&lt;/code&gt;: 输入文本后，按下 Enter 开始查询。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Shift + Enter&lt;/code&gt;: 输入换行。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + ,&lt;/code&gt;: 打开设置页。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + Q&lt;/code&gt;: 退出应用。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + K&lt;/code&gt;: 清空输入框。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + Shift + K&lt;/code&gt;: 清空输入框和查询结果，等同于点击输入框右下角的清空按钮。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + I&lt;/code&gt;: 聚集输入框。(Focus Input)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + Shift + C&lt;/code&gt;: 复制查询内容。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + Shift + J&lt;/code&gt;: 复制首个翻译结果。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + S&lt;/code&gt;: 播放查询文本的发音。(Play Sound)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + R&lt;/code&gt;: 再次查询。(Retry Query)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + T&lt;/code&gt;: 交换翻译语言。(Toggle Translate Language)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + P&lt;/code&gt;: 钉住窗口。(Pin Window，再次按下取消钉住)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + W&lt;/code&gt;: 关闭窗口。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + Enter&lt;/code&gt;: 默认打开 Google 搜索引擎，搜索内容为输入文本，效果等同手动点击右上角的浏览器搜索图标。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd + Shift + Enter&lt;/code&gt;: 若电脑上安装了欧路词典 App，则会在 Google 图标左边显示一个 Eudic 图标，动作为打开欧路词典 App 查询。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tips&lt;/h2&gt; 
&lt;p&gt;只要唤醒了查询窗口，就可以通过快捷键 &lt;code&gt;Cmd + ,&lt;/code&gt; 打开设置页。若不小心隐藏了菜单栏图标，可通过这种方式重新开启。&lt;/p&gt; 
&lt;div style=&quot;display:flex;align-items:flex-start;&quot;&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/25194972/221406290-b743c5fa-75ed-4a8a-8b52-b966ac7daa68.png&quot; style=&quot;margin-right:50px;&quot; width=&quot;40%&quot; /&gt; 
 &lt;img src=&quot;https://github.com/Jerry23011/Easydict/assets/89069957/274adbc6-8391-4386-911c-241db4a1bd98&quot; width=&quot;30%&quot; /&gt; 
&lt;/div&gt; 
&lt;p&gt;若发现 OCR 识别结果不对，可通过点击”识别为 xx“按钮指定识别语言来修正 OCR 结果。&lt;/p&gt; 
&lt;div style=&quot;display:flex;align-items:flex-start;&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20230227114539063-1677469539.png&quot; style=&quot;margin-right:40px;&quot; width=&quot;45%&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20230227114611359-1677469571.png&quot; width=&quot;45%&quot; /&gt; 
&lt;/div&gt; 
&lt;h2&gt;类似开源项目&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/immersive-translate/immersive-translate&quot;&gt;immersive-translate&lt;/a&gt;: 一个好用的沉浸式双语网页翻译扩展。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pot-app/pot-desktop&quot;&gt;pot-desktop&lt;/a&gt; : 一个跨平台的划词翻译和 OCR 软件。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/crimx/ext-saladict&quot;&gt;ext-saladict&lt;/a&gt;: 沙拉查词，一个浏览器查词和翻译扩展。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yetone/openai-translator&quot;&gt;openai-translator&lt;/a&gt;: 基于 ChatGPT API 的划词翻译浏览器插件和跨平台桌面端应用。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tisfeng/Raycast-Easydict&quot;&gt;Raycast-Easydict&lt;/a&gt;: 我的另一个开源项目，一个 Raycast 扩展版本的 Easydict。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/easydict-1-1671806758.png&quot; alt=&quot;easydict-1-1671806758&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;初衷&lt;/h2&gt; 
&lt;p&gt;查询单词和翻译文本，是日常生活非常实用的功能，我用过很多词典翻译软件，但都不满意，直到遇见了 Bob。&lt;a href=&quot;https://bobtranslate.com/&quot;&gt;&lt;code&gt;Bob&lt;/code&gt;&lt;/a&gt; 是一款优秀的翻译软件，但它不是开源软件，自从上架苹果商店后也不再免费提供应用更新。&lt;/p&gt; 
&lt;p&gt;作为一名开发者，也是众多开源软件的受益者，我觉得，这世界上应该存在一个免费开源版本的 &lt;a href=&quot;https://github.com/ripperhe/Bob&quot;&gt;Bob&lt;/a&gt;，于是我开发了 &lt;a href=&quot;https://github.com/tisfeng/Easydict&quot;&gt;Easydict&lt;/a&gt;。现在，我每天都在大量使用 Easydict，我很喜欢它，也希望能够让更多的人了解它、使用它。&lt;/p&gt; 
&lt;p&gt;开源，让世界更美好。&lt;/p&gt; 
&lt;h2&gt;贡献指南&lt;/h2&gt; 
&lt;p&gt;如果您对本项目感兴趣，我们非常欢迎参与到项目的贡献中，我们会尽可能地提供帮助。&lt;/p&gt; 
&lt;p&gt;目前项目主要有 dev 和 main 两个分支，dev 分支代码通常是最新的，可能包含一些正在开发中的功能。main 分支代码是稳定的，会定期合并 dev 分支的代码。&lt;/p&gt; 
&lt;p&gt;另外，我们计划将项目从 objc 向 Swift 迁移，未来逐步使用 Swift 来写新功能模块，参见 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/194&quot;&gt;https://github.com/tisfeng/Easydict/issues/194&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;如果您认为项目有需要改进的地方，或者有新的功能想法，欢迎提交 PR：&lt;/p&gt; 
&lt;p&gt;如果 PR 是对已存在的 issue 进行 bug 修复或者功能实现，请提交到 dev 分支。&lt;/p&gt; 
&lt;p&gt;如果 PR 是关于某个新功能或者涉及 UI 等较大的变动，建议先开个 issue 讨论一下，避免功能重复或者冲突。&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;a href=&quot;https://star-history.com/#tisfeng/easydict&amp;amp;Date&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=tisfeng/easydict&amp;amp;type=Date&amp;amp;theme=dark&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=tisfeng/easydict&amp;amp;type=Date&quot; /&gt; 
  &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=tisfeng/easydict&amp;amp;type=Date&quot; /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;致谢&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;这个项目的灵感来自 &lt;a href=&quot;https://github.com/crimx/ext-saladict&quot;&gt;saladict&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/ripperhe/Bob&quot;&gt;Bob&lt;/a&gt;，且初始版本是以 &lt;a href=&quot;https://github.com/1xiaocainiao/Bob&quot;&gt;Bob (GPL-3.0)&lt;/a&gt; 为基础开发。Easydict 在原项目上进行了许多改进和优化，很多功能和 UI 都参考了 Bob。&lt;/li&gt; 
 &lt;li&gt;截图功能是基于 &lt;a href=&quot;https://github.com/isee15&quot;&gt;isee15&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/isee15/Capture-Screen-For-Multi-Screens-On-Mac&quot;&gt;Capture-Screen-For-Multi-Screens-On-Mac&lt;/a&gt;，并在此基础上进行了优化。&lt;/li&gt; 
 &lt;li&gt;鼠标划词功能参考了 &lt;a href=&quot;https://pilotmoon.com/popclip/&quot;&gt;PopClip&lt;/a&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table border=&quot;1&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt;Bob 初始版本&lt;/th&gt; 
   &lt;th&gt;Easydict 新版&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20231224230524141-1703430324.png&quot; /&gt; &lt;/td&gt;
   &lt;td&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/image-20231224230545900-1703430346.png&quot; /&gt; &lt;/td&gt;
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;声明&lt;/h2&gt; 
&lt;p&gt;Easydict 为 &lt;a href=&quot;https://github.com/tisfeng/Easydict/raw/main/LICENSE&quot;&gt;GPL-3.0&lt;/a&gt; 开源协议，仅供学习交流，任何人都可以免费获取该产品和源代码。如果你认为您的合法权益受到侵犯，请立即联系&lt;a href=&quot;https://github.com/tisfeng&quot;&gt;作者&lt;/a&gt;。你可以自由使用源代码，但必须附上相应的许可证和版权声明。&lt;/p&gt; 
&lt;h2&gt;赞助支持&lt;/h2&gt; 
&lt;p&gt;Easydict 作为一个免费开源的非盈利项目，目前主要是作者个人在开发和维护，如果你喜欢这个项目，觉得它对你有帮助，可以考虑赞助支持一下这个项目，用爱发电，让它能够走得更远。&lt;/p&gt; 
&lt;p&gt;如果发电量足够，能够 Cover 苹果的 $99 年费，我会注册一个开发者账号，以解决应用&lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/2&quot;&gt;签名问题&lt;/a&gt;，让更多人能够方便地使用 Easydict。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://afdian.com/a/tisfeng&quot;&gt;&lt;img width=&quot;20%&quot; src=&quot;https://pic1.afdiancdn.com/static/img/welcome/button-sponsorme.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/tisfeng/ImageBed/main/uPic/IMG_4739-1684680971.JPG&quot; width=&quot;30%&quot; /&gt; 
&lt;/div&gt; 
&lt;h3&gt;赞助列表&lt;/h3&gt; 
&lt;p&gt;如果不希望用户名显示在列表中，请选择匿名方式。感谢大家的支持！&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; 赞助列表 &lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th align=&quot;center&quot;&gt;&lt;strong&gt;日期&lt;/strong&gt;&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;&lt;strong&gt;用户&lt;/strong&gt;&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;&lt;strong&gt;金额&lt;/strong&gt;&lt;/th&gt; 
    &lt;th align=&quot;center&quot;&gt;&lt;strong&gt;留言&lt;/strong&gt;&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-05-22&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;🍑&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-05-22&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;200&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-05-22&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;150&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-05-24&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;陈佩&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;加油 有没有可能有 Linux 版？（&lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/57#issuecomment-1555913845&quot;&gt;暂时没有&lt;/a&gt;）&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-05-27&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;自由。&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;100&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-06-01&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;梦遇&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-06-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;挨揍的免子&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;谢谢 🙏&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-06-17&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;妙才&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;❤️&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-06-19&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;加油，有没有可能调用 chatgpt 来翻译呀？（参见 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/28#issuecomment-1527827829&quot;&gt;#28&lt;/a&gt;）&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-06-19&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;许冠英&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;6.6&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开发这么好用的软件，很喜欢。&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-06-20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;lidashuang&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-07-03&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;小阳&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;2&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-07-06&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;30&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;谢谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-07-11&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;清清 🎵 在努力 ✨&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-07-21&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-07-25&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-08-07&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;guanyuan&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;58&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;开源万岁&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-08-29&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;非此即彼&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;优雅！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-09-04&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;aLong&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢 🙏，期待功能继续完善。&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-09-13&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;一座山的秋叶&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-09-17&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;桂&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;200&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-09-24&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Austen&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;支持开源作者&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-10-19&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;DANIELHU&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;7.3&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源，希望能加入生词本功能。（后面会加，请等待 &lt;a href=&quot;https://github.com/tisfeng/Easydict/issues/33&quot;&gt;33&lt;/a&gt;）&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-10-25&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;tzcsky&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;非常好的软件&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-10-26&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;开源万岁🎉尽点绵薄之力，感谢！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-06&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;周樹人不能沒有魯迅&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10.66&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;有点穷，绵薄之力（囧）&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-07&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ HDmoli&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;zhihui.xiong&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ Andy&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-12&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;6.6&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;请大佬喝瓶饮料🥤，感谢开源&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-13&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ御猫&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-21&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ小虫&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Thank you, please keep going.&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-24&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ王海东&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-25&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ jackiexiao&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;200&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;这个软件实在太太太太棒了，太感谢了&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-27&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ小曹&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感恩！Life Saver&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-27&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ大象🐯&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;开源，让世界更美好&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-28&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ王一帆&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-29&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ李利明&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;伟大的开发者，伟大的开源精神！（❤️）&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-11-30&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ Three&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-12-02&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ翻滚的土豆&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;今天刷到一个 UP 主推荐的，加油。&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-12-02&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ祥林叔&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;🫡 国内好的开源不多&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-12-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ刘维尼&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;28.8&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;用户用&#39;萌萌的维尼&#39;吧 感谢开发好用又有品味的软件请您喝奶茶&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-12-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ hiuxia&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;100&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢这么优秀的软件！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-12-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ——&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-12-07&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;小逗。🎈&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2023-12-26&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ Yee&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-01-09&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ Jack&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;目前用过最好用的字典软件，谢谢！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-01-15&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源，感谢有你：）&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-01-16&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ sd&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;大佬牛逼🐂🍺&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-01-23&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-01-28&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ㅤ&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;7&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-01-29&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;大帅ㅤ&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;还没有，但是感受到了用心。&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-02-04&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;ll&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-02-10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;盒子哥&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;100&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-02-26&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;吃核桃不吐皮儿&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢解答问题&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-02-28&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢你的 Easydict&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-03-11&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-03-16&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;幻影&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;非常感谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-03-25&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢大佬&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-04-04&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;至秦&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;37&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢老哥 好用🙏&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-04-12&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;奥雷里亚诺&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;界面精致，而且帮我节约了不少时间&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-04-15&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;谢谢你的 Easydict！！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-05-11&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;35&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源和持续更新！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-05-29&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;天色晚晚&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;项目很用心！感谢！！！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-06-06&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;天不发火的老虎&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;很赞，继续加油&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-06-08&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;MLeo&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢免费开源，快捷好用。&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-06-12&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Sacri&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;学生，这个学英语太方便了，谢谢你&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-06-24&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;迦南&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;大佬辛苦了💦&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-07-07&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Javen Fang&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;100&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢！建议支持 Claude。(这个可以有)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-07-11&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;6.6.6&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;希望大佬看下 Issues 最新问题&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-07-12&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;callxm&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;3&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;世上应存在免费开源 bob，大义！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-07-31&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;谢谢！非常好的软件！你们太厉害啦&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-08-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;succulent&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢老哥，easydict 很好用&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-08-08&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;须尽欢&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源 感谢更新&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-08-14&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;장철&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;中韩翻译可以添加 papago 吗？（我没用这个翻译，等有缘人 PR）&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-08-15&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感恩！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-08-20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Ishmael&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-08-28&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Rich Coinu&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;希望你越来越好&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-08-29&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;迦南&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;请大佬喝冰可乐🥤&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-08-30&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Benjamin&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源，辛苦了，在校生支持了&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-09-24&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;100&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-09-25&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;噗啦啦啦&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;真是太棒啦，非常喜欢 伟大的！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-10-14&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Y&amp;amp;T&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢开源 非常好用！！！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-11-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢！2.10 太好用啦！作者加油！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-11-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-11-21&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;知足常乐&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-11-29&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Cristiano Strieder 亚诺&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-12-02&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;可能是波波&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-12-06&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;王波&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-12-06&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-12-11&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;阳光夜风&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2024-12-12&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;李佳骏&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;100&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;非常感谢作者！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-01-02&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Yuki&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;好用的 加油&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-01-02&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Mia&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;超级好用！！感谢大佬&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-01-23&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Q&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;还没用，突然发现了这个替代品&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-02-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-02-25&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;小孙被妖怪抓走了&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;非常好的软件！真的超棒！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;15&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Thx&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Sylvie&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;20&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢🙏🏻&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-14&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Liam&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;等着你上 store ( Easydict 使用了一些私有 API，上不了 App Store)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-19&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Easydict 做的很棒，谢谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-23&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;好(hào)吃俱乐部部长&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;幸苦啦 谢谢 别买苹果年费 浪费钱（😑）&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-24&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;장철&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;绵薄之力，再接再厉！&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-25&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;优雅! 感谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-03-27&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;D&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢用爱发电&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-04-29&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;胡子&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;加油 期待上线&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-05-05&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;100&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;谢谢你的开源项目，在这个项目里学习了 axapi 的使用方法&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-05-18&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;我怎么知道我原本叫啥&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;开源是我爹&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-05-30&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;tzcsky&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;很好用，谢谢&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-06-14&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;Quixotica11y&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;谢谢你(^🙏^)很好用&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-06-17&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;CraigMaritimus&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;致敬&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-07-09&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;很好用的软件 希望能一直完善下去&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;center&quot;&gt;2025-07-15&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;10&lt;/td&gt; 
    &lt;td align=&quot;center&quot;&gt;感谢分享，很好用的软件&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>google/promises</title>
      <link>https://github.com/google/promises</link>
      <description>&lt;p&gt;Promises is a modern framework that provides a synchronization construct for Swift and Objective-C.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/google/promises.svg?sanitize=true&quot; alt=&quot;Apache License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/google/promises&quot;&gt;&lt;img src=&quot;https://api.travis-ci.org/google/promises.svg?branch=master&quot; alt=&quot;Travis&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/google/promises&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/google/promises.svg?sanitize=true&quot; alt=&quot;Gitter Chat&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/platforms-macOS%20%7C%20iOS%20%7C%20tvOS%20%7C%20watchOS-blue.svg?longCache=true&amp;amp;style=flat&quot; alt=&quot;Platforms&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/languages-Swift%20%7C%20ObjC-orange.svg?longCache=true&amp;amp;style=flat&quot; alt=&quot;Languages&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/supports-Bazel%20%7C%20SwiftPM%20%7C%20CocoaPods%20%7C%20Carthage-yellow.svg?longCache=true&amp;amp;style=flat&quot; alt=&quot;Package Managers&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Promises&lt;/h1&gt; 
&lt;p&gt;Promises is a modern framework that provides a synchronization construct for Objective-C and Swift to facilitate writing asynchronous code.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md&quot;&gt;Introduction&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#the-problem-with-async-code&quot;&gt;The problem with async code&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#promises-to-the-rescue&quot;&gt;Promises to the rescue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#what-is-a-promise&quot;&gt;What is a promise?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#framework&quot;&gt;Framework&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#benchmark&quot;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#getting-started&quot;&gt;Getting started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#add-dependency&quot;&gt;Add dependency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#import&quot;&gt;Import&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#adopt&quot;&gt;Adopt&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#basics&quot;&gt;Basics&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#creating-promises&quot;&gt;Creating promises&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#async&quot;&gt;Async&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#do&quot;&gt;Do&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#pending&quot;&gt;Pending&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#create-a-resolved-promise&quot;&gt;Resolved&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#observing-fulfillment&quot;&gt;Observing fulfillment&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#then&quot;&gt;Then&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#observing-rejection&quot;&gt;Observing rejection&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#catch&quot;&gt;Catch&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#extensions&quot;&gt;Extensions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#all&quot;&gt;All&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#always&quot;&gt;Always&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#any&quot;&gt;Any&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#awaitpromise&quot;&gt;AwaitPromise&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#delay&quot;&gt;Delay&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#race&quot;&gt;Race&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#recover&quot;&gt;Recover&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#reduce&quot;&gt;Reduce&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#retry&quot;&gt;Retry&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#timeout&quot;&gt;Timeout&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#validate&quot;&gt;Validate&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#wrap&quot;&gt;Wrap&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#advanced-topics&quot;&gt;Advanced topics&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#default-dispatch-queue&quot;&gt;Default dispatch queue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#ownership-and-retain-cycles&quot;&gt;Ownership and retain cycles&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#objective-c---swift-interoperability&quot;&gt;Objective-C &amp;lt;-&amp;gt; Swift interoperability&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#dot-syntax-in-objective-c&quot;&gt;Dot-syntax in Objective-C&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#anti-patterns&quot;&gt;Anti-patterns&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#broken-chain&quot;&gt;Broken chain&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/promises/master/g3doc/index.md#nested-promises&quot;&gt;Nested promises&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>realm/realm-swift</title>
      <link>https://github.com/realm/realm-swift</link>
      <description>&lt;p&gt;Realm is a mobile database: a replacement for Core Data &amp; SQLite&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] We announced the deprecation of Atlas Device Sync + Realm SDKs in September 2024. For more information please see:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/atlas/device-sdks/deprecation&quot;&gt;SDK Deprecation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/atlas/app-services/sync/device-sync-deprecation&quot;&gt;Device Sync Deprecation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;For a version of &lt;code&gt;realm-swift&lt;/code&gt; without sync features, install version 20 or see the &lt;code&gt;community&lt;/code&gt; branch.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;picture&gt; 
 &lt;source srcset=&quot;./media/logo-dark.svg&quot; media=&quot;(prefers-color-scheme: dark)&quot; alt=&quot;realm by MongoDB&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/realm/realm-swift/master/media/logo.svg?sanitize=true&quot; alt=&quot;realm by MongoDB&quot; /&gt; 
&lt;/picture&gt; 
&lt;h1&gt;About Realm Database&lt;/h1&gt; 
&lt;p&gt;Realm is a mobile database that runs directly inside phones, tablets or wearables. This repository holds the source code for the iOS, macOS, tvOS &amp;amp; watchOS versions of Realm Swift &amp;amp; Realm Objective-C.&lt;/p&gt; 
&lt;h2&gt;Why Use Realm&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Intuitive to Developers:&lt;/strong&gt; Realm’s object-oriented data model is simple to learn, doesn’t need an ORM, and lets you write less code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built for Mobile:&lt;/strong&gt; Realm is fully-featured, lightweight, and efficiently uses memory, disk space, and battery life.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Designed for Offline Use:&lt;/strong&gt; Realm’s local database persists data on-disk, so apps work as well offline as they do online.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.mongodb.com/docs/atlas/app-services/sync/&quot;&gt;MongoDB Atlas Device Sync&lt;/a&gt;&lt;/strong&gt;: Makes it simple to keep data in sync across users, devices, and your backend in real-time. Get started for free with &lt;a href=&quot;https://github.com/mongodb/template-app-swiftui-todo&quot;&gt;a template application&lt;/a&gt; and &lt;a href=&quot;http://mongodb.com/realm/register?utm_medium=github_atlas_CTA&amp;amp;utm_source=realm_swift_github&quot;&gt;create the cloud backend&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Object-Oriented: Streamline Your Code&lt;/h2&gt; 
&lt;p&gt;Realm was built for mobile developers, with simplicity in mind. The idiomatic, object-oriented data model can save you thousands of lines of code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Define your models like regular Swift classes
class Dog: Object {
    @Persisted var name: String
    @Persisted var age: Int
}
class Person: Object {
    @Persisted(primaryKey: true) var _id: String
    @Persisted var name: String
    @Persisted var age: Int
    // Create relationships by pointing an Object field to another Class
    @Persisted var dogs: List&amp;lt;Dog&amp;gt;
}
// Use them like regular Swift objects
let dog = Dog()
dog.name = &quot;Rex&quot;
dog.age = 1
print(&quot;name of dog: \(dog.name)&quot;)

// Get the default Realm
let realm = try! Realm()
// Persist your data easily with a write transaction
try! realm.write {
    realm.add(dog)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Live Objects: Build Reactive Apps&lt;/h2&gt; 
&lt;p&gt;Realm’s live objects mean data updated anywhere is automatically updated everywhere.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Open the default realm.
let realm = try! Realm()

var token: NotificationToken?

let dog = Dog()
dog.name = &quot;Max&quot;

// Create a dog in the realm.
try! realm.write {
    realm.add(dog)
}

//  Set up the listener &amp;amp; observe object notifications.
token = dog.observe { change in
    switch change {
    case .change(let properties):
        for property in properties {
            print(&quot;Property &#39;\(property.name)&#39; changed to &#39;\(property.newValue!)&#39;&quot;);
        }
    case .error(let error):
        print(&quot;An error occurred: (error)&quot;)
    case .deleted:
        print(&quot;The object was deleted.&quot;)
    }
}

// Update the dog&#39;s name to see the effect.
try! realm.write {
    dog.name = &quot;Wolfie&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SwiftUI&lt;/h3&gt; 
&lt;p&gt;Realm integrates directly with SwiftUI, updating your views so you don&#39;t have to.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContactsView: View {
    @ObservedResults(Person.self) var persons

    var body: some View {
        List {
            ForEach(persons) { person in
                Text(person.name)
            }
            .onMove(perform: $persons.move)
            .onDelete(perform: $persons.remove)
        }.navigationBarItems(trailing:
            Button(&quot;Add&quot;) {
                $persons.append(Person())
            }
        )
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fully Encrypted&lt;/h2&gt; 
&lt;p&gt;Data can be encrypted in-flight and at-rest, keeping even the most sensitive data secure.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Generate a random encryption key
var key = Data(count: 64)
_ = key.withUnsafeMutableBytes { (pointer: UnsafeMutableRawBufferPointer) in
    guard let baseAddress = pointer.baseAddress else {
        fatalError(&quot;Failed to obtain base address&quot;)
    }
    SecRandomCopyBytes(kSecRandomDefault, 64, baseAddress)
}

// Add the encryption key to the config and open the realm
let config = Realm.Configuration(encryptionKey: key)
let realm = try Realm(configuration: config)

// Use the Realm as normal
let dogs = realm.objects(Dog.self).filter(&quot;name contains &#39;Fido&#39;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We support installing Realm via Swift Package Manager, CocoaPods, Carthage, or by importing a dynamic XCFramework.&lt;/p&gt; 
&lt;p&gt;For more information, see the detailed instructions in our &lt;a href=&quot;https://www.mongodb.com/docs/atlas/device-sdks/sdk/swift/install/&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Interested in getting started for free with &lt;a href=&quot;https://github.com/mongodb/template-app-swiftui-todo&quot;&gt;a template application&lt;/a&gt; that includes a cloud backend and Sync? &lt;a href=&quot;http://mongodb.com/realm/register?utm_medium=github_atlas_CTA&amp;amp;utm_source=realm_swift_github&quot;&gt;Create a MongoDB Atlas Account&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The documentation can be found at &lt;a href=&quot;https://www.mongodb.com/docs/atlas/device-sdks/sdk/swift/&quot;&gt;mongodb.com/docs/atlas/device-sdks/sdk/swift/&lt;/a&gt;. The API reference is located at &lt;a href=&quot;https://www.mongodb.com/docs/realm-sdks/swift/latest/&quot;&gt;mongodb.com/docs/realm-sdks/swift/latest/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Need help with your code?&lt;/strong&gt;: Look for previous questions with the&lt;a href=&quot;https://stackoverflow.com/questions/tagged/realm?sort=newest&quot;&gt;&lt;code&gt;realm&lt;/code&gt; tag&lt;/a&gt; on Stack Overflow or &lt;a href=&quot;https://stackoverflow.com/questions/ask?tags=realm&quot;&gt;ask a new question&lt;/a&gt;. For general discussion that might be considered too broad for Stack Overflow, use the &lt;a href=&quot;https://developer.mongodb.com/community/forums/tags/c/realm-sdks/58/swift/&quot;&gt;Community Forum&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Have a bug to report?&lt;/strong&gt; &lt;a href=&quot;https://github.com/realm/realm-swift/issues/new&quot;&gt;Open a GitHub issue&lt;/a&gt;. If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Have a feature request?&lt;/strong&gt; &lt;a href=&quot;https://github.com/realm/realm-swift/issues/new&quot;&gt;Open a GitHub issue&lt;/a&gt;. Tell us what the feature should do and why you want the feature.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building Realm&lt;/h2&gt; 
&lt;p&gt;In case you don&#39;t want to use the precompiled version, you can build Realm yourself from source.&lt;/p&gt; 
&lt;p&gt;Prerequisites:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Building Realm requires Xcode 14.1 or newer.&lt;/li&gt; 
 &lt;li&gt;Building Realm documentation requires &lt;a href=&quot;https://github.com/realm/jazzy&quot;&gt;jazzy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Once you have all the necessary prerequisites, building Realm just takes a single command: &lt;code&gt;sh build.sh build&lt;/code&gt;. You&#39;ll need an internet connection the first time you build Realm to download the core binary. This will produce Realm.xcframework and RealmSwift.xcframework in &lt;code&gt;build/Release/&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;sh build.sh help&lt;/code&gt; to see all the actions you can perform (build ios/osx, generate docs, test, etc.).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/realm/realm-swift/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more details!&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;This project adheres to the &lt;a href=&quot;https://www.mongodb.com/community-code-of-conduct&quot;&gt;MongoDB Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&quot;mailto:community-conduct@mongodb.com&quot;&gt;community-conduct@mongodb.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Realm Objective-C &amp;amp; Realm Swift are published under the Apache 2.0 license. Realm Core is also published under the Apache 2.0 license and is available &lt;a href=&quot;https://github.com/realm/realm-core&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you use Realm and are happy with it, please consider sending out a tweet mentioning &lt;a href=&quot;https://twitter.com/realm&quot;&gt;@realm&lt;/a&gt; to share your thoughts!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;And if you don&#39;t like it, please let us know what you would like improved, so we can fix it!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;img style=&quot;width: 0px; height: 0px;&quot; src=&quot;https://3eaz4mshcd.execute-api.us-east-1.amazonaws.com/prod?s=https://github.com/realm/realm-swift#README.md&quot; /&gt;</description>
    </item>
    
    <item>
      <title>SDWebImage/SDWebImageAVIFCoder</title>
      <link>https://github.com/SDWebImage/SDWebImageAVIFCoder</link>
      <description>&lt;p&gt;A SDWebImage coder plugin to support AVIF(AV1 Image File Format) image&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SDWebImageAVIFCoder&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SDWebImage/SDWebImageAVIFCoder/actions/workflows/check-image-decoding.yml&quot;&gt;&lt;img src=&quot;https://github.com/SDWebImage/SDWebImageAVIFCoder/actions/workflows/check-image-decoding.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/SDWebImageAVIFCoder&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/SDWebImageAVIFCoder.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/SDWebImageAVIFCoder&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/SDWebImageAVIFCoder.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/SDWebImageAVIFCoder&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/SDWebImageAVIFCoder.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?style=flat&quot; alt=&quot;SwiftPM compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageAVIFCoder&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What&#39;s for&lt;/h2&gt; 
&lt;p&gt;This is a &lt;a href=&quot;https://github.com/rs/SDWebImage&quot;&gt;SDWebImage&lt;/a&gt; coder plugin to add &lt;a href=&quot;https://aomediacodec.github.io/av1-avif/&quot;&gt;AV1 Image File Format (AVIF)&lt;/a&gt; support. Which is built based on the open-sourced &lt;a href=&quot;https://github.com/AOMediaCodec/libavif&quot;&gt;libavif&lt;/a&gt; codec.&lt;/p&gt; 
&lt;p&gt;This AVIF coder plugin support AVIF still/sequence image. Including alpha channel, as well as 10bit/12bit/16bit HDR images. (The AVIF sequence animation is available from v0.9.0).&lt;/p&gt; 
&lt;p&gt;The AVIF encoding is also supported now. Which always encode as 8-bit depth images.&lt;/p&gt; 
&lt;p&gt;See the demo for the more showcase.&lt;/p&gt; 
&lt;h2&gt;Note&lt;/h2&gt; 
&lt;p&gt;AVIF image spec is still in evolve. And the current upstream AVIF codec is a simple implementation. The encoding time may be long for large images.&lt;/p&gt; 
&lt;p&gt;Since we rely on the external codec libavif. We may periodically update the dependency and bump version. Make sure you&#39;re using the latest version as possible as you can :)&lt;/p&gt; 
&lt;h2&gt;AV1 Codec&lt;/h2&gt; 
&lt;p&gt;libavif is a image codec. But AVIF is based on the AV1 Video standard. So it need a AV1 codec for support. This relationship is just like HEIF(image) and HEVC(video) codec.&lt;/p&gt; 
&lt;p&gt;You can choose the codec and use &lt;code&gt;libavif&lt;/code&gt; CocoaPods subspec to choose the one you&#39;d like.&lt;/p&gt; 
&lt;h3&gt;aom&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;For Carthage/SwifftPM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;libavif is built with &lt;a href=&quot;https://aomedia.googlesource.com/aom/&quot;&gt;aom&lt;/a&gt; codec support. aom is the first AV1 codec during the standard draft implementation. The aom support both decodinng and encoding&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For CocoaPods&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Because of strange design of &lt;strong&gt;subspec dependencies resolution algorithm&lt;/strong&gt;, we can not make aom by default (or all the subspecs will always link aom, which means not optional). So libavif is built with nothing codec (&lt;code&gt;libavif/core&lt;/code&gt;). You need to choose the actual AV1 codec using one or more of below.&lt;/p&gt; 
&lt;p&gt;If you want to use aom, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;libavif/liaom&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or other AV1 codec, like dav1d:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;libavif/libdav1d&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;dav1d (Decoding)&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/videolan/dav1d&quot;&gt;dav1d&lt;/a&gt; is the new and next generation AV1 codec, focused on speed and correctness.&lt;/p&gt; 
&lt;p&gt;See more about &lt;a href=&quot;https://github.com/videolan/dav1d#why-do-you-not-improve-libaom-rather-than-starting-a-new-project&quot;&gt;explanation for why starting a new project but not improving aom&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;From v0.3.0, libavif can built with dav1d. For CocoaPods user, you can simply use the subspec for this. Carthage for optional dav1d codec is not supported currently.&lt;/p&gt; 
&lt;h3&gt;libgav1 (Decoding)&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://chromium.googlesource.com/codecs/libgav1/&quot;&gt;libgav1&lt;/a&gt; is a Main profile (0) &amp;amp; High profile (1) compliant AV1 decoder. More information on the AV1 video format can be found at aomedia.org.&lt;/p&gt; 
&lt;p&gt;From v0.8.3, libavif can built with libgav1. For For CocoaPods user, you can simply use the subspec for this.&lt;/p&gt; 
&lt;h3&gt;rav1e (Encoding)&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/xiph/rav1e&quot;&gt;rav1e&lt;/a&gt; is the fastest and safest AV1 encoder. Which use &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust programming&lt;/a&gt; to provide fast and safe codec compared to aom. Its current form it is most suitable for cases where libaom (the reference encoder) is too slow.&lt;/p&gt; 
&lt;p&gt;See more about &lt;a href=&quot;https://github.com/xiph/rav1e/issues/1248&quot;&gt;performance&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;From v0.4.3, libavif can built with rav1e. For CocoaPods user, you can simply use the subspec for this. Carthage/SPM for optional rav1c codec is not supported currently.&lt;/p&gt; 
&lt;p&gt;Note: The librav1e on CocoaPods use pre-built static-linking binary. Which means, it can not be used for CocoaPods&#39;s dynamic-linking.&lt;/p&gt; 
&lt;p&gt;To use for framework package format (CocoaPods defaults use ar archive format), you should write something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;use_frameworks! :linkage =&amp;gt; :static
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;but not this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;use_frameworks!
# use_frameworks! :linkage =&amp;gt; :dynamic
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: before librav1e v0.6.1, it only support iOS &amp;amp;&amp;amp; macOS. watchOS and tvOS is avaiable from v0.6.2 with the latest Rust toolchain. And for visionOS supports need Rust community upstream support. For latest integration, check or fire issues in &lt;a href=&quot;https://github.com/SDWebImage/librav1e-Xcode&quot;&gt;https://github.com/SDWebImage/librav1e-Xcode&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;SVT-AV1 (Encoding)&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitlab.com/AOMediaCodec/SVT-AV1&quot;&gt;SVT-AV1&lt;/a&gt; is the Scalable Video Technology for AV1 (SVT-AV1 Encoder and Decoder) is an AV1-compliant encoder/decoder library core.&lt;/p&gt; 
&lt;p&gt;From v0.8.3, libavif can built with STV-AV1. For For CocoaPods user, you can simply use the subspec for this.&lt;/p&gt; 
&lt;h2&gt;Choose codec at runtime&lt;/h2&gt; 
&lt;p&gt;Although libavif has a automatic detection of installed AVIF codec, but for example, &lt;code&gt;aom&lt;/code&gt; supports both decoding and encoding, but slower than &lt;code&gt;rav1e&lt;/code&gt; on encoding.&lt;/p&gt; 
&lt;p&gt;You can force to use the &lt;code&gt;aom&lt;/code&gt; for decoding and &lt;code&gt;rav1e&lt;/code&gt; for encoding like this:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-C&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;NSDictionary *decodeOptions = [SDImageCoderAVIFDecodeCodecChoice: @(AVIF_CODEC_CHOICE_AOM)];
NSDictionary *encodeOptions = [SDImageCoderAVIFEncodeCodecChoice: @(AVIF_CODEC_CHOICE_RAV1E)];

// Pass from UI level options
[imageView sd_setImageWithURL:url placeholderImage:nil options:0 context:@{SDWebImageContextImageDecodeOptions: decodeOptions, SDWebImageContextImageEncodeOptions: encodeOptions} progress:nil completed:nil];
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let decodeOptions: [SDImageCoderOption: Any] = [.avifDecodeCodecChoice: AVIF_CODEC_CHOICE_AOM.rawValue]
let encodeOptions = [SDImageCoderOption: Any] = [.avifEncodeCodecChoice: AVIF_CODEC_CHOICE_RAV1E.rawValue]

// Pass from UI level options
imageView.sd_setImage(with: url, placeholderImage: nil, options: [], context: [.imageDecodeOptions: decodeOptions, .imageEncodeOptions: encodeOptions], progress: nil, completed: nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 9&lt;/li&gt; 
 &lt;li&gt;macOS 10.11&lt;/li&gt; 
 &lt;li&gt;tvOS 9.0&lt;/li&gt; 
 &lt;li&gt;watchOS 2.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h4&gt;CocoaPods&lt;/h4&gt; 
&lt;p&gt;SDWebImageAVIFCoder is available through &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. To install it with default aom AV1 codec, simply add the following line to your Podfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SDWebImageAVIFCoder&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: From version 0.4.0, if you want to use rav1e or dav1e instead aom for faster AV1 codec, control the subspec of libavif instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SDWebImageAVIFCoder&#39;
pod &#39;libavif&#39;, :subspecs =&amp;gt; [
  &#39;libdav1d&#39;,
  &#39;librav1e&#39;
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or, for libgav1 &amp;amp;&amp;amp; SVT-AV1, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SDWebImageAVIFCoder&#39;
pod &#39;libavif&#39;, :subspecs =&amp;gt; [
  &#39;libgva1&#39;,
  &#39;SVT-AV1&#39;
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: From version 0.2.0, the dependency libavif and libaom use the portable C implementation to works on Apple platforms. If you need the pre-built library with SIMD/AVX and assembly optimization, try the 0.1.0 version.&lt;/p&gt; 
&lt;h4&gt;Carthage&lt;/h4&gt; 
&lt;p&gt;SDWebImageAVIFCoder is available through &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;SDWebImage/SDWebImageAVIFCoder&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Carthage does not support like CocoaPods&#39; subspec, it only supports libaom for AVIF decoding &amp;amp;&amp;amp; encoding.&lt;/p&gt; 
&lt;h4&gt;Swift Package Manager (Xcode 11+)&lt;/h4&gt; 
&lt;p&gt;SDWebImageAVIFCoder is available through &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The framework through SwiftPM only supports libaom for AVIF decoding &amp;amp;&amp;amp; encoding.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let package = Package(
    dependencies: [
        .package(url: &quot;https://github.com/SDWebImage/SDWebImageAVIFCoder.git&quot;, from: &quot;0.5&quot;)
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To use AVIF coder, you should firstly add the &lt;code&gt;SDImageAVIFCoder.sharedCoder&lt;/code&gt; to the coders manager. Then you can call the View Category method to start load AVIF images.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-C&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;SDImageAVIFCoder *AVIFCoder = SDImageAVIFCoder.sharedCoder;
[[SDImageCodersManager sharedManager] addCoder:AVIFCoder];
UIImageView *imageView;
[imageView sd_setImageWithURL:url];
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let AVIFCoder = SDImageAVIFCoder.shared
SDImageCodersManager.shared.addCoder(AVIFCoder)
let imageView: UIImageView
imageView.sd_setImage(with: url)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Decoding&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-C&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;// AVIF image decoding
NSData *avifData;
UIImage *image = [[SDImageAVIFCoder sharedCoder] decodedImageWithData:avifData options:nil];
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// AVIF image decoding
let avifData: Data
let image = SDImageAVIFCoder.shared.decodedImage(with: data, options: nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Thumbnail Decoding (0.10.0+)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-C&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;// AVIF thumbnail image decoding
NSData *avifData;
CGSize thumbnailSize = CGSizeMake(300, 300);
UIImage *thumbnailImage = [[SDImageAVIFCoder sharedCoder] decodedImageWithData:avifData options:@{SDImageCoderDecodeThumbnailPixelSize : @(thumbnailSize)}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// AVIF thumbnail image decoding
let avifData: Data
let thumbnailSize = CGSize(width: 300, height: 300)
let image = SDImageAVIFCoder.shared.decodedImage(with: data, options: [.decodeThumbnailPixelSize: thumbnailSize])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Encoding (No animtion support)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Objective-c&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;// AVIF image encoding
UIImage *image;
NSData *avifData = [[SDImageAVIFCoder sharedCoder] encodedDataWithImage:image format:SDImageFormatAVIF options:nil];
// Encode Quality
NSData *lossyAVIFData = [[SDImageAVIFCoder sharedCoder] encodedDataWithImage:image format:SDImageFormatAVIF options:@{SDImageCoderEncodeCompressionQuality : @(0.1)}]; // [0, 1] compression quality
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// AVIF image encoding
let image: UIImage
let avifData = SDImageAVIFCoder.shared.encodedData(with: image, format: .avif, options: nil)
// Encode Quality
let lossyAVIFData = SDImageAVIFCoder.shared.encodedData(with: image, format: .avif, options: [.encodeCompressionQuality: 0.1]) // [0, 1] compression quality
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImageAVIFCoder/master/Example/Screenshot/AVIFDemo-iOS.png&quot; width=&quot;300&quot; /&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/SDWebImage/SDWebImageAVIFCoder/master/Example/Screenshot/AVIFDemo-macOS.png&quot; width=&quot;600&quot; /&gt; 
&lt;p&gt;The images are from &lt;a href=&quot;https://github.com/AOMediaCodec/av1-avif/tree/master/testFiles&quot;&gt;AV1 Still Image File Format Specification Test Files&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AVIF Image Viewer&lt;/h2&gt; 
&lt;p&gt;AVIF is a new image format, which lack of related toolchains like Browser or Desktop Viewer support.&lt;/p&gt; 
&lt;p&gt;You can try &lt;a href=&quot;https://github.com/dreampiggy/AVIFQuickLook&quot;&gt;AVIFQuickLook&lt;/a&gt; QuickLook plugin on macOS to view it in Finder.&lt;/p&gt; 
&lt;p&gt;You can also try using &lt;a href=&quot;https://kagami.github.io/avif.js/&quot;&gt;avif.js&lt;/a&gt; to view it online by using Chrome&#39;s AV1 codec.&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;SDWebImageAVIFCoder use &lt;a href=&quot;https://github.com/SDWebImage/SDWebImageAVIFCoder/actions&quot;&gt;GitHub Actions&lt;/a&gt; for testing. Each merge request will run the test cases to ensure the AVIF decoding/encoding function works.&lt;/p&gt; 
&lt;p&gt;Current test cases use macOS command line tools, to compare the AVIF sample decoding result with &lt;a href=&quot;https://www.imagemagick.org/&quot;&gt;ImageMagick&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We have also the XCTest unit test target, you can run it by using Xcode&#39;s Test action.&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;DreamPiggy, &lt;a href=&quot;mailto:lizhuoli1126@126.com&quot;&gt;lizhuoli1126@126.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributor&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ledyba-z&quot;&gt;ledyba-z&lt;/a&gt;, &lt;a href=&quot;mailto:ryo.hirafuji@gmail.com&quot;&gt;ryo.hirafuji@gmail.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;SDWebImageAVIFCoder is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AOMediaCodec/libavif&quot;&gt;libavif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://aomedia.googlesource.com/aom/&quot;&gt;aom&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/videolan/dav1d&quot;&gt;dav1d&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dreampiggy/AVIFQuickLook&quot;&gt;AVIFQuickLook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Kagami/avif.js&quot;&gt;avif.js&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>opa334/TrollStore</title>
      <link>https://github.com/opa334/TrollStore</link>
      <description>&lt;p&gt;Jailed iOS app that can install IPAs permanently with arbitary entitlements and root helpers because it trolls Apple&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TrollStore&lt;/h1&gt; 
&lt;p&gt;TrollStore is a permasigned jailed app that can permanently install any IPA you open in it.&lt;/p&gt; 
&lt;p&gt;It works because of an AMFI/CoreTrust bug where iOS does not correctly verify code signatures of binaries in which there are multiple signers.&lt;/p&gt; 
&lt;p&gt;Supported versions: 14.0 beta 2 - 16.6.1, 16.7 RC (20H18), 17.0&lt;/p&gt; 
&lt;h2&gt;Installing TrollStore&lt;/h2&gt; 
&lt;p&gt;For installing TrollStore, refer to the guides at &lt;a href=&quot;https://ios.cfw.guide/installing-trollstore&quot;&gt;ios.cfw.guide&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;16.7.x (excluding 16.7 RC) and 17.0.1+ will NEVER be supported (unless a third CoreTrust bug is discovered, which is unlikely).&lt;/p&gt; 
&lt;h2&gt;Updating TrollStore&lt;/h2&gt; 
&lt;p&gt;When a new TrollStore update is available, a button to install it will appear at the top in the TrollStore settings. After tapping the button, TrollStore will automatically download the update, install it, and respring.&lt;/p&gt; 
&lt;p&gt;Alternatively (if anything goes wrong), you can download the TrollStore.tar file under Releases and open it in TrollStore, TrollStore will install the update and respring.&lt;/p&gt; 
&lt;h2&gt;Uninstalling an app&lt;/h2&gt; 
&lt;p&gt;Apps installed from TrollStore can only be uninstalled from TrollStore itself, tap an app or swipe it to the left in the &#39;Apps&#39; tab to delete it.&lt;/p&gt; 
&lt;h2&gt;Persistence Helper&lt;/h2&gt; 
&lt;p&gt;The CoreTrust bug used in TrollStore is only enough to install &quot;System&quot; apps, this is because FrontBoard has an additional security check (it calls libmis) every time before a user app is launched. Unfortunately it is not possible to install new &quot;System&quot; apps that stay through an icon cache reload. Therefore, when iOS reloads the icon cache, all TrollStore installed apps including TrollStore itself will revert back to &quot;User&quot; state and will no longer launch.&lt;/p&gt; 
&lt;p&gt;The only way to work around this is to install a persistence helper into a system app, this helper can then be used to reregister TrollStore and its installed apps as &quot;System&quot; so that they become launchable again, an option for this is available in TrollStore settings.&lt;/p&gt; 
&lt;p&gt;On jailbroken iOS 14 when TrollHelper is used for installation, it is located in /Applications and will persist as a &quot;System&quot; app through icon cache reloads, therefore TrollHelper is used as the persistence helper on iOS 14.&lt;/p&gt; 
&lt;h2&gt;URL Scheme&lt;/h2&gt; 
&lt;p&gt;As of version 1.3, TrollStore replaces the system URL scheme &quot;apple-magnifier&quot; (this is done so &quot;jailbreak&quot; detections can&#39;t detect TrollStore like they could if TrollStore had a unique URL scheme). This URL scheme can be used to install applications right from the browser, or to enable JIT from the app itself (only 2.0.12 and above), the format goes as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;apple-magnifier://install?url=&amp;lt;URL_to_IPA&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;apple-magnifier://enable-jit?bundle-id=&amp;lt;Bundle_ID&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;On devices that don&#39;t have TrollStore (1.3+) installed, this will just open the magnifier app.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The binaries inside an IPA can have arbitrary entitlements, fakesign them with ldid and the entitlements you want (&lt;code&gt;ldid -S&amp;lt;path/to/entitlements.plist&amp;gt; &amp;lt;path/to/binary&amp;gt;&lt;/code&gt;) and TrollStore will preserve the entitlements when resigning them with the fake root certificate on installation. This gives you a lot of possibilities, some of which are explained below.&lt;/p&gt; 
&lt;h3&gt;Banned entitlements&lt;/h3&gt; 
&lt;p&gt;iOS 15 on A12+ has banned the following three entitlements related to running unsigned code, these are impossible to get without a PPL bypass, apps signed with them will crash on launch.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;com.apple.private.cs.debugger&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;dynamic-codesigning&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;com.apple.private.skip-library-validation&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Unsandboxing&lt;/h3&gt; 
&lt;p&gt;Your app can run unsandboxed using one of the following entitlements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.security.container-required&amp;lt;/key&amp;gt;
&amp;lt;false/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.security.no-container&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.security.no-sandbox&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The third one is recommended if you still want a sandbox container for your application.&lt;/p&gt; 
&lt;p&gt;You might also need the platform-application entitlement in order for these to work properly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;platform-application&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note that the platform-application entitlement causes side effects such as some parts of the sandbox becoming tighter, so you may need additional private entitlements to circumvent that. (For example afterwards you need an exception entitlement for every single IOKit user client class you want to access).&lt;/p&gt; 
&lt;p&gt;In order for an app with &lt;code&gt;com.apple.private.security.no-sandbox&lt;/code&gt; and &lt;code&gt;platform-application&lt;/code&gt; to be able to access it&#39;s own data container, you might need the additional entitlement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.security.storage.AppDataContainers&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Root Helpers&lt;/h3&gt; 
&lt;p&gt;When your app is not sandboxed, you can spawn other binaries using posix_spawn, you can also spawn binaries as root with the following entitlement:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;key&amp;gt;com.apple.private.persona-mgmt&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also add your own binaries into your app bundle.&lt;/p&gt; 
&lt;p&gt;Afterwards you can use the &lt;a href=&quot;https://raw.githubusercontent.com/opa334/TrollStore/main/Shared/TSUtil.m#L79&quot;&gt;spawnRoot function in TSUtil.m&lt;/a&gt; to spawn the binary as root.&lt;/p&gt; 
&lt;h3&gt;Things that are not possible using TrollStore&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Getting proper platformization (&lt;code&gt;TF_PLATFORM&lt;/code&gt; / &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Spawning a launch daemon (Would need &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Injecting a tweak into a system process (Would need &lt;code&gt;TF_PLATFORM&lt;/code&gt;, a userland PAC bypass and a PMAP trust level bypass)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compilation&lt;/h3&gt; 
&lt;p&gt;To compile TrollStore, ensure &lt;a href=&quot;https://theos.dev/docs/installation&quot;&gt;theos&lt;/a&gt; is installed. Additionaly ensure &lt;a href=&quot;https://brew.sh/&quot;&gt;brew&lt;/a&gt; is installed and install &lt;a href=&quot;https://formulae.brew.sh/formula/libarchive&quot;&gt;libarchive&lt;/a&gt; from brew.&lt;/p&gt; 
&lt;h2&gt;Credits and Further Reading&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/alfiecg_dev/&quot;&gt;@alfiecg_dev&lt;/a&gt; - Found the CoreTrust bug that allows TrollStore to work through patchdiffing and worked on automating the bypass.&lt;/p&gt; 
&lt;p&gt;Google Threat Analysis Group - Found the CoreTrust bug as part of an in-the-wild spyware chain and reported it to Apple.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/LinusHenze&quot;&gt;@LinusHenze&lt;/a&gt; - Found the installd bypass used to install TrollStore on iOS 14-15.6.1 via TrollHelperOTA, as well as the original CoreTrust bug used in TrollStore 1.0.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/rPTifU1lG7Q&quot;&gt;Fugu15 Presentation&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://worthdoingbadly.com/coretrust/&quot;&gt;Write-Up on the first CoreTrust bug with more information&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AFNetworking/AFNetworking</title>
      <link>https://github.com/AFNetworking/AFNetworking</link>
      <description>&lt;p&gt;A delightful networking framework for iOS, macOS, watchOS, and tvOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AFNetworking is Deprecated&lt;/h1&gt; 
&lt;p&gt;As of Jan. 17, 2023, AFNetworking is deprecated and there will be no further releases. This repo will remain online in perpetuity as an archive. There are a couple options for continued AFNetworking use:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Copy AFNetworking into your project and compile it directly. This gives you full control over the code.&lt;/li&gt; 
 &lt;li&gt;Fork AFNetworking and use the fork in your dependency manager. There will be no official forks but anyone can fork at any time and can even publish those forks under a different name, in accordance with AFNetworking&#39;s license.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Moving forward, Alamofire is the suggested migration path for networking in modern Swift. Anyone who needs help making that migration is welcome to ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt; and tag &lt;code&gt;alamofire&lt;/code&gt; and &lt;code&gt;afnetworking&lt;/code&gt;, or open a discussion on Alamofire&#39;s &lt;a href=&quot;https://github.com/Alamofire/Alamofire/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; regarding any migration issues or missing features.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.github.com/AFNetworking/AFNetworking/assets/afnetworking-logo.png&quot; alt=&quot;AFNetworking&quot; title=&quot;AFNetworking&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking/actions&quot;&gt;&lt;img src=&quot;https://github.com/AFNetworking/AFNetworking/workflows/AFNetworking%20CI/badge.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/cocoapods/v/AFNetworking.svg&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/AFNetworking.svg?sanitize=true&quot; alt=&quot;CocoaPods Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoadocs.org/docsets/AFNetworking&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/AFNetworking.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://twitter.com/AFNetworking&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/twitter-@AFNetworking-blue.svg?style=flat&quot; alt=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;AFNetworking is a delightful networking library for iOS, macOS, watchOS, and tvOS. It&#39;s built on top of the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url_loading_system&quot;&gt;Foundation URL Loading System&lt;/a&gt;, extending the powerful high-level networking abstractions built into Cocoa. It has a modular architecture with well-designed, feature-rich APIs that are a joy to use.&lt;/p&gt; 
&lt;p&gt;Perhaps the most important feature of all, however, is the amazing community of developers who use and contribute to AFNetworking every day. AFNetworking powers some of the most popular and critically-acclaimed apps on the iPhone, iPad, and Mac.&lt;/p&gt; 
&lt;h2&gt;How To Get Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking/archive/master.zip&quot;&gt;Download AFNetworking&lt;/a&gt; and try out the included Mac and iPhone example apps&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking&quot;&gt;&quot;Getting Started&quot; guide&lt;/a&gt;, &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-FAQ&quot;&gt;FAQ&lt;/a&gt;, or &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking/wiki&quot;&gt;other articles on the Wiki&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/afnetworking&quot;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;afnetworking&#39;)&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&quot;http://stackoverflow.com/questions/tagged/afnetworking&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, &lt;em&gt;and can provide steps to reliably reproduce it&lt;/em&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;AFNetworking supports multiple methods for installing the library in a project.&lt;/p&gt; 
&lt;h2&gt;Installation with CocoaPods&lt;/h2&gt; 
&lt;p&gt;To integrate AFNetworking into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;AFNetworking&#39;, &#39;~&amp;gt; 4.0&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installation with Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;Once you have your Swift package set up, adding AFNetworking as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/AFNetworking/AFNetworking.git&quot;, .upToNextMajor(from: &quot;4.0.0&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: AFNetworking&#39;s Swift package does not include it&#39;s UIKit extensions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Installation with Carthage&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate AFNetworking, add the following to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ogdl&quot;&gt;github &quot;AFNetworking/AFNetworking&quot; ~&amp;gt; 4.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;AFNetworking Version&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Minimum iOS Target&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Minimum macOS Target&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Minimum watchOS Target&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Minimum tvOS Target&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;4.x&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;iOS 9&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;macOS 10.10&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;watchOS 2.0&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;tvOS 9.0&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Xcode 11+ is required.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;3.x&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;iOS 7&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;OS X 10.9&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;watchOS 2.0&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;tvOS 9.0&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Xcode 7+ is required. &lt;code&gt;NSURLConnectionOperation&lt;/code&gt; support has been removed.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;2.6 -&amp;gt; 2.6.3&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;iOS 7&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;OS X 10.9&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;watchOS 2.0&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Xcode 7+ is required.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;2.0 -&amp;gt; 2.5.4&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;iOS 6&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;OS X 10.8&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Xcode 5+ is required. &lt;code&gt;NSURLSession&lt;/code&gt; subspec requires iOS 7 or OS X 10.9.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;1.x&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;iOS 5&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Mac OS X 10.7&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;0.10.x&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;iOS 4&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Mac OS X 10.6&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;(macOS projects must support &lt;a href=&quot;https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtVersionsPlatforms.html&quot;&gt;64-bit with modern Cocoa runtime&lt;/a&gt;).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Programming in Swift? Try &lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;Alamofire&lt;/a&gt; for a more conventional set of APIs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;h3&gt;NSURLSession&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;AFURLSessionManager&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AFHTTPSessionManager&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Serialization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;AFURLRequestSerialization&amp;gt;&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;AFHTTPRequestSerializer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;AFJSONRequestSerializer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;AFPropertyListRequestSerializer&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;AFURLResponseSerialization&amp;gt;&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;AFHTTPResponseSerializer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;AFJSONResponseSerializer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;AFXMLParserResponseSerializer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;AFXMLDocumentResponseSerializer&lt;/code&gt; &lt;em&gt;(macOS)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;AFPropertyListResponseSerializer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;AFImageResponseSerializer&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;AFCompoundResponseSerializer&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Additional Functionality&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;AFSecurityPolicy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AFNetworkReachabilityManager&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;AFURLSessionManager&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;AFURLSessionManager&lt;/code&gt; creates and manages an &lt;code&gt;NSURLSession&lt;/code&gt; object based on a specified &lt;code&gt;NSURLSessionConfiguration&lt;/code&gt; object, which conforms to &lt;code&gt;&amp;lt;NSURLSessionTaskDelegate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSURLSessionDataDelegate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSURLSessionDownloadDelegate&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;NSURLSessionDelegate&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Creating a Download Task&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];

NSURL *URL = [NSURL URLWithString:@&quot;http://example.com/download.zip&quot;];
NSURLRequest *request = [NSURLRequest requestWithURL:URL];

NSURLSessionDownloadTask *downloadTask = [manager downloadTaskWithRequest:request progress:nil destination:^NSURL *(NSURL *targetPath, NSURLResponse *response) {
    NSURL *documentsDirectoryURL = [[NSFileManager defaultManager] URLForDirectory:NSDocumentDirectory inDomain:NSUserDomainMask appropriateForURL:nil create:NO error:nil];
    return [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];
} completionHandler:^(NSURLResponse *response, NSURL *filePath, NSError *error) {
    NSLog(@&quot;File downloaded to: %@&quot;, filePath);
}];
[downloadTask resume];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Creating an Upload Task&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];

NSURL *URL = [NSURL URLWithString:@&quot;http://example.com/upload&quot;];
NSURLRequest *request = [NSURLRequest requestWithURL:URL];

NSURL *filePath = [NSURL fileURLWithPath:@&quot;file://path/to/image.png&quot;];
NSURLSessionUploadTask *uploadTask = [manager uploadTaskWithRequest:request fromFile:filePath progress:nil completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {
    if (error) {
        NSLog(@&quot;Error: %@&quot;, error);
    } else {
        NSLog(@&quot;Success: %@ %@&quot;, response, responseObject);
    }
}];
[uploadTask resume];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Creating an Upload Task for a Multi-Part Request, with Progress&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;NSMutableURLRequest *request = [[AFHTTPRequestSerializer serializer] multipartFormRequestWithMethod:@&quot;POST&quot; URLString:@&quot;http://example.com/upload&quot; parameters:nil constructingBodyWithBlock:^(id&amp;lt;AFMultipartFormData&amp;gt; formData) {
        [formData appendPartWithFileURL:[NSURL fileURLWithPath:@&quot;file://path/to/image.jpg&quot;] name:@&quot;file&quot; fileName:@&quot;filename.jpg&quot; mimeType:@&quot;image/jpeg&quot; error:nil];
    } error:nil];

AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];

NSURLSessionUploadTask *uploadTask;
uploadTask = [manager
              uploadTaskWithStreamedRequest:request
              progress:^(NSProgress * _Nonnull uploadProgress) {
                  // This is not called back on the main queue.
                  // You are responsible for dispatching to the main queue for UI updates
                  dispatch_async(dispatch_get_main_queue(), ^{
                      //Update the progress view
                      [progressView setProgress:uploadProgress.fractionCompleted];
                  });
              }
              completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {
                  if (error) {
                      NSLog(@&quot;Error: %@&quot;, error);
                  } else {
                      NSLog(@&quot;%@ %@&quot;, response, responseObject);
                  }
              }];

[uploadTask resume];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Creating a Data Task&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];

NSURL *URL = [NSURL URLWithString:@&quot;http://httpbin.org/get&quot;];
NSURLRequest *request = [NSURLRequest requestWithURL:URL];

NSURLSessionDataTask *dataTask = [manager dataTaskWithRequest:request completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {
    if (error) {
        NSLog(@&quot;Error: %@&quot;, error);
    } else {
        NSLog(@&quot;%@ %@&quot;, response, responseObject);
    }
}];
[dataTask resume];
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Request Serialization&lt;/h3&gt; 
&lt;p&gt;Request serializers create requests from URL strings, encoding parameters as either a query string or HTTP body.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;NSString *URLString = @&quot;http://example.com&quot;;
NSDictionary *parameters = @{@&quot;foo&quot;: @&quot;bar&quot;, @&quot;baz&quot;: @[@1, @2, @3]};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Query String Parameter Encoding&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;[[AFHTTPRequestSerializer serializer] requestWithMethod:@&quot;GET&quot; URLString:URLString parameters:parameters error:nil];
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;GET http://example.com?foo=bar&amp;amp;baz[]=1&amp;amp;baz[]=2&amp;amp;baz[]=3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;URL Form Parameter Encoding&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;[[AFHTTPRequestSerializer serializer] requestWithMethod:@&quot;POST&quot; URLString:URLString parameters:parameters error:nil];
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;POST http://example.com/
Content-Type: application/x-www-form-urlencoded

foo=bar&amp;amp;baz[]=1&amp;amp;baz[]=2&amp;amp;baz[]=3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JSON Parameter Encoding&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;[[AFJSONRequestSerializer serializer] requestWithMethod:@&quot;POST&quot; URLString:URLString parameters:parameters error:nil];
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;POST http://example.com/
Content-Type: application/json

{&quot;foo&quot;: &quot;bar&quot;, &quot;baz&quot;: [1,2,3]}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Network Reachability Manager&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;AFNetworkReachabilityManager&lt;/code&gt; monitors the reachability of domains, and addresses for both WWAN and WiFi network interfaces.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Do not use Reachability to determine if the original request should be sent. 
  &lt;ul&gt; 
   &lt;li&gt;You should try to send it.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;You can use Reachability to determine when a request should be automatically retried. 
  &lt;ul&gt; 
   &lt;li&gt;Although it may still fail, a Reachability notification that the connectivity is available is a good time to retry something.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Network reachability is a useful tool for determining why a request might have failed. 
  &lt;ul&gt; 
   &lt;li&gt;After a network request has failed, telling the user they&#39;re offline is better than giving them a more technical but accurate error, such as &quot;request timed out.&quot;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2012-706/&quot;&gt;WWDC 2012 session 706, &quot;Networking Best Practices.&quot;&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Shared Network Reachability&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;[[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
    NSLog(@&quot;Reachability: %@&quot;, AFStringFromNetworkReachabilityStatus(status));
}];

[[AFNetworkReachabilityManager sharedManager] startMonitoring];
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Security Policy&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;AFSecurityPolicy&lt;/code&gt; evaluates server trust against pinned X.509 certificates and public keys over secure connections.&lt;/p&gt; 
&lt;p&gt;Adding pinned SSL certificates to your app helps prevent man-in-the-middle attacks and other vulnerabilities. Applications dealing with sensitive customer data or financial information are strongly encouraged to route all communication over an HTTPS connection with SSL pinning configured and enabled.&lt;/p&gt; 
&lt;h4&gt;Allowing Invalid SSL Certificates&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
manager.securityPolicy.allowInvalidCertificates = YES; // not recommended for production
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Unit Tests&lt;/h2&gt; 
&lt;p&gt;AFNetworking includes a suite of unit tests within the Tests subdirectory. These tests can be run simply be executed the test action on the platform framework you would like to test.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;AFNetworking is owned and maintained by the &lt;a href=&quot;http://alamofire.org&quot;&gt;Alamofire Software Foundation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;AFNetworking was originally created by &lt;a href=&quot;https://github.com/sco/&quot;&gt;Scott Raymond&lt;/a&gt; and &lt;a href=&quot;https://github.com/mattt/&quot;&gt;Mattt Thompson&lt;/a&gt; in the development of &lt;a href=&quot;http://en.wikipedia.org/wiki/Gowalla&quot;&gt;Gowalla for iPhone&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;AFNetworking&#39;s logo was designed by &lt;a href=&quot;http://www.alandefibaugh.com/&quot;&gt;Alan Defibaugh&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;And most of all, thanks to AFNetworking&#39;s &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking/contributors&quot;&gt;growing list of contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Security Disclosure&lt;/h3&gt; 
&lt;p&gt;If you believe you have identified a security vulnerability with AFNetworking, you should report it as soon as possible via email to &lt;a href=&quot;mailto:security@alamofire.org&quot;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;AFNetworking is released under the MIT license. See &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking/raw/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>adjust/ios_sdk</title>
      <link>https://github.com/adjust/ios_sdk</link>
      <description>&lt;p&gt;This is the iOS SDK of&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Adjust SDK for iOS&lt;/h1&gt; 
&lt;p&gt;This is the &lt;a href=&quot;https://adjust.com&quot;&gt;Adjust&lt;/a&gt;™ SDK for iOS. Documentation is available on our help center in the following languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.adjust.com/en/developer/ios-sdk-documentation&quot;&gt;English&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.adjust.com/zh/developer/ios-sdk-documentation&quot;&gt;中文&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.adjust.com/ja/developer/ios-sdk-documentation&quot;&gt;日本語&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.adjust.com/ko/developer/ios-sdk-documentation&quot;&gt;한국어&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Distributed under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT license&lt;/a&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/adjust/ios_sdk/master/MIT-LICENSE&quot;&gt;&lt;code&gt;MIT-LICENSE&lt;/code&gt;&lt;/a&gt; for the full text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gnachman/iTerm2</title>
      <link>https://github.com/gnachman/iTerm2</link>
      <description>&lt;p&gt;iTerm2 is a terminal emulator for Mac OS X that does amazing things.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This site hosts code for &lt;a href=&quot;https://iterm2.com&quot;&gt;iTerm2&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/gnachman/iTerm2&quot;&gt;&lt;img src=&quot;https://travis-ci.org/gnachman/iTerm2.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/gnachman/iTerm2?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/gnachman/iTerm2/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://iterm2.com/bugs&quot;&gt;File a bug report here!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Issues are on &lt;a href=&quot;https://gitlab.com/gnachman/iterm2/issues&quot;&gt;Gitlab&lt;/a&gt; because Github barely supports issue attachments.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/gnachman/iterm2/wikis/HowToBuild&quot;&gt;How do I build this thing?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/gnachman/iterm2/-/wikis/How-to-Contribute&quot;&gt;How do I contribute changes?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://iterm2.com/downloads.html&quot;&gt;Downloads&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>googlemaps/google-maps-ios-utils</title>
      <link>https://github.com/googlemaps/google-maps-ios-utils</link>
      <description>&lt;p&gt;Google Maps SDK for iOS Utility Library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/googlemaps/google-maps-ios-utils/workflows/Build%20and%20Test/badge.svg?sanitize=true&quot; alt=&quot;Run unit tests&quot; /&gt; &lt;a href=&quot;https://cocoapods.org/pods/Google-Maps-iOS-Utils&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Google-Maps-iOS-Utils.svg?sanitize=true&quot; alt=&quot;pod&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/googlemaps/google-maps-ios-utils&quot; alt=&quot;GitHub contributors&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/license-Apache-blue&quot; alt=&quot;Apache-2.0&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Google Maps SDK for iOS Utility Library&lt;/h1&gt; 
&lt;h2&gt;Description&lt;/h2&gt; 
&lt;p&gt;This open-source library contains classes that are useful for a wide range of applications using the &lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk&quot;&gt;Google Maps SDK for iOS&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Geometry libraries&lt;/strong&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/GeometryRendering.md&quot;&gt;KML and GeoJSON rendering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Geometry utilities&lt;/strong&gt; - Handy spherical &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/GeometryUtils.md&quot;&gt;geometry utility&lt;/a&gt; functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Heatmaps&lt;/strong&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/HeatmapRendering.md&quot;&gt;Heatmap rendering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Marker clustering&lt;/strong&gt; — handles the display of a large number of points&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Marker customization&lt;/strong&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/CustomMarkers.md&quot;&gt;display custom markers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Quadtree data structure&lt;/strong&gt; - indexes 2D geometry points and performs 2D range queries&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;“80%&amp;quot;&quot; vspace=&quot;“10&amp;quot;&quot; src=&quot;https://cloud.githubusercontent.com/assets/4.2.2feeb4.2.2c-4.2.2ec4.2.2a7fb3ae.png&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 15.0+&lt;/li&gt; 
 &lt;li&gt;Xcode 15.0+&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk&quot;&gt;Maps SDK for iOS&lt;/a&gt; (see &lt;a href=&quot;https://github.com/googlemaps/google-maps-ios-utils/releases&quot;&gt;Releases&lt;/a&gt; for minimum compatible version)&lt;/li&gt; 
 &lt;li&gt;A Google Maps Platform &lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk/get-api-key&quot;&gt;API key&lt;/a&gt; from a project with the &lt;strong&gt;Maps SDK for iOS&lt;/strong&gt; enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk/config#download-sdk&quot;&gt;Include the &lt;code&gt;GoogleMaps&lt;/code&gt; dependency&lt;/a&gt; using one of the available installation options (Swift Package Manager, CocoaPods, or manual).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add this utility library using one of the options below:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Follow the instructions for &lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding-package-dependencies-to-your-app&quot;&gt;adding package dependencies to your app in Xcode&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the &quot;Enter Package URL&quot; field, enter this GitHub repository:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;https://github.com/googlemaps/google-maps-ios-utils
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] You also need to install the Maps SDK for iOS, which is also supported in Swift Package Manager at the URL &lt;code&gt;https://github.com/googlemaps/ios-maps-sdk&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Select the &lt;a href=&quot;https://github.com/googlemaps/google-maps-ios-utils/releases&quot;&gt;version&lt;/a&gt; of the Maps SDK for iOS Utility Library that you want to use. For new projects, we recommend specifying the latest version and using the &quot;Up to next Major&quot; option. See Release Notes for &lt;a href=&quot;https://github.com/googlemaps/google-maps-ios-utils/releases&quot;&gt;this library&lt;/a&gt; and the &lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk/release-notes&quot;&gt;Maps SDK for iOS&lt;/a&gt; to select the correct version for you.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;(Recommended) Version 6.x supports the Maps SDK for iOS v9.x&lt;/li&gt; 
   &lt;li&gt;Version 5.0 supports the Maps SDK for iOS v8.x&lt;/li&gt; 
   &lt;li&gt;Version 4.2.2 supports the Maps SDK for iOS v7.x&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Follow the &lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk/config#get-key&quot;&gt;instructions&lt;/a&gt; to add your API key to your app.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/#importing&quot;&gt;Importing&lt;/a&gt; section for import statements specific to SPM installation.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;&lt;a href=&quot;https://guides.cocoapods.org/using/using-cocoapods.html&quot;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;In your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;use_frameworks!

target &#39;TARGET_NAME&#39; do
  pod &#39;GoogleMaps&#39;, &#39;10.0.0&#39;
  pod &#39;Google-Maps-iOS-Utils&#39;, &#39;6.1.3&#39; # x-release-please-version
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(You can omit the comment &quot;x-release-please-start-version&quot; which is used for release automation.) Replace &lt;code&gt;TARGET_NAME&lt;/code&gt; and save the &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;At the command line in directory containing your &lt;code&gt;Podfile&lt;/code&gt;, run:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pod install
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;.xcworkspace&lt;/code&gt; file that is created.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Follow the &lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk/config#get-key&quot;&gt;instructions&lt;/a&gt; to add your API key to your app.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/#importing&quot;&gt;Importing&lt;/a&gt; section for import statements specific to CocoaPods installation.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Only supported if using Maps SDK v6.1.3 or earlier&lt;/summary&gt; 
 &lt;p&gt;In your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;github &quot;googlemaps/google-maps-ios-utils&quot; ~&amp;gt; 6.1.3
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs/Carthage.md&quot;&gt;Carthage doc&lt;/a&gt; for further installation instructions.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Sample App&lt;/h2&gt; 
&lt;p&gt;See the README for the Swift and Objective-C samples apps in &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/samples&quot;&gt;/samples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Read documentation about this utility library on &lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk/utility/&quot;&gt;developers.google.com&lt;/a&gt; or within the &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/docs&quot;&gt;/docs&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Importing&lt;/h3&gt; 
&lt;p&gt;You may also need to &lt;code&gt;import GoogleMaps&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Swift:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import GoogleMapsUtils
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Objective-C:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;@import GoogleMapsUtils;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Clustering markers&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import GoogleMaps
import GoogleMapsUtils

class MarkerClustering: UIViewController, GMSMapViewDelegate {
  private var mapView: GMSMapView!
  private var clusterManager: GMUClusterManager!

  override func viewDidLoad() {
    super.viewDidLoad()

    // Set up the cluster manager with the supplied icon generator and
    // renderer.
    let iconGenerator = GMUDefaultClusterIconGenerator()
    let algorithm = GMUNonHierarchicalDistanceBasedAlgorithm()
    let renderer = GMUDefaultClusterRenderer(mapView: mapView,
                                clusterIconGenerator: iconGenerator)
    clusterManager = GMUClusterManager(map: mapView, algorithm: algorithm,
                                                      renderer: renderer)

    // Register self to listen to GMSMapViewDelegate events.
    clusterManager.setMapDelegate(self)
    // ...
  }
  // ...
}

let markerArray = [marker1, marker2, marker3, marker4] // define your own markers
clusterManager.add(markerArray)

clusterManager.cluster()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Displaying KML data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import GoogleMaps
import GoogleMapsUtils

func renderKml() {
    // Parse KML
    let path: String = // Path to your KML file...
    let kmlUrl = URL(fileURLWithPath: path)
    let kmlParser = GMUKmlParser(url: kmlUrl)
    kmlParser.parse()

    // Render parsed KML
    let renderer = GMUGeometryRenderer(
        map: mapView,
        geometries: kmlParser.placemarks,
        styles: kmlParser.styles,
        styleMaps: kmlParser.styleMaps
    )
    renderer.render()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome and encouraged. Please see the &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; for guidance.&lt;/p&gt; 
&lt;h2&gt;Terms of Service&lt;/h2&gt; 
&lt;p&gt;This library uses Google Maps Platform services. Use of Google Maps Platform services through this library is subject to the Google Maps Platform &lt;a href=&quot;https://cloud.google.com/maps-platform/terms&quot;&gt;Terms of Service&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;European Economic Area (EEA) developers&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If your billing address is in the European Economic Area, effective on 8 July 2025, the &lt;a href=&quot;https://cloud.google.com/terms/maps-platform/eea&quot;&gt;Google Maps Platform EEA Terms of Service&lt;/a&gt; will apply to your use of the Services. &lt;a href=&quot;https://developers.devsite.corp.google.com/maps/comms/eea/faq&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This library is not a Google Maps Platform Core Service. Therefore, the Google Maps Platform Terms of Service (e.g. Technical Support Services, Service Level Agreements, and Deprecation Policy) do not apply to the code in this library.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;This library is offered via an open source &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/LICENSE&quot;&gt;license&lt;/a&gt;. It is not governed by the Google Maps Platform Support &lt;a href=&quot;https://cloud.google.com/maps-platform/terms/tssg&quot;&gt;Technical Support Services Guidelines&lt;/a&gt;, the &lt;a href=&quot;https://cloud.google.com/maps-platform/terms/sla&quot;&gt;SLA&lt;/a&gt;, or the &lt;a href=&quot;https://cloud.google.com/maps-platform/terms&quot;&gt;Deprecation Policy&lt;/a&gt; (however, any Google Maps Platform services used by the library remain subject to the Google Maps Platform Terms of Service).&lt;/p&gt; 
&lt;p&gt;This library adheres to &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt; to indicate when backwards-incompatible changes are introduced. Accordingly, while the library is in version 0.x, backwards-incompatible changes may be introduced at any time.&lt;/p&gt; 
&lt;p&gt;If you find a bug, or have a feature request, please file an &lt;a href=&quot;https://github.com/googlemaps/google-maps-ios-utils/issues&quot;&gt;issue&lt;/a&gt; on GitHub. If you would like to get answers to technical questions from other Google Maps Platform developers, ask through one of our &lt;a href=&quot;https://developers.google.com/maps/developer-community&quot;&gt;developer community channels&lt;/a&gt;. If you&#39;d like to contribute, please check the &lt;a href=&quot;https://raw.githubusercontent.com/googlemaps/google-maps-ios-utils/main/CONTRIBUTING.md&quot;&gt;contributing&lt;/a&gt; guide.&lt;/p&gt; 
&lt;p&gt;You can also discuss this library on our &lt;a href=&quot;https://discord.gg/hYsWbmk&quot;&gt;Discord server&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/gtm-session-fetcher</title>
      <link>https://github.com/google/gtm-session-fetcher</link>
      <description>&lt;p&gt;Google Toolbox for Mac - Session Fetcher&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Toolbox for Mac - Session Fetcher&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Project site&lt;/strong&gt; &lt;a href=&quot;https://github.com/google/gtm-session-fetcher&quot;&gt;https://github.com/google/gtm-session-fetcher&lt;/a&gt;&lt;br /&gt; &lt;strong&gt;Discussion group&lt;/strong&gt; &lt;a href=&quot;http://groups.google.com/group/google-toolbox-for-mac&quot;&gt;http://groups.google.com/group/google-toolbox-for-mac&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/swiftpm.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/swiftpm.yml/badge.svg?branch=main&quot; alt=&quot;SwiftPM&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/cocoapods.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/cocoapods.yml/badge.svg?branch=main&quot; alt=&quot;CocoaPods&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/bazel.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/gtm-session-fetcher/actions/workflows/bazel.yml/badge.svg?branch=main&quot; alt=&quot;Bazel&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;GTMSessionFetcher&lt;/code&gt; makes it easy for Cocoa applications to perform http operations. The fetcher is implemented as a wrapper on &lt;code&gt;NSURLSession&lt;/code&gt;, so its behavior is asynchronous and uses operating-system settings.&lt;/p&gt; 
&lt;p&gt;Features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple to build; only one source/header file pair is required&lt;/li&gt; 
 &lt;li&gt;Simple to use: takes just two lines of code to fetch a request&lt;/li&gt; 
 &lt;li&gt;Supports upload and download sessions&lt;/li&gt; 
 &lt;li&gt;Flexible cookie storage&lt;/li&gt; 
 &lt;li&gt;Automatic retry on errors, with exponential backoff&lt;/li&gt; 
 &lt;li&gt;Support for generating multipart MIME upload streams&lt;/li&gt; 
 &lt;li&gt;Easy, convenient logging of http requests and responses&lt;/li&gt; 
 &lt;li&gt;Supports plug-in authentication such as with GTMAppAuth&lt;/li&gt; 
 &lt;li&gt;Easily testable; self-mocking&lt;/li&gt; 
 &lt;li&gt;Automatic rate limiting when created by the &lt;code&gt;GTMSessionFetcherService&lt;/code&gt; factory class&lt;/li&gt; 
 &lt;li&gt;Fully independent of other projects&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;To get started&lt;/strong&gt; please read &lt;a href=&quot;https://raw.githubusercontent.com/google/gtm-session-fetcher/main/USING.md&quot;&gt;USING.md&lt;/a&gt; for detailed information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git-up/GitUp</title>
      <link>https://github.com/git-up/GitUp</link>
      <description>&lt;p&gt;The Git interface you&#39;ve been missing all your life has finally arrived.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/git-up/GitUp&quot;&gt;&lt;img src=&quot;https://travis-ci.org/git-up/GitUp.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;GitUp&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Work quickly, safely, and without headaches. The Git interface you&#39;ve been missing all your life has finally arrived.&lt;/strong&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://i.imgur.com/JuQIxJu.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;img src=&quot;https://i.imgur.com/9rgXktz.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;Git recently celebrated its 10 years anniversary, but most engineers are still confused by its intricacy (3 of the &lt;a href=&quot;http://stackoverflow.com/questions?sort=votes&quot;&gt;top 5 questions of all time&lt;/a&gt; on Stack Overflow are Git related). Since Git turns even simple actions into mystifying commands (“git add” to stage versus “git reset HEAD” to unstage anyone?), it’s no surprise users waste time, get frustrated, distract the rest of their team for help, or worse, screw up their repo!&lt;/p&gt; 
&lt;p&gt;GitUp is a bet to invent a new Git interaction model that lets engineers of all levels work quickly, safely, and without headaches. It&#39;s unlike any other Git client out there from the way it’s built (it interacts directly with the Git database on disk), to the way it works (you manipulate the repository graph instead of manipulating commits).&lt;/p&gt; 
&lt;p&gt;With GitUp, you get a truly efficient Git client for Mac:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &lt;strong&gt;live and interactive repo graph&lt;/strong&gt; (edit, reorder, fixup, merge commits…),&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Unlimited undo / redo&lt;/strong&gt; of almost all operations (even rebases and merges),&lt;/li&gt; 
 &lt;li&gt;Time Machine like &lt;strong&gt;snapshots for 1-click rollbacks&lt;/strong&gt; to previous repo states,&lt;/li&gt; 
 &lt;li&gt;Features that don’t even exist natively in Git like a &lt;strong&gt;visual commit splitter&lt;/strong&gt; or a &lt;strong&gt;unified reflog browser&lt;/strong&gt;,&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Instant search across the entire repo&lt;/strong&gt; including diff contents,&lt;/li&gt; 
 &lt;li&gt;A &lt;strong&gt;ridiculously fast UI&lt;/strong&gt;, often faster than the command line.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;GitUp was created by &lt;a href=&quot;https://github.com/swisspol&quot;&gt;@swisspol&lt;/a&gt; in late 2014 as a bet to reinvent the way developers interact with Git. After several months of work, it was made available in pre-release early 2015 and reached the &lt;a href=&quot;https://news.ycombinator.com/item?id=9653978&quot;&gt;top of Hacker News&lt;/a&gt; along with being &lt;a href=&quot;http://www.producthunt.com/tech/gitup-1&quot;&gt;featured by Product Hunt&lt;/a&gt; and &lt;a href=&quot;http://daringfireball.net/linked/2015/06/04/gitup&quot;&gt;Daring Fireball&lt;/a&gt;. 30,000 lines of code later, GitUp reached 1.0 mid-August 2015 and was released open source as a gift to the developer community.&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official website: &lt;a href=&quot;https://gitup.co&quot;&gt;https://gitup.co&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Download:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Latest release on GitHub: &lt;a href=&quot;https://github.com/git-up/GitUp/releases&quot;&gt;https://github.com/git-up/GitUp/releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Homebrew (Not maintained by GitUp developers): &lt;code&gt;brew install homebrew/cask/gitup&lt;/code&gt; (Note: There is already a formula called gitup, so the full name must be specified!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&quot;https://github.com/git-up/GitUp/wiki&quot;&gt;docs&lt;/a&gt; and use &lt;a href=&quot;https://github.com/git-up/GitUp/issues&quot;&gt;GitHub Issues&lt;/a&gt; for support &amp;amp; feedback.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Releases notes are available at &lt;a href=&quot;https://github.com/git-up/GitUp/releases&quot;&gt;https://github.com/git-up/GitUp/releases&lt;/a&gt;. Builds tagged with a &lt;code&gt;v&lt;/code&gt; (e.g. &lt;code&gt;v1.2.3&lt;/code&gt;) are released on the &quot;Stable&quot; channel, while builds tagged with a &lt;code&gt;b&lt;/code&gt; (e.g. &lt;code&gt;b1234&lt;/code&gt;) are only released on the &quot;Continuous&quot; channel. You can change the update channel used by GitUp in the app preferences.&lt;/p&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;To build GitUp yourself, simply run the command &lt;code&gt;git clone --recursive https://github.com/git-up/GitUp.git&lt;/code&gt; in Terminal, then open the &lt;code&gt;GitUp/GitUp.xcodeproj&lt;/code&gt; Xcode project and hit Run.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; If you do not have an Apple ID with a developer account for code signing Mac apps, the build will fail with a code signing error. Simply delete the &quot;Code Signing Identity&quot; build setting of the &quot;Application&quot; target to work around the issue:&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;http://i.imgur.com/dWpJExk.png&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, if you do have a developer account, you can create the file &quot;Xcode-Configurations/DEVELOPMENT_TEAM.xcconfig&quot; with the following build setting as its content:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;DEVELOPMENT_TEAM = [Your TeamID]&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For a more detailed description of this, you can have a look at the comments at the end of the file &quot;Xcode-Configurations/Base.xcconfig&quot;.&lt;/p&gt; 
&lt;h1&gt;GitUpKit&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;GitUp is built as a thin layer on top of a reusable generic Git toolkit called &quot;GitUpKit&quot;. This means that you can use that same GitUpKit framework to build your very own Git UI!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;GitUpKit has a very different goal than &lt;a href=&quot;https://github.com/libgit2/objective-git&quot;&gt;ObjectiveGit&lt;/a&gt;. Instead of offering extensive raw bindings to &lt;a href=&quot;https://github.com/libgit2/libgit2&quot;&gt;libgit2&lt;/a&gt;, GitUpKit only uses a minimal subset of libgit2 and reimplements everything else on top of it (it has its own &quot;rebase engine&quot; for instance). This allows it to expose a very tight and consistent API, that completely follows Obj-C conventions and hides away the libgit2 complexity and sometimes inconsistencies. GitUpKit adds on top of that a number of exclusive and powerful features, from undo/redo and Time Machine like snapshots, to entire drop-in UI components.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;The GitUpKit source code is organized as 2 independent layers communicating only through the use of public APIs:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Base Layer (depends on Foundation only and is compatible with OS X and iOS)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Core/&lt;/code&gt;: wrapper around the required minimal functionality of &lt;a href=&quot;https://github.com/libgit2/libgit2&quot;&gt;libgit2&lt;/a&gt;, on top of which is then implemented all the Git functionality required by GitUp (note that GitUp uses a &lt;a href=&quot;https://github.com/git-up/libgit2/tree/gitup&quot;&gt;slightly customized fork&lt;/a&gt; of libgit2)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Extensions/&lt;/code&gt;: categories on the &lt;code&gt;Core&lt;/code&gt; classes to add convenience features implemented only using the public APIs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;UI Layer (depends on AppKit and is compatible with OS X only)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Interface/&lt;/code&gt;: low-level view classes e.g. &lt;code&gt;GIGraphView&lt;/code&gt; to render the GitUp Map view&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Utilities/&lt;/code&gt;: interface utility classes e.g. the base view controller class &lt;code&gt;GIViewController&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Components/&lt;/code&gt;: reusable single-view view controllers e.g. &lt;code&gt;GIDiffContentsViewController&lt;/code&gt; to render a diff&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Views/&lt;/code&gt;: high-level reusable multi-views view controllers e.g. &lt;code&gt;GIAdvancedCommitViewController&lt;/code&gt; to implement the entire GitUp Advanced Commit view&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: If the preprocessor constant &lt;code&gt;DEBUG&lt;/code&gt; is defined to a non-zero value when building GitUpKit (this is the default when building in &quot;Debug&quot; configuration), a number of extra consistency checks are enabled at run time as well as extra logging. Be aware that this overhead can significantly affect performance.&lt;/p&gt; 
&lt;h2&gt;GitUpKit API&lt;/h2&gt; 
&lt;p&gt;Using the GitUpKit API should be pretty straightforward since it is organized by functionality (e.g. repository, branches, commits, interface components, etc...) and a best effort has been made to name functions clearly.&lt;/p&gt; 
&lt;p&gt;Regarding the &quot;Core&quot; APIs, the best way to learn them is to peruse the associated unit tests - for instance see &lt;a href=&quot;https://raw.githubusercontent.com/git-up/GitUp/master/GitUpKit/Core/GCBranch-Tests.m&quot;&gt;the branch tests&lt;/a&gt; for the branch API.&lt;/p&gt; 
&lt;p&gt;Here is some sample code to get you started (error handling is left as an exercise to the reader):&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Opening and browsing a repository:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// Open repo
GCRepository* repo = [[GCRepository alloc] initWithExistingLocalRepository:&amp;lt;PATH&amp;gt; error:NULL];

// Make sure repo is clean
assert([repo checkClean:kGCCleanCheckOption_IgnoreUntrackedFiles error:NULL]);

// List all branches
NSArray* branches = [repo listAllBranches:NULL];
NSLog(@&quot;%@&quot;, branches);

// Lookup HEAD
GCLocalBranch* headBranch;  // This would be nil if the HEAD is detached
GCCommit* headCommit;
[repo lookupHEADCurrentCommit:&amp;amp;headCommit branch:&amp;amp;headBranch error:NULL];
NSLog(@&quot;%@ = %@&quot;, headBranch, headCommit);

// Load the *entire* repo history in memory for fast access, including all commits, branches and tags
GCHistory* history = [repo loadHistoryUsingSorting:kGCHistorySorting_ReverseChronological error:NULL];
assert(history);
NSLog(@&quot;%lu commits total&quot;, history.allCommits.count);
NSLog(@&quot;%@\n%@&quot;, history.rootCommits, history.leafCommits);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Modifying a repository:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// Take a snapshot of the repo
GCSnapshot* snapshot = [repo takeSnapshot:NULL];

// Create a new branch and check it out
GCLocalBranch* newBranch = [repo createLocalBranchFromCommit:headCommit withName:@&quot;temp&quot; force:NO error:NULL];
NSLog(@&quot;%@&quot;, newBranch);
assert([repo checkoutLocalBranch:newBranch options:0 error:NULL]);

// Add a file to the index
[[NSData data] writeToFile:[repo.workingDirectoryPath stringByAppendingPathComponent:@&quot;empty.data&quot;] atomically:YES];
assert([repo addFileToIndex:@&quot;empty.data&quot; error:NULL]);

// Check index status
GCDiff* diff = [repo diffRepositoryIndexWithHEAD:nil options:0 maxInterHunkLines:0 maxContextLines:0 error:NULL];
assert(diff.deltas.count == 1);
NSLog(@&quot;%@&quot;, diff);

// Create a commit
GCCommit* newCommit = [repo createCommitFromHEADWithMessage:@&quot;Added file&quot; error:NULL];
assert(newCommit);
NSLog(@&quot;%@&quot;, newCommit);

// Restore repo to saved snapshot before topic branch and commit were created
BOOL success = [repo restoreSnapshot:snapshot withOptions:kGCSnapshotOption_IncludeAll reflogMessage:@&quot;Rolled back&quot; didUpdateReferences:NULL error:NULL];
assert(success);
  
// Make sure topic branch is gone
assert([repo findLocalBranchWithName:@&quot;temp&quot; error:NULL] == nil);
  
// Update workdir and index to match HEAD
assert([repo resetToHEAD:kGCResetMode_Hard error:NULL]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Complete Example #1: GitDown&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitDown&quot;&gt;GitDown&lt;/a&gt; is a very basic app that prompts the user for a repo and displays an interactive and live-updating list of its stashes (all with ~20 lines of code in &lt;code&gt;-[AppDelegate applicationDidFinishLaunching:]&lt;/code&gt;):&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;http://i.imgur.com/ZfxM7su.png&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;Through GitUpKit, this basic app also gets for free unlimited undo/redo, unified and side-by-side diffs, text selection and copy, keyboard shortcuts, etc...&lt;/p&gt; 
&lt;p&gt;This source code also demonstrates how to use some other GitUpKit view controllers as well as building a customized one.&lt;/p&gt; 
&lt;h2&gt;Complete Example #2: GitDiff&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitDiff&quot;&gt;GitDiff&lt;/a&gt; demonstrates how to create a view controller that displays a live updating diff between &lt;code&gt;HEAD&lt;/code&gt; and the workdir à la &lt;code&gt;git diff HEAD&lt;/code&gt;:&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;http://i.imgur.com/29hxDcJ.png&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Complete Example #3: GitY&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitY&quot;&gt;GitY&lt;/a&gt; is a &lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;GitX&lt;/a&gt; clone built using GitUpKit and less than 200 lines of code:&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;http://i.imgur.com/6cuPcT4.png&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Complete Example #4: iGit&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/iGit&quot;&gt;iGit&lt;/a&gt; is a test iOS app that simply uses GitUpKit to clone a GitHub repo and perform a commit.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/git-up/GitUp/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Credits&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/swisspol&quot;&gt;@swisspol&lt;/a&gt;: concept and code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wwayneee&quot;&gt;@wwayneee&lt;/a&gt;: UI design&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jayeb&quot;&gt;@jayeb&lt;/a&gt;: website&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Also a big thanks to the fine &lt;a href=&quot;https://libgit2.github.com/&quot;&gt;libgit2&lt;/a&gt; contributors without whom GitUp would have never existed!&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;GitUp is copyright 2015-2018 Pierre-Olivier Latour and available under &lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;GPL v3 license&lt;/a&gt;. See the &lt;a href=&quot;https://raw.githubusercontent.com/git-up/GitUp/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file in the project for more information.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; GitUp includes some other open-source projects and such projects remain under their own license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nakst/gf</title>
      <link>https://github.com/nakst/gf</link>
      <description>&lt;p&gt;A GDB frontend for Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;gf&lt;/strong&gt; – A GDB Frontend&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/nakst/gf/ci.yml?branch=master&quot; alt=&quot;Build status&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nakst/cdn/main/gf2.png&quot; alt=&quot;Screenshot of the debugger&#39;s interface, showing the source view, breakpoints list, call stack, bitmap viewer, and command prompt.&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/nakst/cdn/main/gf1.png&quot; alt=&quot;Another screenshot, showing the watch window and different color scheme.&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/nakst/cdn/main/gf3.png&quot; alt=&quot;Another screenshot, showing the disassembly and register windows.&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;Download this project&#39;s source.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/nakst/gf.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And compile the application.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# linux
./build.sh

# freebsd
./build_freebsd.sh

# netbsd
./build_netbsd.sh

# openbsd
./build_openbsd.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please read the rest of this file to learn about using and configuring &lt;code&gt;gf&lt;/code&gt;. If you&#39;re new to GDB, see &lt;a href=&quot;https://handmade.network/forums/articles/t/2883-gdb&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to make a debug build of &lt;code&gt;gf&lt;/code&gt;, use a command like &lt;code&gt;g++ gf2.cpp -g -lX11 -pthread&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Tips&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can run the application with &lt;code&gt;./gf2&lt;/code&gt;. Any additional command line arguments passed to &lt;code&gt;gf&lt;/code&gt; will be forwarded to GDB.&lt;/li&gt; 
 &lt;li&gt;Press Ctrl+Shift+P to synchronize your working directory with GDB after you start your target executable. This is necessary if you open &lt;code&gt;gf&lt;/code&gt; in a different directory to the one you compile in.&lt;/li&gt; 
 &lt;li&gt;To view RGBA bitmaps, select the &lt;code&gt;Data&lt;/code&gt; tab and then select &lt;code&gt;Add bitmap...&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Ctrl+Click a line in the source view to run &quot;until&quot; that line. Shift+Click a line in the source view to skip to it without executing the code in between.&lt;/li&gt; 
 &lt;li&gt;Press Shift+F10 to step out of a block, and press Shift+F11 to step out a function.&lt;/li&gt; 
 &lt;li&gt;Press Tab while entering a watch expression to auto-complete it.&lt;/li&gt; 
 &lt;li&gt;Press &lt;code&gt;/&lt;/code&gt; with a watch expression highlighted to change the format specifier. For example, &lt;code&gt;/x&lt;/code&gt; switches to hexadecimal view.&lt;/li&gt; 
 &lt;li&gt;Press backtick to enter line inspect mode. This mode evaluates all expressions on the current line.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;gf2 --rr-replay&lt;/code&gt; for replaying a trace recorded by &lt;a href=&quot;https://rr-project.org/&quot;&gt;rr&lt;/a&gt;. Use Ctrl+Shift+(F5/F10/F11) for reverse continue and step.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You may want to add the following commands to your &lt;code&gt;~/.gdbinit&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;set breakpoint pending on
set disassembly-flavor intel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Settings&lt;/h2&gt; 
&lt;p&gt;On startup, settings are loaded from &lt;code&gt;~/.config/gf2_config.ini&lt;/code&gt;, followed by &lt;code&gt;.project.gf&lt;/code&gt;. This is an INI-style file.&lt;/p&gt; 
&lt;h3&gt;GDB configuration&lt;/h3&gt; 
&lt;p&gt;You can pass additional arguments to GDB in the &lt;code&gt;[gdb]&lt;/code&gt; section. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[gdb]
arguments=-nx -ex record
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also change the location of the GDB executable. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[gdb]
path=/home/a/opt/gdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can direct all output from GDB to be sent to the &quot;Log&quot; window, if you have one in your layout string. This will work even if you haven&#39;t setup a log pipe. This can be used to view the stderr output from your target dynamically as it is running.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[gdb]
log_all_output=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can disable the confirmation dialogs for the kill (F3) and connect (F4) commands.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[gdb]
confirm_command_kill=0
confirm_command_connect=0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can limit the number of stack frames in the stack window (the default is 50).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[gdb]
backtrace_count_limit=50
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom keyboard shortcuts&lt;/h3&gt; 
&lt;p&gt;Keyboard shortcuts are placed in the &lt;code&gt;[shortcuts]&lt;/code&gt; section. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[shortcuts]
Ctrl+I=print i
Ctrl+Shift+F10=reverse-next
Ctrl+Shift+F11=reverse-step
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use any standard GDB command, or any of the commands listed in &quot;Special commands&quot; below.&lt;/p&gt; 
&lt;h3&gt;User interface&lt;/h3&gt; 
&lt;p&gt;You can change the font, user interface scaling, window width and height in the &lt;code&gt;[ui]&lt;/code&gt; section. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[ui]
scale=1.5
font_path=/usr/share/fonts/TTF/DejaVuSansMono.ttf
font_size_interface=17
font_size_code=20
width=800
height=600
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To change the font, FreeType must have been available when you compiled gf. You can enable subpixel font rendering by recompiling with &lt;code&gt;extra_flags=-DUI_FREETYPE_SUBPIXEL ./build.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also configure the interface layout, with the &lt;code&gt;layout&lt;/code&gt; parameter. Use &lt;code&gt;h(position,leftSide,rightSide)&lt;/code&gt; to create a horizontal split, &lt;code&gt;v(position,topSide,bottomSide)&lt;/code&gt; to create a vertical split, and &lt;code&gt;t(...)&lt;/code&gt; to create a tab pane. This value should not contain any whitespace. Please note this value is not validated, so make sure it is formatted correctly!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;layout=h(75,v(75,Source,Console),v(50,t(Watch,Breakpoints,Commands,Struct,Exe),t(Stack,Files,Registers,Data,Thread))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NB: Horizontal and vertical splits must have exactly two children.&lt;/strong&gt; Instead, you can nest them to create more complex layouts.&lt;/p&gt; 
&lt;p&gt;You can maximize the window at startup with &lt;code&gt;maximize=1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can request for the expressions in the watch window to be saved and restored by setting &lt;code&gt;restore_watch_window=1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can allow selecting text in the source window by setting &lt;code&gt;selectable_source=1&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Themes&lt;/h3&gt; 
&lt;p&gt;You can change the theme in the &lt;code&gt;theme&lt;/code&gt; section. See &lt;a href=&quot;https://github.com/nakst/gf/wiki/Themes&quot;&gt;https://github.com/nakst/gf/wiki/Themes&lt;/a&gt; for a list of examples.&lt;/p&gt; 
&lt;h3&gt;Preset commands&lt;/h3&gt; 
&lt;p&gt;You can create a list of quickly accessible commands, available in the &quot;Commands&quot; tab in the UI. Separate individual commands using a semicolon. Each command in the list is run one after another; to run the final command asynchronously, put a &lt;code&gt;&amp;amp;&lt;/code&gt; at the end. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[commands]
Compile=shell gcc -o bin/app src/main.c
Run normal=file bin/app;run&amp;amp;
Run tests=file bin/app;run test_cases.txt&amp;amp;
Set breakpoints=b main;b LoadFile;b AssertionFailure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use any standard GDB command, or any of the commands listed in &quot;Special commands&quot; below.&lt;/p&gt; 
&lt;h3&gt;Vim integration&lt;/h3&gt; 
&lt;p&gt;You can change the server name with the &lt;code&gt;server_name&lt;/code&gt; key in the &lt;code&gt;vim&lt;/code&gt; section. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[vim]
server_name=MyVimServer
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Control pipe&lt;/h2&gt; 
&lt;p&gt;You can change the loaded file and line by sending commands to the control pipe.&lt;/p&gt; 
&lt;p&gt;First, you must set the location of the control pipe. In the &lt;code&gt;[pipe]&lt;/code&gt; section of the configuration file, set the &lt;code&gt;control&lt;/code&gt; key to the absolute path where you want the control pipe to be.&lt;/p&gt; 
&lt;p&gt;Then, you can send commands to the pipe. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Load the specified file (must be a full path).
echo f /home/a/test.c &amp;gt; /home/a/control_pipe.dat

# Go to line 123.
echo l 123 &amp;gt; /home/a/control_pipe.dat

# Send a GDB command.
echo c file myapp &amp;gt; /home/a/control_pipe.dat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can be used for text editor integration.&lt;/p&gt; 
&lt;h2&gt;Log window&lt;/h2&gt; 
&lt;p&gt;You can show messages send to a pipe using the log window.&lt;/p&gt; 
&lt;p&gt;First, you must set the location of the log pipe. In the &lt;code&gt;[pipe]&lt;/code&gt; section of the configuration file, set the &lt;code&gt;log&lt;/code&gt; key to the absolute path where you want the log pipe to be. Next, you must add the &quot;Log&quot; window somewhere in your layout string (see the &quot;User interface&quot; section above). Once configured, you can then send messages to the pipe and they will appear in the log window.&lt;/p&gt; 
&lt;p&gt;Here is an example of how to send messages to the pipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#define LOG(...) do { fprintf(logFile, __VA_ARGS__); fflush(logFile); } while (0)
#define LOG_OPEN(path) logFile = fopen(path, &quot;w&quot;)
FILE *logFile;

...

LOG_OPEN(&quot;...&quot;);
LOG(&quot;Hello, world!\n&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Special commands&lt;/h2&gt; 
&lt;h3&gt;gf-step&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;gf-step&lt;/code&gt; either steps a single line (&lt;code&gt;step&lt;/code&gt;) or single instruction (&lt;code&gt;stepi&lt;/code&gt;), depending whether disassembly view is active.&lt;/p&gt; 
&lt;h3&gt;gf-next&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;gf-next&lt;/code&gt; either steps over a single line (&lt;code&gt;next&lt;/code&gt;) or single instruction (&lt;code&gt;nexti&lt;/code&gt;), depending whether disassembly view is active.&lt;/p&gt; 
&lt;h3&gt;gf-step-out-of-block&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;gf-step-out-of-block&lt;/code&gt; steps out of the current block. That is, it steps to the next line after the first unmatched &lt;code&gt;}&lt;/code&gt;, starting from the current line.&lt;/p&gt; 
&lt;h3&gt;gf-restart-gdb&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;gf-restart-gdb&lt;/code&gt; restarts the GDB process immediately. Any state such as loaded symbol files or breakpoints will be lost.&lt;/p&gt; 
&lt;h3&gt;gf-get-pwd&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;gf-get-pwd&lt;/code&gt; asks GDB for the working directory in which the current executable file was compiled. This ensures the source view tries to load files from the correct directory.&lt;/p&gt; 
&lt;h3&gt;gf-switch-to&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;gf-switch-to &amp;lt;window-name&amp;gt;&lt;/code&gt; switches to a specific window. The window names are the same as given in the layout string, as seen in the &quot;User interface&quot; section.&lt;/p&gt; 
&lt;h3&gt;gf-command&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;gf-command &amp;lt;name&amp;gt;&lt;/code&gt; runs the command(s) corresponding to &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; in the &lt;code&gt;[commands]&lt;/code&gt; section of your configuration file.&lt;/p&gt; 
&lt;h3&gt;gf-inspect-line&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;gf-inspect-line&lt;/code&gt; toggles inspect line mode. By default, this is bound to the backtick key.&lt;/p&gt; 
&lt;h2&gt;Watch window hooks&lt;/h2&gt; 
&lt;p&gt;You can customize the behaviour of the watch window when displaying specific types using Python. When the watch window wants to display the fields of a value, it will look a hook function at &lt;code&gt;gf_hooks[type_of_value]&lt;/code&gt;. The hook function should take two arguments, &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;field&lt;/code&gt;. If the hook function exists, it will be called in one of two ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;When the watch window needs a list of the fields in the value, it calls the hook with &lt;code&gt;item&lt;/code&gt; set to an opaque handle and &lt;code&gt;field&lt;/code&gt; set to &lt;code&gt;None&lt;/code&gt;. You should print out a list of all the names of the fields in the value, one on each line. You can print out all the standard fields by calling &lt;code&gt;_gf_fields_recurse(item)&lt;/code&gt;. &lt;strong&gt;When adding custom fields, their names must be enclosed by &lt;code&gt;[]&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;When the watch window needs to get the value of a specific custom field in the value, it calls the hook with &lt;code&gt;item&lt;/code&gt; set to a &lt;code&gt;gdb.Value&lt;/code&gt; for the value, and &lt;code&gt;field&lt;/code&gt; to the name of the custom field that was added. &lt;strong&gt;The hook is not called for standard fields.&lt;/strong&gt; You should return a &lt;code&gt;gdb.Value&lt;/code&gt; that gives the value of the field.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For example, the following hook add a width and height custom field for a rectangle type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;def RectangleHook(item, field):
    if field:
        if field == &#39;[width]&#39;:  
            # item[&#39;...&#39;] looks up a field in the struct, returned as a gdb.Value
            # int(...) converts the gdb.Value to an int so we can do arithmetic on it
            # gdb.Value(...) converts the result back to a gdb.Value
            return gdb.Value(int(item[&#39;right&#39;]) - item[&#39;left&#39;])
        if field == &#39;[height]&#39;: 
            # do something similar for the height
            return gdb.Value(int(item[&#39;bottom&#39;]) - item[&#39;top&#39;])
    else:
        print(&#39;[width]&#39;)         # add the width custom field
        print(&#39;[height]&#39;)        # add the height custom field
        _gf_fields_recurse(item) # add the fields actually in the struct

gf_hooks = { &#39;Rectangle&#39;: RectangleHook } # create the hook dictionary
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to create a custom dynamic array type, instead of printing field names, print &lt;code&gt;(d_arr)&lt;/code&gt; followed by the number of array items. The fields will then be automatically populated in the form of &lt;code&gt;[%d]&lt;/code&gt;, where &lt;code&gt;%d&lt;/code&gt; is the index. For example, given the following structure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;struct MyArray {
	int length;
	float *items;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is the hook definition:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;def MyArrayHook(item, field):
	if field: return item[&#39;items&#39;][int(field[1:-1])]
	else: print(&#39;(d_arr)&#39;, int(item[&#39;length&#39;]))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Templates are removed from the name of the type. For example, &lt;code&gt;Array&amp;lt;int&amp;gt;&lt;/code&gt;, &lt;code&gt;Array&amp;lt;char *&amp;gt;&lt;/code&gt; and &lt;code&gt;Array&amp;lt;float&amp;gt;&lt;/code&gt; would all use the &lt;code&gt;Array&lt;/code&gt; hook.&lt;/p&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;p&gt;There is a simple plugin system. Make a file called &lt;code&gt;plugins.cpp&lt;/code&gt; in the source code folder. It will be found automatically, and #included in the compilation of the main translation unit.&lt;/p&gt; 
&lt;p&gt;gf uses the Luigi UI library. It is documented here: &lt;a href=&quot;https://github.com/nakst/luigi/raw/main/README.md&quot;&gt;https://github.com/nakst/luigi/blob/main/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can register new windows, command and data viewers in a constructor function. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;__attribute__((constructor)) 
void MyPluginRegister() {
	interfaceWindows.Add({ 
		&quot;Hello&quot;, // The window&#39;s name. Used to match it against the UI layout string.
		MyPluginHelloWindowCreate, // The callback to create an instance of the window.
		MyPluginHelloWindowUpdate // The callback to update an instance of the window (called every time the target pauses/steps).
	});

	interfaceDataViewers.Add({ 
		&quot;Add test...&quot;, // The label of the button to show in the Data tab.
		MyPluginTestViewerCreate // The callback to create the data viewer.
	});

	interfaceCommands.Add({ 
		&quot;My command&quot;, // The label to show in the application menu.
		{ /* UIShortcut */ } 
	});
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The interface window creation callback is passed the parent UIElement and should return the UIElement it creates.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;UIElement *MyPluginHelloWindowCreate(UIElement *parent) {
	UIPanel *panel = UIPanelCreate(parent, UI_PANEL_GRAY | UI_PANEL_EXPAND);
	UILabelCreate(&amp;amp;panel-&amp;gt;e, 0, &quot;Hello, world!&quot;, -1);
	return &amp;amp;panel-&amp;gt;e;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The interface window update callback is passed the output of GDB from the most recent step, and the UIElement returned by the creation callback.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;void MyPluginHelloWindowUpdate(const char *gdbOutput, UIElement *element) {
	// TODO Update the window.
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The interface data viewer creation callback should create a MDI child of the data tab as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;void MyPluginTestViewerCreate(void *unused) {
	UIMDIChild *window = UIMDIChildCreate(&amp;amp;dataWindow-&amp;gt;e, UI_MDI_CHILD_CLOSE_BUTTON, UI_RECT_1(0), &quot;Title&quot;, -1);
	// TODO Configure the viewer.
	UIElementRefresh(&amp;amp;dataWindow-&amp;gt;e);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For communicating with GDB, there are the following functions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;// Evaluate an expression. The result is overwritten between calls!
const char *EvaluateExpression(const char *expression, const char *format = nullptr);

// Send and run a command in GDB. Set `echo` to log the command in the console window. 
// If `synchronous` is set the function will wait for the command to complete before it returns.
void DebuggerSend(const char *string, bool echo, bool synchronous);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many examples of how to do these things in &lt;code&gt;windows.cpp&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;nakst
Philippe Mongeau phmongeau 
Jimmy &quot;Keeba&quot; Lefevre JimmyLefevre 
John Blat johnblat64 
IWouldRatherUsePasteBin
Gavin Beatty gavinbeatty
Michael Stopa StomyPX
Anders Kaare sqaxomonophonen
Arseniy Khvorov khvorov45
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Extension pack&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nakst/cdn/main/unknown2.png&quot; alt=&quot;A screenshot showing the embedded profiler, which is displaying a multi-colored flame graph.&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/nakst/cdn/main/%20memory%20window%20and%20extended%20view%20window.png&quot; alt=&quot;A screenshot showing the memory window and extended watch expression view.&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;~~All tiers on my Patreon, &lt;a href=&quot;https://www.patreon.com/nakst&quot;&gt;https://www.patreon.com/nakst&lt;/a&gt;, get access to the extension pack. ~~&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This is now available to all; see the folder &lt;code&gt;extensions_v5&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This currently includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Embedded tracing profiler&lt;/li&gt; 
 &lt;li&gt;Memory window&lt;/li&gt; 
 &lt;li&gt;Extended watch expression view (for strings, matrices and base conversion)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nakst/cdn/main/waveform_viewer.mp4&quot;&gt;Waveform viewer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Full source code for the pack&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Make sure you use the latest version of the extension pack with the latest commit of &lt;code&gt;gf&lt;/code&gt;, otherwise you&#39;ll likely run into compile or runtime errors!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sparkle-project/Sparkle</title>
      <link>https://github.com/sparkle-project/Sparkle</link>
      <description>&lt;p&gt;A software update framework for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sparkle 2 &lt;img src=&quot;https://github.com/sparkle-project/Sparkle/workflows/Build%20%26%20Tests/badge.svg?branch=2.x&quot; alt=&quot;Build Status&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/SwiftPM-compatible-4BC51D.svg?style=flat&quot; alt=&quot;SwiftPM&quot; /&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/Sparkle&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Sparkle.svg?cacheSeconds=86400&quot; alt=&quot;CocoaPods&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Secure and reliable software update framework for macOS.&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/sparkle-project/Sparkle/2.x/Resources/Screenshot2.png&quot; width=&quot;732&quot; alt=&quot;Sparkle shows familiar update window with release notes&quot; /&gt; 
&lt;p&gt;Sparkle 2 adds support for application sandboxing, custom user interfaces, updating external bundles, and a more modern architecture which includes faster and more reliable installs.&lt;/p&gt; 
&lt;p&gt;Pre-releases when available can be found on the &lt;a href=&quot;https://github.com/sparkle-project/Sparkle/releases&quot;&gt;Sparkle&#39;s Releases&lt;/a&gt; or on your favorite package manager. More nightly builds can be downloaded by selecting a recent &lt;a href=&quot;https://github.com/sparkle-project/Sparkle/actions?query=event%3Apush+is%3Asuccess+branch%3A2.x&quot;&gt;workflow run&lt;/a&gt; and downloading the corresponding Sparkle-distribution artifact.&lt;/p&gt; 
&lt;p&gt;The current status for future versions of Sparkle is tracked by &lt;a href=&quot;https://github.com/sparkle-project/Sparkle/milestones&quot;&gt;its roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please visit &lt;a href=&quot;http://sparkle-project.org&quot;&gt;Sparkle&#39;s website&lt;/a&gt; for up to date documentation on using and migrating over to Sparkle 2. Refer to &lt;a href=&quot;https://raw.githubusercontent.com/sparkle-project/Sparkle/2.x/CHANGELOG&quot;&gt;Changelog&lt;/a&gt; for a more detailed list of changes. More internal design documents to the project can be found in the repository under &lt;a href=&quot;https://raw.githubusercontent.com/sparkle-project/Sparkle/2.x/Documentation/&quot;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Seamless. There&#39;s no mention of Sparkle; your icons and app name are used.&lt;/li&gt; 
 &lt;li&gt;Secure. Updates are verified using EdDSA signatures and Apple Code Signing. Supports Sandboxed applications in Sparkle 2.&lt;/li&gt; 
 &lt;li&gt;Fast. Supports delta updates which only patch files that have changed and atomic-safe installs.&lt;/li&gt; 
 &lt;li&gt;Easy to install. Sparkle requires no code in your app, and only needs static files on a web server.&lt;/li&gt; 
 &lt;li&gt;Customizable. Sparkle 2 supports plugging in a custom UI for updates.&lt;/li&gt; 
 &lt;li&gt;Flexible. Supports applications, package installers, preference panes, and other plug-ins. Sparkle 2 supports updating external bundles.&lt;/li&gt; 
 &lt;li&gt;Handles permissions, quarantine, and automatically asks for authentication if needed.&lt;/li&gt; 
 &lt;li&gt;Uses RSS-based appcasts for release information. Appcasts are a de-facto standard supported by 3rd party update-tracking programs and websites.&lt;/li&gt; 
 &lt;li&gt;Stays hidden until second launch for better first impressions.&lt;/li&gt; 
 &lt;li&gt;Truly self-updating — the user can choose to automatically download and install all updates in the background.&lt;/li&gt; 
 &lt;li&gt;Ability to use channels for beta updates (in Sparkle 2), add phased rollouts to users, and mark updates as critical or major.&lt;/li&gt; 
 &lt;li&gt;Progress and status notifications for the host app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Runtime: macOS 10.13 or later.&lt;/li&gt; 
 &lt;li&gt;Build: Latest major Xcode (stable or beta, whichever is latest) and one major version less.&lt;/li&gt; 
 &lt;li&gt;HTTPS server for serving updates (see &lt;a href=&quot;http://sparkle-project.org/documentation/app-transport-security/&quot;&gt;App Transport Security&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://sparkle-project.org/documentation/&quot;&gt;getting started guide&lt;/a&gt;. No code is necessary, but a bit of configuration is required.&lt;/p&gt; 
&lt;h3&gt;Troubleshooting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Please check &lt;strong&gt;Console.app&lt;/strong&gt; for logs under your application. Sparkle prints detailed information there about all problems it encounters. It often also suggests solutions to the problems, so please read Sparkle&#39;s log messages carefully.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;generate_appcast&lt;/code&gt; tool which creates appcast files, correct signatures, and delta updates automatically.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the URL specified in &lt;a href=&quot;https://sparkle-project.org/documentation/customization/&quot;&gt;&lt;code&gt;SUFeedURL&lt;/code&gt;&lt;/a&gt; is valid (typos/404s are a common error!), and that it uses modern TLS (&lt;a href=&quot;https://www.ssllabs.com/ssltest/&quot;&gt;test it&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;API symbols&lt;/h3&gt; 
&lt;p&gt;Sparkle is built with &lt;code&gt;-fvisibility=hidden -fvisibility-inlines-hidden&lt;/code&gt; which means no symbols are exported by default. If you are adding a symbol to the public API you must decorate the declaration with the &lt;code&gt;SU_EXPORT&lt;/code&gt; macro (grep the source code for examples).&lt;/p&gt; 
&lt;h3&gt;Building the distribution package&lt;/h3&gt; 
&lt;p&gt;You do not usually need to build a Sparkle distribution unless you&#39;re making changes to Sparkle itself.&lt;/p&gt; 
&lt;p&gt;To build a Sparkle distribution, &lt;code&gt;cd&lt;/code&gt; to the root of the Sparkle source tree and run &lt;code&gt;make release&lt;/code&gt;. Sparkle-&lt;em&gt;VERSION&lt;/em&gt;.tar.xz will be created and revealed in Finder after the build has completed.&lt;/p&gt; 
&lt;p&gt;Alternatively, build the Distribution scheme in the Xcode UI.&lt;/p&gt; 
&lt;h3&gt;Code of Conduct&lt;/h3&gt; 
&lt;p&gt;We pledge to have an open and welcoming environment. See our &lt;a href=&quot;https://raw.githubusercontent.com/sparkle-project/Sparkle/2.x/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>objective-see/LuLu</title>
      <link>https://github.com/objective-see/LuLu</link>
      <description>&lt;p&gt;LuLu is the free open-source macOS firewall&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LuLu&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/objective-see/LuLu/master/README_zh-Hans.md&quot;&gt;简体中文&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/objective-see/LuLu/master/README_zh-Hant.md&quot;&gt;正體中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;LuLu is the free open-source macOS firewall:&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://objective-see.com/images/LL/alert.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; &lt;br /&gt; Full details and usage instructions can be found &lt;a href=&quot;https://objective-see.com/products/lulu.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To Support:&lt;/strong&gt; &lt;br /&gt; ❤&amp;nbsp; Love this product and want to support it? Please check out my &lt;a href=&quot;https://www.patreon.com/objective_see&quot;&gt;patreon page&lt;/a&gt;.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a class=&quot;inlineLink&quot; href=&quot;https://www.patreon.com/objective_see&quot;&gt; &lt;img src=&quot;https://objective-see.com/patreon/images/patreon.jpg&quot; width=&quot;700&quot; style=&quot;display:block; margin:auto;&quot; /&gt; &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>keycastr/keycastr</title>
      <link>https://github.com/keycastr/keycastr</link>
      <description>&lt;p&gt;KeyCastr, an open-source keystroke visualizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KeyCastr&lt;/h1&gt; 
&lt;p&gt;KeyCastr, an open source keystroke visualizer.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/KeyCastr_header.png&quot; alt=&quot;header image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;KeyCastr enables you to share your keystrokes when creating screencasts, presenting, or collaborating with others. You can choose to display command keys, all modified keys, or all keystrokes, and there is also an option to include mouse clicks.&lt;/p&gt; 
&lt;p&gt;It is also possible to develop your own visualizer on top of KeyCastr -- pull requests are welcome!&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/mouse-click-visualizer.gif&quot; alt=&quot;display preferences&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Download the latest release from &lt;a href=&quot;https://github.com/keycastr/keycastr/releases&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or, install using &lt;a href=&quot;http://brew.sh/&quot;&gt;homebrew&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;brew install --cask keycastr
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Granting Permissions&lt;/h2&gt; 
&lt;p&gt;KeyCastr requires your permission to receive events from macOS in order to broadcast your keystrokes and mouse clicks.&lt;/p&gt; 
&lt;p&gt;On newer versions of macOS (10.15+) there is an Input Monitoring menu under Security &amp;amp; Privacy within the System Preferences app, and KeyCastr will appear there automatically the first time you run it. Simply unlock this menu and check the box next to KeyCastr to enable it.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/input_monitoring.png&quot; alt=&quot;input_monitoring&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;On older versions of macOS, or if for some reason the app doesn&#39;t appear under the Input Monitoring menu (or if you want to pre-enable it) then you may manually add it to the list of apps in the Accessibility menu.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/accessibility.png&quot; alt=&quot;accessibility&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;To add KeyCastr to the list click the &lt;kbd&gt;+&lt;/kbd&gt; button and select KeyCastr from the file system, or drag it in using Finder.&lt;/p&gt; 
&lt;p&gt;If KeyCastr is already in the list you can remove it with the &lt;kbd&gt;−&lt;/kbd&gt; button and add it again in order to be certain that the right copy of the application is specified.&lt;/p&gt; 
&lt;h3&gt;Troubleshooting permissions&lt;/h3&gt; 
&lt;p&gt;There are two likely causes for the app seeming not to work:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Not receiving keystroke events from macOS due to security settings&lt;/li&gt; 
 &lt;li&gt;The window being offscreen.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Sometimes switching from the Default to the Svelte visualizer can help you figure out which problem it is.&lt;/p&gt; 
&lt;p&gt;To troubleshoot, We recommend that you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Quit the KeyCastr app&lt;/li&gt; 
 &lt;li&gt;Remove KeyCastr from any of the Privacy areas in the Security &amp;amp; Privacy preferences panel (typically the Accessibility or Input Monitoring areas)&lt;/li&gt; 
 &lt;li&gt;Start the KeyCastr app&lt;/li&gt; 
 &lt;li&gt;When you see the &quot;Keystroke Receiving&quot; dialog from macOS, click &quot;Open System Preferences&quot; or open the Preferences app yourself&lt;/li&gt; 
 &lt;li&gt;Under Input Monitoring, enable KeyCastr by unlocking your preferences and clicking the box next to KeyCastr which should have been automatically added to the list&lt;/li&gt; 
 &lt;li&gt;When macOS prompts you, restart KeyCastr. Or you can do it manually.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Position on Screen&lt;/h2&gt; 
&lt;p&gt;The default position is on the bottom left of your display. To modify the position of displayed keystrokes, click and drag the text like so:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/keycastr/keycastr/main/assets/reposition.gif&quot; alt=&quot;reposition&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Security Concerns&lt;/h2&gt; 
&lt;p&gt;Any application in the Accessibility or Input Monitoring sections of the Security &amp;amp; Privacy pane in macOS&#39;s Preferences.app is capable of receiving all your input events. We encourage you to inspect these lists carefully, remove applications which you don&#39;t believe need to monitor your input, and ask tough questions of the companies which produce the software you use.&lt;/p&gt; 
&lt;p&gt;KeyCastr is completely free and open source, and does not employ any networking mechanisms other than that included with the ubiquitous &lt;a href=&quot;https://sparkle-project.org/&quot;&gt;Sparkle framework&lt;/a&gt; for managing application updates. KeyCastr will never receive or display your passwords, so long as the website or application you are using treats password entry as secure, e.g. &lt;code&gt;&amp;lt;input type=&quot;password&quot;&amp;gt;&lt;/code&gt; or equivalent.&lt;/p&gt; 
&lt;h2&gt;History and Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sdeken&quot;&gt;sdeken&lt;/a&gt; wrote the original version.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/akitchen&quot;&gt;akitchen&lt;/a&gt; occasional development and maintenance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/elia&quot;&gt;elia&lt;/a&gt; created &lt;code&gt;keycastr&lt;/code&gt; organization and forked into it.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lqez&quot;&gt;lqez&lt;/a&gt; added a new menu bar icon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/QuintB&quot;&gt;QuintB&lt;/a&gt; designed an updated application icon to match the icon style in modern versions of macOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opensource.org/licenses/BSD-3-Clause&quot;&gt;BSD 3-Clause&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;KeyCastr has been freely available for the Mac since 2009.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/app-check</title>
      <link>https://github.com/google/app-check</link>
      <description>&lt;p&gt;Google-internal core components of Firebase App Check.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;App Check Core&lt;/h1&gt; 
&lt;p&gt;This library is for internal Google use only. It contains core components of &lt;code&gt;FirebaseAppCheck&lt;/code&gt;, from the &lt;a href=&quot;https://github.com/firebase/firebase-ios-sdk&quot;&gt;&lt;code&gt;firebase-ios-sdk&lt;/code&gt;&lt;/a&gt; project, for use in other Google SDKs. External developers should integrate directly with the &lt;a href=&quot;https://firebase.google.com/docs/app-check&quot;&gt;Firebase App Check SDK&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Staging a release&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Determine the next version for release by checking the &lt;a href=&quot;https://github.com/google/app-check/tags&quot;&gt;tagged releases&lt;/a&gt;. If the next release will be available for both CocoaPods and SPM, ensure that the next release version has been incremented accordingly so that the same version tag is used for both CocoaPods and SPM.&lt;/li&gt; 
 &lt;li&gt;Verify that the releasing version is the latest entry in the &lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;, updating it if necessary.&lt;/li&gt; 
 &lt;li&gt;Update the version in the podspec to match the latest entry in the &lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Checkout the &lt;code&gt;main&lt;/code&gt; branch and ensure it is up to date &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git checkout main
git pull
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add the CocoaPods tag (&lt;code&gt;{version}&lt;/code&gt; will be the latest version in the &lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/AppCheckCore.podspec#L3&quot;&gt;podspec&lt;/a&gt;) &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git tag CocoaPods-{version}
git push origin CocoaPods-{version}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Push the podspec to the designated repo 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;If this version of GoogleUtilities is intended to launch &lt;strong&gt;before or with&lt;/strong&gt; the next Firebase release:&lt;/p&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Push to &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo push --skip-tests --use-json staging AppCheckCore.podspec
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;staging&#39; repo.&lt;/code&gt;, add the staging repo with:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo add staging git@github.com:firebase/SpecsStaging.git
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Otherwise:&lt;/p&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Push to &lt;b&gt;SpecsDev&lt;/b&gt;&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo push --skip-tests --use-json dev AppCheckCore.podspec
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;dev&#39; repo.&lt;/code&gt;, add the dev repo with:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo add dev git@github.com:firebase/SpecsDev.git
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run Firebase CI by waiting until next nightly or adding a PR that touches &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To copybara, run the following command on gLinux: &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;/google/data/ro/teams/copybara/copybara third_party/app_check/copy.bara.sky
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Publishing&lt;/h2&gt; 
&lt;p&gt;The release process is as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/#swift-package-manager&quot;&gt;Tag and release for Swift PM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/#cocoapods&quot;&gt;Publish to CocoaPods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/#create-github-release&quot;&gt;Create GitHub Release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/#post-release-cleanup&quot;&gt;Perform post release cleanup&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;By creating and &lt;a href=&quot;https://github.com/google/app-check/tags&quot;&gt;pushing a tag&lt;/a&gt; for Swift PM, the newly tagged version will be immediately released for public use. Given this, please verify the intended time of release for Swift PM.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a version tag for Swift PM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git tag {version}
git push origin {version}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note: Ensure that any inflight PRs that depend on the new &lt;code&gt;AppCheckCore&lt;/code&gt; version are updated to point to the newly tagged version rather than a checksum.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Publish the newly versioned pod to CocoaPods&lt;/p&gt; &lt;p&gt;It&#39;s recommended to point to the &lt;code&gt;AppCheckCore.podspec&lt;/code&gt; in &lt;code&gt;staging&lt;/code&gt; to make sure the correct spec is being published.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo update
pod trunk push ~/.cocoapods/repos/staging/AppCheckCore/{version}/AppCheckCore.podspec.json
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: In some cases, it may be acceptable to &lt;code&gt;pod trunk push&lt;/code&gt; with the &lt;code&gt;--skip-tests&lt;/code&gt; flag. Please double check with the maintainers before doing so.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The pod push was successful if the above command logs: &lt;code&gt;🚀 AppCheckCore ({version}) successfully published&lt;/code&gt;. In addition, a new commit that publishes the new version (co-authored by &lt;a href=&quot;https://github.com/CocoaPodsAtGoogle&quot;&gt;CocoaPodsAtGoogle&lt;/a&gt;) should appear in the &lt;a href=&quot;https://github.com/CocoaPods/Specs&quot;&gt;CocoaPods specs repo&lt;/a&gt;. Last, the latest version should be displayed on &lt;a href=&quot;https://cocoapods.org/pods/AppCheckCore&quot;&gt;AppCheckCore&#39;s CocoaPods page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/google/AppCheckCore/releases/new/&quot;&gt;Create GitHub Release&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Update the &lt;a href=&quot;https://github.com/google/AppCheckCore/releases/new/&quot;&gt;release template&lt;/a&gt;&#39;s &lt;strong&gt;Tag version&lt;/strong&gt; and &lt;strong&gt;Release title&lt;/strong&gt; fields with the latest version. Select the option to auto-generate releases.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Don&#39;t forget to perform the &lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/#post-release-cleanup&quot;&gt;post release cleanup&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Post Release Cleanup&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Clean up &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pwd=$(pwd)
mkdir -p /tmp/release-cleanup &amp;amp;&amp;amp; cd $_
git clone git@github.com:firebase/SpecsStaging.git
cd SpecsStaging/
git rm -rf AppCheckCore/
git commit -m &quot;Post publish cleanup&quot;
git push origin main
rm -rf /tmp/release-cleanup
cd $pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/google/app-check/main/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; for more information about contributing to the App Check Core SDK.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The contents of this repository is licensed under the &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>syncthing/syncthing-macos</title>
      <link>https://github.com/syncthing/syncthing-macos</link>
      <description>&lt;p&gt;Official frugal and native macOS Syncthing application bundle&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Syncthing for macOS&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://forum.syncthing.net/t/syncthing-for-macos&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/syncthing-%20forum-blue.svg?sanitize=true&quot; alt=&quot;Syncthing forum&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/syncthing/syncthing-macos/total.svg?sanitize=true&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/syncthing/syncthing-macos.svg?sanitize=true&quot; alt=&quot;Latest release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000&quot; alt=&quot;license&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;syncthing-macos&lt;/code&gt; project is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Frugality&quot;&gt;frugal&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Native_(computing)&quot;&gt;native&lt;/a&gt; macOS &lt;a href=&quot;https://syncthing.net&quot;&gt;Syncthing&lt;/a&gt; tray application bundle. It bundles its own Syncthing instance and wraps Syncthing background process, making it behave more like a native macOS application and less like a command-line utility with a web browser interface.&lt;/p&gt; 
&lt;p&gt;Features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open the &lt;a href=&quot;https://docs.syncthing.net/intro/gui.html&quot;&gt;Syncthing WebGUI&lt;/a&gt; from the tray in your system preferred browser.&lt;/li&gt; 
 &lt;li&gt;Optionally starts on login, so you don&#39;t need to set up Syncthing as a service.&lt;/li&gt; 
 &lt;li&gt;Tray icon syncthing status indicator.&lt;/li&gt; 
 &lt;li&gt;Retina ready icons for the Application bundle and status tray.&lt;/li&gt; 
 &lt;li&gt;Automatic updates (using &lt;a href=&quot;https://sparkle-project.org&quot;&gt;Sparkle&lt;/a&gt; pushed from GitHub Releases).&lt;/li&gt; 
 &lt;li&gt;Open shared folders in Finder.&lt;/li&gt; 
 &lt;li&gt;Log file written to &lt;code&gt;~/Library/Application Support/Syncthing/syncthing.log&lt;/code&gt;, use Finder -&amp;gt; Go -&amp;gt; Go to Folder to open it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Screenshot&lt;/h1&gt; 
&lt;img alt=&quot;screenshot.png&quot; src=&quot;https://user-images.githubusercontent.com/1050166/48157165-35970f00-e2cf-11e8-8009-10bfbf7fbce2.png&quot; /&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: This is the official Syncthing macOS application bundle. Please make sure you have no other &lt;a href=&quot;https://docs.syncthing.net/users/autostart.html#macos&quot;&gt;syncthing instances&lt;/a&gt; or &lt;a href=&quot;https://docs.syncthing.net/users/contrib.html#mac-os&quot;&gt;wrappers running&lt;/a&gt; or else this application will not work!&lt;/p&gt; 
&lt;p&gt;Currently, macOS 11 or higher is necessary to run the latest version. For older version support, see the &lt;a href=&quot;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/#faq-frequently-asked-questions&quot;&gt;FAQ&lt;/a&gt;. &lt;strong&gt;syncthing-macos&lt;/strong&gt; is packaged as a disk image as an application bundled with the &lt;a href=&quot;https://github.com/syncthing/syncthing/releases&quot;&gt;syncthing&lt;/a&gt; binary.&lt;/p&gt; 
&lt;p&gt;To install &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/releases/latest&quot;&gt;just download the dmg&lt;/a&gt;, mount it and drag and drop the application to install. The only necessary configuration is to set the API key and URL when provisioning a remote syncthing instance, the local instance is auto-configured. The &lt;code&gt;syncthing-macos&lt;/code&gt; application bundle disables the auto-updater of &lt;code&gt;syncthing&lt;/code&gt; as it has its own update mechanism using &lt;a href=&quot;https://sparkle-project.org/&quot;&gt;Sparkle&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The latest version is available at &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/releases/latest&quot;&gt;GitHub Releases&lt;/a&gt;, or it can also be installed using &lt;a href=&quot;https://github.com/Homebrew/homebrew-cask&quot;&gt;homebrew&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/cask/syncthing&quot;&gt;&lt;code&gt;brew install --cask syncthing&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Why&lt;/h1&gt; 
&lt;p&gt;All cross-platform approaches are not able to use all the native facilities Apple macOS provides. Including auto-updates, vector icon set (retina-ready) and creating an application bundle. GUIs are designed with XCode and everything is coded in a mix of Objective-C and Swift which is &quot;the native approach&quot;.&lt;/p&gt; 
&lt;h1&gt;Goal&lt;/h1&gt; 
&lt;p&gt;The goal of this project is to keep the native macOS Syncthing tray lean but usable. No graphs, no advanced configuration windows. It provides a very simple wrapper, so users may not be aware Syncthing ships as a command line application. It strives to have a usability of good-by-default and should always follow the &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/macos&quot;&gt;Apple Human Interface Guidelines&lt;/a&gt; to feel as much as a native application as possible.&lt;/p&gt; 
&lt;h1&gt;Known bugs&lt;/h1&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/%5Bhttps://github.com/syncthing/syncthing-macos/issues%5D(https://github.com/syncthing/syncthing-macos/issues?q=is%3Aissue+is%3Aopen+label%3Abug)&quot;&gt;issue tracker (bug tag filtered)&lt;/a&gt; for the current status.&lt;/p&gt; 
&lt;h1&gt;Contributions&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/CONTRIBUTING.md&quot;&gt;Contributions&lt;/a&gt; and &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/issues&quot;&gt;issue reports&lt;/a&gt; are welcome.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/syncthing/syncthing-macos/develop/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;FAQ: Frequently asked questions&lt;/h1&gt; 
&lt;h2&gt;macOS version support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;From release v1.27.7 macOS 11 or probably higher is required (see issue &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/issues/218&quot;&gt;#218&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Last v1.27.6-1 release is compatible with macOS 10.13 (see issue &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/issues/217&quot;&gt;#217&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;From release v1.20.0-1 macOS 10.13 or higher is required&lt;/li&gt; 
 &lt;li&gt;Until release v1.19.2-1 macOS 10.12 is required (see issue &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/issues/177&quot;&gt;#177&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;From release v1.14.0-1 macOS 10.12 is required&lt;/li&gt; 
 &lt;li&gt;Until release &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/releases/tag/v1.13.1-1&quot;&gt;v1.13.1-1&lt;/a&gt; macOS 10.11 or higher is supported (see issue &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/issues/148&quot;&gt;#148&lt;/a&gt; why)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Auto-update &lt;a href=&quot;https://github.com/syncthing/syncthing-macos?tab=readme-ov-file#disable-automatic-update-checker&quot;&gt;must be manually disabled&lt;/a&gt; for unsupported OS versions.&lt;/p&gt; 
&lt;h2&gt;Preferences&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;syncthing-macos&lt;/code&gt; is designed to run its own syncthing instance and automatically detect the API key. The preferences window is used to point to a local running instance, a remote instance is not supported. It is possible to run your own instance and point to it for advanced/development purposes. You should only change the settings if you know what you are doing.&lt;/p&gt; 
&lt;p&gt;Setting extra Syncthing command line parameters is a hidden feature. You need to write these using the application defaults configuration. The only current limitation the parameters cannot contain spaces!. In the example below the audit log is enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;defaults write com.github.xor-gate.syncthing-macosx Arguments &#39;--audit --auditfile=/Users/JohnDoe/staudit.log&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Default IP address change&lt;/h2&gt; 
&lt;p&gt;When the default IP address is changed from 127.0.0.1 to a routable one like e.g 192.168.1.102 the tray application preferences need to be set also. Or else the API cannot be accessed and will stay &#39;Offline&#39;. If you broke the configuration you can manually edit the file under the &lt;code&gt;~/Library/Application Support/Syncthing/config.xml&lt;/code&gt; using Finder with Go -&amp;gt; Go to folder. And restart the syncthing service from the tray.&lt;/p&gt; 
&lt;h2&gt;Resolve xattr sync from macOS Ventura 13.0 to &amp;lt; 13.0 devices (problem with &lt;code&gt;com.apple.provenance&lt;/code&gt; metadata)&lt;/h2&gt; 
&lt;p&gt;When using the xattr synchronisation feature it fails when syncing from macOS 13.0 to macOS &amp;lt; 13.0. When using this feature one must stop Syncthing and manually edit the configuration XML file located at &lt;code&gt;/Users/&amp;lt;user&amp;gt;/Library/Application Support/Syncthing/config.xml&lt;/code&gt;. Or the location when running an Syncthing daemon instance not managed the application bundle). Manually editing the configuration file is necessary because the web UI doesn&#39;t support xattr filter management just yet (release v1.22.1-1).&lt;/p&gt; 
&lt;p&gt;Per shared folder the &lt;code&gt;xattrFilter&lt;/code&gt; must be configured as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;folder id=&quot;...&quot; ...&amp;gt;
  &amp;lt;xattrFilter&amp;gt;
    ...
    &amp;lt;entry match=&quot;com.apple.provenance&quot; permit=&quot;false&quot;/&amp;gt;
    &amp;lt;entry match=&quot;*&quot; permit=&quot;true&quot;/&amp;gt;
  &amp;lt;/xattrFilter&amp;gt;
&amp;lt;/folder&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NOTE: see the &lt;code&gt;com.apple.provenance&lt;/code&gt; &lt;code&gt;xattrFilter&lt;/code&gt; &lt;code&gt;entry&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/issues/185&quot;&gt;#185&lt;/a&gt; and the &lt;a href=&quot;https://forum.syncthing.net/t/com-apple-provenance/19262&quot;&gt;forum post&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Uninstallation&lt;/h2&gt; 
&lt;p&gt;On Mac OS X you drop the application from the Application folder to your Trash. But there are some user specific files are kept elsewhere, which are located under &lt;code&gt;$HOME/Library/Application Support/Syncthing&lt;/code&gt;. The files in this folder are the configuration, encryption/profile files and the database cache. For more information see &lt;a href=&quot;https://docs.syncthing.net/users/config.html#description&quot;&gt;docs.syncthing.net/users/config.html&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Disable automatic update checker&lt;/h2&gt; 
&lt;p&gt;By default the Syncthing macOS application checks automatically for updates. To disable (or re-enable) the auto update check one must set the Sparkle updater parameter from the commandline:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;defaults write com.github.xor-gate.syncthing-macosx SUEnableAutomaticChecks 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This setting is un-adviced and therefor only available from the commandline. When your system is not supported anymore and don&#39;t want to get notified of unsupported updates disabling then is recommended.&lt;/p&gt; 
&lt;h1&gt;Prerequisites for building/using everything in this repository&lt;/h1&gt; 
&lt;p&gt;Before compiling git submodules needs to be present:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git submodule update --init
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode, for the Objective-C/Swift compiler&lt;/li&gt; 
 &lt;li&gt;Python 3, for the update-release.py script 
  &lt;ul&gt; 
   &lt;li&gt;Needs &lt;a href=&quot;https://pypi.org/project/semver/&quot;&gt;semver&lt;/a&gt; from pip&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Cocoapods for updating Objective-C/Swift 3th party dependencies&lt;/li&gt; 
 &lt;li&gt;Golang, only needed for Sparkle GitHub Releases to Appcast XML tool&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Using XCode&lt;/h1&gt; 
&lt;p&gt;The new &lt;code&gt;syncthing.xcworkspace&lt;/code&gt; must be used when coding in XCode.&lt;/p&gt; 
&lt;h1&gt;Compiling from Terminal&lt;/h1&gt; 
&lt;p&gt;Build with XCode or run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It will automaticly download syncthing universal binary and add it to the Application Bundle.&lt;/p&gt; 
&lt;p&gt;For release builds signing the application build and creating an distributable DMG:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make release-dmg
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The script will select the first available Developer ID and sign the app with it. To specify the signing identity, use &lt;code&gt;SYNCTHING_APP_CODE_SIGN_IDENTITY&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SYNCTHING_APP_CODE_SIGN_IDENTITY=&quot;Mac Developer: foo@bar.com (XB59MXU8EC)&quot; make release-dmg
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Design and useful information&lt;/h1&gt; 
&lt;h2&gt;Settings&lt;/h2&gt; 
&lt;p&gt;The Syncthing settings use the NSDefaults facility. From the commandline all settings can be shown with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;jerry@Jerrys-iMac ~ % defaults read com.github.xor-gate.syncthing-macosx
{
    ApiKey = rR7YrEDLKhNETJZKgySmnYPZvebY9qgk;
    Executable = &quot;/Applications/Syncthing.app/Contents/Resources/syncthing/syncthing&quot;;
    SUEnableAutomaticChecks = 1;
    SUHasLaunchedBefore = 1;
    SULastCheckTime = &quot;2021-01-08 12:05:53 +0000&quot;;
    SUSendProfileInfo = 0;
    StartAtLogin = 1;
    URI = &quot;http://127.0.0.1:8384&quot;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Override Syncthing Daeomon &lt;code&gt;Executable&lt;/code&gt; property (power-users only)&lt;/h3&gt; 
&lt;p&gt;If you want to use the nice GUI but have your own executable located outside the &lt;code&gt;Syncthing.app&lt;/code&gt; bundle, then the &lt;code&gt;Executable&lt;/code&gt; configuration parameter can be manually overwritten with the &lt;code&gt;defaults&lt;/code&gt; commandline tool using builtin Terminal or iTerm2. The last arguments should be changed to the syncthing daemon golang application.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;defaults write com.github.xor-gate.syncthing-macosx Executable /Users/jerry/develop/Syncthing/exe/syncthing
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To restore it back to the bundle path just use delete of the property. It will automatically reset it back.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;defaults delete com.github.xor-gate.syncthing-macosx Executable
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dependency management&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; is used for dependency management. It can be installed with &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; package manager. For more information about CocoaPods read the &lt;a href=&quot;https://guides.cocoapods.org/&quot;&gt;CocoaPods Guides&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Versioning scheme&lt;/h2&gt; 
&lt;p&gt;It uses the shipped syncthing executable version appended with a &lt;code&gt;-&amp;lt;bundle index&amp;gt;&lt;/code&gt; number. So for Syncthing &lt;code&gt;0.14.28&lt;/code&gt; with first build/package it is versioned as &lt;code&gt;0.14.28-1&lt;/code&gt;. Currently there is no need for having a separate version for &lt;code&gt;syncthing-macos&lt;/code&gt;. As it also keeps the wrapper tightly coupled with the syncthing releases.&lt;/p&gt; 
&lt;h2&gt;Compilation and packaging process&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode builds all sources&lt;/li&gt; 
 &lt;li&gt;Syncthing resource is fetched with &lt;code&gt;syncthing/Scripts/syncthing-resource.sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fancy DMG disk image is generated with &lt;code&gt;syncthing/Scripts/create-dmg.sh&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The version part of the DMG name is fetched from &lt;code&gt;syncthing/Info.plist, key CFBundleShortVersionString&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Both the app bundle and the DMG are signed with the first available Developer ID certificate, if found (or the one specified through &lt;code&gt;SYNCTHING_APP_CODE_SIGN_IDENTITY&lt;/code&gt; environment variable)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;syncthing/syncthing-macos&lt;/code&gt; will only ship &lt;a href=&quot;https://forum.syncthing.net/t/introducing-stable-releases-and-release-candidates/9167&quot;&gt;stable releases and no release candidates&lt;/a&gt; of the Syncthing Service (daemon).&lt;/p&gt; 
&lt;h2&gt;Apple Application Notarize&lt;/h2&gt; 
&lt;p&gt;After the dmg is created it must be send to Apple to be notarized. It can be checked with &lt;code&gt;spctl&lt;/code&gt; if the app is correctly verified by Apple for distribution:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;spctl -a -t exec -vvv /Volumes/Syncthing/Syncthing.app
/Volumes/Syncthing/Syncthing.app: accepted
source=Notarized Developer ID
origin=Developer ID Application: Jakob Borg (LQE5SYM783)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When it is not correctly notarized the following output is seen (note the source):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;spctl -a -t exec -vvv /Volumes/Syncthing/Syncthing.app
/Volumes/Syncthing/Syncthing.app: accepted
source=Developer ID
origin=Developer ID Application: Jakob Borg (LQE5SYM783)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also the Apple Developer documentation at &lt;a href=&quot;https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution&quot;&gt;https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Release management&lt;/h2&gt; 
&lt;p&gt;Run &lt;code&gt;make update-release&lt;/code&gt; from the toplevel Makefile to bundle latest Syncthing from GitHub.&lt;/p&gt; 
&lt;p&gt;To update the bundled syncthing the &lt;code&gt;make release-update&lt;/code&gt; must be run from the main folder which does basicly these steps automatically:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Update &lt;code&gt;syncthing/Scripts/syncthing-resource.sh&lt;/code&gt;, &lt;code&gt;SYNCTHING_VERSION&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Update &lt;code&gt;syncthing/Info.plist&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;CFBundleShortVersionString&lt;/code&gt;: User readable string (e.g &lt;code&gt;1.27.10-1&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;CFBundleVersion&lt;/code&gt;: Incrementing version counter (e.g &lt;code&gt;102701001&lt;/code&gt; for &lt;code&gt;1.27.10-1&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When the git branch develop or release pushed to github the Github actions CI server automatically builds debug and release&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Manually download the release &lt;code&gt;.dmg&lt;/code&gt; from &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/actions/workflows/build-syncthing-macos.yml&quot;&gt;github.com actions&lt;/a&gt; which is correctly signed and notarized&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Manually &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/releases/new&quot;&gt;create a new Github release&lt;/a&gt; with tag &lt;code&gt;v&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;-&amp;lt;bundle index&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run deployment of Sparkle updater &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/actions/workflows/generate-appcast.yml&quot;&gt;appcast.xml&lt;/a&gt;. Which turns &lt;a href=&quot;https://github.com/syncthing/syncthing-macos/tree/develop/cmd/ghreleases2appcast&quot;&gt;GitHub Releases JSON into a Sparkle appcast.xml file&lt;/a&gt;. (See also &lt;a href=&quot;https://sparkle-project.org/documentation/&quot;&gt;Sparkle documentation&lt;/a&gt;) to push to users.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support for additional languages&lt;/h2&gt; 
&lt;h3&gt;1. Add Language in Xcode&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open &lt;code&gt;syncthing.xcworkspace&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Select project root -&amp;gt; &lt;strong&gt;Project -&amp;gt; Info -&amp;gt; Localizations&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Click &lt;strong&gt;+&lt;/strong&gt; and select target language&lt;/li&gt; 
 &lt;li&gt;Select all files when prompted&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;2. Translate&lt;/h3&gt; 
&lt;p&gt;Edit files in &lt;code&gt;syncthing/[language_code].lproj/&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/* Keep key, translate value */
&quot;Up to date&quot; = &quot;Actualizado&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. Update Info.plist&lt;/h3&gt; 
&lt;p&gt;Add language code to &lt;code&gt;CFBundleLocalizations&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;string&amp;gt;es&amp;lt;/string&amp;gt;  &amp;lt;!-- New language --&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;4. Test&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make debug
open ./Build/Products/Debug/Syncthing.app --args -AppleLanguages &#39;(language_code)&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>google/GoogleUtilities</title>
      <link>https://github.com/google/GoogleUtilities</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/GoogleUtilities&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/GoogleUtilities.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/GoogleUtilities&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/GoogleUtilities.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/GoogleUtilities&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/GoogleUtilities.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/firebase/firebase-ios-sdk/actions&quot;&gt;&lt;img src=&quot;https://github.com/firebase/firebase-ios-sdk/workflows/google-utilities/badge.svg?sanitize=true&quot; alt=&quot;Actions Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;GoogleUtilities&lt;/h1&gt; 
&lt;p&gt;GoogleUtilities provides a set of utilities for Firebase and other Google SDKs for Apple platform development.&lt;/p&gt; 
&lt;p&gt;The utilities are not directly supported for non-Google library usage.&lt;/p&gt; 
&lt;h2&gt;Integration Testing&lt;/h2&gt; 
&lt;p&gt;These instructions apply to minor and patch version updates. Major versions need a customized adaptation.&lt;/p&gt; 
&lt;p&gt;After the CI is green:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Determine the next version for release by checking the &lt;a href=&quot;https://github.com/google/GoogleUtilities/tags&quot;&gt;tagged releases&lt;/a&gt;. Ensure that the next release version keeps the Swift PM and CocoaPods versions in sync.&lt;/li&gt; 
 &lt;li&gt;Verify that the releasing version is the latest entry in the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;, updating it if necessary.&lt;/li&gt; 
 &lt;li&gt;Update the version in the podspec to match the latest entry in the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Checkout the &lt;code&gt;main&lt;/code&gt; branch and ensure it is up to date &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git checkout main
git pull
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add the CocoaPods tag (&lt;code&gt;{version}&lt;/code&gt; will be the latest version in the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/GoogleUtilities.podspec#L3&quot;&gt;podspec&lt;/a&gt;) &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git tag CocoaPods-{version}
git push origin CocoaPods-{version}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Push the podspec to the designated repo 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;If this version of GoogleUtilities is intended to launch &lt;strong&gt;before or with&lt;/strong&gt; the next Firebase release:&lt;/p&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Push to &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo push --skip-tests --use-json staging GoogleUtilities.podspec
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;staging&#39; repo.&lt;/code&gt;, add the staging repo with:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo add staging git@github.com:firebase/SpecsStaging.git
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Otherwise:&lt;/p&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Push to &lt;b&gt;SpecsDev&lt;/b&gt;&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo push --skip-tests --use-json dev GoogleUtilities.podspec
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;If the command fails with &lt;code&gt;Unable to find the &#39;dev&#39; repo.&lt;/code&gt;, add the dev repo with:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod repo add dev git@github.com:firebase/SpecsDev.git
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run Firebase CI by waiting until next nightly or adding a PR that touches &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;On google3, run copybara using the command below. Then, start a global TAP on the generated CL. Deflake as needed. &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;third_party/firebase/ios/Releases/run_copy_bara.py --directory GoogleUtilities --branch main
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Publishing&lt;/h2&gt; 
&lt;p&gt;The release process is as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#swift-package-manager&quot;&gt;Tag and release for Swift PM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#cocoapods&quot;&gt;Publish to CocoaPods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#create-github-release&quot;&gt;Create GitHub Release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#post-release-cleanup&quot;&gt;Perform post release cleanup&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;By creating and &lt;a href=&quot;https://github.com/google/GoogleUtilities/tags&quot;&gt;pushing a tag&lt;/a&gt; for Swift PM, the newly tagged version will be immediately released for public use. Given this, please verify the intended time of release for Swift PM.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add a version tag for Swift PM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;git tag {version}
git push origin {version}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note: Ensure that any inflight PRs that depend on the new &lt;code&gt;GoogleUtilities&lt;/code&gt; version are updated to point to the newly tagged version rather than a checksum.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Publish the newly versioned pod to CocoaPods&lt;/p&gt; &lt;p&gt;It&#39;s recommended to point to the &lt;code&gt;GoogleUtilities.podspec&lt;/code&gt; in &lt;code&gt;staging&lt;/code&gt; to make sure the correct spec is being published.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pod trunk push ~/.cocoapods/repos/staging/GoogleUtilities/{version}/GoogleUtilities.podspec.json
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: In some cases, it may be acceptable to &lt;code&gt;pod trunk push&lt;/code&gt; with the &lt;code&gt;--skip-tests&lt;/code&gt; flag. Please double check with the maintainers before doing so.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The pod push was successful if the above command logs: &lt;code&gt;🚀 GoogleUtilities ({version}) successfully published&lt;/code&gt;. In addition, a new commit that publishes the new version (co-authored by &lt;a href=&quot;https://github.com/CocoaPodsAtGoogle&quot;&gt;CocoaPodsAtGoogle&lt;/a&gt;) should appear in the &lt;a href=&quot;https://github.com/CocoaPods/Specs&quot;&gt;CocoaPods specs repo&lt;/a&gt;. Last, the latest version should be displayed on &lt;a href=&quot;https://cocoapods.org/pods/GoogleUtilities&quot;&gt;GoogleUtilities&#39;s CocoaPods page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/google/GoogleUtilities/releases/new/&quot;&gt;Create GitHub Release&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Update the &lt;a href=&quot;https://github.com/google/GoogleUtilities/releases/new/&quot;&gt;release template&lt;/a&gt;&#39;s &lt;strong&gt;Tag version&lt;/strong&gt; and &lt;strong&gt;Release title&lt;/strong&gt; fields with the latest version. In addition, reference the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/CHANGELOG.md&quot;&gt;Release Notes&lt;/a&gt; in the release&#39;s description.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/google/GoogleUtilities/releases/edit/7.7.0&quot;&gt;this release&lt;/a&gt; for an example.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Don&#39;t forget to perform the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/#post-release-cleanup&quot;&gt;post release cleanup&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Post Release Cleanup&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Clean up &lt;b&gt;SpecsStaging&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;pwd=$(pwd)
mkdir -p /tmp/release-cleanup &amp;amp;&amp;amp; cd $_
git clone git@github.com:firebase/SpecsStaging.git
cd SpecsStaging/
git rm -rf GoogleUtilities/
git commit -m &quot;Post publish cleanup&quot;
git push origin master
rm -rf /tmp/release-cleanup
cd $pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;To develop in this repository, ensure that you have at least the following software:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode 12.0 (or later)&lt;/li&gt; 
 &lt;li&gt;CocoaPods 1.10.0 (or later)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/square/cocoapods-generate&quot;&gt;CocoaPods generate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the pod that you want to develop:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pod gen GoogleUtilities.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Note: If the CocoaPods cache is out of date, you may need to run &lt;code&gt;pod repo update&lt;/code&gt; before the &lt;code&gt;pod gen&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;Note: Set the &lt;code&gt;--platforms&lt;/code&gt; option to &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;tvos&lt;/code&gt; to develop/test for those platforms. Since 10.2, Xcode does not properly handle multi-platform CocoaPods workspaces.&lt;/p&gt; 
&lt;h3&gt;Development for Catalyst&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;pod gen GoogleUtilities.podspec --local-sources=./ --auto-open --platforms=ios&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Check the Mac box in the App-iOS Build Settings&lt;/li&gt; 
 &lt;li&gt;Sign the App in the Settings Signing &amp;amp; Capabilities tab&lt;/li&gt; 
 &lt;li&gt;Click Pods in the Project Manager&lt;/li&gt; 
 &lt;li&gt;Add Signing to the iOS host app and unit test targets&lt;/li&gt; 
 &lt;li&gt;Select the Unit-unit scheme&lt;/li&gt; 
 &lt;li&gt;Run it to build and test&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatively disable signing in each target:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to Build Settings tab&lt;/li&gt; 
 &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Select &lt;code&gt;Add User-Defined Setting&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;CODE_SIGNING_REQUIRED&lt;/code&gt; setting with a value of &lt;code&gt;NO&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Code Formatting&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/firebase/firebase-ios-sdk?tab=readme-ov-file#code-formatting&quot;&gt;firebase-ios-sdk&#39;s code formatting docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Running Unit Tests&lt;/h3&gt; 
&lt;p&gt;Select a scheme and press Command-u to build a component and run its unit tests.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleUtilities/main/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The contents of this repository is licensed under the &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/GoogleSignIn-iOS</title>
      <link>https://github.com/google/GoogleSignIn-iOS</link>
      <description>&lt;p&gt;Enables iOS and macOS apps to sign in with Google.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/pods/GoogleSignIn&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/GoogleSignIn.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/GoogleSignIn&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/GoogleSignIn.svg?style=flat&quot; alt=&quot;Platform&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/GoogleSignIn&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/GoogleSignIn.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/google/GoogleSignIn-iOS/actions/workflows/unit_tests.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/GoogleSignIn-iOS/actions/workflows/unit_tests.yml/badge.svg?branch=main&quot; alt=&quot;unit_tests&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/google/GoogleSignIn-iOS/actions/workflows/integration_tests.yml&quot;&gt;&lt;img src=&quot;https://github.com/google/GoogleSignIn-iOS/actions/workflows/integration_tests.yml/badge.svg?branch=main&quot; alt=&quot;integration_tests&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Google Sign-In for iOS and macOS&lt;/h1&gt; 
&lt;p&gt;Get users into your apps quickly and securely, using a registration system they already use and trust—their Google account.&lt;/p&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://developers.google.com/identity/sign-in/ios/&quot;&gt;our developer site&lt;/a&gt; for integration instructions, documentation, support information, and terms of service.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Try either the &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/ObjC&quot;&gt;Objective-C&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift&quot;&gt;Swift&lt;/a&gt; sample app. For example, to demo the Objective-C sample project, you have two options:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Using CocoaPod&#39;s &lt;code&gt;install&lt;/code&gt; method:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS
cd GoogleSignIn-iOS/Samples/ObjC/SignInSample/
pod install
open SignInSampleForPod.xcworkspace
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Using &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/GoogleSignIn-iOS
open GoogleSignIn-iOS/Samples/ObjC/SignInSample/SignInSample.xcodeproj
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would like to see a Swift example, take a look at &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/Samples/Swift/DaysUntilBirthday&quot;&gt;Samples/Swift/DaysUntilBirthday&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add Google Sign-In to your own app by following our &lt;a href=&quot;https://developers.google.com/identity/sign-in/ios/start-integrating&quot;&gt;getting started guides&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Take a look at the &lt;a href=&quot;https://developers.google.com/identity/sign-in/ios/api/&quot;&gt;API reference&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Google Sign-In on macOS&lt;/h2&gt; 
&lt;p&gt;Google Sign-In allows your users to sign-in to your native macOS app using their Google account and default browser. When building for macOS, the &lt;code&gt;signInWithConfiguration:&lt;/code&gt; and &lt;code&gt;addScopes:&lt;/code&gt; methods take a &lt;code&gt;presentingWindow:&lt;/code&gt; parameter in place of &lt;code&gt;presentingViewController:&lt;/code&gt;. Note that in order for your macOS app to store credentials via the Keychain on macOS, you will need to add &lt;code&gt;$(AppIdentifierPrefix)$(CFBundleIdentifier)&lt;/code&gt; to its keychain access group.&lt;/p&gt; 
&lt;h3&gt;Mac Catalyst&lt;/h3&gt; 
&lt;p&gt;Google Sign-In also supports iOS apps that are built for macOS via &lt;a href=&quot;https://developer.apple.com/mac-catalyst/&quot;&gt;Mac Catalyst&lt;/a&gt;. In order for your Mac Catalyst app to store credentials via the Keychain on macOS, you will need to add &lt;code&gt;$(AppIdentifierPrefix)$(CFBundleIdentifier)&lt;/code&gt; to its keychain access group.&lt;/p&gt; 
&lt;h2&gt;Using the Google Sign-In Button&lt;/h2&gt; 
&lt;p&gt;There are several ways to add a &#39;Sign in with Google&#39; button to your app, which path you choose will depend on your UI framework and target platform.&lt;/p&gt; 
&lt;h3&gt;SwiftUI (iOS and macOS)&lt;/h3&gt; 
&lt;p&gt;Creating a &#39;Sign in with Google&#39; button in SwiftUI can be as simple as this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GoogleSignInButton {
  GIDSignIn.sharedInstance.signIn(withPresenting: yourViewController) { signInResult, error in
      // check `error`; do something with `signInResult`
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This example takes advantage of the initializer&#39;s &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButton.swift#L39&quot;&gt;default argument for the view model&lt;/a&gt;. The default arguments for the view model will use the light scheme, the standard button style, and the normal button state. You can supply an instance of &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButtonViewModel.swift&quot;&gt;&lt;code&gt;GoogleSignInButtonViewModel&lt;/code&gt;&lt;/a&gt; with different values for these properties to customize the button. &lt;a href=&quot;https://raw.githubusercontent.com/google/GoogleSignIn-iOS/main/GoogleSignInSwift/Sources/GoogleSignInButton.swift#L56&quot;&gt;This convenience initializer&lt;/a&gt; provides parameters that you can use to set these values as needed.&lt;/p&gt; 
&lt;h3&gt;UIKit (iOS)&lt;/h3&gt; 
&lt;p&gt;If you are not using SwiftUI to build your user interfaces, you can either create &lt;code&gt;GIDSignInButton&lt;/code&gt; programmatically, or in a Xib/Storyboard. If you are writing programmatic UI code, it will look something like this:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;let button = GIDSignInButton(frame: CGRect(&amp;lt;YOUR_RECT&amp;gt;))&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;AppKit (macOS)&lt;/h3&gt; 
&lt;p&gt;Given that &lt;code&gt;GIDSignInButton&lt;/code&gt; is implemented as a subclass of &lt;code&gt;UIControl&lt;/code&gt;, it will not be available on macOS. You can instead use the SwiftUI Google sign-in button. Doing so will require that you wrap the SwiftUI button in a hosting view so that it will be available for use in AppKit.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;let signInButton = GoogleSignInButton {
  GIDSignIn.sharedInstance.signIn(withPresenting: yourViewController) { signInResult, error in
      // check `error`; do something with `signInResult`
  }
}
let hostedButton = NSHostingView(rootView: signInButton)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>braze-inc/braze-swift-sdk</title>
      <link>https://github.com/braze-inc/braze-swift-sdk</link>
      <description>&lt;p&gt;Braze SDK for the Apple ecosystem, including: iOS, macOS, iPadOS, visionOS, tvOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;480&quot; alt=&quot;Braze Logo&quot; src=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/.github/assets/logo-light.png#gh-light-mode-only&quot; /&gt; &lt;img width=&quot;480&quot; alt=&quot;Braze Logo&quot; src=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/.github/assets/logo-dark.png#gh-dark-mode-only&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk/releases&quot;&gt; &lt;img src=&quot;https://badgen.net/badge/version/13.2.1/blue&quot; alt=&quot;Version: 13.2.1&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/#&quot;&gt; &lt;img src=&quot;https://badgen.net/badge/platforms/iOS%20%7C%20visionOS%20%7C%20tvOS%20%7C%20Mac%20Catalyst/orange&quot; alt=&quot;Platforms: iOS - visionOS – tvOS – Mac Catalyst&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/#&quot;&gt; &lt;img src=&quot;https://badgen.net/badge/package%20managers/SwiftPM%20%7C%20CocoaPods/green&quot; alt=&quot;Package Managers: SwiftPM - CocoaPods&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk/raw/main/LICENSE&quot;&gt; &lt;img src=&quot;https://badgen.net/badge/license/Commercial/black&quot; alt=&quot;License: Commercial&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Braze Swift SDK&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.braze.com/docs/user_guide/introduction/&quot; title=&quot;Braze User Guide&quot;&gt;Braze User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://braze-inc.github.io/braze-swift-sdk&quot;&gt;Braze Swift SDK Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://braze-inc.github.io/braze-swift-sdk/documentation/braze/appboy-migration-guide&quot;&gt;Appboy-iOS-SDK: Migration guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Version Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The Braze Swift SDK supports 
  &lt;ul&gt; 
   &lt;li&gt;iOS 12.0+&lt;/li&gt; 
   &lt;li&gt;Mac Catalyst 13.0+&lt;/li&gt; 
   &lt;li&gt;tvOS 12.0+&lt;/li&gt; 
   &lt;li&gt;visionOS 1.0+&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Xcode 16.0 (16A242d) or newer&lt;/li&gt; 
 &lt;li&gt;This repository follows &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Package Managers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swift Package Manager&lt;/li&gt; 
 &lt;li&gt;CocoaPods&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Libraries&lt;/h2&gt; 
&lt;!-- Table generated with https://www.tablesgenerator.com/markdown_tables --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;iOS&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;tvOS&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;macCatatyst&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;visionOS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazeKit&lt;/strong&gt;&lt;br /&gt; &lt;em&gt;Main SDK library providing support for &lt;a href=&quot;https://www.braze.com/docs/user_guide/data_and_analytics/user_data_collection/sdk_data_collection/&quot;&gt;analytics&lt;/a&gt; and &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/push&quot;&gt;push notifications&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazeUI&lt;/strong&gt;&lt;br /&gt; &lt;em&gt;Braze-provided user interface library for &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/in-app_messages&quot;&gt;In-App Messages&lt;/a&gt; and &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/content_cards&quot;&gt;Content Cards&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazeLocation&lt;/strong&gt;&lt;br /&gt; &lt;em&gt;Location library providing support for &lt;a href=&quot;https://www.braze.com/docs/user_guide/engagement_tools/locations_and_geofences&quot;&gt;location analytics and geofence monitoring&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazeNotificationService&lt;/strong&gt;&lt;br /&gt; &lt;em&gt;Notification service extension library providing support for &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/push/ios/rich_notifications/&quot;&gt;rich push notifications&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BrazePushStory&lt;/strong&gt;&lt;br /&gt; &lt;em&gt;Notification content extension library providing support for &lt;a href=&quot;https://www.braze.com/docs/user_guide/message_building_by_channel/push/advanced_push_options/push_stories/&quot;&gt;Push Stories&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n/a&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; &lt;em&gt;Push notifications not supported on tvOS&lt;/em&gt;&lt;br /&gt; &lt;sup&gt;2&lt;/sup&gt; &lt;em&gt;Geofence monitoring not supported on tvOS and visionOS&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Explore our &lt;a href=&quot;https://raw.githubusercontent.com/braze-inc/braze-swift-sdk/main/Examples&quot;&gt;examples project&lt;/a&gt; which showcases multiple features&#39; integrations.&lt;/p&gt; 
&lt;h2&gt;Wrapper Support&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;Wrapper SDK&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;Swift SDK Support&lt;/th&gt; 
   &lt;th&gt;Release Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;React Native&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;2.0.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Flutter&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;3.0.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Cordova&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;2.33.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Unity&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;4.0.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Xamarin&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;4.0.0&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Alternative Repositories&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variant&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;Repository&lt;/th&gt; 
   &lt;th align=&quot;right&quot;&gt;GH Issues, SDK info&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;→ &lt;strong&gt;Sources and Static XCFrameworks&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk&quot;&gt;braze-inc/braze-swift-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Static XCFrameworks&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk-prebuilt-static&quot;&gt;braze-inc/braze-swift-sdk-prebuilt-static&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;✗&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dynamic XCFrameworks&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk-prebuilt-dynamic&quot;&gt;braze-inc/braze-swift-sdk-prebuilt-dynamic&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;✗&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mergeable XCFrameworks (early access)&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk-prebuilt-mergeable&quot;&gt;braze-inc/braze-swift-sdk-prebuilt-mergeable&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;right&quot;&gt;✗&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;&lt;code&gt;Appboy-iOS-SDK&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;As of version 5.8.0, the Braze Swift SDK provides all the features available in the &lt;code&gt;Appboy-iOS-SDK&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We recommend all users to migrate to the Braze Swift SDK. For more information, please refer to our &lt;a href=&quot;https://braze-inc.github.io/braze-swift-sdk/documentation/braze/appboy-migration-guide&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;Appboy-iOS-SDK&lt;/code&gt; (Objective-C) SDK is now in maintenance mode, which means only critical bug fixes, and security updates will be made. No new features or minor bug fixes will be added to that library.&lt;/p&gt; 
&lt;h2&gt;Questions?&lt;/h2&gt; 
&lt;p&gt;If you have questions, please contact &lt;a href=&quot;mailto:support@braze.com&quot;&gt;support@braze.com&lt;/a&gt; or open a &lt;a href=&quot;https://github.com/braze-inc/braze-swift-sdk/issues&quot;&gt;Github Issue&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openid/AppAuth-iOS</title>
      <link>https://github.com/openid/AppAuth-iOS</link>
      <description>&lt;p&gt;iOS and macOS SDK for communicating with OAuth 2.0 and OpenID Connect providers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://rawgit.com/openid/AppAuth-iOS/master/appauth_lockup.svg?sanitize=true&quot; alt=&quot;AppAuth for iOS and macOS&quot; /&gt; &lt;a href=&quot;https://github.com/openid/AppAuth-iOS/actions/workflows/tests.yml&quot;&gt;&lt;img src=&quot;https://github.com/openid/AppAuth-iOS/actions/workflows/tests.yml/badge.svg?event=push&quot; alt=&quot;tests&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/openid/AppAuth-iOS&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/openid/AppAuth-iOS/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?style=flat&quot; alt=&quot;SwiftPM compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/AppAuth&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/AppAuth.svg?style=flat&quot; alt=&quot;Pod Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/openid/AppAuth-iOS/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/AppAuth.svg?style=flat&quot; alt=&quot;Pod License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/AppAuth&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/p/AppAuth.svg?style=flat&quot; alt=&quot;Pod Platform&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/documentation/xcode/creating_a_mac_version_of_your_ipad_app&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Catalyst-compatible-brightgreen.svg?style=flat&quot; alt=&quot;Catalyst compatible&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;AppAuth for iOS and macOS, and tvOS is a client SDK for communicating with &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot;&gt;OAuth 2.0&lt;/a&gt; and &lt;a href=&quot;http://openid.net/specs/openid-connect-core-1_0.html&quot;&gt;OpenID Connect&lt;/a&gt; providers. It strives to directly map the requests and responses of those specifications, while following the idiomatic style of the implementation language. In addition to mapping the raw protocol flows, convenience methods are available to assist with common tasks like performing an action with fresh tokens.&lt;/p&gt; 
&lt;p&gt;It follows the best practices set out in &lt;a href=&quot;https://tools.ietf.org/html/rfc8252&quot;&gt;RFC 8252&amp;nbsp;- OAuth 2.0 for Native Apps&lt;/a&gt; including using &lt;code&gt;SFAuthenticationSession&lt;/code&gt; and &lt;code&gt;SFSafariViewController&lt;/code&gt; on iOS for the auth request. &lt;code&gt;UIWebView&lt;/code&gt; and &lt;code&gt;WKWebView&lt;/code&gt; are explicitly &lt;em&gt;not&lt;/em&gt; supported due to the security and usability reasons explained in &lt;a href=&quot;https://tools.ietf.org/html/rfc8252#section-8.12&quot;&gt;Section 8.12 of RFC 8252&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;It also supports the &lt;a href=&quot;https://tools.ietf.org/html/rfc7636&quot;&gt;PKCE&lt;/a&gt; extension to OAuth, which was created to secure authorization codes in public clients when custom URI scheme redirects are used. The library is friendly to other extensions (standard or otherwise), with the ability to handle additional params in all protocol requests and responses.&lt;/p&gt; 
&lt;p&gt;For tvOS, AppAuth implements &lt;a href=&quot;https://tools.ietf.org/html/rfc8628&quot;&gt;OAuth 2.0 Device Authorization Grant &lt;/a&gt; to allow for tvOS sign-ins through a secondary device.&lt;/p&gt; 
&lt;h2&gt;Specification&lt;/h2&gt; 
&lt;h3&gt;iOS&lt;/h3&gt; 
&lt;h4&gt;Supported Versions&lt;/h4&gt; 
&lt;p&gt;AppAuth supports iOS 12 and above.&lt;/p&gt; 
&lt;p&gt;iOS 9+ uses the in-app browser tab pattern (via &lt;code&gt;SFSafariViewController&lt;/code&gt;), and falls back to the system browser (mobile Safari) on earlier versions.&lt;/p&gt; 
&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; 
&lt;p&gt;Both Custom URI Schemes (all supported versions of iOS) and Universal Links (iOS 9+) can be used with the library.&lt;/p&gt; 
&lt;p&gt;In general, AppAuth can work with any authorization server that supports native apps, as documented in &lt;a href=&quot;https://tools.ietf.org/html/rfc8252&quot;&gt;RFC 8252&lt;/a&gt;, either through custom URI scheme redirects, or universal links. Authorization servers that assume all clients are web-based, or require clients to maintain confidentiality of the client secrets may not work well.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;h4&gt;Supported Versions&lt;/h4&gt; 
&lt;p&gt;AppAuth supports macOS (OS X) 10.9 and above.&lt;/p&gt; 
&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; 
&lt;p&gt;AppAuth for macOS supports both custom schemes; a loopback HTTP redirects via a small embedded server.&lt;/p&gt; 
&lt;p&gt;In general, AppAuth can work with any authorization server that supports native apps, as documented in &lt;a href=&quot;https://tools.ietf.org/html/rfc8252&quot;&gt;RFC 8252&lt;/a&gt;; either through custom URI schemes, or loopback HTTP redirects. Authorization servers that assume all clients are web-based, or require clients to maintain confidentiality of the client secrets may not work well.&lt;/p&gt; 
&lt;h3&gt;tvOS&lt;/h3&gt; 
&lt;h4&gt;Supported Versions&lt;/h4&gt; 
&lt;p&gt;AppAuth supports tvOS 9.0 and above. Please note that while it is possible to run the standard AppAuth library on tvOS, the documentation below describes implementing &lt;a href=&quot;https://tools.ietf.org/html/rfc8628&quot;&gt;OAuth 2.0 Device Authorization Grant&lt;/a&gt; (AppAuthTV).&lt;/p&gt; 
&lt;h4&gt;Authorization Server Requirements&lt;/h4&gt; 
&lt;p&gt;AppAuthTV is designed for servers that support the device authorization flow as documented in &lt;a href=&quot;https://tools.ietf.org/html/rfc8628&quot;&gt;RFC 8628&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Try&lt;/h2&gt; 
&lt;p&gt;Want to try out AppAuth? Just run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod try AppAuth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Follow the instructions in &lt;a href=&quot;https://raw.githubusercontent.com/openid/AppAuth-iOS/master/Examples/README.md&quot;&gt;Examples/README.md&lt;/a&gt; to configure with your own OAuth client (you need to update three configuration points with your client info to try the demo).&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;AppAuth supports four options for dependency management.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;With &lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html&quot;&gt;CocoaPods&lt;/a&gt;, add the following line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod &#39;AppAuth&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;TV&lt;/code&gt; subspec:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pod &#39;AppAuth/TV&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;With &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;, add the following &lt;code&gt;dependency&lt;/code&gt; to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/openid/AppAuth-iOS.git&quot;, .upToNextMajor(from: &quot;1.3.0&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;AppAuthTV&lt;/code&gt; target.&lt;/p&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;With &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;openid/AppAuth-iOS&quot; &quot;master&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run &lt;code&gt;carthage bootstrap&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;tvOS:&lt;/strong&gt; Use the &lt;code&gt;AppAuthTV&lt;/code&gt; framework.&lt;/p&gt; 
&lt;h3&gt;Static Library&lt;/h3&gt; 
&lt;p&gt;You can also use AppAuth as a static library. This requires linking the library and your project, and including the headers. Here is a suggested configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create an Xcode Workspace.&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;AppAuth.xcodeproj&lt;/code&gt; to your Workspace.&lt;/li&gt; 
 &lt;li&gt;Include libAppAuth as a linked library for your target (in the &quot;General -&amp;gt; Linked Framework and Libraries&quot; section of your target).&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;AppAuth-iOS/Source&lt;/code&gt; to your search paths of your target (&quot;Build Settings -&amp;gt; &quot;Header Search Paths&quot;).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;Note: There is no static library for AppAuthTV.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Auth Flow&lt;/h2&gt; 
&lt;p&gt;AppAuth supports both manual interaction with the authorization server where you need to perform your own token exchanges, as well as convenience methods that perform some of this logic for you. This example uses the convenience method, which returns either an &lt;code&gt;OIDAuthState&lt;/code&gt; object, or an error.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;OIDAuthState&lt;/code&gt; is a class that keeps track of the authorization and token requests and responses, and provides a convenience method to call an API with fresh tokens. This is the only object that you need to serialize to retain the authorization state of the session.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;You can configure AppAuth by specifying the endpoints directly:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSURL *authorizationEndpoint =
    [NSURL URLWithString:@&quot;https://accounts.google.com/o/oauth2/v2/auth&quot;];
NSURL *tokenEndpoint =
    [NSURL URLWithString:@&quot;https://www.googleapis.com/oauth2/v4/token&quot;];

OIDServiceConfiguration *configuration =
    [[OIDServiceConfiguration alloc]
        initWithAuthorizationEndpoint:authorizationEndpoint
                        tokenEndpoint:tokenEndpoint];

// perform the auth request...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let authorizationEndpoint = URL(string: &quot;https://accounts.google.com/o/oauth2/v2/auth&quot;)!
let tokenEndpoint = URL(string: &quot;https://www.googleapis.com/oauth2/v4/token&quot;)!
let configuration = OIDServiceConfiguration(authorizationEndpoint: authorizationEndpoint,
                                            tokenEndpoint: tokenEndpoint)

// perform the auth request...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;tvOS&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSURL *deviceAuthorizationEndpoint =
    [NSURL URLWithString:@&quot;https://oauth2.googleapis.com/device/code&quot;];
NSURL *tokenEndpoint =
    [NSURL URLWithString:@&quot;https://www.googleapis.com/oauth2/v4/token&quot;];

OIDTVServiceConfiguration *configuration =
    [[OIDTVServiceConfiguration alloc]
        initWithDeviceAuthorizationEndpoint:deviceAuthorizationEndpoint
                              tokenEndpoint:tokenEndpoint];

// perform the auth request...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or through discovery:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSURL *issuer = [NSURL URLWithString:@&quot;https://accounts.google.com&quot;];

[OIDAuthorizationService discoverServiceConfigurationForIssuer:issuer
    completion:^(OIDServiceConfiguration *_Nullable configuration,
                 NSError *_Nullable error) {

  if (!configuration) {
    NSLog(@&quot;Error retrieving discovery document: %@&quot;,
          [error localizedDescription]);
    return;
  }

  // perform the auth request...
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let issuer = URL(string: &quot;https://accounts.google.com&quot;)!

// discovers endpoints
OIDAuthorizationService.discoverConfiguration(forIssuer: issuer) { configuration, error in
  guard let config = configuration else {
    print(&quot;Error retrieving discovery document: \(error?.localizedDescription ?? &quot;Unknown error&quot;)&quot;)
    return
  }

  // perform the auth request...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;tvOS&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSURL *issuer = [NSURL URLWithString:@&quot;https://accounts.google.com&quot;];

[OIDTVAuthorizationService discoverServiceConfigurationForIssuer:issuer
    completion:^(OIDTVServiceConfiguration *_Nullable configuration,
                 NSError *_Nullable error) {

  if (!configuration) {
    NSLog(@&quot;Error retrieving discovery document: %@&quot;,
          [error localizedDescription]);
    return;
  }

  // perform the auth request...
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authorizing –&amp;nbsp;iOS&lt;/h3&gt; 
&lt;p&gt;First, you need to have a property in your &lt;code&gt;UIApplicationDelegate&lt;/code&gt; implementation to hold the session, in order to continue the authorization flow from the redirect. In this example, the implementation of this delegate is a class named &lt;code&gt;AppDelegate&lt;/code&gt;, if your app&#39;s application delegate has a different name, please update the class name in samples below accordingly.&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;@interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate&amp;gt;
// property of the app&#39;s AppDelegate
@property(nonatomic, strong, nullable) id&amp;lt;OIDExternalUserAgentSession&amp;gt; currentAuthorizationFlow;
@end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class AppDelegate: UIResponder, UIApplicationDelegate {
  // property of the app&#39;s AppDelegate
  var currentAuthorizationFlow: OIDExternalUserAgentSession?
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And your main class, a property to store the auth state:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// property of the containing class
@property(nonatomic, strong, nullable) OIDAuthState *authState;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// property of the containing class
private var authState: OIDAuthState?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, initiate the authorization request. By using the &lt;code&gt;authStateByPresentingAuthorizationRequest&lt;/code&gt; convenience method, the token exchange will be performed automatically, and everything will be protected with PKCE (if the server supports it). AppAuth also lets you perform these requests manually. See the &lt;code&gt;authNoCodeExchange&lt;/code&gt; method in the included Example app for a demonstration:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// builds authentication request
OIDAuthorizationRequest *request =
    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration
                                                  clientId:kClientID
                                                    scopes:@[OIDScopeOpenID,
                                                             OIDScopeProfile]
                                               redirectURL:kRedirectURI
                                              responseType:OIDResponseTypeCode
                                      additionalParameters:nil];

// performs authentication request
AppDelegate *appDelegate =
    (AppDelegate *)[UIApplication sharedApplication].delegate;
appDelegate.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
        presentingViewController:self
                        callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  if (authState) {
    NSLog(@&quot;Got authorization tokens. Access token: %@&quot;,
          authState.lastTokenResponse.accessToken);
    [self setAuthState:authState];
  } else {
    NSLog(@&quot;Authorization error: %@&quot;, [error localizedDescription]);
    [self setAuthState:nil];
  }
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// builds authentication request
let request = OIDAuthorizationRequest(configuration: configuration,
                                      clientId: clientID,
                                      clientSecret: clientSecret,
                                      scopes: [OIDScopeOpenID, OIDScopeProfile],
                                      redirectURL: redirectURI,
                                      responseType: OIDResponseTypeCode,
                                      additionalParameters: nil)

// performs authentication request
print(&quot;Initiating authorization request with scope: \(request.scope ?? &quot;nil&quot;)&quot;)

let appDelegate = UIApplication.shared.delegate as! AppDelegate

appDelegate.currentAuthorizationFlow =
    OIDAuthState.authState(byPresenting: request, presenting: self) { authState, error in
  if let authState = authState {
    self.setAuthState(authState)
    print(&quot;Got authorization tokens. Access token: &quot; +
          &quot;\(authState.lastTokenResponse?.accessToken ?? &quot;nil&quot;)&quot;)
  } else {
    print(&quot;Authorization error: \(error?.localizedDescription ?? &quot;Unknown error&quot;)&quot;)
    self.setAuthState(nil)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Handling the Redirect&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;The authorization response URL is returned to the app via the iOS openURL app delegate method, so you need to pipe this through to the current authorization session (created in the previous session):&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (BOOL)application:(UIApplication *)app
            openURL:(NSURL *)url
            options:(NSDictionary&amp;lt;NSString *, id&amp;gt; *)options {
  // Sends the URL to the current authorization flow (if any) which will
  // process it if it relates to an authorization response.
  if ([_currentAuthorizationFlow resumeExternalUserAgentFlowWithURL:url]) {
    _currentAuthorizationFlow = nil;
    return YES;
  }

  // Your additional URL handling (if any) goes here.

  return NO;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func application(_ app: UIApplication,
                 open url: URL,
                 options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -&amp;gt; Bool {
  // Sends the URL to the current authorization flow (if any) which will
  // process it if it relates to an authorization response.
  if let authorizationFlow = self.currentAuthorizationFlow,
                             authorizationFlow.resumeExternalUserAgentFlow(with: url) {
    self.currentAuthorizationFlow = nil
    return true
  }

  // Your additional URL handling (if any)

  return false
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authorizing –&amp;nbsp;MacOS&lt;/h3&gt; 
&lt;p&gt;On macOS, the most popular way to get the authorization response redirect is to start a local HTTP server on the loopback interface (limited to incoming requests from the user&#39;s machine only). When the authorization is complete, the user is redirected to that local server, and the authorization response can be processed by the app. AppAuth takes care of managing the local HTTP server lifecycle for you.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;h4&gt;&lt;span&gt;💡&lt;/span&gt; Alternative: Custom URI Schemes&lt;/h4&gt; 
 &lt;p&gt;Custom URI schemes are also supported on macOS, but some browsers display an interstitial, which reduces the usability. For an example on using custom URI schemes with macOS, See &lt;code&gt;Example-Mac&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To receive the authorization response using a local HTTP server, first you need to have an instance variable in your main class to retain the HTTP redirect handler:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;OIDRedirectHTTPHandler *_redirectHTTPHandler;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, as the port used by the local HTTP server varies, you need to start it before building the authorization request, in order to get the exact redirect URI to use:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;static NSString *const kSuccessURLString =
    @&quot;http://openid.github.io/AppAuth-iOS/redirect/&quot;;
NSURL *successURL = [NSURL URLWithString:kSuccessURLString];

// Starts a loopback HTTP redirect listener to receive the code.  This needs to be started first,
// as the exact redirect URI (including port) must be passed in the authorization request.
_redirectHTTPHandler = [[OIDRedirectHTTPHandler alloc] initWithSuccessURL:successURL];
NSURL *redirectURI = [_redirectHTTPHandler startHTTPListener:nil];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, initiate the authorization request. By using the &lt;code&gt;authStateByPresentingAuthorizationRequest&lt;/code&gt; convenience method, the token exchange will be performed automatically, and everything will be protected with PKCE (if the server supports it). By assigning the return value to the &lt;code&gt;OIDRedirectHTTPHandler&lt;/code&gt;&#39;s &lt;code&gt;currentAuthorizationFlow&lt;/code&gt;, the authorization will continue automatically once the user makes their choice:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// builds authentication request
OIDAuthorizationRequest *request =
    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration
                                                  clientId:kClientID
                                              clientSecret:kClientSecret
                                                    scopes:@[ OIDScopeOpenID ]
                                               redirectURL:redirectURI
                                              responseType:OIDResponseTypeCode
                                      additionalParameters:nil];
// performs authentication request
__weak __typeof(self) weakSelf = self;
_redirectHTTPHandler.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
                        callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  // Brings this app to the foreground.
  [[NSRunningApplication currentApplication]
      activateWithOptions:(NSApplicationActivateAllWindows |
                           NSApplicationActivateIgnoringOtherApps)];

  // Processes the authorization response.
  if (authState) {
    NSLog(@&quot;Got authorization tokens. Access token: %@&quot;,
          authState.lastTokenResponse.accessToken);
  } else {
    NSLog(@&quot;Authorization error: %@&quot;, error.localizedDescription);
  }
  [weakSelf setAuthState:authState];
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authorizing –&amp;nbsp;tvOS&lt;/h3&gt; 
&lt;p&gt;Ensure that your main class is a delegate of &lt;code&gt;OIDAuthStateChangeDelegate&lt;/code&gt;, &lt;code&gt;OIDAuthStateErrorDelegate&lt;/code&gt;, implement the corresponding methods, and include the following property and instance variable:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// property of the containing class
@property(nonatomic, strong, nullable) OIDAuthState *authState;

// instance variable of the containing class
OIDTVAuthorizationCancelBlock _cancelBlock;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, build and perform the authorization request.&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// builds authentication request
__weak __typeof(self) weakSelf = self;

OIDTVAuthorizationRequest *request =
    [[OIDTVAuthorizationRequest alloc] initWithConfiguration:configuration
                                                    clientId:kClientID
                                                clientSecret:kClientSecret
                                                      scopes:@[ OIDScopeOpenID, OIDScopeProfile ]
                                        additionalParameters:nil
                                           additionalHeaders:nil];

// performs authentication request
OIDTVAuthorizationInitialization initBlock =
    ^(OIDTVAuthorizationResponse *_Nullable response, NSError *_Nullable error) {
      if (response) {
        // process authorization response
        NSLog(@&quot;Got authorization response: %@&quot;, response);
      } else {
        // handle initialization error
        NSLog(@&quot;Error: %@&quot;, error);
      }
    };

OIDTVAuthorizationCompletion completionBlock =
    ^(OIDAuthState *_Nullable authState, NSError *_Nullable error) {
      weakSelf.signInView.hidden = YES;
      if (authState) {
        NSLog(@&quot;Token response: %@&quot;, authState.lastTokenResponse);
        [weakSelf setAuthState:authState];
      } else {
        NSLog(@&quot;Error: %@&quot;, error);
        [weakSelf setAuthState:nil];
      }
    };

_cancelBlock = [OIDTVAuthorizationService authorizeTVRequest:request
                                              initialization:initBlock
                                                  completion:completionBlock];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Making API Calls&lt;/h3&gt; 
&lt;p&gt;AppAuth gives you the raw token information, if you need it. However, we recommend that users of the &lt;code&gt;OIDAuthState&lt;/code&gt; convenience wrapper use the provided &lt;code&gt;performActionWithFreshTokens:&lt;/code&gt; method to perform their API calls to avoid needing to worry about token freshness:&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;[_authState performActionWithFreshTokens:^(NSString *_Nonnull accessToken,
                                           NSString *_Nonnull idToken,
                                           NSError *_Nullable error) {
  if (error) {
    NSLog(@&quot;Error fetching fresh tokens: %@&quot;, [error localizedDescription]);
    return;
  }

  // perform your API request using the tokens
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let userinfoEndpoint = URL(string:&quot;https://openidconnect.googleapis.com/v1/userinfo&quot;)!
self.authState?.performAction() { (accessToken, idToken, error) in

  if error != nil  {
    print(&quot;Error fetching fresh tokens: \(error?.localizedDescription ?? &quot;Unknown error&quot;)&quot;)
    return
  }
  guard let accessToken = accessToken else {
    return
  }

  // Add Bearer token to request
  var urlRequest = URLRequest(url: userinfoEndpoint)
  urlRequest.allHTTPHeaderFields = [&quot;Authorization&quot;: &quot;Bearer \(accessToken)&quot;]

  // Perform request...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom User-Agents (iOS and macOS)&lt;/h3&gt; 
&lt;p&gt;Each OAuth flow involves presenting an external user-agent to the user, that allows them to interact with the OAuth authorization server. Typical examples of a user-agent are the user&#39;s browser, or an in-app browser tab incarnation like &lt;code&gt;ASWebAuthenticationSession&lt;/code&gt; on iOS.&lt;/p&gt; 
&lt;p&gt;AppAuth ships with several implementations of an external user-agent out of the box, including defaults for iOS and macOS suitable for most cases. The default user-agents typically share persistent cookies with the system default browser, to improve the chance that the user doesn&#39;t need to sign-in all over again.&lt;/p&gt; 
&lt;p&gt;It is possible to change the user-agent that AppAuth uses, and even write your own - all without needing to fork the library.&lt;/p&gt; 
&lt;p&gt;All implementations of the external user-agent, be they included or created by you need to conform to the &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/protocol_o_i_d_external_user_agent-p.html&quot;&gt;&lt;code&gt;OIDExternalUserAgent&lt;/code&gt;&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;p&gt;Instances of the &lt;code&gt;OIDExternalUserAgent&lt;/code&gt;are passed into &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_auth_state.html#ac762fe2bf95c116f0b437419be211fa1&quot;&gt;&lt;code&gt;OIDAuthState.authStateByPresentingAuthorizationRequest:externalUserAgent:callback&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_authorization_service.html#ae551f8e6887366a46e49b09b37389b8f&quot;&gt;&lt;code&gt;OIDAuthorizationService.presentAuthorizationRequest:externalUserAgent:callback:&lt;/code&gt;&lt;/a&gt; rather than using the platform-specific convenience methods (which use the default user-agents for their respective platforms), like &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/category_o_i_d_auth_state_07_i_o_s_08.html#ae32fd0732cd3192cd5219f2655a4c85c&quot;&gt;&lt;code&gt;OIDAuthState.authStateByPresentingAuthorizationRequest:presentingViewController:callback:&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Popular use-cases for writing your own user-agent implementation include needing to style the user-agent in ways not supported by AppAuth, and implementing a fully custom flow with your own business logic. You can take one of the existing implementations as a starting point to copy, rename, and customize to your needs.&lt;/p&gt; 
&lt;h4&gt;Custom Browser User-Agent&lt;/h4&gt; 
&lt;p&gt;AppAuth for iOS includes a few extra user-agent implementations which you can try, or use as a reference for your own implementation. One of them, &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_external_user_agent_i_o_s_custom_browser.html&quot;&gt;&lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt;&lt;/a&gt; enables you to use a different browser for authentication, like Chrome for iOS or Firefox for iOS.&lt;/p&gt; 
&lt;p&gt;Here&#39;s how to configure AppAuth to use a custom browser using the &lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt; user agent:&lt;/p&gt; 
&lt;p&gt;First, add the following array to your &lt;a href=&quot;https://github.com/openid/AppAuth-iOS/raw/135f99d2cb4e9d18d310ac2588b905e612461561/Examples/Example-iOS_ObjC/Source/Info.plist#L34&quot;&gt;Info.plist&lt;/a&gt; (in XCode, right click -&amp;gt; Open As -&amp;gt; Source Code)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    &amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;googlechromes&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;opera-https&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;firefox&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is required so that AppAuth can test for the browser and open the app store if it&#39;s not installed (the default behavior of this user-agent). You only need to include the URL scheme of the actual browser you intend to use.&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Objective-C&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// performs authentication request
AppDelegate *appDelegate =
    (AppDelegate *)[UIApplication sharedApplication].delegate;
id&amp;lt;OIDExternalUserAgent&amp;gt; userAgent =
    [OIDExternalUserAgentIOSCustomBrowser CustomBrowserChrome];
appDelegate.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
        externalUserAgent:userAgent
                 callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  if (authState) {
    NSLog(@&quot;Got authorization tokens. Access token: %@&quot;,
          authState.lastTokenResponse.accessToken);
    [self setAuthState:authState];
  } else {
    NSLog(@&quot;Authorization error: %@&quot;, [error localizedDescription]);
    [self setAuthState:nil];
  }
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;sub&gt;Swift&lt;/sub&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            self.logMessage(&quot;Error accessing AppDelegate&quot;)
            return
        }
let userAgent = OIDExternalUserAgentIOSCustomBrowser.customBrowserChrome()		
appDelegate.currentAuthorizationFlow = OIDAuthState.authState(byPresenting: request, externalUserAgent: userAgent) { authState, error in
    if let authState = authState {
        self.setAuthState(authState)
        self.logMessage(&quot;Got authorization tokens. Access token: \(authState.lastTokenResponse?.accessToken ?? &quot;DEFAULT_TOKEN&quot;)&quot;)
    } else {
        self.logMessage(&quot;Authorization error: \(error?.localizedDescription ?? &quot;DEFAULT_ERROR&quot;)&quot;)
        self.setAuthState(nil)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! With those two changes (which you can try on the included sample), AppAuth will use Chrome iOS for the authorization request (and open Chrome in the App Store if it&#39;s not installed).&lt;/p&gt; 
&lt;p&gt;⚠️&lt;strong&gt;Note: the &lt;code&gt;OIDExternalUserAgentIOSCustomBrowser&lt;/code&gt; user-agent is not intended for consumer apps&lt;/strong&gt;. It is designed for advanced enterprise use-cases where the app developers have greater control over the operating environment and have special requirements that require a custom browser like Chrome.&lt;/p&gt; 
&lt;p&gt;You don&#39;t need to stop with the included external user agents either! Since the &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/protocol_o_i_d_external_user_agent-p.html&quot;&gt;&lt;code&gt;OIDExternalUserAgent&lt;/code&gt;&lt;/a&gt; protocol is part of AppAuth&#39;s public API, you can implement your own versions of it. In the above example, &lt;code&gt;userAgent = [OIDExternalUserAgentIOSCustomBrowser CustomBrowserChrome]&lt;/code&gt; would be replaced with an instantiation of your user-agent implementation.&lt;/p&gt; 
&lt;h2&gt;API Documentation&lt;/h2&gt; 
&lt;p&gt;Browse the &lt;a href=&quot;http://openid.github.io/AppAuth-iOS/docs/latest/annotated.html&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Included Samples&lt;/h2&gt; 
&lt;p&gt;Sample apps that explore core AppAuth features are available for iOS, macOS and tvOS; follow the instructions in &lt;a href=&quot;https://raw.githubusercontent.com/openid/AppAuth-iOS/master/Examples/README.md&quot;&gt;Examples/README.md&lt;/a&gt; to get started.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
