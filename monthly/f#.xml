<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub F# Monthly Trending</title>
    <description>Monthly Trending of F# in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:52:47 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>dotnet/fsharp</title>
      <link>https://github.com/dotnet/fsharp</link>
      <description>&lt;p&gt;The F# compiler, F# core library, F# language service, and F# tooling integration for Visual Studio&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The F# compiler, F# core library, and F# editor tools&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/dnceng-public/public/_build/latest?definitionId=90&amp;amp;branchName=main&quot;&gt;&lt;img src=&quot;https://dev.azure.com/dnceng-public/public/_apis/build/status/dotnet/fsharp/fsharp-ci?branchName=main&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/dotnet/fsharp/labels/help%20wanted&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/dotnet/fsharp/help%20wanted?style=flat-square&amp;amp;color=%232EA043&amp;amp;label=help%20wanted&quot; alt=&quot;Help Wanted&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You&#39;re invited to contribute to future releases of the F# compiler, core library, and tools. Development of this repository can be done on any OS supported by &lt;a href=&quot;https://dotnet.microsoft.com/&quot;&gt;.NET&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You will also need .NET SDK installed from &lt;a href=&quot;https://dotnet.microsoft.com/download/dotnet&quot;&gt;here&lt;/a&gt;, exact version can be found in the global.json file in the root of the repository.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;h3&gt;Quickstart on Windows&lt;/h3&gt; 
&lt;p&gt;Build from the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;build.cmd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The build depends on an installation of Visual Studio. To build the compiler without this dependency use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;build.cmd -noVisualStudio
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After it&#39;s finished, open either &lt;code&gt;FSharp.sln&lt;/code&gt; or &lt;code&gt;VisualFSharp.sln&lt;/code&gt; in your editor of choice. The latter solution is larger but includes the F# tools for Visual Studio and its associated infrastructure.&lt;/p&gt; 
&lt;h3&gt;Quickstart on Linux or macOS&lt;/h3&gt; 
&lt;p&gt;Build from the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;./build.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After it&#39;s finished, open &lt;code&gt;FSharp.sln&lt;/code&gt; in your editor of choice.&lt;/p&gt; 
&lt;h3&gt;Documentation for contributors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/dotnet/fsharp/main/docs/index.md&quot;&gt;Compiler Documentation&lt;/a&gt; is essential reading for any larger contributions to the F# compiler codebase and contains links to learning videos, architecture diagrams, and other resources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The same docs are also published as &lt;a href=&quot;https://fsharp.github.io/fsharp-compiler-docs/&quot;&gt;The F# Compiler Guide&lt;/a&gt;. It also contains the public searchable docs for FSharp.Compiler.Service component.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/dotnet/fsharp/main/DEVGUIDE.md&quot;&gt;DEVGUIDE.md&lt;/a&gt; for more details on configurations for building the codebase. In practice, you only need to run &lt;code&gt;build.cmd&lt;/code&gt;/&lt;code&gt;build.sh&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/dotnet/fsharp/main/TESTGUIDE.md&quot;&gt;TESTGUIDE.md&lt;/a&gt; for information about the various test suites in this codebase and how to run them individually.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Documentation for F# community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/dotnet/fsharp/&quot;&gt;The F# Documentation&lt;/a&gt; is the primary documentation for F#. The source for the content is &lt;a href=&quot;https://github.com/dotnet/docs/tree/main/docs/fsharp&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/fsharp/fslang-design/&quot;&gt;The F# Language Design Process&lt;/a&gt; is the fundamental design process for the language, from &lt;a href=&quot;https://github.com/fsharp/fslang-suggestions&quot;&gt;suggestions&lt;/a&gt; to completed RFCs. There are also &lt;a href=&quot;https://github.com/fsharp/fslang-design/tree/main/tooling&quot;&gt;tooling RFCs&lt;/a&gt; for some topics where cross-community co-operation and visibility are most useful.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://fsharp.org/specs/language-spec/&quot;&gt;The F# Language Specification&lt;/a&gt; is an in-depth description of the F# language. This is essential for understanding some behaviors of the F# compiler and some of the rules within the compiler codebase. For example, the order and way name resolution happens are specified here, which greatly impacts how the code in Name Resolutions works and why certain decisions are made.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;No contribution is too small&lt;/h3&gt; 
&lt;p&gt;Even if you find a single-character typo, we&#39;re happy to take the change! Although the codebase can feel daunting for beginners, we and other contributors are happy to help you along.&lt;/p&gt; 
&lt;p&gt;Not sure where to contribute? Look at the &lt;a href=&quot;https://github.com/dotnet/fsharp/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22help%20wanted%22&quot;&gt;curated list of issues asking for help&lt;/a&gt;. If you want to tackle any of those, use the comments section of the chosen issue to indicate interest and feel free to ask for initial guidance. We are happy to help with resolving outstanding issues while making a successful PR addressing the issue.&lt;/p&gt; 
&lt;p&gt;The issues in this repository can have big differences in the complexity for fixing them. Are you getting started? We do have a label for &lt;a href=&quot;https://github.com/dotnet/fsharp/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22&quot;&gt;good first issues&lt;/a&gt; as well.&lt;/p&gt; 
&lt;h2&gt;Per-build NuGet packages&lt;/h2&gt; 
&lt;h3&gt;7.0.40x series&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/dnceng/public/_artifacts/feed/dotnet7/NuGet/FSharp.Compiler.Service/versions/&quot;&gt;FSharp.Compiler.Service 43.7.400-preview&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;add key=&quot;fsharp-prerelease&quot; value=&quot;https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;8.0.10x series&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/dnceng/public/_artifacts/feed/dotnet8/NuGet/FSharp.Compiler.Service/versions/&quot;&gt;FSharp.Compiler.Service 43.8.100-preview&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;add key=&quot;fsharp-prerelease&quot; value=&quot;https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Official NuGet releases of FCS and FSharp.Core are synched with SDK releases (on purpose - we want to be in sync). Nightly packages release to Azure feeds on every successful insertion.&lt;/p&gt; 
&lt;h2&gt;Branches&lt;/h2&gt; 
&lt;p&gt;These are the branches in use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;main&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Almost all contributions go here.&lt;/li&gt; 
   &lt;li&gt;Able to be built, installed and used in the latest public Visual Studio release.&lt;/li&gt; 
   &lt;li&gt;May contain updated F# features and logic.&lt;/li&gt; 
   &lt;li&gt;Used to build nightly VSIX (see above).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;release/dev15.9&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Long-term servicing branch for VS 2017 update 15.9.x. We do not expect to service that release, but if we do, that&#39;s where the changes will go.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;release/dev17.x&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Latest release branch for the particular point release of Visual Studio.&lt;/li&gt; 
   &lt;li&gt;Incorporates features and fixes from main up to a particular branch point, then selective cherry-picks.&lt;/li&gt; 
   &lt;li&gt;May contain new features that depend on new things or fixes in the corresponding forthcoming Visual Studio release.&lt;/li&gt; 
   &lt;li&gt;Gets integrated back into main once the corresponding Visual Studio release is made.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;F# language and core library evolution&lt;/h2&gt; 
&lt;p&gt;Evolution of the F# language and core library follows a process spanning two additional repositories. The process is as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Use the &lt;a href=&quot;https://github.com/fsharp/fslang-suggestions/&quot;&gt;F# language suggestions repo&lt;/a&gt; to search for ideas, vote on ones you like, submit new ideas, and discuss details with the F# community.&lt;/li&gt; 
 &lt;li&gt;Ideas that are &quot;approved in principle&quot; are eligible for a new RFC in the &lt;a href=&quot;https://github.com/fsharp/fslang-design&quot;&gt;F# language design repo&lt;/a&gt;. This is where the technical specification and discussion of approved suggestions go.&lt;/li&gt; 
 &lt;li&gt;Implementations and testing of an RFC are submitted to this repository.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is subject to the MIT License. A copy of this license is in &lt;a href=&quot;https://raw.githubusercontent.com/dotnet/fsharp/main/License.txt&quot;&gt;License.txt&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;This project has adopted the &lt;a href=&quot;https://contributor-covenant.org/&quot;&gt;Contributor Covenant&lt;/a&gt; code of conduct to clarify expected behavior in our community. You can read it at &lt;a href=&quot;https://raw.githubusercontent.com/dotnet/fsharp/main/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Get In Touch&lt;/h2&gt; 
&lt;p&gt;Members of the &lt;a href=&quot;https://fsharp.org&quot;&gt;F# Software Foundation&lt;/a&gt; are invited to the &lt;a href=&quot;https://fsharp.org/guides/slack/&quot;&gt;FSSF Slack&lt;/a&gt;. You can find support from other contributors in the &lt;code&gt;#compiler&lt;/code&gt; and &lt;code&gt;#editor-support&lt;/code&gt; channels.&lt;/p&gt; 
&lt;p&gt;Additionally, you can use the &lt;code&gt;#fsharp&lt;/code&gt; tag on Twitter if you have general F# questions, including about this repository. Chances are you&#39;ll get multiple responses.&lt;/p&gt; 
&lt;h2&gt;About F#&lt;/h2&gt; 
&lt;p&gt;If you&#39;re curious about F# itself, check out these links:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/dotnet/fsharp/what-is-fsharp&quot;&gt;What is F#&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/dotnet/fsharp/get-started/&quot;&gt;Get started with F#&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fsharp.org&quot;&gt;F# Software Foundation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fsharp.org/testimonials&quot;&gt;F# Testimonials&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;p&gt;F# exists because of these wonderful people:&lt;/p&gt; 
&lt;a href=&quot;https://github.com/dotnet/fsharp/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=dotnet/fsharp&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;Made with &lt;a href=&quot;https://contrib.rocks&quot;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>artempyanykh/marksman</title>
      <link>https://github.com/artempyanykh/marksman</link>
      <description>&lt;p&gt;Write Markdown with code assist and intelligence in the comfort of your favourite editor.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/artempyanykh/marksman/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/artempyanykh/marksman/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build &amp;amp; Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/artempyanykh/marksman/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/artempyanykh/marksman&quot; alt=&quot;release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://formulae.brew.sh/formula/marksman&quot;&gt;&lt;img src=&quot;https://img.shields.io/homebrew/v/marksman&quot; alt=&quot;homebrew&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://snapcraft.io/marksman&quot;&gt;&lt;img src=&quot;https://snapcraft.io/marksman/badge.svg?sanitize=true&quot; alt=&quot;marksman&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/artempyanykh/marksman/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/artempyanykh/marksman/total&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Marksman&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Write Markdown with code assist and intelligence in the comfort of your favourite editor.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/splash.png&quot; alt=&quot;splash&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Marksman is a program that integrates with your editor to assist you in writing and maintaining your Markdown documents. Using &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;LSP protocol&lt;/a&gt; it provides &lt;strong&gt;completion&lt;/strong&gt;, goto &lt;strong&gt;definition&lt;/strong&gt;, find &lt;strong&gt;references&lt;/strong&gt;, &lt;strong&gt;rename&lt;/strong&gt; refactoring, &lt;strong&gt;diagnostics&lt;/strong&gt;, and more. In addition to regular Markdown, it also supports &lt;strong&gt;wiki-link&lt;/strong&gt;-style references that enable &lt;a href=&quot;https://en.wikipedia.org/wiki/Zettelkasten&quot;&gt;Zettelkasten-like&lt;/a&gt;[^roam-research]&lt;sup&gt;,&lt;/sup&gt; [^markdown-memo] note taking. See more about Marksman&#39;s features below.&lt;/p&gt; 
&lt;p&gt;Marksman &lt;strong&gt;works on MacOS, Linux, and Windows&lt;/strong&gt; and is distributed as a &lt;strong&gt;self-contained binary&lt;/strong&gt; for each OS.&lt;/p&gt; 
&lt;p&gt;The server provides assistance with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Markdown inline links: &lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;This is [inline link](/some-file.md#some-heading).
This is an internal [anchor link](#heading).
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Markdown reference links: &lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;See [reference].

[reference]: /url &quot;Title&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Wiki-links: &lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;Link to [[another-note]].
Link to [[another-notes#heading]].
Internal link to [[#a-heading]].
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All types of links support completion, hover, goto definition/references. Additionally, Marksman provides diagnostics for wiki-links to detect broken references and duplicate/ambiguous headings.&lt;/p&gt; 
&lt;h2&gt;Existing editor integrations[^lsp]:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;VSCode via &lt;a href=&quot;https://github.com/artempyanykh/marksman-vscode&quot;&gt;Marksman VSCode&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Neovim:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;via &lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;mason.nvim&lt;/a&gt; (automatic server installation) (requires &lt;a href=&quot;https://github.com/williamboman/mason-lspconfig.nvim&quot;&gt;mason-lspconfig.nvim&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;via &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/doc/configs.md#marksman&quot;&gt;nvim-lspconfig&lt;/a&gt;,&lt;/li&gt; 
   &lt;li&gt;via &lt;a href=&quot;https://github.com/yaegassy/coc-marksman&quot;&gt;CoC-marksman&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Vim:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;via &lt;a href=&quot;https://raw.githubusercontent.com/artempyanykh/marksman/main/ale&quot;&gt;ale&lt;/a&gt; - Ale has built-in support for Marksman&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;via &lt;a href=&quot;https://raw.githubusercontent.com/artempyanykh/marksman/main/lsp&quot;&gt;lsp&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Example config (add the following to your &lt;code&gt;~/.vim/after/ftplugin/markdown.vim&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;if exists(&#39;g:loaded_lsp&#39;)
  call LspAddServer([#{ name: &#39;marksman&#39;, filetype: [&#39;markdown&#39;], path: &#39;/path/to/marksman&#39;, args: [&#39;server&#39;], syncInit: v:true }])
end
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Emacs:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;via &lt;a href=&quot;https://emacs-lsp.github.io/lsp-mode/page/lsp-marksman/&quot;&gt;LSP Mode&lt;/a&gt; (automatic server installation).&lt;/p&gt; &lt;p&gt;Example config for &lt;code&gt;use-package&lt;/code&gt; users:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(use-package markdown-mode
  :hook (markdown-mode . lsp)
  :config
  (require &#39;lsp-marksman))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;via &lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;Eglot&lt;/a&gt;, requires configuration (unless &lt;a href=&quot;https://github.com/joaotavora/eglot/pull/1013&quot;&gt;eglot#1013&lt;/a&gt; gets merged); add the following to your &lt;code&gt;init.el&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(add-to-list &#39;eglot-server-programs &#39;(markdown-mode . (&quot;marksman&quot;)))
(add-hook &#39;markdown-mode-hook #&#39;eglot-ensure)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://helix-editor.com/&quot;&gt;Helix&lt;/a&gt; supports Marksman out of the box. However, you need add &lt;code&gt;marksman&lt;/code&gt; binary to your &lt;code&gt;PATH&lt;/code&gt; manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://kakoune.org/&quot;&gt;Kakoune&lt;/a&gt; can be used with &lt;a href=&quot;https://github.com/kakoune-lsp/kakoune-lsp&quot;&gt;kakoune-lsp&lt;/a&gt; with no other configuration.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Sublime Text via &lt;a href=&quot;https://github.com/sublimelsp/LSP-marksman&quot;&gt;LSP-marksman&lt;/a&gt; (automatic server installation).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;BBEdit &lt;a href=&quot;https://github.com/artempyanykh/marksman/discussions/206#discussioncomment-5906423&quot;&gt;can be configured&lt;/a&gt; to use Marksman as an LSP server for Markdown files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://zed.dev/&quot;&gt;Zed&lt;/a&gt; supports Marksman through it&#39;s integrated LSP support, by addinging it as an available LSP for Markdown in Zed&#39;s &lt;code&gt;settings.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsonc&quot;&gt;// Zed settings
{
  // ...
  &quot;languages&quot;: {
    &quot;Markdown&quot;: {
      &quot;language_servers&quot;: [&quot;marksman&quot;]
    }
  }
}

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to install&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/artempyanykh/marksman/main/docs/install.md&quot;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Demos and tutorials&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/artempyanykh/marksman/main/docs/demo.md&quot;&gt;this page&lt;/a&gt; for a mix of Neovim, VSCode, and Emacs screen captures.&lt;/li&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://medium.com/@chrisatmachine/lunarvim-improve-markdown-editing-with-marksman-739d06c73a26&quot;&gt;this post&lt;/a&gt; on how to use Marksman with &lt;a href=&quot;https://www.lunarvim.org&quot;&gt;LunarVim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=8GQKOLh_V5E&quot;&gt;this YouTube video&lt;/a&gt; by Luke Pighetti on how to use Marksman with Helix.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/completion-markdown.gif&quot; alt=&quot;Completion Markdown&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/artempyanykh/marksman/main/docs/features.md&quot;&gt;the Features page&lt;/a&gt; to learn more about language features, configurations, and single- and multi-file modes.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cross-file references and completions don&#39;t work. 
  &lt;ul&gt; 
   &lt;li&gt;Either create an empty &lt;code&gt;.marksman.toml&lt;/code&gt; in the root folder of your project or initialize a repository (e.g. &lt;code&gt;git init&lt;/code&gt;). See &lt;a href=&quot;https://raw.githubusercontent.com/artempyanykh/marksman/main/docs/features.md#workspace-folders-project-roots-and-single-file-mode&quot;&gt;this page&lt;/a&gt; to learn more about single- and mult-file modes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;I&#39;m getting &quot;marksman can’t be opened because Apple cannot check it for malicious software&quot; on MacOS. 
  &lt;ul&gt; 
   &lt;li&gt;Run the following command to bypass it and let Mac know that it&#39;s fine: &lt;code&gt;xattr -d com.apple.quarantine &amp;lt;path-to-marksman-bin&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[^roam-research]: You may have heard about &lt;a href=&quot;https://roamresearch.com&quot;&gt;Roam Research&lt;/a&gt;. That is a commercial implementation of the Zettelkasten method and another point of reference for what Marksman is about. However, unlike a proprietary Roam Research, Marksman is free, open-source and integrated into your favourite editor (albeit for not not as feature rich as Roam Research).&lt;/p&gt; 
&lt;p&gt;[^markdown-memo]: There is an excellent VSCode extension called &lt;a href=&quot;https://github.com/svsool/vscode-memo&quot;&gt;Markdown Memo&lt;/a&gt;. You definitely need to check it out if you&#39;re primarily using VSCode as it has some features that are missing in Marksman and &lt;a href=&quot;https://github.com/artempyanykh/marksman-vscode&quot;&gt;Marksman VSCode extension&lt;/a&gt;. However, Markdown Memo is VSCode specific while Marksman is a generic language server, so can be used with any editor that has LSP support: Emacs, Vim, Neovim, etc.&lt;/p&gt; 
&lt;p&gt;[^lsp]: Since Marksman is a regular Language Server most of the functionality works out of the box with any LSP client.&lt;/p&gt; 
&lt;p&gt;[^single-file-mode]: There is an initiative to add a single-file mode to LSP but it&#39;s not a part of the spec at least until and including v3.17.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
