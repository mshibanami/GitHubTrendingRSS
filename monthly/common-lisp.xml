<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Common Lisp Monthly Trending</title>
    <description>Monthly Trending of Common Lisp in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:51:49 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>open-goal/jak-project</title>
      <link>https://github.com/open-goal/jak-project</link>
      <description>&lt;p&gt;Reviving the language that brought us the Jak &amp; Daxter Series&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;500&quot; height=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/logo-text-colored-new.png&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://opengoal.dev/docs/intro&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Documentation-Here-informational&quot; alt=&quot;Documentation Badge&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;Crowdin&quot; target=&quot;_blank&quot; href=&quot;https://crowdin.com/project/opengoal&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/opengoal/localized.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/open-goal/jak-project/actions/workflows/build-matrix.yaml&quot;&gt;&lt;img src=&quot;https://github.com/open-goal/jak-project/actions/workflows/build-matrix.yaml/badge.svg?sanitize=true&quot; alt=&quot;Linux and Windows Build&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.codacy.com/gh/open-goal/jak-project/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=open-goal/jak-project&amp;amp;utm_campaign=Badge_Grade&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://app.codacy.com/project/badge/Grade/29316d04a1644aa390c33be07289f3f5&quot; alt=&quot;Codacy Badge&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/VZbXMHXzWv&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/756287461377703987&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Please read first 
 &lt;!-- omit from toc --&gt;&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Our repositories on GitHub are primarily for development of the project and tracking active issues. Most of the information you will find here pertains to setting up the project for development purposes and is not relevant to the end-user.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For a setup guide on how to install and play the game there is the following video that you can check out: &lt;a href=&quot;https://youtu.be/K84UUMnkJc4&quot;&gt;https://youtu.be/K84UUMnkJc4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For questions or additional information pertaining to the project, we have a Discord for discussion here: &lt;a href=&quot;https://discord.gg/VZbXMHXzWv&quot;&gt;https://discord.gg/VZbXMHXzWv&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Additionally, you can find further documentation and answers to &lt;strong&gt;frequently asked questions&lt;/strong&gt; on the project&#39;s main website: &lt;a href=&quot;https://opengoal.dev&quot;&gt;https://opengoal.dev&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] &lt;strong&gt;Do not use this decompilation project without providing your own legally purchased copy of the game.&lt;/strong&gt; We do not distribute any assets from the game - you must use your own legitimately obtained PS2 copy of the game. We support every retail PAL, NTSC, and NTSC-J build, including Greatest Hits copies.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#project-description&quot;&gt;Project Description&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#current-status&quot;&gt;Current Status&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#methodology&quot;&gt;Methodology&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#setting-up-a-development-environment&quot;&gt;Setting up a Development Environment&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#docker&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#linux&quot;&gt;Linux&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#ubuntu-2004&quot;&gt;Ubuntu (20.04)&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#arch&quot;&gt;Arch&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#fedora&quot;&gt;Fedora&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#windows&quot;&gt;Windows&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#required-software&quot;&gt;Required Software&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#using-visual-studio&quot;&gt;Using Visual Studio&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#macos&quot;&gt;MacOS&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#intel-based&quot;&gt;Intel Based&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#apple-silicon&quot;&gt;Apple Silicon&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#vscode&quot;&gt;VSCode&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#building-and-debugging&quot;&gt;Building and Debugging&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#building-and-running-the-game&quot;&gt;Building and Running the Game&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#extract-assets&quot;&gt;Extract Assets&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#build-the-game&quot;&gt;Build the Game&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#run-the-game&quot;&gt;Run the Game&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#connecting-the-repl-to-the-game&quot;&gt;Connecting the REPL to the Game&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#running-the-game-without-auto-booting&quot;&gt;Running the Game Without Auto-Booting&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#interacting-with-the-game&quot;&gt;Interacting with the Game&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#technical-project-overview&quot;&gt;Technical Project Overview&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#goalc&quot;&gt;&lt;code&gt;goalc&lt;/code&gt;&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#running-the-compiler&quot;&gt;Running the compiler&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#decompiler&quot;&gt;&lt;code&gt;decompiler&lt;/code&gt;&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#running-the-decompiler&quot;&gt;Running the decompiler&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#goal_src&quot;&gt;&lt;code&gt;goal_src/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#game-runtime&quot;&gt;&lt;code&gt;game&lt;/code&gt; runtime&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Description&lt;/h2&gt; 
&lt;p&gt;This project is to port the original Jak and Daxter and Jak II to PC. Over 98% of the games are written in GOAL, a custom Lisp language developed by Naughty Dog. Our strategy is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;decompile the original game code into human-readable GOAL code&lt;/li&gt; 
 &lt;li&gt;develop our own compiler for GOAL and recompile game code for x86-64&lt;/li&gt; 
 &lt;li&gt;create a tool to extract game assets into formats that can be easily viewed or modified&lt;/li&gt; 
 &lt;li&gt;create tools to repack game assets into a format that our port uses.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Our objectives are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;make the port a &quot;native application&quot; on x86-64, with high performance. It shouldn&#39;t be emulated, interpreted, or transpiled.&lt;/li&gt; 
 &lt;li&gt;Our GOAL compiler&#39;s performance should be around the same as unoptimized C.&lt;/li&gt; 
 &lt;li&gt;try to match things from the original game and development as possible. For example, the original GOAL compiler supported live modification of code while the game is running, so we do the same, even though it&#39;s not required for just porting the game.&lt;/li&gt; 
 &lt;li&gt;support modifications. It should be possible to make edits to the code without everything else breaking.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We support both Linux and Windows on x86-64.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We do not support, or plan to support the ARM architecture. This means that this will not run on devices such as a mobile device.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Current Status&lt;/h3&gt; 
&lt;p&gt;Jak 1 is largely playable from start to finish with a handful of bugs that are continually being ironed out. Jak 2 is in development.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/promosmall1.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/promosmall2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;YouTube playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PLWx9T30aAT50cLnCTY1SAbt2TtWQzKfXX&quot;&gt;https://www.youtube.com/playlist?list=PLWx9T30aAT50cLnCTY1SAbt2TtWQzKfXX&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Methodology&lt;/h3&gt; 
&lt;p&gt;To help with decompiling, we&#39;ve built a decompiler that can process GOAL code and unpack game assets. We manually specify function types and locations where we believe the original code had type casts (or where they feel appropriate) until the decompiler succeeds, then we clean up the output of the decompiled code by adding comments and adjusting formatting, then save it in &lt;code&gt;goal_src&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Our decompiler is designed specifically for processing the output of the original GOAL compiler. As a result, when given correct casts, it often produces code that can be directly fed into a compiler and works perfectly. This is continually tested as part of our unit tests.&lt;/p&gt; 
&lt;h2&gt;Setting up a Development Environment&lt;/h2&gt; 
&lt;p&gt;The remainder of this README is catered towards people interested in building the project from source, typically with the intention on contributing as a developer.&lt;/p&gt; 
&lt;p&gt;If this does not sound like you and you just want to play the game, refer to the above section &lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/#quick-start&quot;&gt;Quick Start&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;All three Linux systems are supported using Docker.&lt;/p&gt; 
&lt;p&gt;Pick your supported prefered flavour of linux and build your chosen image&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker build -f docker/(Arch|Fedora|Ubuntu)/Dockerfile -t jak .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create an image with all required dependencies and already built.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run -v &quot;$(pwd)&quot;/build:/home/jak/jak-project/build -it jak bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: If you change the content of the &lt;code&gt;build/&lt;/code&gt; directory you&#39;ll need to rerun the &lt;code&gt;build&lt;/code&gt; command. Alternatively you can get the build via &lt;code&gt;docker cp&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This will link your &lt;code&gt;build/&lt;/code&gt; folder to the images so can validate your build or test it on an external device.&lt;/p&gt; 
&lt;p&gt;Docker images can be linked into your IDE (e.g. CLion) to help with codesniffing, static analysis, run tests and continuous build.&lt;/p&gt; 
&lt;p&gt;Unfortunately you&#39;ll still need task runner on your local machine to run the game or instead, manually run the game via the commands found in &lt;code&gt;Taskfile.yml&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;h4&gt;Ubuntu (20.04)&lt;/h4&gt; 
&lt;p&gt;Install packages and init repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install gcc make cmake ninja-build build-essential g++ nasm clang-format libxrandr-dev libxinerama-dev libxcursor-dev libpulse-dev libxi-dev python libgl1-mesa-dev libssl-dev
sudo sh -c &quot;$(curl --location https://taskfile.dev/install.sh)&quot; -- -d -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cmake -B build &amp;amp;&amp;amp; cmake --build build -j 8
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./test.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: we have found that &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;lld&lt;/code&gt; are significantly faster to compile and link than &lt;code&gt;gcc&lt;/code&gt;, generate faster code, and have better warning messages. To install these:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt install lld clang
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and run &lt;code&gt;cmake&lt;/code&gt; (in a fresh build directory) with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cmake -DCMAKE_SHARED_LINKER_FLAGS=&quot;-fuse-ld=lld&quot; -DCMAKE_EXE_LINKER_FLAGS=&quot;-fuse-ld=lld&quot; -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arch&lt;/h4&gt; 
&lt;p&gt;Install packages and init repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo pacman -S cmake libpulse base-devel nasm python libx11 libxrandr libxinerama libxcursor libxi
yay -S go-task
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Arch only, replace &lt;code&gt;task&lt;/code&gt; with &lt;code&gt;go-task&lt;/code&gt; in the rest of the instructions.&lt;/p&gt; 
&lt;p&gt;Compile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cmake -B build &amp;amp;&amp;amp; cmake --build build -j 8
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./test.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fedora&lt;/h4&gt; 
&lt;p&gt;Install packages and init repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo dnf install cmake python lld clang nasm libX11-devel libXrandr-devel libXinerama-devel libXcursor-devel libXi-devel pulseaudio-libs-devel mesa-libGL-devel
sudo sh -c &quot;$(curl --location https://taskfile.dev/install.sh)&quot; -- -d -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compile with &lt;code&gt;clang&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cmake -DCMAKE_SHARED_LINKER_FLAGS=&quot;-fuse-ld=lld&quot; -DCMAKE_EXE_LINKER_FLAGS=&quot;-fuse-ld=lld&quot; -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -B build
cmake --build build -j$(nproc)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./test.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;h4&gt;Required Software&lt;/h4&gt; 
&lt;p&gt;We primarily use Visual Studio on Windows for C++ development. Download the latest community edition from &lt;a href=&quot;https://visualstudio.microsoft.com/vs/&quot;&gt;here&lt;/a&gt;. At the time of writing this is Visual Studio 2022.&lt;/p&gt; 
&lt;p&gt;You will require the &lt;code&gt;Desktop development with C++&lt;/code&gt; workload. This can be selected during the installation, or after via the &lt;code&gt;Visual Studio Installer&lt;/code&gt;, modifying the Visual Studio Installation.&lt;/p&gt; 
&lt;p&gt;On Windows, it&#39;s recommended to use a package manager, we use Scoop. Follow the steps on the bottom of the homepage &lt;a href=&quot;https://scoop.sh/&quot;&gt;here&lt;/a&gt; to get it.&lt;/p&gt; 
&lt;p&gt;Once Scoop is installed, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;scoop install git llvm nasm python task
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using Visual Studio&lt;/h4&gt; 
&lt;p&gt;Clone the repository by running the following command in your folder of choice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/open-goal/jak-project.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a &lt;code&gt;jak-project&lt;/code&gt; folder, open the project as a CMake project via Visual Studio.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/open-project.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Then build the entire project as &lt;code&gt;Windows Release (clang)&lt;/code&gt;. You can also press Ctrl+Shift+B as a hotkey for Build All. We currently prefer &lt;code&gt;clang&lt;/code&gt; on Windows as opposed to &lt;code&gt;msvc&lt;/code&gt;, though it should work as well!&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/release-build.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/build-all.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;MacOS&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;NOTE: Running the game requires an Apple Silicon Mac running macOS Sequoia, or an Intel Mac.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Ensure that you have Xcode command line tools installed (this installs things like Apple Clang). If you don&#39;t, you can run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Apple Silicon, Rosetta 2 also must be installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;softwareupdate --install-rosetta
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Building for x86_64&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install cmake nasm ninja go-task clang-format
cmake -B build --preset=Release-macos-x86_64-clang
cmake --build build --parallel $((`sysctl -n hw.logicalcpu`))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Building for ARM64 (experimental, unsupported)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install cmake ninja go-task clang-format
cmake -B build --preset=Release-macos-arm64-clang
cmake --build build --parallel $((`sysctl -n hw.logicalcpu`))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may have to add the MacOS SDK to your &lt;code&gt;LIBRARY_PATH&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;export LIBRARY_PATH=&quot;$LIBRARY_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib&quot;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;VSCode&lt;/h3&gt; 
&lt;p&gt;If you either don&#39;t want to or cannot use Visual Studio for working with the C++ project, VSCode is a good alternatively.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;clangd&lt;/code&gt; extension is &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd&quot;&gt;recommended&lt;/a&gt; and requires &lt;code&gt;clangd&lt;/code&gt; to be on your &lt;code&gt;$PATH&lt;/code&gt;. If you can run &lt;code&gt;clangd&lt;/code&gt; in a terminal successfully then you should be good to go.&lt;/p&gt; 
&lt;p&gt;Once you generate your CMake for the first time the clangd LSP should be able to index the project and give you intellisense.&lt;/p&gt; 
&lt;h4&gt;Building and Debugging&lt;/h4&gt; 
&lt;p&gt;TODO - Consider Contributing Documentation :)&lt;/p&gt; 
&lt;h3&gt;Building and Running the Game&lt;/h3&gt; 
&lt;p&gt;Getting a running game involves 4 steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Build C++ tools (follow Getting Started steps above for your platform)&lt;/li&gt; 
 &lt;li&gt;Extract assets from the game&lt;/li&gt; 
 &lt;li&gt;Build the game&lt;/li&gt; 
 &lt;li&gt;Run the game&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Extract Assets&lt;/h4&gt; 
&lt;p&gt;First, setup your settings so the following scripts know which game you are using, and which version. For the black label version of the game, run the following in a terminal:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;task set-game-jak1
task set-decomp-ntscv1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For other versions of the game, you will need to use a different &lt;code&gt;-set-decomp-&amp;lt;VERSION&amp;gt;&lt;/code&gt; command. An example for the PAL version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;task set-game-jak1
task set-decomp-pal
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Run &lt;code&gt;task --list&lt;/code&gt; to see the other available options&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;At the time of writing, only Jak 1 is expected to work end-to-end!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The first step is to extract your ISO file contents into the &lt;code&gt;iso_data/&amp;lt;game-name&amp;gt;&lt;/code&gt; folder. In the case of Jak 1 this is &lt;code&gt;iso_data/jak1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Once this is done, open a terminal in the &lt;code&gt;jak-project&lt;/code&gt; folder and run the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;task extract
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Build the Game&lt;/h4&gt; 
&lt;p&gt;The next step is to build the game itself. To do so, in the same terminal run the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;task repl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You will be greeted with a prompt like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt; _____             _____ _____ _____ __
|     |___ ___ ___|   __|     |  _  |  |
|  |  | . | -_|   |  |  |  |  |     |  |__
|_____|  _|___|_|_|_____|_____|__|__|_____|
      |_|
Welcome to OpenGOAL 0.8!
Run (repl-help) for help with common commands and REPL usage.
Run (lt) to connect to the local target.

g &amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the following to build the game:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;g &amp;gt; (mi)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;IMPORTANT NOTE! If you&#39;re not using the non-default version of the game, you may hit issues trying to run &lt;code&gt;(mi)&lt;/code&gt; in this step. An example error might include something like:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;Input file iso_data/jak1/MUS/TWEAKVAL.MUS does not exist.&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;This is because the decompiler inputs/outputs using the &lt;code&gt;gameName&lt;/code&gt; JSON field in the decompiler config. For example if you are using Jak 1 PAL, it will assume &lt;code&gt;iso_data/jak1_pal&lt;/code&gt; and &lt;code&gt;decompiler_out/jak1_pal&lt;/code&gt;. Therefore, you can inform the REPL/compiler of this via the &lt;code&gt;gameVersionFolder&lt;/code&gt; config field described &lt;a href=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/goal_src/user/README.md&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Run the Game&lt;/h4&gt; 
&lt;p&gt;Finally the game can be ran. Open a second terminal from the &lt;code&gt;jak-project&lt;/code&gt; directory and run the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;task boot-game
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The game should boot automatically if everything was done correctly.&lt;/p&gt; 
&lt;h5&gt;Connecting the REPL to the Game&lt;/h5&gt; 
&lt;p&gt;Connecting the REPL to the game allows you to inspect and modify code or data while the game is running.&lt;/p&gt; 
&lt;p&gt;To do so, in the REPL after a successful &lt;code&gt;(mi)&lt;/code&gt;, run the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;g &amp;gt; (lt)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If successful, your prompt should change to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gc&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, running the following will print out some basic information about Jak:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;gc&amp;gt; *target*
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Running the Game Without Auto-Booting&lt;/h5&gt; 
&lt;p&gt;You can also start up the game without booting. To do so run the following in one terminal&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;task run-game
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then in your REPL run the following (after a successful &lt;code&gt;(mi)&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;g &amp;gt; (lt)
[Listener] Socket connected established! (took 0 tries). Waiting for version...
Got version 0.8 OK!
[Debugger] Context: valid = true, s7 = 0x147d24, base = 0x2123000000, tid = 2438049

gc&amp;gt; (lg)
10836466        #xa559f2              0.0000        (&quot;game&quot; &quot;kernel&quot;)

gc&amp;gt; (test-play)
(play :use-vis #t :init-game #f) has been called!
0        #x0              0.0000        0

gc&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Interacting with the Game&lt;/h4&gt; 
&lt;p&gt;In the graphics window, you can use the period key to bring up the debug menu. Controllers also work, using the same mapping as the original game.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;code&gt;pc_debug&lt;/code&gt;, &lt;code&gt;examples&lt;/code&gt; and &lt;code&gt;pc&lt;/code&gt; folders under &lt;code&gt;goal_src&lt;/code&gt; for some examples of GOAL code we wrote. The debug files that are not loaded automatically by the engine have instructions for how to run them.&lt;/p&gt; 
&lt;h2&gt;Technical Project Overview&lt;/h2&gt; 
&lt;p&gt;There are four main components to the project.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;goalc&lt;/code&gt; - the GOAL compiler for x86-64&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;decompiler&lt;/code&gt; - our decompiler&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;goal_src/&lt;/code&gt; - the folder containing all OpenGOAL / GOOS code&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;game&lt;/code&gt; - aka the runtime written in C++&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Let&#39;s break down each component.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;goalc&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Our implementation of GOAL is called OpenGOAL.&lt;/p&gt; 
&lt;p&gt;All of the compiler source code is in &lt;code&gt;goalc/&lt;/code&gt;. The compiler is controlled through a prompt which can be used to enter commands to compile, connect to a running GOAL program for interaction, run the OpenGOAL debugger, or, if you are connected to a running GOAL program, can be used as a REPL to run code interactively. In addition to compiling code files, the compiler has features to pack and build data files.&lt;/p&gt; 
&lt;h4&gt;Running the compiler&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Environment Agnostic&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you have installed &lt;code&gt;task&lt;/code&gt; as recommended above, you can run the compiler with &lt;code&gt;task repl&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To run the compiler on Linux, there is a script &lt;code&gt;scripts/shell/gc.sh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;On Windows, there is a &lt;code&gt;scripts/batch/gc.bat&lt;/code&gt; scripts and a &lt;code&gt;scripts/batch/gc-no-lt.bat&lt;/code&gt; script, the latter of which will not attempt to automatically attach to a running target.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;decompiler&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The second component to the project is the decompiler.&lt;/p&gt; 
&lt;p&gt;The decompiler will output code and other data intended to be inspected by humans in the &lt;code&gt;decompiler_out&lt;/code&gt; folder. Files in this folder will not be used by the compiler.&lt;/p&gt; 
&lt;h4&gt;Running the decompiler&lt;/h4&gt; 
&lt;p&gt;You must have a copy of the PS2 game and place all files from the DVD inside a folder corresponding to the game within &lt;code&gt;iso_data&lt;/code&gt; folder (&lt;code&gt;jak1&lt;/code&gt; for Jak 1 Black Label, etc.), as seen in this picture:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/iso_data-help.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;The decompiler will extract assets to the &lt;code&gt;assets&lt;/code&gt; folder. These assets will be used by the compiler when building the port, and you may want to turn asset extraction off after running it once.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Environment Agnostic&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you have installed &lt;code&gt;task&lt;/code&gt; as recommended above, you can run the compiler with &lt;code&gt;task decomp&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To run, you can use &lt;code&gt;scripts/shell/decomp.sh&lt;/code&gt; to run the decompiler&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To run, you can use &lt;code&gt;scripts/shell/decomp-jak1.bat&lt;/code&gt; to run the decompiler&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;goal_src/&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The game source code, written in OpenGOAL, is located in &lt;code&gt;goal_src&lt;/code&gt;. All GOAL and GOOS code should be in this folder.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;game&lt;/code&gt; runtime&lt;/h3&gt; 
&lt;p&gt;The final component is the &quot;runtime&quot;, located in &lt;code&gt;game&lt;/code&gt;. This is the part of the game that&#39;s written in C++.&lt;/p&gt; 
&lt;p&gt;In the port, that includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &quot;C Kernel&quot;, which contains the GOAL linker and some low-level GOAL language features. GOAL has a completely custom dynamically linked object file format so in order to load the first GOAL code, you need a linker written in C++. Some low-level functions for memory allocation, communicating with the I/O Processor, symbol table, strings, and the type system are also implemented in C, as these are required for the linker. It also listens for incoming messages from the compiler and passes them to the running game. This also initializes the game, by initializing the PS2 hardware, allocating the GOAL heaps, loading the GOAL kernel off of the DVD, and executing the kernel dispatcher function. This is in the &lt;code&gt;game/kernel&lt;/code&gt; folder. This should be as close as possible to the game, and all differences should be noted with a comment.&lt;/li&gt; 
 &lt;li&gt;Implementation of Sony&#39;s standard library. GOAL code can call C library functions, and Naughty Dog used some Sony library functions to access files, memory cards, controllers, and communicate with the separate I/O Processor. The library functions are in &lt;code&gt;game/sce&lt;/code&gt;. Implementations of library features specific to the PC port are located in &lt;code&gt;game/system&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;The I/O Processor driver, OVERLORD. The PS2 had a separate CPU called the I/O Processor (IOP) that was directly connected to the DVD drive hardware and the sound hardware. Naughty Dog created a custom driver for the IOP that handled streaming data off of the DVD. It is much more complicated than I first expected. It&#39;s located in &lt;code&gt;game/overlord&lt;/code&gt;. Like the C kernel, we try to keep this as close as possible to the actual game.&lt;/li&gt; 
 &lt;li&gt;Sound code. Naughty Dog used a third party library for sound called &lt;code&gt;989SND&lt;/code&gt;. Code for the library and an interface for it is located in &lt;code&gt;game/sound&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;PC specific graphics code. We have a functional OpenGL renderer and context that can create a game window and display graphics on it. The specific renderers used by the game however are mostly implemented. Aside from post-processing effects, everything in the game is rendered. This is located in &lt;code&gt;game/graphics&lt;/code&gt;. While many liberties will be taken to make this work, the end result should very closely match the actual game.&lt;/li&gt; 
 &lt;li&gt;Extra assets used by the port in some fashion, located in &lt;code&gt;game/assets&lt;/code&gt;. These include extra text files, icons, etc.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>dimitri/pgloader</title>
      <link>https://github.com/dimitri/pgloader</link>
      <description>&lt;p&gt;Migrate to PostgreSQL in a single command!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PGLoader&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/dimitri/pgloader&quot;&gt;&lt;img src=&quot;https://travis-ci.org/dimitri/pgloader.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/dimitri/pgloader?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&quot; alt=&quot;Join the chat at https://gitter.im/dimitri/pgloader&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://pgloader.readthedocs.io/en/latest/&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/pgloader/badge/?version=latest&amp;amp;style=plastic&quot; alt=&quot;Read The Docs Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;pgloader is a data loading tool for PostgreSQL, using the &lt;code&gt;COPY&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;Its main advantage over just using &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;\copy&lt;/code&gt;, and over using a &lt;em&gt;Foreign Data Wrapper&lt;/em&gt;, is its transaction behaviour, where &lt;em&gt;pgloader&lt;/em&gt; will keep a separate file of rejected data, but continue trying to &lt;code&gt;copy&lt;/code&gt; good data in your database.&lt;/p&gt; 
&lt;p&gt;The default PostgreSQL behaviour is transactional, which means that &lt;em&gt;any&lt;/em&gt; erroneous line in the input data (file or remote database) will stop the entire bulk load for the table.&lt;/p&gt; 
&lt;p&gt;pgloader also implements data reformatting, a typical example of that being the transformation of MySQL datestamps &lt;code&gt;0000-00-00&lt;/code&gt; and &lt;code&gt;0000-00-00 00:00:00&lt;/code&gt; to PostgreSQL &lt;code&gt;NULL&lt;/code&gt; value (because our calendar never had a &lt;em&gt;year zero&lt;/em&gt;).&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Full documentation is available online, including manual pages of all the pgloader sub-commands. Check out &lt;a href=&quot;https://pgloader.readthedocs.io/en/latest/&quot;&gt;https://pgloader.readthedocs.io/&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pgloader --help
pgloader [ option ... ] SOURCE TARGET
  --help -h                       boolean  Show usage and exit.
  --version -V                    boolean  Displays pgloader version and exit.
  --quiet -q                      boolean  Be quiet
  --verbose -v                    boolean  Be verbose
  --debug -d                      boolean  Display debug level information.
  --client-min-messages           string   Filter logs seen at the console (default: &quot;warning&quot;)
  --log-min-messages              string   Filter logs seen in the logfile (default: &quot;notice&quot;)
  --summary -S                    string   Filename where to copy the summary
  --root-dir -D                   string   Output root directory. (default: #P&quot;/tmp/pgloader/&quot;)
  --upgrade-config -U             boolean  Output the command(s) corresponding to .conf file for v2.x
  --list-encodings -E             boolean  List pgloader known encodings and exit.
  --logfile -L                    string   Filename where to send the logs.
  --load-lisp-file -l             string   Read user code from files
  --dry-run                       boolean  Only check database connections, don&#39;t load anything.
  --on-error-stop                 boolean  Refrain from handling errors properly.
  --no-ssl-cert-verification      boolean  Instruct OpenSSL to bypass verifying certificates.
  --context -C                    string   Command Context Variables
  --with                          string   Load options
  --set                           string   PostgreSQL options
  --field                         string   Source file fields specification
  --cast                          string   Specific cast rules
  --type                          string   Force input source type
  --encoding                      string   Source expected encoding
  --before                        string   SQL script to run before loading the data
  --after                         string   SQL script to run after loading the data
  --self-upgrade                  string   Path to pgloader newer sources
  --regress                       boolean  Drive regression testing
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;You can either give a command file to pgloader or run it all from the command line, see the &lt;a href=&quot;https://pgloader.readthedocs.io/en/latest/tutorial/tutorial.html#pgloader-quick-start&quot;&gt;pgloader quick start&lt;/a&gt; on &lt;a href=&quot;https://pgloader.readthedocs.io&quot;&gt;https://pgloader.readthedocs.io&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./build/bin/pgloader --help
$ ./build/bin/pgloader &amp;lt;file.load&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, for a full migration from SQLite:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ createdb newdb
$ pgloader ./test/sqlite/sqlite.db postgresql:///newdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or for a full migration from MySQL, including schema definition (tables, indexes, foreign keys, comments) and parallel loading of the corrected data:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ createdb pagila
$ pgloader mysql://user@localhost/sakila postgresql:///pagila
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;LICENCE&lt;/h2&gt; 
&lt;p&gt;pgloader is available under &lt;a href=&quot;http://www.postgresql.org/about/licence/&quot;&gt;The PostgreSQL Licence&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;INSTALL&lt;/h2&gt; 
&lt;p&gt;Please see full documentation at &lt;a href=&quot;https://pgloader.readthedocs.io/en/latest/install.html&quot;&gt;https://pgloader.readthedocs.io/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you&#39;re using debian, it&#39;s already available:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ apt-get install pgloader
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re using docker, you can use the latest version built by the CI at each commit to the master branch:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ docker pull ghcr.io/dimitri/pgloader:latest
$ docker run --rm -it ghcr.io/dimitri/pgloader:latest pgloader --version
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
