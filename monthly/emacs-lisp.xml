<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Emacs Lisp Monthly Trending</title>
    <description>Monthly Trending of Emacs Lisp in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:52:41 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>syl20bnr/spacemacs</title>
      <link>https://github.com/syl20bnr/spacemacs</link>
      <description>&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&quot;top&quot; id=&quot;fork-destination-box&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Made with Spacemacs&quot; height=&quot;20&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/gplv3.png&quot; alt=&quot;GPLv3 Software&quot; align=&quot;right&quot; height=&quot;20&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.twitter.com/spacemacs&quot;&gt;&lt;img src=&quot;https://i.imgur.com/tXSoThF.png&quot; alt=&quot;Twitter&quot; align=&quot;right&quot; height=&quot;20&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- logo and links --&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&quot; alt=&quot;Spacemacs&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#core-pillars&quot;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&quot;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#screenshots&quot;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION.html&quot;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#achievements&quot;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; 
&lt;!-- badges --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join Chat.svg&quot; alt=&quot;Gitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/p4MddFu6Ag&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&quot;&gt;&lt;img src=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&quot; alt=&quot;elisp state&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&quot; alt=&quot;Donate&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&quot; alt=&quot;Merchandise&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&quot; alt=&quot;Recommend it&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you &lt;em&gt;don&#39;t&lt;/em&gt; have an existing Emacs setup and want to run Spacemacs as your configuration, and if you have all &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&quot;&gt;prerequisites&lt;/a&gt; installed, you can install Spacemacs with one line:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If &lt;code&gt;HOME&lt;/code&gt; is not set in environment or in registry:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $env:APPDATA/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you do have an existing Emacs configuration, look at the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&quot;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on &lt;em&gt;ergonomics&lt;/em&gt;, &lt;em&gt;mnemonics&lt;/em&gt; and &lt;em&gt;consistency&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; 
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; 
&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&quot; alt=&quot;spacemacs_python&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;SPC&lt;/kbd&gt; or &lt;kbd&gt;Alt-m&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organized in configuration layers following a set of &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions &lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; 
&lt;p&gt;You can also check the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/FAQ.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting Help&lt;/h1&gt; 
&lt;p&gt;If you need help, ask your questions in the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; 
&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&quot;https://irc.gitter.im/&quot;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; 
&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jack of Some&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&quot;&gt;Spacemacs tutorial videos&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;GDQuest&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&quot;&gt;Game Design oriented tutorials &lt;/a&gt; to Spacemacs.&lt;/li&gt; 
 &lt;li&gt;Practicalli&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=jMJ58Gcc1RI&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&quot;&gt;Clojure tutorials based on Spacemacs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Eivind Fonn&#39;s classic &lt;a href=&quot;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&quot;&gt;Spacemacs ABC&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;A package manager if the OS doesn&#39;t have one already.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs is an extension of a popular text editor called &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;. So you&#39;ll need Emacs installed first.&lt;/p&gt; &lt;p&gt;Spacemacs requires Emacs 28.2 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;git&lt;/a&gt; is required to download and update Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Tar, in particular &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt;, is required to install and update Emacs packages used by Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; The default font used by Spacemacs is &lt;a href=&quot;https://adobe-fonts.github.io/source-code-pro/&quot;&gt;Source Code Pro&lt;/a&gt;. You may customize your own font settings and choose another font. If you want to use this default font, it must be installed.&lt;/p&gt; &lt;p&gt;Spacemacs also uses fallback fonts to ensure certain Unicode symbols it uses symbols appear correctly. The fonts used are determined by the OS:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Linux: &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;Nanum Gothic&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;macOS: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/arial-unicode-ms&quot;&gt;Arial Unicode MS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Windows: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/ms-gothic&quot;&gt;MS Gothic&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/lucida-sans-unicode&quot;&gt;Lucida Sans Unicode&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If the mode-line doesn&#39;t look similar to the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&quot;&gt;picture at the top of this page&lt;/a&gt;, make sure you have the correct fallback font installed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Various commands in Spacemacs needs one of the following line searching program:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep (rg)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;The silver searcher (ag)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beyondgrep/ack3&quot;&gt;ack&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU Grep&lt;/a&gt; or &lt;a href=&quot;https://man.openbsd.org/grep&quot;&gt;BSD Grep&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Grep is very slow but it&#39;s widely available on most systems and is used as an fallback option.&lt;/p&gt; &lt;p&gt;We strongly recommend &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; over other line searching programs, for its blazing fast speed. The following subsections helps you to install it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Most Linux distribution ships a package manager already and if this is the case you are all set for this step.&lt;/p&gt; &lt;p&gt;If it doesn&#39;t, you may need to build the softwares mentioned below from their sources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In most distributions, Emacs is installed via an &lt;code&gt;emacs&lt;/code&gt; package from the package manager.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; DO not install &lt;a href=&quot;https://www.xemacs.org&quot;&gt;XEmacs&lt;/a&gt; because it&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs with various &lt;a href=&quot;https://www.emacswiki.org/emacs/EmacsAndXEmacs&quot;&gt;subtle differences&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Some Linux distributions support only Emacs versions older than 28.2. In this case you should &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&quot;&gt;build it from source&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Git is already installed on your system. Otherwise, you should be able to install &lt;code&gt;git&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Tar is already installed on your system. Otherwise, you should be able to install &lt;code&gt;tar&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If Nerd Fonts and Nanum Gothic are available from your distribution&#39;s package manager, you should install it there.&lt;/p&gt; &lt;p&gt;Otherwise, the generic way to install it is:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Download the latest pre-built &lt;code&gt;TTF&lt;/code&gt; font from &lt;a href=&quot;https://github.com/adobe-fonts/source-code-pro/releases/latest&quot;&gt;https://github.com/adobe-fonts/source-code-pro/releases/latest&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;https://fonts.google.com/specimen/Nanum+Gothic&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Extract the archive and move the font files to &lt;code&gt;~/.fonts&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Refresh font cache with:&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;fc-cache -fv
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If your distribution is listed &lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation=&quot;&gt;here&lt;/a&gt;, follow the instructions. Otherwise, you can download its pre-built binary or build it from source.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The most popular package manager on macOS is &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;, to install it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Several options exist for installing Emacs on macOS:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus&quot;&gt;Emacs Plus&lt;/a&gt; features &lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus#features-explained&quot;&gt;additional functionalities&lt;/a&gt; over base Emacs.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap d12frosted/emacs-plus

# install latest stable release, with Spacemacs icon and native compilation
brew install emacs-plus --with-spacemacs-icon --with-native-comp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will require the latest version of Xcode Command Line tools, which can be downloaded from the &lt;a href=&quot;https://developer.apple.com/download/all/&quot;&gt;Apple Developer Portal&lt;/a&gt; or by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;softwareupdate --all --install --force
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/railwaycat/homebrew-emacsmacport&quot;&gt;Emacs Mac Port&lt;/a&gt; adds native GUI support to Emacs 28. And the full list of features is available &lt;a href=&quot;https://bitbucket.org/mituharu/emacs-mac/src/master/README-mac&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap railwaycat/emacsmacport
brew install emacs-mac
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://emacsformacosx.com/&quot;&gt;Emacs for Mac OS X&lt;/a&gt; is the binary build of GNU Emacs, &lt;em&gt;without&lt;/em&gt; any extra feature.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;macOS ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but there are reports of weird issues so we require &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install gnu-tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; To install Source Code Pro Font:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap homebrew/cask-fonts
brew install --cask font-source-code-pro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Arial Unicode MS is shipped with macOS v10.5 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; via &lt;code&gt;Homebrew&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;We recommend using wsl2 with wslg support especially with a pgtk build of emacs and wayland. For the installation please refer to the linux installation section. When running emacs within your wsl2 environment emacs will be handled like any other windows application.&lt;/p&gt; 
&lt;p&gt;If this is not possible you can fallback to a native windows installation, however note that this will create a lot of subtle bugs especially with tls which we will most likely not be able to help with.&lt;/p&gt; 
&lt;p&gt;If you need to follow that path we recommend to at least use a package manager like &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; to install the needed packages.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You can install &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; via PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
irm get.scoop.sh | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Emacs can be installed in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add extras
scoop install emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows 10 build 17063 and later ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but it&#39;s required to install &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead to avoid possible issues. Alternatively, if you are running an earlier version of Windows, Tar isn&#39;t installed. In either case, you can install GNU Tar via:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install Source Code Pro Font in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add KnotUntied_scoop-fonts https://github.com/KnotUntied/scoop-fonts
scoop install sourcecodepro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;MS Gothic and Lucida Sans Unicode are shipped with Windows 2003 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;h2&gt;Default Install&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The default installation downloads Spacemacs to the &lt;code&gt;.emacs.d&lt;/code&gt; directory in your &lt;code&gt;HOME&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;But in the case of Windows, &lt;code&gt;HOME&lt;/code&gt; is not set out-of-box. We recommend you to set it as an environment variable, with the same value as environment variable &lt;code&gt;HOMEPATH&lt;/code&gt;, which usually looks like &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Since Spacemacs will now be downloaded at &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;, if it already exists it&#39;ll be overridden.&lt;/p&gt; &lt;p&gt;Also, if you have either &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; or &lt;code&gt;$HOME/.emacs&lt;/code&gt;, they will appear before Spacemacs in Emacs&#39;s initialization steps. Thus they must be renamed in order for Spacemacs to load correctly.&lt;/p&gt; &lt;p&gt;To backup/rename the aforementioned files/directory, in shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[ -d $HOME/.emacs.d ] &amp;amp;&amp;amp; mv $HOME/.emacs.d $HOME/.emacs.d.bak
[ -f $HOME/.emacs.el ] &amp;amp;&amp;amp; mv $HOME/.emacs.el .emacs.el.bak
[ -f $HOME/.emacs ] &amp;amp;&amp;amp; mv $HOME/.emacs $HOME/.emacs.bak
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;if( Test-Path -Path $HOME/.emacs.d )
{
    Rename-Item $HOME/.emacs.d $HOME/.emacs.d.bak
}
if( Test-Path -Path $HOME/.emacs.el )
{
    Rename-Item $HOME/.emacs.el $HOME/.emacs.el.bak
}
if( Test-Path -Path $HOME/.emacs )
{
    Rename-Item $HOME/.emacs $HOME/.emacs.bak
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now clone this repository with Git. The following work for both shell and PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you have a limited internet connection or limited speed:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch Emacs and Spacemacs will be loaded.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Alternative Install Location&lt;/h2&gt; 
&lt;p&gt;To install Spacemacs in a different location, we first need to introduce how Spacemacs is loaded:&lt;/p&gt; 
&lt;p&gt;When Emacs is started, it looks for the init file &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;in a deterministic way&lt;/a&gt;. The &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-install&quot;&gt;default installation&lt;/a&gt; exploits it by occupying &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt; and let Emacs use it as its init file.&lt;/p&gt; 
&lt;p&gt;In other word, in default installation, Emacs find and load &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt;, which is then responsible to load other files in &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to install Spacemacs to a different location, you need to make sure it&#39;s loaded by Emacs in one of its &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;init file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, if you&#39;ve cloned Spacemacs to &lt;code&gt;$HOME/Spacemacs&lt;/code&gt;, and if you use &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; as Emacs init file, then the following lines in &lt;code&gt;$HOME/.emacs.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; load Spacemacs&#39;s initialization file, &quot;~&quot; is equivalent to &quot;$HOME&quot;
(load-file &quot;~/Spacemacs/init.el&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;First Launch and Configuration&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;After cloning Spacemacs, the first time when you launch Emacs, Spacemacs will automatically install the essential packages it requires. This step is the bootstrap.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once the bootstrap packages are installed, Spacemacs checks whether you have an customization file &lt;code&gt;$HOME/.spacemacs&lt;/code&gt;, known as &lt;code&gt;dotspacemacs&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If it already exists, Spacemacs loads it as the configuration.&lt;/li&gt; 
   &lt;li&gt;Otherwise, you need to answer a few questions and Spacemacs will generate the &lt;code&gt;dotspacemacs&lt;/code&gt; file for you.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If you are new to Emacs and/or Spacemacs, it&#39;s fine to just accept the default choices. They can be changed in the &lt;code&gt;dotspacemacs&lt;/code&gt; file later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs will download and install remaining packages it will require, according to your &lt;code&gt;dotspacemacs&lt;/code&gt;. When the all the packages have been installed, restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dotspacemacs&lt;/code&gt; is the configuration file for Spacemacs, it&#39;s self explanatory and is written in Emacs Lisp. Read &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In case you want to store your &lt;code&gt;dotspacemacs&lt;/code&gt; at another location, say under &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;First set the environment variable &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Move &lt;code&gt;$HOME/.spacemacs&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d/init.el&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In other word, set &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to the parent directory of your &lt;code&gt;dotspacemacs&lt;/code&gt;, and move &lt;code&gt;dotspacemacs&lt;/code&gt; to the said directory.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Spacemacs logo&lt;/h2&gt; 
&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&quot;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&quot;&gt;this .desktop file&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, by default &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For macOS users, you need to &lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;download the .icns version of the logo&lt;/a&gt; and simply &lt;a href=&quot;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&quot;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS, securely installing Emacs packages may fail. If this happens to you please update your OS and Emacs. If you are behind a company proxy please trust the company firewall cert. We do not longer support disabling https due to security reasons.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows)&lt;/em&gt; If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;From Properties select the Tab “Security”,&lt;/li&gt; 
   &lt;li&gt;Select the button “Advanced”,&lt;/li&gt; 
   &lt;li&gt;Select the Tab “Owner”&lt;/li&gt; 
   &lt;li&gt;Change the owner to your account name&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows&lt;/em&gt;) The period (dot) before a file or folder name means that it&#39;s a hidden file or folder. To show hidden files and folders:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Press the Windows key&lt;/li&gt; 
   &lt;li&gt;Type &lt;code&gt;File explorer options&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; 
   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Update&lt;/h1&gt; 
&lt;p&gt;Spacemacs relies solely on a rolling update scheme based on the latest changes available. To update Spacemacs, simply pull the latest changes from the &lt;code&gt;develop&lt;/code&gt; branch:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git pull --rebase
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;After updating Spacemacs, you should also check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button, or use the convenient keybinding &lt;kbd&gt;SPC f e U&lt;/kbd&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Upgrading from the deprecated &lt;code&gt;master&lt;/code&gt; branch&lt;/h2&gt; 
&lt;p&gt;If you are still on the old &lt;code&gt;master&lt;/code&gt; branch (i.e., if &lt;code&gt;git branch --show-current&lt;/code&gt; shows &lt;code&gt;master&lt;/code&gt; instead of &lt;code&gt;develop&lt;/code&gt;), you need to &lt;a href=&quot;https://practical.li/spacemacs/reference/switch-to-develop/&quot;&gt;upgrade to &lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; first.&lt;/p&gt; 
&lt;h1&gt;Quotes&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/ashnur&quot;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis
on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/deuill&quot;&gt;deuill&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Contributions&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; 
&lt;p&gt;Before contributing, be sure to consult the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Communities&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs.stackexchange.com/questions/tagged/spacemacs&quot;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/spacemacs&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; 
&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/intellimacs&quot;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/spaceclipse&quot;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SpaceVim/SpaceVim&quot;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/VSpaceCode/VSpaceCode&quot;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the initialization and core files&lt;/li&gt; 
 &lt;li&gt;all the layer files&lt;/li&gt; 
 &lt;li&gt;the documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&quot;https://github.com/nashamri&quot;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; 
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; 
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&quot;https://salt.bountysource.com/teams/spacemacs&quot;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&quot;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you used Spacemacs in a project, and you want to show that fact, you can use the Spacemacs badge: &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Built with Spacemacs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;https://spacemacs.org&quot;&amp;gt;&amp;lt;img alt=&quot;Built with Spacemacs&quot; src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-org&quot;&gt;[[https://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>joaotavora/yasnippet</title>
      <link>https://github.com/joaotavora/yasnippet</link>
      <description>&lt;p&gt;A template system for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/joaotavora/yasnippet&quot;&gt;&lt;img src=&quot;https://travis-ci.org/joaotavora/yasnippet.png&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Intro&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;YASnippet&lt;/strong&gt; is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from &lt;a href=&quot;http://manual.macromates.com/en/snippets&quot;&gt;TextMate&#39;s&lt;/a&gt; syntax, you can even &lt;a href=&quot;https://raw.githubusercontent.com/joaotavora/yasnippet/master/#import&quot;&gt;import&lt;/a&gt; most TextMate templates to YASnippet. Watch &lt;a href=&quot;http://www.youtube.com/watch?v=ZCGmZK4V7Sg&quot;&gt;a demo on YouTube&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Manual install from Git&lt;/h2&gt; 
&lt;p&gt;Clone this repository somewhere&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cd ~/.emacs.d/plugins
$ git clone --recursive https://github.com/joaotavora/yasnippet
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add the following in your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path
              &quot;~/.emacs.d/plugins/yasnippet&quot;)
(require &#39;yasnippet)
(yas-global-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add your own snippets to &lt;code&gt;~/.emacs.d/snippets&lt;/code&gt; by placing files there or invoking &lt;code&gt;yas-new-snippet&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Install with &lt;code&gt;package-install&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;In a recent emacs &lt;code&gt;M-x list-packages&lt;/code&gt; is the recommended way to list and install packages. It&#39;s available from &lt;a href=&quot;http://elpa.gnu.org/packages/yasnippet.html&quot;&gt;GNU ELPA&lt;/a&gt;. If you need a very recent snapshot, you can get it from &lt;a href=&quot;http://elpa.gnu.org/devel/yasnippet.html&quot;&gt;GNU-devel ELPA&lt;/a&gt; as well as &lt;a href=&quot;http://melpa.milkbox.net/&quot;&gt;MELPA&lt;/a&gt; (see &lt;a href=&quot;http://melpa.org/#installing&quot;&gt;http://melpa.org/#installing&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;Install with el-get&lt;/h2&gt; 
&lt;p&gt;El-get is another nice way to get the most recent version, too. See &lt;a href=&quot;https://github.com/dimitri/el-get&quot;&gt;https://github.com/dimitri/el-get&lt;/a&gt; for instructions.&lt;/p&gt; 
&lt;h2&gt;Use &lt;code&gt;yas-minor-mode&lt;/code&gt; on a per-buffer basis&lt;/h2&gt; 
&lt;p&gt;To use YASnippet as a non-global minor mode, don&#39;t call &lt;code&gt;yas-global-mode&lt;/code&gt;; instead call &lt;code&gt;yas-reload-all&lt;/code&gt; to load the snippet tables and then call &lt;code&gt;yas-minor-mode&lt;/code&gt; from the hooks of major-modes where you want YASnippet enabled.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(yas-reload-all)
(add-hook &#39;prog-mode-hook #&#39;yas-minor-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Where are the snippets?&lt;/h1&gt; 
&lt;p&gt;&lt;a name=&quot;import&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;YASnippet no longer bundles snippets directly, but it&#39;s very easy to get some!&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/AndreaCrotti/yasnippet-snippets&quot;&gt;yasnippet-snippets&lt;/a&gt; - a snippet collection package maintained by &lt;a href=&quot;https://github.com/AndreaCrotti&quot;&gt;AndreaCrotti&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;It can be installed with &lt;code&gt;M-x package-install RET yasnippet-snippets&lt;/code&gt; if you have added MELPA to your package sources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/joaotavora/yasmate&quot;&gt;yasmate&lt;/a&gt; a tool which is dedicated to converting textmate bundles into yasnippet snippets.&lt;/p&gt; &lt;p&gt;To use these snippets you have to run the tool first, so &lt;a href=&quot;http://github.com/joaotavora/yasmate&quot;&gt;see its doc&lt;/a&gt;), and then point the &lt;code&gt;yas-snippet-dirs&lt;/code&gt; variable to the &lt;code&gt;.../yasmate/snippets&lt;/code&gt; subdir.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/mattfidler/textmate-to-yas.el&quot;&gt;textmate-to-yas.el&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This is another textmate bundle converting tool using Elisp instead of Ruby.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Naturally, you can point &lt;code&gt;yas-snippet-dirs&lt;/code&gt; to good snippet collections out there. If you have created snippets for a mode, or multiple modes, consider creating a repository to host them, then tell users that it should be added like this to &lt;code&gt;yas-snippet-dirs&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(setq yas-snippet-dirs
      &#39;(&quot;~/.emacs.d/snippets&quot;                 ;; personal snippets
        &quot;/path/to/some/collection/&quot;           ;; foo-mode and bar-mode snippet collection
        &quot;/path/to/yasnippet/yasmate/snippets&quot; ;; the yasmate collection
        ))

(yas-global-mode 1) ;; or M-x yas-reload-all if you&#39;ve started YASnippet already.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Manual, issues etc&lt;/h1&gt; 
&lt;p&gt;There&#39;s comprehensive &lt;a href=&quot;http://joaotavora.github.io/yasnippet/&quot;&gt;documentation&lt;/a&gt; on using and customising YASnippet.&lt;/p&gt; 
&lt;p&gt;There&#39;s a &lt;a href=&quot;https://github.com/joaotavora/yasnippet/issues?q=label%3Asupport&quot;&gt;list of support issues&lt;/a&gt;, with solutions to common problems and practical snippet examples.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/joaotavora/yasnippet/issues&quot;&gt;Github issue tracker&lt;/a&gt; is where most YASnippet-related discussion happens. Nevertheless, since YASnippet is a part of Emacs, you may alternatively report bugs to Emacs via &lt;code&gt;M-x report-emacs-bug&lt;/code&gt; or sending an email to &lt;code&gt;bug-gnu-emacs@gnu.org&lt;/code&gt;, putting &quot;yasnippet&quot; somewhere in the subject.&lt;/p&gt; 
&lt;h2&gt;Important note regarding bug reporting&lt;/h2&gt; 
&lt;p&gt;Your bug reports are very valuable.&lt;/p&gt; 
&lt;p&gt;The most important thing when reporting bugs is making sure that we have a way to reproduce the problem exactly like it happened to you.&lt;/p&gt; 
&lt;p&gt;To do this, we need to rule out interference from external factors like other Emacs extensions or your own customisations.&lt;/p&gt; 
&lt;p&gt;Here&#39;s an example report that &quot;sandboxes&quot; an Emacs session just for reproducing a bug.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ emacs --version
Emacs 24.3
$ cd /tmp/
$ git clone https://github.com/joaotavora/yasnippet.git yasnippet-bug
$ cd yasnippet-bug
$ git log -1 --oneline
6053db0 Closes #527: Unbreak case where yas-fallback-behaviour is a list
$ HOME=$PWD emacs -L . # This &quot;sandboxes&quot; your emacs, melpa configuration, etc

(require &#39;yasnippet)
(yas-global-mode 1)

When I open a foo-mode file I don&#39;t see foo-mode under the &quot;YASnippet&quot; menu!
OR
When loading yasnippet I see &quot;Error: failed to frobnicate&quot;!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;code&gt;emacs -Q&lt;/code&gt; or temporarily moving your &lt;code&gt;.emacs&lt;/code&gt; init file to the side is another way to achieve good reproducibility.&lt;/p&gt; 
&lt;p&gt;Here&#39;s a &lt;a href=&quot;https://github.com/joaotavora/yasnippet/issues/318&quot;&gt;another example&lt;/a&gt; of a bug report. It has everything needed for a successful analysis and speedy resolution.&lt;/p&gt; 
&lt;p&gt;Also, don&#39;t forget to state the Emacs version (use &lt;code&gt;M-x emacs-version&lt;/code&gt;) and the yasnippet version you are using (if using the latest from github, do &lt;code&gt;git log -1&lt;/code&gt; in the dir).&lt;/p&gt; 
&lt;p&gt;Any more info is welcome, but don&#39;t just paste a backtrace or an error message string you got, unless we ask for it.&lt;/p&gt; 
&lt;p&gt;Finally, thank you very much for using YASnippet!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs-mirror/emacs</title>
      <link>https://github.com/emacs-mirror/emacs</link>
      <description>&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2025 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; 
&lt;p&gt;This directory tree holds version 31.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; 
&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; 
&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; 
&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; 
&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; 
&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&quot;mailto:bug-gnu-emacs@gnu.org&quot;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; 
&lt;p&gt;See the &quot;Bugs&quot; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&quot;https://savannah.gnu.org/mail/?group=emacs&quot;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&quot;https://lists.gnu.org/&quot;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; 
&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; 
&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; 
&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; 
&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; 
&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; 
&lt;p&gt;There are several subdirectories:&lt;/p&gt; 
&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script. &#39;java&#39; holds the Java code for the Emacs port to Android. &#39;cross&#39; holds Makefiles and an additional copy of gnulib used to build Emacs for Android devices. &#39;exec&#39; holds the source code to several helper executables used to run user-installed programs on Android.&lt;/p&gt; 
&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; 
&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; 
&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; 
&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; 
&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&quot;https://www.gnu.org/licenses/&quot;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>melpa/melpa</title>
      <link>https://github.com/melpa/melpa</link>
      <description>&lt;p&gt;Recipes and build machinery for the biggest Emacs package repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MELPA&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/melpa/melpa/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/melpa/melpa/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;MELPA is a growing collection of &lt;code&gt;package.el&lt;/code&gt;-compatible Emacs Lisp packages built automatically on our server from the upstream source code using simple recipes. (Think of it as a server-side version of &lt;a href=&quot;https://github.com/dimitri/el-get/&quot;&gt;&lt;code&gt;el-get&lt;/code&gt;&lt;/a&gt;, or even &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.)&lt;/p&gt; 
&lt;p&gt;Packages are updated at intervals throughout the day.&lt;/p&gt; 
&lt;p&gt;To browse available packages, check out the &lt;a href=&quot;https://melpa.org/&quot;&gt;archive index page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Adding packages is as simple as submitting a new recipe as a pull request; read on for details.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&quot;&gt;Recipe Format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#build-scripts&quot;&gt;Build Scripts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#mirrors&quot;&gt;Mirrors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To use the MELPA repository, you&#39;ll need an Emacs with &lt;code&gt;package.el&lt;/code&gt;, i.e., Emacs 24.1 or greater. To test TLS support you can visit a HTTPS URL, for example with &lt;code&gt;M-x eww RET https://wikipedia.org RET&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Enable installation of packages from MELPA by adding an entry to &lt;code&gt;package-archives&lt;/code&gt; after &lt;code&gt;(require &#39;package)&lt;/code&gt; and before the call to &lt;code&gt;package-initialize&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(require &#39;package)
(add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;) t)
;; Comment/uncomment this line to enable MELPA Stable if desired.
;; See `package-archive-priorities` and `package-pinned-packages`.
;; Most users will not need or want to do this.
;; (add-to-list &#39;package-archives
;;              &#39;(&quot;melpa-stable&quot; . &quot;https://stable.melpa.org/packages/&quot;) t)
(package-initialize)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then just use &lt;code&gt;M-x package-list-packages&lt;/code&gt; to browse and install packages from MELPA and elsewhere.&lt;/p&gt; 
&lt;p&gt;Note that you&#39;ll need to run &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; or &lt;code&gt;M-x package-list-packages&lt;/code&gt; to ensure that Emacs has fetched the MELPA package list before you can install packages with &lt;code&gt;M-x package-install&lt;/code&gt; or similar.&lt;/p&gt; 
&lt;h3&gt;MELPA Stable&lt;/h3&gt; 
&lt;p&gt;Packages in MELPA are built directly from the latest package source code in the upstream repositories, but we also build and publish packages corresponding to the latest tagged code in those repositories, where version tags exist. These packages are published in a separate package archive called &lt;a href=&quot;https://stable.melpa.org/&quot;&gt;MELPA Stable&lt;/a&gt;. Most users should prefer MELPA over MELPA Stable.&lt;/p&gt; 
&lt;p&gt;Some notes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If you leave the original MELPA server in your &lt;code&gt;package-archives&lt;/code&gt; then by default you will get the &lt;em&gt;development&lt;/em&gt; versions of packages and not the stable ones, because the development versions are higher.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If your Emacs has the variables &lt;code&gt;package-pinned-packages&lt;/code&gt; (available in 24.4 and later) and/or &lt;code&gt;package-archive-priorities&lt;/code&gt;, you can customize or modify those variables as needed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can use the &lt;a href=&quot;https://github.com/milkypostman/package-filter/&quot;&gt;&lt;code&gt;package-filter&lt;/code&gt;&lt;/a&gt; package which we provide.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You will probably want to remove all packages and then reinstall them. Any packages you already have installed from MELPA will never get &quot;updated&quot; to the stable version because of the way version numbering is handled.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that the MELPA maintainers do not use MELPA Stable themselves, and do not particularly recommend its use.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/CONTRIBUTING.org&quot;&gt;CONTRIBUTING.org&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Recipe Format&lt;/h2&gt; 
&lt;p&gt;Packages are specified by files in the &lt;code&gt;recipes&lt;/code&gt; directory. You can contribute a new package by adding a new file under &lt;code&gt;recipes&lt;/code&gt; using the following form (&lt;code&gt;[...]&lt;/code&gt; denotes optional or conditional values),&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(&amp;lt;package-name&amp;gt;
 :fetcher [git|github|gitlab|codeberg|sourcehut|hg]
 [:url &quot;&amp;lt;repo url&amp;gt;&quot;]
 [:repo &quot;user-name/repo-name&quot;]
 [:commit &quot;commit&quot;]
 [:branch &quot;branch&quot;]
 [:version-regexp &quot;&amp;lt;regexp&amp;gt;&quot;]
 [:files (&quot;&amp;lt;file1&amp;gt;&quot; ...)]
 [:old-names (&amp;lt;old-name&amp;gt; ...)])
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-name&lt;/code&gt; a lisp symbol that has the same name as the package being specified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:fetcher&lt;/code&gt; specifies the type of repository the package is being maintained in.&lt;/p&gt; &lt;p&gt;Melpa supports the Git and Mercurial version control systems and provides generic fetcher types for them: &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;hg&lt;/code&gt;. When you use one of these fetchers, you must specify the &lt;code&gt;:url&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt;Melpa also provides dedicated fetchers for certain Git forges (aka &quot;Git repository hosting platforms&quot;), which should always be preferred over the generic &lt;code&gt;git&lt;/code&gt; fetcher. When using a dedicated fetcher, you must specify &lt;code&gt;:repo&lt;/code&gt;, not &lt;code&gt;:url&lt;/code&gt;. Currently these Git forge fetchers exist: &lt;a href=&quot;https://github.com/&quot;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://gitlab.com/&quot;&gt;&lt;code&gt;gitlab&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://codeberg.org/&quot;&gt;&lt;code&gt;codeberg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://git.sr.ht/&quot;&gt;&lt;code&gt;sourcehut&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There are no dedicated fetchers for Mercurial. When a forge supports both Git and Mercurial, then the respective fetcher can only be used for Git repositories. For Mercurial repositories always use the &lt;code&gt;hg&lt;/code&gt; fetcher.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:url&lt;/code&gt; specifies the URL of the version control repository. It is required for the generic &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;hg&lt;/code&gt; fetchers and is invalid for forge-specific fetchers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt; specifies the repository used by forge-specific fetchers and is of the form &lt;code&gt;user-name/repo-name&lt;/code&gt;. It is required for forge-specific fetchers and is invalid for the generic fetchers.&lt;/p&gt; &lt;p&gt;Note that user names in Sourcehut URLs are prefixed with &lt;code&gt;~&lt;/code&gt;, that has to be omitted in the value of this property.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:commit&lt;/code&gt; specifies the commit of the Git repository to checkout. The value will be passed to &lt;code&gt;git reset&lt;/code&gt; in a repo where &lt;code&gt;upstream&lt;/code&gt; is the original repository. Can therefore be either a SHA, if pointing at a specific commit, or a full ref prefixed with &quot;origin/&quot;. Only used by the &lt;code&gt;git&lt;/code&gt;-based fetchers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt; specifies the branch of the Git repository to use. This is like &lt;code&gt;:commit&lt;/code&gt;, but it adds the &quot;origin/&quot; prefix automatically. This must be specified when using a branch other than the default branch.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:version-regexp&lt;/code&gt; is a regular expression for extracting a version-string from the repository tags. The default matches typical version tags such as &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;R16&lt;/code&gt; or &lt;code&gt;v4.3.5&lt;/code&gt;, so you should not override it unless necessary. For an unusual tag like &quot;OTP-18.1.5&quot;, we might add &lt;code&gt;:version-regexp &quot;[^0-9]*\\(.*\\)&quot;&lt;/code&gt; to strip the &quot;OTP-&quot; prefix. The captured portion of the regexp must be parseable by Emacs&#39; &lt;code&gt;version-to-list&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt; optional property specifying the Emacs Lisp libraries and info files used to build the package. Please do not override this if the default value (below) is adequate, which it should usually be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;&#39;(&quot;*.el&quot; &quot;lisp/*.el&quot;
  &quot;dir&quot; &quot;*.info&quot; &quot;*.texi&quot; &quot;*.texinfo&quot;
  &quot;doc/dir&quot; &quot;doc/*.info&quot; &quot;doc/*.texi&quot; &quot;doc/*.texinfo&quot;
  &quot;docs/dir&quot; &quot;docs/*.info&quot; &quot;docs/*.texi&quot; &quot;docs/*.texinfo&quot;
  (:exclude
   &quot;.dir-locals.el&quot; &quot;lisp/.dir-locals.el&quot;
   &quot;test.el&quot; &quot;tests.el&quot; &quot;*-test.el&quot; &quot;*-tests.el&quot;
   &quot;lisp/test.el&quot; &quot;lisp/tests.el&quot; &quot;lisp/*-test.el&quot; &quot;lisp/*-tests.el&quot;))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that you should place Emacs Lisp libraries in the root of the repository or in the &lt;code&gt;lisp/&lt;/code&gt; directory. Test files should be placed in the &lt;code&gt;test/&lt;/code&gt; directory and they should not provide a feature. Likewise &lt;code&gt;NAME-pkg.el&lt;/code&gt; isn&#39;t a library, so you might want to place it in the root directory, even when libraries reside in &lt;code&gt;lisp/&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Please do not track any third-party libraries and test utilities in your repository. If you absolutely must do it, then place these files in a directory dedicated to that purpose, alongside a file named &lt;code&gt;.nosearch&lt;/code&gt;. The latter prevents various tools from adding the containing directory to the &lt;code&gt;load-path&lt;/code&gt; or from otherwise getting confused.&lt;/p&gt; &lt;p&gt;The elements of the &lt;code&gt;:files&lt;/code&gt; list are glob-expanded to make a list of paths that will be copied into the root of the new package. This means a file like &lt;code&gt;lisp/foo.el&lt;/code&gt; would become &lt;code&gt;foo.el&lt;/code&gt; in the new package. To specify a destination subdirectory, use a list element of the form &lt;code&gt;(TARGET-DIR SOURCE-PATH ...)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To exclude certain paths, use &lt;code&gt;(:exclude SOURCE-PATH ...)&lt;/code&gt;. There should only be one element that begins with &lt;code&gt;:exclude&lt;/code&gt; and it should be the last element, though that is not enforced at this time.&lt;/p&gt; &lt;p&gt;If your package requires some additional files, but is otherwise fine with the defaults, use the special element &lt;code&gt;:defaults&lt;/code&gt; as the first element of the &lt;code&gt;:files&lt;/code&gt; list. This causes the default value shown above to be prepended to the specified file list. For example &lt;code&gt;:files (:defaults &quot;snippets&quot;)&lt;/code&gt; would cause the &lt;code&gt;snippets&lt;/code&gt; subdir to be copied in addition to the defaults.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Elements of &lt;code&gt;:files&lt;/code&gt; are (no longer) processed in order because we feed these globs to &lt;code&gt;git log&lt;/code&gt; or &lt;code&gt;hg log&lt;/code&gt; to determine the last commit that touched a relevant file. These commands unfortunately process all exclude globs after all include globs. Therefore it is not possible to override the &lt;code&gt;:exclude&lt;/code&gt; element that appears in &lt;code&gt;:defaults&lt;/code&gt; in a later element of &lt;code&gt;:files&lt;/code&gt;. This means that a package whose name ends with &lt;code&gt;-test&lt;/code&gt; cannot use &lt;code&gt;:defaults&lt;/code&gt;. Likewise if the name of a &lt;em&gt;library&lt;/em&gt; (as opposed to a file implementing tests) ends with &lt;code&gt;-test.el&lt;/code&gt;, then &lt;code&gt;:defaults&lt;/code&gt; cannot be used.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Once the appropriate commit has been determined &lt;code&gt;file-expand-wildcards&lt;/code&gt; is used to determine the files matched by each glob. Unfortunately (unlike in a shell) a glob that begins with &lt;code&gt;*&lt;/code&gt; may also match filenames that begin with &lt;code&gt;.&lt;/code&gt;, so you might have to add exclude globs to prevent those from being included. &lt;code&gt;:defaults&lt;/code&gt; takes care to exclude &lt;code&gt;.dir-locals.el&lt;/code&gt;; if you don&#39;t use &lt;code&gt;:defaults&lt;/code&gt;, then you might have to exclude that explicitly.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;:old-names&lt;/code&gt; specifies former names of the package, if any. The value is a list of symbols.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Example: Single File Repository&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;smex&lt;/code&gt; is a repository that contains two files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;smex.el&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Since there is only one &lt;code&gt;.el&lt;/code&gt; file, this package only needs the &lt;code&gt;:fetcher&lt;/code&gt; and &lt;code&gt;:repo&lt;/code&gt; specified,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(smex :fetcher github :repo &quot;nonsequitur/smex&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example: Multiple Packages in one Repository&lt;/h3&gt; 
&lt;p&gt;Assume we have a repository containing three libraries &lt;code&gt;mypackage.el&lt;/code&gt;, &lt;code&gt;helm-mypackage.el&lt;/code&gt;, and &lt;code&gt;persp-mypackage.el&lt;/code&gt;. The latter two libraries are optional and users who don&#39;t want to use the packages &lt;code&gt;helm&lt;/code&gt; and/or &lt;code&gt;perspective&lt;/code&gt; should not be forced to install them just so they can install &lt;code&gt;mypackage&lt;/code&gt;. These libraries should therefore be distributed as separate packages.&lt;/p&gt; 
&lt;p&gt;The three packages have to be declared in three separate files &lt;code&gt;recipes/mypackage&lt;/code&gt;, &lt;code&gt;recipes/helm-mypackage&lt;/code&gt;, and &lt;code&gt;recipes/persp-mypackage&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(helm-mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;helm-mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(persp-mypackage
 :fetcher github
 :repo &quot;someuser/mypackage&quot;
 :files (&quot;persp-mypackage.el&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example: Multiple Files in Multiple Directories&lt;/h3&gt; 
&lt;p&gt;There are special cases where creation of the package comes from many different sub-directories in the repository and the destination sub-directories need to be explicitly set.&lt;/p&gt; 
&lt;p&gt;Consider the &lt;code&gt;flymake-perlcritic&lt;/code&gt; recipe,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(flymake-perlcritic
 :fetcher github
 :repo &quot;illusori/emacs-flymake-perlcritic&quot;
 :files (&quot;*.el&quot; (&quot;bin&quot; &quot;bin/flymake_perlcritic&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which will result in a package structure of,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;flymake-perlcritic-YYYYMMDD
|-- bin
|   `-- flymake_perlcritic
|-- flymake-perlcritic-pkg.el
`-- flymake-perlcritic.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that specifying an entry in &lt;code&gt;:files&lt;/code&gt; that is a list takes the first element to be the destination directory.&lt;/p&gt; 
&lt;p&gt;But a better solution, given that we probably want to copy the &lt;em&gt;entire&lt;/em&gt; &lt;code&gt;snippets&lt;/code&gt; directory to the root of the package, we could just specify that directory. Consider the &lt;code&gt;pony-mode&lt;/code&gt; recipe,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(pony-mode
 :fetcher github
 :repo &quot;davidmiller/pony-mode&quot;
 :files (&quot;src/*.el&quot; &quot;snippets&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;which generates the package,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pony-mode-YYYYMMDD
|-- pony-mode-pkg.el
|-- pony-mode.el
|-- pony-tpl.el
`-- snippets
    |-- html-mode
    |   |-- bl
    |   |-- ex
    |   |-- for
    |   |-- if
    |   |-- loa
    |   |-- sup
    |   |-- testc
    |   `-- {{
    `-- python-mode
        |-- auth-view
        |-- bn
        |-- model
        |-- modelform
        |-- render-to
        |-- testc
        `-- view
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Build Scripts&lt;/h2&gt; 
&lt;p&gt;Building MELPA is all based around using the &lt;code&gt;Makefile&lt;/code&gt; included in the root repository directory. Described below are the actions that accepted by the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt; — build all packages under the &lt;code&gt;recipes/&lt;/code&gt; directory and compiles the &lt;code&gt;index.html&lt;/code&gt; file for the &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes/&amp;lt;NAME&amp;gt;&lt;/code&gt; — build individual recipe &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;. Built packages are put in the &lt;code&gt;packages/&lt;/code&gt; folder with version corresponding to the date of the latest commit that modified at least one of the files specified by the recipe; given according to the &lt;code&gt;%Y%m%d&lt;/code&gt; format.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt; — build all JSON files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;archive.json&lt;/code&gt; — construct the &lt;code&gt;archive.json&lt;/code&gt; file that will contain a JSON object of all compiled packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes.json&lt;/code&gt; — construct the &lt;code&gt;recipes.json&lt;/code&gt; file containing a JSON object of all packages available for building.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt; — clean everything.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;html&lt;/code&gt; — build &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-working&lt;/code&gt; — remove all repositories that have been checked out to the &lt;code&gt;working/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-packages&lt;/code&gt; — remove all compiled packages from the &lt;code&gt;packages&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-json&lt;/code&gt; — remove all JSON files.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that these scripts require an Emacs with &lt;code&gt;package.el&lt;/code&gt; installed, such as Emacs 24. If you have an older version of Emacs, you can get a suitable &lt;code&gt;package.el&lt;/code&gt; &lt;a href=&quot;https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;All repository code is contained in the file &lt;code&gt;package-build/package-build.el&lt;/code&gt;. That code is maintained in a &lt;a href=&quot;https://github.com/melpa/package-build/&quot;&gt;separate repository&lt;/a&gt;: the version in the MELPA repository is imported using &lt;code&gt;git subtree&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Functions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-all)&lt;/code&gt; — build packages for all recipes in the directory specified by &lt;code&gt;package-build-recipes-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-archive NAME)&lt;/code&gt; — interactive Emacs Lisp function to build a single archive. NAME is a symbol for the package to be built. Packages are staged in the directory specified by &lt;code&gt;package-build-working-dir&lt;/code&gt; and built packages are placed in the directory specified by &lt;code&gt;package-build-archive-dir&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Packages are versioned based on the most recent commit date to package files based on commits to upstream package repository.&lt;/p&gt; &lt;p&gt;A file named &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt;, which contains &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt;, and &lt;em&gt;requires&lt;/em&gt; information about the package is automatically generated. The information is extracted from the summary line and headers of &lt;code&gt;&amp;lt;NAME&amp;gt;.el&lt;/code&gt;. For historic reasons, if some of these values cannot be extracted from that file, then Melpa also extracts information from &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt; if such a file is tracked in the upstream repository (but this fallback will be removed eventually).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Variables&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-working-dir&lt;/code&gt; — Staging area containing package repositories and package directories being built.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-archive-dir&lt;/code&gt; — Location to store &lt;code&gt;archive-contents&lt;/code&gt; and any built packages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-recipes-dir&lt;/code&gt; — Directory containing MELPA compatible recipes. See &lt;a href=&quot;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&quot;&gt;Recipe Format&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Packages end up in the &lt;code&gt;packages/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-archive-dir&lt;/code&gt; variable.&lt;/p&gt; 
&lt;p&gt;Repositories are checked out to the &lt;code&gt;working/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-working-dir&lt;/code&gt; variable.&lt;/p&gt; 
&lt;h2&gt;Mirrors&lt;/h2&gt; 
&lt;p&gt;Official mirrors are available (with many thanks to mirrorservice.org) so that if melpa.org is down, packages can still be installed. The following are the HTTP/HTTPS URLs to use in &lt;code&gt;package-archives&lt;/code&gt; for MELPA and MELPA Stable respectively:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.mirrorservice.org/sites/melpa.org/packages/&quot;&gt;http://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mirrorservice.org/sites/melpa.org/packages/&quot;&gt;https://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&quot;&gt;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&quot;&gt;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Only the packages are mirrored, not the web site front-end itself.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;We are NOT responsible for the contents of any UNOFFICIAL mirror of our packages.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;rsync&lt;/code&gt; to get started with your own mirror:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rsync -avz --delete rsync://melpa.org/packages/ snapshots/
rsync -avz --delete rsync://melpa.org/packages-stable/ releases/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;MELPA&lt;/em&gt; is &lt;em&gt;Milkypostman&#39;s ELPA&lt;/em&gt; or &lt;em&gt;Milkypostman&#39;s Experimental Lisp Package Archive&lt;/em&gt; if you&#39;re not into the whole brevity thing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qjcg/awesome-typst</title>
      <link>https://github.com/qjcg/awesome-typst</link>
      <description>&lt;p&gt;Awesome Typst Links&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/README.md&quot; hreflang=&quot;en&quot; lang=&quot;en&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/README_ZH.md&quot; hreflang=&quot;zh&quot; lang=&quot;zh&quot;&gt;简体中文&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Awesome Typst&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus/awesome#readme&quot;&gt;&lt;img src=&quot;https://awesome.re/badge.svg?sanitize=true&quot; alt=&quot;Awesome&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Curated collection of useful links for &lt;a href=&quot;https://github.com/typst/typst&quot;&gt;Typst&lt;/a&gt; users.&lt;/p&gt; 
&lt;p&gt;PRs welcomed!&lt;/p&gt; 
&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#official-project-links&quot;&gt;Official Project Links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#unofficial-project-links&quot;&gt;Unofficial Project Links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#integrations--tools&quot;&gt;Integrations &amp;amp; Tools&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#browser-extensions&quot;&gt;Browser Extensions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#chatbots&quot;&gt;Chatbots&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cicd&quot;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cli-tools&quot;&gt;CLI Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#editors&quot;&gt;Editors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#editor-integrations&quot;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#online-tools&quot;&gt;Online Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#programming&quot;&gt;Programming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#typst-as-a-service&quot;&gt;Typst As A Service&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#templates--libraries&quot;&gt;Templates &amp;amp; Libraries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#official&quot;&gt;Official&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#general&quot;&gt;General&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#assignments&quot;&gt;Assignments&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cv&quot;&gt;CV&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#templates&quot;&gt;Templates&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#calendar--timetable&quot;&gt;Calendar / Timetable&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#footnotes--endnotes&quot;&gt;Footnotes &amp;amp; Endnotes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#graphics&quot;&gt;Graphics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#letters&quot;&gt;Letters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#linguistics&quot;&gt;Linguistics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#mathematics&quot;&gt;Mathematics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#music&quot;&gt;Music&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#physics&quot;&gt;Physics&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#conferences&quot;&gt;Conferences&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#journals&quot;&gt;Journals&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#grantsproposals&quot;&gt;Grants/Proposals&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#engineering&quot;&gt;Engineering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#plotting&quot;&gt;Plotting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#posters&quot;&gt;Posters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#scripting&quot;&gt;Scripting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- markdown-toc end --&gt; 
&lt;h2&gt;Official Project Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app&quot;&gt;typst.app&lt;/a&gt; - The Typst web app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app/docs&quot;&gt;Typst Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst/typst&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app/blog/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Social - &lt;a href=&quot;https://discord.com/invite/2uDybryKPe&quot;&gt;Discord&lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/typstapp/&quot;&gt;Instagram&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/company/typst/&quot;&gt;LinkedIn&lt;/a&gt; &lt;a href=&quot;https://mastodon.social/@typst&quot;&gt;Mastodon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/typstapp/&quot;&gt;X&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Unofficial Project Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/typst_ru&quot;&gt;Typst-telegram-russian-chat&lt;/a&gt; - chat about Typst in Telegram in russian&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://matrix.to/#/%23typst:matrix.org&quot;&gt;#typst:matrix.org&lt;/a&gt; - matrix room for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sitandr.github.io/typst-examples-book/book/&quot;&gt;Typst Examples Book&lt;/a&gt; - An online book with Typst snippets, including extended tutorial and useful hacks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integrations &amp;amp; Tools&lt;/h2&gt; 
&lt;h3&gt;Browser Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(FireFox) &lt;a href=&quot;https://github.com/MordragT/bib_kit&quot;&gt;bib-kit&lt;/a&gt; - Retrieve website information to create citations in the hayagriva format&lt;/li&gt; 
 &lt;li&gt;(FireFox) &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/yank/&quot;&gt;yank&lt;/a&gt; - Yank URL and title of current tab, format to a chosen markup language, and copy to clipboard (supports typst link format)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Chatbots&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mattfbacon/typst-bot&quot;&gt;typst-bot&lt;/a&gt; - A discord bot to render Typst code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/ru_rend_bot&quot;&gt;typst-bot-telegram&lt;/a&gt; - A telegram bot to render Typst code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-telegram-bot&quot;&gt;typst-telegram-bot&lt;/a&gt; - A &lt;a href=&quot;https://t.me/TypstBot&quot;&gt;telegram bot&lt;/a&gt; with focus in rendering math expression in Typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CI/CD&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/IvanSanchez/gitlab-ci-typst&quot;&gt;gitlab-ci-typst&lt;/a&gt; - Build Typst documents using GitLab CI pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst-community/setup-typst&quot;&gt;setup-typst&lt;/a&gt; - 📑 Install Typst for use in GitHub Actions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/typst-action&quot;&gt;typst-action&lt;/a&gt; - Build Typst documents using GitHub actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CLI Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Enter-tainer/typstyle&quot;&gt;typstyle&lt;/a&gt; - Opinionated typst code formatter focusing on aesthetic, convergence and correctness.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ItsEthra/typst-live&quot;&gt;typst-live&lt;/a&gt; - Hot reloading of pdf in web browser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/typst-pandoc&quot;&gt;typst-pandoc&lt;/a&gt; - Typst custom reader and writer for Pandoc&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst-community/utpm&quot;&gt;utpm&lt;/a&gt; - &lt;em&gt;Package manager&lt;/em&gt; for &lt;strong&gt;&lt;a href=&quot;https://github.com/typst/packages#local-packages&quot;&gt;local&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/typst/packages&quot;&gt;remote&lt;/a&gt;&lt;/strong&gt; Typst packages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mkpoli/tyler&quot;&gt;Tyler&lt;/a&gt; - Package compiler for the ease of packaging and publishing Typst libraries and templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/textlint/textlint-plugin-typst&quot;&gt;textlint-plugin-typst&lt;/a&gt; - &lt;a href=&quot;https://textlint.github.io/&quot;&gt;textlint&lt;/a&gt; plugin to lint Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Editors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Cubxity/typstudio&quot;&gt;typstudio&lt;/a&gt; - An in development desktop editor built using Tauri.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IgKh/katvan&quot;&gt;Katvan&lt;/a&gt; - A bare-bones editor for Typst files, with a bias for Right-to-Left editing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bzero/typstwriter&quot;&gt;Typstwriter&lt;/a&gt; - An integrated desktop editor for typst projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/soupslurpr/BeauTyXT&quot;&gt;BeauTyXT&lt;/a&gt; - A private, secure, minimalistic Text, Markdown, and Typst editor for Android&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Academic-ID/sapienAI&quot;&gt;AcademicID&lt;/a&gt; - A self-hosted academic-focused AI chatbot and research workspace with a Typst, Markdown, and Text editor.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Editor Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/tree-sitter-typst&quot;&gt;SeniorMars/tree-sitter-typst&lt;/a&gt; - A TreeSitter parser for the Typst File Format&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=myriad-dreamin.tinymist&quot;&gt;Tinymist VS Code Extension&lt;/a&gt; - A vscode extension for Tinymist integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Myriad-Dreamin/tinymist&quot;&gt;Tinymist&lt;/a&gt; - A language server for typst with integrations for Emacs, Helix, NeoVim, Sublime Text, VsCode/VsCodium, and Zed&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/vscode-typst-sync&quot;&gt;Typst Sync&lt;/a&gt; - A vscode extension for Typst local packages management and synchronization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/frozolotl/tree-sitter-typst&quot;&gt;frozolotl/tree-sitter-typst&lt;/a&gt; - A tree-sitter grammar with a focus on correctness.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/herlev/inktyp&quot;&gt;inktyp&lt;/a&gt; - An Inkscape plugin to insert and edit Typst equations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/obsidian-typst&quot;&gt;obsidian-typst&lt;/a&gt; - Renders typst code blocks in Obsidian into images using Typst through the power of WASM!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/remimimimimi/org-typst-preview.el&quot;&gt;org-typst-preview&lt;/a&gt; - Typst preview in org-mode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arne314/typstar&quot;&gt;typstar&lt;/a&gt; - Neovim plugin providing autosnippets, excalidraw integration and [standalone] Anki flashcard export&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MrPicklePinosaur/typst-conceal.vim&quot;&gt;typst-conceal.vim&lt;/a&gt; - Vim/Nvim plugin for replacing long typst symbol names with unicode characters&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=surv.typst-math&quot;&gt;typst-math&lt;/a&gt; - A VS Code extension to simplify math writing in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/vscode-typst-sympy-calculator&quot;&gt;typst-sympy-calculator&lt;/a&gt; - VS Code extension for Typst math calculating, includes Arithmetic, Calculus, Matrix, Custom Variances and Functions by yourself&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~meow_king/typst-ts-mode&quot;&gt;typst-ts-mode&lt;/a&gt; - Typst tree sitter major mode for Emacs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/typst.nvim&quot;&gt;typst.nvim&lt;/a&gt; - WIP. Goals: Treesitter highlighting, snippets, and a smooth integration with neovim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kaarmu/typst.vim&quot;&gt;typst.vim&lt;/a&gt; - Vim plugin for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typstd&quot;&gt;typstd&lt;/a&gt; - Yet another Typst language server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/uben0/tree-sitter-typst&quot;&gt;uben0/tree-sitter-typst&lt;/a&gt; - A TreeSitter grammar for the Typst language, used by Helix&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Online Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/QuarticCat/detypify&quot;&gt;Detypify&lt;/a&gt; - Typst symbol classifier&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hongjr03/excel-to-typst&quot;&gt;excel-to-typst&lt;/a&gt; - A tool that convert Excel tables to Typst table, can work in uploading .xlsx file or pasting.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Programming&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lucifer1004/leetcode.typ&quot;&gt;leetcode.typ&lt;/a&gt; - Solving Leetcode problems in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/loqusion/typix&quot;&gt;Typix&lt;/a&gt; - Deterministic Typst compilation with Nix&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/messense/typst-py&quot;&gt;typst-py&lt;/a&gt; - Python binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/actsasflinn/typst-rb&quot;&gt;typst-rb&lt;/a&gt; - Ruby binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Myriad-Dreamin/typst.ts&quot;&gt;typst.ts&lt;/a&gt; - JavaScript binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jakobjpeters/Typstry.jl&quot;&gt;Typstry.jl&lt;/a&gt; - The Julia to Typst interface&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/mpl-typst&quot;&gt;mpl-typst&lt;/a&gt; - A Typst backend for Matplotlib.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Typst As A Service&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/slashformotion/typst-http-api&quot;&gt;typst-http-api&lt;/a&gt; - An simple docker containing an API to compile typst markup&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-telegram-bot&quot;&gt;typst-telegram-bot&lt;/a&gt; - A plain and simple HTTP API for rendering math with Typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Templates &amp;amp; Libraries&lt;/h2&gt; 
&lt;h3&gt;Official&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst/templates&quot;&gt;typst/templates&lt;/a&gt; - The templates that ship with the Typst web app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;General&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onefact/datathinking.org-report-template&quot;&gt;Data Thinking Report Template&lt;/a&gt; - a template for artificial intelligence whitepapers with collaborative bibliographies using Zotero&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mst2k/HSOS-PTP-Typst-Template&quot;&gt;HSOS-PTP-Typst-Template&lt;/a&gt; - A German template for writing papers, overfitted for the Osnabrück University of Applied Scien&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SkytAsul/INSA-Typst-Template&quot;&gt;INSA Typst Template&lt;/a&gt; - A template for INSA (Institut National des Sciences Appliquées), a french public engineering school.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LaPreprint/typst&quot;&gt;LaPreprint&lt;/a&gt; - Beautiful preprints for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-mantys&quot;&gt;Mantys&lt;/a&gt; - A template for writing manuals for Typst packages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aurghya-0/Project-Report-Typst&quot;&gt;Project-Report-Typst&lt;/a&gt; - A simple template for college or university level project report.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jinhao-huang/SimplePaper&quot;&gt;SimplePaper&lt;/a&gt; - A Chinese template for writing simple paper&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jxpeng98/Typst-Paper-Template&quot;&gt;Typst-Paper-Template&lt;/a&gt; - Typst template for Working Paper&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/waterlubber/aiaa-typst-template&quot;&gt;aiaa-typst-template&lt;/a&gt; - A template for AIAA (American Institute of Aeronautics and Astronautics) papers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hzkonor/bubble-template&quot;&gt;bubble-template&lt;/a&gt; - A simple and colorful template for reports&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/coco33920/typst-association-statuts&quot;&gt;french-association-status&lt;/a&gt; - A Template to write status for french associations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RolfBremer/gloss-awe&quot;&gt;gloss-awe&lt;/a&gt; - Automatically Generated Glossary Page (renamed from typst-glossary)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RolfBremer/in-dexter&quot;&gt;in-dexter&lt;/a&gt; - Automatically Generated Index Page (renamed from typst-index)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/mcm-icm-typst-template&quot;&gt;mcm-icm-typst-template&lt;/a&gt; - A template for Mathematical Contest in Modeling (MCM) and the Interdisciplinary Contest in Modeling(ICM).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zagoli/simple-typst-thesis&quot;&gt;simple-typst-thesis&lt;/a&gt; - A template useful for writing simple thesis in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ls1intum/thesis-template-typst&quot;&gt;thesis-template-typst&lt;/a&gt; - Technical University of Munich thesis Template with cover, titlepage, tables, figures, appendix, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fredguth/tufte-typst&quot;&gt;tufte-typst&lt;/a&gt; - A Tufte-inspired template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nogula/tufte-memo&quot;&gt;tufte-memo&lt;/a&gt; - A memo document template inspired by the design of Edward Tufte&#39;s books.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lkndl/typst-bioinfo-thesis&quot;&gt;typst-bioinfo-thesis&lt;/a&gt; - Flexible section headers and page numbers; pretty outlines and a &lt;code&gt;wrapfig&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/erictapen/typst-invoice&quot;&gt;typst-invoice&lt;/a&gt; - Generate invoices from TOML files&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wychwitch/typst-mla9-template&quot;&gt;typst-mla9-template&lt;/a&gt; - An MLA 9th edition template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/flavio20002/typst-orange-template&quot;&gt;typst-orange-template&lt;/a&gt; - A Typst book template inspired by The Legrand Orange Book&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kaarmu/splash&quot;&gt;typst-palettes&lt;/a&gt; - A library of color palettes for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-templates&quot;&gt;typst-templates&lt;/a&gt; - A templates collection for major venues in machine learning and AI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eigenein/typst-templates&quot;&gt;typst-templates&lt;/a&gt; - Templates for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/haxibami/haxipst&quot;&gt;typst-templates&lt;/a&gt; - My typst templates&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yangwenbo99/typst-uwthesis&quot;&gt;typst-uwthesis&lt;/a&gt; - A typst template for writing thesis, featuring a working abbreviation lists.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qjcg/typstry&quot;&gt;typstry&lt;/a&gt; - A Tapestry of Typst Templates &amp;amp; Examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LLBlumire/writable-gm-screen-inserts&quot;&gt;writable-gm-screen-inserts&lt;/a&gt; - Writable Game Master Screen Insertsces&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Assignments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/diquah/OpenBoard&quot;&gt;OpenBoard&lt;/a&gt; - Easily build clean assessments in the style of the College Board.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/AntoniosBarotsis/typst-assignment-template&quot;&gt;assignment-template&lt;/a&gt; - A simple assignment template&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/astrale-sharp/typst-assignement-template&quot;&gt;typst-assignment-template&lt;/a&gt; - Yet another simple assignment template&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/gRox167/typst-assignment-template&quot;&gt;typst-assignment-template&lt;/a&gt; - Yet another simple assignment template with a cover and several useful math symbols.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/OriginCode/typst-homework-template&quot;&gt;typst-homework-template&lt;/a&gt; - A simple homework template inspired by the LaTeX homework template by Adam Blank&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/jomaway/typst-teacher-templates&quot;&gt;typst-teacher-template&lt;/a&gt; - A collection of typst templates. Mainly used to create worksheets and exams for my classes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/sylvanfranklin/tinyset&quot;&gt;tinyset&lt;/a&gt; - A lightweight and opinionated problem set package designed with pure math proofs in mind.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CV&lt;/h3&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/caffeinatedgaze/bare-bones-cv&quot;&gt;bare-bones-cv&lt;/a&gt; –&amp;nbsp;A single-page minimalistic CV comprising essentials only.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jskherman/imprecv&quot;&gt;cv.typ&lt;/a&gt; - A no-frills curriculum vitae (CV) template for Typst that uses a YAML file for data input in order to version control CV data easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyzh/chicv&quot;&gt;chicv&lt;/a&gt; - A minimal and fully-customizable CV template.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Templates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tzx/NNJR&quot;&gt;NNJR&lt;/a&gt; - A resume template inspired by &lt;code&gt;Jake&#39;s Resume&lt;/code&gt; LaTeX template. Uses Typst and YAML.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GeorgeHoneywood/alta-typst&quot;&gt;alta-typst&lt;/a&gt; - A simple Typst CV template, inspired by AltaCV by LianTze Lim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Harkunwar/attractive-typst-resume&quot;&gt;attractive-typst-resume&lt;/a&gt; - A modern looking, attractive CV/Resume template by Harkunwar Kochar&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gvariable/billryan-typst&quot;&gt;billryan-typst&lt;/a&gt; - A simple and minimalist resume template, inspired by Resume by Billryan.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mintyfrankie/brilliant-CV&quot;&gt;brilliant-CV&lt;/a&gt; - Another CV template for your job application, yet powered by Typst and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cu1ch3n/caidan&quot;&gt;caidan&lt;/a&gt; - A clean and minimal food menu template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jskherman/imprecv&quot;&gt;cv.typ&lt;/a&gt; - A no-frills curriculum vitae (CV) template using Typst and YAML to version control CV data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/olligobber/friggeri-cv&quot;&gt;friggeri-cv&lt;/a&gt; - A slightly modified version of the Friggeri CV, originally created by Adrien Friggeri in LaTeX, ported to Typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterpf/modern-typst-resume&quot;&gt;modern-cv&lt;/a&gt; - A modern resume and coverletter template based on &lt;code&gt;Awesome CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterpf/modern-typst-resume&quot;&gt;modern-typst-template&lt;/a&gt; - A modern resume/CV template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/giovanniberti/moderncv.typst&quot;&gt;moderncv.typst&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;moderncv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wusyong/resume.typ&quot;&gt;resume.typ&lt;/a&gt; - Simple and ergonomic template to generate resume and CV&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LaurenzV/simplecv&quot;&gt;simplecv&lt;/a&gt; - SimpleCV is a simple and elegant CV template written in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/typst-academic-cv&quot;&gt;typst-academic-cv&lt;/a&gt; - Typst Template for Academic CV&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cammellos/typst-blue-header-cv&quot;&gt;typst-blue-header-cv&lt;/a&gt; - Customizable Typst two-columns CV template with a top header.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ice-kylin/typst-cv-miku&quot;&gt;typst-cv-miku&lt;/a&gt; - A simple, elegant, academic style CV template for typst. Support for English and Chinese (and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jxpeng98/Typst-CV-Resume&quot;&gt;typst-cv-resume&lt;/a&gt; - A CV template with Sans font inspired by LaTeX &lt;code&gt;Deedy-Resume&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vaibhavjhawar/typst-cv-template1&quot;&gt;typst-cv-template1&lt;/a&gt; - A CV template inspired by Alessandro Plasmati&#39;s Graduate CV LaTex template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JCGoran/typst-cv-template&quot;&gt;typst-cv-template&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;Awesome CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyzh/chicv&quot;&gt;typst-cv-template&lt;/a&gt; - Chi CV Template (For Typst)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/titaneric/typst-mixed-resume&quot;&gt;typst-mixed-resume&lt;/a&gt; - A casual and elegant resume template inspired by multiple templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UntimelyCreation/typst-neat-cv&quot;&gt;typst-neat-cv&lt;/a&gt; - A Typst template for modern, minimal and elegant CVs, inspired by mintyfrankie&#39;s &lt;code&gt;Brilliant CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mizlan/typst-resume-sans&quot;&gt;typst-resume-sans&lt;/a&gt; - A sleek and unadorned sans-serif resume template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bamboovir/typst-resume-template&quot;&gt;typst-resume-template&lt;/a&gt; - Aesthetic style inspired by the Awesome-CV project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hexWars/resume&quot;&gt;typst-resume-template&lt;/a&gt; - A pretty resume template designed using typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tomowang/typst-twentysecondcv&quot;&gt;typst-twentysecondcv&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;Twenty Seconds Resume/CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daxartio/cv&quot;&gt;typst-yaml-cv&lt;/a&gt; - A simple cv template designed using typst and yaml.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/elegaanz/vercanard&quot;&gt;vercanard&lt;/a&gt; - A colorful resume template for Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Calendar / Timetable&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ludwig-austermann/typst-timetable&quot;&gt;typst-timetable&lt;/a&gt; - A template for timetables&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/extua/october&quot;&gt;october&lt;/a&gt; - A simple printable month calendar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Footnotes &amp;amp; Endnotes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tudborg/notes.typ&quot;&gt;notes.typ&lt;/a&gt; - A library for notes with deduplication and customizability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Formatting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/metro&quot;&gt;metro&lt;/a&gt; - A typst package to add typsetting to units!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rinmyo/ruby-typ&quot;&gt;ruby-typ&lt;/a&gt; - A library to add ruby text&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pablo-Gonzalez-Calderon/showybox-package&quot;&gt;showybox&lt;/a&gt; - A Typst package for creating colorful and customizable boxes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asibahi/simple-poem-typst&quot;&gt;simple-poem-typst&lt;/a&gt; - An application of the &lt;code&gt;measure&lt;/code&gt; function to set Arabic poetry.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RubixDev/syntastica-typst/&quot;&gt;syntastica-typst&lt;/a&gt; - Tree-sitter syntax highlighting for code blocks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qo/term&quot;&gt;term&lt;/a&gt; - A Typst package for creating figures that emulate terminal screenshots.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/8LWXpg/typst-ansi-render&quot;&gt;typst-ansi_render&lt;/a&gt; - A library to render text with ANSI escape sequences&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lkoehl/typst-boxes&quot;&gt;typst-boxes&lt;/a&gt; - A library to draw colorful boxes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-codelst&quot;&gt;typst-codelst&lt;/a&gt; - A Typst package to render source code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-diagbox&quot;&gt;typst-diagbox&lt;/a&gt; - A library for diagonal line dividers in Typst tables&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jomaway/typst-gentle-clues&quot;&gt;typst-gentle-clues&lt;/a&gt; - A typst package to simply add admonitions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/typst-tablem&quot;&gt;typst-tablem&lt;/a&gt; - Write markdown-like tables easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-tablex&quot;&gt;typst-tablex&lt;/a&gt; - More powerful and customizable tables in Typst!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cetz-package/cetz&quot;&gt;CeTZ&lt;/a&gt; - CeTZ (CeTZ, ein Typst Zeichenpacket) is a library for drawing with &lt;a href=&quot;https://typst.app&quot;&gt;Typst&lt;/a&gt; with an API inspired by TikZ and &lt;a href=&quot;https://processing.org/&quot;&gt;Processing&lt;/a&gt;. It comes with modules for drawing plots, graphs and charts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/typst-raytracer&quot;&gt;typst-raytracer&lt;/a&gt; - raytracer in typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Letters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Sematre/typst-letter-pro&quot;&gt;typst-letter-pro&lt;/a&gt; - DIN 5008 letter template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dvdvgt/typst-letter&quot;&gt;typst-letter&lt;/a&gt; - A typst letter template inspired by the DIN 5008 norm&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pascal-huber/typst-letter-template&quot;&gt;typst-letter-template&lt;/a&gt; - A customizable typst letter template with different presets (DIN 5008, Swiss C5)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linguistics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitea.everydayimshuflin.com/greg/typst-lepizig-glossing&quot;&gt;leipzig-gloss&lt;/a&gt; - A library that provides primitives for creating glossing rules according to Leipzig.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/imatpot/typst-ascii-ipa&quot;&gt;typst-ipa&lt;/a&gt; - 🔄 ASCII / IPA conversion for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://kianting.info/wiki/w/Tan_Kian-ting%E7%9A%84%E7%B6%AD%E5%9F%BA:Typst-dictionary-template&quot;&gt;typst-dictionary-template&lt;/a&gt; - 📕 a template for lexical dictionary/glossary in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lynn/typst-syntree&quot;&gt;typst-syntree&lt;/a&gt; - Syntax trees for typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mathematics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/giacomogallina/commute&quot;&gt;commute&lt;/a&gt; - A library for creating commutative diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/platformer/typst-algorithms&quot;&gt;typst-algorithms&lt;/a&gt; - A library for writing algorithms&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/EvanLuo42/typst-himcm-template&quot;&gt;typst-himcm-template&lt;/a&gt; - An HiMCM template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/matthiasGmayer/typst-math-template&quot;&gt;typst-math-template&lt;/a&gt; - A simple math template that allows for numbered, referenceable theorems and compilation of subfiles that use references.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/maxwell-thum/typst-pf3&quot;&gt;typst-pf3&lt;/a&gt; - A small package for creating &quot;structured proofs.&quot; Essentially a port of Leslie Lamport&#39;s &lt;a href=&quot;https://web.archive.org/web/20240419130400/https://lamport.azurewebsites.net/latex/pf2.sty&quot;&gt;&lt;code&gt;pf2.sty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sahasatvik/typst-theorems&quot;&gt;typst-theorems&lt;/a&gt; - A library for creating numbered theorem environments&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johanvx/typst-undergradmath&quot;&gt;typst-undergradmath&lt;/a&gt; - A Typst port of &lt;a href=&quot;https://gitlab.com/jim.hefferon/undergradmath&quot;&gt;undergradmath&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Music&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sitandr/conchord&quot;&gt;conchord&lt;/a&gt; - Typst package to easily write lyrics with chords and generate colorful fretboard diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ljgago/typst-chords&quot;&gt;typst-chords&lt;/a&gt; - A library to write song lyrics with chord diagrams in Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Physics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Leedehai/typst-physics&quot;&gt;physica&lt;/a&gt; - A library for usual physics notations, e.g. vectors and vector fields, matrices, differentials, derivatives, Dirac brackets, tensors, isotopes, and digital signal sequences.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Conferences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isaacew/aiaa-typst&quot;&gt;aiaa-typst&lt;/a&gt; - A template for creating conference papers in the style of the American Institute of Aeronautics and Astronautics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/ieee-conference-typst-template&quot;&gt;ieee-conference-typst-template&lt;/a&gt; A template to write IEEE Conference in Typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bsp0109/ieee-typst-template&quot;&gt;ieee-typst-template&lt;/a&gt; - A template to write IEEE Papers in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/avonmoll/ifacconf-typst&quot;&gt;ifacconf-typst&lt;/a&gt; - A template for creating conference papers in the style of the International Federation of Automatic Control&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Journals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/p4perf4ce/typst-ieee-trans-template&quot;&gt;ieee-trans-typst&lt;/a&gt; - A template that mimic LaTeX IEEE Transaction template (&lt;code&gt;ieee-trans.cls&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Grants/Proposals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ntjess/typst-nsf-templates&quot;&gt;typst-nsf-templates&lt;/a&gt; - National Science Foundation (NSF) general template and outlines for popular proposal types.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Engineering&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/cirCeTZ&quot;&gt;circuitypst&lt;/a&gt; - A library for drawing electronic circuit schematics&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jomaway/typst-bytefield&quot;&gt;typst-bytefield&lt;/a&gt; - A library for drawing (network) protocol headers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/oldrev/tids&quot;&gt;tids&lt;/a&gt; - A TI-style datasheet template for electronic component&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Plotting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/giacomogallina/commute&quot;&gt;typst-cd&lt;/a&gt; - Proof of Concept for tikz-like commutative diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johannes-wolf/typst-plot&quot;&gt;typst-plot&lt;/a&gt; - A library for plotting line charts (deprecated in favor of CeTZ)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pegacraft/typst-plotting&quot;&gt;typst-plotting&lt;/a&gt; - A library for drawing a variety of charts and plots like line charts, histograms, and pie charts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Posters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pncnmnp/typst-poster&quot;&gt;typst-poster&lt;/a&gt; - An academic poster template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jonaspleyer/peace-of-posters&quot;&gt;peace-of-posters&lt;/a&gt; - A package for creating academic posters in block style&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scripting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-oxifmt&quot;&gt;typst-oxifmt&lt;/a&gt; - Convenient Rust-like string formatting in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-tools4typst&quot;&gt;typst-tools4typst&lt;/a&gt; - Tools for package and template authors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Slides&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/diapo&quot;&gt;diapo&lt;/a&gt; - A minimal and simplistic presentation template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andreasKroepelin/polylux&quot;&gt;polylux&lt;/a&gt; - Create presentation slides in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marcothms/clean-polylux-typst&quot;&gt;clean-polylux-typst&lt;/a&gt; - A clean and dynamic polylux presentation slide template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/typst-pinit&quot;&gt;pinit&lt;/a&gt; - Pin things as you like, especially useful for creating slides in typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/touying-typ/touying&quot;&gt;touying&lt;/a&gt; - A powerful package for creating presentation slides in Typst&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>mhayashi1120/Emacs-wgrep</title>
      <link>https://github.com/mhayashi1120/Emacs-wgrep</link>
      <description>&lt;p&gt;Writable grep buffer and apply the changes to files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wgrep.el&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/mhayashi1120/Emacs-wgrep/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/mhayashi1120/Emacs-wgrep/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Summary:&lt;/h2&gt; 
&lt;p&gt;wgrep allows you to edit a grep buffer and apply those changes to the file buffer like &lt;code&gt;sed&lt;/code&gt; interactively. No need to learn sed script, just learn Emacs.&lt;/p&gt; 
&lt;h2&gt;Install:&lt;/h2&gt; 
&lt;p&gt;Put this file into load-path&#39;ed directory, and byte compile it if desired. And put the following expression into your ~/.emacs.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(require &#39;wgrep)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage:&lt;/h2&gt; 
&lt;p&gt;You can edit the text in the &lt;em&gt;grep&lt;/em&gt; buffer after typing &lt;code&gt;C-c C-p&lt;/code&gt; . After that the changed text is highlighted. The following keybindings are defined:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-e&lt;/code&gt;: Apply the changes to file buffers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-u&lt;/code&gt;: All changes are unmarked and ignored.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-d&lt;/code&gt;: Mark as delete to current line (including newline).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-r&lt;/code&gt;: Remove the changes in the region (these changes are not applied to the files. Of course, the remaining changes can still be applied to the files.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: Toggle read-only area.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-k&lt;/code&gt;: Discard all changes and exit.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-x C-q&lt;/code&gt;: Exit wgrep mode.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To save all buffers that wgrep has changed, run&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;M-x wgrep-save-all-buffers
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;To save buffer automatically when &lt;code&gt;wgrep-finish-edit&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;(setq wgrep-auto-save-buffer t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can change the default key binding to switch to wgrep.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;(setq wgrep-enable-key &quot;r&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;To apply all changes regardless of whether or not buffer is read-only.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;(setq wgrep-change-readonly-file t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Trivial features:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;wdired.el like interface.&lt;/li&gt; 
 &lt;li&gt;Support GNU grep &lt;code&gt;--context&lt;/code&gt; (&lt;code&gt;-A&lt;/code&gt; &lt;code&gt;-B&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt;) option.&lt;/li&gt; 
 &lt;li&gt;Can handle too many files.&lt;/li&gt; 
 &lt;li&gt;Can handle newline insertion in &lt;em&gt;grep&lt;/em&gt; buffer.&lt;/li&gt; 
 &lt;li&gt;Delete whole line include newline.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Similar software:&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/sed/&quot;&gt;GNU sed&lt;/a&gt; &lt;a href=&quot;https://github.com/syohex/emacs-helm-ag&quot;&gt;helm-ag&lt;/a&gt; has a similar feature.&lt;/p&gt; 
&lt;h2&gt;History:&lt;/h2&gt; 
&lt;p&gt;This program was forked from Matsushita Akihisa&#39;s &lt;a href=&quot;http://www.bookshelf.jp/elc/grep-edit.el&quot;&gt;grep-edit.el v2.11&lt;/a&gt;. As this website is now inaccessible, &lt;a href=&quot;https://www.emacswiki.org/emacs/grep-edit.el&quot;&gt;emacswiki.org&#39;s&lt;/a&gt; copy may be consulted.&lt;/p&gt; 
&lt;p&gt;Imported version can be downloaded from this orphan commit: &lt;a href=&quot;https://github.com/mhayashi1120/Emacs-wgrep/tree/import-original-author/&quot;&gt;https://github.com/mhayashi1120/Emacs-wgrep/tree/import-original-author/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Following added implementations and differences.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support GNU grep context option -A -B and -C&lt;/li&gt; 
 &lt;li&gt;Some bugfix. (wrong coloring text etc..)&lt;/li&gt; 
 &lt;li&gt;wdired.el like interface.&lt;/li&gt; 
 &lt;li&gt;Remove all advice.&lt;/li&gt; 
 &lt;li&gt;Bind to local variables. (grep-a-lot.el works well)&lt;/li&gt; 
 &lt;li&gt;After save buffer, colored face will be removed.&lt;/li&gt; 
 &lt;li&gt;Change face easy to see.&lt;/li&gt; 
 &lt;li&gt;Reinforce checking error.&lt;/li&gt; 
 &lt;li&gt;Support removing whole line include new-line.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>emacsattic/helm-swoop</title>
      <link>https://github.com/emacsattic/helm-swoop</link>
      <description>&lt;p&gt;Efficiently hopping squeezed lines powered by Emacs helm interface&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://melpa.org/#/helm-swoop&quot;&gt;&lt;img src=&quot;http://melpa.org/packages/helm-swoop-badge.svg?sanitize=true&quot; alt=&quot;melpa badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://stable.melpa.org/#/helm-swoop&quot;&gt;&lt;img src=&quot;http://stable.melpa.org/packages/helm-swoop-badge.svg?sanitize=true&quot; alt=&quot;melpa stable badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/emacsorphanage/helm-swoop/actions&quot;&gt;&lt;img src=&quot;https://github.com/emacsorphanage/helm-swoop/workflows/Main%20workflow/badge.svg?sanitize=true&quot; alt=&quot;github actions badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;List match lines to another buffer, which is able to squeeze by any words you input. At the same time, the original buffer&#39;s cursor is jumping line to line according to moving up and down the line list.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop.gif&quot; alt=&quot;helm-swoop&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Feature&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Culling all lines in buffer with your input&lt;/li&gt; 
 &lt;li&gt;Highlight multiple matched pattern&lt;/li&gt; 
 &lt;li&gt;Jumping line to line according to list buffer&#39;s move&lt;/li&gt; 
 &lt;li&gt;Cache result until modifies the buffer&lt;/li&gt; 
 &lt;li&gt;Go back to the last line&lt;/li&gt; 
 &lt;li&gt;Multi separated line culling&lt;/li&gt; 
 &lt;li&gt;Culling lines are editable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;h4&gt;Now helm-swoop has several ways.&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-swoop&lt;/code&gt; when region active&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-swoop&lt;/code&gt; when the cursor is at any symbol&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-swoop&lt;/code&gt; when the cursor is not at any symbol&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-3 M-x helm-swoop&lt;/code&gt; or &lt;code&gt;C-u 5 M-x helm-swoop&lt;/code&gt; multi separated line culling&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-multi-swoop&lt;/code&gt; multi-occur like feature&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-multi-swoop-all&lt;/code&gt; apply all buffers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;C-u M-x helm-multi-swoop&lt;/code&gt; apply last selected buffers from the second time&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-multi-swoop-org&lt;/code&gt; apply to all org-mode buffers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-multi-swoop-current-mode&lt;/code&gt; apply to all buffers with the same major-mode as the current buffer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-multi-swoop-projectile&lt;/code&gt; Apply to all opened buffers of the current project&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x helm-swoop-same-face-at-point&lt;/code&gt; list lines have the same face at the cursor is on&lt;/li&gt; 
 &lt;li&gt;During isearch &lt;code&gt;M-i&lt;/code&gt; to hand the word over to helm-swoop&lt;/li&gt; 
 &lt;li&gt;During helm-swoop &lt;code&gt;M-i&lt;/code&gt; to hand the word over to helm-multi-swoop-all&lt;/li&gt; 
 &lt;li&gt;While doing &lt;code&gt;helm-swoop&lt;/code&gt; press &lt;code&gt;C-c C-e&lt;/code&gt; to edit mode, apply changes to original buffer by &lt;code&gt;C-x C-s&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It&#39;s able to use words within a region or a word at symbol as search query when it called. Also use a keybind you set just type like M-i instead of &lt;code&gt;M-x helm-swoop&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Edit mode&lt;/h4&gt; 
&lt;p&gt;While doing &lt;code&gt;helm-swoop&lt;/code&gt; type &lt;code&gt;C-c C-e&lt;/code&gt; to enter the edit mode. Before enter the edit mode, you can choose some lines marked by &lt;code&gt;C-SPC&lt;/code&gt; or &lt;code&gt;M-SPC&lt;/code&gt; to edit. Apply changes to original buffer type &lt;code&gt;C-x C-s&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Across multiple buffers&lt;/h4&gt; 
&lt;h5&gt;&lt;code&gt;M-x helm-multi-swoop&lt;/code&gt;&lt;/h5&gt; 
&lt;ol&gt; 
 &lt;li&gt;Select any buffers by [C-SPC] or [M-SPC]&lt;/li&gt; 
 &lt;li&gt;Press [RET] to start helm-multi-swoop&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-multi-swoop.gif&quot; alt=&quot;helm-multi-swoop&quot; /&gt;&lt;/p&gt; 
&lt;h5&gt;&lt;code&gt;M-x helm-multi-swoop-all&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;Skip select phase and apply all buffers.&lt;/p&gt; 
&lt;h5&gt;&lt;code&gt;C-u M-x helm-multi-swoop&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;Skip select phase and apply last selected buffers, if you have done helm-multi-swoop before.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;M-x helm-multi-swoop-org&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Skip the select phase and apply to all org-mode buffers&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;M-x helm-multi-swoop-current-mode&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Skip the select phase and apply to all buffers with the same major mode as the current buffer&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;M-x helm-multi-swoop-projectile&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Skip the select phase and apply to all opened buffers of the current project. It requires projectile to be installed. You may specify a filter that will be used for buffers by setting variable &lt;code&gt;helm-multi-swoop-projectile-buffers-filter&lt;/code&gt;. By default its value is &lt;code&gt;projectile-buffers-with-file-or-process&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Multiline behavior&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;M-4 M-x helm-swoop&lt;/code&gt; or &lt;code&gt;C-u 4 M-x helm-swoop&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop2.gif&quot; alt=&quot;helm-swoop2&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Config&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; helm from https://github.com/emacs-helm/helm
(require &#39;helm)

;; Locate the helm-swoop folder to your path
(add-to-list &#39;load-path &quot;~/.emacs.d/elisp/helm-swoop&quot;)
(require &#39;helm-swoop)

;; Change the keybinds to whatever you like :)
(global-set-key (kbd &quot;M-i&quot;) &#39;helm-swoop)
(global-set-key (kbd &quot;M-I&quot;) &#39;helm-swoop-back-to-last-point)
(global-set-key (kbd &quot;C-c M-i&quot;) &#39;helm-multi-swoop)
(global-set-key (kbd &quot;C-x M-i&quot;) &#39;helm-multi-swoop-all)

;; When doing isearch, hand the word over to helm-swoop
(define-key isearch-mode-map (kbd &quot;M-i&quot;) &#39;helm-swoop-from-isearch)
;; From helm-swoop to helm-multi-swoop-all
(define-key helm-swoop-map (kbd &quot;M-i&quot;) &#39;helm-multi-swoop-all-from-helm-swoop)
;; When doing evil-search, hand the word over to helm-swoop
;; (define-key evil-motion-state-map (kbd &quot;M-i&quot;) &#39;helm-swoop-from-evil-search)

;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
(define-key helm-swoop-map (kbd &quot;M-m&quot;) &#39;helm-multi-swoop-current-mode-from-helm-swoop)

;; Move up and down like isearch
(define-key helm-swoop-map (kbd &quot;C-r&quot;) &#39;helm-previous-line)
(define-key helm-swoop-map (kbd &quot;C-s&quot;) &#39;helm-next-line)
(define-key helm-multi-swoop-map (kbd &quot;C-r&quot;) &#39;helm-previous-line)
(define-key helm-multi-swoop-map (kbd &quot;C-s&quot;) &#39;helm-next-line)

;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)

;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows nil)

;; Split direcion. &#39;split-window-vertically or &#39;split-window-horizontally
(setq helm-swoop-split-direction &#39;split-window-vertically)

;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)

;; ;; Go to the opposite side of line from the end or beginning of line
(setq helm-swoop-move-to-line-cycle t)

;; Optional face for line numbers
;; Face name is `helm-swoop-line-number-face`
(setq helm-swoop-use-line-number-face t)

;; If you prefer fuzzy matching
(setq helm-swoop-use-fuzzy-match t)

;; If you would like to use migemo, enable helm&#39;s migemo feature
(helm-migemo-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Configure pre-input search query&lt;/h4&gt; 
&lt;p&gt;By default, helm-swoop uses search query at the cursor. You can configure this behavior by setting &lt;code&gt;helm-swoop-pre-input-function&lt;/code&gt; on your own.&lt;/p&gt; 
&lt;p&gt;i.e.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Use search query at the cursor  (default)
(setq helm-swoop-pre-input-function
      (lambda () (thing-at-point &#39;symbol)))

;; Disable pre-input
(setq helm-swoop-pre-input-function
      (lambda () &quot;&quot;))
;; Or, just use M-x helm-swoop-without-pre-input

;; Match only for symbol
(setq helm-swoop-pre-input-function
      (lambda () (format &quot;\\_&amp;lt;%s\\_&amp;gt; &quot; (thing-at-point &#39;symbol))))

;; Always use the previous search for helm. Remember C-&amp;lt;backspace&amp;gt; will delete entire line
(setq helm-swoop-pre-input-function
      (lambda () (if (boundp &#39;helm-swoop-pattern)
                     helm-swoop-pattern &quot;&quot;)))

;; If there is no symbol at the cursor, use the last used words instead.
(setq helm-swoop-pre-input-function
      (lambda ()
        (let (($pre-input (thing-at-point &#39;symbol)))
          (if (eq (length $pre-input) 0)
              helm-swoop-pattern ;; this variable keeps the last used words
            $pre-input))))

;; If a symbol or phrase is selected, use it as the initial query.
(setq helm-swoop-pre-input-function
      (lambda ()
        (if mark-active
            (buffer-substring-no-properties (mark) (point))
          &quot;&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Require&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm.el&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;We welcome PR!&lt;/p&gt; 
&lt;h4&gt;Require tools for testing&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;cask 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;install via brew&lt;/p&gt; &lt;pre&gt;&lt;code&gt;brew install cask
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;manual install&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd ~/
hub clone cask/cask
export PATH=&quot;$HOME/.cask/bin:$PATH&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;General Public License Version 3 (GPLv3) Copyright (c) Emacsorphanage - &lt;a href=&quot;https://github.com/emacsorphanage&quot;&gt;https://github.com/emacsorphanage&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.html&quot;&gt;https://www.gnu.org/licenses/gpl-3.0.html&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>magit/magit</title>
      <link>https://github.com/magit/magit</link>
      <description>&lt;p&gt;It&#39;s Magit! A Git Porcelain inside Emacs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;https://magit.vc/assets/magit-168x200px.png&quot; /&gt;
&lt;/div&gt; 
&lt;h2 align=&quot;center&quot;&gt;A Git Porcelain inside Emacs&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://magit.vc&quot;&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://magit.vc/manual&quot;&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://magit.vc/manual/magit/FAQ.html&quot;&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/magit/magit/wiki&quot;&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://emacs.ch/@tarsius&quot;&gt;&lt;b&gt;mastodon&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align=&quot;justify&quot;&gt; Magit is an interface to the version control system &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt;, implemented as an &lt;a href=&quot;https://www.gnu.org/software/emacs&quot;&gt;Emacs&lt;/a&gt; package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. &lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align=&quot;center&quot;&gt;
  Keeping its users 
 &lt;a href=&quot;https://magit.vc/quotes/&quot;&gt;this excited&lt;/a&gt; is 
 &lt;a href=&quot;https://magit.vc/stats/magit/authors.html#cumulated_added_lines_of_code_per_author&quot;&gt; a lot of work &lt;/a&gt;. If Magit makes you 
 &lt;br /&gt; more productive too, then 
 &lt;b&gt;please consider making a donation&lt;/b&gt;. 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/sponsors/tarsius/&quot;&gt; &lt;img title=&quot;Sponsor my work using Github Sponsors&quot; alt=&quot;Sponsor my work using Github Sponsors&quot; src=&quot;https://magit.vc/assets/donate/github-sponsors-50px.png&quot; /&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; 
 &lt;a href=&quot;https://liberapay.com/magit/&quot;&gt; &lt;img title=&quot;Sponsor my work using Liberapay&quot; alt=&quot;Sponsor my work using Liberapay&quot; src=&quot;https://magit.vc/assets/donate/liberapay-50px.png&quot; /&gt;&lt;/a&gt; 
 &lt;br /&gt; 
 &lt;a href=&quot;https://opencollective.com/magit/&quot;&gt; &lt;img title=&quot;Sponsor my work using Opencollective&quot; alt=&quot;Sponsor my work using Opencollective&quot; src=&quot;https://magit.vc/assets/donate/opencollective-50px.png&quot; /&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; 
 &lt;a href=&quot;https://magit.vc/donate/paypal.html&quot;&gt; &lt;img title=&quot;Sponsor my work using PayPal&quot; alt=&quot;Sponsor my work using PayPal&quot; src=&quot;https://magit.vc/assets/donate/paypal-50px.png&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align=&quot;center&quot;&gt;
  Some alternative donation methods are 
 &lt;a href=&quot;https://magit.vc/donate/&quot;&gt;available&lt;/a&gt;. 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;If you are new to Magit, then either one of the following two articles should help understanding how it differs from other Git clients.&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://emacsair.me/2017/09/01/magit-walk-through&quot;&gt;Visual Magit walk-through&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;If you are completely new to Magit, then this article is a good visual introduction.&lt;/p&gt; 
&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing some key, but that&#39;s not obvious from just seeing how Magit looks. The screenshots and accompanying text of this article explain how to perform a variety of actions on Magit&#39;s output.&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://emacsair.me/2017/09/01/the-magical-git-interface&quot;&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Magit differs significantly from other Git interfaces, and its advantages are not immediately obvious simply from looking at a few screenshots as presented in the preceding article.&lt;/p&gt; 
&lt;p&gt;This article discusses Magit&#39;s properties in somewhat more abstract terms.&lt;/p&gt; 
&lt;h4&gt;Video introductions&lt;/h4&gt; 
&lt;p&gt;If you prefer &lt;a href=&quot;https://magit.vc/screencasts/&quot;&gt;video&lt;/a&gt; introductions, head over to that page, where find a collection of such introductions and other videos about Magit, by various creators.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Support and Contributing&lt;/h3&gt; 
&lt;p&gt;Magit has many users and very few maintainers, so we kindly ask to read the appropriate guidelines before getting in contact. — Thanks!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🆘 &lt;a href=&quot;https://github.com/magit/magit/discussions/4630&quot;&gt;How to ask for help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🪳 &lt;a href=&quot;https://github.com/magit/magit/wiki/How-to-report-a-bug&quot;&gt;How to report a bug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💡 &lt;a href=&quot;https://github.com/magit/magit/discussions/4631&quot;&gt;How to suggest a feature&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🏗️ &lt;a href=&quot;https://github.com/magit/magit/wiki/Pull-request-guidelines&quot;&gt;Pull request guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ℹ️ &lt;a href=&quot;https://magit.vc/manual/magit/FAQ.html&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ℹ️ &lt;a href=&quot;https://magit.vc/manual/magit&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;TL;DR We now use discussions for feature requests (not issues) and prefer if you ask the community for support instead of the overworked maintainers.&lt;/p&gt; 
&lt;p&gt;Please also consider to contribute by supporting other users or by making a &lt;a href=&quot;https://magit.vc/donate&quot;&gt;monetary donation&lt;/a&gt;. — Thanks!&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Acknowledgments&lt;/h3&gt; 
&lt;p&gt;Magit was started by &lt;a href=&quot;https://github.com/mvollmer&quot;&gt;Marius Vollmer&lt;/a&gt;, and is now maintained by &lt;a href=&quot;https://emacsair.me&quot;&gt;Jonas Bernoulli&lt;/a&gt; and &lt;a href=&quot;https://kyleam.com&quot;&gt;Kyle Meyer&lt;/a&gt;. Former maintainers are &lt;a href=&quot;http://dudebout.com&quot;&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href=&quot;https://github.com/npostavs&quot;&gt;Noam Postavsky&lt;/a&gt;, &lt;a href=&quot;https://github.com/pjweisberg&quot;&gt;Peter J. Weisberg&lt;/a&gt;, &lt;a href=&quot;https://github.com/philjackson&quot;&gt;Phil Jackson&lt;/a&gt;, &lt;a href=&quot;https://github.com/vanicat&quot;&gt;Rémi Vanicat&lt;/a&gt; and &lt;a href=&quot;https://yann.hodique.info&quot;&gt;Yann Hodique&lt;/a&gt;. Many more people have &lt;a href=&quot;https://magit.vc/stats/magit/authors.html&quot;&gt;contributed code&lt;/a&gt;, suggested features or made monetary contributions.&lt;/p&gt; 
&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/magit/magit/actions/workflows/compile.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/compile.yml/badge.svg?sanitize=true&quot; alt=&quot;Compile&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/magit/magit/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/magit/magit/actions/workflows/manual.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/manual.yml/badge.svg?sanitize=true&quot; alt=&quot;Manual&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.nongnu.org/nongnu/magit.html&quot;&gt;&lt;img src=&quot;https://emacsair.me/assets/badges/nongnu-elpa.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/magit&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/magit-badge.svg?sanitize=true&quot; alt=&quot;Melpa&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/magit&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/magit-badge.svg?sanitize=true&quot; alt=&quot;Melpa Stable&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/emacs%3Amagit/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/emacs%3Amagit.svg?header=&amp;amp;columns=4&amp;amp;minversion=4&amp;amp;exclude_unsupported=1&quot; alt=&quot;Packaging status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>doomemacs/doomemacs</title>
      <link>https://github.com/doomemacs/doomemacs</link>
      <description>&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Doom Emacs&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; • &lt;a href=&quot;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&quot;&gt;Screenshots&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&quot; alt=&quot;Made with Doom Emacs&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Supports-Emacs_27.1%E2%80%9330.2-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&quot; alt=&quot;Supports Emacs 27.1–30.2&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/last-commit/doomemacs/doomemacs?style=flat-square&quot; alt=&quot;Latest commit&quot; /&gt;&lt;/p&gt; 
 &lt;!-- ![Build status: master](https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square) --&gt; 
 &lt;p&gt;&lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&quot; alt=&quot;Discord Server&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://doomemacs.org/discuss&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/doomemacs/community?label=Discussions&amp;amp;logo=github&amp;amp;style=flat-square&quot; alt=&quot;Discussions board&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&quot; alt=&quot;Doom Emacs Screenshot&quot; /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&quot;&gt;Getting help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;a href=&quot;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&quot; align=&quot;right&quot; /&gt; &lt;/a&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Doom is a configuration framework for &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; 
&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; 
 &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; 
 &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; 
 &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; 
 &lt;li&gt;A declarative &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&quot;https://github.com/radian-software/straight.el&quot;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; 
 &lt;li&gt;Optional vim emulation powered by &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&quot;https://github.com/easymotion/vim-easymotion&quot;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&quot;https://github.com/tpope/vim-unimpaired&quot;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&quot;&gt;more&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; 
 &lt;li&gt;A Spacemacs-esque &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&quot;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; 
 &lt;li&gt;A rule-based &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&quot;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; 
 &lt;li&gt;Per-file indentation style detection and &lt;a href=&quot;http://editorconfig.org/&quot;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; 
 &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; and &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;ivy&lt;/a&gt; or &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; 
 &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; 
 &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Required:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;GNU Emacs 27.1–30.2 
    &lt;ul&gt; 
     &lt;li&gt;30.2 is recommended (fastest and most stable)&lt;/li&gt; 
     &lt;li&gt;Doom&#39;s modules require &amp;gt;=28.1 
      &lt;ul&gt; 
       &lt;li&gt;Tree-sitter support requires &amp;gt;= 29.1&lt;/li&gt; 
       &lt;li&gt;JS(X)/TS(X) support is far better on &amp;gt;= 30.1 (w/ tree-sitter)&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;Doom&#39;s core requires &amp;gt;=27.1&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Git &amp;gt;= 2.23&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; &amp;gt;= 11.0&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optional, but recommended:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; 7.3.0+ (used to improve file indexing performance)&lt;/li&gt; 
   &lt;li&gt;GNU variants of &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, and &lt;code&gt;tar&lt;/code&gt; (on MacOS and BSD *nix)&lt;/li&gt; 
   &lt;li&gt;Symbola font (Emacs&#39; fallback font for glyphs it can&#39;t display)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Unstable and pre-release builds of Emacs -- which end in &lt;code&gt;.50&lt;/code&gt;, &lt;code&gt;.60&lt;/code&gt;, or &lt;code&gt;.9X&lt;/code&gt; (e.g. &lt;code&gt;28.1.91&lt;/code&gt;) -- &lt;strong&gt;are not officially supported&lt;/strong&gt;. There &lt;em&gt;is&lt;/em&gt; some effort to support Emacs HEAD, however. &lt;a href=&quot;https://discourse.doomemacs.org/t/3241&quot;&gt;Follow this Discourse post&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Doom is comprised of &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&quot;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; 
&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.config/emacs/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Roadmap&lt;/h1&gt; 
&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doomemacs.org/roadmap&quot;&gt;Development Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doomemacs.org/packages-under-review&quot;&gt;Packages under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/7&quot;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Our documentation&lt;/a&gt; covers many use cases. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&quot;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&quot;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&quot;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&quot;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&quot;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; 
   &lt;li&gt;Your issue may be documented in the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: 
  &lt;ul&gt; 
   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; or &lt;a href=&quot;https://github.com/doomemacs/community?tab=readme-ov-file#frequently-asked-questions&quot;&gt;Community FAQs&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; 
 &lt;li&gt;Search &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues&quot;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contribute&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bbatsov/emacs-lisp-style-guide&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&quot; alt=&quot;Elisp styleguide&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&quot; alt=&quot;Donate on liberapay&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/hlissner/10&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&quot; alt=&quot;Donate on paypal&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&quot;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; 
 &lt;li&gt;Don&#39;t hesitate to &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues/new/choose&quot;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;liberapay&lt;/a&gt; or &lt;a href=&quot;https://paypal.me/hlissner/10&quot;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jwiegley/emacs-async</title>
      <link>https://github.com/jwiegley/emacs-async</link>
      <description>&lt;p&gt;Simple library for asynchronous processing in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&quot; alt=&quot;License GPL 3&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.gnu.org/packages/async.html&quot;&gt;&lt;img src=&quot;https://elpa.gnu.org/packages/async.svg?sanitize=true&quot; alt=&quot;GNU ELPA&quot; title=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://melpa.org/#/async&quot;&gt;&lt;img src=&quot;http://melpa.org/packages/async-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; title=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://stable.melpa.org/#/async&quot;&gt;&lt;img src=&quot;http://stable.melpa.org/packages/async-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot; title=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;emacs-async&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;async.el&lt;/code&gt; is a module for doing asynchronous processing in Emacs. Some async applications are provided as well with this package:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Dired-async&lt;/li&gt; 
 &lt;li&gt;smtp-mail-async&lt;/li&gt; 
 &lt;li&gt;async-bytecomp&lt;/li&gt; 
 &lt;li&gt;async-package&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;p&gt;You can install emacs-async package from MELPA using package.el.&lt;/p&gt; 
&lt;p&gt;You can also install from sources, in this case you should install using make and make install to ensure emacs-async is installed in a standard load-path destination where other packages can find it easily when compiling.&lt;/p&gt; 
&lt;h2&gt;Install dired-async&lt;/h2&gt; 
&lt;p&gt;Add to your &lt;code&gt;.emacs.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(autoload &#39;dired-async-mode &quot;dired-async.el&quot; nil t)
(dired-async-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will allow you to run asynchronously the dired commands for copying, renaming and symlinking. If you are a &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt; user, this will allow you to copy, rename etc... asynchronously from &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;. Note that with &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt; you can disable this by running the copy, rename etc... commands with a prefix argument.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t want to make dired/helm asynchronous disable it with &lt;code&gt;dired-async-mode&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; 
&lt;p&gt;Users of Debian 9 or later or Ubuntu 16.04 or later may simply &lt;code&gt;apt-get install elpa-async&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Authentication and user interaction&lt;/h2&gt; 
&lt;p&gt;Some authentications require user interaction, for example answering to a prompt, entering a passwords etc. Your async implementation should avoid any such user interaction, to avoid being stuck with a prompt you will not be able to answer to in the child emacs. For all what is remote (mails, tramp etc...) you have to let emacs manage your identification with &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_mono/auth.html&quot;&gt;auth-sources&lt;/a&gt;, so that you do not have to enter a password.&lt;/p&gt; 
&lt;p&gt;Basically all you need is something like this in your init file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(use-package auth-source
  :no-require t
  :config (setq auth-sources &#39;(&quot;~/.authinfo.gpg&quot; &quot;~/.netrc&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And a &quot;~/.authinfo.gpg&quot; file containing entries such as&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;default port sudo login root password xxxxxxxx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;machine xxxxx port xxx login xxx password xxxxxxx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;for more specific hosts (smtp, mails etc...)&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_mono/auth.html&quot;&gt;auth-sources manual&lt;/a&gt; for more infos.&lt;/p&gt; 
&lt;p&gt;However, when choosing the destination with completion (e.g. helm) and you have no &quot;.authinfo&quot; file or just no entry for this host, tramp will prompt for password and offer you to save it, if you answer &#39;yes&#39; you will be able to achieve you async operation as the child Emacs will use this just created &quot;.authinfo&quot; file, if you say &#39;no&#39;, your dired-async process will hang forever because child emacs is waiting for password.&lt;/p&gt; 
&lt;p&gt;NOTE: For all your async implementations in emacs-26+ versions that handle remote files (tramp), you will have to let-bind &lt;code&gt;async-quiet-switch&lt;/code&gt; to &lt;code&gt;-q&lt;/code&gt; to workaround a tramp bug that prevent &lt;code&gt;emacs -Q&lt;/code&gt; to use &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_mono/auth.html&quot;&gt;auth-sources&lt;/a&gt; mechanism.&lt;/p&gt; 
&lt;h2&gt;Enable asynchronous compilation of your (M)elpa packages&lt;/h2&gt; 
&lt;p&gt;By default emacs package.el compile packages in its running emacs session. This is not a problem when installing a new package (which is not actually loaded in current emacs) but it may create errors and bad compilation when upgrading a package (old version of package is already loaded and running in current emacs). You can remedy to this by allowing async to compile your packages asynchronously, (helm and magit actually do this by default, so if you are using these packages they will compile asynchronously) to do this, add to your init file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(async-bytecomp-package-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can control which packages will compile async with &lt;code&gt;async-bytecomp-allowed-packages&lt;/code&gt;. Set it to &lt;code&gt;&#39;(all)&lt;/code&gt; to be sure you will compile all packages asynchronously.&lt;/p&gt; 
&lt;h2&gt;Install/upgrade packages asynchronously&lt;/h2&gt; 
&lt;p&gt;When using &lt;code&gt;async-bytecomp-package-mode&lt;/code&gt; only compilation is done async. To do all async (download and (re)install) the function &lt;code&gt;async-package-do-action&lt;/code&gt; is provided, it is used by Helm packages UI.&lt;/p&gt; 
&lt;h2&gt;Send mails asynchronously with smtp mail async&lt;/h2&gt; 
&lt;p&gt;To enable this feature, ensure smtpmail-async.el is loaded and use&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;(setq message-send-mail-function &#39;async-smtpmail-send-it)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;WARNINGS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When using recent emacs (25+) the network security manager maybe called interactively in child emacs and make &lt;code&gt;async-smtpmail-send-it&lt;/code&gt; fail, so be sure to send email once synchronously before using &lt;code&gt;async-smtpmail-send-it&lt;/code&gt; as your &lt;code&gt;message-send-mail-function&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You may loose your sent mail if your network is down, so ensure to queue your mails if so. you can do this automatically, see &lt;a href=&quot;https://github.com/jwiegley/emacs-async/issues/64&quot;&gt;issue #64&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Async usage&lt;/h1&gt; 
&lt;p&gt;The interface is intended to be very easy to use:&lt;/p&gt; 
&lt;h2&gt;async-start&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-start START-FUNC FINISH-FUNC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Execute START-FUNC (often a lambda) in a subordinate Emacs process. When done, the return value is passed to FINISH-FUNC. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-start
   ;; What to do in the child process
   (lambda ()
     (message &quot;This is a test&quot;)
     (sleep-for 3)
     222)

   ;; What to do when it finishes
   (lambda (result)
     (message &quot;Async process done, result should be 222: %s&quot; result)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If FINISH-FUNC is &lt;code&gt;nil&lt;/code&gt; or missing, a future is returned that can be inspected using &lt;code&gt;async-get&lt;/code&gt;, blocking until the value is ready. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(let ((proc (async-start
               ;; What to do in the child process
               (lambda ()
                 (message &quot;This is a test&quot;)
                 (sleep-for 3)
                 222))))

    (message &quot;I&#39;m going to do some work here&quot;) ;; ....

    (message &quot;Waiting on async process, result should be 222: %s&quot;
             (async-get proc)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you don&#39;t want to use a callback, and you don&#39;t care about any return value from the child process, pass the &lt;code&gt;&#39;ignore&lt;/code&gt; symbol as the second argument (if you don&#39;t, and never call &lt;code&gt;async-get&lt;/code&gt;, it will leave &lt;code&gt;*emacs*&lt;/code&gt; process buffers hanging around):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-start
 (lambda ()
   (delete-file &quot;a remote file on a slow link&quot; nil))
 &#39;ignore)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Even when FINISH-FUNC is present, a future is still returned except that it yields no value (since the value is passed to FINISH-FUNC). Calling &lt;code&gt;async-get&lt;/code&gt; on such a future always returns &lt;code&gt;nil&lt;/code&gt;. It can still be useful, however, as an argument to &lt;code&gt;async-ready&lt;/code&gt; or &lt;code&gt;async-wait&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;async-start-process&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-start-process NAME PROGRAM FINISH-FUNC &amp;amp;rest PROGRAM-ARGS
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start the executable PROGRAM asynchronously. See &lt;code&gt;async-start&lt;/code&gt;. PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the process object when done. If FINISH-FUNC is &lt;code&gt;nil&lt;/code&gt;, the future object will return the process object when the program is finished. Set DEFAULT-DIRECTORY to change PROGRAM&#39;s current working directory.&lt;/p&gt; 
&lt;h2&gt;async-get&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-get FUTURE
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Get the value from an asynchronously called function when it is ready. FUTURE is returned by &lt;code&gt;async-start&lt;/code&gt; or &lt;code&gt;async-start-process&lt;/code&gt; when its FINISH-FUNC is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;async-ready&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-ready FUTURE
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Query a FUTURE to see if its function&#39;s value is ready -- i.e., if no blocking would result from a call to &lt;code&gt;async-get&lt;/code&gt; on that FUTURE.&lt;/p&gt; 
&lt;h2&gt;async-wait&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-wait FUTURE
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Wait for FUTURE to become ready.&lt;/p&gt; 
&lt;h2&gt;async-inject-variables&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-inject-variables INCLUDE-REGEXP &amp;amp;optional PREDICATE EXCLUDE-REGEXP
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Return a &lt;code&gt;setq&lt;/code&gt; form that replicates part of the calling environment. It sets the value for every variable matching INCLUDE-REGEXP and also PREDICATE. It will not perform injection for any variable matching EXCLUDE-REGEXP (if present). It is intended to be used as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-start
   `(lambda ()
      (require &#39;smtpmail)
      (with-temp-buffer
        (insert ,(buffer-substring-no-properties (point-min) (point-max)))
        ;; Pass in the variable environment for smtpmail
        ,(async-inject-variables &quot;\\`\\(smtpmail\\|\\(user-\\)?mail\\)-&quot;)
        (smtpmail-send-it)))
   &#39;ignore)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;async-let&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;async-let BINDINGS &amp;amp;rest FORMS
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Allow to establish let bindings asynchronously. Each value of binding can refer to the symbols already bound in BINDINGS (like &lt;code&gt;let*&lt;/code&gt;). FORMS are executed once BINDINGS have been evaluated, but without blocking emacs.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-let ((x &quot;hello&quot;)
            (y &quot;world&quot;))
  (message &quot;%s %s&quot; x y))
  
(async-let ((x (* 5 2))
            (y (+ x 4))
            (z (+ x y)))
  (message &quot;%d + %d = %d&quot; x y z))

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that if you bind something to nil and set it afterward in body, the evaluation of this binding will NOT be asynchronous, but will happen in you current emacs, blocking it if the evaluation of this value is sufficiently important, e.g:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(async-let ((x &quot;hello&quot;)
            (y &quot;world&quot;)
            z)
  (setq z (+ 1 2)) ;; Huge calculation of Z will block emacs.
  (message &quot;%s %s %d&quot; x y z))

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;IOW if the calculation of Z is huge and you want it asynchronous evaluate it in BINDINGS but not in FORMS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>magit/transient</title>
      <link>https://github.com/magit/transient</link>
      <description>&lt;p&gt;Transient commands&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; 
 &lt;li&gt;Transient command menus&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Transient is the library used to implement the keyboard-driven “menus” in [[https://github.com/magit/magit/][Magit]]. It is distributed as a separate package, so that it can be used to implement similar menus in [[https://melpa.org/#/transient][other packages]].&lt;/p&gt; 
&lt;p&gt;** Some things that Transient can do&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Display current state of arguments&lt;/li&gt; 
 &lt;li&gt;Display and manage lifecycle of modal bindings&lt;/li&gt; 
 &lt;li&gt;Contextual user interface&lt;/li&gt; 
 &lt;li&gt;Flow control for wizard-like composition of interactive forms&lt;/li&gt; 
 &lt;li&gt;History &amp;amp; persistence&lt;/li&gt; 
 &lt;li&gt;Rendering arguments for controlling CLI programs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Complexity in CLI programs&lt;/p&gt; 
&lt;p&gt;Complexity tends to grow with time. How do you manage the complexity of commands? Consider the humble shell command =ls=. It now has over /fifty/ command line options. Some of these are boolean flags (=ls -l=). Some take arguments (=ls --sort=s=). Some have no effect unless paired with other flags (=ls -lh=). Some are mutually exclusive. Some shell commands even have so many options that they introduce /subcommands/ (=git branch=, =git commit=), each with their own rich set of options (=git branch -f=).&lt;/p&gt; 
&lt;p&gt;** Using Transient for composing interactive commands&lt;/p&gt; 
&lt;p&gt;What about Emacs commands used interactively? How do these handle options? One solution is to make many versions of the same command, so you don&#39;t need to! Consider: =delete-other-windows= vs. =delete-other-windows-vertically= (among many similar examples).&lt;/p&gt; 
&lt;p&gt;Some Emacs commands will simply prompt you for the next &quot;argument&quot; (=M-x switch-to-buffer=). Another common solution is to use prefix arguments which usually start with =C-u=. Sometimes these are sensibly numerical in nature (=C-u 4 M-x forward-paragraph= to move forward 4 paragraphs). But sometimes they function instead as boolean &quot;switches&quot; (=C-u C-SPACE= to jump to the last mark instead of just setting it, =C-u C-u C-SPACE= to unconditionally set the mark). Since there aren&#39;t many standards for the use of prefix options, you have to read the command&#39;s documentation to find out what the possibilities are.&lt;/p&gt; 
&lt;p&gt;But when an Emacs command grows to have a truly large set of options and arguments, with dependencies between them, lots of option values, etc., these simple approaches just don&#39;t scale. Transient is designed to solve this issue. Think of it as the humble prefix argument =C-u=, /raised to the power of 10/. Like =C-u=, it is key driven. Like the shell, it supports boolean &quot;flag&quot; options, options that take arguments, and even &quot;sub-commands&quot;, with their own options. But instead of searching through a man page or command documentation, well-designed transients /guide/ their users to the relevant set of options (and even their possible values!) directly, taking into account any important pre-existing Emacs settings. And while for shell commands like =ls=, there is only one way to &quot;execute&quot; (hit =Return=!), transients can &quot;execute&quot; using multiple different keys tied to one of many self-documenting /actions/ (imagine having 5 different colored return keys on your keyboard!). Transients make navigating and setting large, complex groups of command options and arguments easy. Fun even. Once you&#39;ve tried it, it&#39;s hard to go back to the =C-u what can I do here again?= way.&lt;/p&gt; 
&lt;p&gt;[[http://readme.emacsair.me/transient.png]]&lt;/p&gt; 
&lt;p&gt;#+html: &lt;br /&gt;&lt;br /&gt; #+html: &lt;a href=&quot;https://github.com/magit/transient/actions/workflows/compile.yml&quot;&gt;&lt;img alt=&quot;Compile&quot; src=&quot;https://github.com/magit/transient/actions/workflows/compile.yml/badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;https://github.com/magit/transient/actions/workflows/manual.yml&quot;&gt;&lt;img alt=&quot;Manual&quot; src=&quot;https://github.com/magit/transient/actions/workflows/manual.yml/badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;https://elpa.gnu.org/packages/transient.html&quot;&gt;&lt;img alt=&quot;GNU ELPA&quot; src=&quot;https://emacsair.me/assets/badges/gnu-elpa.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;https://stable.melpa.org/#/transient&quot;&gt;&lt;img alt=&quot;MELPA Stable&quot; src=&quot;https://stable.melpa.org/packages/transient-badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt; #+html: &lt;a href=&quot;https://melpa.org/#/transient&quot;&gt;&lt;img alt=&quot;MELPA&quot; src=&quot;https://melpa.org/packages/transient-badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>org-roam/org-roam</title>
      <link>https://github.com/org-roam/org-roam</link>
      <description>&lt;p&gt;Rudimentary Roam replica with Org-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Org-roam &lt;a href=&quot;https://github.com/org-roam/org-roam/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/org-roam/org-roam&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/org-roam&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/org-roam-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&quot; alt=&quot;License GPL 3&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;img src=&quot;https://www.orgroam.com/img/logo.svg?sanitize=true&quot; align=&quot;right&quot; alt=&quot;Org-roam Logo&quot; width=&quot;240&quot; /&gt; 
&lt;p&gt;Org-roam is a plain-text knowledge management system. It brings some of &lt;a href=&quot;https://www.roamresearch.com/&quot;&gt;Roam&#39;s&lt;/a&gt; more powerful features into the &lt;a href=&quot;https://orgmode.org/&quot;&gt;Org-mode&lt;/a&gt; ecosystem.&lt;/p&gt; 
&lt;p&gt;Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Private and Secure&lt;/strong&gt;: Edit your personal wiki completely offline, entirely in your control. Encrypt your notes with GPG. Take lasting notes in plain-text.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Networked Thought&lt;/strong&gt;: Connect notes and thoughts together with ease using backlinks. Discover surprising and previously unseen connections in your notes with the built-in graph visualization.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensible and Powerful&lt;/strong&gt;: Leverage Emacs&#39; fantastic text-editing interface, and the mature Emacs and Org-mode ecosystem of packages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free and Open Source&lt;/strong&gt;: Org-roam is licensed under the GNU General Public License version 3 or later.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://www.orgroam.com/img/screenshot.png&quot; alt=&quot;Org-roam Screenshot&quot; width=&quot;738&quot; /&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.orgroam.com/manual.html&quot;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://org-roam.discourse.group/&quot;&gt;Discourse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&quot;&gt;Slack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.orgroam.com/manual.html#FAQ&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/org-roam/org-roam/main/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Down below you will find basic installation instructions for how to quickly install &lt;code&gt;org-roam&lt;/code&gt; using various environments for various purposes. For more detailed information, please read the &lt;a href=&quot;https://www.orgroam.com/manual.html&quot;&gt;manual&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Toggle instructions&lt;/summary&gt; 
 &lt;p&gt;You can install &lt;code&gt;org-roam&lt;/code&gt; from &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt; or &lt;a href=&quot;https://stable.melpa.org/&quot;&gt;MELPA Stable&lt;/a&gt; using &lt;code&gt;package.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;M-x package-install RET org-roam RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Toggle instructions&lt;/summary&gt; 
 &lt;p&gt;Installation from MELPA or MELPA Stable using &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(straight-use-package &#39;org-roam)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Or with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org-roam
  :straight t
  ...)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you need to install the package directly from the source repository, instead of from MELPA, the next sample shows how to do so:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org-roam
  :straight (:host github :repo &quot;org-roam/org-roam&quot;
             :files (:defaults &quot;extensions/*&quot;))
  ...)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you plan to use your own local fork for the development and contribution, the next sample will get you there:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org-roam
  :straight (:local-repo &quot;/path/to/org-roam-fork&quot;
             :files (:defaults &quot;extensions/*&quot;)
             :build (:not compile))
  ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Doom Emacs&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Toggle instructions&lt;/summary&gt; 
 &lt;p&gt;Doom&#39;s &lt;code&gt;:lang org&lt;/code&gt; module comes with support for &lt;code&gt;org-roam&lt;/code&gt;, but it&#39;s not enabled by default. To activate it pass &lt;code&gt;+roam2&lt;/code&gt; flag to &lt;code&gt;org&lt;/code&gt; module in your &lt;code&gt;$DOOMDIR/init.el&lt;/code&gt; (e.g. &lt;code&gt;(org +roam2)&lt;/code&gt;), save the file and run &lt;code&gt;doom sync -u&lt;/code&gt; in your shell.&lt;/p&gt; 
 &lt;p&gt;To provide better stability, Doom pins the package to a specific commit. If you need to unpin it &lt;em&gt;(not recommended doing that, request Doom to bump the package instead)&lt;/em&gt; use the next in your &lt;code&gt;packages.el&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(unpin! org-roam)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If for some reasons you want to use a different recipe for &lt;code&gt;org-roam&lt;/code&gt;, you can use the next form in your &lt;code&gt;packages.el&lt;/code&gt; to install the package from a recipe repository (e.g. MELPA):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package! org-roam)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can pass &lt;code&gt;:pin &quot;commit hash&quot;&lt;/code&gt; to pin the package to a specific commit.&lt;/p&gt; 
 &lt;p&gt;With the next sample you can install the package directly from the source repository:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package! org-roam
  :recipe (:host github :repo &quot;org-roam/org-roam&quot;
           :files (:defaults &quot;extensions/*&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;And if you plan to use your own local fork for the development or contribution, the next sample will get you there:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(package! org-roam
  :recipe (:local-repo &quot;/path/to/org-roam-fork&quot;
           :files (:defaults &quot;extensions/*&quot;)
           :build (:not compile)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Without a package manager&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Toggle instructions&lt;/summary&gt; 
 &lt;p&gt;To install the package without using a package manager you have the next two options:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Install the package by cloning it with &lt;code&gt;git&lt;/code&gt; from the source repository.&lt;/li&gt; 
  &lt;li&gt;Or install the package by downloading the latest &lt;a href=&quot;https://github.com/org-roam/org-roam/releases&quot;&gt;release version&lt;/a&gt;.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;In both of the cases you will need to ensure that you have all the required dependencies. These include:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;dash&lt;/li&gt; 
  &lt;li&gt;f&lt;/li&gt; 
  &lt;li&gt;s&lt;/li&gt; 
  &lt;li&gt;org (9.6 is the minimum required version!)&lt;/li&gt; 
  &lt;li&gt;emacsql&lt;/li&gt; 
  &lt;li&gt;magit-section&lt;/li&gt; 
  &lt;li&gt;filenotify-recursive&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;After installing the package, you will need to properly setup &lt;code&gt;load-path&lt;/code&gt; to the package:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-to-list &#39;load-path &quot;/path/to/org-roam/&quot;)
(add-to-list &#39;load-path &quot;/path/to-org-roam/extensions/&quot;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;After which you should be able to resolve &lt;code&gt;(require &#39;org-roam)&lt;/code&gt; call without any problems.&lt;/p&gt; 
 &lt;p&gt;Org-roam also comes with &lt;code&gt;.texi&lt;/code&gt; files to integrate with Emacs&#39; built-in Info system. Read the manual to find more details for how to install them manually.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Here&#39;s a very basic sample for configuration of &lt;code&gt;org-roam&lt;/code&gt; using &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename &quot;/path/to/org-files/&quot;))
  :bind ((&quot;C-c n l&quot; . org-roam-buffer-toggle)
         (&quot;C-c n f&quot; . org-roam-node-find)
         (&quot;C-c n g&quot; . org-roam-graph)
         (&quot;C-c n i&quot; . org-roam-node-insert)
         (&quot;C-c n c&quot; . org-roam-capture)
         ;; Dailies
         (&quot;C-c n j&quot; . org-roam-dailies-capture-today))
  :config
  ;; If you&#39;re using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat &quot;${title:*} &quot; (propertize &quot;${tags:10}&quot; &#39;face &#39;org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require &#39;org-roam-protocol))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the &lt;code&gt;file-truename&lt;/code&gt; function is only necessary when you use symbolic link to &lt;code&gt;org-roam-directory&lt;/code&gt;. Org-roam won&#39;t automatically resolve symbolic link to the directory.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/daviwil&quot;&gt;David Wilson&lt;/a&gt; of &lt;a href=&quot;https://www.youtube.com/c/SystemCrafters&quot;&gt;System Crafters&lt;/a&gt; has produced an introductory video that covers the basic commands:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AyhPmypHDEw&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/AyhPmypHDEw/0.jpg&quot; alt=&quot;Getting Started with Org Roam - Build a Second Brain in Emacs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;Before creating a new topic/issue, please be mindful of our time and ensure that it has not already been addressed on &lt;a href=&quot;https://github.com/org-roam/org-roam/issues&quot;&gt;GitHub&lt;/a&gt; or on &lt;a href=&quot;https://org-roam.discourse.group/&quot;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are new to Emacs and have problem setting up Org-roam, please ask your question on &lt;a href=&quot;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&quot;&gt;Slack, channel #how-do-i&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For quick questions, please ask them on &lt;a href=&quot;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&quot;&gt;Slack, channel #troubleshooting&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If something is not working as it should, or if you would like to suggest a new feature, please &lt;a href=&quot;https://github.com/org-roam/org-roam/issues&quot;&gt;create a new issue&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you have questions about your workflow with the slip-box method, please find a relevant topic on &lt;a href=&quot;https://org-roam.discourse.group/&quot;&gt;Discourse&lt;/a&gt;, or create a new one.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Knowledge Bases using Org-roam&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://braindump.jethro.dev/&quot;&gt;Jethro Kuan&lt;/a&gt; (&lt;a href=&quot;https://github.com/jethrokuan/braindump/tree/master/org&quot;&gt;Source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.alexeyshmalko.com/&quot;&gt;Alexey Shmalko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sidhartharya.github.io/braindump/index.html&quot;&gt;Sidharth Arya&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://edstrom.dev/&quot;&gt;Martin Edström&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To report bugs and suggest new feature use the issue tracker. If you have some code which you would like to be merged, then open a pull request. Please also see &lt;a href=&quot;https://raw.githubusercontent.com/org-roam/org-roam/main/.github/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright © Jethro Kuan and contributors. Distributed under the GNU General Public License, Version 3.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dominikh/go-mode.el</title>
      <link>https://github.com/dominikh/go-mode.el</link>
      <description>&lt;p&gt;Emacs mode for the Go programming language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is go-mode, the Emacs mode for editing Go code.&lt;/p&gt; 
&lt;p&gt;It is a complete rewrite of the go-mode that shipped with Go 1.0.3 and before, and was part of Go 1.1 until Go 1.3. Beginning with Go 1.4, editor integration will not be part of the Go distribution anymore, making this repository the canonical place for go-mode.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;p&gt;In addition to normal features, such as fontification and indentation, and close integration with familiar Emacs functionality (for example syntax-based navigation like &lt;code&gt;beginning-of-defun&lt;/code&gt;), go-mode comes with the following extra features to provide an improved experience:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Integration with &lt;code&gt;gofmt&lt;/code&gt; by providing a command of the same name, and &lt;code&gt;gofmt-before-save&lt;/code&gt;, which can be used in a hook to format Go buffers before saving them.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Setting the &lt;code&gt;gofmt-command&lt;/code&gt; variable also allows using &lt;code&gt;goimports&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Setting the &lt;code&gt;gofmt-args&lt;/code&gt; variable with a list of arguments allows using e.g. &lt;code&gt;gofmt -s&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Integration with &lt;code&gt;godoc&lt;/code&gt; via the functions &lt;code&gt;godoc&lt;/code&gt; and &lt;code&gt;godoc-at-point&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Integration with the Playground&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;go-play-buffer&lt;/code&gt; and &lt;code&gt;go-play-region&lt;/code&gt; to send code to the Playground&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;go-download-play&lt;/code&gt; to download a Playground entry into a new buffer&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Managing imports&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;A function for jumping to the file&#39;s imports (&lt;code&gt;go-goto-imports&lt;/code&gt; - &lt;code&gt;C-c C-f i&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;A function for adding imports, including tab completion (&lt;code&gt;go-import-add&lt;/code&gt;, bound to &lt;code&gt;C-c C-a&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;It is recommended that you use &lt;code&gt;goimports&lt;/code&gt; or the &lt;code&gt;organize-imports&lt;/code&gt; feature of &lt;code&gt;gopls&lt;/code&gt; to manage adding/removing/organizing imports automatically.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Integration with godef&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;godef-describe&lt;/code&gt; (&lt;code&gt;C-c C-d&lt;/code&gt;) to describe expressions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;godef-jump&lt;/code&gt; (&lt;code&gt;C-c C-j&lt;/code&gt;) and &lt;code&gt;godef-jump-other-window&lt;/code&gt; (&lt;code&gt;C-x 4 C-c C-j&lt;/code&gt;) to jump to declarations&lt;/li&gt; 
   &lt;li&gt;This requires you to install godef via &lt;code&gt;go install github.com/rogpeppe/godef@latest&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Basic support for imenu (functions and variables)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Built-in support for displaying code coverage as calculated by &lt;code&gt;go test&lt;/code&gt; (&lt;code&gt;go-coverage&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Several functions for jumping to and manipulating the individual parts of function signatures. These functions support anonymous functions, but are smart enough to skip them when required (e.g. when jumping to a method receiver or docstring.)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Jump to the argument list (&lt;code&gt;go-goto-arguments&lt;/code&gt; - &lt;code&gt;C-c C-f a&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Jump to the docstring, create it if it does not exist yet (&lt;code&gt;go-goto-docstring&lt;/code&gt; - &lt;code&gt;C-c C-f d&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;Jump to the function keyword (&lt;code&gt;go-goto-function&lt;/code&gt; - &lt;code&gt;C-c C-f f&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Jump to the function name (&lt;code&gt;go-goto-function-name&lt;/code&gt; - &lt;code&gt;C-c C-f n&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Jump to the return values (&lt;code&gt;go-goto-return-values&lt;/code&gt; - &lt;code&gt;C-c C-f r&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Jump to the method receiver, adding a pair of parentheses if no method receiver exists (&lt;code&gt;go-goto-method-receiver&lt;/code&gt; - &lt;code&gt;C-c C-f m&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;All of these functions accept a prefix argument (&lt;code&gt;C-u&lt;/code&gt;), causing them to skip anonymous functions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;MELPA&lt;/h2&gt; 
&lt;p&gt;The recommended way of installing go-mode is via &lt;a href=&quot;http://www.emacswiki.org/emacs/ELPA&quot;&gt;ELPA&lt;/a&gt;, the Emacs package manager, and the &lt;a href=&quot;http://emacsredux.com/blog/2014/05/16/melpa-stable/&quot;&gt;MELPA Stable repository&lt;/a&gt;, which provides an up-to-date version of go-mode.&lt;/p&gt; 
&lt;p&gt;If you&#39;re not familiar with ELPA yet, consider reading &lt;a href=&quot;http://xahlee.info/emacs/emacs/emacs_package_system.html&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual&lt;/h2&gt; 
&lt;p&gt;To install go-mode manually, check out the &lt;code&gt;go-mode.el&lt;/code&gt; repository in a directory of your choice, add it to your load path and configure Emacs to automatically load it when opening a &lt;code&gt;.go&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path &quot;/place/where/you/put/it/&quot;)
(autoload &#39;go-mode &quot;go-mode&quot; nil t)
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\.go\\&#39;&quot; . go-mode))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Either evaluate the statements with &lt;code&gt;C-x C-e&lt;/code&gt;, or restart Emacs.&lt;/p&gt; 
&lt;h1&gt;Other extensions&lt;/h1&gt; 
&lt;p&gt;There are several third party extensions that can enhance the Go experience in Emacs.&lt;/p&gt; 
&lt;h2&gt;Gopls integration&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/golang/tools/raw/master/gopls/README.md&quot;&gt;Gopls&lt;/a&gt; is the official language server protocol (lsp) implementation provided by the Go team. It is intended to replace the existing third party tools for code formatting (gofmt), automatic imports (goimports), code navigation (godef/guru), type and function descriptions (godoc/godef), error checking, auto completion (gocode), variable and type renaming (rename), and more. Once gopls is stable the older tools will no longer be supported.&lt;/p&gt; 
&lt;p&gt;Gopls is a supported backend for &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt;. It will be used automatically by lsp-mode if &lt;code&gt;gopls&lt;/code&gt; is found in your PATH. You can install gopls via: &lt;code&gt;go install golang.org/x/tools/gopls@latest&lt;/code&gt;. To enable lsp-mode for go buffers:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(add-hook &#39;go-mode-hook &#39;lsp-deferred)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Syntax/error checking&lt;/h2&gt; 
&lt;p&gt;There are two ways of using flymake with Go:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dougm/goflymake&quot;&gt;goflymake&lt;/a&gt;, which internally uses &lt;code&gt;go build&lt;/code&gt; to capture all errors that a regular compilation would also produce&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://marmalade-repo.org/packages/flymake-go&quot;&gt;flymake-go&lt;/a&gt; for a more lightweight solution that only uses &lt;code&gt;gofmt&lt;/code&gt; and as such is only able to catch syntax errors. Unlike goflymake, however, it does not require an additional executable.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Additionally, there is &lt;a href=&quot;https://github.com/flycheck/flycheck&quot;&gt;flycheck&lt;/a&gt;, a modern replacement for flymake, which comes with built-in support for Go. In addition to using &lt;code&gt;go build&lt;/code&gt; or &lt;code&gt;gofmt&lt;/code&gt;, it also has support for &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; and &lt;code&gt;errcheck&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Auto completion&lt;/h2&gt; 
&lt;p&gt;For auto completion, take a look at &lt;a href=&quot;https://github.com/nsf/gocode&quot;&gt;gocode&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;eldoc&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/syohex/emacs-go-eldoc&quot;&gt;https://github.com/syohex/emacs-go-eldoc&lt;/a&gt; provides eldoc functionality for go-mode.&lt;/p&gt; 
&lt;h2&gt;Snippets&lt;/h2&gt; 
&lt;p&gt;I maintain a set of YASnippet snippets for go-mode at &lt;a href=&quot;https://github.com/dominikh/yasnippet-go&quot;&gt;https://github.com/dominikh/yasnippet-go&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Integration with errcheck&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dominikh/go-errcheck.el&quot;&gt;https://github.com/dominikh/go-errcheck.el&lt;/a&gt; provides integration with &lt;a href=&quot;https://github.com/kisielk/errcheck&quot;&gt;errcheck&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Stability&lt;/h1&gt; 
&lt;p&gt;go-mode.el has regular, tagged releases and is part of the MELPA Stable repository. These tagged releases are intended to provide a stable experience. APIs added in tagged releases will usually not be removed or changed in future releases.&lt;/p&gt; 
&lt;p&gt;Changes made on the master branch, which is tracked by the normal MELPA repository, however, are under active development. New APIs are experimental and may be changed or removed before the next release. Furthermore, there is a higher chance for bugs.&lt;/p&gt; 
&lt;p&gt;If you want a stable experience, use MELPA Stable. If you want cutting edge features, or &quot;beta-test&quot; future releases, use MELPA or the master branch.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stevemolitor/claude-code.el</title>
      <link>https://github.com/stevemolitor/claude-code.el</link>
      <description>&lt;p&gt;Claude Code Emacs integration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;claude-code.el&lt;/h1&gt; 
&lt;p&gt;An Emacs interface for &lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code CLI&lt;/a&gt;, providing integration between Emacs and Claude AI for coding assistance.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless Emacs Integration&lt;/strong&gt; - Start, manage, and interact with Claude without leaving Emacs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stay in Your Buffer&lt;/strong&gt; - Send code, regions, or commands to Claude while keeping your focus&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fix Errors Instantly&lt;/strong&gt; - Point at a flycheck/flymake error and ask Claude to fix it&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple Instances&lt;/strong&gt; - Run separate Claude sessions for different projects or tasks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Quick Responses&lt;/strong&gt; - Answer Claude with a keystroke (
  &lt;return&gt;
   /
   &lt;escape&gt;
    /1/2/3) without switching buffers
   &lt;/escape&gt;
  &lt;/return&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Smart Context&lt;/strong&gt; - Optionally include file paths and line numbers when sending commands to Claude&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Transient Menu&lt;/strong&gt; - Access all commands and slash commands through a transient menu&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Continue Conversations&lt;/strong&gt; - Resume previous sessions or fork to earlier points&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Read-Only Mode&lt;/strong&gt; - Toggle to select and copy text with normal Emacs commands and keybindings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mode Cycling&lt;/strong&gt; - Quick switch between default, auto-accept edits, and plan modes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Desktop Notifications&lt;/strong&gt; - Get notified when Claude finishes processing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Terminal Choice&lt;/strong&gt; - Works with both eat and vterm backends&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fully Customizable&lt;/strong&gt; - Configure keybindings, notifications, and display preferences&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Emacs 30.0 or higher&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code CLI&lt;/a&gt; installed and configured&lt;/li&gt; 
 &lt;li&gt;Required: transient (0.7.5+) inheritenv (0.2)&lt;/li&gt; 
 &lt;li&gt;Optional: eat (0.9.2+) for eat backend, vterm for vterm backend 
  &lt;ul&gt; 
   &lt;li&gt;Note: If not using a &lt;code&gt;:vc&lt;/code&gt; install, the &lt;code&gt;eat&lt;/code&gt; package requires NonGNU ELPA: &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;package-archives &#39;(&quot;nongnu&quot; . &quot;https://elpa.nongnu.org/nongnu/&quot;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Optional but recommended: &lt;a href=&quot;https://github.com/stevemolitor/monet&quot;&gt;Monet&lt;/a&gt; for IDE integration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Using builtin use-package (Emacs 30+)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; add melp to package archives, as vterm is on melpa:
(require &#39;package)
(add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;) t)
(package-initialize)

;; for eat terminal backend:
(use-package eat :ensure t)

;; for vterm terminal backend:
(use-package vterm :ensure t)

;; install claude-code.el
(use-package claude-code :ensure t
  :vc (:url &quot;https://github.com/stevemolitor/claude-code.el&quot; :rev :newest)
  :config 
  ;; optional IDE integration with Monet
  (add-hook &#39;claude-code-process-environment-functions #&#39;monet-start-server-function)
  (monet-mode 1)
  
  (claude-code-mode)
  :bind-keymap (&quot;C-c c&quot; . claude-code-command-map)
  
  ;; Optionally define a repeat map so that &quot;M&quot; will cycle thru Claude auto-accept/plan/confirm modes after invoking claude-code-cycle-mode / C-c M.
  :bind
  (:repeat-map my-claude-code-map (&quot;M&quot; . claude-code-cycle-mode)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using straight.el&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; for eat terminal backend:
(use-package eat
  :straight (:type git
                   :host codeberg
                   :repo &quot;akib/emacs-eat&quot;
                   :files (&quot;*.el&quot; (&quot;term&quot; &quot;term/*.el&quot;) &quot;*.texi&quot;
                           &quot;*.ti&quot; (&quot;terminfo/e&quot; &quot;terminfo/e/*&quot;)
                           (&quot;terminfo/65&quot; &quot;terminfo/65/*&quot;)
                           (&quot;integration&quot; &quot;integration/*&quot;)
                           (:exclude &quot;.dir-locals.el&quot; &quot;*-tests.el&quot;))))

;; for vterm terminal backend:
(use-package vterm :straight t)

;; install claude-code.el, using :depth 1 to reduce download size:
(use-package claude-code
  :straight (:type git :host github :repo &quot;stevemolitor/claude-code.el&quot; :branch &quot;main&quot; :depth 1
                   :files (&quot;*.el&quot; (:exclude &quot;images/*&quot;)))
  :bind-keymap
  (&quot;C-c c&quot; . claude-code-command-map) ;; or your preferred key
  ;; Optionally define a repeat map so that &quot;M&quot; will cycle thru Claude auto-accept/plan/confirm modes after invoking claude-code-cycle-mode / C-c M.
  :bind
  (:repeat-map my-claude-code-map (&quot;M&quot; . claude-code-cycle-mode)))
  :config
  ;; optional IDE integration with Monet
  (add-hook &#39;claude-code-process-environment-functions #&#39;monet-start-server-function)
  (monet-mode 1)

  (claude-code-mode))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;h3&gt;Setting Prefix Key&lt;/h3&gt; 
&lt;p&gt;You need to set your own key binding for the Claude Code command map, as described in the &lt;a href=&quot;https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/#installation&quot;&gt;Installation&lt;/a&gt; section. The examples in this README use &lt;code&gt;C-c c&lt;/code&gt; as the prefix key.&lt;/p&gt; 
&lt;h3&gt;Picking Eat or Vterm&lt;/h3&gt; 
&lt;p&gt;By default claude-code.el uses the &lt;code&gt;eat&lt;/code&gt; backend. If you prefer vterm customize &lt;code&gt;claude-code-terminal-backend&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq claude-code-terminal-backend &#39;vterm)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Transient Menu&lt;/h3&gt; 
&lt;p&gt;You can see a menu of the important commands by invoking the transient, &lt;code&gt;claude-code-transient&lt;/code&gt; (&lt;code&gt;C-c c m&lt;/code&gt;):&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/images/transient.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Starting and Stopping Claude&lt;/h3&gt; 
&lt;p&gt;To start Claude, run &lt;code&gt;claude-code&lt;/code&gt; (&lt;code&gt;C-c c c&lt;/code&gt;). This will start a new Claude instance in the root project directory of the buffer file, or the current directory if outside of a project. Claude-code.el uses Emacs built-in &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html&quot;&gt;project.el&lt;/a&gt; which works with most version control systems.&lt;/p&gt; 
&lt;p&gt;To start Claude in a specific directory use &lt;code&gt;claude-code-start-in-directory&lt;/code&gt; (&lt;code&gt;C-c c d&lt;/code&gt;). It will prompt you for the directory.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;claude-code-continue&lt;/code&gt; command will continue the previous conversation, and &lt;code&gt;claude-code-resume&lt;/code&gt; will let you pick from a list of previous sessions.&lt;/p&gt; 
&lt;p&gt;To kill the Claude process and close its window use &lt;code&gt;claude-code-kill&lt;/code&gt; (&lt;code&gt;C-c c k&lt;/code&gt;).&lt;/p&gt; 
&lt;h3&gt;Sending Commands to Claude&lt;/h3&gt; 
&lt;p&gt;Once Claude has started, you can switch to the Claude buffer and start entering prompts. Alternately, you can send prompts to Claude using the minibuffer via &lt;code&gt;claude-code-send-command&lt;/code&gt; (&lt;code&gt;C-c c s&lt;/code&gt;). &lt;code&gt;claude-code-send-command-with-context&lt;/code&gt; (&lt;code&gt;C-c c x&lt;/code&gt;) will also send the current file name and line number to Claude. This is useful for asking things like &quot;what does this code do?&quot;, or &quot;fix the bug in this code&quot;.&lt;/p&gt; 
&lt;p&gt;Use the &lt;code&gt;claude-code-send-region&lt;/code&gt; (&lt;code&gt;C-c c r&lt;/code&gt;) command to send the selected region to Claude, or the entire buffer if no region is selected. This command is useful for writing a prompt in a regular Emacs buffer and sending it to Claude. With a single prefix arg (&lt;code&gt;C-u C-c c r&lt;/code&gt;) it will prompt for extra context before sending the region to Claude.&lt;/p&gt; 
&lt;p&gt;You can also send files directly to Claude using &lt;code&gt;claude-code-send-file&lt;/code&gt; to send any file by path, or &lt;code&gt;claude-code-send-buffer-file&lt;/code&gt; (&lt;code&gt;C-c c o&lt;/code&gt;) to send the file associated with the current buffer. The &lt;code&gt;claude-code-send-buffer-file&lt;/code&gt; command supports prefix arguments similar to &lt;code&gt;claude-code-send-region&lt;/code&gt; - with a single prefix arg it prompts for instructions, and with double prefix it also switches to the Claude buffer.&lt;/p&gt; 
&lt;p&gt;If you put your cursor over a flymake or flycheck error, you can ask Claude to fix it via &lt;code&gt;claude-code-fix-error-at-point&lt;/code&gt; (&lt;code&gt;C-c c e&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;To show and hide the Claude buffer use &lt;code&gt;claude-code-toggle&lt;/code&gt; (&lt;code&gt;C-c c t&lt;/code&gt;). To jump to the Claude buffer use &lt;code&gt;claude-code-switch-to-buffer&lt;/code&gt; (&lt;code&gt;C-c c b&lt;/code&gt;). This will open the buffer if hidden.&lt;/p&gt; 
&lt;h3&gt;Managing Claude Windows&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;claude-code-toggle&lt;/code&gt; (&lt;code&gt;C-c c t&lt;/code&gt;) will show and hide the Claude window. Use the &lt;code&gt;claude-code-switch-to-buffer&lt;/code&gt; (&lt;code&gt;C-c c b&lt;/code&gt;) command to switch to the Claude window even if it is hidden.&lt;/p&gt; 
&lt;p&gt;To enter read-only mode in the Claude buffer use &lt;code&gt;claude-code-toggle-read-only-mode&lt;/code&gt; (&lt;code&gt;C-c c z&lt;/code&gt;). In this mode you can select and copy text, and use regular Emacs keybindings. To exit read-only mode invoke &lt;code&gt;claude-code-toggle-read-only-mode&lt;/code&gt; again.&lt;/p&gt; 
&lt;h3&gt;Quick Responses&lt;/h3&gt; 
&lt;p&gt;Sometimes you want to send a quick response to Claude without switching to the Claude buffer. The following commands let you answer a query from Claude without leaving your current editing buffer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;claude-code-send-return&lt;/code&gt; (&lt;code&gt;C-c c y&lt;/code&gt;) - send the return or enter key to Claude, commonly used to respond with &quot;Yes&quot; to Claude queriesy&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;claude-code-send-escape&lt;/code&gt; (&lt;code&gt;C-c c n&lt;/code&gt;) - send the escape key, to say &quot;No&quot; to Claude or to cancel a running Claude action&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;claude-code-send-1&lt;/code&gt; (&lt;code&gt;C-c c 1&lt;/code&gt;) - send &quot;1&quot; to Claude, to choose option &quot;1&quot; in response to a Claude query&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;claude-code-send-2&lt;/code&gt; (&lt;code&gt;C-c c 2&lt;/code&gt;) - send &quot;2&quot; to Claude&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;claude-code-send-3&lt;/code&gt; (&lt;code&gt;C-c c 3&lt;/code&gt;) - send &quot;3&quot; to Claude&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;IDE Integration with &lt;a href=&quot;https://github.com/stevemolitor/monet&quot;&gt;Monet&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;You can optionally use &lt;a href=&quot;https://github.com/stevemolitor/monet&quot;&gt;Monet&lt;/a&gt; for IDE integration. To integrate Monet with Claude do this (or the equivalent &lt;code&gt;use-package&lt;/code&gt; declaration shown above):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;claude-code-process-environment-functions #&#39;monet-start-server-function)
(monet-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When Claude starts a new instance it will automatically start a Monet websocket server to listen to and send IDE comments to/from Claude. Current selection will automatically be sent to Claude, and Claude will show diffs in Emacs, use Emacs Monet tools to open files, get diagnostics, etc. See the &lt;a href=&quot;https://github.com/stevemolitor/monet&quot;&gt;Monet&lt;/a&gt; documentation for more details.&lt;/p&gt; 
&lt;h2&gt;Working with Multiple Claude Instances&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;claude-code.el&lt;/code&gt; supports running multiple Claude instances across different projects and directories. Each Claude instance is associated with a specific directory (project root, file directory, or current directory).&lt;/p&gt; 
&lt;h4&gt;Instance Management&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;When you start Claude with &lt;code&gt;claude-code&lt;/code&gt;, it creates an instance for the current directory&lt;/li&gt; 
 &lt;li&gt;If a Claude instance already exists for the directory, you&#39;ll be prompted to name the new instance (e.g., &quot;tests&quot;, &quot;docs&quot;)&lt;/li&gt; 
 &lt;li&gt;You can also use &lt;code&gt;claude-code-new-instance&lt;/code&gt; to explicitly create a new instance with a custom name&lt;/li&gt; 
 &lt;li&gt;Buffer names follow the format: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;*claude:/path/to/directory:instance-name*&lt;/code&gt; (e.g., &lt;code&gt;*claude:/home/user/project:tests*&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;If you&#39;re in a directory without a Claude instance but have instances running in other directories, you&#39;ll be prompted to select one&lt;/li&gt; 
 &lt;li&gt;Your selection is remembered for that directory, so you won&#39;t be prompted again&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Instance Selection&lt;/h3&gt; 
&lt;p&gt;Commands that operate on an instance (&lt;code&gt;claude-send-command&lt;/code&gt;, &lt;code&gt;claude-code-switch-to-buffer&lt;/code&gt;, &lt;code&gt;claude-code-kill&lt;/code&gt;, etc.) will prompt you for the Claude instance if there is more than one instance associated with the current buffer&#39;s project.&lt;/p&gt; 
&lt;p&gt;If the buffer file is not associated with a running Claude instance, you can select an instance running in a different project. This is useful when you want Claude to analyze dependent projects or files that you have checked out in sibling directories.&lt;/p&gt; 
&lt;p&gt;Claude-code.el remembers which buffers are associated with which Claude instances, so you won&#39;t be repeatedly prompted. This association also helps claude-code.el &quot;do the right thing&quot; when killing a Claude process and deleting its associated buffer.&lt;/p&gt; 
&lt;h3&gt;Multiple Instances Per Directory&lt;/h3&gt; 
&lt;p&gt;You can run multiple Claude instances for the same directory to support different workflows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The first instance in a directory is the &quot;default&quot; instance&lt;/li&gt; 
 &lt;li&gt;Additional instances require a name when created (e.g., &quot;tests&quot;, &quot;docs&quot;, &quot;refactor&quot;)&lt;/li&gt; 
 &lt;li&gt;When multiple instances exist for a directory, commands that interact with Claude will prompt you to select which instance to use&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;C-u claude-code-switch-to-buffer&lt;/code&gt; to see all Claude instances across all directories (not just the current directory)&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;claude-code-select-buffer&lt;/code&gt; as a dedicated command to always show all Claude instances across all directories&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This allows you to have separate Claude conversations for different aspects of your work within the same project, such as one instance for writing code and another for writing tests.&lt;/p&gt; 
&lt;h2&gt;Working in the Claude Buffer&lt;/h2&gt; 
&lt;p&gt;claude-code.el is designed to support using Claude Code in Emacs using the minibuffer and regular Emacs buffers, with normal keybindings and full Emacs editing facilities. However, claude-code.el also adds a few niceties for working in the Claude Code terminal buffer:&lt;/p&gt; 
&lt;p&gt;You can type &lt;code&gt;C-g&lt;/code&gt; as an alternative to escape. Also claude-code.el supports several options for entering newlines in the Claude Code session:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Default (newline-on-shift-return)&lt;/strong&gt;: Press &lt;code&gt;Shift-Return&lt;/code&gt; to insert a newline, &lt;code&gt;Return&lt;/code&gt; to send your message&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Alt-return style&lt;/strong&gt;: Press &lt;code&gt;Alt-Return&lt;/code&gt; to insert a newline, &lt;code&gt;Return&lt;/code&gt; to send&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Shift-return to send&lt;/strong&gt;: Press &lt;code&gt;Return&lt;/code&gt; to insert a newline, &lt;code&gt;Shift-Return&lt;/code&gt; to send&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Super-return to send&lt;/strong&gt;: Press &lt;code&gt;Return&lt;/code&gt; to insert a newline, &lt;code&gt;Command-Return&lt;/code&gt; (macOS) to send&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can change this behavior by customizing &lt;code&gt;claude-code-newline-keybinding-style&lt;/code&gt; (see &lt;a href=&quot;https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/#customization&quot;&gt;Customization&lt;/a&gt;).&lt;/p&gt; 
&lt;h3&gt;Command Reference&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-transient&lt;/code&gt; (&lt;code&gt;C-c c m&lt;/code&gt;) - Show all commands (transient menu)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code&lt;/code&gt; (&lt;code&gt;C-c c c&lt;/code&gt;) - Start Claude. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after creating. With double prefix (&lt;code&gt;C-u C-u&lt;/code&gt;), prompts for the project directory&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-start-in-directory&lt;/code&gt; (&lt;code&gt;C-c c d&lt;/code&gt;) - Prompt for a directory and start Claude there. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after creating&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-continue&lt;/code&gt; (&lt;code&gt;C-c c C&lt;/code&gt;) - Start Claude and continue the previous conversation. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after creating. With double prefix (&lt;code&gt;C-u C-u&lt;/code&gt;), prompts for the project directory&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-resume&lt;/code&gt; (&lt;code&gt;C-c c R&lt;/code&gt;) - Resume a specific Claude session from an interactive list. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after creating. With double prefix (&lt;code&gt;C-u C-u&lt;/code&gt;), prompts for the project directory&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-new-instance&lt;/code&gt; (&lt;code&gt;C-c c i&lt;/code&gt;) - Create a new Claude instance with a custom name. Always prompts for instance name, unlike &lt;code&gt;claude-code&lt;/code&gt; which uses &quot;default&quot; when no instances exist. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after creating. With double prefix (&lt;code&gt;C-u C-u&lt;/code&gt;), prompts for the project directory&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-kill&lt;/code&gt; (&lt;code&gt;C-c c k&lt;/code&gt;) - Kill Claude session&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-kill-all&lt;/code&gt; (&lt;code&gt;C-c c K&lt;/code&gt;) - Kill ALL Claude instances across all directories&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-command&lt;/code&gt; (&lt;code&gt;C-c c s&lt;/code&gt;) - Send command to Claude. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after sending&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-command-with-context&lt;/code&gt; (&lt;code&gt;C-c c x&lt;/code&gt;) - Send command with current file and line context. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after sending&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-region&lt;/code&gt; (&lt;code&gt;C-c c r&lt;/code&gt;) - Send the current region or buffer to Claude. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), prompts for instructions to add to the text. With double prefix (&lt;code&gt;C-u C-u&lt;/code&gt;), adds instructions and switches to Claude buffer&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-file&lt;/code&gt; - Send a specified file to Claude. Prompts for file path&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-buffer-file&lt;/code&gt; (&lt;code&gt;C-c c o&lt;/code&gt;) - Send the file associated with current buffer to Claude. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), prompts for instructions to add to the file. With double prefix (&lt;code&gt;C-u C-u&lt;/code&gt;), adds instructions and switches to Claude buffer&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-fix-error-at-point&lt;/code&gt; (&lt;code&gt;C-c c e&lt;/code&gt;) - Ask Claude to fix the error at the current point (works with flycheck, flymake, and any system that implements help-at-pt). With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after sending&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-fork&lt;/code&gt; (&lt;code&gt;C-c c f&lt;/code&gt;) - Fork conversation (jump to previous conversation by sending escape-escape to Claude)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-slash-commands&lt;/code&gt; (&lt;code&gt;C-c c /&lt;/code&gt;) - Access Claude slash commands menu&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-toggle&lt;/code&gt; (&lt;code&gt;C-c c t&lt;/code&gt;) - Toggle Claude window&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-switch-to-buffer&lt;/code&gt; (&lt;code&gt;C-c c b&lt;/code&gt;) - Switch to the Claude buffer. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), shows all Claude instances across all directories&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-select-buffer&lt;/code&gt; (&lt;code&gt;C-c c B&lt;/code&gt;) - Select and switch to a Claude buffer from all running instances across all projects and directories&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-toggle-read-only-mode&lt;/code&gt; (&lt;code&gt;C-c c z&lt;/code&gt;) - Toggle between read-only mode and normal mode in Claude buffer (useful for selecting and copying text)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-cycle-mode&lt;/code&gt; (&lt;code&gt;C-c c M&lt;/code&gt;) - Send Shift-Tab to Claude to cycle between default mode, auto-accept edits mode, and plan mode. See the installation section above to configure a repeat map so that you can cycle thru the modes with &quot;M&quot; after the initial invocation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-return&lt;/code&gt; (&lt;code&gt;C-c c y&lt;/code&gt;) - Send return key to Claude (useful for confirming with Claude without switching to the Claude REPL buffer) (useful for responding with &quot;Yes&quot; to Claude)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-escape&lt;/code&gt; (&lt;code&gt;C-c c n&lt;/code&gt;) - Send escape key to Claude (useful for saying &quot;No&quot; when Claude asks for confirmation without switching to the Claude REPL buffer)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-1&lt;/code&gt; (&lt;code&gt;C-c c 1&lt;/code&gt;) - Send &quot;1&quot; to Claude (useful for selecting the first option when Claude presents a numbered menu)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-2&lt;/code&gt; (&lt;code&gt;C-c c 2&lt;/code&gt;) - Send &quot;2&quot; to Claude (useful for selecting the second option when Claude presents a numbered menu)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;claude-code-send-3&lt;/code&gt; (&lt;code&gt;C-c c 3&lt;/code&gt;) - Send &quot;3&quot; to Claude (useful for selecting the third option when Claude presents a numbered menu)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Desktop Notifications&lt;/h2&gt; 
&lt;p&gt;claude-code.el notifies you when Claude finishes processing and is waiting for input. By default, it displays a message in the minibuffer and pulses the modeline for visual feedback.&lt;/p&gt; 
&lt;h3&gt;macOS Native Notifications&lt;/h3&gt; 
&lt;p&gt;To use macOS native notifications with sound, add this to your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun my-claude-notify (title message)
  &quot;Display a macOS notification with sound.&quot;
  (call-process &quot;osascript&quot; nil nil nil
                &quot;-e&quot; (format &quot;display notification \&quot;%s\&quot; with title \&quot;%s\&quot; sound name \&quot;Glass\&quot;&quot;
                             message title)))

(setq claude-code-notification-function #&#39;my-claude-notify)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will display a system notification with a &quot;Glass&quot; sound effect when Claude is ready. You can change the sound name to any system sound (e.g., &quot;Ping&quot;, &quot;Hero&quot;, &quot;Morse&quot;, etc.) or remove the &lt;code&gt;sound name&lt;/code&gt; part for silent notifications.&lt;/p&gt; 
&lt;h3&gt;Linux Native Notifications&lt;/h3&gt; 
&lt;p&gt;For Linux desktop notifications, you can use &lt;code&gt;notify-send&lt;/code&gt; (GNOME/Unity) or &lt;code&gt;kdialog&lt;/code&gt; (KDE):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; For GNOME/Unity desktops
(defun my-claude-notify (title message)
  &quot;Display a Linux notification using notify-send.&quot;
  (if (executable-find &quot;notify-send&quot;)
      (call-process &quot;notify-send&quot; nil nil nil title message)
    (message &quot;%s: %s&quot; title message)))

(setq claude-code-notification-function #&#39;my-claude-notify)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To add sound on Linux:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun my-claude-notify-with-sound (title message)
  &quot;Display a Linux notification with sound.&quot;
  (when (executable-find &quot;notify-send&quot;)
    (call-process &quot;notify-send&quot; nil nil nil title message))
  ;; Play sound if paplay is available
  (when (executable-find &quot;paplay&quot;)
    (call-process &quot;paplay&quot; nil nil nil &quot;/usr/share/sounds/freedesktop/stereo/message.oga&quot;)))

(setq claude-code-notification-function #&#39;my-claude-notify-with-sound)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows Native Notifications&lt;/h3&gt; 
&lt;p&gt;For Windows, you can use PowerShell to create toast notifications:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(defun my-claude-notify (title message)
  &quot;Display a Windows notification using PowerShell.&quot;
  (call-process &quot;powershell&quot; nil nil nil
                &quot;-NoProfile&quot; &quot;-Command&quot;
                (concat &quot;[Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null; &quot;
                        &quot;$template = &#39;&amp;lt;toast&amp;gt;&amp;lt;visual&amp;gt;&amp;lt;binding template=\&quot;ToastGeneric\&quot;&amp;gt;&amp;lt;text&amp;gt;&quot; title &quot;&amp;lt;/text&amp;gt;&amp;lt;text&amp;gt;&quot; message &quot;&amp;lt;/text&amp;gt;&amp;lt;/binding&amp;gt;&amp;lt;/visual&amp;gt;&amp;lt;/toast&amp;gt;&#39;; &quot;
                        &quot;$xml = New-Object Windows.Data.Xml.Dom.XmlDocument; &quot;
                        &quot;$xml.LoadXml($template); &quot;
                        &quot;$toast = [Windows.UI.Notifications.ToastNotification]::new($xml); &quot;
                        &quot;[Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier(&#39;Emacs&#39;).Show($toast)&quot;)))

(setq claude-code-notification-function #&#39;my-claude-notify)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note: Linux and Windows examples are untested. Feedback and improvements are welcome!&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Claude Code Hooks Integration&lt;/h3&gt; 
&lt;p&gt;claude-code.el provides integration to &lt;strong&gt;receive&lt;/strong&gt; hook events from Claude Code CLI via emacsclient.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/examples/hooks/claude-code-hook-examples.el&quot;&gt;&lt;code&gt;examples/hooks/claude-code-hook-examples.el&lt;/code&gt;&lt;/a&gt; for comprehensive examples of hook listeners and setup functions.&lt;/p&gt; 
&lt;h4&gt;Hook API&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;claude-code-event-hook&lt;/code&gt; - Emacs hook run when Claude Code CLI triggers events&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;claude-code-handle-hook&lt;/code&gt; - &lt;strong&gt;Unified entry point&lt;/strong&gt; for all Claude Code CLI hooks. Call this from your CLI hooks with &lt;code&gt;(type buffer-name &amp;amp;rest args)&lt;/code&gt; and JSON data as additional emacsclient arguments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;JSON Response System&lt;/h4&gt; 
&lt;p&gt;Hooks can return structured JSON data to control Claude Code behavior using &lt;code&gt;run-hook-with-args-until-success&lt;/code&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple handlers&lt;/strong&gt;: Register multiple functions on &lt;code&gt;claude-code-event-hook&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sequential execution&lt;/strong&gt;: Functions are called in order with the message data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;First response wins&lt;/strong&gt;: Execution stops when a function returns non-nil JSON&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bidirectional communication&lt;/strong&gt;: The JSON response is sent back to Claude Code CLI&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This enables interactive workflows like permission prompts where hooks can influence Claude&#39;s behavior.&lt;/p&gt; 
&lt;h4&gt;Setup&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add the bin directory to your PATH&lt;/strong&gt; (required for hook wrapper script):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export PATH=&quot;/path/to/claude-code.el/bin:$PATH&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Add this to your bash configuration file (~/.bashrc, ~/.bash_profile, etc.) since Claude Code needs it in the bash environment.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start the Emacs server&lt;/strong&gt; so that &lt;code&gt;emacsclient&lt;/code&gt; can communicate with your Emacs instance:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Start the Emacs server (add this to your init.el)
(start-server)

;; Add your hook listeners using standard Emacs functions
(add-hook &#39;claude-code-event-hook &#39;my-claude-hook-listener)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Custom Hook Listener&lt;/h4&gt; 
&lt;p&gt;Hook listeners receive a message plist with these keys:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:type&lt;/code&gt; - Hook type (e.g., &lt;code&gt;&#39;notification&lt;/code&gt;, &lt;code&gt;&#39;stop&lt;/code&gt;, &lt;code&gt;&#39;pre-tool-use&lt;/code&gt;, &lt;code&gt;&#39;post-tool-use&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:buffer-name&lt;/code&gt; - Claude buffer name from &lt;code&gt;$CLAUDE_BUFFER_NAME&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:json-data&lt;/code&gt; - JSON payload from Claude CLI&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:args&lt;/code&gt; - List of additional arguments (when using extended configuration)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Define your own hook listener function
(defun my-claude-hook-listener (message)
  &quot;Custom listener for Claude Code hooks.
MESSAGE is a plist with :type, :buffer-name, :json-data, and :args keys.&quot;
  (let ((hook-type (plist-get message :type))
        (buffer-name (plist-get message :buffer-name))
        (json-data (plist-get message :json-data))
        (args (plist-get message :args)))
    (cond 
     ((eq hook-type &#39;notification)
      (message &quot;Claude is ready in %s! JSON: %s&quot; buffer-name json-data))
     ((eq hook-type &#39;stop)  
      (message &quot;Claude finished in %s! JSON: %s&quot; buffer-name json-data))
     (t
      (message &quot;Claude hook: %s with JSON: %s&quot; hook-type json-data)))))

;; Add the hook listener using standard Emacs hook functions
(add-hook &#39;claude-code-event-hook &#39;my-claude-hook-listener)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the examples file for complete listeners that demonstrate notifications, logging, org-mode integration, and using extra arguments from the &lt;code&gt;:args&lt;/code&gt; field.&lt;/p&gt; 
&lt;h4&gt;Claude Code CLI Configuration&lt;/h4&gt; 
&lt;p&gt;Configure Claude Code CLI hooks to call &lt;code&gt;claude-code-handle-hook&lt;/code&gt; via emacsclient by passing JSON data as an additional argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;hooks&quot;: {
    &quot;Notification&quot;: [
      {
        &quot;matcher&quot;: &quot;&quot;,
        &quot;hooks&quot;: [
          {
            &quot;type&quot;: &quot;command&quot;,
            &quot;command&quot;: &quot;emacsclient --eval \&quot;(claude-code-handle-hook &#39;notification \\\&quot;$CLAUDE_BUFFER_NAME\\\&quot;)\&quot; \&quot;$(cat)\&quot;&quot;
          }
        ]
      }
    ],
    &quot;Stop&quot;: [
      {
        &quot;matcher&quot;: &quot;&quot;,
        &quot;hooks&quot;: [
          {
            &quot;type&quot;: &quot;command&quot;,
            &quot;command&quot;: &quot;emacsclient --eval \&quot;(claude-code-handle-hook &#39;stop \\\&quot;$CLAUDE_BUFFER_NAME\\\&quot;)\&quot; \&quot;$(cat)\&quot;&quot;
          }
        ]
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;emacsclient --eval &quot;(claude-code-handle-hook &#39;notification \&quot;$CLAUDE_BUFFER_NAME\&quot;)&quot; &quot;$(cat)&quot; &quot;ARG1&quot; &quot;ARG2&quot; &quot;ARG3&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&quot;$(cat)&quot;&lt;/code&gt; - JSON data from stdin (always required)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ARG1&lt;/code&gt; is &lt;code&gt;&quot;$PWD&quot;&lt;/code&gt; - current working directory&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ARG2&lt;/code&gt; is &lt;code&gt;&quot;$(date -Iseconds)&quot;&lt;/code&gt; - timestamp&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ARG3&lt;/code&gt; is &lt;code&gt;&quot;$$&quot;&lt;/code&gt; - process ID&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;claude-code-handle-hook&lt;/code&gt; creates a message plist sent to listeners:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(list :type &#39;notification 
      :buffer-name &quot;$CLAUDE_BUFFER_NAME&quot;
      :json-data &quot;$(cat)&quot; 
      :args &#39;(&quot;ARG1&quot; &quot;ARG2&quot; &quot;ARG3&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/hooks&quot;&gt;Claude Code hooks documentation&lt;/a&gt; for details on setting up CLI hooks.&lt;/p&gt; 
&lt;h2&gt;Tips and Tricks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Paste images&lt;/strong&gt;: Use &lt;code&gt;C-v&lt;/code&gt; to paste images into the Claude window. Note that on macOS, this is &lt;code&gt;Control-v&lt;/code&gt;, not &lt;code&gt;Command-v&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Paste text&lt;/strong&gt;: Use &lt;code&gt;C-y&lt;/code&gt; (&lt;code&gt;yank&lt;/code&gt;) to paste text into the Claude window.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Save files before sending commands&lt;/strong&gt;: Claude reads files directly from disk, not from Emacs buffers. Always save your files (&lt;code&gt;C-x C-s&lt;/code&gt;) before sending commands that reference file content. Consider enabling &lt;code&gt;global-auto-revert-mode&lt;/code&gt; to automatically sync Emacs buffers with file changes made by Claude: &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(global-auto-revert-mode 1)
;; If files aren&#39;t reliably auto-reverting after Claude makes changes,
;; disable file notification and use polling instead:
(setq auto-revert-use-notify nil)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Auto-revert with hooks&lt;/strong&gt;: For more control over buffer reverting, use the auto-revert hook example that listens for Claude&#39;s file edits: &lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Load the auto-revert hook
(load-file &quot;examples/hooks/claude-code-auto-revert-hook.el&quot;)
;; Set up auto-revert (choose one):
(setup-claude-auto-revert)           ; Safe mode - skips modified buffers
(setup-claude-auto-revert-aggressive) ; Prompts to revert modified buffers
(setup-claude-auto-revert-org)       ; Special handling for org files
&lt;/code&gt;&lt;/pre&gt; Then configure the PostToolUse hook in your &lt;code&gt;~/.claude/settings.json&lt;/code&gt; (see &lt;code&gt;examples/hooks/auto-revert-settings.json&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Set your key binding for the command map.
(global-set-key (kbd &quot;C-c C-a&quot;) claude-code-command-map)

;; Set terminal type for the Claude terminal emulation (default is &quot;xterm-256color&quot;).
;; This determines terminal capabilities like color support.
;; See the documentation for eat-term-name for more information.
(setq claude-code-term-name &quot;xterm-256color&quot;)

;; Change the path to the Claude executable (default is &quot;claude&quot;).
;; Useful if Claude is not in your PATH or you want to use a specific version.
(setq claude-code-program &quot;/usr/local/bin/claude&quot;)

;; Set command line arguments for Claude
;; For example, to enable verbose output
(setq claude-code-program-switches &#39;(&quot;--verbose&quot;))

;; Add hooks to run after Claude is started
(add-hook &#39;claude-code-start-hook &#39;my-claude-setup-function)

;; Adjust initialization delay (default is 0.1 seconds)
;; This helps prevent terminal layout issues if the buffer is displayed before Claude is fully ready.
(setq claude-code-startup-delay 0.2)

;; Configure the buffer size threshold for confirmation prompt (default is 100000 characters)
;; If a buffer is larger than this threshold, claude-code-send-region will ask for confirmation
;; before sending the entire buffer to Claude.
(setq claude-code-large-buffer-threshold 100000)

;; Configure key binding style for entering newlines and sending messages in Claude buffers.
;; Available styles:
;;   &#39;newline-on-shift-return - S-return inserts newline, RET sends message (default)
;;   &#39;newline-on-alt-return   - M-return inserts newline, RET sends message
;;   &#39;shift-return-to-send    - RET inserts newline, S-return sends message
;;   &#39;super-return-to-send    - RET inserts newline, s-return sends message (Command+Return on macOS)
(setq claude-code-newline-keybinding-style &#39;newline-on-shift-return)

;; Enable or disable notifications when Claude finishes and awaits input (default is t).
(setq claude-code-enable-notifications t)

;; Customize the notification function (default is claude-code--default-notification).
;; The function should accept two arguments: title and message.
;; The default function displays a message and pulses the modeline for visual feedback.
(setq claude-code-notification-function &#39;claude-code--default-notification)

;; Example: Use your own notification function
(defun my-claude-notification (title message)
  &quot;Custom notification function for Claude Code.&quot;
  ;; Your custom notification logic here
  (message &quot;[%s] %s&quot; title message))
(setq claude-code-notification-function &#39;my-claude-notification)

;; Configure kill confirmation behavior (default is t).
;; When t, claude-code-kill prompts for confirmation before killing instances.
;; When nil, kills Claude instances without confirmation.
(setq claude-code-confirm-kill t)

;; Enable/disable window resize optimization (default is t)
;; When enabled, terminal reflows are only triggered when window width changes,
;; not when only height changes. This prevents unnecessary redraws when splitting
;; windows vertically, improving performance and reducing visual artifacts.
;; Set to nil if you experience issues with terminal display after resizing.
(setq claude-code-optimize-window-resize t)

;; Enable/disable no-delete-other-windows parameter (default is nil)
;; When enabled, Claude Code windows have the no-delete-other-windows
;; parameter set. This prevents the Claude window from being closed
;; when you run delete-other-windows or similar commands, keeping the
;; Claude buffer visible and accessible.
(setq claude-code-no-delete-other-windows t)

;; Automatically select the Claude buffer when toggling it open (default is nil)
;; When set to t, claude-code-toggle will switch focus to the Claude buffer
;; after displaying it. When nil, the buffer is displayed but focus remains
;; in the current buffer.
(setq claude-code-toggle-auto-select t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Customizing Window Position&lt;/h3&gt; 
&lt;h4&gt;Using the Display Window Function&lt;/h4&gt; 
&lt;p&gt;You can customize how Claude Code windows are displayed by setting &lt;code&gt;claude-code-display-window-fn&lt;/code&gt;. This function is called with the Claude buffer and should display it appropriately:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Use display-buffer with custom configuration
(setq claude-code-display-window-fn #&#39;display-buffer)

;; Example: Display in a side window using popwin
(setq claude-code-display-window-fn #&#39;display-buffer)
(let ((buffer-regexp &quot;^\\*claude:.+:.+\\*$&quot;))
  (push `(,buffer-regexp :regexp t :width 78 :position left :stick t :noselect nil :dedicated nil)
        popwin:special-display-config))

;; Example: Always display in a side window on the right
(defun my-claude-display-right (buffer)
  &quot;Display Claude buffer in right side window.&quot;
  (display-buffer buffer &#39;((display-buffer-in-side-window)
                           (side . right)
                           (window-width . 90))))
(setq claude-code-display-window-fn #&#39;my-claude-display-right)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using display-buffer-alist&lt;/h4&gt; 
&lt;p&gt;You can also control how the Claude Code window appears using Emacs&#39; &lt;code&gt;display-buffer-alist&lt;/code&gt;. For example, to make the Claude window appear in a persistent side window on the right side of your screen that is 90 characters wide:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-to-list &#39;display-buffer-alist
                 &#39;(&quot;^\\*claude&quot;
                   (display-buffer-in-side-window)
                   (side . right)
                   (window-width . 90)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This layout works best on wide screens.&lt;/p&gt; 
&lt;h3&gt;Font Setup&lt;/h3&gt; 
&lt;p&gt;Claude Code uses a lot of special unicode characters, and most common programming fonts don&#39;t include them all. To ensure that Claude renders special characters correctly in Emacs, you need to either use a font with really good unicode support, or set up fallback fonts for Emacs to use when your preferred font does not have a character.&lt;/p&gt; 
&lt;h3&gt;Using System Fonts as Fallbacks&lt;/h3&gt; 
&lt;p&gt;If you don&#39;t want to install any new fonts, you can use fonts already on your system as fallbacks. Here&#39;s a good setup for macOS, assuming your default, preferred font is &quot;Maple Mono&quot;. Substitute &quot;Maple Mono&quot; with whatever your default font is, and add this to your &lt;code&gt;init.el&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; important - tell emacs to use our fontset settings
(setq use-default-font-for-symbols nil)

;; add least preferred fonts first, most preferred last
(set-fontset-font t &#39;symbol &quot;STIX Two Math&quot; nil &#39;prepend)
(set-fontset-font t &#39;symbol &quot;Zapf Dingbats&quot; nil &#39;prepend)
(set-fontset-font t &#39;symbol &quot;Menlo&quot; nil &#39;prepend)

;; add your default, preferred font last
(set-fontset-font t &#39;symbol &quot;Maple Mono&quot; nil &#39;prepend)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The configuration on Linux or Windows will depend on the fonts available on your system. To test if your system has a certain font, evaluate this expression:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(find-font (font-spec :family &quot;DejaVu Sans Mono&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Linux it might look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq use-default-font-for-symbols nil)
(set-fontset-font t &#39;symbol &quot;DejaVu Sans Mono&quot; nil &#39;prepend)

;; your preferred, default font:
(set-fontset-font t &#39;symbol &quot;Maple Mono&quot; nil &#39;prepend)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using JuliaMono as Fallback&lt;/h3&gt; 
&lt;p&gt;A cross-platform approach is to install a fixed-width font with really good unicode symbols support. &lt;a href=&quot;https://juliamono.netlify.app/&quot;&gt;JuliaMono&lt;/a&gt; has excellent Unicode symbols support. To let the Claude Code buffer use Julia Mono for rendering Unicode characters while still using your default font for ASCII characters add this elisp code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(setq use-default-font-for-symbols nil)
(set-fontset-font t &#39;unicode (font-spec :family &quot;JuliaMono&quot;))

;; your preferred, default font:
(set-fontset-font t &#39;symbol &quot;Maple Mono&quot; nil &#39;prepend)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using a Custom Claude Code Font&lt;/h3&gt; 
&lt;p&gt;If instead you want to use a particular font just for the Claude Code REPL but use a different font everywhere else you can customize the &lt;code&gt;claude-code-repl-face&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(custom-set-faces
   &#39;(claude-code-repl-face ((t (:family &quot;JuliaMono&quot;)))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(If you set the Claude Code font to &quot;JuliaMono&quot;, you can skip all the fontset fallback configurations above.)&lt;/p&gt; 
&lt;h3&gt;Reducing Flickering on Window Configuration Changes&lt;/h3&gt; 
&lt;p&gt;To reduce flickering in the Claude buffer on window configuration changes, you can adjust eat latency variables in a hook. This reduces flickering at the cost of some increased latency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;  ;; reduce flickering
  (add-hook &#39;claude-code-start-hook
            (lambda ()
              (setq-local eat-minimum-latency 0.033
                          eat-maximum-latency 0.1)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Recent changes to claude-code.el have fixed flickering issues, making customization of these latency values less necessary.&lt;/p&gt; 
&lt;h3&gt;Fixing Spaces Between Vertical Bars&lt;/h3&gt; 
&lt;p&gt;If you see spaces between vertical bars in Claude&#39;s output, you can fix this by adjusting the &lt;code&gt;line-spacing&lt;/code&gt; value. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Set line spacing to reduce gaps between vertical bars
(setq line-spacing 0.1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or to apply it only to Claude buffers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;claude-code-start-hook
          (lambda ()
            ;; Reduce line spacing to fix vertical bar gaps
            (setq-local line-spacing 0.1))) 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;h3&gt;GIF Demo&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/images/demo.gif&quot; alt=&quot;Claude Code Emacs Demo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This &lt;a href=&quot;https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/demo.gif&quot;&gt;demo&lt;/a&gt; shows claude-code.el in action, including accessing the transient menu, sending commands with file context, and fixing errors.&lt;/p&gt; 
&lt;h3&gt;Video Demo&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=K8sCVLmFyyU&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/K8sCVLmFyyU/0.jpg&quot; alt=&quot;The Emacs Claude Code Package&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Check out this &lt;a href=&quot;https://www.youtube.com/watch?v=K8sCVLmFyyU&quot;&gt;video demo&lt;/a&gt; demonstrating the claude-code.el package. This video was kindly created and shared by a user of the package.&lt;/p&gt; 
&lt;h3&gt;Eat-specific Customization&lt;/h3&gt; 
&lt;p&gt;When using the eat terminal backend, there are additional customization options available:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Customize cursor type in read-only mode (default is &#39;(box nil nil))
;; The format is (CURSOR-ON BLINKING-FREQUENCY CURSOR-OFF)
;; Cursor type options: &#39;box, &#39;hollow, &#39;bar, &#39;hbar, or nil
(setq claude-code-eat-read-only-mode-cursor-type &#39;(bar nil nil))

;; Control eat scrollback size for longer conversations
;; The default is 131072 characters, which is usually sufficient
;; For very long Claude sessions, you may want to increase it
;; WARNING: Setting to nil (unlimited) is NOT recommended with Claude Code
;; as it can cause severe performance issues with long sessions
(setq eat-term-scrollback-size 500000)  ; Increase to 500k characters
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Vterm-specific Customization&lt;/h3&gt; 
&lt;p&gt;When using the vterm terminal backend, there are additional customization options available:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Enable/disable buffering to prevent flickering on multi-line input (default is t)
;; When enabled, vterm output that appears to be redrawing multi-line input boxes
;; will be buffered briefly and processed in a single batch
;; This prevents flickering when Claude redraws its input box as it expands
(setq claude-code-vterm-buffer-multiline-output t)

;; Control the delay before processing buffered vterm output (default is 0.01)
;; This is the time in seconds that vterm waits to collect output bursts
;; A longer delay may reduce flickering more but could feel less responsive
;; The default of 0.01 seconds (10ms) provides a good balance
(setq claude-code-vterm-multiline-delay 0.01)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Vterm Scrollback Configuration&lt;/h4&gt; 
&lt;p&gt;Vterm has its own scrollback limit that is separate from claude-code.el settings. By default, vterm limits scrollback to 1000 lines. To allow scrolling back to the top of long Claude conversations, you can increase &lt;code&gt;vterm-max-scrollback&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Increase vterm scrollback to 100000 lines (the maximum allowed)
;; Note: This increases memory usage
(setq vterm-max-scrollback 100000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you prefer not to set this globally, you can set it only for Claude buffers using a hook:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;(add-hook &#39;claude-code-start-hook
          (lambda ()
            ;; Only increase scrollback for vterm backend
            (when (eq claude-code-terminal-backend &#39;vterm)
              (setq-local vterm-max-scrollback 100000))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This ensures that only Claude buffers have increased scrollback, while other vterm buffers maintain the default limit.&lt;/p&gt; 
&lt;h4&gt;Vterm Window Width Configuration&lt;/h4&gt; 
&lt;p&gt;Vterm has a minimum window width setting that affects how text wraps. By default, &lt;code&gt;vterm-min-window-width&lt;/code&gt; is set to 80 columns. If you resize the Claude window to be narrower than this limit, the Claude input box may wrap incorrectly, causing display issues.&lt;/p&gt; 
&lt;p&gt;If you prefer to use Claude in a narrow window (for example, in a side window), you can adjust &lt;code&gt;vterm-min-window-width&lt;/code&gt;. Note that this must be set as a custom variable, either via &lt;code&gt;custom-set-variables&lt;/code&gt; or &lt;code&gt;setop&lt;/code&gt;, &lt;code&gt;setq&lt;/code&gt; won&#39;t work:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Allow vterm windows to be as narrow as 40 columns
(setopt vterm-min-window-width 40)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is particularly useful if you like to keep Claude in a narrow side window while coding in your main window.&lt;/p&gt; 
&lt;h4&gt;Vterm Timer Delay&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;vterm-timer-delay&lt;/code&gt; variable controls how often vterm refreshes its buffer when receiving data. This delay (in seconds) helps manage performance when processing large amounts of output. Setting it to &lt;code&gt;nil&lt;/code&gt; disables the delay entirely.&lt;/p&gt; 
&lt;p&gt;The default value of &lt;code&gt;0.1&lt;/code&gt; seconds works well with Claude Code. Since Claude often sends large bursts of data when generating code or explanations, reducing this delay or disabling it (&lt;code&gt;nil&lt;/code&gt;) can significantly degrade performance. Stick with the default, or use a slightly higher value unless you experience specific display issues.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the Apache License 2.0 - see the LICENSE file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>magnars/dash.el</title>
      <link>https://github.com/magnars/dash.el</link>
      <description>&lt;p&gt;A modern list library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/magnars/dash.el/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/magnars/dash.el/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.gnu.org/packages/dash.html&quot;&gt;&lt;img src=&quot;https://elpa.gnu.org/packages/dash.svg?sanitize=true&quot; alt=&quot;GNU ELPA&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.gnu.org/devel/dash.html&quot;&gt;&lt;img src=&quot;https://elpa.gnu.org/devel/dash.svg?sanitize=true&quot; alt=&quot;GNU-devel ELPA&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/dash&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/dash-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/dash&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/dash-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/rainbow-dash.png&quot; /&gt; dash.el&lt;/h1&gt; 
&lt;p&gt;A modern list API for Emacs. No &lt;a href=&quot;https://gnu.org/software/emacs/manual/html_node/cl/&quot;&gt;&lt;code&gt;&#39;cl&lt;/code&gt;&lt;/a&gt; required.&lt;/p&gt; 
&lt;p&gt;See the end of the file for license conditions.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#change-log&quot;&gt;Change log&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#functions&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#contributors&quot;&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Change log&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/NEWS.md&quot;&gt;&lt;code&gt;NEWS.md&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Dash is available on &lt;a href=&quot;https://elpa.gnu.org/&quot;&gt;GNU ELPA&lt;/a&gt;, &lt;a href=&quot;https://elpa.gnu.org/devel/&quot;&gt;GNU-devel ELPA&lt;/a&gt;, and &lt;a href=&quot;https://melpa.org/&quot;&gt;MELPA&lt;/a&gt;, and can be installed with the standard command &lt;code&gt;package-install&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x package-install RET dash RET
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html&quot;&gt;&lt;code&gt;(info &quot;(emacs) Package Installation&quot;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can just dump &lt;code&gt;dash.el&lt;/code&gt; in your &lt;code&gt;load-path&lt;/code&gt; somewhere. See &lt;a href=&quot;https://gnu.org/software/emacs/manual/html_node/emacs/Lisp-Libraries.html&quot;&gt;&lt;code&gt;(info &quot;(emacs) Lisp Libraries&quot;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using in a package&lt;/h3&gt; 
&lt;p&gt;Add something like this to the library&#39;s headers:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;;; Package-Requires: ((dash &quot;2.20.0&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html&quot;&gt;&lt;code&gt;(info &quot;(elisp) Library Headers&quot;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Fontification of special variables&lt;/h3&gt; 
&lt;p&gt;Font lock of special Dash variables (&lt;code&gt;it&lt;/code&gt;, &lt;code&gt;acc&lt;/code&gt;, etc.) in Emacs Lisp buffers can optionally be enabled with the autoloaded minor mode &lt;code&gt;dash-fontify-mode&lt;/code&gt;. In older Emacs versions which do not dynamically detect macros, the minor mode also fontifies Dash macro calls.&lt;/p&gt; 
&lt;p&gt;To automatically enable the minor mode in all Emacs Lisp buffers, just call its autoloaded global counterpart &lt;code&gt;global-dash-fontify-mode&lt;/code&gt;, either interactively or from your &lt;code&gt;user-init-file&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(global-dash-fontify-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Info symbol lookup&lt;/h3&gt; 
&lt;p&gt;While editing Elisp files, you can use &lt;code&gt;C-h S&lt;/code&gt; (&lt;code&gt;info-lookup-symbol&lt;/code&gt;) to look up Elisp symbols in the relevant Info manuals (see &lt;a href=&quot;https://gnu.org/software/emacs/manual/html_node/emacs/Info-Lookup.html&quot;&gt;&lt;code&gt;(emacs) Info Lookup&lt;/code&gt;&lt;/a&gt;). To enable the same for Dash symbols, use the command &lt;code&gt;dash-register-info-lookup&lt;/code&gt;. It can be called directly when needed, or automatically from your &lt;code&gt;user-init-file&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(with-eval-after-load &#39;info-look
  (dash-register-info-lookup))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Functions&lt;/h2&gt; 
&lt;p&gt;All functions and constructs in the library use a dash (&lt;code&gt;-&lt;/code&gt;) prefix.&lt;/p&gt; 
&lt;p&gt;The library also provides anaphoric macro versions of functions where that makes sense. The names of these macros are prefixed with two dashes (&lt;code&gt;--&lt;/code&gt;) instead of one.&lt;/p&gt; 
&lt;p&gt;While &lt;code&gt;-map&lt;/code&gt; applies a function to each element of a list, its anaphoric counterpart &lt;code&gt;--map&lt;/code&gt; evaluates a form with the local variable &lt;code&gt;it&lt;/code&gt; temporarily bound to the current list element instead. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-map (lambda (n) (* n n)) &#39;(1 2 3 4)) ; Normal version.
(--map (* it it) &#39;(1 2 3 4))           ; Anaphoric version.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The normal version can of course also be written as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(defun my-square (n)
  &quot;Return N multiplied by itself.&quot;
  (* n n))

(-map #&#39;my-square &#39;(1 2 3 4))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This demonstrates the utility of both versions.&lt;/p&gt; 
&lt;h3&gt;Maps&lt;/h3&gt; 
&lt;p&gt;Functions in this category take a transforming function, which is then applied sequentially to each or selected elements of the input list. The results are collected in order and returned as a new list.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-fn-list&quot;&gt;&lt;code&gt;-map&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-when-pred-rep-list&quot;&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-first-pred-rep-list&quot;&gt;&lt;code&gt;-map-first&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-last-pred-rep-list&quot;&gt;&lt;code&gt;-map-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-indexed-fn-list&quot;&gt;&lt;code&gt;-map-indexed&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-annotate-fn-list&quot;&gt;&lt;code&gt;-annotate&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-pred-fun-list&quot;&gt;&lt;code&gt;-splice&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred fun list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-list-pred-new-list-list&quot;&gt;&lt;code&gt;-splice-list&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred new-list list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-mapcat-fn-list&quot;&gt;&lt;code&gt;-mapcat&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-copy-list&quot;&gt;&lt;code&gt;-copy&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Sublist selection&lt;/h3&gt; 
&lt;p&gt;Functions returning a sublist of the original list.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-filter-pred-list&quot;&gt;&lt;code&gt;-filter&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-pred-list&quot;&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-first-pred-list&quot;&gt;&lt;code&gt;-remove-first&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-last-pred-list&quot;&gt;&lt;code&gt;-remove-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-item-item-list&quot;&gt;&lt;code&gt;-remove-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-non-nil-list&quot;&gt;&lt;code&gt;-non-nil&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-slice-list-from-optional-to-step&quot;&gt;&lt;code&gt;-slice&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list from &amp;amp;optional to step)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-n-list&quot;&gt;&lt;code&gt;-take&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-last-n-list&quot;&gt;&lt;code&gt;-take-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-n-list&quot;&gt;&lt;code&gt;-drop&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-last-n-list&quot;&gt;&lt;code&gt;-drop-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-while-pred-list&quot;&gt;&lt;code&gt;-take-while&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-while-pred-list&quot;&gt;&lt;code&gt;-drop-while&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-by-indices-indices-list&quot;&gt;&lt;code&gt;-select-by-indices&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(indices list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-columns-columns-table&quot;&gt;&lt;code&gt;-select-columns&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(columns table)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-column-column-table&quot;&gt;&lt;code&gt;-select-column&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(column table)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;List to list&lt;/h3&gt; 
&lt;p&gt;Functions returning a modified copy of the input list.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-keep-fn-list&quot;&gt;&lt;code&gt;-keep&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-concat-rest-sequences&quot;&gt;&lt;code&gt;-concat&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest sequences)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-l&quot;&gt;&lt;code&gt;-flatten&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(l)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-n-num-list&quot;&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(num list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-old-new-list&quot;&gt;&lt;code&gt;-replace&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-first-old-new-list&quot;&gt;&lt;code&gt;-replace-first&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-last-old-new-list&quot;&gt;&lt;code&gt;-replace-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-insert-at-n-x-list&quot;&gt;&lt;code&gt;-insert-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n x list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-at-n-x-list&quot;&gt;&lt;code&gt;-replace-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n x list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-update-at-n-func-list&quot;&gt;&lt;code&gt;-update-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n func list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-at-n-list&quot;&gt;&lt;code&gt;-remove-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-at-indices-indices-list&quot;&gt;&lt;code&gt;-remove-at-indices&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(indices list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Reductions&lt;/h3&gt; 
&lt;p&gt;Functions reducing lists to a single value (which may also be a list).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&quot;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&quot;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-from-fn-init-list&quot;&gt;&lt;code&gt;-reductions-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-from-fn-init-list&quot;&gt;&lt;code&gt;-reductions-r-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&quot;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-fn-list&quot;&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-count-pred-list&quot;&gt;&lt;code&gt;-count&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-sum-list&quot;&gt;&lt;code&gt;-sum&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-running-sum-list&quot;&gt;&lt;code&gt;-running-sum&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-product-list&quot;&gt;&lt;code&gt;-product&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-running-product-list&quot;&gt;&lt;code&gt;-running-product&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-inits-list&quot;&gt;&lt;code&gt;-inits&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tails-list&quot;&gt;&lt;code&gt;-tails&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-common-prefix-rest-lists&quot;&gt;&lt;code&gt;-common-prefix&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-common-suffix-rest-lists&quot;&gt;&lt;code&gt;-common-suffix&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-min-list&quot;&gt;&lt;code&gt;-min&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-min-by-comparator-list&quot;&gt;&lt;code&gt;-min-by&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-max-list&quot;&gt;&lt;code&gt;-max&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-max-by-comparator-list&quot;&gt;&lt;code&gt;-max-by&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-frequencies-list&quot;&gt;&lt;code&gt;-frequencies&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Unfolding&lt;/h3&gt; 
&lt;p&gt;Operations dual to reductions, building lists from a seed value rather than consuming a list to produce a single value.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-iterate-fun-init-n&quot;&gt;&lt;code&gt;-iterate&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fun init n)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-unfold-fun-seed&quot;&gt;&lt;code&gt;-unfold&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fun seed)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-repeat-n-x&quot;&gt;&lt;code&gt;-repeat&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n x)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-cycle-list&quot;&gt;&lt;code&gt;-cycle&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Predicates&lt;/h3&gt; 
&lt;p&gt;Reductions of one or more lists to a boolean value.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-some-pred-list&quot;&gt;&lt;code&gt;-some&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-every-pred-list&quot;&gt;&lt;code&gt;-every&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-any-pred-list&quot;&gt;&lt;code&gt;-any?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-all-pred-list&quot;&gt;&lt;code&gt;-all?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-none-pred-list&quot;&gt;&lt;code&gt;-none?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-only-some-pred-list&quot;&gt;&lt;code&gt;-only-some?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-contains-list-element&quot;&gt;&lt;code&gt;-contains?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list element)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-is-prefix-prefix-list&quot;&gt;&lt;code&gt;-is-prefix?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(prefix list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-is-suffix-suffix-list&quot;&gt;&lt;code&gt;-is-suffix?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(suffix list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-is-infix-infix-list&quot;&gt;&lt;code&gt;-is-infix?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(infix list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-cons-pair-obj&quot;&gt;&lt;code&gt;-cons-pair?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(obj)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Partitioning&lt;/h3&gt; 
&lt;p&gt;Functions partitioning the input list into a list of lists.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-at-n-list&quot;&gt;&lt;code&gt;-split-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-with-pred-list&quot;&gt;&lt;code&gt;-split-with&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-on-item-list&quot;&gt;&lt;code&gt;-split-on&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-when-fn-list&quot;&gt;&lt;code&gt;-split-when&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-separate-pred-list&quot;&gt;&lt;code&gt;-separate&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-n-list&quot;&gt;&lt;code&gt;-partition&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-all-n-list&quot;&gt;&lt;code&gt;-partition-all&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-in-steps-n-step-list&quot;&gt;&lt;code&gt;-partition-in-steps&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n step list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-all-in-steps-n-step-list&quot;&gt;&lt;code&gt;-partition-all-in-steps&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n step list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-by-fn-list&quot;&gt;&lt;code&gt;-partition-by&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-by-header-fn-list&quot;&gt;&lt;code&gt;-partition-by-header&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-after-pred-pred-list&quot;&gt;&lt;code&gt;-partition-after-pred&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-before-pred-pred-list&quot;&gt;&lt;code&gt;-partition-before-pred&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-before-item-item-list&quot;&gt;&lt;code&gt;-partition-before-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-after-item-item-list&quot;&gt;&lt;code&gt;-partition-after-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-group-by-fn-list&quot;&gt;&lt;code&gt;-group-by&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Indexing&lt;/h3&gt; 
&lt;p&gt;Functions retrieving or sorting based on list indices and related predicates.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-elem-index-elem-list&quot;&gt;&lt;code&gt;-elem-index&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(elem list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-elem-indices-elem-list&quot;&gt;&lt;code&gt;-elem-indices&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(elem list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-index-pred-list&quot;&gt;&lt;code&gt;-find-index&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-last-index-pred-list&quot;&gt;&lt;code&gt;-find-last-index&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-indices-pred-list&quot;&gt;&lt;code&gt;-find-indices&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-grade-up-comparator-list&quot;&gt;&lt;code&gt;-grade-up&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-grade-down-comparator-list&quot;&gt;&lt;code&gt;-grade-down&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Set operations&lt;/h3&gt; 
&lt;p&gt;Operations pretending lists are sets.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-union-list1-list2&quot;&gt;&lt;code&gt;-union&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-difference-list1-list2&quot;&gt;&lt;code&gt;-difference&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-intersection-list1-list2&quot;&gt;&lt;code&gt;-intersection&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-powerset-list&quot;&gt;&lt;code&gt;-powerset&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-permutations-list&quot;&gt;&lt;code&gt;-permutations&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-distinct-list&quot;&gt;&lt;code&gt;-distinct&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-same-items-list1-list2&quot;&gt;&lt;code&gt;-same-items?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other list operations&lt;/h3&gt; 
&lt;p&gt;Other list functions not fit to be classified elsewhere.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-rotate-n-list&quot;&gt;&lt;code&gt;-rotate&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-cons-rest-args&quot;&gt;&lt;code&gt;-cons*&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-snoc-list-elem-rest-elements&quot;&gt;&lt;code&gt;-snoc&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list elem &amp;amp;rest elements)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-interpose-sep-list&quot;&gt;&lt;code&gt;-interpose&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(sep list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-interleave-rest-lists&quot;&gt;&lt;code&gt;-interleave&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-iota-count-optional-start-step&quot;&gt;&lt;code&gt;-iota&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(count &amp;amp;optional start step)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-with-fn-list1-list2&quot;&gt;&lt;code&gt;-zip-with&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list1 list2)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-pair-list1-list2&quot;&gt;&lt;code&gt;-zip-pair&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&quot;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-fill-fill-value-rest-lists&quot;&gt;&lt;code&gt;-zip-lists-fill&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&quot;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-fill-fill-value-rest-lists&quot;&gt;&lt;code&gt;-zip-fill&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-unzip-lists-lists&quot;&gt;&lt;code&gt;-unzip-lists&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-unzip-lists&quot;&gt;&lt;code&gt;-unzip&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-pad-fill-value-rest-lists&quot;&gt;&lt;code&gt;-pad&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-table-fn-rest-lists&quot;&gt;&lt;code&gt;-table&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-table-flat-fn-rest-lists&quot;&gt;&lt;code&gt;-table-flat&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-pred-list&quot;&gt;&lt;code&gt;-first&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-pred-list&quot;&gt;&lt;code&gt;-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-item-list&quot;&gt;&lt;code&gt;-first-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-second-item-list&quot;&gt;&lt;code&gt;-second-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-third-item-list&quot;&gt;&lt;code&gt;-third-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-fourth-item-list&quot;&gt;&lt;code&gt;-fourth-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-fifth-item-list&quot;&gt;&lt;code&gt;-fifth-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-item-list&quot;&gt;&lt;code&gt;-last-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-butlast-list&quot;&gt;&lt;code&gt;-butlast&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-sort-comparator-list&quot;&gt;&lt;code&gt;-sort&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-list-arg&quot;&gt;&lt;code&gt;-list&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(arg)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-fix-fn-list&quot;&gt;&lt;code&gt;-fix&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Tree operations&lt;/h3&gt; 
&lt;p&gt;Functions pretending lists are trees.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-seq-branch-children-tree&quot;&gt;&lt;code&gt;-tree-seq&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(branch children tree)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-map-fn-tree&quot;&gt;&lt;code&gt;-tree-map&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-map-nodes-pred-fun-tree&quot;&gt;&lt;code&gt;-tree-map-nodes&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred fun tree)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-reduce-fn-tree&quot;&gt;&lt;code&gt;-tree-reduce&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-reduce-from-fn-init-value-tree&quot;&gt;&lt;code&gt;-tree-reduce-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init-value tree)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-mapreduce-fn-folder-tree&quot;&gt;&lt;code&gt;-tree-mapreduce&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn folder tree)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-mapreduce-from-fn-folder-init-value-tree&quot;&gt;&lt;code&gt;-tree-mapreduce-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn folder init-value tree)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-clone-list&quot;&gt;&lt;code&gt;-clone&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Threading macros&lt;/h3&gt; 
&lt;p&gt;Macros that conditionally combine sequential forms for brevity or readability.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&quot;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&quot;&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#---x-rest-forms&quot;&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-as--value-variable-rest-forms&quot;&gt;&lt;code&gt;-as-&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(value variable &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-some--x-optional-form-rest-more&quot;&gt;&lt;code&gt;-some-&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-some--x-optional-form-rest-more&quot;&gt;&lt;code&gt;-some-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-some---expr-rest-forms&quot;&gt;&lt;code&gt;-some--&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(expr &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-doto-init-rest-forms&quot;&gt;&lt;code&gt;-doto&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(init &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Binding&lt;/h3&gt; 
&lt;p&gt;Macros that combine &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;let*&lt;/code&gt; with destructuring and flow control.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-when-let-var-val-rest-body&quot;&gt;&lt;code&gt;-when-let&lt;/code&gt;&lt;/a&gt; &lt;code&gt;((var val) &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-when-let-vars-vals-rest-body&quot;&gt;&lt;code&gt;-when-let*&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(vars-vals &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-if-let-var-val-then-rest-else&quot;&gt;&lt;code&gt;-if-let&lt;/code&gt;&lt;/a&gt; &lt;code&gt;((var val) then &amp;amp;rest else)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-if-let-vars-vals-then-rest-else&quot;&gt;&lt;code&gt;-if-let*&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(vars-vals then &amp;amp;rest else)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let*&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-lambda-match-form-rest-body&quot;&gt;&lt;code&gt;-lambda&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(match-form &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-setq-match-form-val&quot;&gt;&lt;code&gt;-setq&lt;/code&gt;&lt;/a&gt; &lt;code&gt;([match-form val] ...)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Side effects&lt;/h3&gt; 
&lt;p&gt;Functions iterating over lists for side effect only.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-list-fn&quot;&gt;&lt;code&gt;-each&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-while-list-pred-fn&quot;&gt;&lt;code&gt;-each-while&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-indexed-list-fn&quot;&gt;&lt;code&gt;-each-indexed&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-r-list-fn&quot;&gt;&lt;code&gt;-each-r&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-r-while-list-pred-fn&quot;&gt;&lt;code&gt;-each-r-while&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-dotimes-num-fn&quot;&gt;&lt;code&gt;-dotimes&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(num fn)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Destructive operations&lt;/h3&gt; 
&lt;p&gt;Macros that modify variables holding lists.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#cons-car-cdr&quot;&gt;&lt;code&gt;!cons&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(car cdr)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#cdr-list&quot;&gt;&lt;code&gt;!cdr&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Function combinators&lt;/h3&gt; 
&lt;p&gt;Functions that manipulate and compose other functions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partial-fun-rest-args&quot;&gt;&lt;code&gt;-partial&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fun &amp;amp;rest args)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-rpartial-fn-rest-args&quot;&gt;&lt;code&gt;-rpartial&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest args)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-juxt-rest-fns&quot;&gt;&lt;code&gt;-juxt&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-compose-rest-fns&quot;&gt;&lt;code&gt;-compose&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-applify-fn&quot;&gt;&lt;code&gt;-applify&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-on-op-trans&quot;&gt;&lt;code&gt;-on&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(op trans)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-flip-fn&quot;&gt;&lt;code&gt;-flip&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-rotate-args-n-fn&quot;&gt;&lt;code&gt;-rotate-args&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n fn)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-const-c&quot;&gt;&lt;code&gt;-const&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(c)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-cut-rest-params&quot;&gt;&lt;code&gt;-cut&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest params)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-not-pred&quot;&gt;&lt;code&gt;-not&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-orfn-rest-preds&quot;&gt;&lt;code&gt;-orfn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-andfn-rest-preds&quot;&gt;&lt;code&gt;-andfn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-iteratefn-fn-n&quot;&gt;&lt;code&gt;-iteratefn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn n)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-fixfn-fn-optional-equal-test-halt-test&quot;&gt;&lt;code&gt;-fixfn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn &amp;amp;optional equal-test halt-test)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-prodfn-rest-fns&quot;&gt;&lt;code&gt;-prodfn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Maps&lt;/h2&gt; 
&lt;p&gt;Functions in this category take a transforming function, which is then applied sequentially to each or selected elements of the input list. The results are collected in order and returned as a new list.&lt;/p&gt; 
&lt;h4&gt;-map &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt; and return the list of results.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--map&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-map (lambda (num) (* num num)) &#39;(1 2 3 4)) ;; =&amp;gt; (1 4 9 16)
(-map #&#39;1+ &#39;(1 2 3 4)) ;; =&amp;gt; (2 3 4 5)
(--map (* it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 4 9 16)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-map-when &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Use &lt;code&gt;pred&lt;/code&gt; to conditionally apply &lt;code&gt;rep&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;. Return a copy of &lt;code&gt;list&lt;/code&gt; where the items for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; are unchanged, and the rest are mapped through the &lt;code&gt;rep&lt;/code&gt; function.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-replace-where&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-update-at-n-func-list&quot;&gt;&lt;code&gt;-update-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-map-when &#39;even? &#39;square &#39;(1 2 3 4)) ;; =&amp;gt; (1 4 3 16)
(--map-when (&amp;gt; it 2) (* it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 9 16)
(--map-when (= it 2) 17 &#39;(1 2 3 4)) ;; =&amp;gt; (1 17 3 4)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-map-first &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Use &lt;code&gt;pred&lt;/code&gt; to determine the first item in &lt;code&gt;list&lt;/code&gt; to call &lt;code&gt;rep&lt;/code&gt; on. Return a copy of &lt;code&gt;list&lt;/code&gt; where the first item for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; is replaced with the result of calling &lt;code&gt;rep&lt;/code&gt; on that item.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-when-pred-rep-list&quot;&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-first-old-new-list&quot;&gt;&lt;code&gt;-replace-first&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-map-first &#39;even? &#39;square &#39;(1 2 3 4)) ;; =&amp;gt; (1 4 3 4)
(--map-first (&amp;gt; it 2) (* it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 9 4)
(--map-first (= it 2) 17 &#39;(1 2 3 2)) ;; =&amp;gt; (1 17 3 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-map-last &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Use &lt;code&gt;pred&lt;/code&gt; to determine the last item in &lt;code&gt;list&lt;/code&gt; to call &lt;code&gt;rep&lt;/code&gt; on. Return a copy of &lt;code&gt;list&lt;/code&gt; where the last item for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; is replaced with the result of calling &lt;code&gt;rep&lt;/code&gt; on that item.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-when-pred-rep-list&quot;&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-last-old-new-list&quot;&gt;&lt;code&gt;-replace-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-map-last &#39;even? &#39;square &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 3 16)
(--map-last (&amp;gt; it 2) (* it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 3 16)
(--map-last (= it 2) 17 &#39;(1 2 3 2)) ;; =&amp;gt; (1 2 3 17)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-map-indexed &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each index and item in &lt;code&gt;list&lt;/code&gt; and return the list of results. This is like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-fn-list&quot;&gt;&lt;code&gt;-map&lt;/code&gt;&lt;/a&gt;, but &lt;code&gt;fn&lt;/code&gt; takes two arguments: the index of the current element within &lt;code&gt;list&lt;/code&gt;, and the element itself.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--map-indexed&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For a side-effecting variant, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-indexed-list-fn&quot;&gt;&lt;code&gt;-each-indexed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-map-indexed (lambda (index item) (- item index)) &#39;(1 2 3 4)) ;; =&amp;gt; (1 1 1 1)
(--map-indexed (- it it-index) &#39;(1 2 3 4)) ;; =&amp;gt; (1 1 1 1)
(-map-indexed #&#39;* &#39;(1 2 3 4)) ;; =&amp;gt; (0 2 6 12)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-annotate &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Pair each item in &lt;code&gt;list&lt;/code&gt; with the result of passing it to &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Return an alist of (&lt;code&gt;result&lt;/code&gt; . &lt;code&gt;item&lt;/code&gt;), where each &lt;code&gt;item&lt;/code&gt; is the corresponding element of &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;result&lt;/code&gt; is the value obtained by calling &lt;code&gt;fn&lt;/code&gt; on &lt;code&gt;item&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--annotate&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-annotate #&#39;1+ &#39;(1 2 3)) ;; =&amp;gt; ((2 . 1) (3 . 2) (4 . 3))
(-annotate #&#39;length &#39;((f o o) (bar baz))) ;; =&amp;gt; ((3 f o o) (2 bar baz))
(--annotate (&amp;gt; it 1) &#39;(0 1 2 3)) ;; =&amp;gt; ((nil . 0) (nil . 1) (t . 2) (t . 3))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-splice &lt;code&gt;(pred fun list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Splice lists generated by &lt;code&gt;fun&lt;/code&gt; in place of items satisfying &lt;code&gt;pred&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Call &lt;code&gt;pred&lt;/code&gt; on each element of &lt;code&gt;list&lt;/code&gt;. Whenever the result of &lt;code&gt;pred&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, leave that &lt;code&gt;it&lt;/code&gt; as-is. Otherwise, call &lt;code&gt;fun&lt;/code&gt; on the same &lt;code&gt;it&lt;/code&gt; that satisfied &lt;code&gt;pred&lt;/code&gt;. The result should be a (possibly empty) list of items to splice in place of &lt;code&gt;it&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This can be useful as an alternative to the &lt;code&gt;,@&lt;/code&gt; construct in a ``&#39; structure, in case you need to splice several lists at marked positions (for example with keywords).&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--splice&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-list-pred-new-list-list&quot;&gt;&lt;code&gt;-splice-list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-insert-at-n-x-list&quot;&gt;&lt;code&gt;-insert-at&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-splice #&#39;numberp (lambda (n) (list n n)) &#39;(a 1 b 2)) ;; =&amp;gt; (a 1 1 b 2 2)
(--splice t (list it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 1 2 2 3 3 4 4)
(--splice (eq it :magic) &#39;((magical) (code)) &#39;((foo) :magic (bar))) ;; =&amp;gt; ((foo) (magical) (code) (bar))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-splice-list &lt;code&gt;(pred new-list list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Splice &lt;code&gt;new-list&lt;/code&gt; in place of elements matching &lt;code&gt;pred&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-pred-fun-list&quot;&gt;&lt;code&gt;-splice&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-insert-at-n-x-list&quot;&gt;&lt;code&gt;-insert-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-splice-list &#39;keywordp &#39;(a b c) &#39;(1 :foo 2)) ;; =&amp;gt; (1 a b c 2)
(-splice-list &#39;keywordp nil &#39;(1 :foo 2)) ;; =&amp;gt; (1 2)
(--splice-list (keywordp it) &#39;(a b c) &#39;(1 :foo 2)) ;; =&amp;gt; (1 a b c 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-mapcat &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the concatenation of the result of mapping &lt;code&gt;fn&lt;/code&gt; over &lt;code&gt;list&lt;/code&gt;. Thus function &lt;code&gt;fn&lt;/code&gt; should return a list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-mapcat &#39;list &#39;(1 2 3)) ;; =&amp;gt; (1 2 3)
(-mapcat (lambda (item) (list 0 item)) &#39;(1 2 3)) ;; =&amp;gt; (0 1 0 2 0 3)
(--mapcat (list 0 it) &#39;(1 2 3)) ;; =&amp;gt; (0 1 0 2 0 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-copy &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Create a shallow copy of &lt;code&gt;list&lt;/code&gt;. The elements of &lt;code&gt;list&lt;/code&gt; are not copied; they are shared with the original.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-copy &#39;(1 2 3)) ;; =&amp;gt; (1 2 3)
(let ((a &#39;(1 2 3))) (eq a (-copy a))) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sublist selection&lt;/h2&gt; 
&lt;p&gt;Functions returning a sublist of the original list.&lt;/p&gt; 
&lt;h4&gt;-filter &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list of the items in &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-select&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--filter&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For similar operations, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-keep-fn-list&quot;&gt;&lt;code&gt;-keep&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-pred-list&quot;&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-filter (lambda (num) (= 0 (% num 2))) &#39;(1 2 3 4)) ;; =&amp;gt; (2 4)
(-filter #&#39;natnump &#39;(-2 -1 0 1 2)) ;; =&amp;gt; (0 1 2)
(--filter (= 0 (% it 2)) &#39;(1 2 3 4)) ;; =&amp;gt; (2 4)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-remove &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list of the items in &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-reject&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--remove&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For similar operations, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-keep-fn-list&quot;&gt;&lt;code&gt;-keep&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-filter-pred-list&quot;&gt;&lt;code&gt;-filter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-remove (lambda (num) (= 0 (% num 2))) &#39;(1 2 3 4)) ;; =&amp;gt; (1 3)
(-remove #&#39;natnump &#39;(-2 -1 0 1 2)) ;; =&amp;gt; (-2 -1)
(--remove (= 0 (% it 2)) &#39;(1 2 3 4)) ;; =&amp;gt; (1 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-remove-first &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Remove the first item from &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. This is a non-destructive operation, but only the front of &lt;code&gt;list&lt;/code&gt; leading up to the removed item is a copy; the rest is &lt;code&gt;list&lt;/code&gt;&#39;s original tail. If no item is removed, then the result is a complete copy.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-reject-first&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--remove-first&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-first-pred-rep-list&quot;&gt;&lt;code&gt;-map-first&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-item-item-list&quot;&gt;&lt;code&gt;-remove-item&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-last-pred-list&quot;&gt;&lt;code&gt;-remove-last&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-remove-first #&#39;natnump &#39;(-2 -1 0 1 2)) ;; =&amp;gt; (-2 -1 1 2)
(-remove-first #&#39;stringp &#39;(1 2 &quot;first&quot; &quot;second&quot;)) ;; =&amp;gt; (1 2 &quot;second&quot;)
(--remove-first (&amp;gt; it 3) &#39;(1 2 3 4 5 6)) ;; =&amp;gt; (1 2 3 5 6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-remove-last &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Remove the last item from &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. The result is a copy of &lt;code&gt;list&lt;/code&gt; regardless of whether an element is removed.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-reject-last&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--remove-last&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-last-pred-rep-list&quot;&gt;&lt;code&gt;-map-last&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-item-item-list&quot;&gt;&lt;code&gt;-remove-item&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-first-pred-list&quot;&gt;&lt;code&gt;-remove-first&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-remove-last #&#39;natnump &#39;(1 3 5 4 7 8 10 -11)) ;; =&amp;gt; (1 3 5 4 7 8 -11)
(-remove-last #&#39;stringp &#39;(1 2 &quot;last&quot; &quot;second&quot;)) ;; =&amp;gt; (1 2 &quot;last&quot;)
(--remove-last (&amp;gt; it 3) &#39;(1 2 3 4 5 6 7 8 9 10)) ;; =&amp;gt; (1 2 3 4 5 6 7 8 9)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-remove-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a copy of &lt;code&gt;list&lt;/code&gt; with all occurrences of &lt;code&gt;item&lt;/code&gt; removed. The comparison is done with &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-remove-item 3 &#39;(1 2 3 2 3 4 5 3)) ;; =&amp;gt; (1 2 2 4 5)
(-remove-item &#39;foo &#39;(foo bar baz foo)) ;; =&amp;gt; (bar baz)
(-remove-item &quot;bob&quot; &#39;(&quot;alice&quot; &quot;bob&quot; &quot;eve&quot; &quot;bob&quot;)) ;; =&amp;gt; (&quot;alice&quot; &quot;eve&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-non-nil &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a copy of &lt;code&gt;list&lt;/code&gt; with all &lt;code&gt;nil&lt;/code&gt; items removed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-non-nil &#39;(nil 1 nil 2 nil nil 3 4 nil 5 nil)) ;; =&amp;gt; (1 2 3 4 5)
(-non-nil &#39;((nil))) ;; =&amp;gt; ((nil))
(-non-nil ()) ;; =&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-slice &lt;code&gt;(list from &amp;amp;optional to step)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return copy of &lt;code&gt;list&lt;/code&gt;, starting from index &lt;code&gt;from&lt;/code&gt; to index &lt;code&gt;to&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;from&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; may be negative. These values are then interpreted modulo the length of the list.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;step&lt;/code&gt; is a number, only each &lt;code&gt;step&lt;/code&gt;th item in the resulting section is returned. Defaults to 1.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-slice &#39;(1 2 3 4 5) 1) ;; =&amp;gt; (2 3 4 5)
(-slice &#39;(1 2 3 4 5) 0 3) ;; =&amp;gt; (1 2 3)
(-slice &#39;(1 2 3 4 5 6 7 8 9) 1 -1 2) ;; =&amp;gt; (2 4 6 8)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-take &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a copy of the first &lt;code&gt;n&lt;/code&gt; items in &lt;code&gt;list&lt;/code&gt;. Return a copy of &lt;code&gt;list&lt;/code&gt; if it contains &lt;code&gt;n&lt;/code&gt; items or fewer. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is zero or less.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-last-n-list&quot;&gt;&lt;code&gt;-take-last&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-take 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3)
(-take 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3 4 5)
(-take 0 &#39;(1 2 3 4 5)) ;; =&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-take-last &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a copy of the last &lt;code&gt;n&lt;/code&gt; items of &lt;code&gt;list&lt;/code&gt; in order. Return a copy of &lt;code&gt;list&lt;/code&gt; if it contains &lt;code&gt;n&lt;/code&gt; items or fewer. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is zero or less.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-n-list&quot;&gt;&lt;code&gt;-take&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-take-last 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; (3 4 5)
(-take-last 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3 4 5)
(-take-last 1 &#39;(1 2 3 4 5)) ;; =&amp;gt; (5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-drop &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the tail (not a copy) of &lt;code&gt;list&lt;/code&gt; without the first &lt;code&gt;n&lt;/code&gt; items. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; contains &lt;code&gt;n&lt;/code&gt; items or fewer. Return &lt;code&gt;list&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is zero or less.&lt;/p&gt; 
&lt;p&gt;For another variant, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-last-n-list&quot;&gt;&lt;code&gt;-drop-last&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-drop 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; (4 5)
(-drop 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; ()
(-drop 0 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3 4 5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-drop-last &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a copy of &lt;code&gt;list&lt;/code&gt; without its last &lt;code&gt;n&lt;/code&gt; items. Return a copy of &lt;code&gt;list&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is zero or less. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; contains &lt;code&gt;n&lt;/code&gt; items or fewer.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-n-list&quot;&gt;&lt;code&gt;-drop&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-drop-last 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2)
(-drop-last 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; ()
(-drop-last 0 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3 4 5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-take-while &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Take successive items from &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. &lt;code&gt;pred&lt;/code&gt; is a function of one argument. Return a new list of the successive elements from the start of &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--take-while&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For another variant, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-while-pred-list&quot;&gt;&lt;code&gt;-drop-while&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-take-while #&#39;even? &#39;(1 2 3 4)) ;; =&amp;gt; ()
(-take-while #&#39;even? &#39;(2 4 5 6)) ;; =&amp;gt; (2 4)
(--take-while (&amp;lt; it 4) &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (1 2 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-drop-while &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Drop successive items from &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. &lt;code&gt;pred&lt;/code&gt; is a function of one argument. Return the tail (not a copy) of &lt;code&gt;list&lt;/code&gt; starting from its first element for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--drop-while&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For another variant, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-while-pred-list&quot;&gt;&lt;code&gt;-take-while&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-drop-while #&#39;even? &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 3 4)
(-drop-while #&#39;even? &#39;(2 4 5 6)) ;; =&amp;gt; (5 6)
(--drop-while (&amp;lt; it 4) &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (4 3 2 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-select-by-indices &lt;code&gt;(indices list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list whose elements are elements from &lt;code&gt;list&lt;/code&gt; selected as &lt;code&gt;(nth i list)&lt;/code&gt; for all i from &lt;code&gt;indices&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-select-by-indices &#39;(4 10 2 3 6) &#39;(&quot;v&quot; &quot;e&quot; &quot;l&quot; &quot;o&quot; &quot;c&quot; &quot;i&quot; &quot;r&quot; &quot;a&quot; &quot;p&quot; &quot;t&quot; &quot;o&quot; &quot;r&quot;)) ;; =&amp;gt; (&quot;c&quot; &quot;o&quot; &quot;l&quot; &quot;o&quot; &quot;r&quot;)
(-select-by-indices &#39;(2 1 0) &#39;(&quot;a&quot; &quot;b&quot; &quot;c&quot;)) ;; =&amp;gt; (&quot;c&quot; &quot;b&quot; &quot;a&quot;)
(-select-by-indices &#39;(0 1 2 0 1 3 3 1) &#39;(&quot;f&quot; &quot;a&quot; &quot;r&quot; &quot;l&quot;)) ;; =&amp;gt; (&quot;f&quot; &quot;a&quot; &quot;r&quot; &quot;f&quot; &quot;a&quot; &quot;l&quot; &quot;l&quot; &quot;a&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-select-columns &lt;code&gt;(columns table)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Select &lt;code&gt;columns&lt;/code&gt; from &lt;code&gt;table&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;table&lt;/code&gt; is a list of lists where each element represents one row. It is assumed each row has the same length.&lt;/p&gt; 
&lt;p&gt;Each row is transformed such that only the specified &lt;code&gt;columns&lt;/code&gt; are selected.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-column-column-table&quot;&gt;&lt;code&gt;-select-column&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-by-indices-indices-list&quot;&gt;&lt;code&gt;-select-by-indices&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-select-columns &#39;(0 2) &#39;((1 2 3) (a b c) (:a :b :c))) ;; =&amp;gt; ((1 3) (a c) (:a :c))
(-select-columns &#39;(1) &#39;((1 2 3) (a b c) (:a :b :c))) ;; =&amp;gt; ((2) (b) (:b))
(-select-columns nil &#39;((1 2 3) (a b c) (:a :b :c))) ;; =&amp;gt; (nil nil nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-select-column &lt;code&gt;(column table)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Select &lt;code&gt;column&lt;/code&gt; from &lt;code&gt;table&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;table&lt;/code&gt; is a list of lists where each element represents one row. It is assumed each row has the same length.&lt;/p&gt; 
&lt;p&gt;The single selected column is returned as a list.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-columns-columns-table&quot;&gt;&lt;code&gt;-select-columns&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-by-indices-indices-list&quot;&gt;&lt;code&gt;-select-by-indices&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-select-column 1 &#39;((1 2 3) (a b c) (:a :b :c))) ;; =&amp;gt; (2 b :b)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;List to list&lt;/h2&gt; 
&lt;p&gt;Functions returning a modified copy of the input list.&lt;/p&gt; 
&lt;h4&gt;-keep &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list of the non-&lt;code&gt;nil&lt;/code&gt; results of applying &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;. Like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-filter-pred-list&quot;&gt;&lt;code&gt;-filter&lt;/code&gt;&lt;/a&gt;, but returns the non-&lt;code&gt;nil&lt;/code&gt; results of &lt;code&gt;fn&lt;/code&gt; instead of the corresponding elements of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--keep&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-keep #&#39;cdr &#39;((1 2 3) (4 5) (6))) ;; =&amp;gt; ((2 3) (5))
(-keep (lambda (n) (and (&amp;gt; n 3) (* 10 n))) &#39;(1 2 3 4 5 6)) ;; =&amp;gt; (40 50 60)
(--keep (and (&amp;gt; it 3) (* 10 it)) &#39;(1 2 3 4 5 6)) ;; =&amp;gt; (40 50 60)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-concat &lt;code&gt;(&amp;amp;rest sequences)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Concatenate all &lt;code&gt;sequences&lt;/code&gt; and make the result a list. The result is a list whose elements are the elements of all the arguments. Each argument may be a list, vector or string.&lt;/p&gt; 
&lt;p&gt;All arguments except the last argument are copied. The last argument is just used as the tail of the new list. If the last argument is not a list, this results in a dotted list.&lt;/p&gt; 
&lt;p&gt;As an exception, if all the arguments except the last are &lt;code&gt;nil&lt;/code&gt;, and the last argument is not a list, the return value is that last argument unaltered, not a list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-concat &#39;(1)) ;; =&amp;gt; (1)
(-concat &#39;(1) &#39;(2)) ;; =&amp;gt; (1 2)
(-concat &#39;(1) &#39;(2 3) &#39;(4)) ;; =&amp;gt; (1 2 3 4)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-flatten &lt;code&gt;(l)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Take a nested list &lt;code&gt;l&lt;/code&gt; and return its contents as a single, flat list.&lt;/p&gt; 
&lt;p&gt;Note that because &lt;code&gt;nil&lt;/code&gt; represents a list of zero elements (an empty list), any mention of &lt;code&gt;nil&lt;/code&gt; in &lt;code&gt;l&lt;/code&gt; will disappear after flattening. If you need to preserve nils, consider &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-n-num-list&quot;&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt; or map them to some unique symbol and then map them back.&lt;/p&gt; 
&lt;p&gt;Conses of two atoms are considered &quot;terminals&quot;, that is, they aren&#39;t flattened further.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-n-num-list&quot;&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-flatten &#39;((1))) ;; =&amp;gt; (1)
(-flatten &#39;((1 (2 3) (((4 (5))))))) ;; =&amp;gt; (1 2 3 4 5)
(-flatten &#39;(1 2 (3 . 4))) ;; =&amp;gt; (1 2 (3 . 4))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-flatten-n &lt;code&gt;(num list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Flatten &lt;code&gt;num&lt;/code&gt; levels of a nested &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-l&quot;&gt;&lt;code&gt;-flatten&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-flatten-n 1 &#39;((1 2) ((3 4) ((5 6))))) ;; =&amp;gt; (1 2 (3 4) ((5 6)))
(-flatten-n 2 &#39;((1 2) ((3 4) ((5 6))))) ;; =&amp;gt; (1 2 3 4 (5 6))
(-flatten-n 3 &#39;((1 2) ((3 4) ((5 6))))) ;; =&amp;gt; (1 2 3 4 5 6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-replace &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Replace all &lt;code&gt;old&lt;/code&gt; items in &lt;code&gt;list&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-at-n-x-list&quot;&gt;&lt;code&gt;-replace-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-replace 1 &quot;1&quot; &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (&quot;1&quot; 2 3 4 3 2 &quot;1&quot;)
(-replace &quot;foo&quot; &quot;bar&quot; &#39;(&quot;a&quot; &quot;nice&quot; &quot;foo&quot; &quot;sentence&quot; &quot;about&quot; &quot;foo&quot;)) ;; =&amp;gt; (&quot;a&quot; &quot;nice&quot; &quot;bar&quot; &quot;sentence&quot; &quot;about&quot; &quot;bar&quot;)
(-replace 1 2 nil) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-replace-first &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Replace the first occurrence of &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-first-pred-rep-list&quot;&gt;&lt;code&gt;-map-first&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-replace-first 1 &quot;1&quot; &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (&quot;1&quot; 2 3 4 3 2 1)
(-replace-first &quot;foo&quot; &quot;bar&quot; &#39;(&quot;a&quot; &quot;nice&quot; &quot;foo&quot; &quot;sentence&quot; &quot;about&quot; &quot;foo&quot;)) ;; =&amp;gt; (&quot;a&quot; &quot;nice&quot; &quot;bar&quot; &quot;sentence&quot; &quot;about&quot; &quot;foo&quot;)
(-replace-first 1 2 nil) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-replace-last &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Replace the last occurrence of &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-last-pred-rep-list&quot;&gt;&lt;code&gt;-map-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-replace-last 1 &quot;1&quot; &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (1 2 3 4 3 2 &quot;1&quot;)
(-replace-last &quot;foo&quot; &quot;bar&quot; &#39;(&quot;a&quot; &quot;nice&quot; &quot;foo&quot; &quot;sentence&quot; &quot;about&quot; &quot;foo&quot;)) ;; =&amp;gt; (&quot;a&quot; &quot;nice&quot; &quot;foo&quot; &quot;sentence&quot; &quot;about&quot; &quot;bar&quot;)
(-replace-last 1 2 nil) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-insert-at &lt;code&gt;(n x list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list with &lt;code&gt;x&lt;/code&gt; inserted into &lt;code&gt;list&lt;/code&gt; at position &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-pred-fun-list&quot;&gt;&lt;code&gt;-splice&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-list-pred-new-list-list&quot;&gt;&lt;code&gt;-splice-list&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-insert-at 1 &#39;x &#39;(a b c)) ;; =&amp;gt; (a x b c)
(-insert-at 12 &#39;x &#39;(a b c)) ;; =&amp;gt; (a b c x)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-replace-at &lt;code&gt;(n x list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list with element at &lt;code&gt;n&lt;/code&gt;th position in &lt;code&gt;list&lt;/code&gt; replaced with &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-old-new-list&quot;&gt;&lt;code&gt;-replace&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-replace-at 0 9 &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (9 1 2 3 4 5)
(-replace-at 1 9 &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (0 9 2 3 4 5)
(-replace-at 4 9 &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (0 1 2 3 9 5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-update-at &lt;code&gt;(n func list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Use &lt;code&gt;func&lt;/code&gt; to update the &lt;code&gt;n&lt;/code&gt;th element of &lt;code&gt;list&lt;/code&gt;. Return a copy of &lt;code&gt;list&lt;/code&gt; where the &lt;code&gt;n&lt;/code&gt;th element is replaced with the result of calling &lt;code&gt;func&lt;/code&gt; on it.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-when-pred-rep-list&quot;&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-update-at 0 (lambda (x) (+ x 9)) &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (9 1 2 3 4 5)
(-update-at 1 (lambda (x) (+ x 8)) &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (0 9 2 3 4 5)
(--update-at 2 (length it) &#39;(&quot;foo&quot; &quot;bar&quot; &quot;baz&quot; &quot;quux&quot;)) ;; =&amp;gt; (&quot;foo&quot; &quot;bar&quot; 3 &quot;quux&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-remove-at &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return &lt;code&gt;list&lt;/code&gt; with its element at index &lt;code&gt;n&lt;/code&gt; removed. That is, remove any element selected as (nth &lt;code&gt;n&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;) from &lt;code&gt;list&lt;/code&gt; and return the result.&lt;/p&gt; 
&lt;p&gt;This is a non-destructive operation: parts of &lt;code&gt;list&lt;/code&gt; (but not necessarily all of it) are copied as needed to avoid destructively modifying it.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-at-indices-indices-list&quot;&gt;&lt;code&gt;-remove-at-indices&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-pred-list&quot;&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-remove-at 0 &#39;(a b c)) ;; =&amp;gt; (b c)
(-remove-at 1 &#39;(a b c)) ;; =&amp;gt; (a c)
(-remove-at 2 &#39;(a b c)) ;; =&amp;gt; (a b)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-remove-at-indices &lt;code&gt;(indices list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return &lt;code&gt;list&lt;/code&gt; with its elements at &lt;code&gt;indices&lt;/code&gt; removed. That is, for each index &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;indices&lt;/code&gt;, remove any element selected as (nth &lt;code&gt;i&lt;/code&gt; &lt;code&gt;list&lt;/code&gt;) from &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This is a non-destructive operation: parts of &lt;code&gt;list&lt;/code&gt; (but not necessarily all of it) are copied as needed to avoid destructively modifying it.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-at-n-list&quot;&gt;&lt;code&gt;-remove-at&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-pred-list&quot;&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-remove-at-indices &#39;(0) &#39;(a b c d e)) ;; =&amp;gt; (b c d e)
(-remove-at-indices &#39;(1 3) &#39;(a b c d e)) ;; =&amp;gt; (a c e)
(-remove-at-indices &#39;(4 0 2) &#39;(a b c d e)) ;; =&amp;gt; (b d)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Reductions&lt;/h2&gt; 
&lt;p&gt;Functions reducing lists to a single value (which may also be a list).&lt;/p&gt; 
&lt;h4&gt;-reduce-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Reduce the function &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;list&lt;/code&gt;, starting with &lt;code&gt;init&lt;/code&gt;. Return the result of applying &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;init&lt;/code&gt; and the first element of &lt;code&gt;list&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to that result and the second element, etc. If &lt;code&gt;list&lt;/code&gt; is empty, return &lt;code&gt;init&lt;/code&gt; without calling &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reduce-from&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other folds, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&quot;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&quot;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-reduce-from #&#39;- 10 &#39;(1 2 3)) ;; =&amp;gt; 4
(-reduce-from #&#39;list 10 &#39;(1 2 3)) ;; =&amp;gt; (((10 1) 2) 3)
(--reduce-from (concat acc &quot; &quot; it) &quot;START&quot; &#39;(&quot;a&quot; &quot;b&quot; &quot;c&quot;)) ;; =&amp;gt; &quot;START a b c&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-reduce-r-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Reduce the function &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;list&lt;/code&gt; in reverse, starting with &lt;code&gt;init&lt;/code&gt;. Return the result of applying &lt;code&gt;fn&lt;/code&gt; to the last element of &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;init&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to the second-to-last element and the previous result of &lt;code&gt;fn&lt;/code&gt;, etc. That is, the first argument of &lt;code&gt;fn&lt;/code&gt; is the current element, and its second argument the accumulated value. If &lt;code&gt;list&lt;/code&gt; is empty, return &lt;code&gt;init&lt;/code&gt; without calling &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function is like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; but the operation associates from the right rather than left. In other words, it starts from the end of &lt;code&gt;list&lt;/code&gt; and flips the arguments to &lt;code&gt;fn&lt;/code&gt;. Conceptually, it is like replacing the conses in &lt;code&gt;list&lt;/code&gt; with applications of &lt;code&gt;fn&lt;/code&gt;, and its last link with &lt;code&gt;init&lt;/code&gt;, and evaluating the resulting expression.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reduce-r-from&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other folds, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&quot;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&quot;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-reduce-r-from #&#39;- 10 &#39;(1 2 3)) ;; =&amp;gt; -8
(-reduce-r-from #&#39;list 10 &#39;(1 2 3)) ;; =&amp;gt; (1 (2 (3 10)))
(--reduce-r-from (concat it &quot; &quot; acc) &quot;END&quot; &#39;(&quot;a&quot; &quot;b&quot; &quot;c&quot;)) ;; =&amp;gt; &quot;a b c END&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-reduce &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Reduce the function &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;list&lt;/code&gt;. Return the result of applying &lt;code&gt;fn&lt;/code&gt; to the first two elements of &lt;code&gt;list&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to that result and the third element, etc. If &lt;code&gt;list&lt;/code&gt; contains a single element, return it without calling &lt;code&gt;fn&lt;/code&gt;. If &lt;code&gt;list&lt;/code&gt; is empty, return the result of calling &lt;code&gt;fn&lt;/code&gt; with no arguments.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reduce&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other folds, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&quot;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-reduce #&#39;- &#39;(1 2 3 4)) ;; =&amp;gt; -8
(-reduce #&#39;list &#39;(1 2 3 4)) ;; =&amp;gt; (((1 2) 3) 4)
(--reduce (format &quot;%s-%d&quot; acc it) &#39;(1 2 3)) ;; =&amp;gt; &quot;1-2-3&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-reduce-r &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Reduce the function &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;list&lt;/code&gt; in reverse. Return the result of applying &lt;code&gt;fn&lt;/code&gt; to the last two elements of &lt;code&gt;list&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to the third-to-last element and the previous result of &lt;code&gt;fn&lt;/code&gt;, etc. That is, the first argument of &lt;code&gt;fn&lt;/code&gt; is the current element, and its second argument the accumulated value. If &lt;code&gt;list&lt;/code&gt; contains a single element, return it without calling &lt;code&gt;fn&lt;/code&gt;. If &lt;code&gt;list&lt;/code&gt; is empty, return the result of calling &lt;code&gt;fn&lt;/code&gt; with no arguments.&lt;/p&gt; 
&lt;p&gt;This function is like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&quot;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; but the operation associates from the right rather than left. In other words, it starts from the end of &lt;code&gt;list&lt;/code&gt; and flips the arguments to &lt;code&gt;fn&lt;/code&gt;. Conceptually, it is like replacing the conses in &lt;code&gt;list&lt;/code&gt; with applications of &lt;code&gt;fn&lt;/code&gt;, ignoring its last link, and evaluating the resulting expression.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reduce-r&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other folds, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&quot;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-reduce-r #&#39;- &#39;(1 2 3 4)) ;; =&amp;gt; -2
(-reduce-r #&#39;list &#39;(1 2 3 4)) ;; =&amp;gt; (1 (2 (3 4)))
(--reduce-r (format &quot;%s-%d&quot; acc it) &#39;(1 2 3)) ;; =&amp;gt; &quot;3-2-1&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-reductions-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list of &lt;code&gt;fn&lt;/code&gt;&#39;s intermediate reductions across &lt;code&gt;list&lt;/code&gt;. That is, a list of the intermediate values of the accumulator when &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; (which see) is called with the same arguments.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reductions-from&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other folds, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&quot;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-fn-list&quot;&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-reductions-from #&#39;max 0 &#39;(2 1 4 3)) ;; =&amp;gt; (0 2 2 4 4)
(-reductions-from #&#39;* 1 &#39;(1 2 3 4)) ;; =&amp;gt; (1 1 2 6 24)
(--reductions-from (format &quot;(FN %s %d)&quot; acc it) &quot;INIT&quot; &#39;(1 2 3)) ;; =&amp;gt; (&quot;INIT&quot; &quot;(FN INIT 1)&quot; &quot;(FN (FN INIT 1) 2)&quot; &quot;(FN (FN (FN INIT 1) 2) 3)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-reductions-r-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list of &lt;code&gt;fn&lt;/code&gt;&#39;s intermediate reductions across reversed &lt;code&gt;list&lt;/code&gt;. That is, a list of the intermediate values of the accumulator when &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt; (which see) is called with the same arguments.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reductions-r-from&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other folds, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&quot;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-fn-list&quot;&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-reductions-r-from #&#39;max 0 &#39;(2 1 4 3)) ;; =&amp;gt; (4 4 4 3 0)
(-reductions-r-from #&#39;* 1 &#39;(1 2 3 4)) ;; =&amp;gt; (24 24 12 4 1)
(--reductions-r-from (format &quot;(FN %d %s)&quot; it acc) &quot;INIT&quot; &#39;(1 2 3)) ;; =&amp;gt; (&quot;(FN 1 (FN 2 (FN 3 INIT)))&quot; &quot;(FN 2 (FN 3 INIT))&quot; &quot;(FN 3 INIT)&quot; &quot;INIT&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-reductions &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list of &lt;code&gt;fn&lt;/code&gt;&#39;s intermediate reductions across &lt;code&gt;list&lt;/code&gt;. That is, a list of the intermediate values of the accumulator when &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&quot;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; (which see) is called with the same arguments.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reductions&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other folds, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&quot;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-fn-list&quot;&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-reductions #&#39;+ &#39;(1 2 3 4)) ;; =&amp;gt; (1 3 6 10)
(-reductions #&#39;* &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 6 24)
(--reductions (format &quot;(FN %s %d)&quot; acc it) &#39;(1 2 3)) ;; =&amp;gt; (1 &quot;(FN 1 2)&quot; &quot;(FN (FN 1 2) 3)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-reductions-r &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list of &lt;code&gt;fn&lt;/code&gt;&#39;s intermediate reductions across reversed &lt;code&gt;list&lt;/code&gt;. That is, a list of the intermediate values of the accumulator when &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&quot;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; (which see) is called with the same arguments.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reductions-r&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other folds, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-from-fn-init-list&quot;&gt;&lt;code&gt;-reductions-r-from&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&quot;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-reductions-r #&#39;+ &#39;(1 2 3 4)) ;; =&amp;gt; (10 9 7 4)
(-reductions-r #&#39;* &#39;(1 2 3 4)) ;; =&amp;gt; (24 24 12 4)
(--reductions-r (format &quot;(FN %d %s)&quot; it acc) &#39;(1 2 3)) ;; =&amp;gt; (&quot;(FN 1 (FN 2 3))&quot; &quot;(FN 2 3)&quot; 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-count &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Counts the number of items in &lt;code&gt;list&lt;/code&gt; where (&lt;code&gt;pred&lt;/code&gt; item) is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-count &#39;even? &#39;(1 2 3 4 5)) ;; =&amp;gt; 2
(--count (&amp;lt; it 4) &#39;(1 2 3 4)) ;; =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-sum &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the sum of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-sum ()) ;; =&amp;gt; 0
(-sum &#39;(1)) ;; =&amp;gt; 1
(-sum &#39;(1 2 3 4)) ;; =&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-running-sum &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list with running sums of items in &lt;code&gt;list&lt;/code&gt;. &lt;code&gt;list&lt;/code&gt; must be non-empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-running-sum &#39;(1 2 3 4)) ;; =&amp;gt; (1 3 6 10)
(-running-sum &#39;(1)) ;; =&amp;gt; (1)
(-running-sum ()) ;; Wrong type argument: consp, nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-product &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the product of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-product ()) ;; =&amp;gt; 1
(-product &#39;(1)) ;; =&amp;gt; 1
(-product &#39;(1 2 3 4)) ;; =&amp;gt; 24
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-running-product &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list with running products of items in &lt;code&gt;list&lt;/code&gt;. &lt;code&gt;list&lt;/code&gt; must be non-empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-running-product &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 6 24)
(-running-product &#39;(1)) ;; =&amp;gt; (1)
(-running-product ()) ;; Wrong type argument: consp, nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-inits &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return all prefixes of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-inits &#39;(1 2 3 4)) ;; =&amp;gt; (nil (1) (1 2) (1 2 3) (1 2 3 4))
(-inits nil) ;; =&amp;gt; (nil)
(-inits &#39;(1)) ;; =&amp;gt; (nil (1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-tails &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return all suffixes of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-tails &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3 4) (2 3 4) (3 4) (4) nil)
(-tails nil) ;; =&amp;gt; (nil)
(-tails &#39;(1)) ;; =&amp;gt; ((1) nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-common-prefix &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the longest common prefix of &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-common-prefix &#39;(1)) ;; =&amp;gt; (1)
(-common-prefix &#39;(1 2) &#39;(3 4) &#39;(1 2)) ;; =&amp;gt; ()
(-common-prefix &#39;(1 2) &#39;(1 2 3) &#39;(1 2 3 4)) ;; =&amp;gt; (1 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-common-suffix &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the longest common suffix of &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-common-suffix &#39;(1)) ;; =&amp;gt; (1)
(-common-suffix &#39;(1 2) &#39;(3 4) &#39;(1 2)) ;; =&amp;gt; ()
(-common-suffix &#39;(1 2 3 4) &#39;(2 3 4) &#39;(3 4)) ;; =&amp;gt; (3 4)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-min &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the smallest value from &lt;code&gt;list&lt;/code&gt; of numbers or markers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-min &#39;(0)) ;; =&amp;gt; 0
(-min &#39;(3 2 1)) ;; =&amp;gt; 1
(-min &#39;(1 2 3)) ;; =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-min-by &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Take a comparison function &lt;code&gt;comparator&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return the least element of the list by the comparison function.&lt;/p&gt; 
&lt;p&gt;See also combinator &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-on-op-trans&quot;&gt;&lt;code&gt;-on&lt;/code&gt;&lt;/a&gt; which can transform the values before comparing them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-min-by &#39;&amp;gt; &#39;(4 3 6 1)) ;; =&amp;gt; 1
(--min-by (&amp;gt; (car it) (car other)) &#39;((1 2 3) (2) (3 2))) ;; =&amp;gt; (1 2 3)
(--min-by (&amp;gt; (length it) (length other)) &#39;((1 2 3) (2) (3 2))) ;; =&amp;gt; (2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-max &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the largest value from &lt;code&gt;list&lt;/code&gt; of numbers or markers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-max &#39;(0)) ;; =&amp;gt; 0
(-max &#39;(3 2 1)) ;; =&amp;gt; 3
(-max &#39;(1 2 3)) ;; =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-max-by &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Take a comparison function &lt;code&gt;comparator&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return the greatest element of the list by the comparison function.&lt;/p&gt; 
&lt;p&gt;See also combinator &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-on-op-trans&quot;&gt;&lt;code&gt;-on&lt;/code&gt;&lt;/a&gt; which can transform the values before comparing them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-max-by &#39;&amp;gt; &#39;(4 3 6 1)) ;; =&amp;gt; 6
(--max-by (&amp;gt; (car it) (car other)) &#39;((1 2 3) (2) (3 2))) ;; =&amp;gt; (3 2)
(--max-by (&amp;gt; (length it) (length other)) &#39;((1 2 3) (2) (3 2))) ;; =&amp;gt; (1 2 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-frequencies &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Count the occurrences of each distinct element of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Return an alist of (&lt;code&gt;element&lt;/code&gt; . &lt;code&gt;n&lt;/code&gt;), where each &lt;code&gt;element&lt;/code&gt; occurs &lt;code&gt;n&lt;/code&gt; times in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-count-pred-list&quot;&gt;&lt;code&gt;-count&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-group-by-fn-list&quot;&gt;&lt;code&gt;-group-by&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-frequencies ()) ;; =&amp;gt; ()
(-frequencies &#39;(1 2 3 1 2 1)) ;; =&amp;gt; ((1 . 3) (2 . 2) (3 . 1))
(let ((-compare-fn #&#39;string=)) (-frequencies &#39;(a &quot;a&quot;))) ;; =&amp;gt; ((a . 2))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Unfolding&lt;/h2&gt; 
&lt;p&gt;Operations dual to reductions, building lists from a seed value rather than consuming a list to produce a single value.&lt;/p&gt; 
&lt;h4&gt;-iterate &lt;code&gt;(fun init n)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list of iterated applications of &lt;code&gt;fun&lt;/code&gt; to &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This means a list of the form:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(`init` (`fun` `init`) (`fun` (`fun` `init`)) ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; is the length of the returned list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-iterate #&#39;1+ 1 10) ;; =&amp;gt; (1 2 3 4 5 6 7 8 9 10)
(-iterate (lambda (x) (+ x x)) 2 5) ;; =&amp;gt; (2 4 8 16 32)
(--iterate (* it it) 2 5) ;; =&amp;gt; (2 4 16 256 65536)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-unfold &lt;code&gt;(fun seed)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Build a list from &lt;code&gt;seed&lt;/code&gt; using &lt;code&gt;fun&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This is &quot;dual&quot; operation to &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&quot;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;: while -reduce-r consumes a list to produce a single value, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-unfold-fun-seed&quot;&gt;&lt;code&gt;-unfold&lt;/code&gt;&lt;/a&gt; takes a seed value and builds a (potentially infinite!) list.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fun&lt;/code&gt; should return &lt;code&gt;nil&lt;/code&gt; to stop the generating process, or a cons (&lt;code&gt;a&lt;/code&gt; . &lt;code&gt;b&lt;/code&gt;), where &lt;code&gt;a&lt;/code&gt; will be prepended to the result and &lt;code&gt;b&lt;/code&gt; is the new seed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-unfold (lambda (x) (unless (= x 0) (cons x (1- x)))) 10) ;; =&amp;gt; (10 9 8 7 6 5 4 3 2 1)
(--unfold (when it (cons it (cdr it))) &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3 4) (2 3 4) (3 4) (4))
(--unfold (when it (cons it (butlast it))) &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3 4) (1 2 3) (1 2) (1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-repeat &lt;code&gt;(n x)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list of length &lt;code&gt;n&lt;/code&gt; with each element being &lt;code&gt;x&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is less than 1.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-repeat 3 :a) ;; =&amp;gt; (:a :a :a)
(-repeat 1 :a) ;; =&amp;gt; (:a)
(-repeat 0 :a) ;; =&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-cycle &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return an infinite circular copy of &lt;code&gt;list&lt;/code&gt;. The returned list cycles through the elements of &lt;code&gt;list&lt;/code&gt; and repeats from the beginning.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-take 5 (-cycle &#39;(1 2 3))) ;; =&amp;gt; (1 2 3 1 2)
(-take 7 (-cycle &#39;(1 &quot;and&quot; 3))) ;; =&amp;gt; (1 &quot;and&quot; 3 1 &quot;and&quot; 3 1)
(-zip-lists (-cycle &#39;(3)) &#39;(1 2)) ;; =&amp;gt; ((3 1) (3 2))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Predicates&lt;/h2&gt; 
&lt;p&gt;Reductions of one or more lists to a boolean value.&lt;/p&gt; 
&lt;h4&gt;-some &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return (&lt;code&gt;pred&lt;/code&gt; x) for the first &lt;code&gt;list&lt;/code&gt; item where (&lt;code&gt;pred&lt;/code&gt; x) is non-&lt;code&gt;nil&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-any&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--some&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-some #&#39;stringp &#39;(1 &quot;2&quot; 3)) ;; =&amp;gt; t
(--some (string-match-p &quot;x&quot; it) &#39;(&quot;foo&quot; &quot;axe&quot; &quot;xor&quot;)) ;; =&amp;gt; 1
(--some (= it-index 3) &#39;(0 1 2)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-every &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; for all items in &lt;code&gt;list&lt;/code&gt;. If so, return the last such result of &lt;code&gt;pred&lt;/code&gt;. Otherwise, once an item is reached for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, return &lt;code&gt;nil&lt;/code&gt; without calling &lt;code&gt;pred&lt;/code&gt; on any further &lt;code&gt;list&lt;/code&gt; elements.&lt;/p&gt; 
&lt;p&gt;This function is like &lt;code&gt;-every-p&lt;/code&gt;, but on success returns the last non-&lt;code&gt;nil&lt;/code&gt; result of &lt;code&gt;pred&lt;/code&gt; instead of just &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--every&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-every #&#39;numberp &#39;(1 2 3)) ;; =&amp;gt; t
(--every (string-match-p &quot;x&quot; it) &#39;(&quot;axe&quot; &quot;xor&quot;)) ;; =&amp;gt; 0
(--every (= it it-index) &#39;(0 1 3)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-any? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;) is non-&lt;code&gt;nil&lt;/code&gt; for any &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-any-p&lt;/code&gt;, &lt;code&gt;-some?&lt;/code&gt;, &lt;code&gt;-some-p&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-any? #&#39;numberp &#39;(nil 0 t)) ;; =&amp;gt; t
(-any? #&#39;numberp &#39;(nil t t)) ;; =&amp;gt; nil
(-any? #&#39;null &#39;(1 3 5)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-all? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;) is non-&lt;code&gt;nil&lt;/code&gt; for all &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;. In the latter case, stop after the first &lt;code&gt;x&lt;/code&gt; for which (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;) is &lt;code&gt;nil&lt;/code&gt;, without calling &lt;code&gt;pred&lt;/code&gt; on any subsequent elements of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The similar function &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-every-pred-list&quot;&gt;&lt;code&gt;-every&lt;/code&gt;&lt;/a&gt; is more widely useful, since it returns the last non-&lt;code&gt;nil&lt;/code&gt; result of &lt;code&gt;pred&lt;/code&gt; instead of just &lt;code&gt;t&lt;/code&gt; on success.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-all-p&lt;/code&gt;, &lt;code&gt;-every-p&lt;/code&gt;, &lt;code&gt;-every?&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--all?&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-all? #&#39;numberp &#39;(1 2 3)) ;; =&amp;gt; t
(-all? #&#39;numberp &#39;(2 t 6)) ;; =&amp;gt; nil
(--all? (= 0 (% it 2)) &#39;(2 4 6)) ;; =&amp;gt; t
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-none? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;) is &lt;code&gt;nil&lt;/code&gt; for all &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-none-p&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-none? &#39;even? &#39;(1 2 3)) ;; =&amp;gt; nil
(-none? &#39;even? &#39;(1 3 5)) ;; =&amp;gt; t
(--none? (= 0 (% it 2)) &#39;(1 2 3)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-only-some? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if different &lt;code&gt;list&lt;/code&gt; items both satisfy and do not satisfy &lt;code&gt;pred&lt;/code&gt;. That is, if &lt;code&gt;pred&lt;/code&gt; returns both &lt;code&gt;nil&lt;/code&gt; for at least one item, and non-&lt;code&gt;nil&lt;/code&gt; for at least one other item in &lt;code&gt;list&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if all items satisfy the predicate or none of them do.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-only-some-p&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-only-some? &#39;even? &#39;(1 2 3)) ;; =&amp;gt; t
(-only-some? &#39;even? &#39;(1 3 5)) ;; =&amp;gt; nil
(-only-some? &#39;even? &#39;(2 4 6)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-contains? &lt;code&gt;(list element)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; contains &lt;code&gt;element&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that is non-&lt;code&gt;nil&lt;/code&gt;. As with &lt;code&gt;member&lt;/code&gt;, the return value is actually the tail of &lt;code&gt;list&lt;/code&gt; whose car is &lt;code&gt;element&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-contains-p&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-contains? &#39;(1 2 3) 1) ;; =&amp;gt; (1 2 3)
(-contains? &#39;(1 2 3) 2) ;; =&amp;gt; (2 3)
(-contains? &#39;(1 2 3) 4) ;; =&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-is-prefix? &lt;code&gt;(prefix list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;prefix&lt;/code&gt; is a prefix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-is-prefix-p&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-is-prefix? &#39;(1 2 3) &#39;(1 2 3 4 5)) ;; =&amp;gt; t
(-is-prefix? &#39;(1 2 3 4 5) &#39;(1 2 3)) ;; =&amp;gt; nil
(-is-prefix? &#39;(1 3) &#39;(1 2 3 4 5)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-is-suffix? &lt;code&gt;(suffix list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;suffix&lt;/code&gt; is a suffix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-is-suffix-p&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-is-suffix? &#39;(3 4 5) &#39;(1 2 3 4 5)) ;; =&amp;gt; t
(-is-suffix? &#39;(1 2 3 4 5) &#39;(3 4 5)) ;; =&amp;gt; nil
(-is-suffix? &#39;(3 5) &#39;(1 2 3 4 5)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-is-infix? &lt;code&gt;(infix list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;infix&lt;/code&gt; is infix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This operation runs in O(n^2) time&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-is-infix-p&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-is-infix? &#39;(1 2 3) &#39;(1 2 3 4 5)) ;; =&amp;gt; t
(-is-infix? &#39;(2 3 4) &#39;(1 2 3 4 5)) ;; =&amp;gt; t
(-is-infix? &#39;(3 4 5) &#39;(1 2 3 4 5)) ;; =&amp;gt; t
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-cons-pair? &lt;code&gt;(obj)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; is a true cons pair. That is, a cons (&lt;code&gt;a&lt;/code&gt; . &lt;code&gt;b&lt;/code&gt;) where &lt;code&gt;b&lt;/code&gt; is not a list.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-cons-pair-p&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-cons-pair? &#39;(1 . 2)) ;; =&amp;gt; t
(-cons-pair? &#39;(1 2)) ;; =&amp;gt; nil
(-cons-pair? &#39;(1)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Partitioning&lt;/h2&gt; 
&lt;p&gt;Functions partitioning the input list into a list of lists.&lt;/p&gt; 
&lt;h4&gt;-split-at &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Split &lt;code&gt;list&lt;/code&gt; into two sublists after the &lt;code&gt;n&lt;/code&gt;th element. The result is a list of two elements (&lt;code&gt;take&lt;/code&gt; &lt;code&gt;drop&lt;/code&gt;) where &lt;code&gt;take&lt;/code&gt; is a new list of the first &lt;code&gt;n&lt;/code&gt; elements of &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;drop&lt;/code&gt; is the remaining elements of &lt;code&gt;list&lt;/code&gt; (not a copy). &lt;code&gt;take&lt;/code&gt; and &lt;code&gt;drop&lt;/code&gt; are like the results of &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-n-list&quot;&gt;&lt;code&gt;-take&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-n-list&quot;&gt;&lt;code&gt;-drop&lt;/code&gt;&lt;/a&gt;, respectively, but the split is done in a single list traversal.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-split-at 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; ((1 2 3) (4 5))
(-split-at 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; ((1 2 3 4 5) nil)
(-split-at 0 &#39;(1 2 3 4 5)) ;; =&amp;gt; (nil (1 2 3 4 5))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-split-with &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Split &lt;code&gt;list&lt;/code&gt; into a prefix satisfying &lt;code&gt;pred&lt;/code&gt;, and the rest. The first sublist is the prefix of &lt;code&gt;list&lt;/code&gt; with successive elements satisfying &lt;code&gt;pred&lt;/code&gt;, and the second sublist is the remaining elements that do not. The result is like performing&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;((-take-while `pred` `list`) (-drop-while `pred` `list`))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;but in no more than a single pass through &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-split-with &#39;even? &#39;(1 2 3 4)) ;; =&amp;gt; (nil (1 2 3 4))
(-split-with &#39;even? &#39;(2 4 5 6)) ;; =&amp;gt; ((2 4) (5 6))
(--split-with (&amp;lt; it 4) &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; ((1 2 3) (4 3 2 1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-split-on &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Split the &lt;code&gt;list&lt;/code&gt; each time &lt;code&gt;item&lt;/code&gt; is found.&lt;/p&gt; 
&lt;p&gt;Unlike &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-by-fn-list&quot;&gt;&lt;code&gt;-partition-by&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;item&lt;/code&gt; is discarded from the results. Empty lists are also removed from the result.&lt;/p&gt; 
&lt;p&gt;Comparison is done by &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-when-fn-list&quot;&gt;&lt;code&gt;-split-when&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-split-on &#39;| &#39;(Nil | Leaf a | Node [Tree a])) ;; =&amp;gt; ((Nil) (Leaf a) (Node [Tree a]))
(-split-on :endgroup &#39;(&quot;a&quot; &quot;b&quot; :endgroup &quot;c&quot; :endgroup &quot;d&quot; &quot;e&quot;)) ;; =&amp;gt; ((&quot;a&quot; &quot;b&quot;) (&quot;c&quot;) (&quot;d&quot; &quot;e&quot;))
(-split-on :endgroup &#39;(&quot;a&quot; &quot;b&quot; :endgroup :endgroup &quot;d&quot; &quot;e&quot;)) ;; =&amp;gt; ((&quot;a&quot; &quot;b&quot;) (&quot;d&quot; &quot;e&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-split-when &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Split the &lt;code&gt;list&lt;/code&gt; on each element where &lt;code&gt;fn&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Unlike &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-by-fn-list&quot;&gt;&lt;code&gt;-partition-by&lt;/code&gt;&lt;/a&gt;, the &quot;matched&quot; element is discarded from the results. Empty lists are also removed from the result.&lt;/p&gt; 
&lt;p&gt;This function can be thought of as a generalization of &lt;code&gt;split-string&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-split-when &#39;even? &#39;(1 2 3 4 5 6)) ;; =&amp;gt; ((1) (3) (5))
(-split-when &#39;even? &#39;(1 2 3 4 6 8 9)) ;; =&amp;gt; ((1) (3) (9))
(--split-when (memq it &#39;(&amp;amp;optional &amp;amp;rest)) &#39;(a b &amp;amp;optional c d &amp;amp;rest args)) ;; =&amp;gt; ((a b) (c d) (args))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-separate &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Split &lt;code&gt;list&lt;/code&gt; into two sublists based on whether items satisfy &lt;code&gt;pred&lt;/code&gt;. The result is like performing&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;((-filter `pred` `list`) (-remove `pred` `list`))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;but in a single pass through &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-separate (lambda (num) (= 0 (% num 2))) &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((2 4 6) (1 3 5 7))
(--separate (&amp;lt; it 5) &#39;(3 7 5 9 3 2 1 4 6)) ;; =&amp;gt; ((3 3 2 1 4) (7 5 9 6))
(-separate &#39;cdr &#39;((1 2) (1) (1 2 3) (4))) ;; =&amp;gt; (((1 2) (1 2 3)) ((1) (4)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list with the items in &lt;code&gt;list&lt;/code&gt; grouped into &lt;code&gt;n&lt;/code&gt;-sized sublists. If there are not enough items to make the last group &lt;code&gt;n&lt;/code&gt;-sized, those items are discarded.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition 2 &#39;(1 2 3 4 5 6)) ;; =&amp;gt; ((1 2) (3 4) (5 6))
(-partition 2 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((1 2) (3 4) (5 6))
(-partition 3 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((1 2 3) (4 5 6))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-all &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list with the items in &lt;code&gt;list&lt;/code&gt; grouped into &lt;code&gt;n&lt;/code&gt;-sized sublists. The last group may contain less than &lt;code&gt;n&lt;/code&gt; items.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition-all 2 &#39;(1 2 3 4 5 6)) ;; =&amp;gt; ((1 2) (3 4) (5 6))
(-partition-all 2 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((1 2) (3 4) (5 6) (7))
(-partition-all 3 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((1 2 3) (4 5 6) (7))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-in-steps &lt;code&gt;(n step list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Partition &lt;code&gt;list&lt;/code&gt; into sublists of length &lt;code&gt;n&lt;/code&gt; that are &lt;code&gt;step&lt;/code&gt; items apart. Like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-all-in-steps-n-step-list&quot;&gt;&lt;code&gt;-partition-all-in-steps&lt;/code&gt;&lt;/a&gt;, but if there are not enough items to make the last group &lt;code&gt;n&lt;/code&gt;-sized, those items are discarded.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition-in-steps 2 1 &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2) (2 3) (3 4))
(-partition-in-steps 3 2 &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3))
(-partition-in-steps 3 2 &#39;(1 2 3 4 5)) ;; =&amp;gt; ((1 2 3) (3 4 5))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-all-in-steps &lt;code&gt;(n step list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Partition &lt;code&gt;list&lt;/code&gt; into sublists of length &lt;code&gt;n&lt;/code&gt; that are &lt;code&gt;step&lt;/code&gt; items apart. Adjacent groups may overlap if &lt;code&gt;n&lt;/code&gt; exceeds the &lt;code&gt;step&lt;/code&gt; stride. Trailing groups may contain less than &lt;code&gt;n&lt;/code&gt; items.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition-all-in-steps 2 1 &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2) (2 3) (3 4) (4))
(-partition-all-in-steps 3 2 &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3) (3 4))
(-partition-all-in-steps 3 2 &#39;(1 2 3 4 5)) ;; =&amp;gt; ((1 2 3) (3 4 5) (5))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-by &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;, splitting it each time &lt;code&gt;fn&lt;/code&gt; returns a new value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition-by &#39;even? ()) ;; =&amp;gt; ()
(-partition-by &#39;even? &#39;(1 1 2 2 2 3 4 6 8)) ;; =&amp;gt; ((1 1) (2 2 2) (3) (4 6 8))
(--partition-by (&amp;lt; it 3) &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; ((1 2) (3 4 3) (2 1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-by-header &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to the first item in &lt;code&gt;list&lt;/code&gt;. That is the header value. Apply &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;, splitting it each time &lt;code&gt;fn&lt;/code&gt; returns the header value, but only after seeing at least one other value (the body).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(--partition-by-header (= it 1) &#39;(1 2 3 1 2 1 2 3 4)) ;; =&amp;gt; ((1 2 3) (1 2) (1 2 3 4))
(--partition-by-header (&amp;gt; it 0) &#39;(1 2 0 1 0 1 2 3 0)) ;; =&amp;gt; ((1 2 0) (1 0) (1 2 3 0))
(-partition-by-header &#39;even? &#39;(2 1 1 1 4 1 3 5 6 6 1)) ;; =&amp;gt; ((2 1 1 1) (4 1 3 5) (6 6 1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-after-pred &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Partition &lt;code&gt;list&lt;/code&gt; after each element for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--partition-after-pred&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition-after-pred #&#39;booleanp ()) ;; =&amp;gt; ()
(-partition-after-pred #&#39;booleanp &#39;(t t)) ;; =&amp;gt; ((t) (t))
(-partition-after-pred #&#39;booleanp &#39;(0 0 t t 0 t)) ;; =&amp;gt; ((0 0 t) (t) (0 t))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-before-pred &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Partition directly before each time &lt;code&gt;pred&lt;/code&gt; is true on an element of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition-before-pred #&#39;booleanp ()) ;; =&amp;gt; ()
(-partition-before-pred #&#39;booleanp &#39;(0 t)) ;; =&amp;gt; ((0) (t))
(-partition-before-pred #&#39;booleanp &#39;(0 0 t 0 t t)) ;; =&amp;gt; ((0 0) (t 0) (t) (t))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-before-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Partition directly before each time &lt;code&gt;item&lt;/code&gt; appears in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition-before-item 3 ()) ;; =&amp;gt; ()
(-partition-before-item 3 &#39;(1)) ;; =&amp;gt; ((1))
(-partition-before-item 3 &#39;(3)) ;; =&amp;gt; ((3))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-partition-after-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Partition directly after each time &lt;code&gt;item&lt;/code&gt; appears in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-partition-after-item 3 ()) ;; =&amp;gt; ()
(-partition-after-item 3 &#39;(1)) ;; =&amp;gt; ((1))
(-partition-after-item 3 &#39;(3)) ;; =&amp;gt; ((3))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-group-by &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Separate &lt;code&gt;list&lt;/code&gt; into an alist whose keys are &lt;code&gt;fn&lt;/code&gt; applied to the elements of &lt;code&gt;list&lt;/code&gt;. Keys are compared by &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-group-by &#39;even? ()) ;; =&amp;gt; ()
(-group-by &#39;even? &#39;(1 1 2 2 2 3 4 6 8)) ;; =&amp;gt; ((nil 1 1 3) (t 2 2 2 4 6 8))
(--group-by (car (split-string it &quot;/&quot;)) &#39;(&quot;a/b&quot; &quot;c/d&quot; &quot;a/e&quot;)) ;; =&amp;gt; ((&quot;a&quot; &quot;a/b&quot; &quot;a/e&quot;) (&quot;c&quot; &quot;c/d&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Indexing&lt;/h2&gt; 
&lt;p&gt;Functions retrieving or sorting based on list indices and related predicates.&lt;/p&gt; 
&lt;h4&gt;-elem-index &lt;code&gt;(elem list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the first index of &lt;code&gt;elem&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;. That is, the index within &lt;code&gt;list&lt;/code&gt; of the first element that is &lt;code&gt;equal&lt;/code&gt; to &lt;code&gt;elem&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if there is no such element.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-index-pred-list&quot;&gt;&lt;code&gt;-find-index&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-elem-index 2 &#39;(6 7 8 3 4)) ;; =&amp;gt; nil
(-elem-index &quot;bar&quot; &#39;(&quot;foo&quot; &quot;bar&quot; &quot;baz&quot;)) ;; =&amp;gt; 1
(-elem-index &#39;(1 2) &#39;((3) (5 6) (1 2) nil)) ;; =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-elem-indices &lt;code&gt;(elem list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the list of indices at which &lt;code&gt;elem&lt;/code&gt; appears in &lt;code&gt;list&lt;/code&gt;. That is, the indices of all elements of &lt;code&gt;list&lt;/code&gt; &lt;code&gt;equal&lt;/code&gt; to &lt;code&gt;elem&lt;/code&gt;, in the same ascending order as they appear in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-elem-indices 2 &#39;(6 7 8 3 4 1)) ;; =&amp;gt; ()
(-elem-indices &quot;bar&quot; &#39;(&quot;foo&quot; &quot;bar&quot; &quot;baz&quot;)) ;; =&amp;gt; (1)
(-elem-indices &#39;(1 2) &#39;((3) (1 2) (5 6) (1 2) nil)) ;; =&amp;gt; (1 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-find-index &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the index of the first item satisfying &lt;code&gt;pred&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if no such item is found.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pred&lt;/code&gt; is called with one argument, the current list element, until it returns non-&lt;code&gt;nil&lt;/code&gt;, at which point the search terminates.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--find-index&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-pred-list&quot;&gt;&lt;code&gt;-first&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-last-index-pred-list&quot;&gt;&lt;code&gt;-find-last-index&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-find-index #&#39;numberp &#39;(a b c)) ;; =&amp;gt; nil
(-find-index #&#39;natnump &#39;(1 0 -1)) ;; =&amp;gt; 0
(--find-index (&amp;gt; it 5) &#39;(2 4 1 6 3 3 5 8)) ;; =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-find-last-index &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the index of the last item satisfying &lt;code&gt;pred&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if no such item is found.&lt;/p&gt; 
&lt;p&gt;Predicate &lt;code&gt;pred&lt;/code&gt; is called with one argument each time, namely the current list element.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--find-last-index&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-pred-list&quot;&gt;&lt;code&gt;-last&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-index-pred-list&quot;&gt;&lt;code&gt;-find-index&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-find-last-index #&#39;numberp &#39;(a b c)) ;; =&amp;gt; nil
(--find-last-index (&amp;gt; it 5) &#39;(2 7 1 6 3 8 5 2)) ;; =&amp;gt; 5
(-find-last-index (-partial #&#39;string&amp;lt; &#39;a) &#39;(c b a)) ;; =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-find-indices &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the list of indices in &lt;code&gt;list&lt;/code&gt; satisfying &lt;code&gt;pred&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Each element of &lt;code&gt;list&lt;/code&gt; in turn is passed to &lt;code&gt;pred&lt;/code&gt;. If the result is non-&lt;code&gt;nil&lt;/code&gt;, the index of that element in &lt;code&gt;list&lt;/code&gt; is included in the result. The returned indices are in ascending order, i.e., in the same order as they appear in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--find-indices&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-index-pred-list&quot;&gt;&lt;code&gt;-find-index&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-elem-indices-elem-list&quot;&gt;&lt;code&gt;-elem-indices&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-find-indices #&#39;numberp &#39;(a b c)) ;; =&amp;gt; ()
(-find-indices #&#39;numberp &#39;(8 1 d 2 b c a 3)) ;; =&amp;gt; (0 1 3 7)
(--find-indices (&amp;gt; it 5) &#39;(2 4 1 6 3 3 5 8)) ;; =&amp;gt; (3 7)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-grade-up &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Grade elements of &lt;code&gt;list&lt;/code&gt; using &lt;code&gt;comparator&lt;/code&gt; relation. This yields a permutation vector such that applying this permutation to &lt;code&gt;list&lt;/code&gt; sorts it in ascending order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-grade-up #&#39;&amp;lt; &#39;(3 1 4 2 1 3 3)) ;; =&amp;gt; (1 4 3 0 5 6 2)
(let ((l &#39;(3 1 4 2 1 3 3))) (-select-by-indices (-grade-up #&#39;&amp;lt; l) l)) ;; =&amp;gt; (1 1 2 3 3 3 4)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-grade-down &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Grade elements of &lt;code&gt;list&lt;/code&gt; using &lt;code&gt;comparator&lt;/code&gt; relation. This yields a permutation vector such that applying this permutation to &lt;code&gt;list&lt;/code&gt; sorts it in descending order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-grade-down #&#39;&amp;lt; &#39;(3 1 4 2 1 3 3)) ;; =&amp;gt; (2 0 5 6 3 1 4)
(let ((l &#39;(3 1 4 2 1 3 3))) (-select-by-indices (-grade-down #&#39;&amp;lt; l) l)) ;; =&amp;gt; (4 3 3 3 2 1 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Set operations&lt;/h2&gt; 
&lt;p&gt;Operations pretending lists are sets.&lt;/p&gt; 
&lt;h4&gt;-union &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list of distinct elements appearing in either &lt;code&gt;list1&lt;/code&gt; or &lt;code&gt;list2&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-union &#39;(1 2 3) &#39;(3 4 5)) ;; =&amp;gt; (1 2 3 4 5)
(-union &#39;(1 2 2 4) ()) ;; =&amp;gt; (1 2 4)
(-union &#39;(1 1 2 2) &#39;(4 4 3 2 1)) ;; =&amp;gt; (1 2 4 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-difference &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list with the distinct members of &lt;code&gt;list1&lt;/code&gt; that are not in &lt;code&gt;list2&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-difference () ()) ;; =&amp;gt; ()
(-difference &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; (1 2 3)
(-difference &#39;(1 2 3 4) &#39;(3 4 5 6)) ;; =&amp;gt; (1 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-intersection &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list of distinct elements appearing in both &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-intersection () ()) ;; =&amp;gt; ()
(-intersection &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; ()
(-intersection &#39;(1 2 2 3) &#39;(4 3 3 2)) ;; =&amp;gt; (2 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-powerset &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the power set of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-powerset ()) ;; =&amp;gt; (nil)
(-powerset &#39;(x y)) ;; =&amp;gt; ((x y) (x) (y) nil)
(-powerset &#39;(x y z)) ;; =&amp;gt; ((x y z) (x y) (x z) (x) (y z) (y) (z) nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-permutations &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the distinct permutations of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Duplicate elements of &lt;code&gt;list&lt;/code&gt; are determined by &lt;code&gt;equal&lt;/code&gt;, or by &lt;code&gt;-compare-fn&lt;/code&gt; if that is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-permutations ()) ;; =&amp;gt; (nil)
(-permutations &#39;(a a b)) ;; =&amp;gt; ((a a b) (a b a) (b a a))
(-permutations &#39;(a b c)) ;; =&amp;gt; ((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-distinct &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a copy of &lt;code&gt;list&lt;/code&gt; with all duplicate elements removed.&lt;/p&gt; 
&lt;p&gt;The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-uniq&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-distinct ()) ;; =&amp;gt; ()
(-distinct &#39;(1 1 2 3 3)) ;; =&amp;gt; (1 2 3)
(-distinct &#39;(t t t)) ;; =&amp;gt; (t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-same-items? &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt; have the same distinct elements.&lt;/p&gt; 
&lt;p&gt;The order of the elements in the lists does not matter. The lists may be of different lengths, i.e., contain duplicate elements. The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-same-items-p&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-same-items? &#39;(1 2 3) &#39;(1 2 3)) ;; =&amp;gt; t
(-same-items? &#39;(1 1 2 3) &#39;(3 3 2 1)) ;; =&amp;gt; t
(-same-items? &#39;(1 2 3) &#39;(1 2 3 4)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Other list operations&lt;/h2&gt; 
&lt;p&gt;Other list functions not fit to be classified elsewhere.&lt;/p&gt; 
&lt;h4&gt;-rotate &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Rotate &lt;code&gt;list&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; places to the right (left if &lt;code&gt;n&lt;/code&gt; is negative). The time complexity is O(n).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-rotate 3 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; (5 6 7 1 2 3 4)
(-rotate -3 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; (4 5 6 7 1 2 3)
(-rotate 16 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; (6 7 1 2 3 4 5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-cons* &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Make a new list from the elements of &lt;code&gt;args&lt;/code&gt;. The last 2 elements of &lt;code&gt;args&lt;/code&gt; are used as the final cons of the result, so if the final element of &lt;code&gt;args&lt;/code&gt; is not a list, the result is a dotted list. With no &lt;code&gt;args&lt;/code&gt;, return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-cons* 1 2) ;; =&amp;gt; (1 . 2)
(-cons* 1 2 3) ;; =&amp;gt; (1 2 . 3)
(-cons* 1) ;; =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-snoc &lt;code&gt;(list elem &amp;amp;rest elements)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Append &lt;code&gt;elem&lt;/code&gt; to the end of the list.&lt;/p&gt; 
&lt;p&gt;This is like &lt;code&gt;cons&lt;/code&gt;, but operates on the end of list.&lt;/p&gt; 
&lt;p&gt;If any &lt;code&gt;elements&lt;/code&gt; are given, append them to the list as well.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-snoc &#39;(1 2 3) 4) ;; =&amp;gt; (1 2 3 4)
(-snoc &#39;(1 2 3) 4 5 6) ;; =&amp;gt; (1 2 3 4 5 6)
(-snoc &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; (1 2 3 (4 5 6))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-interpose &lt;code&gt;(sep list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list of all elements in &lt;code&gt;list&lt;/code&gt; separated by &lt;code&gt;sep&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-interpose &quot;-&quot; ()) ;; =&amp;gt; ()
(-interpose &quot;-&quot; &#39;(&quot;a&quot;)) ;; =&amp;gt; (&quot;a&quot;)
(-interpose &quot;-&quot; &#39;(&quot;a&quot; &quot;b&quot; &quot;c&quot;)) ;; =&amp;gt; (&quot;a&quot; &quot;-&quot; &quot;b&quot; &quot;-&quot; &quot;c&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-interleave &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a new list of the first item in each list, then the second etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-interleave &#39;(1 2) &#39;(&quot;a&quot; &quot;b&quot;)) ;; =&amp;gt; (1 &quot;a&quot; 2 &quot;b&quot;)
(-interleave &#39;(1 2) &#39;(&quot;a&quot; &quot;b&quot;) &#39;(&quot;A&quot; &quot;B&quot;)) ;; =&amp;gt; (1 &quot;a&quot; &quot;A&quot; 2 &quot;b&quot; &quot;B&quot;)
(-interleave &#39;(1 2 3) &#39;(&quot;a&quot; &quot;b&quot;)) ;; =&amp;gt; (1 &quot;a&quot; 2 &quot;b&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-iota &lt;code&gt;(count &amp;amp;optional start step)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list containing &lt;code&gt;count&lt;/code&gt; numbers. Starts from &lt;code&gt;start&lt;/code&gt; and adds &lt;code&gt;step&lt;/code&gt; each time. The default &lt;code&gt;start&lt;/code&gt; is zero, the default &lt;code&gt;step&lt;/code&gt; is 1. This function takes its name from the corresponding primitive in the &lt;code&gt;apl&lt;/code&gt; language.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-iota 6) ;; =&amp;gt; (0 1 2 3 4 5)
(-iota 4 2.5 -2) ;; =&amp;gt; (2.5 0.5 -1.5 -3.5)
(-iota -1) ;; Wrong type argument: natnump, -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-zip-with &lt;code&gt;(fn list1 list2)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Zip &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt; into a new list using the function &lt;code&gt;fn&lt;/code&gt;. That is, apply &lt;code&gt;fn&lt;/code&gt; pairwise taking as first argument the next element of &lt;code&gt;list1&lt;/code&gt; and as second argument the next element of &lt;code&gt;list2&lt;/code&gt; at the corresponding position. The result is as long as the shorter list.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--zip-with&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For other zips, see also &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&quot;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-fill-fill-value-rest-lists&quot;&gt;&lt;code&gt;-zip-fill&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-zip-with #&#39;+ &#39;(1 2 3 4) &#39;(5 6 7)) ;; =&amp;gt; (6 8 10)
(-zip-with #&#39;cons &#39;(1 2 3) &#39;(4 5 6 7)) ;; =&amp;gt; ((1 . 4) (2 . 5) (3 . 6))
(--zip-with (format &quot;%s &amp;amp; %s&quot; it other) &#39;(Batman Jekyll) &#39;(Robin Hyde)) ;; =&amp;gt; (&quot;Batman &amp;amp; Robin&quot; &quot;Jekyll &amp;amp; Hyde&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-zip-pair &lt;code&gt;(list1 list2)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Zip &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt; together.&lt;/p&gt; 
&lt;p&gt;Make a pair with the head of each list, followed by a pair with the second element of each list, and so on. The number of pairs returned is equal to the length of the shorter input list.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&quot;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-zip-pair &#39;(1 2 3 4) &#39;(5 6 7)) ;; =&amp;gt; ((1 . 5) (2 . 6) (3 . 7))
(-zip-pair &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; ((1 . 4) (2 . 5) (3 . 6))
(-zip-pair &#39;(1 2) &#39;(3)) ;; =&amp;gt; ((1 . 3))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-zip-lists &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt; together.&lt;/p&gt; 
&lt;p&gt;Group the head of each list, followed by the second element of each list, and so on. The number of returned groupings is equal to the length of the shortest input list, and the length of each grouping is equal to the number of input &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The return value is always a list of proper lists, in contrast to &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&quot;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt; which returns a list of dotted pairs when only two input &lt;code&gt;lists&lt;/code&gt; are provided.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-pair-list1-list2&quot;&gt;&lt;code&gt;-zip-pair&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-zip-lists &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; ((1 4) (2 5) (3 6))
(-zip-lists &#39;(1 2 3) &#39;(4 5 6 7)) ;; =&amp;gt; ((1 4) (2 5) (3 6))
(-zip-lists &#39;(1 2) &#39;(3 4 5) &#39;(6)) ;; =&amp;gt; ((1 3 6))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-zip-lists-fill &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt; together, padding shorter lists with &lt;code&gt;fill-value&lt;/code&gt;. This is like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&quot;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt; (which see), except it retains all elements at positions beyond the end of the shortest list. The number of returned groupings is equal to the length of the longest input list, and the length of each grouping is equal to the number of input &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-zip-lists-fill 0 &#39;(1 2) &#39;(3 4 5) &#39;(6)) ;; =&amp;gt; ((1 3 6) (2 4 0) (0 5 0))
(-zip-lists-fill 0 &#39;(1 2) &#39;(3 4) &#39;(5 6)) ;; =&amp;gt; ((1 3 5) (2 4 6))
(-zip-lists-fill 0 &#39;(1 2 3) nil) ;; =&amp;gt; ((1 0) (2 0) (3 0))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-zip &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt; together.&lt;/p&gt; 
&lt;p&gt;Group the head of each list, followed by the second element of each list, and so on. The number of returned groupings is equal to the length of the shortest input list, and the number of items in each grouping is equal to the number of input &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If only two &lt;code&gt;lists&lt;/code&gt; are provided as arguments, return the groupings as a list of dotted pairs. Otherwise, return the groupings as a list of proper lists.&lt;/p&gt; 
&lt;p&gt;Since the return value changes form depending on the number of arguments, it is generally recommended to use &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&quot;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt; instead, or &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-pair-list1-list2&quot;&gt;&lt;code&gt;-zip-pair&lt;/code&gt;&lt;/a&gt; if a list of dotted pairs is desired.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-unzip-lists&quot;&gt;&lt;code&gt;-unzip&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-zip &#39;(1 2 3 4) &#39;(5 6 7) &#39;(8 9)) ;; =&amp;gt; ((1 5 8) (2 6 9))
(-zip &#39;(1 2 3) &#39;(4 5 6) &#39;(7 8 9)) ;; =&amp;gt; ((1 4 7) (2 5 8) (3 6 9))
(-zip &#39;(1 2 3)) ;; =&amp;gt; ((1) (2) (3))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-zip-fill &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt; together, padding shorter lists with &lt;code&gt;fill-value&lt;/code&gt;. This is like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&quot;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt; (which see), except it retains all elements at positions beyond the end of the shortest list. The number of returned groupings is equal to the length of the longest input list, and the length of each grouping is equal to the number of input &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Since the return value changes form depending on the number of arguments, it is generally recommended to use &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-fill-fill-value-rest-lists&quot;&gt;&lt;code&gt;-zip-lists-fill&lt;/code&gt;&lt;/a&gt; instead, unless a list of dotted pairs is explicitly desired.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-zip-fill 0 &#39;(1 2 3) &#39;(4 5)) ;; =&amp;gt; ((1 . 4) (2 . 5) (3 . 0))
(-zip-fill 0 () &#39;(1 2 3)) ;; =&amp;gt; ((0 . 1) (0 . 2) (0 . 3))
(-zip-fill 0 &#39;(1 2) &#39;(3 4) &#39;(5 6)) ;; =&amp;gt; ((1 3 5) (2 4 6))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-unzip-lists &lt;code&gt;(lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Unzip &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This works just like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&quot;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt; (which see), but takes a list of lists instead of a variable number of arguments, such that&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(-unzip-lists (-zip-lists `args`...))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;is identity (given that the lists comprising &lt;code&gt;args&lt;/code&gt; are of the same length).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-unzip-lists (-zip-lists &#39;(1 2) &#39;(3 4) &#39;(5 6))) ;; =&amp;gt; ((1 2) (3 4) (5 6))
(-unzip-lists &#39;((1 2 3) (4 5) (6 7) (8 9))) ;; =&amp;gt; ((1 4 6 8) (2 5 7 9))
(-unzip-lists &#39;((1 2 3) (4 5 6))) ;; =&amp;gt; ((1 4) (2 5) (3 6))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-unzip &lt;code&gt;(lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Unzip &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This works just like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&quot;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt; (which see), but takes a list of lists instead of a variable number of arguments, such that&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(-unzip (-zip `l1` `l2` `l3` ...))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;is identity (given that the lists are of the same length, and that &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&quot;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt; is not called with two arguments, because of the caveat described in its docstring).&lt;/p&gt; 
&lt;p&gt;Note in particular that calling &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-unzip-lists&quot;&gt;&lt;code&gt;-unzip&lt;/code&gt;&lt;/a&gt; on a list of two lists will return a list of dotted pairs.&lt;/p&gt; 
&lt;p&gt;Since the return value changes form depending on the number of &lt;code&gt;lists&lt;/code&gt;, it is generally recommended to use &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-unzip-lists-lists&quot;&gt;&lt;code&gt;-unzip-lists&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-unzip (-zip &#39;(1 2) &#39;(3 4) &#39;(5 6))) ;; =&amp;gt; ((1 . 2) (3 . 4) (5 . 6))
(-unzip &#39;((1 2 3) (4 5 6))) ;; =&amp;gt; ((1 . 4) (2 . 5) (3 . 6))
(-unzip &#39;((1 2 3) (4 5) (6 7) (8 9))) ;; =&amp;gt; ((1 4 6 8) (2 5 7 9))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-pad &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Pad each of &lt;code&gt;lists&lt;/code&gt; with &lt;code&gt;fill-value&lt;/code&gt; until they all have equal lengths.&lt;/p&gt; 
&lt;p&gt;Ensure all &lt;code&gt;lists&lt;/code&gt; are as long as the longest one by repeatedly appending &lt;code&gt;fill-value&lt;/code&gt; to the shorter lists, and return the resulting &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-pad 0 ()) ;; =&amp;gt; (nil)
(-pad 0 &#39;(1 2) &#39;(3 4)) ;; =&amp;gt; ((1 2) (3 4))
(-pad 0 &#39;(1 2) &#39;(3 4 5 6) &#39;(7 8 9)) ;; =&amp;gt; ((1 2 0 0) (3 4 5 6) (7 8 9 0))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-table &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Compute outer product of &lt;code&gt;lists&lt;/code&gt; using function &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The function &lt;code&gt;fn&lt;/code&gt; should have the same arity as the number of supplied lists.&lt;/p&gt; 
&lt;p&gt;The outer product is computed by applying fn to all possible combinations created by taking one element from each list in order. The dimension of the result is (length lists).&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-table-flat-fn-rest-lists&quot;&gt;&lt;code&gt;-table-flat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-table &#39;* &#39;(1 2 3) &#39;(1 2 3)) ;; =&amp;gt; ((1 2 3) (2 4 6) (3 6 9))
(-table (lambda (a b) (-sum (-zip-with &#39;* a b))) &#39;((1 2) (3 4)) &#39;((1 3) (2 4))) ;; =&amp;gt; ((7 15) (10 22))
(apply &#39;-table &#39;list (-repeat 3 &#39;(1 2))) ;; =&amp;gt; ((((1 1 1) (2 1 1)) ((1 2 1) (2 2 1))) (((1 1 2) (2 1 2)) ((1 2 2) (2 2 2))))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-table-flat &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Compute flat outer product of &lt;code&gt;lists&lt;/code&gt; using function &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The function &lt;code&gt;fn&lt;/code&gt; should have the same arity as the number of supplied lists.&lt;/p&gt; 
&lt;p&gt;The outer product is computed by applying fn to all possible combinations created by taking one element from each list in order. The results are flattened, ignoring the tensor structure of the result. This is equivalent to calling:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(-flatten-n (1- (length lists)) (apply &#39;-table fn lists))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;but the implementation here is much more efficient.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-n-num-list&quot;&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-table-fn-rest-lists&quot;&gt;&lt;code&gt;-table&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-table-flat &#39;list &#39;(1 2 3) &#39;(a b c)) ;; =&amp;gt; ((1 a) (2 a) (3 a) (1 b) (2 b) (3 b) (1 c) (2 c) (3 c))
(-table-flat &#39;* &#39;(1 2 3) &#39;(1 2 3)) ;; =&amp;gt; (1 2 3 2 4 6 3 6 9)
(apply &#39;-table-flat &#39;list (-repeat 3 &#39;(1 2))) ;; =&amp;gt; ((1 1 1) (2 1 1) (1 2 1) (2 2 1) (1 1 2) (2 1 2) (1 2 2) (2 2 2))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-first &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the first item in &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if no such element is found.&lt;/p&gt; 
&lt;p&gt;To get the first item in the list no questions asked, use &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-item-list&quot;&gt;&lt;code&gt;-first-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alias: &lt;code&gt;-find&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--first&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-first #&#39;natnump &#39;(-1 0 1)) ;; =&amp;gt; 0
(-first #&#39;null &#39;(1 2 3)) ;; =&amp;gt; nil
(--first (&amp;gt; it 2) &#39;(1 2 3)) ;; =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-last &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the last x in &lt;code&gt;list&lt;/code&gt; where (&lt;code&gt;pred&lt;/code&gt; x) is non-&lt;code&gt;nil&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-last &#39;even? &#39;(1 2 3 4 5 6 3 3 3)) ;; =&amp;gt; 6
(-last &#39;even? &#39;(1 3 7 5 9)) ;; =&amp;gt; nil
(--last (&amp;gt; (length it) 3) &#39;(&quot;a&quot; &quot;looong&quot; &quot;word&quot; &quot;and&quot; &quot;short&quot; &quot;one&quot;)) ;; =&amp;gt; &quot;short&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-first-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the first item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; on an empty list.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-second-item-list&quot;&gt;&lt;code&gt;-second-item&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-item-list&quot;&gt;&lt;code&gt;-last-item&lt;/code&gt;&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-first-item ()) ;; =&amp;gt; ()
(-first-item &#39;(1 2 3 4 5)) ;; =&amp;gt; 1
(let ((list (list 1 2 3))) (setf (-first-item list) 5) list) ;; =&amp;gt; (5 2 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-second-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the second item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-item-list&quot;&gt;&lt;code&gt;-first-item&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-third-item-list&quot;&gt;&lt;code&gt;-third-item&lt;/code&gt;&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-second-item ()) ;; =&amp;gt; ()
(-second-item &#39;(1 2 3 4 5)) ;; =&amp;gt; 2
(let ((list (list 1 2))) (setf (-second-item list) 5) list) ;; =&amp;gt; (1 5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-third-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the third item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-second-item-list&quot;&gt;&lt;code&gt;-second-item&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-fourth-item-list&quot;&gt;&lt;code&gt;-fourth-item&lt;/code&gt;&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-third-item ()) ;; =&amp;gt; ()
(-third-item &#39;(1 2)) ;; =&amp;gt; ()
(-third-item &#39;(1 2 3 4 5)) ;; =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-fourth-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the fourth item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-third-item-list&quot;&gt;&lt;code&gt;-third-item&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-fifth-item-list&quot;&gt;&lt;code&gt;-fifth-item&lt;/code&gt;&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-fourth-item ()) ;; =&amp;gt; ()
(-fourth-item &#39;(1 2 3)) ;; =&amp;gt; ()
(-fourth-item &#39;(1 2 3 4 5)) ;; =&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-fifth-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the fifth item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-fourth-item-list&quot;&gt;&lt;code&gt;-fourth-item&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-item-list&quot;&gt;&lt;code&gt;-last-item&lt;/code&gt;&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-fifth-item ()) ;; =&amp;gt; ()
(-fifth-item &#39;(1 2 3 4)) ;; =&amp;gt; ()
(-fifth-item &#39;(1 2 3 4 5)) ;; =&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-last-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return the last item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; on an empty list.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-item-list&quot;&gt;&lt;code&gt;-first-item&lt;/code&gt;&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-last-item ()) ;; =&amp;gt; ()
(-last-item &#39;(1 2 3 4 5)) ;; =&amp;gt; 5
(let ((list (list 1 2 3))) (setf (-last-item list) 5) list) ;; =&amp;gt; (1 2 5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-butlast &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a list of all items in list except for the last.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-butlast &#39;(1 2 3)) ;; =&amp;gt; (1 2)
(-butlast &#39;(1 2)) ;; =&amp;gt; (1)
(-butlast &#39;(1)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-sort &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Sort &lt;code&gt;list&lt;/code&gt;, stably, comparing elements using &lt;code&gt;comparator&lt;/code&gt;. Return the sorted list. &lt;code&gt;list&lt;/code&gt; is &lt;code&gt;not&lt;/code&gt; modified by side effects. &lt;code&gt;comparator&lt;/code&gt; is called with two elements of &lt;code&gt;list&lt;/code&gt;, and should return non-&lt;code&gt;nil&lt;/code&gt; if the first element should sort before the second.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-sort #&#39;&amp;lt; &#39;(3 1 2)) ;; =&amp;gt; (1 2 3)
(-sort #&#39;&amp;gt; &#39;(3 1 2)) ;; =&amp;gt; (3 2 1)
(--sort (&amp;lt; it other) &#39;(3 1 2)) ;; =&amp;gt; (1 2 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-list &lt;code&gt;(arg)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Ensure &lt;code&gt;arg&lt;/code&gt; is a list. If &lt;code&gt;arg&lt;/code&gt; is already a list, return it as is (not a copy). Otherwise, return a new list with &lt;code&gt;arg&lt;/code&gt; as its only element.&lt;/p&gt; 
&lt;p&gt;Another supported calling convention is (-list &amp;amp;rest &lt;code&gt;args&lt;/code&gt;). In this case, if &lt;code&gt;arg&lt;/code&gt; is not a list, a new list with all of &lt;code&gt;args&lt;/code&gt; as elements is returned. This use is supported for backward compatibility and is otherwise deprecated.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-list 1) ;; =&amp;gt; (1)
(-list ()) ;; =&amp;gt; ()
(-list &#39;(1 2 3)) ;; =&amp;gt; (1 2 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-fix &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Compute the (least) fixpoint of &lt;code&gt;fn&lt;/code&gt; with initial input &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is called at least once, results are compared with &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-fix (lambda (l) (-non-nil (--mapcat (-split-at (/ (length it) 2) it) l))) &#39;((1 2 3))) ;; =&amp;gt; ((1) (2) (3))
(let ((l &#39;((starwars scifi) (jedi starwars warrior)))) (--fix (-uniq (--mapcat (cons it (cdr (assq it l))) it)) &#39;(jedi book))) ;; =&amp;gt; (jedi starwars warrior scifi book)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tree operations&lt;/h2&gt; 
&lt;p&gt;Functions pretending lists are trees.&lt;/p&gt; 
&lt;h4&gt;-tree-seq &lt;code&gt;(branch children tree)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a sequence of the nodes in &lt;code&gt;tree&lt;/code&gt;, in depth-first search order.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;branch&lt;/code&gt; is a predicate of one argument that returns non-&lt;code&gt;nil&lt;/code&gt; if the passed argument is a branch, that is, a node that can have children.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;children&lt;/code&gt; is a function of one argument that returns the children of the passed branch node.&lt;/p&gt; 
&lt;p&gt;Non-branch nodes are simply copied.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-tree-seq &#39;listp &#39;identity &#39;(1 (2 3) 4 (5 (6 7)))) ;; =&amp;gt; ((1 (2 3) 4 (5 (6 7))) 1 (2 3) 2 3 4 (5 (6 7)) 5 (6 7) 6 7)
(-tree-seq &#39;listp &#39;reverse &#39;(1 (2 3) 4 (5 (6 7)))) ;; =&amp;gt; ((1 (2 3) 4 (5 (6 7))) (5 (6 7)) (6 7) 7 6 5 4 (2 3) 3 2 1)
(--tree-seq (vectorp it) (append it nil) [1 [2 3] 4 [5 [6 7]]]) ;; =&amp;gt; ([1 [2 3] 4 [5 [6 7]]] 1 [2 3] 2 3 4 [5 [6 7]] 5 [6 7] 6 7)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-tree-map &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt; while preserving the tree structure.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-tree-map &#39;1+ &#39;(1 (2 3) (4 (5 6) 7))) ;; =&amp;gt; (2 (3 4) (5 (6 7) 8))
(-tree-map &#39;(lambda (x) (cons x (expt 2 x))) &#39;(1 (2 3) 4)) ;; =&amp;gt; ((1 . 2) ((2 . 4) (3 . 8)) (4 . 16))
(--tree-map (length it) &#39;(&quot;&amp;lt;body&amp;gt;&quot; (&quot;&amp;lt;p&amp;gt;&quot; &quot;text&quot; &quot;&amp;lt;/p&amp;gt;&quot;) &quot;&amp;lt;/body&amp;gt;&quot;)) ;; =&amp;gt; (6 (3 4 4) 7)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-tree-map-nodes &lt;code&gt;(pred fun tree)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Call &lt;code&gt;fun&lt;/code&gt; on each node of &lt;code&gt;tree&lt;/code&gt; that satisfies &lt;code&gt;pred&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, continue descending down this node. If &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;, apply &lt;code&gt;fun&lt;/code&gt; to this node and do not descend further.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-tree-map-nodes &#39;vectorp (lambda (x) (-sum (append x nil))) &#39;(1 [2 3] 4 (5 [6 7] 8))) ;; =&amp;gt; (1 5 4 (5 13 8))
(-tree-map-nodes &#39;keywordp (lambda (x) (symbol-name x)) &#39;(1 :foo 4 ((5 6 :bar) :baz 8))) ;; =&amp;gt; (1 &quot;:foo&quot; 4 ((5 6 &quot;:bar&quot;) &quot;:baz&quot; 8))
(--tree-map-nodes (eq (car-safe it) &#39;add-mode) (-concat it (list :mode &#39;emacs-lisp-mode)) &#39;(with-mode emacs-lisp-mode (foo bar) (add-mode a b) (baz (add-mode c d)))) ;; =&amp;gt; (with-mode emacs-lisp-mode (foo bar) (add-mode a b :mode emacs-lisp-mode) (baz (add-mode c d :mode emacs-lisp-mode)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-tree-reduce &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Use &lt;code&gt;fn&lt;/code&gt; to reduce elements of list &lt;code&gt;tree&lt;/code&gt;. If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply the reduction recursively.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is first applied to first element of the list and second element, then on this result and third element from the list etc.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&quot;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; for how exactly are lists of zero or one element handled.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-tree-reduce &#39;+ &#39;(1 (2 3) (4 5))) ;; =&amp;gt; 15
(-tree-reduce &#39;concat &#39;(&quot;strings&quot; (&quot; on&quot; &quot; various&quot;) ((&quot; levels&quot;)))) ;; =&amp;gt; &quot;strings on various levels&quot;
(--tree-reduce (cond ((stringp it) (concat it &quot; &quot; acc)) (t (let ((sn (symbol-name it))) (concat &quot;&amp;lt;&quot; sn &quot;&amp;gt;&quot; acc &quot;&amp;lt;/&quot; sn &quot;&amp;gt;&quot;)))) &#39;(body (p &quot;some words&quot;) (div &quot;more&quot; (b &quot;bold&quot;) &quot;words&quot;))) ;; =&amp;gt; &quot;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;some words&amp;lt;/p&amp;gt; &amp;lt;div&amp;gt;more &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; words&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-tree-reduce-from &lt;code&gt;(fn init-value tree)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Use &lt;code&gt;fn&lt;/code&gt; to reduce elements of list &lt;code&gt;tree&lt;/code&gt;. If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply the reduction recursively.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is first applied to &lt;code&gt;init-value&lt;/code&gt; and first element of the list, then on this result and second element from the list etc.&lt;/p&gt; 
&lt;p&gt;The initial value is ignored on cons pairs as they always contain two elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-tree-reduce-from &#39;+ 1 &#39;(1 (1 1) ((1)))) ;; =&amp;gt; 8
(--tree-reduce-from (-concat acc (list it)) nil &#39;(1 (2 3 (4 5)) (6 7))) ;; =&amp;gt; ((7 6) ((5 4) 3 2) 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-tree-mapreduce &lt;code&gt;(fn folder tree)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt;, and make a list of the results. If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply &lt;code&gt;fn&lt;/code&gt; recursively to elements of these nested lists.&lt;/p&gt; 
&lt;p&gt;Then reduce the resulting lists using &lt;code&gt;folder&lt;/code&gt; and initial value &lt;code&gt;init-value&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This is the same as calling &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-reduce-fn-tree&quot;&gt;&lt;code&gt;-tree-reduce&lt;/code&gt;&lt;/a&gt; after &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-map-fn-tree&quot;&gt;&lt;code&gt;-tree-map&lt;/code&gt;&lt;/a&gt; but is twice as fast as it only traverse the structure once.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-tree-mapreduce &#39;list &#39;append &#39;(1 (2 (3 4) (5 6)) (7 (8 9)))) ;; =&amp;gt; (1 2 3 4 5 6 7 8 9)
(--tree-mapreduce 1 (+ it acc) &#39;(1 (2 (4 9) (2 1)) (7 (4 3)))) ;; =&amp;gt; 9
(--tree-mapreduce 0 (max acc (1+ it)) &#39;(1 (2 (4 9) (2 1)) (7 (4 3)))) ;; =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-tree-mapreduce-from &lt;code&gt;(fn folder init-value tree)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt;, and make a list of the results. If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply &lt;code&gt;fn&lt;/code&gt; recursively to elements of these nested lists.&lt;/p&gt; 
&lt;p&gt;Then reduce the resulting lists using &lt;code&gt;folder&lt;/code&gt; and initial value &lt;code&gt;init-value&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&quot;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This is the same as calling &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-reduce-from-fn-init-value-tree&quot;&gt;&lt;code&gt;-tree-reduce-from&lt;/code&gt;&lt;/a&gt; after &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-map-fn-tree&quot;&gt;&lt;code&gt;-tree-map&lt;/code&gt;&lt;/a&gt; but is twice as fast as it only traverse the structure once.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-tree-mapreduce-from &#39;identity &#39;* 1 &#39;(1 (2 (3 4) (5 6)) (7 (8 9)))) ;; =&amp;gt; 362880
(--tree-mapreduce-from (+ it it) (cons it acc) nil &#39;(1 (2 (4 9) (2 1)) (7 (4 3)))) ;; =&amp;gt; (2 (4 (8 18) (4 2)) (14 (8 6)))
(concat &quot;{&quot; (--tree-mapreduce-from (cond ((-cons-pair? it) (concat (symbol-name (car it)) &quot; -&amp;gt; &quot; (symbol-name (cdr it)))) (t (concat (symbol-name it) &quot; : {&quot;))) (concat it (unless (or (equal acc &quot;}&quot;) (equal (substring it (1- (length it))) &quot;{&quot;)) &quot;, &quot;) acc) &quot;}&quot; &#39;((elisp-mode (foo (bar . booze)) (baz . qux)) (c-mode (foo . bla) (bum . bam))))) ;; =&amp;gt; &quot;{elisp-mode : {foo : {bar -&amp;gt; booze}, baz -&amp;gt; qux}, c-mode : {foo -&amp;gt; bla, bum -&amp;gt; bam}}&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-clone &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Create a deep copy of &lt;code&gt;list&lt;/code&gt;. The new list has the same elements and structure but all cons are replaced with new ones. This is useful when you need to clone a structure such as plist or alist.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let* ((a (list (list 1))) (b (-clone a))) (setcar (car a) 2) b) ;; =&amp;gt; ((1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Threading macros&lt;/h2&gt; 
&lt;p&gt;Macros that conditionally combine sequential forms for brevity or readability.&lt;/p&gt; 
&lt;h4&gt;-&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Thread the expr through the forms. Insert &lt;code&gt;x&lt;/code&gt; as the second item in the first form, making a list of it if it is not a list already. If there are more forms, insert the first form as the second item in second form, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-&amp;gt; &#39;(2 3 5)) ;; =&amp;gt; (2 3 5)
(-&amp;gt; &#39;(2 3 5) (append &#39;(8 13))) ;; =&amp;gt; (2 3 5 8 13)
(-&amp;gt; &#39;(2 3 5) (append &#39;(8 13)) (-slice 1 -1)) ;; =&amp;gt; (3 5 8)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-&amp;gt;&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Thread the expr through the forms. Insert &lt;code&gt;x&lt;/code&gt; as the last item in the first form, making a list of it if it is not a list already. If there are more forms, insert the first form as the last item in second form, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-&amp;gt;&amp;gt; &#39;(1 2 3) (-map &#39;square)) ;; =&amp;gt; (1 4 9)
(-&amp;gt;&amp;gt; &#39;(1 2 3) (-map &#39;square) (-remove &#39;even?)) ;; =&amp;gt; (1 9)
(-&amp;gt;&amp;gt; &#39;(1 2 3) (-map &#39;square) (-reduce &#39;+)) ;; =&amp;gt; 14
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;--&amp;gt; &lt;code&gt;(x &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Starting with the value of &lt;code&gt;x&lt;/code&gt;, thread each expression through &lt;code&gt;forms&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Insert &lt;code&gt;x&lt;/code&gt; at the position signified by the symbol &lt;code&gt;it&lt;/code&gt; in the first form. If there are more forms, insert the first form at the position signified by &lt;code&gt;it&lt;/code&gt; in the second form, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(--&amp;gt; &quot;def&quot; (concat &quot;abc&quot; it &quot;ghi&quot;)) ;; =&amp;gt; &quot;abcdefghi&quot;
(--&amp;gt; &quot;def&quot; (concat &quot;abc&quot; it &quot;ghi&quot;) (upcase it)) ;; =&amp;gt; &quot;ABCDEFGHI&quot;
(--&amp;gt; &quot;def&quot; (concat &quot;abc&quot; it &quot;ghi&quot;) upcase) ;; =&amp;gt; &quot;ABCDEFGHI&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-as-&amp;gt; &lt;code&gt;(value variable &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Starting with &lt;code&gt;value&lt;/code&gt;, thread &lt;code&gt;variable&lt;/code&gt; through &lt;code&gt;forms&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In the first form, bind &lt;code&gt;variable&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. In the second form, bind &lt;code&gt;variable&lt;/code&gt; to the result of the first form, and so forth.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-as-&amp;gt; 3 my-var (1+ my-var) (list my-var) (mapcar (lambda (ele) (* 2 ele)) my-var)) ;; =&amp;gt; (8)
(-as-&amp;gt; 3 my-var 1+) ;; =&amp;gt; 4
(-as-&amp;gt; 3 my-var) ;; =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-some-&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;When expr is non-&lt;code&gt;nil&lt;/code&gt;, thread it through the first form (via &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&quot;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;), and when that result is non-&lt;code&gt;nil&lt;/code&gt;, through the next form, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-some-&amp;gt; &#39;(2 3 5)) ;; =&amp;gt; (2 3 5)
(-some-&amp;gt; 5 square) ;; =&amp;gt; 25
(-some-&amp;gt; 5 even? square) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-some-&amp;gt;&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;When expr is non-&lt;code&gt;nil&lt;/code&gt;, thread it through the first form (via &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&quot;&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;), and when that result is non-&lt;code&gt;nil&lt;/code&gt;, through the next form, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-some-&amp;gt;&amp;gt; &#39;(1 2 3) (-map &#39;square)) ;; =&amp;gt; (1 4 9)
(-some-&amp;gt;&amp;gt; &#39;(1 3 5) (-last &#39;even?) (+ 100)) ;; =&amp;gt; nil
(-some-&amp;gt;&amp;gt; &#39;(2 4 6) (-last &#39;even?) (+ 100)) ;; =&amp;gt; 106
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-some--&amp;gt; &lt;code&gt;(expr &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Thread &lt;code&gt;expr&lt;/code&gt; through &lt;code&gt;forms&lt;/code&gt; via &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#---x-rest-forms&quot;&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;&lt;/a&gt;, while the result is non-&lt;code&gt;nil&lt;/code&gt;. When &lt;code&gt;expr&lt;/code&gt; evaluates to non-&lt;code&gt;nil&lt;/code&gt;, thread the result through the first of &lt;code&gt;forms&lt;/code&gt;, and when that result is non-&lt;code&gt;nil&lt;/code&gt;, thread it through the next form, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-some--&amp;gt; &quot;def&quot; (concat &quot;abc&quot; it &quot;ghi&quot;)) ;; =&amp;gt; &quot;abcdefghi&quot;
(-some--&amp;gt; nil (concat &quot;abc&quot; it &quot;ghi&quot;)) ;; =&amp;gt; nil
(-some--&amp;gt; &#39;(0 1) (-remove #&#39;natnump it) (append it it) (-map #&#39;1+ it)) ;; =&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-doto &lt;code&gt;(init &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Evaluate &lt;code&gt;init&lt;/code&gt; and pass it as argument to &lt;code&gt;forms&lt;/code&gt; with &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&quot;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;result&lt;/code&gt; of evaluating &lt;code&gt;init&lt;/code&gt; is threaded through each of &lt;code&gt;forms&lt;/code&gt; individually using &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&quot;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;, which see. The return value is &lt;code&gt;result&lt;/code&gt;, which &lt;code&gt;forms&lt;/code&gt; may have modified by side effect.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-doto (list 1 2 3) pop pop) ;; =&amp;gt; (3)
(-doto (cons 1 2) (setcar 3) (setcdr 4)) ;; =&amp;gt; (3 . 4)
(gethash &#39;k (--doto (make-hash-table) (puthash &#39;k &#39;v it))) ;; =&amp;gt; v
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Binding&lt;/h2&gt; 
&lt;p&gt;Macros that combine &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;let*&lt;/code&gt; with destructuring and flow control.&lt;/p&gt; 
&lt;h4&gt;-when-let &lt;code&gt;((var val) &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;val&lt;/code&gt; evaluates to non-&lt;code&gt;nil&lt;/code&gt;, bind it to &lt;code&gt;var&lt;/code&gt; and execute body.&lt;/p&gt; 
&lt;p&gt;Note: binding is done according to &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-when-let (match-index (string-match &quot;d&quot; &quot;abcd&quot;)) (+ match-index 2)) ;; =&amp;gt; 5
(-when-let ((&amp;amp;plist :foo foo) (list :foo &quot;foo&quot;)) foo) ;; =&amp;gt; &quot;foo&quot;
(-when-let ((&amp;amp;plist :foo foo) (list :bar &quot;bar&quot;)) foo) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-when-let* &lt;code&gt;(vars-vals &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;If all &lt;code&gt;vals&lt;/code&gt; evaluate to true, bind them to their corresponding &lt;code&gt;vars&lt;/code&gt; and execute body. &lt;code&gt;vars-vals&lt;/code&gt; should be a list of (&lt;code&gt;var&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;) pairs.&lt;/p&gt; 
&lt;p&gt;Note: binding is done according to &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let*&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;vals&lt;/code&gt; are evaluated sequentially, and evaluation stops after the first &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;val&lt;/code&gt; is encountered.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-when-let* ((x 5) (y 3) (z (+ y 4))) (+ x y z)) ;; =&amp;gt; 15
(-when-let* ((x 5) (y nil) (z 7)) (+ x y z)) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-if-let &lt;code&gt;((var val) then &amp;amp;rest else)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;val&lt;/code&gt; evaluates to non-&lt;code&gt;nil&lt;/code&gt;, bind it to &lt;code&gt;var&lt;/code&gt; and do &lt;code&gt;then&lt;/code&gt;, otherwise do &lt;code&gt;else&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note: binding is done according to &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-if-let (match-index (string-match &quot;d&quot; &quot;abc&quot;)) (+ match-index 3) 7) ;; =&amp;gt; 7
(--if-let (even? 4) it nil) ;; =&amp;gt; t
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-if-let* &lt;code&gt;(vars-vals then &amp;amp;rest else)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;If all &lt;code&gt;vals&lt;/code&gt; evaluate to true, bind them to their corresponding &lt;code&gt;vars&lt;/code&gt; and do &lt;code&gt;then&lt;/code&gt;, otherwise do &lt;code&gt;else&lt;/code&gt;. &lt;code&gt;vars-vals&lt;/code&gt; should be a list of (&lt;code&gt;var&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;) pairs.&lt;/p&gt; 
&lt;p&gt;Note: binding is done according to &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let*&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;vals&lt;/code&gt; are evaluated sequentially, and evaluation stops after the first &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;val&lt;/code&gt; is encountered.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-if-let* ((x 5) (y 3) (z 7)) (+ x y z) &quot;foo&quot;) ;; =&amp;gt; 15
(-if-let* ((x 5) (y nil) (z 7)) (+ x y z) &quot;foo&quot;) ;; =&amp;gt; &quot;foo&quot;
(-if-let* (((_ _ x) &#39;(nil nil 7))) x) ;; =&amp;gt; 7
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-let &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Bind variables according to &lt;code&gt;varlist&lt;/code&gt; then eval &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;varlist&lt;/code&gt; is a list of lists of the form (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;). Each &lt;code&gt;pattern&lt;/code&gt; is matched against the &lt;code&gt;source&lt;/code&gt; &quot;structurally&quot;. &lt;code&gt;source&lt;/code&gt; is only evaluated once for each &lt;code&gt;pattern&lt;/code&gt;. Each &lt;code&gt;pattern&lt;/code&gt; is matched recursively, and can therefore contain sub-patterns which are matched against corresponding sub-expressions of &lt;code&gt;source&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;All the SOURCEs are evalled before any symbols are bound (i.e. &quot;in parallel&quot;).&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;varlist&lt;/code&gt; only contains one (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;) element, you can optionally specify it using a vector and discarding the outer-most parens. Thus&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(-let ((`pattern` `source`)) ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;becomes&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(-let [`pattern` `source`] ...).
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; uses a convention of not binding places (symbols) starting with _ whenever it&#39;s possible. You can use this to skip over entries you don&#39;t care about. However, this is not &lt;em&gt;always&lt;/em&gt; possible (as a result of implementation) and these symbols might get bound to undefined values.&lt;/p&gt; 
&lt;p&gt;Following is the overview of supported patterns. Remember that patterns can be matched recursively, so every a, b, aK in the following can be a matching construct and not necessarily a symbol/variable.&lt;/p&gt; 
&lt;p&gt;Symbol:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;a - bind the `source` to `a`.  This is just like regular `let`.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Conses and lists:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(a) - bind `car` of cons/list to `a`

(a . b) - bind car of cons to `a` and `cdr` to `b`

(a b) - bind car of list to `a` and `cadr` to `b`

(a1 a2 a3 ...) - bind 0th car of list to `a1`, 1st to `a2`, 2nd to `a3`...

(a1 a2 a3 ... aN . rest) - as above, but bind the `n`th cdr to `rest`.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Vectors:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[a] - bind 0th element of a non-list sequence to `a` (works with
      vectors, strings, bit arrays...)

[a1 a2 a3 ...] - bind 0th element of non-list sequence to `a0`, 1st to
                 `a1`, 2nd to `a2`, ...
                 If the `pattern` is shorter than `source`, the values at
                 places not in `pattern` are ignored.
                 If the `pattern` is longer than `source`, an `error` is
                 thrown.

[a1 a2 a3 ... &amp;amp;rest rest] - as above, but bind the rest of
                            the sequence to `rest`.  This is
                            conceptually the same as improper list
                            matching (a1 a2 ... aN . rest)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Key/value stores:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(&amp;amp;plist key0 a0 ... keyN aN) - bind value mapped by keyK in the
                               `source` plist to aK.  If the
                               value is not found, aK is `nil`.
                               Uses `plist-get` to fetch values.

(&amp;amp;alist key0 a0 ... keyN aN) - bind value mapped by keyK in the
                               `source` alist to aK.  If the
                               value is not found, aK is `nil`.
                               Uses `assoc` to fetch values.

(&amp;amp;hash key0 a0 ... keyN aN) - bind value mapped by keyK in the
                              `source` hash table to aK.  If the
                              value is not found, aK is `nil`.
                              Uses `gethash` to fetch values.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Further, special keyword &amp;amp;keys supports &quot;inline&quot; matching of plist-like key-value pairs, similarly to &amp;amp;keys keyword of &lt;code&gt;cl-defun&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(a1 a2 ... aN &amp;amp;keys key1 b1 ... keyN bK)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This binds &lt;code&gt;n&lt;/code&gt; values from the list to a1 ... aN, then interprets the cdr as a plist (see key/value matching above).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; shorthand notation for kv-destructuring exists which allows the patterns be optionally left out and derived from the key name in the following fashion:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a key :foo is converted into &lt;code&gt;foo&lt;/code&gt; pattern,&lt;/li&gt; 
 &lt;li&gt;a key &#39;bar is converted into &lt;code&gt;bar&lt;/code&gt; pattern,&lt;/li&gt; 
 &lt;li&gt;a key &quot;baz&quot; is converted into &lt;code&gt;baz&lt;/code&gt; pattern.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;That is, the entire value under the key is bound to the derived variable without any further destructuring.&lt;/p&gt; 
&lt;p&gt;This is possible only when the form following the key is not a valid pattern (i.e. not a symbol, a cons cell or a vector). Otherwise the matching proceeds as usual and in case of an invalid spec fails with an error.&lt;/p&gt; 
&lt;p&gt;Thus the patterns are normalized as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; ;; derive all the missing patterns
 (&amp;amp;plist :foo &#39;bar &quot;baz&quot;) =&amp;gt; (&amp;amp;plist :foo foo &#39;bar bar &quot;baz&quot; baz)

 ;; we can specify some but not others
 (&amp;amp;plist :foo &#39;bar explicit-bar) =&amp;gt; (&amp;amp;plist :foo foo &#39;bar explicit-bar)

 ;; nothing happens, we store :foo in x
 (&amp;amp;plist :foo x) =&amp;gt; (&amp;amp;plist :foo x)

 ;; nothing happens, we match recursively
 (&amp;amp;plist :foo (a b c)) =&amp;gt; (&amp;amp;plist :foo (a b c))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can name the source using the syntax &lt;code&gt;symbol&lt;/code&gt; &amp;amp;as &lt;code&gt;pattern&lt;/code&gt;. This syntax works with lists (proper or improper), vectors and all types of maps.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(list &amp;amp;as a b c) (list 1 2 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;binds &lt;code&gt;a&lt;/code&gt; to 1, &lt;code&gt;b&lt;/code&gt; to 2, &lt;code&gt;c&lt;/code&gt; to 3 and &lt;code&gt;list&lt;/code&gt; to (1 2 3).&lt;/p&gt; 
&lt;p&gt;Similarly:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(bounds &amp;amp;as beg . end) (cons 1 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;binds &lt;code&gt;beg&lt;/code&gt; to 1, &lt;code&gt;end&lt;/code&gt; to 2 and &lt;code&gt;bounds&lt;/code&gt; to (1 . 2).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(items &amp;amp;as first . rest) (list 1 2 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;binds &lt;code&gt;first&lt;/code&gt; to 1, &lt;code&gt;rest&lt;/code&gt; to (2 3) and &lt;code&gt;items&lt;/code&gt; to (1 2 3)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[vect &amp;amp;as _ b c] [1 2 3]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;binds &lt;code&gt;b&lt;/code&gt; to 2, &lt;code&gt;c&lt;/code&gt; to 3 and &lt;code&gt;vect&lt;/code&gt; to [1 2 3] (_ avoids binding as usual).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(plist &amp;amp;as &amp;amp;plist :b b) (list :a 1 :b 2 :c 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;binds &lt;code&gt;b&lt;/code&gt; to 2 and &lt;code&gt;plist&lt;/code&gt; to (:a 1 :b 2 :c 3). Same for &amp;amp;alist and &amp;amp;hash.&lt;/p&gt; 
&lt;p&gt;This is especially useful when we want to capture the result of a computation and destructure at the same time. Consider the form (function-returning-complex-structure) returning a list of two vectors with two items each. We want to capture this entire result and pass it to another computation, but at the same time we want to get the second item from each vector. We can achieve it with pattern&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(result &amp;amp;as [_ a] [_ b]) (function-returning-complex-structure)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Clojure programmers may know this feature as the &quot;:as binding&quot;. The difference is that we put the &amp;amp;as at the front because we need to support improper list binding.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-let (([a (b c) d] [1 (2 3) 4])) (list a b c d)) ;; =&amp;gt; (1 2 3 4)
(-let [(a b c . d) (list 1 2 3 4 5 6)] (list a b c d)) ;; =&amp;gt; (1 2 3 (4 5 6))
(-let [(&amp;amp;plist :foo foo :bar bar) (list :baz 3 :foo 1 :qux 4 :bar 2)] (list foo bar)) ;; =&amp;gt; (1 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-let* &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Bind variables according to &lt;code&gt;varlist&lt;/code&gt; then eval &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;varlist&lt;/code&gt; is a list of lists of the form (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;). Each &lt;code&gt;pattern&lt;/code&gt; is matched against the &lt;code&gt;source&lt;/code&gt; structurally. &lt;code&gt;source&lt;/code&gt; is only evaluated once for each &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Each &lt;code&gt;source&lt;/code&gt; can refer to the symbols already bound by this &lt;code&gt;varlist&lt;/code&gt;. This is useful if you want to destructure &lt;code&gt;source&lt;/code&gt; recursively but also want to name the intermediate structures.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; for the list of all possible patterns.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-let* (((a . b) (cons 1 2)) ((c . d) (cons 3 4))) (list a b c d)) ;; =&amp;gt; (1 2 3 4)
(-let* (((a . b) (cons 1 (cons 2 3))) ((c . d) b)) (list a b c d)) ;; =&amp;gt; (1 (2 . 3) 2 3)
(-let* (((&amp;amp;alist &quot;foo&quot; foo &quot;bar&quot; bar) (list (cons &quot;foo&quot; 1) (cons &quot;bar&quot; (list &#39;a &#39;b &#39;c)))) ((a b c) bar)) (list foo a b c bar)) ;; =&amp;gt; (1 a b c (a b c))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-lambda &lt;code&gt;(match-form &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a lambda which destructures its input as &lt;code&gt;match-form&lt;/code&gt; and executes &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note that you have to enclose the &lt;code&gt;match-form&lt;/code&gt; in a pair of parens, such that:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(-lambda (x) body)
(-lambda (x y ...) body)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;has the usual semantics of &lt;code&gt;lambda&lt;/code&gt;. Furthermore, these get translated into normal &lt;code&gt;lambda&lt;/code&gt;, so there is no performance penalty.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; for a description of the destructuring mechanism.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-map (-lambda ((x y)) (+ x y)) &#39;((1 2) (3 4) (5 6))) ;; =&amp;gt; (3 7 11)
(-map (-lambda ([x y]) (+ x y)) &#39;([1 2] [3 4] [5 6])) ;; =&amp;gt; (3 7 11)
(funcall (-lambda ((_ . a) (_ . b)) (-concat a b)) &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; (2 3 5 6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-setq &lt;code&gt;([match-form val] ...)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Bind each &lt;code&gt;match-form&lt;/code&gt; to the value of its &lt;code&gt;val&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;match-form&lt;/code&gt; destructuring is done according to the rules of &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&quot;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This macro allows you to bind multiple variables by destructuring the value, so for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(-setq (a b) x
       (&amp;amp;plist :c c) plist)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;expands roughly speaking to the following code&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(setq a (car x)
      b (cadr x)
      c (plist-get plist :c))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Care is taken to only evaluate each &lt;code&gt;val&lt;/code&gt; once so that in case of multiple assignments it does not cause unexpected side effects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let (a) (-setq a 1) a) ;; =&amp;gt; 1
(let (a b) (-setq (a b) (list 1 2)) (list a b)) ;; =&amp;gt; (1 2)
(let (c) (-setq (&amp;amp;plist :c c) (list :c &quot;c&quot;)) c) ;; =&amp;gt; &quot;c&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Side effects&lt;/h2&gt; 
&lt;p&gt;Functions iterating over lists for side effect only.&lt;/p&gt; 
&lt;h4&gt;-each &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each element of &lt;code&gt;list&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; 
&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--each&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For access to the current element&#39;s index in &lt;code&gt;list&lt;/code&gt;, see &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-indexed-list-fn&quot;&gt;&lt;code&gt;-each-indexed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let (l) (-each &#39;(1 2 3) (lambda (x) (push x l))) l) ;; =&amp;gt; (3 2 1)
(let (l) (--each &#39;(1 2 3) (push it l)) l) ;; =&amp;gt; (3 2 1)
(-each &#39;(1 2 3) #&#39;identity) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-each-while &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each &lt;code&gt;item&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, while (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;item&lt;/code&gt;) is non-&lt;code&gt;nil&lt;/code&gt;. Once an &lt;code&gt;item&lt;/code&gt; is reached for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt; is no longer called. Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; 
&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--each-while&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let (l) (-each-while &#39;(2 4 5 6) #&#39;even? (lambda (x) (push x l))) l) ;; =&amp;gt; (4 2)
(let (l) (--each-while &#39;(1 2 3 4) (&amp;lt; it 3) (push it l)) l) ;; =&amp;gt; (2 1)
(let ((s 0)) (--each-while &#39;(1 3 4 5) (&amp;lt; it 5) (setq s (+ s it))) s) ;; =&amp;gt; 8
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-each-indexed &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each index and element of &lt;code&gt;list&lt;/code&gt;. For each &lt;code&gt;item&lt;/code&gt; at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, call (funcall &lt;code&gt;fn&lt;/code&gt; &lt;code&gt;index&lt;/code&gt; &lt;code&gt;item&lt;/code&gt;). Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-indexed-fn-list&quot;&gt;&lt;code&gt;-map-indexed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let (l) (-each-indexed &#39;(a b c) (lambda (i x) (push (list x i) l))) l) ;; =&amp;gt; ((c 2) (b 1) (a 0))
(let (l) (--each-indexed &#39;(a b c) (push (list it it-index) l)) l) ;; =&amp;gt; ((c 2) (b 1) (a 0))
(let (l) (--each-indexed () (push it l)) l) ;; =&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-each-r &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each element of &lt;code&gt;list&lt;/code&gt; in reversed order. Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; 
&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--each-r&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let (l) (-each-r &#39;(1 2 3) (lambda (x) (push x l))) l) ;; =&amp;gt; (1 2 3)
(let (l) (--each-r &#39;(1 2 3) (push it l)) l) ;; =&amp;gt; (1 2 3)
(-each-r &#39;(1 2 3) #&#39;identity) ;; =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-each-r-while &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each &lt;code&gt;item&lt;/code&gt; in reversed &lt;code&gt;list&lt;/code&gt;, while (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;item&lt;/code&gt;) is non-&lt;code&gt;nil&lt;/code&gt;. Once an &lt;code&gt;item&lt;/code&gt; is reached for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt; is no longer called. Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; 
&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--each-r-while&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let (l) (-each-r-while &#39;(2 4 5 6) #&#39;even? (lambda (x) (push x l))) l) ;; =&amp;gt; (6)
(let (l) (--each-r-while &#39;(1 2 3 4) (&amp;gt;= it 3) (push it l)) l) ;; =&amp;gt; (3 4)
(let ((s 0)) (--each-r-while &#39;(1 2 3 5) (&amp;gt; it 1) (setq s (+ s it))) s) ;; =&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-dotimes &lt;code&gt;(num fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; &lt;code&gt;num&lt;/code&gt; times, presumably for side effects. &lt;code&gt;fn&lt;/code&gt; is called with a single argument on successive integers running from 0, inclusive, to &lt;code&gt;num&lt;/code&gt;, exclusive. &lt;code&gt;fn&lt;/code&gt; is not called if &lt;code&gt;num&lt;/code&gt; is less than 1.&lt;/p&gt; 
&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--dotimes&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let (s) (-dotimes 3 (lambda (n) (push n s))) s) ;; =&amp;gt; (2 1 0)
(let (s) (-dotimes 0 (lambda (n) (push n s))) s) ;; =&amp;gt; ()
(let (s) (--dotimes 5 (push it s)) s) ;; =&amp;gt; (4 3 2 1 0)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Destructive operations&lt;/h2&gt; 
&lt;p&gt;Macros that modify variables holding lists.&lt;/p&gt; 
&lt;h4&gt;!cons &lt;code&gt;(car cdr)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Destructive: Set &lt;code&gt;cdr&lt;/code&gt; to the cons of &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let (l) (!cons 5 l) l) ;; =&amp;gt; (5)
(let ((l &#39;(3))) (!cons 5 l) l) ;; =&amp;gt; (5 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;!cdr &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Destructive: Set &lt;code&gt;list&lt;/code&gt; to the cdr of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(let ((l &#39;(3))) (!cdr l) l) ;; =&amp;gt; ()
(let ((l &#39;(3 5))) (!cdr l) l) ;; =&amp;gt; (5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Function combinators&lt;/h2&gt; 
&lt;p&gt;Functions that manipulate and compose other functions.&lt;/p&gt; 
&lt;h4&gt;-partial &lt;code&gt;(fun &amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that is a partial application of &lt;code&gt;fun&lt;/code&gt; to &lt;code&gt;args&lt;/code&gt;. &lt;code&gt;args&lt;/code&gt; is a list of the first &lt;code&gt;n&lt;/code&gt; arguments to pass to &lt;code&gt;fun&lt;/code&gt;. The result is a new function which does the same as &lt;code&gt;fun&lt;/code&gt;, except that the first &lt;code&gt;n&lt;/code&gt; arguments are fixed at the values with which this function was called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-partial #&#39;+ 5)) ;; =&amp;gt; 5
(funcall (-partial #&#39;- 5) 3) ;; =&amp;gt; 2
(funcall (-partial #&#39;+ 5 2) 3) ;; =&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-rpartial &lt;code&gt;(fn &amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that is a partial application of &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;args&lt;/code&gt;. &lt;code&gt;args&lt;/code&gt; is a list of the last &lt;code&gt;n&lt;/code&gt; arguments to pass to &lt;code&gt;fn&lt;/code&gt;. The result is a new function which does the same as &lt;code&gt;fn&lt;/code&gt;, except that the last &lt;code&gt;n&lt;/code&gt; arguments are fixed at the values with which this function was called. This is like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-partial-fun-rest-args&quot;&gt;&lt;code&gt;-partial&lt;/code&gt;&lt;/a&gt;, except the arguments are fixed starting from the right rather than the left.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-rpartial #&#39;- 5)) ;; =&amp;gt; -5
(funcall (-rpartial #&#39;- 5) 8) ;; =&amp;gt; 3
(funcall (-rpartial #&#39;- 5 2) 10) ;; =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-juxt &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that is the juxtaposition of &lt;code&gt;fns&lt;/code&gt;. The returned function takes a variable number of &lt;code&gt;args&lt;/code&gt;, applies each of &lt;code&gt;fns&lt;/code&gt; in turn to &lt;code&gt;args&lt;/code&gt;, and returns the list of results.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-juxt) 1 2) ;; =&amp;gt; ()
(funcall (-juxt #&#39;+ #&#39;- #&#39;* #&#39;/) 7 5) ;; =&amp;gt; (12 2 35 1)
(mapcar (-juxt #&#39;number-to-string #&#39;1+) &#39;(1 2)) ;; =&amp;gt; ((&quot;1&quot; 2) (&quot;2&quot; 3))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-compose &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Compose &lt;code&gt;fns&lt;/code&gt; into a single composite function. Return a function that takes a variable number of &lt;code&gt;args&lt;/code&gt;, applies the last function in &lt;code&gt;fns&lt;/code&gt; to &lt;code&gt;args&lt;/code&gt;, and returns the result of calling each remaining function on the result of the previous function, right-to-left. If no &lt;code&gt;fns&lt;/code&gt; are given, return a variadic &lt;code&gt;identity&lt;/code&gt; function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-compose #&#39;- #&#39;1+ #&#39;+) 1 2 3) ;; =&amp;gt; -7
(funcall (-compose #&#39;identity #&#39;1+) 3) ;; =&amp;gt; 4
(mapcar (-compose #&#39;not #&#39;stringp) &#39;(nil &quot;&quot;)) ;; =&amp;gt; (t nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-applify &lt;code&gt;(fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that applies &lt;code&gt;fn&lt;/code&gt; to a single list of args. This changes the arity of &lt;code&gt;fn&lt;/code&gt; from taking &lt;code&gt;n&lt;/code&gt; distinct arguments to taking 1 argument which is a list of &lt;code&gt;n&lt;/code&gt; arguments.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-applify #&#39;+) nil) ;; =&amp;gt; 0
(mapcar (-applify #&#39;+) &#39;((1 1 1) (1 2 3) (5 5 5))) ;; =&amp;gt; (3 6 15)
(funcall (-applify #&#39;&amp;lt;) &#39;(3 6)) ;; =&amp;gt; t
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-on &lt;code&gt;(op trans)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that calls &lt;code&gt;trans&lt;/code&gt; on each arg and &lt;code&gt;op&lt;/code&gt; on the results. The returned function takes a variable number of arguments, calls the function &lt;code&gt;trans&lt;/code&gt; on each one in turn, and then passes those results as the list of arguments to &lt;code&gt;op&lt;/code&gt;, in the same order.&lt;/p&gt; 
&lt;p&gt;For example, the following pairs of expressions are morally equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(funcall (-on #&#39;+ #&#39;1+) 1 2 3) = (+ (1+ 1) (1+ 2) (1+ 3))
(funcall (-on #&#39;+ #&#39;1+))       = (+)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-sort (-on #&#39;&amp;lt; #&#39;length) &#39;((1 2 3) (1) (1 2))) ;; =&amp;gt; ((1) (1 2) (1 2 3))
(funcall (-on #&#39;min #&#39;string-to-number) &quot;22&quot; &quot;2&quot; &quot;1&quot; &quot;12&quot;) ;; =&amp;gt; 1
(-min-by (-on #&#39;&amp;gt; #&#39;length) &#39;((1 2 3) (4) (1 2))) ;; =&amp;gt; (4)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-flip &lt;code&gt;(fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that calls &lt;code&gt;fn&lt;/code&gt; with its arguments reversed. The returned function takes the same number of arguments as &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example, the following two expressions are morally equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(funcall (-flip #&#39;-) 1 2) = (- 2 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-rotate-args-n-fn&quot;&gt;&lt;code&gt;-rotate-args&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-sort (-flip #&#39;&amp;lt;) &#39;(4 3 6 1)) ;; =&amp;gt; (6 4 3 1)
(funcall (-flip #&#39;-) 3 2 1 10) ;; =&amp;gt; 4
(funcall (-flip #&#39;1+) 1) ;; =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-rotate-args &lt;code&gt;(n fn)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that calls &lt;code&gt;fn&lt;/code&gt; with args rotated &lt;code&gt;n&lt;/code&gt; places to the right. The returned function takes the same number of arguments as &lt;code&gt;fn&lt;/code&gt;, rotates the list of arguments &lt;code&gt;n&lt;/code&gt; places to the right (left if &lt;code&gt;n&lt;/code&gt; is negative) just like &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-rotate-n-list&quot;&gt;&lt;code&gt;-rotate&lt;/code&gt;&lt;/a&gt;, and applies &lt;code&gt;fn&lt;/code&gt; to the result.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-flip-fn&quot;&gt;&lt;code&gt;-flip&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-rotate-args -1 #&#39;list) 1 2 3 4) ;; =&amp;gt; (2 3 4 1)
(funcall (-rotate-args 1 #&#39;-) 1 10 100) ;; =&amp;gt; 89
(funcall (-rotate-args 2 #&#39;list) 3 4 5 1 2) ;; =&amp;gt; (1 2 3 4 5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-const &lt;code&gt;(c)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that returns &lt;code&gt;c&lt;/code&gt; ignoring any additional arguments.&lt;/p&gt; 
&lt;p&gt;In types: a -&amp;gt; b -&amp;gt; a&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-const 2) 1 3 &quot;foo&quot;) ;; =&amp;gt; 2
(mapcar (-const 1) &#39;(&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;)) ;; =&amp;gt; (1 1 1 1)
(-sum (mapcar (-const 1) &#39;(&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;))) ;; =&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-cut &lt;code&gt;(&amp;amp;rest params)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Take n-ary function and n arguments and specialize some of them. Arguments denoted by &amp;lt;&amp;gt; will be left unspecialized.&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;srfi-26&lt;/code&gt; for detailed description.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-cut list 1 &amp;lt;&amp;gt; 3 &amp;lt;&amp;gt; 5) 2 4) ;; =&amp;gt; (1 2 3 4 5)
(-map (-cut funcall &amp;lt;&amp;gt; 5) `(1+ 1- ,(lambda (x) (/ 1.0 x)))) ;; =&amp;gt; (6 4 0.2)
(-map (-cut &amp;lt;&amp;gt; 1 2 3) &#39;(list vector string)) ;; =&amp;gt; ((1 2 3) [1 2 3] &quot;\1\2\3&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-not &lt;code&gt;(pred)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a predicate that negates the result of &lt;code&gt;pred&lt;/code&gt;. The returned predicate passes its arguments to &lt;code&gt;pred&lt;/code&gt;. If &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, the result is non-&lt;code&gt;nil&lt;/code&gt;; otherwise the result is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-andfn-rest-preds&quot;&gt;&lt;code&gt;-andfn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-orfn-rest-preds&quot;&gt;&lt;code&gt;-orfn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-not #&#39;numberp) &quot;5&quot;) ;; =&amp;gt; t
(-sort (-not #&#39;&amp;lt;) &#39;(5 2 1 0 6)) ;; =&amp;gt; (6 5 2 1 0)
(-filter (-not (-partial #&#39;&amp;lt; 4)) &#39;(1 2 3 4 5 6 7 8)) ;; =&amp;gt; (1 2 3 4)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-orfn &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a predicate that returns the first non-&lt;code&gt;nil&lt;/code&gt; result of &lt;code&gt;preds&lt;/code&gt;. The returned predicate takes a variable number of arguments, passes them to each predicate in &lt;code&gt;preds&lt;/code&gt; in turn until one of them returns non-&lt;code&gt;nil&lt;/code&gt;, and returns that non-&lt;code&gt;nil&lt;/code&gt; result without calling the remaining &lt;code&gt;preds&lt;/code&gt;. If all &lt;code&gt;preds&lt;/code&gt; return &lt;code&gt;nil&lt;/code&gt;, or if no &lt;code&gt;preds&lt;/code&gt; are given, the returned predicate returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-andfn-rest-preds&quot;&gt;&lt;code&gt;-andfn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-not-pred&quot;&gt;&lt;code&gt;-not&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-filter (-orfn #&#39;natnump #&#39;booleanp) &#39;(1 nil &quot;a&quot; -4 b c t)) ;; =&amp;gt; (1 nil t)
(funcall (-orfn #&#39;symbolp (-cut string-match-p &quot;x&quot; &amp;lt;&amp;gt;)) &quot;axe&quot;) ;; =&amp;gt; 1
(funcall (-orfn #&#39;= #&#39;+) 1 1) ;; =&amp;gt; t
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-andfn &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a predicate that returns non-&lt;code&gt;nil&lt;/code&gt; if all &lt;code&gt;preds&lt;/code&gt; do so. The returned predicate &lt;code&gt;p&lt;/code&gt; takes a variable number of arguments and passes them to each predicate in &lt;code&gt;preds&lt;/code&gt; in turn. If any one of &lt;code&gt;preds&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; also returns &lt;code&gt;nil&lt;/code&gt; without calling the remaining &lt;code&gt;preds&lt;/code&gt;. If all &lt;code&gt;preds&lt;/code&gt; return non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; returns the last such value. If no &lt;code&gt;preds&lt;/code&gt; are given, &lt;code&gt;p&lt;/code&gt; always returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-orfn-rest-preds&quot;&gt;&lt;code&gt;-orfn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-not-pred&quot;&gt;&lt;code&gt;-not&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(-filter (-andfn #&#39;numberp (-cut &amp;lt; &amp;lt;&amp;gt; 5)) &#39;(a 1 b 6 c 2)) ;; =&amp;gt; (1 2)
(mapcar (-andfn #&#39;numberp #&#39;1+) &#39;(a 1 b 6)) ;; =&amp;gt; (nil 2 nil 7)
(funcall (-andfn #&#39;= #&#39;+) 1 1) ;; =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-iteratefn &lt;code&gt;(fn n)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function &lt;code&gt;fn&lt;/code&gt; composed &lt;code&gt;n&lt;/code&gt; times with itself.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is a unary function. If you need to use a function of higher arity, use &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#-applify-fn&quot;&gt;&lt;code&gt;-applify&lt;/code&gt;&lt;/a&gt; first to turn it into a unary function.&lt;/p&gt; 
&lt;p&gt;With n = 0, this acts as identity function.&lt;/p&gt; 
&lt;p&gt;In types: (a -&amp;gt; a) -&amp;gt; Int -&amp;gt; a -&amp;gt; a.&lt;/p&gt; 
&lt;p&gt;This function satisfies the following law:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(funcall (-iteratefn fn n) init) = (-last-item (-iterate fn init (1+ n))).
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-iteratefn (lambda (x) (* x x)) 3) 2) ;; =&amp;gt; 256
(funcall (-iteratefn &#39;1+ 3) 1) ;; =&amp;gt; 4
(funcall (-iteratefn &#39;cdr 3) &#39;(1 2 3 4 5)) ;; =&amp;gt; (4 5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-fixfn &lt;code&gt;(fn &amp;amp;optional equal-test halt-test)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that computes the (least) fixpoint of &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; must be a unary function. The returned lambda takes a single argument, &lt;code&gt;x&lt;/code&gt;, the initial value for the fixpoint iteration. The iteration halts when either of the following conditions is satisfied:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Iteration converges to the fixpoint, with equality being tested using &lt;code&gt;equal-test&lt;/code&gt;. If &lt;code&gt;equal-test&lt;/code&gt; is not specified, &lt;code&gt;equal&lt;/code&gt; is used. For functions over the floating point numbers, it may be necessary to provide an appropriate approximate comparison test.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;halt-test&lt;/code&gt; returns a non-&lt;code&gt;nil&lt;/code&gt; value. &lt;code&gt;halt-test&lt;/code&gt; defaults to a simple counter that returns &lt;code&gt;t&lt;/code&gt; after &lt;code&gt;-fixfn-max-iterations&lt;/code&gt;, to guard against infinite iteration. Otherwise, &lt;code&gt;halt-test&lt;/code&gt; must be a function that accepts a single argument, the current value of &lt;code&gt;x&lt;/code&gt;, and returns non-&lt;code&gt;nil&lt;/code&gt; as long as iteration should continue. In this way, a more sophisticated convergence test may be supplied by the caller.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The return value of the lambda is either the fixpoint or, if iteration halted before converging, a cons with car &lt;code&gt;halted&lt;/code&gt; and cdr the final output from &lt;code&gt;halt-test&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In types: (a -&amp;gt; a) -&amp;gt; a -&amp;gt; a.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-fixfn #&#39;cos #&#39;approx=) 0.7) ;; ~&amp;gt; 0.7390851332151607
(funcall (-fixfn (lambda (x) (expt (+ x 10) 0.25))) 2.0) ;; =&amp;gt; 1.8555845286409378
(funcall (-fixfn #&#39;sin #&#39;approx=) 0.1) ;; =&amp;gt; (halted . t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;-prodfn &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Return a function that applies each of &lt;code&gt;fns&lt;/code&gt; to each of a list of arguments.&lt;/p&gt; 
&lt;p&gt;Takes a list of &lt;code&gt;n&lt;/code&gt; functions and returns a function that takes a list of length &lt;code&gt;n&lt;/code&gt;, applying &lt;code&gt;i&lt;/code&gt;th function to &lt;code&gt;i&lt;/code&gt;th element of the input list. Returns a list of length &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In types (for &lt;code&gt;n&lt;/code&gt;=2): ((a -&amp;gt; b), (c -&amp;gt; d)) -&amp;gt; (a, c) -&amp;gt; (b, d)&lt;/p&gt; 
&lt;p&gt;This function satisfies the following laws:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  (-compose (-prodfn f g ...)
            (-prodfn f&#39; g&#39; ...))
= (-prodfn (-compose f f&#39;)
           (-compose g g&#39;)
           ...)

  (-prodfn f g ...)
= (-juxt (-compose f (-partial #&#39;nth 0))
         (-compose g (-partial #&#39;nth 1))
         ...)

  (-compose (-prodfn f g ...)
            (-juxt f&#39; g&#39; ...))
= (-juxt (-compose f f&#39;)
         (-compose g g&#39;)
         ...)

  (-compose (-partial #&#39;nth n)
            (-prod f1 f2 ...))
= (-compose fn (-partial #&#39;nth n))
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(funcall (-prodfn #&#39;1+ #&#39;1- #&#39;number-to-string) &#39;(1 2 3)) ;; =&amp;gt; (2 1 &quot;3&quot;)
(-map (-prodfn #&#39;1- #&#39;1+) &#39;((1 2) (3 4) (5 6))) ;; =&amp;gt; ((0 3) (2 5) (4 7))
(apply #&#39;+ (funcall (-prodfn #&#39;length #&#39;string-to-number) &#39;((t) &quot;5&quot;))) ;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;Yes, please do. Pure functions in the list manipulation realm only, please. There&#39;s a suite of examples/tests in &lt;code&gt;dev/examples.el&lt;/code&gt;, so remember to add tests for your additions, or I might break them later.&lt;/p&gt; 
&lt;p&gt;You&#39;ll find the repo at:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;https://github.com/magnars/dash.el
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regenerate the docs with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make docs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I highly recommend that you install these as a pre-commit hook, so that the tests are always running and the docs are always in sync:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cp dev/pre-commit.sh .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Oh, and don&#39;t edit &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;dash.texi&lt;/code&gt; directly; they are auto-generated. Change &lt;code&gt;readme-template.md&lt;/code&gt; or &lt;code&gt;dash-template.texi&lt;/code&gt; instead, respectively.&lt;/p&gt; 
&lt;p&gt;To ensure that &lt;code&gt;dash.el&lt;/code&gt; can be distributed with GNU ELPA or Emacs, we require that all contributors assign copyright to the Free Software Foundation. For more on this, see &lt;a href=&quot;https://gnu.org/software/emacs/manual/html_node/emacs/Copyright-Assignment.html&quot;&gt;&lt;code&gt;(info &quot;(emacs) Copyright Assignment&quot;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Fuco1&quot;&gt;Matus Goljer&lt;/a&gt; contributed lots of features and functions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tkf&quot;&gt;Takafumi Arakaki&lt;/a&gt; contributed &lt;code&gt;-group-by&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tali713&quot;&gt;tali713&lt;/a&gt; is the author of &lt;code&gt;-applify&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vemv&quot;&gt;Víctor M. Valenzuela&lt;/a&gt; contributed &lt;code&gt;-repeat&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nicferrier&quot;&gt;Nic Ferrier&lt;/a&gt; contributed &lt;code&gt;-cons*&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Wilfred&quot;&gt;Wilfred Hughes&lt;/a&gt; contributed &lt;code&gt;-slice&lt;/code&gt;, &lt;code&gt;-first-item&lt;/code&gt;, and &lt;code&gt;-last-item&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shosti&quot;&gt;Emanuel Evans&lt;/a&gt; contributed &lt;code&gt;-if-let&lt;/code&gt;, &lt;code&gt;-when-let&lt;/code&gt;, and &lt;code&gt;-insert-at&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rejeep&quot;&gt;Johan Andersson&lt;/a&gt; contributed &lt;code&gt;-sum&lt;/code&gt;, &lt;code&gt;-product&lt;/code&gt;, and &lt;code&gt;-same-items?&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kurisuwhyte&quot;&gt;Christina Whyte&lt;/a&gt; contributed &lt;code&gt;-compose&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/steventlamb&quot;&gt;Steve Lamb&lt;/a&gt; contributed &lt;code&gt;-cycle&lt;/code&gt;, &lt;code&gt;-pad&lt;/code&gt;, &lt;code&gt;-annotate&lt;/code&gt;, &lt;code&gt;-zip-fill&lt;/code&gt;, and a variadic version of &lt;code&gt;-zip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fbergroth&quot;&gt;Fredrik Bergroth&lt;/a&gt; made the &lt;code&gt;-if-let&lt;/code&gt; family use &lt;code&gt;-let&lt;/code&gt; destructuring and improved the script for generating documentation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/holomorph&quot;&gt;Mark Oteiza&lt;/a&gt; contributed &lt;code&gt;-iota&lt;/code&gt; and the script to create an Info manual.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wasamasa&quot;&gt;Vasilij Schneidermann&lt;/a&gt; contributed &lt;code&gt;-some&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/occidens&quot;&gt;William West&lt;/a&gt; made &lt;code&gt;-fixfn&lt;/code&gt; more robust at handling floats.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/camsaul&quot;&gt;Cam Saul&lt;/a&gt; contributed &lt;code&gt;-some-&amp;gt;&lt;/code&gt;, &lt;code&gt;-some-&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;-some--&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/basil-conto&quot;&gt;Basil L. Contovounesios&lt;/a&gt; contributed &lt;code&gt;-common-prefix&lt;/code&gt;, &lt;code&gt;-common-suffix&lt;/code&gt;, and various other improvements.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/doublep&quot;&gt;Paul Pogonyshev&lt;/a&gt; contributed &lt;code&gt;-each-r&lt;/code&gt; and &lt;code&gt;-each-r-while&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thanks!&lt;/p&gt; 
&lt;p&gt;New contributors are very welcome. See the &lt;a href=&quot;https://raw.githubusercontent.com/magnars/dash.el/master/#contribute&quot;&gt;&lt;code&gt;Contribute&lt;/code&gt;&lt;/a&gt; section above.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2012-2025 Free Software Foundation, Inc.&lt;/p&gt; 
&lt;p&gt;Author: Magnar Sveen &lt;a href=&quot;mailto:magnars@gmail.com&quot;&gt;magnars@gmail.com&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&quot;https://www.gnu.org/licenses/&quot;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rejeep/f.el</title>
      <link>https://github.com/rejeep/f.el</link>
      <description>&lt;p&gt;Modern API for working with files and directories in Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;-&lt;em&gt;- mode: org -&lt;/em&gt;-&lt;/h1&gt; 
&lt;p&gt;#+title: f.el&lt;/p&gt; 
&lt;p&gt;[[https://github.com/rejeep/f.el/actions/workflows/workflow.yml][file:https://github.com/rejeep/f.el/actions/workflows/workflow.yml/badge.svg]] [[https://coveralls.io/r/rejeep/f.el][file:https://img.shields.io/coveralls/rejeep/f.el.svg]] [[https://melpa.org/#/f][file:https://melpa.org/packages/f-badge.svg]] [[https://stable.melpa.org/#/f][file:https://stable.melpa.org/packages/f-badge.svg]]&lt;/p&gt; 
&lt;p&gt;Much inspired by [[https://github.com/magnars][@magnars]]s excellent [[https://github.com/magnars/s.el][s.el]] and [[https://github.com/magnars/dash.el][dash.el]], [[https://github.com/rejeep/f.el][f.el]] is a modern API for working with files and directories in Emacs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation :noexport: It’s available on [[https://melpa.org/#/f][Melpa]] and [[https://stable.melpa.org/#/f][Melpa Stable]]. #+begin_src text M-x package-install f #+end_src&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Or you can just dump &lt;del&gt;f.el&lt;/del&gt; in your load path somewhere.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Table of Contents :TOC_3_gh:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#contributing][Contributing]]&lt;/li&gt; 
 &lt;li&gt;[[#documentation-and-examples][Documentation and examples]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#paths][Paths]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#f-join][f-join]]&lt;/li&gt; 
     &lt;li&gt;[[#f-split][f-split]]&lt;/li&gt; 
     &lt;li&gt;[[#f-expand][f-expand]]&lt;/li&gt; 
     &lt;li&gt;[[#f-filename][f-filename]]&lt;/li&gt; 
     &lt;li&gt;[[#f-dirname][f-dirname]]&lt;/li&gt; 
     &lt;li&gt;[[#f-common-parent][f-common-parent]]&lt;/li&gt; 
     &lt;li&gt;[[#f-ext][f-ext]]&lt;/li&gt; 
     &lt;li&gt;[[#f-no-ext][f-no-ext]]&lt;/li&gt; 
     &lt;li&gt;[[#f-swap-ext][f-swap-ext]]&lt;/li&gt; 
     &lt;li&gt;[[#f-base][f-base]]&lt;/li&gt; 
     &lt;li&gt;[[#f-relative][f-relative]]&lt;/li&gt; 
     &lt;li&gt;[[#f-short][f-short]]&lt;/li&gt; 
     &lt;li&gt;[[#f-long][f-long]]&lt;/li&gt; 
     &lt;li&gt;[[#f-canonical][f-canonical]]&lt;/li&gt; 
     &lt;li&gt;[[#f-slash][f-slash]]&lt;/li&gt; 
     &lt;li&gt;[[#f-full][f-full]]&lt;/li&gt; 
     &lt;li&gt;[[#f-uniquify][f-uniquify]]&lt;/li&gt; 
     &lt;li&gt;[[#f-uniquify-alist][f-uniquify-alist]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#io][I/O]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#f-read-bytes][f-read-bytes]]&lt;/li&gt; 
     &lt;li&gt;[[#f-write-bytes][f-write-bytes]]&lt;/li&gt; 
     &lt;li&gt;[[#f-append-bytes][f-append-bytes]]&lt;/li&gt; 
     &lt;li&gt;[[#f-read-text][f-read-text]]&lt;/li&gt; 
     &lt;li&gt;[[#f-write-text][f-write-text]]&lt;/li&gt; 
     &lt;li&gt;[[#f-append-text][f-append-text]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#destructive][Destructive]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#f-mkdir][f-mkdir]]&lt;/li&gt; 
     &lt;li&gt;[[#f-mkdir-full-path][f-mkdir-full-path]]&lt;/li&gt; 
     &lt;li&gt;[[#f-delete][f-delete]]&lt;/li&gt; 
     &lt;li&gt;[[#f-symlink][f-symlink]]&lt;/li&gt; 
     &lt;li&gt;[[#f-move][f-move]]&lt;/li&gt; 
     &lt;li&gt;[[#f-copy][f-copy]]&lt;/li&gt; 
     &lt;li&gt;[[#f-copy-contents][f-copy-contents]]&lt;/li&gt; 
     &lt;li&gt;[[#f-touch][f-touch]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#predicates][Predicates]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#f-exists-p][f-exists-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-directory-p][f-directory-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-file-p][f-file-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-symlink-p][f-symlink-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-readable-p][f-readable-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-writable-p][f-writable-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-executable-p][f-executable-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-absolute-p][f-absolute-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-relative-p][f-relative-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-root-p][f-root-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-ext-p][f-ext-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-same-p][f-same-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-parent-of-p][f-parent-of-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-child-of-p][f-child-of-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-ancestor-of-p][f-ancestor-of-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-descendant-of-p][f-descendant-of-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-hidden-p][f-hidden-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-empty-p][f-empty-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-newer-p][f-newer-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-older-p][f-older-p]]&lt;/li&gt; 
     &lt;li&gt;[[#f-same-time-p][f-same-time-p]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#stats][Stats]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#f-size][f-size]]&lt;/li&gt; 
     &lt;li&gt;[[#f-depth][f-depth]]&lt;/li&gt; 
     &lt;li&gt;[[#f-change-time][f-change-time]]&lt;/li&gt; 
     &lt;li&gt;[[#f-modification-time][f-modification-time]]&lt;/li&gt; 
     &lt;li&gt;[[#f-access-time][f-access-time]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#misc][Misc]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#f-this-file][f-this-file]]&lt;/li&gt; 
     &lt;li&gt;[[#f-path-separator][f-path-separator]]&lt;/li&gt; 
     &lt;li&gt;[[#f-glob][f-glob]]&lt;/li&gt; 
     &lt;li&gt;[[#f-entries][f-entries]]&lt;/li&gt; 
     &lt;li&gt;[[#f-directories][f-directories]]&lt;/li&gt; 
     &lt;li&gt;[[#f-files][f-files]]&lt;/li&gt; 
     &lt;li&gt;[[#f-root][f-root]]&lt;/li&gt; 
     &lt;li&gt;[[#f-traverse-upwards][f-traverse-upwards]]&lt;/li&gt; 
     &lt;li&gt;[[#f-with-sandbox][f-with-sandbox]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#example][Example]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#using-standard-emacs-builtin-functions][Using standard Emacs builtin functions]]&lt;/li&gt; 
   &lt;li&gt;[[#using-fel][Using f.el]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Contributing Check [[file:./CONTRIBUTING.org]]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Documentation and examples ** Paths *** f-join #+begin_example (f-join &amp;amp;rest args)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Join ARGS to a single path.&lt;/p&gt; 
&lt;p&gt;Be aware if one of the arguments is an absolute path, ‘f-join’ will discard all the preceeding arguments and make this absolute path the new root of the generated path. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-join &quot;path&quot;) ;; =&amp;gt; &quot;path&quot; (f-join &quot;path&quot; &quot;to&quot;) ;; =&amp;gt; &quot;path/to&quot; (f-join &quot;/&quot; &quot;path&quot; &quot;to&quot; &quot;heaven&quot;) ;; =&amp;gt; &quot;/path/to/heaven&quot; (f-join &quot;path&quot; &quot;/to&quot; &quot;file&quot;) ;; =&amp;gt; &quot;/to/file&quot; #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-split #+begin_example (f-split path)&lt;/p&gt; 
&lt;p&gt;Split PATH and return list containing parts. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-split &quot;path&quot;) ;; =&amp;gt; &#39;(&quot;path&quot;) (f-split &quot;path/to&quot;) ;; =&amp;gt; &#39;(&quot;path&quot; &quot;to&quot;) (f-split &quot;/path/to/heaven&quot;) ;; =&amp;gt; &#39;(&quot;/&quot; &quot;path&quot; &quot;to&quot; &quot;heaven&quot;) (f-split &quot;&lt;del&gt;/back/to/earth&quot;) ;; =&amp;gt; &#39;(&quot;&lt;/del&gt;&quot; &quot;back&quot; &quot;to&quot; &quot;earth&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-expand #+begin_example (f-expand path &amp;amp;optional dir)&lt;/p&gt; 
&lt;p&gt;Expand PATH relative to DIR (or ‘default-directory’). PATH and DIR can be either a directory names or directory file names. Return a directory name if PATH is a directory name, and a directory file name otherwise. File name handlers are ignored. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-expand &quot;name&quot;) ;; =&amp;gt; &quot;/default/directory/name&quot; (f-expand &quot;name&quot; &quot;other/directory&quot;) ;; =&amp;gt; &quot;other/directory/name&quot; #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-filename #+begin_example (f-filename path)&lt;/p&gt; 
&lt;p&gt;Return the name of PATH. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-filename &quot;path/to/file.ext&quot;) ;; =&amp;gt; &quot;file.ext&quot; (f-filename &quot;path/to/directory&quot;) ;; =&amp;gt; &quot;directory&quot; #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-dirname #+begin_example (f-dirname path)&lt;/p&gt; 
&lt;p&gt;Return the parent directory to PATH. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-parent&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-dirname &quot;path/to/file.ext&quot;) ;; =&amp;gt; &quot;path/to&quot; (f-dirname &quot;path/to/directory&quot;) ;; =&amp;gt; &quot;path/to&quot; (f-dirname &quot;/&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-common-parent #+begin_example (f-common-parent paths)&lt;/p&gt; 
&lt;p&gt;Return the deepest common parent directory of PATHS. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-common-parent &#39;(&quot;foo/bar/baz&quot; &quot;foo/bar/qux&quot; &quot;foo/bar/mux&quot;)) ;; =&amp;gt; &quot;foo/bar/&quot; (f-common-parent &#39;(&quot;/foo/bar/baz&quot; &quot;/foo/bar/qux&quot; &quot;/foo/bax/mux&quot;)) ;; =&amp;gt; &quot;/foo/&quot; (f-common-parent &#39;(&quot;foo/bar/baz&quot; &quot;quack/bar/qux&quot; &quot;lack/bar/mux&quot;)) ;; =&amp;gt; &quot;&quot; #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-ext #+begin_example (f-ext path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-name-extension&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-ext &quot;path/to/file&quot;) ;; =&amp;gt; nil (f-ext &quot;path/to/file.txt&quot;) ;; =&amp;gt; txt (f-ext &quot;path/to/file.txt.org&quot;) ;; =&amp;gt; org #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-no-ext #+begin_example (f-no-ext path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-name-sans-extension&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-no-ext &quot;path/to/file&quot;) ;; =&amp;gt; path/to/file (f-no-ext &quot;path/to/file.txt&quot;) ;; =&amp;gt; path/to/file (f-no-ext &quot;path/to/file.txt.org&quot;) ;; =&amp;gt; path/to/file.txt #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-swap-ext #+begin_example (f-swap-ext path ext)&lt;/p&gt; 
&lt;p&gt;Return PATH but with EXT as the new extension. EXT must not be nil or empty. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-swap-ext &quot;path/to/file.ext&quot; &quot;org&quot;) ;; =&amp;gt; &quot;path/to/file.org&quot; (f-swap-ext &quot;path/to/file.ext&quot; &quot;&quot;) ;; =&amp;gt; error #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-base #+begin_example (f-base path)&lt;/p&gt; 
&lt;p&gt;Return the name of PATH, excluding the extension of file. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-base &quot;path/to/file.ext&quot;) ;; =&amp;gt; &quot;file&quot; (f-base &quot;path/to/directory&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-relative #+begin_example (f-relative path &amp;amp;optional dir)&lt;/p&gt; 
&lt;p&gt;Convert FILENAME to be relative to DIRECTORY (default: ‘default-directory’). This function returns a relative file name that is equivalent to FILENAME when used with that default directory as the default. If FILENAME is a relative file name, it will be interpreted as existing in ‘default-directory’. If FILENAME and DIRECTORY lie on different machines or on different drives on a DOS/Windows machine, it returns FILENAME in expanded form.&lt;/p&gt; 
&lt;p&gt;(fn FILENAME &amp;amp;optional DIRECTORY) #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-relative &quot;/some/path/relative/to/my/file.txt&quot; &quot;/some/path/&quot;) ;; =&amp;gt; relative/to/my/file.txt (f-relative &quot;/default/directory/my/file.txt&quot;) ;; =&amp;gt; my/file.txt #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-short #+begin_example (f-short path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;abbreviate-file-name&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-abbrev&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-short &quot;/Users/foo/Code/bar&quot;) ;; =&amp;gt; ~/Code/bar (f-short &quot;/path/to/Code/bar&quot;) ;; =&amp;gt; /path/to/Code/bar #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-long #+begin_example (f-long path)&lt;/p&gt; 
&lt;p&gt;Return long version of PATH. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-long &quot;~/Code/bar&quot;) ;; =&amp;gt; /Users/foo/Code/bar (f-long &quot;/path/to/Code/bar&quot;) ;; =&amp;gt; /path/to/Code/bar #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-canonical #+begin_example (f-canonical path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-truename&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-canonical &quot;/path/to/real/file&quot;) ;; =&amp;gt; /path/to/real/file (f-canonical &quot;/link/to/file&quot;) ;; =&amp;gt; /path/to/real/file #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-slash #+begin_example (f-slash path)&lt;/p&gt; 
&lt;p&gt;Append slash to PATH unless one already.&lt;/p&gt; 
&lt;p&gt;Some functions, such as ‘call-process’ requires there to be an ending slash. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-slash &quot;/path/to/file&quot;) ;; =&amp;gt; /path/to/file (f-slash &quot;/path/to/dir&quot;) ;; =&amp;gt; /path/to/dir/ (f-slash &quot;/path/to/dir/&quot;) ;; =&amp;gt; /path/to/dir/ #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-full #+begin_example (f-full path)&lt;/p&gt; 
&lt;p&gt;Return absolute path to PATH, with ending slash. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-full &quot;&lt;del&gt;/path/to/file&quot;) ;; =&amp;gt; /home/foo/path/to/file (f-full &quot;&lt;/del&gt;/path/to/dir&quot;) ;; =&amp;gt; /home/foo/path/to/dir/ (f-full &quot;~/path/to/dir/&quot;) ;; =&amp;gt; /home/foo/path/to/dir/ #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-uniquify #+begin_example (f-uniquify paths)&lt;/p&gt; 
&lt;p&gt;Return unique suffixes of FILES.&lt;/p&gt; 
&lt;p&gt;This function expects no duplicate paths. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-uniquify &#39;(&quot;/foo/bar&quot; &quot;/foo/baz&quot; &quot;/foo/quux&quot;)) ;; =&amp;gt; &#39;(&quot;bar&quot; &quot;baz&quot; &quot;quux&quot;) (f-uniquify &#39;(&quot;/foo/bar&quot; &quot;/www/bar&quot; &quot;/foo/quux&quot;)) ;; =&amp;gt; &#39;(&quot;foo/bar&quot; &quot;www/bar&quot; &quot;quux&quot;) (f-uniquify &#39;(&quot;/foo/bar&quot; &quot;/www/bar&quot; &quot;/www/bar/quux&quot;)) ;; =&amp;gt; &#39;(&quot;foo/bar&quot; &quot;www/bar&quot; &quot;quux&quot;) (f-uniquify &#39;(&quot;/foo/bar&quot; &quot;/foo/baz&quot; &quot;/home/www/bar&quot; &quot;/home/www/baz&quot; &quot;/var/foo&quot; &quot;/opt/foo/www/baz&quot;)) ;; =&amp;gt; &#39;(&quot;foo/bar&quot; &quot;www/bar&quot; &quot;foo/baz&quot; &quot;home/www/baz&quot; &quot;foo/www/baz&quot; &quot;foo&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-uniquify-alist #+begin_example (f-uniquify-alist paths)&lt;/p&gt; 
&lt;p&gt;Return alist mapping FILES to unique suffixes of FILES.&lt;/p&gt; 
&lt;p&gt;This function expects no duplicate paths. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-uniquify-alist &#39;(&quot;/foo/bar&quot; &quot;/foo/baz&quot; &quot;/foo/quux&quot;)) ;; =&amp;gt; &#39;((&quot;/foo/bar&quot; . &quot;bar&quot;) (&quot;/foo/baz&quot; . &quot;baz&quot;) (&quot;/foo/quux&quot; . &quot;quux&quot;)) (f-uniquify-alist &#39;(&quot;/foo/bar&quot; &quot;/www/bar&quot; &quot;/foo/quux&quot;)) ;; =&amp;gt; &#39;((&quot;/foo/bar&quot; . &quot;foo/bar&quot;) (&quot;/www/bar&quot; . &quot;www/bar&quot;) (&quot;/foo/quux&quot; . &quot;quux&quot;)) (f-uniquify-alist &#39;(&quot;/foo/bar&quot; &quot;/www/bar&quot; &quot;/www/bar/quux&quot;)) ;; =&amp;gt; &#39;((&quot;/foo/bar&quot; . &quot;foo/bar&quot;) (&quot;/www/bar&quot; . &quot;www/bar&quot;) (&quot;/www/bar/quux&quot; . &quot;quux&quot;)) (f-uniquify-alist &#39;(&quot;/foo/bar&quot; &quot;/foo/baz&quot; &quot;/home/www/bar&quot; &quot;/home/www/baz&quot; &quot;/var/foo&quot; &quot;/opt/foo/www/baz&quot;)) ;; =&amp;gt; &#39;((&quot;/foo/bar&quot; . &quot;foo/bar&quot;) (&quot;/home/www/bar&quot; . &quot;www/bar&quot;) (&quot;/foo/baz&quot; . &quot;foo/baz&quot;) (&quot;/home/www/baz&quot; . &quot;home/www/baz&quot;) (&quot;/opt/foo/www/baz&quot; . &quot;foo/www/baz&quot;) (&quot;/var/foo&quot; . &quot;foo&quot;)) #+end_src&lt;/p&gt; 
&lt;p&gt;** I/O *** f-read-bytes #+begin_example (f-read-bytes path)&lt;/p&gt; 
&lt;p&gt;Read binary data from PATH.&lt;/p&gt; 
&lt;p&gt;Return the binary data as unibyte string. The optional second and third arguments BEG and END specify what portion of the file to read. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-read-bytes &quot;path/to/binary/data&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-write-bytes #+begin_example (f-write-bytes data path)&lt;/p&gt; 
&lt;p&gt;Write binary DATA to PATH.&lt;/p&gt; 
&lt;p&gt;DATA is a unibyte string. PATH is a file name to write to. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-write-bytes (unibyte-string 72 101 108 108 111 32 119 111 114 108 100) &quot;path/to/binary/data&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-append-bytes #+begin_example (f-append-bytes text coding path)&lt;/p&gt; 
&lt;p&gt;Append binary DATA to PATH.&lt;/p&gt; 
&lt;p&gt;If PATH does not exist, it is created. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-append-bytes &quot;path/to/file&quot; (unibyte-string 72 101 108 108 111 32 119 111 114 108 100)) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-read-text #+begin_example (f-read-text path &amp;amp;optional coding)&lt;/p&gt; 
&lt;p&gt;Read text with PATH, using CODING.&lt;/p&gt; 
&lt;p&gt;CODING defaults to ‘utf-8’.&lt;/p&gt; 
&lt;p&gt;Return the decoded text as multibyte string. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-read&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-read-text &quot;path/to/file.txt&quot; &#39;utf-8) (f-read &quot;path/to/file.txt&quot; &#39;utf-8) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-write-text #+begin_example (f-write-text text coding path)&lt;/p&gt; 
&lt;p&gt;Write TEXT with CODING to PATH.&lt;/p&gt; 
&lt;p&gt;TEXT is a multibyte string. CODING is a coding system to encode TEXT with. PATH is a file name to write to. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-write&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-write-text &quot;Hello world&quot; &#39;utf-8 &quot;path/to/file.txt&quot;) (f-write &quot;Hello world&quot; &#39;utf-8 &quot;path/to/file.txt&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-append-text #+begin_example (f-append-text text coding path)&lt;/p&gt; 
&lt;p&gt;Append TEXT with CODING to PATH.&lt;/p&gt; 
&lt;p&gt;If PATH does not exist, it is created. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-append&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-append-text &quot;Hello world&quot; &#39;utf-8 &quot;path/to/file.txt&quot;) (f-append &quot;Hello world&quot; &#39;utf-8 &quot;path/to/file.txt&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;** Destructive *** f-mkdir #+begin_example (f-mkdir &amp;amp;rest dirs)&lt;/p&gt; 
&lt;p&gt;Create directories DIRS.&lt;/p&gt; 
&lt;p&gt;DIRS should be a successive list of directories forming together a full path. The easiest way to call this function with a fully formed path is using ‘f-split’ alongside it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(apply #&#39;f-mkdir (f-split &quot;path/to/file&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Although it works sometimes, it is not recommended to use fully formed paths in the function. In this case, it is recommended to use ‘f-mkdir-full-path’ instead. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-mkdir &quot;dir&quot;) ;; creates /default/directory/dir (f-mkdir &quot;other&quot; &quot;dir&quot;) ;; creates /default/directory/other/dir (f-mkdir &quot;/&quot; &quot;some&quot; &quot;path&quot;) ;; creates /some/path (f-mkdir &quot;~&quot; &quot;yet&quot; &quot;another&quot; &quot;dir&quot;) ;; creates ~/yet/another/dir #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-mkdir-full-path #+begin_example (f-mkdir-full-path dir)&lt;/p&gt; 
&lt;p&gt;Create DIR from a full path.&lt;/p&gt; 
&lt;p&gt;This function is similar to ‘f-mkdir’ except it can accept a full path instead of requiring several successive directory names. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-mkdir-full-path &quot;dir&quot;) ;; creates /default/directory/dir (f-mkdir-full-path &quot;other/dir&quot;) ;; creates /default/directory/other/dir (f-mkdir-full-path &quot;/some/path&quot;) ;; creates /some/path (f-mkdir-full-path &quot;~/yet/another/dir&quot;) ;; creates ~/yet/another/dir #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-delete #+begin_example (f-delete path &amp;amp;optional force)&lt;/p&gt; 
&lt;p&gt;Delete PATH, which can be file or directory.&lt;/p&gt; 
&lt;p&gt;If FORCE is t, a directory will be deleted recursively. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-delete &quot;dir&quot;) (f-delete &quot;other/dir&quot; t) (f-delete &quot;path/to/file.txt&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-symlink #+begin_example (f-symlink source path)&lt;/p&gt; 
&lt;p&gt;Create a symlink to SOURCE from PATH. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-symlink &quot;path/to/source&quot; &quot;path/to/link&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-move #+begin_example (f-move from to)&lt;/p&gt; 
&lt;p&gt;Move or rename FROM to TO. If TO is a directory name, move FROM into TO. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-move &quot;path/to/file.txt&quot; &quot;new-file.txt&quot;) (f-move &quot;path/to/file.txt&quot; &quot;other/path&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-copy #+begin_example (f-copy from to)&lt;/p&gt; 
&lt;p&gt;Copy file or directory FROM to TO. If FROM names a directory and TO is a directory name, copy FROM into TO as a subdirectory. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-copy &quot;path/to/file.txt&quot; &quot;new-file.txt&quot;) (f-copy &quot;path/to/dir&quot; &quot;other/dir&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-copy-contents #+begin_example (f-copy-contents from to)&lt;/p&gt; 
&lt;p&gt;Copy contents in directory FROM, to directory TO. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-copy-contents &quot;path/to/dir&quot; &quot;path/to/other/dir&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-touch #+begin_example (f-touch path)&lt;/p&gt; 
&lt;p&gt;Update PATH last modification date or create if it does not exist. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-touch &quot;path/to/existing/file.txt&quot;) (f-touch &quot;path/to/non/existing/file.txt&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;** Predicates *** f-exists-p #+begin_example (f-exists-p path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-exists-p&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-exists?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-exists-p &quot;path/to/file.txt&quot;) (f-exists-p &quot;path/to/dir&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-directory-p #+begin_example (f-directory-p path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-directory-p&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Aliases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;f-directory?&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f-dir-p&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f-dir?&lt;/del&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-directory-p &quot;path/to/file.txt&quot;) ;; =&amp;gt; nil (f-directory-p &quot;path/to/dir&quot;) ;; =&amp;gt; t #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-file-p #+begin_example (f-file-p path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-regular-p&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-file?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-file-p &quot;path/to/file.txt&quot;) ;; =&amp;gt; t (f-file-p &quot;path/to/dir&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-symlink-p #+begin_example (f-symlink-p path)&lt;/p&gt; 
&lt;p&gt;Return t if PATH is symlink, false otherwise. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-symlink?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-symlink-p &quot;path/to/file.txt&quot;) ;; =&amp;gt; nil (f-symlink-p &quot;path/to/dir&quot;) ;; =&amp;gt; nil (f-symlink-p &quot;path/to/link&quot;) ;; =&amp;gt; t #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-readable-p #+begin_example (f-readable-p path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-readable-p&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-readable?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-readable-p &quot;path/to/file.txt&quot;) (f-readable-p &quot;path/to/dir&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-writable-p #+begin_example (f-writable-p path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-writable-p&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-writable?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-writable-p &quot;path/to/file.txt&quot;) (f-writable-p &quot;path/to/dir&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-executable-p #+begin_example (f-executable-p path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-executable-p&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-executable?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-executable-p &quot;path/to/file.txt&quot;) (f-executable-p &quot;path/to/dir&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-absolute-p #+begin_example (f-absolute-p path) #+end_example&lt;/p&gt; 
&lt;p&gt;Alias of &lt;del&gt;file-name-absolute-p&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-absolute?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-absolute-p &quot;path/to/dir&quot;) ;; =&amp;gt; nil (f-absolute-p &quot;/full/path/to/dir&quot;) ;; =&amp;gt; t #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-relative-p #+begin_example (f-relative-p path)&lt;/p&gt; 
&lt;p&gt;Return t if PATH is relative, false otherwise. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-relative?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-relative-p &quot;path/to/dir&quot;) ;; =&amp;gt; t (f-relative-p &quot;/full/path/to/dir&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-root-p #+begin_example (f-root-p path)&lt;/p&gt; 
&lt;p&gt;Return t if PATH is root directory, false otherwise. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-root?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-root-p &quot;/&quot;) ;; =&amp;gt; t (f-root-p &quot;/not/root&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-ext-p #+begin_example (f-ext-p path ext)&lt;/p&gt; 
&lt;p&gt;Return t if extension of PATH is EXT, false otherwise.&lt;/p&gt; 
&lt;p&gt;If EXT is nil or omitted, return t if PATH has any extension, false otherwise.&lt;/p&gt; 
&lt;p&gt;The extension, in a file name, is the part that follows the last ’.’, excluding version numbers and backup suffixes. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-ext?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-ext-p &quot;path/to/file.el&quot; &quot;el&quot;) ;; =&amp;gt; t (f-ext-p &quot;path/to/file.el&quot; &quot;txt&quot;) ;; =&amp;gt; nil (f-ext-p &quot;path/to/file.el&quot;) ;; =&amp;gt; t (f-ext-p &quot;path/to/file&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-same-p #+begin_example (f-same-p path-a path-b)&lt;/p&gt; 
&lt;p&gt;Return t if PATH-A and PATH-B are references to same file. #+end_example&lt;/p&gt; 
&lt;p&gt;Aliases:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;f-same?&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f-equal-p&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f-equal?&lt;/del&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-same-p &quot;foo.txt&quot; &quot;foo.txt&quot;) ;; =&amp;gt; t (f-same-p &quot;/path/to/foo.txt&quot; &quot;/path/to/bar.txt&quot;) ;; =&amp;gt; nil (f-same-p &quot;foo/bar/../baz&quot; &quot;foo/baz&quot;) ;; =&amp;gt; t #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-parent-of-p #+begin_example (f-parent-of-p path-a path-b)&lt;/p&gt; 
&lt;p&gt;Return t if PATH-A is parent of PATH-B. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-parent-of?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-parent-of-p &quot;/path/to&quot; &quot;/path/to/dir&quot;) ;; =&amp;gt; t (f-parent-of-p &quot;/path/to/dir&quot; &quot;/path/to&quot;) ;; =&amp;gt; nil (f-parent-of-p &quot;/path/to&quot; &quot;/path/to&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-child-of-p #+begin_example (f-child-of-p path-a path-b)&lt;/p&gt; 
&lt;p&gt;Return t if PATH-A is child of PATH-B. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-child-of?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-child-of-p &quot;/path/to&quot; &quot;/path/to/dir&quot;) ;; =&amp;gt; nil (f-child-of-p &quot;/path/to/dir&quot; &quot;/path/to&quot;) ;; =&amp;gt; t (f-child-of-p &quot;/path/to&quot; &quot;/path/to&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-ancestor-of-p #+begin_example (f-ancestor-of-p path-a path-b)&lt;/p&gt; 
&lt;p&gt;Return t if PATH-A is ancestor of PATH-B. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-ancestor-of?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-ancestor-of-p &quot;/path/to&quot; &quot;/path/to/dir&quot;) ;; =&amp;gt; t (f-ancestor-of-p &quot;/path&quot; &quot;/path/to/dir&quot;) ;; =&amp;gt; t (f-ancestor-of-p &quot;/path/to/dir&quot; &quot;/path/to&quot;) ;; =&amp;gt; nil (f-ancestor-of-p &quot;/path/to&quot; &quot;/path/to&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-descendant-of-p #+begin_example (f-descendant-of-p path-a path-b)&lt;/p&gt; 
&lt;p&gt;Return t if PATH-A is desendant of PATH-B. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-descendant-of?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-descendant-of-p &quot;/path/to/dir&quot; &quot;/path/to&quot;) ;; =&amp;gt; t (f-descendant-of-p &quot;/path/to/dir&quot; &quot;/path&quot;) ;; =&amp;gt; t (f-descendant-of-p &quot;/path/to&quot; &quot;/path/to/dir&quot;) ;; =&amp;gt; nil (f-descendant-of-p &quot;/path/to&quot; &quot;/path/to&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-hidden-p #+begin_example (f-hidden-p path)&lt;/p&gt; 
&lt;p&gt;Return t if PATH is hidden, nil otherwise.&lt;/p&gt; 
&lt;p&gt;BEHAVIOR controls when a path should be considered as hidden depending on its value. Beware, if PATH begins with &quot;./&quot;, the current dir &quot;.&quot; will not be considered as hidden.&lt;/p&gt; 
&lt;p&gt;When BEHAVIOR is nil, it will only check if the path begins with a dot, as in .a/b/c, and return t if there is one. This is the old behavior of f.el left as default for backward-compatibility purposes.&lt;/p&gt; 
&lt;p&gt;When BEHAVIOR is ANY, return t if any of the elements of PATH is hidden, nil otherwise.&lt;/p&gt; 
&lt;p&gt;When BEHAVIOR is LAST, return t only if the last element of PATH is hidden, nil otherwise.&lt;/p&gt; 
&lt;p&gt;TODO: Hidden directories and files on Windows are marked differently than on *NIX systems. This should be properly implemented. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-hidden?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-hidden-p &quot;path/to/foo&quot;) ;; =&amp;gt; nil (f-hidden-p &quot;.path/to/foo&quot;) ;; =&amp;gt; t (f-hidden-p &quot;path/.to/foo&quot;) ;; =&amp;gt; nil (f-hidden-p &quot;path/to/.foo&quot;) ;; =&amp;gt; nil (f-hidden-p &quot;.path/to/foo&quot; &#39;any) ;; =&amp;gt; t (f-hidden-p &quot;path/.to/foo&quot; &#39;any) ;; =&amp;gt; t (f-hidden-p &quot;path/to/.foo&quot; &#39;any) ;; =&amp;gt; t (f-hidden-p &quot;.path/to/foo&quot; &#39;last) ;; =&amp;gt; nil (f-hidden-p &quot;path/.to/foo&quot; &#39;last) ;; =&amp;gt; nil (f-hidden-p &quot;path/to/.foo&quot; &#39;last) ;; =&amp;gt; t #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-empty-p #+begin_example (f-empty-p path)&lt;/p&gt; 
&lt;p&gt;If PATH is a file, return t if the file in PATH is empty, nil otherwise. If PATH is directory, return t if directory has no files, nil otherwise. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-empty?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-empty-p &quot;/path/to/empty-file&quot;) ;; =&amp;gt; t (f-empty-p &quot;/path/to/file-with-contents&quot;) ;; =&amp;gt; nil (f-empty-p &quot;/path/to/empty-dir/&quot;) ;; =&amp;gt; t (f-empty-p &quot;/path/to/dir-with-contents/&quot;) ;; =&amp;gt; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-newer-p #+begin_example (f-newer-p file other &amp;amp;optional method)&lt;/p&gt; 
&lt;p&gt;Compare if FILE is newer than OTHER.&lt;/p&gt; 
&lt;p&gt;For more info on METHOD, see ‘f--date-compare’. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-newer?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-newer-p &quot;newer.txt&quot; &quot;older.txt&quot;) ;; t (f-newer-p &quot;older.txt&quot;&quot;newer.txt&quot; ) ;; nil (f-newer-p &quot;same1.txt&quot; &quot;same2.txt&quot;) ;; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-older-p #+begin_example (f-older-p file other &amp;amp;optional method)&lt;/p&gt; 
&lt;p&gt;Compare if FILE is older than OTHER.&lt;/p&gt; 
&lt;p&gt;For more info on METHOD, see ‘f--date-compare’. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-older?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-older-p &quot;older.txt&quot; &quot;newer.txt&quot;) ;; t (f-older-p &quot;newer.txt&quot;&quot;older.txt&quot; ) ;; nil (f-older-p &quot;same1.txt&quot; &quot;same2.txt&quot;) ;; nil #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-same-time-p #+begin_example (f-same-time-p file other &amp;amp;optional method)&lt;/p&gt; 
&lt;p&gt;Check if FILE and OTHER share the same access or modification time.&lt;/p&gt; 
&lt;p&gt;For more info on METHOD, see ‘f--date-compare’. #+end_example&lt;/p&gt; 
&lt;p&gt;Alias: &lt;del&gt;f-same-time?&lt;/del&gt;&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-same-time-p &quot;same1.txt&quot; &quot;same2.txt&quot;) ;; t (f-same-time-p &quot;newer.txt&quot; &quot;older.txt&quot;) ;; nil (f-same-time-p &quot;older.txt&quot; &quot;newer.txt&quot;) ;; nil #+end_src&lt;/p&gt; 
&lt;p&gt;** Stats *** f-size #+begin_example (f-size path)&lt;/p&gt; 
&lt;p&gt;Return size of PATH.&lt;/p&gt; 
&lt;p&gt;If PATH is a file, return size of that file. If PATH is directory, return sum of all files in PATH. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-size &quot;path/to/file.txt&quot;) (f-size &quot;path/to/dir&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-depth #+begin_example (f-depth path)&lt;/p&gt; 
&lt;p&gt;Return the depth of PATH.&lt;/p&gt; 
&lt;p&gt;At first, PATH is expanded with ‘f-expand’. Then the full path is used to detect the depth. ’/’ will be zero depth, ’/usr’ will be one depth. And so on. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-depth &quot;/&quot;) ;; 0 (f-depth &quot;/var/&quot;) ;; 1 (f-depth &quot;/usr/local/bin&quot;) ;; 3 #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-change-time #+begin_example (f-change-time path &amp;amp;optional timestamp-p)&lt;/p&gt; 
&lt;p&gt;Return the last status change time of PATH.&lt;/p&gt; 
&lt;p&gt;The status change time (ctime) of PATH in the same format as ‘current-time’. For details on TIMESTAMP-P and the format of the returned value, see ‘f--get-time’. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-change-time &quot;path/to/file.txt&quot;) ;; (25517 48756 26337 111000) (f-change-time &quot;path/to/dir&quot;) ;; (25517 57887 344657 210000) (f-change-time &quot;path/to/file.txt&quot; t) ;; (1672330868026337111 . 1000000000) (f-change-time &quot;path/to/dir&quot; t) ;; (1672339999344657210 . 1000000000) (f-change-time &quot;path/to/file.txt&quot;&#39;seconds) ;; 1672330868 (f-change-time &quot;path/to/dir&quot;&#39;seconds) ;; 1672339999 #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-modification-time #+begin_example (f-modification-time path &amp;amp;optional timestamp-p)&lt;/p&gt; 
&lt;p&gt;Return the last modification time of PATH. The modification time (mtime) of PATH in the same format as ‘current-time’. For details on TIMESTAMP-P and the format of the returned value, see ‘f--get-time’. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-modification-time &quot;path/to/file.txt&quot;) ;; (25517 48756 26337 111000) (f-modification-time &quot;path/to/dir&quot;) ;; (25517 57887 344657 210000) (f-modification-time &quot;path/to/file.txt&quot; t) ;; (1672330868026337111 . 1000000000) (f-modification-time &quot;path/to/dir&quot; t) ;; (1672339999344657210 . 1000000000) (f-modification-time &quot;path/to/file.txt&quot; &#39;seconds) ;; 1672330868 (f-modification-time &quot;path/to/dir&quot; &#39;seconds) ;; 1672339999 #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-access-time #+begin_example (f-access-time path &amp;amp;optional timestamp-p)&lt;/p&gt; 
&lt;p&gt;Return the last access time of PATH. The access time (atime) of PATH is in the same format as ‘current-time’. For details on TIMESTAMP-P and the format of the returned value, see ‘f--get-time’. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-access-time &quot;path/to/file.txt&quot;) ;; (25517 48756 26337 111000) (f-access-time &quot;path/to/dir&quot;) ;; (25517 57887 344657 210000) (f-access-time &quot;path/to/file.txt&quot; t) ;; (1672330868026337111 . 1000000000) (f-access-time &quot;path/to/dir&quot; t) ;; (1672339999344657210 . 1000000000) (f-access-time &quot;path/to/file.txt&quot; &#39;seconds) ;; 1672330868 (f-access-time &quot;path/to/dir&quot; &#39;seconds) ;; 1672339999 #+end_src&lt;/p&gt; 
&lt;p&gt;** Misc *** f-this-file #+begin_example (f-this-file)&lt;/p&gt; 
&lt;p&gt;Return path to this file. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-this-file) ;; =&amp;gt; /path/to/this/file #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-path-separator #+begin_example (f-path-separator)&lt;/p&gt; 
&lt;p&gt;Return path separator. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-path-separator) ;; =&amp;gt; / #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-glob #+begin_example (f-glob pattern &amp;amp;optional path)&lt;/p&gt; 
&lt;p&gt;Find PATTERN in PATH. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-glob &quot;path/to/&lt;em&gt;.el&quot;) (f-glob &quot;&lt;/em&gt;.el&quot; &quot;path/to&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-entries #+begin_example (f-entries path &amp;amp;optional fn recursive)&lt;/p&gt; 
&lt;p&gt;Find all files and directories in PATH.&lt;/p&gt; 
&lt;p&gt;FN - called for each found file and directory. If FN returns a thruthy value, file or directory will be included. RECURSIVE - Search for files and directories recursive. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-entries &quot;path/to/dir&quot;) (f-entries &quot;path/to/dir&quot; (lambda (file) (s-matches? &quot;test&quot; file))) (f-entries &quot;path/to/dir&quot; nil t) (f--entries &quot;path/to/dir&quot; (s-matches? &quot;test&quot; it)) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-directories #+begin_example (f-directories path &amp;amp;optional fn recursive)&lt;/p&gt; 
&lt;p&gt;Find all directories in PATH. See ‘f-entries’. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-directories &quot;path/to/dir&quot;) (f-directories &quot;path/to/dir&quot; (lambda (dir) (equal (f-filename dir) &quot;test&quot;))) (f-directories &quot;path/to/dir&quot; nil t) (f--directories &quot;path/to/dir&quot; (equal (f-filename it) &quot;test&quot;)) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-files #+begin_example (f-files path &amp;amp;optional fn recursive)&lt;/p&gt; 
&lt;p&gt;Find all files in PATH. See ‘f-entries’. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-files &quot;path/to/dir&quot;) (f-files &quot;path/to/dir&quot; (lambda (file) (equal (f-ext file) &quot;el&quot;))) (f-files &quot;path/to/dir&quot; nil t) (f--files &quot;path/to/dir&quot; (equal (f-ext it) &quot;el&quot;)) #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-root #+begin_example (f-root)&lt;/p&gt; 
&lt;p&gt;Return absolute root. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-root) ;; =&amp;gt; &quot;/&quot; #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-traverse-upwards #+begin_example (f-traverse-upwards fn &amp;amp;optional path)&lt;/p&gt; 
&lt;p&gt;Traverse up as long as FN return nil, starting at PATH.&lt;/p&gt; 
&lt;p&gt;If FN returns a non-nil value, the path sent as argument to FN is returned. If no function callback return a non-nil value, nil is returned. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-traverse-upwards (lambda (path) (f-exists? (f-expand &quot;.git&quot; path))) start-path)&lt;/p&gt; 
&lt;p&gt;(f--traverse-upwards (f-exists? (f-expand &quot;.git&quot; it)) start-path) ;; same as above #+end_src&lt;/p&gt; 
&lt;p&gt;*** f-with-sandbox #+begin_example (f-with-sandbox path-or-paths &amp;amp;rest body)&lt;/p&gt; 
&lt;p&gt;Only allow PATH-OR-PATHS and descendants to be modified in BODY. #+end_example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (f-with-sandbox foo-path (f-touch (f-expand &quot;foo&quot; foo-path))) (f-with-sandbox (list foo-path bar-path) (f-touch (f-expand &quot;foo&quot; foo-path)) (f-touch (f-expand &quot;bar&quot; bar-path))) (f-with-sandbox foo-path (f-touch (f-expand &quot;bar&quot; bar-path))) ;; &quot;Destructive operation outside sandbox&quot; #+end_src&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Example&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here&#39;s an example of a function that finds the Git project root.&lt;/p&gt; 
&lt;p&gt;** Using standard Emacs builtin functions #+begin_src emacs-lisp (defun find-git-root (&amp;amp;optional dir) (unless dir (setq dir (expand-file-name (file-name-directory (buffer-file-name))))) (let ((parent (expand-file-name &quot;..&quot; dir))) (unless (equal parent dir) (if (file-exists-p (expand-file-name &quot;.git&quot; dir)) dir (find-git-root parent))))) #+end_src&lt;/p&gt; 
&lt;p&gt;** Using f.el #+begin_src emacs-lisp (defun find-git-root (&amp;amp;optional dir) (interactive) (unless dir (setq dir (f-dirname (buffer-file-name)))) (let ((parent (f-parent dir))) (unless (f-root? parent) (if (f-exists? (f-expand &quot;.git&quot; dir)) dir (find-git-root parent))))) #+end_src&lt;/p&gt; 
&lt;p&gt;Now, try writing it even simpler yourself. Hint, check out &lt;del&gt;f-traverse-upwards&lt;/del&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
