<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Swift Monthly Trending</title>
    <description>Monthly Trending of Swift in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:59:41 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>XcodesOrg/XcodesApp</title>
      <link>https://github.com/XcodesOrg/XcodesApp</link>
      <description>&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode - with a mouse click.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/icon.png&quot; align=&quot;center&quot; width=&quot;50&quot; height=&quot;50&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/IconDark.png&quot; align=&quot;center&quot; width=&quot;50&quot; height=&quot;50&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/IconMono.png&quot; align=&quot;center&quot; width=&quot;50&quot; height=&quot;50&quot; /&gt; Xcodes.app&lt;/h1&gt; 
&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;If you&#39;re looking for a command-line version of Xcodes.app, try &lt;a href=&quot;https://github.com/XcodesOrg/xcodes&quot;&gt;&lt;code&gt;xcodes&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/XcodesOrg/XcodesApp/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/screenshot_light.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/screenshot_dark.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;🎉&lt;/span&gt; Announcement&lt;/h3&gt; 
&lt;p&gt;XcodesApp is now part of the &lt;code&gt;XcodesOrg&lt;/code&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/nextstep.md&quot;&gt;read more here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;List all available Xcode versions from &lt;a href=&quot;https://xcodereleases.com&quot;&gt;Xcode Releases&#39;&lt;/a&gt; data or the Apple Developer website.&lt;/li&gt; 
 &lt;li&gt;Install any Xcode version, &lt;strong&gt;fully automated&lt;/strong&gt; from start to finish. Xcodes uses &lt;a href=&quot;https://aria2.github.io&quot;&gt;&lt;code&gt;aria2&lt;/code&gt;&lt;/a&gt;, which uses up to 16 connections to download 3-5x faster than URLSession.&lt;/li&gt; 
 &lt;li&gt;Automatically resumes installs if network errors.&lt;/li&gt; 
 &lt;li&gt;Apple ID required to download Xcode versions.&lt;/li&gt; 
 &lt;li&gt;Just click a button to make a version active with &lt;code&gt;xcode-select&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;View release notes, OS compatibility, included SDKs and compilers from &lt;a href=&quot;https://xcodereleases.com&quot;&gt;Xcode Releases&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Dark/Light Mode supported&lt;/li&gt; 
 &lt;li&gt;Security Key Authentication supported&lt;/li&gt; 
 &lt;li&gt;Support installing Platforms/Runtimes&lt;/li&gt; 
 &lt;li&gt;Support installing Apple Silicon variants&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Platforms/Runtimes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcodes supports downloading the Apple runtimes via the app. Simply click on the Platform, and Xcodes will install automatically for you.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note: iOS 18+, tvOS 18+, watchOS 11+, visionOS 2+ requires that Xcode 16.1 Beta 3+ be installed and active.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Apple Silicon Variants&lt;/h2&gt; 
&lt;p&gt;As of Xcode 26, Apple provides Apple Silicon as well as Universal variants for Xcode versions as well as each runtime. Simply tap on which variant you want installed. To install the Apple Silicon runtime variant Xcode 26 is required to be active.&lt;/p&gt; 
&lt;h2&gt;Experiments&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Thanks to the wonderful work of &lt;a href=&quot;https://github.com/saagarjha/unxip&quot;&gt;https://github.com/saagarjha/unxip&lt;/a&gt;, turn on the experiment to increase your unxipping time by up to 70%! More can be found on his repo, but bugs, high memory may occur if used.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/experiment_light.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/experiment_dark.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Localization&lt;/h2&gt; 
&lt;p&gt;Xcodes supports localization in several languages.&lt;/p&gt; 
&lt;p&gt;The following languages are supported because of the following community users!&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;French 🇫🇷&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/dompepin&quot;&gt;@dompepin&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Italian 🇮🇹&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/gualtierofrigerio&quot;&gt;gualtierofrigerio&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Spanish 🇪🇸🇲&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/cesartru88&quot;&gt;@cesartru88&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Korean 🇰🇷&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ryan-son&quot;&gt;@ryan-son&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Russian 🇷🇺&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/alexmazlov&quot;&gt;@alexmazlov&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Turkish 🇹🇷&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/egesucu&quot;&gt;@egesucu&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hindi 🇮🇳&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/KGurpreet&quot;&gt;@KGurpreet&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Chinese-Simplified 🇨🇳&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/megabitsenmzq&quot;&gt;@megabitsenmzq&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Finnish 🇫🇮&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/marcusziade&quot;&gt;@marcusziade&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Chinese-Traditional 🇹🇼&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/itszero&quot;&gt;@itszero&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ukranian 🇺🇦&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/gelosi&quot;&gt;@gelosi&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Japanese 🇯🇵&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/tatsuz0u&quot;&gt;@tatsuz0u&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;German 🇩🇪&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/drct&quot;&gt;@drct&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Dutch 🇳🇱&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github/com/jfversluis&quot;&gt;@jfversluis&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Brazilian Portuguese 🇧🇷&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/brunomunizaf&quot;&gt;@brunomunizaf&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Polish 🇵🇱&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jakex7&quot;&gt;@jakex7&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Catalan&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ferranabello&quot;&gt;@ferranabello&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Greek 🇬🇷&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/alladinian&quot;&gt;@alladinian&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Thai 🇹🇭&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/neetrath&quot;&gt;@neetrath&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Want to add more languages? Simply create a PR with the updated strings file.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;v1.X - requires macOS 11 or newer v2.X - requires macOS 13 v3.X - requires macOS 13 - architecture variants and updated icon.&lt;/p&gt; 
&lt;h3&gt;Install with Homebrew&lt;/h3&gt; 
&lt;p&gt;Developer ID-signed and notarized release builds are available on Homebrew. These don&#39;t require Xcode to already be installed in order to use.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask xcodes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manually install&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the latest version &lt;a href=&quot;https://github.com/XcodesOrg/XcodesApp/releases/latest&quot;&gt;here&lt;/a&gt; using the &lt;strong&gt;Xcodes.zip&lt;/strong&gt; asset. These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/li&gt; 
 &lt;li&gt;Move the unzipped &lt;code&gt;Xcodes.app&lt;/code&gt; to your &lt;code&gt;/Applications&lt;/code&gt; directory&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Xcodes.app and CLI is updated, maintained with contributors like yourself. Even open source libraries and tools come with expenses. If you would like to support Xcodes or donate to the development and maintenance of the tool, it would be greatly appreciated. There is absolutely no obligation!&lt;/p&gt; 
&lt;a href=&quot;https://opencollective.com/xcodesapp&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://opencollective.com/xcodesapp/donate/button@2x.png?color=blue&quot; class=&quot;buymeacoffee&quot; width=&quot;200&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;You&#39;ll need macOS 15.6 Ventura and Xcode 26 in order to build and run Xcodes.app.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Unxip&lt;/code&gt; and &lt;code&gt;aria2&lt;/code&gt; must be compiled as a universal binary&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# compile for Intel
 swiftc -parse-as-library -O -target x86_64-apple-macos11 unxip.swift
# compile for M1
 swiftc -parse-as-library -O -target arm64-apple-macos11 unxip.swift

# combine for universal binary
 lipo -create -output unxip unxip_intel unxip_m1  
# check it
 lipo -archs unxip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/xcpretty/xcode-install&quot;&gt;&lt;code&gt;xcode-install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/spaceship&quot;&gt;fastlane/spaceship&lt;/a&gt; both deserve credit for figuring out the hard parts of what makes this possible.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Releasing a new version&lt;/summary&gt; 
 &lt;p&gt;Follow the steps below to build and release a new version of Xcodes.app. For any of the git steps, you can use your preferred tool, but please sign the tag.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Update the version number in Xcode and commit the change, if necessary

# Question: Did anything in XPCHelper change?
# - com.xcodesorg.xcodesapp.Helper folder and HelperXPCShared
# - if so, bump the version number in com.xcodesorg.xcodesapp.Helper target.
# Note: you do not have to bump the version number if nothing has changed.
# Note2: If you do bump the version, the end user, must re-install the XPCHelper and give permission again.

# Increment the build number
scripts/increment_build_number.sh

# Commit the change
git add Xcodes/Resources/Info.plist
git commit -asm &quot;Increment build number&quot;

# Tag the latest commit
# Replace $VERSION and $BUILD below with the latest real values
git tag -asm &quot;v$VERSIONb$BUILD&quot; &quot;v$VERSIONb$BUILD&quot;

# Push to origin
git push --follow-tags

# Build the app
# Make sure you have the Xcode Selected you want to build with
scripts/package_release.sh

# Notarize the app
# Do this from the Product directory so the app is zipped without being nested inside Product
# Create a app specific password on appleid.apple.com if you haven&#39;t already
# xcrun notarytool store-credentials &quot;AC_PASSWORD&quot; \
#              --apple-id &quot;test@example.com&quot; \
#              --team-id &quot;teamid&quot; \
#               --password &quot;app specific password&quot;

pushd Product
../scripts/notarize.sh Xcodes.zip &amp;lt;MYORG&amp;gt;

# Sign the .zip for Sparkle, note the signature in the output for later
# If you&#39;re warned about the signing key not being found, see the Xcodes 1Password vault for the key and installation instructions.
../scripts/sign_update Xcodes.zip
popd

# Go to https://github.com/XcodesOrg/XcodesApp/releases
# If there are uncategorized PRs, add the appropriate label and run the Release Drafter action manually
# Edit the latest draft release
# Set its tag to the tag you just pushed
# Set its title to a string with the format &quot;$VERSION ($BUILD)&quot;
# Polish the draft release notes, if necessary
# Add the signature to the bottom of the release notes in a comment, like:
&amp;lt;!-- sparkle:edSignature=$SIGNATURE --&amp;gt;
# Attach the zip that was created in the Product directory to the release
# Publish the release

shasum -a 256 xcodes.zip
# Update the [Homebrew Cask](https://github.com/XcodesOrg/homebrew-cask/blob/master/Casks/x/xcodes.rb).
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/mattkiazyk&quot;&gt;Matt Kiazyk&lt;/a&gt; - &lt;a href=&quot;https://www.twitter.com/mattkiazyk&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/xcodesApp&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://github.com/xcodesOrg&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://iosdev.space/@XcodesApp&quot;&gt;Mastadon&lt;/a&gt; |&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>p0deje/Maccy</title>
      <link>https://github.com/p0deje/Maccy</link>
      <description>&lt;p&gt;Lightweight clipboard manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;img width=&quot;128px&quot; src=&quot;https://maccy.app/img/maccy/Logo.png&quot; alt=&quot;Logo&quot; align=&quot;left&quot; /&gt; 
&lt;h1&gt;&lt;a href=&quot;https://maccy.app&quot;&gt;Maccy&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/p0deje/Maccy/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/p0deje/Maccy/total.svg?sanitize=true&quot; alt=&quot;Downloads&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://app.bitrise.io/app/716921b669780314&quot;&gt;&lt;img src=&quot;https://img.shields.io/bitrise/716921b669780314/master?token=3pMiCb5dpFzlO-7jTYtO3Q&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Maccy is a lightweight clipboard manager for macOS. It keeps the history of what you copy and lets you quickly navigate, search, and use previous clipboard contents.&lt;/p&gt; 
&lt;p&gt;Maccy works on macOS Sonoma 14 or higher.&lt;/p&gt; 
&lt;!-- vim-markdown-toc GFM --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#advanced&quot;&gt;Advanced&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-copied-items&quot;&gt;Ignore Copied Items&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-custom-copy-types&quot;&gt;Ignore Custom Copy Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#speed-up-clipboard-check-interval&quot;&gt;Speed up Clipboard Check Interval&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#faq&quot;&gt;FAQ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#why-doesnt-it-paste-when-i-select-an-item-in-history&quot;&gt;Why doesn&#39;t it paste when I select an item in history?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#when-assigning-a-hotkey-to-open-maccy-it-says-that-this-hotkey-is-already-used-in-some-system-setting&quot;&gt;When assigning a hotkey to open Maccy, it says that this hotkey is already used in some system setting.&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#how-to-restore-hidden-footer&quot;&gt;How to restore hidden footer?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#how-to-ignore-copies-from-universal-clipboard&quot;&gt;How to ignore copies from Universal Clipboard?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#my-keyboard-shortcut-stopped-working-in-password-fields-how-do-i-fix-this&quot;&gt;My keyboard shortcut stopped working in password fields. How do I fix this?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#translations&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- vim-markdown-toc --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lightweight and fast&lt;/li&gt; 
 &lt;li&gt;Keyboard-first&lt;/li&gt; 
 &lt;li&gt;Secure and private&lt;/li&gt; 
 &lt;li&gt;Native UI&lt;/li&gt; 
 &lt;li&gt;Open source and free&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Download the latest version from the &lt;a href=&quot;https://github.com/p0deje/Maccy/releases/latest&quot;&gt;releases&lt;/a&gt; page, or use &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install maccy
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; to popup Maccy or click on its icon in the menu bar.&lt;/li&gt; 
 &lt;li&gt;Type what you want to find.&lt;/li&gt; 
 &lt;li&gt;To select the history item you wish to copy, press &lt;kbd&gt;ENTER&lt;/kbd&gt;, or click the item, or use &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; 
 &lt;li&gt;To choose the history item and paste, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; 
 &lt;li&gt;To choose the history item and paste without formatting, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; 
 &lt;li&gt;To delete the history item, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;To see the full text of the history item, wait a couple of seconds for tooltip.&lt;/li&gt; 
 &lt;li&gt;To pin the history item so that it remains on top of the list, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt;. The item will be moved to the top with a random but permanent keyboard shortcut. To unpin it, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt; again.&lt;/li&gt; 
 &lt;li&gt;To clear all unpinned items, select &lt;em&gt;Clear&lt;/em&gt; in the menu, or press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;. To clear all items including pinned, select &lt;em&gt;Clear&lt;/em&gt; in the menu with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed, or press &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;To disable Maccy and ignore new copies, click on the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed.&lt;/li&gt; 
 &lt;li&gt;To ignore only the next copy, click on the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; pressed.&lt;/li&gt; 
 &lt;li&gt;To customize the behavior, check &quot;Preferences…&quot; window, or press &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Advanced&lt;/h2&gt; 
&lt;h3&gt;Ignore Copied Items&lt;/h3&gt; 
&lt;p&gt;You can tell Maccy to ignore all copied items:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;defaults write org.p0deje.Maccy ignoreEvents true # default is false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is useful if you have some workflow for copying sensitive data. You can set &lt;code&gt;ignoreEvents&lt;/code&gt; to true, copy the data and set &lt;code&gt;ignoreEvents&lt;/code&gt; back to false.&lt;/p&gt; 
&lt;p&gt;You can also click the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed. To ignore only the next copy, click with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; pressed.&lt;/p&gt; 
&lt;h3&gt;Ignore Custom Copy Types&lt;/h3&gt; 
&lt;p&gt;By default Maccy will ignore certain copy types that are considered to be confidential or temporary. The default list always include the following types:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;org.nspasteboard.TransientType&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;org.nspasteboard.ConcealedType&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;org.nspasteboard.AutoGeneratedType&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Also, default configuration includes the following types but they can be removed or overwritten:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;com.agilebits.onepassword&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;com.typeit4me.clipping&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;de.petermaurer.TransientPasteboardType&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Pasteboard generator type&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;net.antelle.keeweb&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can add additional custom types using settings. To find what custom types are used by an application, you can use free application &lt;a href=&quot;https://github.com/sindresorhus/Pasteboard-Viewer&quot;&gt;Pasteboard-Viewer&lt;/a&gt;. Simply download the application, open it, copy something from the application you want to ignore and look for any custom types in the left sidebar. &lt;a href=&quot;https://github.com/p0deje/Maccy/issues/125&quot;&gt;Here is an example of using this approach to ignore Adobe InDesign&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Speed up Clipboard Check Interval&lt;/h3&gt; 
&lt;p&gt;By default, Maccy checks clipboard every 500 ms, which should be enough for most users. If you want to speed it up, you can change it with &lt;code&gt;defaults&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;defaults write org.p0deje.Maccy clipboardCheckInterval 0.1 # 100 ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Why doesn&#39;t it paste when I select an item in history?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure you have &quot;Paste automatically&quot; enabled in Preferences.&lt;/li&gt; 
 &lt;li&gt;Make sure &quot;Maccy&quot; is added to System Settings -&amp;gt; Privacy &amp;amp; Security -&amp;gt; Accessibility.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;When assigning a hotkey to open Maccy, it says that this hotkey is already used in some system setting.&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open System settings -&amp;gt; Keyboard -&amp;gt; Keyboard Shortcuts.&lt;/li&gt; 
 &lt;li&gt;Find where that hotkey is used. For example, &quot;Convert text to simplified Chinese&quot; is under Services -&amp;gt; Text.&lt;/li&gt; 
 &lt;li&gt;Disable that hotkey or remove assigned combination (&lt;a href=&quot;https://github.com/p0deje/Maccy/assets/576152/446719e6-c3e5-4eb0-95fb-5a811066487f&quot;&gt;screenshot&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Restart Maccy.&lt;/li&gt; 
 &lt;li&gt;Assign hotkey in Maccy settings.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;How to restore hidden footer?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Maccy window.&lt;/li&gt; 
 &lt;li&gt;Press &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt; to open preferences.&lt;/li&gt; 
 &lt;li&gt;Enable footer in Appearance section.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If for some reason it doesn&#39;t work, run the following command in Terminal.app:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;defaults write org.p0deje.Maccy showFooter 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How to ignore copies from &lt;a href=&quot;https://support.apple.com/en-us/102430&quot;&gt;Universal Clipboard&lt;/a&gt;?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Preferences -&amp;gt; Ignore -&amp;gt; Pasteboard Types.&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;com.apple.is-remote-clipboard&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;My keyboard shortcut stopped working in password fields. How do I fix this?&lt;/h3&gt; 
&lt;p&gt;If your shortcut produces a character (like &lt;code&gt;Option+C&lt;/code&gt; → &quot;ç&quot;), macOS security may block it in password fields. Use &lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;Karabiner-Elements&lt;/a&gt; to remap your shortcut to a different combination like &lt;code&gt;Cmd+Shift+C&lt;/code&gt;. &lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/docs/keyboard-shortcut-password-fields.md&quot;&gt;See detailed solution&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;The translations are hosted in &lt;a href=&quot;https://hosted.weblate.org/engage/maccy/&quot;&gt;Weblate&lt;/a&gt;. You can use it to suggest changes in translations and localize the application to a new language.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://hosted.weblate.org/engage/maccy/&quot;&gt;&lt;img src=&quot;https://hosted.weblate.org/widget/maccy/multi-auto.svg?sanitize=true&quot; alt=&quot;Translation status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;There are dozens of similar applications out there, so why build another? Over the past years since I moved from Linux to macOS, I struggled to find a clipboard manager that is as free and simple as &lt;a href=&quot;http://parcellite.sourceforge.net&quot;&gt;Parcellite&lt;/a&gt;, but I couldn&#39;t. So I&#39;ve decided to build one.&lt;/p&gt; 
&lt;p&gt;Also, I wanted to learn Swift and get acquainted with macOS application development.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/p0deje/Maccy/master/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Alamofire/Alamofire</title>
      <link>https://github.com/Alamofire/Alamofire</link>
      <description>&lt;p&gt;Elegant HTTP Networking in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/AlamofireLogo.png&quot; alt=&quot;Alamofire: Elegant Networking in Swift&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://img.shields.io/badge/Swift-5.9_5.10_6.0-Orange?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-5.9_5.10_6.0-orange?style=flat-square&quot; alt=&quot;Swift&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_vision_OS_Linux_Windows_Android-Green?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_visionOS_Linux_Windows_Android-yellowgreen?style=flat-square&quot; alt=&quot;Platforms&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/cocoapods/v/Alamofire.svg&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat-square&quot; alt=&quot;CocoaPods Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat-square&quot; alt=&quot;Carthage Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&quot; alt=&quot;Swift Package Manager&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire/37&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift_Forums-Alamofire-orange?style=flat-square&quot; alt=&quot;Swift Forums&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Alamofire is an HTTP networking library written in Swift.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#component-libraries&quot;&gt;Component Libraries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#migration-guides&quot;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#communication&quot;&gt;Communication&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#using-alamofire&quot;&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#introduction&quot;&gt;&lt;strong&gt;Introduction -&lt;/strong&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#making-requests&quot;&gt;Making Requests&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-handling&quot;&gt;Response Handling&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-validation&quot;&gt;Response Validation&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-caching&quot;&gt;Response Caching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;HTTP -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-methods&quot;&gt;HTTP Methods&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md##request-parameters-and-parameter-encoders&quot;&gt;Parameters and Parameter Encoder&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-headers&quot;&gt;HTTP Headers&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#authentication&quot;&gt;Authentication&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Large Data -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#downloading-data-to-a-file&quot;&gt;Downloading Data to a File&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#uploading-data-to-a-server&quot;&gt;Uploading Data to a Server&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Tools -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#statistical-metrics&quot;&gt;Statistical Metrics&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#curl-command-output&quot;&gt;cURL Command Output&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md&quot;&gt;Advanced Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;URL Session -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#session&quot;&gt;Session Manager&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#sessiondelegate&quot;&gt;Session Delegate&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#request&quot;&gt;Request&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Routing -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#routing-requests&quot;&gt;Routing Requests&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#adapting-and-retrying-requests-with-requestinterceptor&quot;&gt;Adapting and Retrying Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Model Objects -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#customizing-response-handlers&quot;&gt;Custom Response Handlers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Advanced Concurrency -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-swift-concurrency&quot;&gt;Swift Concurrency&lt;/a&gt; and &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-combine&quot;&gt;Combine&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Connection -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#security&quot;&gt;Security&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#network-reachability&quot;&gt;Network Reachability&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#open-radars&quot;&gt;Open Radars&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#donations&quot;&gt;Donations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Chainable Request / Response Methods&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Swift Concurrency Support Back to iOS 13, macOS 10.15, tvOS 13, and watchOS 6.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Combine Support&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; URL / JSON Parameter Encoding&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Upload File / Data / Stream / MultipartFormData&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Download File using Request or Resume Data&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Authentication with &lt;code&gt;URLCredential&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; HTTP Response Validation&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Upload and Download Progress Closures with Progress&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; cURL Command Output&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Dynamically Adapt and Retry Requests&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; TLS Certificate and Public Key Pinning&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Network Reachability&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Comprehensive Unit and Integration Test Coverage&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://alamofire.github.io/Alamofire&quot;&gt;Complete Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Write Requests Fast!&lt;/h2&gt; 
&lt;p&gt;Alamofire&#39;s compact syntax and extensive feature set allow requests with powerful features like automatic retry to be written in just a few lines of code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Automatic String to URL conversion, Swift concurrency support, and automatic retry.
let response = await AF.request(&quot;https://httpbin.org/get&quot;, interceptor: .retryPolicy)
                       // Automatic HTTP Basic Auth.
                       .authenticate(username: &quot;user&quot;, password: &quot;pass&quot;)
                       // Caching customization.
                       .cacheResponse(using: .cache)
                       // Redirect customization.
                       .redirect(using: .follow)
                       // Validate response code and Content-Type.
                       .validate()
                       // Produce a cURL command for the request.
                       .cURLDescription { description in
                         print(description)
                       }
                       // Automatic Decodable support with background parsing.
                       .serializingDecodable(DecodableType.self)
                       // Await the full response with metrics and a parsed body.
                       .response
// Detailed response description for easy debugging.
debugPrint(response)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Component Libraries&lt;/h2&gt; 
&lt;p&gt;In order to keep Alamofire focused specifically on core networking implementations, additional component libraries have been created by the &lt;a href=&quot;https://github.com/Alamofire/Foundation&quot;&gt;Alamofire Software Foundation&lt;/a&gt; to bring additional functionality to the Alamofire ecosystem.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/AlamofireImage&quot;&gt;AlamofireImage&lt;/a&gt; - An image library including image response serializers, &lt;code&gt;UIImage&lt;/code&gt; and &lt;code&gt;UIImageView&lt;/code&gt; extensions, custom image filters, an auto-purging in-memory cache, and a priority-based image downloading system.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/AlamofireNetworkActivityIndicator&quot;&gt;AlamofireNetworkActivityIndicator&lt;/a&gt; - Controls the visibility of the network activity indicator on iOS using Alamofire. It contains configurable delay timers to help mitigate flicker and can support &lt;code&gt;URLSession&lt;/code&gt; instances not managed by Alamofire.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Minimum Swift Version&lt;/th&gt; 
   &lt;th&gt;Installation&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS 10.0+ / macOS 10.12+ / tvOS 10.0+ / watchOS 3.0+&lt;/td&gt; 
   &lt;td&gt;5.9 / Xcode 15.0&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#cocoapods&quot;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#carthage&quot;&gt;Carthage&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#manually&quot;&gt;Manual&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Fully Tested&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Known Issues on Linux and Windows&lt;/h4&gt; 
&lt;p&gt;Alamofire builds on Linux, Windows, and Android but there are missing features and many issues in the underlying &lt;code&gt;swift-corelibs-foundation&lt;/code&gt; that prevent full functionality and may cause crashes. These include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ServerTrustManager&lt;/code&gt; and associated certificate functionality is unavailable, so there is no certificate pinning and no client certificate support.&lt;/li&gt; 
 &lt;li&gt;Various methods of HTTP authentication may crash, including HTTP Basic and HTTP Digest. Crashes may occur if responses contain server challenges.&lt;/li&gt; 
 &lt;li&gt;Cache control through &lt;code&gt;CachedResponseHandler&lt;/code&gt; and associated APIs is unavailable, as the underlying delegate methods aren&#39;t called.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; are never gathered.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;WebSocketRequest&lt;/code&gt; is not available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Due to these issues, Alamofire is unsupported on Linux, Windows, and Android. Please report any crashes to the &lt;a href=&quot;https://bugs.swift.org&quot;&gt;Swift bug reporter&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Migration Guides&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%205.0%20Migration%20Guide.md&quot;&gt;Alamofire 5.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%204.0%20Migration%20Guide.md&quot;&gt;Alamofire 4.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%203.0%20Migration%20Guide.md&quot;&gt;Alamofire 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%202.0%20Migration%20Guide.md&quot;&gt;Alamofire 2.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;need help with making network requests&lt;/strong&gt; using Alamofire, use &lt;a href=&quot;https://stackoverflow.com/questions/tagged/alamofire&quot;&gt;Stack Overflow&lt;/a&gt; and tag &lt;code&gt;alamofire&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;If you need to &lt;strong&gt;find or understand an API&lt;/strong&gt;, check &lt;a href=&quot;http://alamofire.github.io/Alamofire/&quot;&gt;our documentation&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url_loading_system&quot;&gt;Apple&#39;s documentation for &lt;code&gt;URLSession&lt;/code&gt;&lt;/a&gt;, on top of which Alamofire is built.&lt;/li&gt; 
 &lt;li&gt;If you need &lt;strong&gt;help with an Alamofire feature&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss Alamofire best practices&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss a feature request&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue here on GitHub and follow the guide. The more detail the better!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; 
&lt;p&gt;Once you have your Swift package set up, adding Alamofire as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt; or the Package list in Xcode.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/Alamofire/Alamofire.git&quot;, .upToNextMajor(from: &quot;5.10.0&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Normally you&#39;ll want to depend on the &lt;code&gt;Alamofire&lt;/code&gt; target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.product(name: &quot;Alamofire&quot;, package: &quot;Alamofire&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But if you want to force Alamofire to be dynamically linked (do not do this unless you&#39;re sure you need it), you can depend on the &lt;code&gt;AlamofireDynamic&lt;/code&gt; target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.product(name: &quot;AlamofireDynamic&quot;, package: &quot;Alamofire&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate Alamofire into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;Alamofire&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate Alamofire into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ogdl&quot;&gt;github &quot;Alamofire/Alamofire&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manually&lt;/h3&gt; 
&lt;p&gt;If you prefer not to use any of the aforementioned dependency managers, you can integrate Alamofire into your project manually.&lt;/p&gt; 
&lt;h4&gt;Embedded Framework&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &quot;if&quot; your project is not initialized as a git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add Alamofire as a git &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;submodule&lt;/a&gt; by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;It should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; in the Project Navigator and verify the deployment target matches that of your application target.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &quot;Targets&quot; heading in the sidebar.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the tab bar at the top of that window, open the &quot;General&quot; panel.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &quot;Embedded Binaries&quot; section.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt;, or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;The &lt;code&gt;Alamofire.framework&lt;/code&gt; is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before contributing to Alamofire, please read the instructions detailed in our &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Open Radars&lt;/h2&gt; 
&lt;p&gt;The following radars have some effect on the current implementation of Alamofire.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.openradar.me/radar?id=5517037090635776&quot;&gt;&lt;code&gt;rdar://21349340&lt;/code&gt;&lt;/a&gt; - Compiler throwing warning due to toll-free bridging issue in the test case&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdar://26870455&lt;/code&gt; - Background URL Session Configurations do not work in the simulator&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdar://26849668&lt;/code&gt; - Some URLProtocol APIs do not properly handle &lt;code&gt;URLRequest&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resolved Radars&lt;/h2&gt; 
&lt;p&gt;The following radars have been resolved over time after being filed against the Alamofire project.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.openradar.me/radar?id=5010235949318144&quot;&gt;&lt;code&gt;rdar://26761490&lt;/code&gt;&lt;/a&gt; - Swift string interpolation causing memory leak with common usage. 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): 9/1/17 in Xcode 9 beta 6.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://openradar.appspot.com/radar?id=4942308441063424&quot;&gt;&lt;code&gt;rdar://36082113&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; failing to link on watchOS 3.0+ 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): Just add &lt;code&gt;CFNetwork&lt;/code&gt; to your linked frameworks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FB7624529&lt;/code&gt; - &lt;code&gt;urlSession(_:task:didFinishCollecting:)&lt;/code&gt; never called on watchOS 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): Metrics now collected on watchOS 7+.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;What&#39;s the origin of the name Alamofire?&lt;/h3&gt; 
&lt;p&gt;Alamofire is named after the &lt;a href=&quot;https://aggie-horticulture.tamu.edu/wildseed/alamofire.html&quot;&gt;Alamo Fire flower&lt;/a&gt;, a hybrid variant of the Bluebonnet, the official state flower of Texas.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Alamofire is owned and maintained by the &lt;a href=&quot;http://alamofire.org&quot;&gt;Alamofire Software Foundation&lt;/a&gt;. You can follow them on Twitter at &lt;a href=&quot;https://twitter.com/AlamofireSF&quot;&gt;@AlamofireSF&lt;/a&gt; for project updates and releases.&lt;/p&gt; 
&lt;h3&gt;Security Disclosure&lt;/h3&gt; 
&lt;p&gt;If you believe you have identified a security vulnerability with Alamofire, you should report it as soon as possible via email to &lt;a href=&quot;mailto:security@alamofire.org&quot;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/Alamofire/Foundation#members&quot;&gt;ASF&lt;/a&gt; is looking to raise money to officially stay registered as a federal non-profit organization. Registering will allow Foundation members to gain some legal protections and also allow us to put donations to use, tax-free. Sponsoring the ASF will enable us to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pay our yearly legal fees to keep the non-profit in good status&lt;/li&gt; 
 &lt;li&gt;Pay for our mail servers to help us stay on top of all questions and security issues&lt;/li&gt; 
 &lt;li&gt;Potentially fund test servers to make it easier for us to test the edge cases&lt;/li&gt; 
 &lt;li&gt;Potentially fund developers to work on one of our projects full-time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The community adoption of the ASF libraries has been amazing. We are greatly humbled by your enthusiasm around the projects and want to continue to do everything we can to move the needle forward. With your continued support, the ASF will be able to improve its reach and also provide better legal safety for the core members. If you use any of our libraries for work, see if your employers would be interested in donating. Any amount you can donate, whether once or monthly, to help us reach our goal would be greatly appreciated.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/Alamofire&quot;&gt;Sponsor Alamofire&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Supporters&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://macstadium.com&quot;&gt;MacStadium&lt;/a&gt; provides Alamofire with a free, hosted Mac mini.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/MacStadiumLogo.png&quot; alt=&quot;Powered by MacStadium&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Alamofire is released under the MIT license. &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/LICENSE&quot;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TheBoredTeam/boring.notch</title>
      <link>https://github.com/TheBoredTeam/boring.notch</link>
      <description>&lt;p&gt;TheBoringNotch: Not so boring notch That Rocks 🎸🎶&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; &lt;br /&gt; &lt;a href=&quot;http://thebored.name&quot;&gt;&lt;img src=&quot;https://framerusercontent.com/images/RFK4vs0kn8pRMuOO58JeyoemXA.png?scale-down-to=256&quot; alt=&quot;Boring Notch&quot; width=&quot;150&quot; /&gt;&lt;/a&gt; &lt;br /&gt; Boring Notch &lt;br /&gt; &lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a title=&quot;Crowdin&quot; target=&quot;_blank&quot; href=&quot;https://crowdin.com/project/boring-notch&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/boring-notch/localized.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/TheBoredTeam/boring.notch/actions/workflows/cicd.yml/badge.svg?sanitize=true&quot; alt=&quot;TheBoringNotch Build &amp;amp; Test&quot; style=&quot;margin-right: 10px;&quot; /&gt; &lt;a href=&quot;https://discord.gg/c8JXA7qrPm&quot;&gt; &lt;img src=&quot;https://dcbadge.limes.pink/api/server/https://discord.gg/c8JXA7qrPm?style=flat&quot; alt=&quot;Discord Badge&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;!--Welcome to **Boring.Notch**, the coolest way to make your MacBook&#39;s notch the star of the show! Forget about those boring status bars—our notch turns into a dynamic music control center, complete with a snazzy visualizer and all the music controls you need. It&#39;s like having a mini concert right at the top of your screen! --&gt; 
&lt;p&gt;Say hello to &lt;strong&gt;Boring Notch&lt;/strong&gt;, the coolest way to make your MacBook’s notch the star of the show! Say goodbye to boring status bars: with Boring Notch, your notch transforms into a dynamic music control center, complete with a vibrant visualizer and all the essential music controls you need. But that’s just the start! Boring Notch also offers calendar integration, a handy file shelf with AirDrop support and more!&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/2d5f69c1-6e7b-4bc2-a6f1-bb9e27cf88a8&quot; alt=&quot;Demo GIF&quot; /&gt; &lt;/p&gt; 
&lt;!--https://github.com/user-attachments/assets/19b87973-4b3a-4853-b532-7e82d1d6b040--&gt; 
&lt;hr /&gt; 
&lt;!--## Table of Contents
- [Installation](#installation)
- [Usage](#usage)
- [Roadmap](#-roadmap)
- [Building from Source](#building-from-source)
- [Contributing](#-contributing)
- [Join our Discord Server](#join-our-discord-server)
- [Star History](#star-history)
- [Buy us a coffee!](#buy-us-a-coffee)
- [Acknowledgments](#-acknowledgments)--&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;System Requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS &lt;strong&gt;14 Sonoma&lt;/strong&gt; or later&lt;/li&gt; 
 &lt;li&gt;Apple Silicon or Intel Mac&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] We don&#39;t have an Apple Developer account yet. The application will show a popup on first launch that the app is from an unidentified developer.&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Click &lt;strong&gt;OK&lt;/strong&gt; to close the popup.&lt;/li&gt; 
  &lt;li&gt;Open &lt;strong&gt;System Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Privacy &amp;amp; Security&lt;/strong&gt;.&lt;/li&gt; 
  &lt;li&gt;Scroll down and click &lt;strong&gt;Open Anyway&lt;/strong&gt; next to the warning about the app.&lt;/li&gt; 
  &lt;li&gt;Confirm your choice if prompted.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;You only need to do this once.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Option 1: Download and Install Manually&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/TheBoredTeam/boring.notch/releases/latest/download/boringNotch.dmg&quot; target=&quot;_self&quot;&gt;&lt;img width=&quot;200&quot; src=&quot;https://github.com/user-attachments/assets/e3179be1-8416-4b8a-b417-743e1ecc67d6&quot; alt=&quot;Download for macOS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Option 2: Install via Homebrew&lt;/h3&gt; 
&lt;p&gt;You can also install the app using &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install --cask TheBoredTeam/boring-notch/boring-notch --no-quarantine
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Launch the app, and voilà—your notch is now the coolest part of your screen.&lt;/li&gt; 
 &lt;li&gt;Hover over the notch to see it expand and reveal all its secrets.&lt;/li&gt; 
 &lt;li&gt;Use the controls to manage your music like a rockstar.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📋 Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Playback live activity 🎧&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Calendar integration 📆&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Mirror 📷&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Charging indicator and current percentage 🔋&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Customizable gesture control 👆🏻&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Shelf functionality with AirDrop 📚&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Notch sizing customization, finetuning on different display sizes 🖥️&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Reminders integration ☑️&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Customizable Layout options 🛠️&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Extension system 🧩&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; System HUD replacements (volume, brightness, backlight) 🎚️💡⌨️&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Notifications (under consideration) 🔔&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- - [ ] Clipboard history manager 📌 `Extension` --&gt; 
&lt;!-- - [ ] Download indicator of different browsers (Safari, Chromium browsers, Firefox) 🌍 `Extension`--&gt; 
&lt;!-- - [ ] Customizable function buttons 🎛️ --&gt; 
&lt;!-- - [ ] App switcher 🪄 --&gt; 
&lt;!-- ## 🧩 Extensions
&gt; [!NOTE]
&gt; We’re hard at work on some awesome extensions! Stay tuned, and we’ll keep you updated as soon as they’re released. --&gt; 
&lt;h2&gt;Building from Source&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS 14 or later&lt;/strong&gt;: If you’re not on the latest macOS, we might need to send a search party.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xcode 16 or later&lt;/strong&gt;: This is where the magic happens, so make sure it’s up-to-date.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the Repository&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/TheBoredTeam/boring.notch.git
cd boring.notch
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open the Project in Xcode&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;open boringNotch.xcodeproj
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build and Run&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Click the &quot;Run&quot; button or press &lt;code&gt;Cmd + R&lt;/code&gt;. Watch the magic unfold!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;p&gt;We’re all about good vibes and awesome contributions! Here’s how you can join the fun:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Fork the Repo&lt;/strong&gt;: Click that shiny &quot;Fork&quot; button and make your own version.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Clone Your Fork&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/{your-name}/boring.notch.git
# Replace {your-name} with your GitHub username
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Make sure to use &lt;code&gt;dev&lt;/code&gt; branch as base.&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Create a New Branch&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout -b feature/{your-feature-name}
# Replace {your-feature-name} with a descriptive and concise name for your branch
# It is best practice to use only alphanumeric characters, write words in lowercase
# and seperate words with a single hyphen
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Make Your Changes&lt;/strong&gt;: Add that feature or fix that bug.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Commit Your Changes&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git commit -m &quot;insert descriptive message here&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Push to Your Fork&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git push origin feature/{your-feature-name}
# Remember to replace {your-feature-name} with the name you chose
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Create a Pull Request&lt;/strong&gt;: Head to the original repository and click on &quot;New Pull Request.&quot; Fill in the required details, &lt;strong&gt;make sure the base branch is set to &lt;code&gt;dev&lt;/code&gt;&lt;/strong&gt;, and submit your PR. Let’s see what you’ve got!&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Join our Discord Server&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/GvYcYpAKTu&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://iili.io/28m3GHv.png&quot; alt=&quot;Join The Boring Server!&quot; style=&quot;height: 60px !important;width: 217px !important;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;a href=&quot;https://www.star-history.com/#TheBoredTeam/boring.notch&amp;amp;Timeline&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=TheBoredTeam/boring.notch&amp;amp;type=Timeline&amp;amp;theme=dark&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=TheBoredTeam/boring.notch&amp;amp;type=Timeline&quot; /&gt; 
  &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=TheBoredTeam/boring.notch&amp;amp;type=Timeline&quot; /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;Buy us a coffee!&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/jfxh67wvfxq&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-red.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 60px !important;width: 217px !important;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🎉 Acknowledgments&lt;/h2&gt; 
&lt;p&gt;We would like to express our appreciation to the developers of &lt;a href=&quot;https://github.com/Lakr233/NotchDrop&quot;&gt;NotchDrop&lt;/a&gt;, an open-source project that has been instrumental in developing the &quot;Shelf&quot; feature in Boring Notch. Special thanks to Lakr233 for their contributions to NotchDrop and to &lt;a href=&quot;https://github.com/Hugo-Persson&quot;&gt;Hugo Persson&lt;/a&gt; for integrating it into our project.&lt;/p&gt; 
&lt;h3&gt;Icon credits: &lt;a href=&quot;https://github.com/maxtron95&quot;&gt;@maxtron95&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;Website credits: &lt;a href=&quot;https://github.com/himanshhhhuv&quot;&gt;@himanshhhhuv&lt;/a&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SwiftUI&lt;/strong&gt;: For making us look like coding wizards.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;You&lt;/strong&gt;: For being awesome and checking out &lt;strong&gt;boring.notch&lt;/strong&gt;!&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>github/CopilotForXcode</title>
      <link>https://github.com/github/CopilotForXcode</link>
      <description>&lt;p&gt;Xcode extension for GitHub Copilot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img align=&quot;center&quot; height=&quot;70&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/AppIcon.png&quot; /&gt; GitHub Copilot for Xcode&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; is an AI pair programmer tool that helps you write code faster and smarter. Copilot for Xcode is an Xcode extension that provides inline coding suggestions as you type and a chat assistant to answer your coding questions.&lt;/p&gt; 
&lt;h2&gt;Chat&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Chat provides suggestions to your specific coding tasks via chat. &lt;img alt=&quot;Chat of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/chat_dark.gif&quot; width=&quot;800&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Agent Mode&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Agent Mode provides AI-powered assistance that can understand and modify your codebase directly. With Agent Mode, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get intelligent code edits applied directly to your files&lt;/li&gt; 
 &lt;li&gt;Run terminal commands and view their output without leaving the interface&lt;/li&gt; 
 &lt;li&gt;Search through your codebase to find relevant files and code snippets&lt;/li&gt; 
 &lt;li&gt;Create new files and directories as needed for your project&lt;/li&gt; 
 &lt;li&gt;Get assistance with enhanced context awareness across multiple files and folders&lt;/li&gt; 
 &lt;li&gt;Run Model Context Protocol (MCP) tools you configured to extend the capabilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Agent Mode integrates with Xcode&#39;s environment, creating a seamless development experience where Copilot can help implement features, fix bugs, and refactor code with comprehensive understanding of your project.&lt;/p&gt; 
&lt;h2&gt;Code Completion&lt;/h2&gt; 
&lt;p&gt;You can receive auto-complete type suggestions from GitHub Copilot either by starting to write the code you want to use, or by writing a natural language comment describing what you want the code to do. &lt;img alt=&quot;Code Completion of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/demo.gif&quot; width=&quot;800&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 12+&lt;/li&gt; 
 &lt;li&gt;Xcode 8+&lt;/li&gt; 
 &lt;li&gt;A GitHub Copilot subscription. To learn more, visit &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;https://github.com/features/copilot&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install via &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask github-copilot-for-xcode
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or download the &lt;code&gt;dmg&lt;/code&gt; from &lt;a href=&quot;https://github.com/github/CopilotForXcode/releases/latest/download/GitHubCopilotForXcode.dmg&quot;&gt;the latest release&lt;/a&gt;. Drag &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; into the &lt;code&gt;Applications&lt;/code&gt; folder:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of opened dmg&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/dmg-open.png&quot; width=&quot;512&quot; /&gt; &lt;/p&gt; &lt;p&gt;Updates can be downloaded and installed by the app.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application (from the &lt;code&gt;Applications&lt;/code&gt; folder). Accept the security warning.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of MacOS download permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/macos-download-open-confirm.png&quot; width=&quot;350&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A background item will be added to enable the GitHub Copilot for Xcode extension app to connect to the host app. This permission is usually automatically added when first launching the app.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of background item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/background-item.png&quot; width=&quot;370&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Three permissions are required for GitHub Copilot for Xcode to function properly: &lt;code&gt;Background&lt;/code&gt;, &lt;code&gt;Accessibility&lt;/code&gt;, and &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt;. For more details on why these permissions are required see &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/TROUBLESHOOTING.md&quot;&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The first time the application is run the &lt;code&gt;Accessibility&lt;/code&gt; permission should be requested:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of accessibility permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/accessibility-permission-request.png&quot; width=&quot;529&quot; /&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt; permission needs to be enabled manually. Click &lt;code&gt;Extension Permission&lt;/code&gt; from the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application settings to open the System Preferences to the &lt;code&gt;Extensions&lt;/code&gt; panel. Select &lt;code&gt;Xcode Source Editor&lt;/code&gt; and enable &lt;code&gt;GitHub Copilot&lt;/code&gt;:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of extension permission&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/extension-permission.png&quot; width=&quot;582&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;After granting the extension permission, open Xcode. Verify that the &lt;code&gt;Github Copilot&lt;/code&gt; menu is available and enabled under the Xcode &lt;code&gt;Editor&lt;/code&gt; menu. &lt;br /&gt;&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/xcode-menu.png&quot; width=&quot;648&quot; /&gt; &lt;/p&gt; &lt;p&gt;Keyboard shortcuts can be set for all menu items in the &lt;code&gt;Key Bindings&lt;/code&gt; section of Xcode preferences.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To sign into GitHub Copilot, click the &lt;code&gt;Sign in&lt;/code&gt; button in the settings application. This will open a browser window and copy a code to the clipboard. Paste the code into the GitHub login page and authorize the application.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of sign-in popup&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/device-code.png&quot; width=&quot;372&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install updates, click &lt;code&gt;Check for Updates&lt;/code&gt; from the menu item or in the settings application.&lt;/p&gt; &lt;p&gt;After installing a new version, Xcode must be restarted to use the new version correctly.&lt;/p&gt; &lt;p&gt;New versions can also be installed from &lt;code&gt;dmg&lt;/code&gt; files downloaded from the releases page. When installing a new version via &lt;code&gt;dmg&lt;/code&gt;, the application must be run manually the first time to accept the downloaded from the internet warning.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To avoid confusion, we recommend disabling &lt;code&gt;Predictive code completion&lt;/code&gt; under &lt;code&gt;Xcode&lt;/code&gt; &amp;gt; &lt;code&gt;Preferences&lt;/code&gt; &amp;gt; &lt;code&gt;Text Editing&lt;/code&gt; &amp;gt; &lt;code&gt;Editing&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to use Chat&lt;/h2&gt; 
&lt;p&gt;Open Copilot Chat in GitHub Copilot.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via the Xcode menu &lt;code&gt;Xcode -&amp;gt; Editor -&amp;gt; GitHub Copilot -&amp;gt; Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/xcode-menu_dark.png&quot; width=&quot;648&quot; /&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via GitHub Copilot app menu &lt;code&gt;Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/copilot-menu_dark.png&quot; width=&quot;244&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;How to use Code Completion&lt;/h2&gt; 
&lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; for the full terms.&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;We follow responsible practices in accordance with our &lt;a href=&quot;https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement&quot;&gt;Privacy Statement&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To get the latest security fixes, please use the latest version of the GitHub Copilot for Xcode.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;We’d love to get your help in making GitHub Copilot better! If you have feedback or encounter any problems, please reach out on our &lt;a href=&quot;https://github.com/orgs/community/discussions/categories/copilot&quot;&gt;Feedback forum&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Thank you to @intitni for creating the original project that this is based on.&lt;/p&gt; 
&lt;p&gt;Attributions can be found under About when running the app or in &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Copilot%20for%20Xcode/Credits.rtf&quot;&gt;Credits.rtf&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>overtake/TelegramSwift</title>
      <link>https://github.com/overtake/TelegramSwift</link>
      <description>&lt;p&gt;Source code of Telegram for macos on Swift 5.0&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/overtake/TelegramSwift/master/Telegram-Mac/Assets.xcassets/AppIcon.appiconset/Logo_1024.png&quot; width=&quot;125&quot; height=&quot;125&quot; /&gt; 
 &lt;h2 align=&quot;center&quot;&gt;Telegram for macOS&lt;/h2&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/overtake/TelegramSwift/master/images/tg.png&quot; alt=&quot;Telegram macOS screenshot&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://telegram.org&quot;&gt;&lt;strong&gt;Telegram&lt;/strong&gt;&lt;/a&gt; is a messaging app with a focus on speed and security. It’s superfast, simple, and free! This repo contains the official source code for &lt;a href=&quot;https://macos.telegram.org/&quot;&gt;Telegram for macOS&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Get it&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/telegram/id747648890?mt=12&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/overtake/TelegramSwift/master/images/mas_badge.png&quot; alt=&quot;Download on the Mac App Store&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using Homebrew&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;brew cask install telegram
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using &lt;code&gt;mas-cli&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;mas install 747648890
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual download&lt;/h3&gt; 
&lt;p&gt;If you would like, you can &lt;a href=&quot;https://telegram.org/dl/macos&quot;&gt;download the non-MAS version&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also &lt;a href=&quot;https://telegram.org/dl/macos/beta&quot;&gt;download the beta version&lt;/a&gt; if you want to try the latest features and you are prepared for bugs and crashes. If you are running the beta, join the &lt;a href=&quot;https://t.me/macswift&quot;&gt;beta testing chat on Telegram&lt;/a&gt; to report bugs.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;h3&gt;Contributors on GitHub&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/overtake/TelegramSwift/graphs/contributors&quot;&gt;this repository’s contributors graph&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Bugs and Suggestions&lt;/h3&gt; 
&lt;p&gt;You can report bug or suggestions feature for Telegram for macOS on &lt;a href=&quot;https://bugs.telegram.org&quot;&gt;Telegram’s Bugs &amp;amp; Suggestions platform&lt;/a&gt;. Read &lt;a href=&quot;https://bugs.telegram.org/c/746&quot;&gt;the platform tip&lt;/a&gt; before creating first card.&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;You can help translate Telegram for macOS on &lt;a href=&quot;https://translations.telegram.org&quot;&gt;Telegram’s translations platform&lt;/a&gt;. Pick your language, then look for the macOS translation set.&lt;/p&gt; 
&lt;!--### Third-party libraries--&gt; 
&lt;!--See [LIBRARIES](LIBRARIES.md).--&gt; 
&lt;h2&gt;Permissions&lt;/h2&gt; 
&lt;p&gt;Telegram strives to protect your privacy. This app asks for as few permissions as possible:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Microphone&lt;/strong&gt;: You can send voice messages and make audio calls with Telegram.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Camera&lt;/strong&gt;: You can set your profile picture using your Mac’s iSight camera.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;: You can send your location to friends.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Outgoing network connections&lt;/strong&gt;: Telegram needs to connect to the internet to send your messages to your friends.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Incoming network connections&lt;/strong&gt;: Telegram needs to accept incoming connections for peer-to-peer voice calls.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User-selected files&lt;/strong&gt;: You can save files or images to your Mac.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Downloads folder&lt;/strong&gt;: Telegram can automatically download files or images you receive.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Shortcuts&lt;/h2&gt; 
&lt;p&gt;With &lt;a href=&quot;https://github.com/overtake/TelegramSwift/wiki&quot;&gt;Shortcuts&lt;/a&gt; you can learn how easy is navigate using your devices.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Telegram for macOS is licensed under the GNU Public License, version 2.0. See &lt;a href=&quot;https://raw.githubusercontent.com/overtake/TelegramSwift/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Forking&lt;/h2&gt; 
&lt;p&gt;You can fork this application and make something awesome! Make sure that your fork follows these five requirements:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt; &lt;a href=&quot;https://core.telegram.org/api/obtaining_api_id&quot;&gt;get your own API ID&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Don’t&lt;/strong&gt; call your fork &lt;strong&gt;Telegram&lt;/strong&gt; — or at least make sure your users understand that yours is unofficial.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Don’t&lt;/strong&gt; use our standard logo (white paper plane in a blue circle) for your fork.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt; read and follow our &lt;a href=&quot;https://core.telegram.org/mtproto/security_guidelines&quot;&gt;security guidelines&lt;/a&gt; to make sure you take good care of your users’ data and protect their privacy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt; publish your code. The &lt;a href=&quot;https://raw.githubusercontent.com/overtake/TelegramSwift/master/LICENSE&quot;&gt;GPL license&lt;/a&gt; requires it!&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to Build&lt;/h2&gt; 
&lt;p&gt;Instructions for building Telegram for macOS are in &lt;a href=&quot;https://raw.githubusercontent.com/overtake/TelegramSwift/master/INSTALL.md&quot;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>utmapp/UTM</title>
      <link>https://github.com/utmapp/UTM</link>
      <description>&lt;p&gt;Virtual machines for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UTM&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/utmapp/UTM/actions?query=event%3Arelease+workflow%3ABuild&quot;&gt;&lt;img src=&quot;https://github.com/utmapp/UTM/workflows/Build/badge.svg?branch=main&amp;amp;event=push&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is possible to invent a single machine which can be used to compute any computable sequence.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;-- &lt;cite&gt;Alan Turing, 1936&lt;/cite&gt;&lt;/p&gt; 
&lt;p&gt;UTM is a full featured system emulator and virtual machine host for iOS and macOS. It is based off of QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. More information at &lt;a href=&quot;https://getutm.app/&quot;&gt;https://getutm.app/&lt;/a&gt; and &lt;a href=&quot;https://mac.getutm.app/&quot;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;450px&quot; alt=&quot;UTM running on an iPhone&quot; src=&quot;https://raw.githubusercontent.com/utmapp/UTM/main/screen.png&quot; /&gt; &lt;br /&gt; &lt;img width=&quot;450px&quot; alt=&quot;UTM running on a MacBook&quot; src=&quot;https://raw.githubusercontent.com/utmapp/UTM/main/screenmac.png&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full system emulation (MMU, devices, etc) using QEMU&lt;/li&gt; 
 &lt;li&gt;30+ processors supported including x86_64, ARM64, and RISC-V&lt;/li&gt; 
 &lt;li&gt;VGA graphics mode using SPICE and QXL&lt;/li&gt; 
 &lt;li&gt;Text terminal mode&lt;/li&gt; 
 &lt;li&gt;USB devices&lt;/li&gt; 
 &lt;li&gt;JIT based acceleration using QEMU TCG&lt;/li&gt; 
 &lt;li&gt;Frontend designed from scratch for macOS 11 and iOS 11+ using the latest and greatest APIs&lt;/li&gt; 
 &lt;li&gt;Create, manage, run VMs directly from your device&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Additional macOS Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hardware accelerated virtualization using Hypervisor.framework and QEMU&lt;/li&gt; 
 &lt;li&gt;Boot macOS guests with Virtualization.framework on macOS 12+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;UTM SE&lt;/h2&gt; 
&lt;p&gt;UTM/QEMU requires dynamic code generation (JIT) for maximum performance. JIT on iOS devices require either a jailbroken device, or one of the various workarounds found for specific versions of iOS (see &quot;Install&quot; for more details).&lt;/p&gt; 
&lt;p&gt;UTM SE (&quot;slow edition&quot;) uses a &lt;a href=&quot;https://github.com/ktemkin/qemu/raw/with_tcti/tcg/aarch64-tcti/README.md&quot;&gt;threaded interpreter&lt;/a&gt; which performs better than a traditional interpreter but still slower than JIT. This technique is similar to what &lt;a href=&quot;https://github.com/ish-app/ish&quot;&gt;iSH&lt;/a&gt; does for dynamic execution. As a result, UTM SE does not require jailbreaking or any JIT workarounds and can be sideloaded as a regular app.&lt;/p&gt; 
&lt;p&gt;To optimize for size and build times, only the following architectures are included in UTM SE: ARM, PPC, RISC-V, and x86 (all with both 32-bit and 64-bit variants).&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;UTM (SE) for iOS: &lt;a href=&quot;https://getutm.app/install/&quot;&gt;https://getutm.app/install/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;UTM is also available for macOS: &lt;a href=&quot;https://mac.getutm.app/&quot;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/utmapp/UTM/main/Documentation/MacDevelopment.md&quot;&gt;macOS Development&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/utmapp/UTM/main/Documentation/iOSDevelopment.md&quot;&gt;iOS Development&lt;/a&gt;&lt;/h3&gt; 
&lt;h2&gt;Related&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ish-app/ish&quot;&gt;iSH&lt;/a&gt;: emulates a usermode Linux terminal interface for running x86 Linux applications on iOS&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/holzschu/a-shell&quot;&gt;a-shell&lt;/a&gt;: packages common Unix commands and utilities built natively for iOS and accessible through a terminal interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;UTM is distributed under the permissive Apache 2.0 license. However, it uses several (L)GPL components. Most are dynamically linked but the gstreamer plugins are statically linked and parts of the code are taken from qemu. Please be aware of this if you intend on redistributing this application.&lt;/p&gt; 
&lt;p&gt;Some icons made by &lt;a href=&quot;https://www.freepik.com&quot;&gt;Freepik&lt;/a&gt; from &lt;a href=&quot;https://www.flaticon.com/&quot;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, UTM frontend depends on the following MIT/BSD License components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hackiftekhar/IQKeyboardManager&quot;&gt;IQKeyboardManager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/migueldeicaza/SwiftTerm&quot;&gt;SwiftTerm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/weichsel/ZIPFoundation&quot;&gt;ZIP Foundation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/futuretap/InAppSettingsKit&quot;&gt;InAppSettingsKit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Continuous integration hosting is provided by &lt;a href=&quot;https://www.macstadium.com/opensource&quot;&gt;MacStadium&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.macstadium.com&quot;&gt;&lt;img src=&quot;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&quot; alt=&quot;MacStadium logo&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apple/container</title>
      <link>https://github.com/apple/container</link>
      <description>&lt;p&gt;A tool for creating and running Linux containers using lightweight virtual machines on a Mac. It is written in Swift, and optimized for Apple silicon.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;container&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;container&lt;/code&gt; is a tool that you can use to create and run Linux containers as lightweight virtual machines on your Mac. It&#39;s written in Swift, and optimized for Apple silicon.&lt;/p&gt; 
&lt;p&gt;The tool consumes and produces &lt;a href=&quot;https://github.com/opencontainers/image-spec&quot;&gt;OCI-compatible container images&lt;/a&gt;, so you can pull and run images from any standard container registry. You can push images that you build to those registries as well, and run the images in any other OCI-compatible application.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;container&lt;/code&gt; uses the &lt;a href=&quot;https://github.com/apple/containerization&quot;&gt;Containerization&lt;/a&gt; Swift package for low level container, image, and process management.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apple/container/main/docs/assets/landing-movie.gif&quot; alt=&quot;introductory movie showing some basic commands&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;You need a Mac with Apple silicon to run &lt;code&gt;container&lt;/code&gt;. To build it, see the &lt;a href=&quot;https://raw.githubusercontent.com/apple/container/main/BUILDING.md&quot;&gt;BUILDING&lt;/a&gt; document.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;container&lt;/code&gt; is supported on macOS 26, since it takes advantage of new features and enhancements to virtualization and networking in this release. We do not support older versions of macOS and the &lt;code&gt;container&lt;/code&gt; maintainers typically will not address issues that cannot be reproduced on the latest macOS 26 beta.&lt;/p&gt; 
&lt;h3&gt;Install or upgrade&lt;/h3&gt; 
&lt;p&gt;If you&#39;re upgrading, first stop and uninstall your existing &lt;code&gt;container&lt;/code&gt; (the &lt;code&gt;-k&lt;/code&gt; flag keeps your user data, while &lt;code&gt;-d&lt;/code&gt; removes it):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;container system stop
uninstall-container.sh -k
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Download the latest signed installer package for &lt;code&gt;container&lt;/code&gt; from the &lt;a href=&quot;https://github.com/apple/container/releases&quot;&gt;GitHub release page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To install the tool, double-click the package file and follow the instructions. Enter your administrator password when prompted, to give the installer permission to place the installed files under &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Start the system service with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;container system start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Uninstall&lt;/h3&gt; 
&lt;p&gt;Use the &lt;code&gt;uninstall-container.sh&lt;/code&gt; script to remove &lt;code&gt;container&lt;/code&gt; from your system. To remove your user data along with the tool, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;uninstall-container.sh -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To retain your user data so that it is available should you reinstall later, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;uninstall-container.sh -k
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Next steps&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Take &lt;a href=&quot;https://raw.githubusercontent.com/apple/container/main/docs/tutorial.md&quot;&gt;a guided tour of &lt;code&gt;container&lt;/code&gt;&lt;/a&gt; by building, running, and publishing a simple web server image.&lt;/li&gt; 
 &lt;li&gt;Learn how to &lt;a href=&quot;https://raw.githubusercontent.com/apple/container/main/docs/how-to.md&quot;&gt;use various &lt;code&gt;container&lt;/code&gt; features&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read a brief description and &lt;a href=&quot;https://raw.githubusercontent.com/apple/container/main/docs/technical-overview.md&quot;&gt;technical overview&lt;/a&gt; of &lt;code&gt;container&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Browse the &lt;a href=&quot;https://raw.githubusercontent.com/apple/container/main/docs/command-reference.md&quot;&gt;full command reference&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apple/container/main/BUILDING.md&quot;&gt;Build and run&lt;/a&gt; &lt;code&gt;container&lt;/code&gt; on your own development system.&lt;/li&gt; 
 &lt;li&gt;View the project &lt;a href=&quot;https://apple.github.io/container/documentation/&quot;&gt;API documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The links above are for the CURRENT BRANCH&#39;s documentation. To find documentation for official releases, find the target release on the &lt;a href=&quot;https://github.com/apple/container/releases&quot;&gt;Release Page&lt;/a&gt; and click the tag corresponding to your release version.&lt;/p&gt; 
 &lt;p&gt;Example: &lt;a href=&quot;https://github.com/apple/container/tree/0.4.1&quot;&gt;release 0.4.1 tag&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions to &lt;code&gt;container&lt;/code&gt; are welcomed and encouraged. Please see our &lt;a href=&quot;https://github.com/apple/containerization/raw/main/CONTRIBUTING.md&quot;&gt;main contributing guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Project Status&lt;/h2&gt; 
&lt;p&gt;The container project is currently under active development. Its stability, both for consuming the project as a Swift package and the &lt;code&gt;container&lt;/code&gt; tool, is only guaranteed within patch versions, such as between 0.1.1 and 0.1.2. Minor version number releases may include breaking changes until we achieve a 1.0.0 release.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>onevcat/Kingfisher</title>
      <link>https://github.com/onevcat/Kingfisher</link>
      <description>&lt;p&gt;A lightweight, pure-Swift library for downloading and caching images from the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png&quot; alt=&quot;Kingfisher&quot; title=&quot;Kingfisher&quot; width=&quot;557&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/onevcat/Kingfisher/actions?query=workflow%3Abuild&quot;&gt;&lt;img src=&quot;https://github.com/onevcat/kingfisher/workflows/build/badge.svg?branch=master&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/onevcat/Kingfisher/master/documentation/kingfisher&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-Doc-DE5C43.svg?style=flat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/Kingfisher&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/tag/onevcat/Kingfisher.svg?color=blue&amp;amp;include_prereleases=&amp;amp;sort=semver&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-black&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Kingfisher is a powerful, pure-Swift library for downloading and caching images from the web. It provides you a chance to use a pure-Swift way to work with remote images in your next app.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Asynchronous image downloading and caching.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Loading image from either &lt;code&gt;URLSession&lt;/code&gt;-based networking or local provided data.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Useful image processors and filters provided.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Multiple-layer hybrid cache for both memory and disk.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Fine control on cache behavior. Customizable expiration date and size limit.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Cancelable downloading and auto-reusing previous downloaded content to improve performance.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Independent components. Use the downloader, caching system, and image processors separately as you need.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Prefetching images and showing them from the cache to boost your app.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Extensions for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;NSImageView&lt;/code&gt;, &lt;code&gt;NSButton&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;NSTextAttachment&lt;/code&gt;, &lt;code&gt;WKInterfaceImage&lt;/code&gt;, &lt;code&gt;TVMonogramView&lt;/code&gt; and &lt;code&gt;CPListItem&lt;/code&gt; to directly set an image from a URL.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Built-in transition animation when setting images.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Customizable placeholder and indicator while loading images.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Extensible image processing and image format easily.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Low Data Mode support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; SwiftUI support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Swift 6 &amp;amp; Swift Concurrency (strict mode) prepared.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Load &amp;amp; cache for Live Photo.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Kingfisher 101&lt;/h3&gt; 
&lt;p&gt;The simplest use-case is setting an image to an image view with the &lt;code&gt;UIImageView&lt;/code&gt; extension:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Kingfisher

let url = URL(string: &quot;https://example.com/image.png&quot;)
imageView.kf.setImage(with: url)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Kingfisher will download the image from &lt;code&gt;url&lt;/code&gt;, send it to both memory cache and disk cache, and display it in &lt;code&gt;imageView&lt;/code&gt;. When you set it with the same URL later, the image will be retrieved from the cache and shown immediately.&lt;/p&gt; 
&lt;p&gt;It also works if you use SwiftUI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var body: some View {
    KFImage(URL(string: &quot;https://example.com/image.png&quot;)!)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;A More Advanced Example&lt;/h3&gt; 
&lt;p&gt;With the powerful options, you can do hard tasks with Kingfisher in a simple way. For example, the code below:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Downloads a high-resolution image.&lt;/li&gt; 
 &lt;li&gt;Downsamples it to match the image view size.&lt;/li&gt; 
 &lt;li&gt;Makes it round cornered with a given radius.&lt;/li&gt; 
 &lt;li&gt;Shows a system indicator and a placeholder image while downloading.&lt;/li&gt; 
 &lt;li&gt;When prepared, it animates the small thumbnail image with a &quot;fade in&quot; effect.&lt;/li&gt; 
 &lt;li&gt;The original large image is also cached to disk for later use, to get rid of downloading it again in a detail view.&lt;/li&gt; 
 &lt;li&gt;A console log is printed when the task finishes, either for success or failure.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let url = URL(string: &quot;https://example.com/high_resolution_image.png&quot;)
let processor = DownsamplingImageProcessor(size: imageView.bounds.size)
             |&amp;gt; RoundCornerImageProcessor(cornerRadius: 20)
imageView.kf.indicatorType = .activity
imageView.kf.setImage(
    with: url,
    placeholder: UIImage(named: &quot;placeholderImage&quot;),
    options: [
        .processor(processor),
        .scaleFactor(UIScreen.main.scale),
        .transition(.fade(1)),
        .cacheOriginalImage
    ])
{
    result in
    switch result {
    case .success(let value):
        print(&quot;Task done for: \(value.source.url?.absoluteString ?? &quot;&quot;)&quot;)
    case .failure(let error):
        print(&quot;Job failed: \(error.localizedDescription)&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is a common situation I can meet in my daily work. Think about how many lines you need to write without Kingfisher!&lt;/p&gt; 
&lt;h3&gt;Method Chaining&lt;/h3&gt; 
&lt;p&gt;If you are not a fan of the &lt;code&gt;kf&lt;/code&gt; extension, you can also prefer to use the &lt;code&gt;KF&lt;/code&gt; builder and chained the method invocations. The code below is doing the same thing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Use `kf` extension
imageView.kf.setImage(
    with: url,
    placeholder: placeholderImage,
    options: [
        .processor(processor),
        .loadDiskFileSynchronously,
        .cacheOriginalImage,
        .transition(.fade(0.25)),
        .lowDataMode(.network(lowResolutionURL))
    ],
    progressBlock: { receivedSize, totalSize in
        // Progress updated
    },
    completionHandler: { result in
        // Done
    }
)

// Use `KF` builder
KF.url(url)
  .placeholder(placeholderImage)
  .setProcessor(processor)
  .loadDiskFileSynchronously()
  .cacheMemoryOnly()
  .fade(duration: 0.25)
  .lowDataModeSource(.network(lowResolutionURL))
  .onProgress { receivedSize, totalSize in  }
  .onSuccess { result in  }
  .onFailure { error in }
  .set(to: imageView)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And even better, if later you want to switch to SwiftUI, just change the &lt;code&gt;KF&lt;/code&gt; above to &lt;code&gt;KFImage&lt;/code&gt;, and you&#39;ve done:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView: View {
    var body: some View {
        KFImage.url(url)
          .placeholder(placeholderImage)
          .setProcessor(processor)
          .loadDiskFileSynchronously()
          .cacheMemoryOnly()
          .fade(duration: 0.25)
          .lowDataModeSource(.network(lowResolutionURL))
          .onProgress { receivedSize, totalSize in  }
          .onSuccess { result in  }
          .onFailure { error in }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;h3&gt;Kingfisher 8.0&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(UIKit/AppKit) iOS 13.0+ / macOS 10.15+ / tvOS 13.0+ / watchOS 6.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;(SwiftUI) iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;Swift 5.9+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Kingfisher 7.0&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(UIKit/AppKit) iOS 12.0+ / macOS 10.14+ / tvOS 12.0+ / watchOS 5.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;(SwiftUI) iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;Swift 5.0+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Refer to one of the following tutorials to install and use the framework:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstarteduikit&quot;&gt;UIKit Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstartedswiftui&quot;&gt;SwiftUI Tutorial&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatively, you can follow either of the methods below.&lt;/p&gt; 
&lt;h4&gt;Swift Package Manager&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;https://github.com/onevcat/Kingfisher.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Select &quot;Up to Next Major&quot; with &quot;8.0.0&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;CocoaPods&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;
platform :ios, &#39;13.0&#39;
use_frameworks!

target &#39;MyApp&#39; do
  pod &#39;Kingfisher&#39;, &#39;~&amp;gt; 8.0&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Pre-built Framework&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the release page, download the latest version of Kingfisher from the assets section.&lt;/li&gt; 
 &lt;li&gt;Drag the &lt;code&gt;Kingfisher.xcframework&lt;/code&gt; into your project and add it to the target (usually the app target).&lt;/li&gt; 
 &lt;li&gt;Select your target, in the &quot;General&quot; Tab, find the &quot;Frameworks, Libraries, and Embedded Content&quot; section, set the &lt;code&gt;Embed Without Signing&lt;/code&gt; to Kingfisher.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Check the documentation and tutorials:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher&quot;&gt;Documentation Home&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/gettingstarted&quot;&gt;Getting Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstarteduikit&quot;&gt;UIKit Tutorial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstartedswiftui&quot;&gt;SwiftUI Tutorial&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks&quot;&gt;Common Tasks - General&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_cache&quot;&gt;Common Tasks - Cache&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_downloader&quot;&gt;Common Tasks - Downloader&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_processor&quot;&gt;Common tasks - Processor&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Migrating&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/migration-to-8&quot;&gt;Kingfisher 8.0 Migration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&quot;&gt;Kingfisher 7.0 Migration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using an even earlier version, see the guides below to know the steps for migrating.&lt;/p&gt; 
&lt;h2&gt;Other&lt;/h2&gt; 
&lt;h3&gt;Future of Kingfisher&lt;/h3&gt; 
&lt;p&gt;I want to keep Kingfisher lightweight. This framework focuses on providing a simple solution for downloading and caching images. This doesn’t mean the framework can’t be improved. Kingfisher is far from perfect, so necessary and useful updates will be made to make it better.&lt;/p&gt; 
&lt;h3&gt;Developments and Tests&lt;/h3&gt; 
&lt;p&gt;Any contributing and pull requests are warmly welcome. However, before you plan to implement some features or try to fix an uncertain issue, it is recommended to open a discussion first. It would be appreciated if your pull requests could build with all tests green. :)&lt;/p&gt; 
&lt;h3&gt;About the logo&lt;/h3&gt; 
&lt;p&gt;The logo of Kingfisher is inspired by &lt;a href=&quot;http://en.wikipedia.org/wiki/Tangram&quot;&gt;Tangram (七巧板)&lt;/a&gt;, a dissection puzzle consisting of seven flat shapes from China. I believe she&#39;s a kingfisher bird instead of a swift, but someone insists that she is a pigeon. I guess I should give her a name. Hi, guys, do you have any suggestions?&lt;/p&gt; 
&lt;h3&gt;Contact&lt;/h3&gt; 
&lt;p&gt;Follow and contact me on &lt;a href=&quot;http://twitter.com/onevcat&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;http://weibo.com/onevcat&quot;&gt;Sina Weibo&lt;/a&gt;. If you find an issue, &lt;a href=&quot;https://github.com/onevcat/Kingfisher/issues/new&quot;&gt;open a ticket&lt;/a&gt;. Pull requests are warmly welcome as well.&lt;/p&gt; 
&lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; 
&lt;p&gt;Open-source projects cannot live long without your help. If you find Kingfisher to be useful, please consider supporting this project by becoming a sponsor. Your user icon or company logo shows up &lt;a href=&quot;https://onevcat.com/tabs/about/&quot;&gt;on my blog&lt;/a&gt; with a link to your home page.&lt;/p&gt; 
&lt;p&gt;Become a sponsor through &lt;a href=&quot;https://github.com/sponsors/onevcat&quot;&gt;GitHub Sponsors&lt;/a&gt;. &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;Special thanks to:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://img.ly/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png&quot; alt=&quot;imgly&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.emergetools.com&quot;&gt;&lt;img src=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/1019875/254794187-d44f6f50-993f-42e3-b79c-960f69c4adc1.png&quot; alt=&quot;emergetools&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;Kingfisher is released under the MIT license. See LICENSE for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LoopKit/Loop</title>
      <link>https://github.com/LoopKit/Loop</link>
      <description>&lt;p&gt;An automated insulin delivery app for iOS, built on LoopKit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Loop for iOS&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Loop/DerivedAssetsBase.xcassets/AppIcon.appiconset/Icon-Small-40%402x.png?raw=true&quot; alt=&quot;App Icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/LoopKit/Loop&quot;&gt;&lt;img src=&quot;https://travis-ci.org/LoopKit/Loop.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://loop.zulipchat.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&quot; alt=&quot;Join the chat at https://loop.zulipchat.com&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Loop is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.&lt;/p&gt; 
&lt;p&gt;Loop is built on top of &lt;a href=&quot;https://github.com/LoopKit/LoopKit&quot;&gt;LoopKit&lt;/a&gt;. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.&lt;/p&gt; 
&lt;p&gt;Please understand that this project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is highly experimental&lt;/li&gt; 
 &lt;li&gt;Is not approved for therapy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Graphs.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Graphs.png?raw=true&quot; alt=&quot;Screenshot of status screen&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Bolus.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Bolus.png?raw=true&quot; alt=&quot;Screenshot of bolus screen&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Battery.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Battery.png?raw=true&quot; alt=&quot;Screenshot of battery change notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Loop%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Loop%20Failure.png?raw=true&quot; alt=&quot;Screenshot of loop failure notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Bolus%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Phone%20Notification%20Bolus%20Failure.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification&quot; width=&quot;170&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Complication.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Complication.png?raw=true&quot; alt=&quot;Screenshot of glucose complication on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Carb%20Entry.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Carb%20Entry.png?raw=true&quot; alt=&quot;Screenshot of carb entry on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Bolus.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Bolus.png?raw=true&quot; alt=&quot;Screenshot of bolus entry on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Menu.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Menu.png?raw=true&quot; alt=&quot;Screenshot of the app menu on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Reservoir.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Reservoir.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Bolus%20Failure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/Documentation/Screenshots/Watch%20Notification%20Bolus%20Failure.png?raw=true&quot; alt=&quot;Screenshot of bolus failure notification on Apple Watch&quot; width=&quot;141&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Please visit the &lt;a href=&quot;https://loopkit.github.io/loopdocs/&quot;&gt;Loop Docs&lt;/a&gt; for installation, algorithm, and other details.&lt;/p&gt; 
&lt;p&gt;For FAQs, how to contribute to open source aspects of Loop and other tips, refer to the &lt;a href=&quot;https://github.com/LoopKit/Loop/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;(Note: there is also a tab for the Wiki at the top of this page)&lt;/p&gt; 
&lt;h1&gt;License and Code of Conduct&lt;/h1&gt; 
&lt;p&gt;Please read the &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/LICENSE.md&quot;&gt;LICENSE&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/LoopKit/Loop/dev/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ml-explore/mlx-swift-examples</title>
      <link>https://github.com/ml-explore/mlx-swift-examples</link>
      <description>&lt;p&gt;Examples using MLX Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Developers can use these examples in their own programs -- just import the swift package!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/ml-explore/mlx-swift-examples/main/documentation/mlxlmcommon/porting&quot;&gt;Porting and implementing models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/ml-explore/mlx-swift-examples/main/documentation/mlxlmcommon&quot;&gt;MLXLLMCommon&lt;/a&gt; -- common API for LLM and VLM&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/ml-explore/mlx-swift-examples/main/documentation/mlxllm&quot;&gt;MLXLLM&lt;/a&gt; -- large language model example implementations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/ml-explore/mlx-swift-examples/main/documentation/mlxvlm&quot;&gt;MLXVLM&lt;/a&gt; -- vision language model example implementations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/ml-explore/mlx-swift-examples/main/documentation/mlxembedders&quot;&gt;MLXEmbedders&lt;/a&gt; -- popular Encoders / Embedding models example implementations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/ml-explore/mlx-swift-examples/main/documentation/stablediffusion&quot;&gt;StableDiffusion&lt;/a&gt; -- SDXL Turbo and Stable Diffusion model example implementations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/ml-explore/mlx-swift-examples/main/documentation/mlxmnist&quot;&gt;MLXMNIST&lt;/a&gt; -- MNIST implementation for all your digit recognition needs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;MLX Swift Examples&lt;/h1&gt; 
&lt;p&gt;Example &lt;a href=&quot;https://github.com/ml-explore/mlx-swift&quot;&gt;MLX Swift&lt;/a&gt; programs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Applications/MNISTTrainer/README.md&quot;&gt;MNISTTrainer&lt;/a&gt;: An example that runs on both iOS and macOS that downloads MNIST training data and trains a &lt;a href=&quot;https://en.wikipedia.org/wiki/LeNet&quot;&gt;LeNet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Applications/LLMEval/README.md&quot;&gt;LLMEval&lt;/a&gt;: An example that runs on both iOS and macOS that downloads an LLM and tokenizer from Hugging Face and generates text from a given prompt.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Applications/VLMEval/README.md&quot;&gt;VLMEval&lt;/a&gt;: An example that runs on iOS, macOS and visionOS to download a VLM and tokenizer from Hugging Face and analyzes the given image and describe it in text.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Applications/MLXChatExample/README.md&quot;&gt;MLXChatExample&lt;/a&gt;: An example chat app that runs on both iOS and macOS that supports LLMs and VLMs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Tools/LinearModelTraining/README.md&quot;&gt;LinearModelTraining&lt;/a&gt;: An example that trains a simple linear model.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Applications/StableDiffusionExample/README.md&quot;&gt;StableDiffusionExample&lt;/a&gt;: An example that runs on both iOS and macOS that downloads a stable diffusion model from Hugging Face and and generates an image from a given prompt.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Tools/llm-tool/README.md&quot;&gt;llm-tool&lt;/a&gt;: A command line tool for generating text using a variety of LLMs available on the Hugging Face hub.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Tools/ExampleLLM/README.md&quot;&gt;ExampleLLM&lt;/a&gt;: A command line tool using the simplified API to interact with LLMs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Tools/image-tool/README.md&quot;&gt;image-tool&lt;/a&gt;: A command line tool for generating images using a stable diffusion model from Hugging Face.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Tools/mnist-tool/README.md&quot;&gt;mnist-tool&lt;/a&gt;: A command line tool for training a a LeNet on MNIST.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Interacting with LLMs&lt;/h2&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://raw.githubusercontent.com/ml-explore/mlx-swift-examples/main/Libraries/MLXLMCommon&quot;&gt;MLXLMCommon&lt;/a&gt;. You can easily use a wide variety of open weight LLM and VLMs in your code. You can use this simplified API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let model = try await loadModel(id: &quot;mlx-community/Qwen3-4B-4bit&quot;)
let session = ChatSession(model)
print(try await session.respond(to: &quot;What are two things to see in San Francisco?&quot;)
print(try await session.respond(to: &quot;How about a great place to eat?&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or use the underlying API to control every aspect of the evaluation.&lt;/p&gt; 
&lt;h2&gt;Running&lt;/h2&gt; 
&lt;p&gt;The application and command line tool examples can be run from Xcode or from the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./mlx-run llm-tool --prompt &quot;swift programming language&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: &lt;code&gt;mlx-run&lt;/code&gt; is a shell script that uses &lt;code&gt;xcode&lt;/code&gt; command line tools to locate the built binaries. It is equivalent to running from Xcode itself.&lt;/p&gt; 
&lt;p&gt;See also:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx/troubleshooting&quot;&gt;MLX troubleshooting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation of libraries&lt;/h2&gt; 
&lt;p&gt;The MLXLLM, MLXVLM, MLXLMCommon, MLXMNIST, MLXEmbedders, and StableDiffusion libraries in the example repo are available as Swift Packages.&lt;/p&gt; 
&lt;p&gt;Add the following dependency to your Package.swift&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/ml-explore/mlx-swift-examples/&quot;, branch: &quot;main&quot;),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then add one or more libraries to the target as a dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.target(
    name: &quot;YourTargetName&quot;,
    dependencies: [
        .product(name: &quot;MLXLLM&quot;, package: &quot;mlx-swift-examples&quot;)
    ]),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, add &lt;code&gt;https://github.com/ml-explore/mlx-swift-examples/&lt;/code&gt; to the &lt;code&gt;Project Dependencies&lt;/code&gt; and set the &lt;code&gt;Dependency Rule&lt;/code&gt; to &lt;code&gt;Branch&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; in Xcode.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Finb/Bark</title>
      <link>https://github.com/Finb/Bark</link>
      <description>&lt;p&gt;Bark is an iOS App which allows you to push custom notifications to your iPhone&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Finb/Bark/master/README.zh.md&quot;&gt;中文&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Bark&lt;/h2&gt; 
&lt;p&gt;Bark is a push notification tool app. It&#39;s free, simple, and secure, leveraging APNs without draining device battery.&lt;br /&gt; Bark supports many advanced features of iOS notifications, including notification grouping, custom push icons, sounds, time-sensitive notifications, critical alerts, and more.&lt;br /&gt; Additionally, Bark supports self-hosted servers and offers encrypted push notifications to ensure privacy and security. &lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;a target=&quot;_blank&quot; href=&quot;https://apps.apple.com/app/bark-custom-notifications/id1403753865&quot;&gt; &lt;img src=&quot;http://ww2.sinaimg.cn/large/0060lm7Tgw1f1hgrs1ebwj308102q0sp.jpg&quot; width=&quot;144&quot; height=&quot;49&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://bark.day.app/#/en-us/&quot;&gt;https://bark.day.app/#/en-us/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://t.me/joinchat/OsCbLzovUAE0YjY1&quot;&gt;Telegram&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the app and copy the test URL&lt;/li&gt; 
&lt;/ol&gt; 
&lt;img src=&quot;https://wx4.sinaimg.cn/mw2000/003rYfqply1grd1meqrvcj60bi08zt9i02.jpg&quot; width=&quot;365&quot; /&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Modify the content and request this URL&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;You can send GET or POST requests, and you&#39;ll receive a push notification immediately upon success.

URL structure: The first part is the key, followed by three matches
/:key/:body 
/:key/:title/:body 
/:key/:title/:subtitle/:body 

title: The push title, slightly larger than the body text 
subtitle: The push subtitle
body: The push content, use the newline character &#39;\n&#39; for line breaks 
For POST requests, the parameter names are the same as above
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Parameters&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;url&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// Click on the push notification to jump to the specified URL
https://api.day.app/yourkey/url?url=https://www.google.com 
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;group&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// Specify the push message group to view pushes by group.
https://api.day.app/yourkey/group?group=groupName
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;icon (supported on iOS 15 and above)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// Specify the push message icon
https://api.day.app/yourkey/icon?icon=http://day.app/assets/images/avatar.jpg
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;sound&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// Specify the push message sound
https://api.day.app/yourkey/sound?sound=alarm
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;call&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// Play sound repeatedly for 30 seconds
https://api.day.app/yourkey/call?call=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;ciphertext&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// Encrypted push message
https://api.day.app/yourkey/ciphertext?ciphertext=
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Time-sensitive notifications&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// Set time-sensitive notifications
https://api.day.app/yourkey/时效性通知?level=timeSensitive

// Optional values 
// active: Default value when not set, the system will immediately display the notification by lighting up the screen. 
// timeSensitive: Time-sensitive notification, can be displayed during focus mode. 
// passive: Adds notification to the notification list without lighting up the screen.
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Critical alerts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// Set critical alerts
https://api.day.app/yourkey/criticalAlert?level=critical

Critical alerts will ignore silent and do not disturb modes, always playing the notification sound and displaying on the screen.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Others&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ij369/bark-sender&quot;&gt;Browser Extension&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api.ihint.me/bark.html&quot;&gt;Online Scheduled Sending&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/HsuDan/BarkHelper&quot;&gt;Windows Push Client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JasonkayZK/bark-cli&quot;&gt;Cross-platform Command Line Application&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/harryzcy/action-bark&quot;&gt;Bark GitHub Actions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://getquicker.net/Sharedaction?code=e927d844-d212-4428-758d-08d69de12a3b&quot;&gt;Quicker Actions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Zeroto521/Wox.Plugin.Bark&quot;&gt;Bark for Wox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/afeiship/bark-jssdk&quot;&gt;bark-jssdk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyhancloud/bark.js&quot;&gt;bark.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitee.com/hotlcc/java-bark-server&quot;&gt;java-bark-server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MoshiCoCo/bark-java-sdk&quot;&gt;bark-java-sdk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/funny-cat-happy/barknotificator&quot;&gt;Python for Bark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://u.tools/plugins/detail/PushOne/&quot;&gt;uTools for Bark&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jordanbaird/Ice</title>
      <link>https://github.com/jordanbaird/Ice</link>
      <description>&lt;p&gt;Powerful menu bar manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/jordanbaird/Ice/main/Ice/Assets.xcassets/AppIcon.appiconset/icon_256x256.png&quot; width=&quot;200&quot; height=&quot;200&quot; /&gt; 
 &lt;h1&gt;Ice&lt;/h1&gt; 
&lt;/div&gt; 
&lt;p&gt;Ice is a powerful menu bar management tool. While its primary function is hiding and showing menu bar items, it aims to cover a wide variety of additional features to make it one of the most versatile menu bar tools available.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/4423085c-4e4b-4f3d-ad0f-90a217c03470&quot; alt=&quot;Banner&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/jordanbaird/Ice/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/download-latest-brightgreen?style=flat-square&quot; alt=&quot;Download&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/platform-macOS-blue?style=flat-square&quot; alt=&quot;Platform&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/requirements-macOS%2014%2B-fa4e49?style=flat-square&quot; alt=&quot;Requirements&quot; /&gt; &lt;a href=&quot;https://github.com/sponsors/jordanbaird&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Sponsor%20%E2%9D%A4%EF%B8%8F-8A2BE2?style=flat-square&quot; alt=&quot;Sponsor&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://icemenubar.app&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Website-015FBA?style=flat-square&quot; alt=&quot;Website&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/jordanbaird/Ice/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/jordanbaird/Ice?style=flat-square&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Ice is currently in active development. Some features have not yet been implemented. Download the latest release &lt;a href=&quot;https://github.com/jordanbaird/Ice/releases/latest&quot;&gt;here&lt;/a&gt; and see the roadmap below for upcoming features.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;a href=&quot;https://www.buymeacoffee.com/jordanbaird&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 60px !important;width: 217px !important;&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;h3&gt;Manual Installation&lt;/h3&gt; 
&lt;p&gt;Download the &quot;Ice.zip&quot; file from the &lt;a href=&quot;https://github.com/jordanbaird/Ice/releases/latest&quot;&gt;latest release&lt;/a&gt; and move the unzipped app into your &lt;code&gt;Applications&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;Install Ice using the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask jordanbaird-ice
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features/Roadmap&lt;/h2&gt; 
&lt;h3&gt;Menu bar item management&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Hide menu bar items&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &quot;Always-hidden&quot; menu bar section&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Show hidden menu bar items when hovering over the menu bar&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Show hidden menu bar items when an empty area in the menu bar is clicked&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Show hidden menu bar items by scrolling or swiping in the menu bar&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Automatically rehide menu bar items&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Hide application menus when they overlap with shown menu bar items&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Drag and drop interface to arrange individual menu bar items&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Display hidden menu bar items in a separate bar (e.g. for MacBooks with the notch)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Search menu bar items&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Menu bar item spacing (BETA)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Profiles for menu bar layout&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Individual spacer items&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Menu bar item groups&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Show menu bar items when trigger conditions are met&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Menu bar appearance&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Menu bar tint (solid and gradient)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Menu bar shadow&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Menu bar border&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Custom menu bar shapes (rounded and/or split)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Remove background behind menu bar&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Rounded screen corners&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Different settings for light/dark mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Hotkeys&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Toggle individual menu bar sections&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Show the search panel&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Enable/disable the Ice Bar&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Show/hide section divider icons&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Toggle application menus&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Enable/disable auto rehide&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Temporarily show individual menu bar items&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Launch at login&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Automatic updates&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Menu bar widgets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why does Ice only support macOS 14 and later?&lt;/h2&gt; 
&lt;p&gt;Ice uses a number of system APIs that are available starting in macOS 14. As such, there are no plans to support earlier versions of macOS.&lt;/p&gt; 
&lt;h2&gt;Gallery&lt;/h2&gt; 
&lt;h4&gt;Show hidden menu bar items below the menu bar&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/f1429589-6186-4e1b-8aef-592219d49b9b&quot; alt=&quot;Ice Bar&quot; /&gt;&lt;/p&gt; 
&lt;h4&gt;Drag-and-drop interface to arrange menu bar items&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/095442ba-f2d0-4bb4-9632-91e26ef8d45b&quot; alt=&quot;Menu Bar Layout&quot; /&gt;&lt;/p&gt; 
&lt;h4&gt;Customize the menu bar&#39;s appearance&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/8c22c185-c3d2-49bb-971e-e1fc17df04b3&quot; alt=&quot;Menu Bar Appearance&quot; /&gt;&lt;/p&gt; 
&lt;h4&gt;Menu bar item search&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d1a7df3a-4989-4077-a0b1-8e7d5a1ba5b8&quot; alt=&quot;Menu Bar Item Search&quot; /&gt;&lt;/p&gt; 
&lt;h4&gt;Custom menu bar item spacing&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/b196aa7e-184a-4d4c-b040-502f4aae40a6&quot; alt=&quot;Menu Bar Item Spacing&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Ice is available under the &lt;a href=&quot;https://raw.githubusercontent.com/jordanbaird/Ice/main/LICENSE&quot;&gt;GPL-3.0 license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>buresdv/Cork</title>
      <link>https://github.com/buresdv/Cork</link>
      <description>&lt;p&gt;A fast GUI for Homebrew written in SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cork&lt;/h1&gt; 
&lt;p&gt;A fast GUI for Homebrew written in SwiftUI&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/buresdv.eu&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Bluesky-0285FF?logo=bluesky&amp;amp;logoColor=fff&amp;amp;label=Follow%20me%20on&amp;amp;color=0285FF&quot; alt=&quot;Follow me on Bluesky&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/kUHg8uGHpG&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1083475351260377119?label=Talk%20to%20me%20on%20Discord&amp;amp;style=flat&quot; alt=&quot;Discord Link&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://mstdn.social/@davidbures&quot;&gt;&lt;img src=&quot;https://img.shields.io/mastodon/follow/108939255808776594?domain=https%3A%2F%2Fmstdn.social&amp;amp;label=Follow%20me%20for%20updates&amp;amp;style=flat&quot; alt=&quot;Mastodon Link&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;I&#39;d like to personally thank &lt;a href=&quot;https://github.com/dimitribouniol&quot;&gt;Dmitri Bouniol&lt;/a&gt; and &lt;a href=&quot;https://twos.dev&quot;&gt;Ben Carlsson&lt;/a&gt; for coming up with a way for self-compiled builds to bypass the license check.&lt;/p&gt; 
&lt;p&gt;Without them, it would be impossible to have a free self-compiled version of the app.&lt;/p&gt; 
&lt;h2&gt;Advantages of Cork&lt;/h2&gt; 
&lt;p&gt;Cork is not just an interface for Homebrew. It has many features that are either very hard to accomplish using Homebrew alone, or straight-up not possible.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Things that are not possible without Cork&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Automatically respecting system proxy.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Clearing of cached downloads.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Updating packages from the Menu Bar without having Cork open.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Seeing this much info about a package in one convenient location.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Tagging packages. This is a Cork-only feature that lets you mark any number of packages you&#39;d like to keep track of.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Things that Cork makes easier&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Listing of installed packages. Cork has its own way of loading packages, which is around 10 times faster than the Homebrew implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Knowing which packages you installed intentionally, and which packages were installed only as dependencies. While somewhat possible with the &lt;code&gt;brew leaves&lt;/code&gt; command, it is often unreliable, often not listing packages that should be included.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Updating of only selected packages. Again, while possible with Homebrew alone, Cork makes it so easy you wouldn&#39;t believe it is not this simple in Homebrew itself.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Showing you exactly which packages a package is a dependency of. Super annoying in Homebrew, effortless with Cork.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Effortlessly managing Homebrew services with a simple click of a button in a beautiful sub-window.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; And many other features! Just try Cork out and try finding them all 😉&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Cork&lt;/h2&gt; 
&lt;p&gt;Pre-compiled, always up-to-date versions are available from my Homebrew tap. You can get access to it in a few ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Buy Cork for 25€ through the &lt;a href=&quot;https://corkmac.app&quot;&gt;website&lt;/a&gt;. You will get access to all future versions at no additional cost.&lt;/li&gt; 
 &lt;li&gt;Become a contributor. For example, you can: 
  &lt;ul&gt; 
   &lt;li&gt;Translate Cork into your language, and keep your translation updated. I&#39;d recommend joining the &lt;a href=&quot;https://discord.gg/kUHg8uGHpG&quot;&gt;Cork Discord&lt;/a&gt;, as I always ping the translators there when new text is ready for translating. If you aren&#39;t sure how to go about translating Cork, I&#39;d recommend asking the translation team on Discord. They have the &lt;code&gt;Linguist&lt;/code&gt; role. If you&#39;d prefer to learn on your own, this Apple documentation article is a nice introduction to the process: &lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding-support-for-languages-and-regions&quot;&gt;Internalization&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Implement a feature tagged with &lt;code&gt;Help Wanted&lt;/code&gt; in the &lt;a href=&quot;https://github.com/buresdv/Cork/issues?q=is%3Aissue+is%3Aopen+label%3A%22Help+Wanted%22&quot;&gt;Issue Tracker&lt;/a&gt;. Please respect the coding style. The main deviation from the Swift convention is that &lt;a href=&quot;https://github.com/buresdv/Cork/raw/83e6ac9977d780328d7bfeddaf4df66dc3260521/Cork/Logic/JSON/Parse%20JSON.swift#L16&quot;&gt;brackets are on their own lines&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;However, if you don&#39;t want to do any of the above, you can always compile Cork yourself. See below for instructions.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;h3&gt;Main Window&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DNCsucp.png&quot; alt=&quot;Start Page&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Package Info&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Package Info&quot; src=&quot;https://i.imgur.com/U8nCdlc.png&quot; width=&quot;28%&quot; /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img alt=&quot;Package Info - Full-size Caveats&quot; src=&quot;https://i.imgur.com/lm2AhnX.png&quot; width=&quot;28%&quot; /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img alt=&quot;Package Info - Minimized Caveats&quot; src=&quot;https://i.imgur.com/KFonAHx.png&quot; width=&quot;28%&quot; /&gt; &lt;/p&gt; 
&lt;h3&gt;Tap Info&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Tap Info - Formulae Only&quot; src=&quot;https://i.imgur.com/VZi6jKK.png&quot; width=&quot;47%&quot; /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img alt=&quot;Tap Info - Formulae and Casks&quot; src=&quot;https://i.imgur.com/ZCDlel6.png&quot; width=&quot;47%&quot; /&gt; &lt;/p&gt; 
&lt;h3&gt;Install Package&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Install Package&quot; src=&quot;https://i.imgur.com/c5BNkl3.png&quot; width=&quot;28%&quot; /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img alt=&quot;Install Package - Fetching Dependencies&quot; src=&quot;https://i.imgur.com/x8qWBMO.png&quot; width=&quot;28%&quot; /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img alt=&quot;Install Package - Installing Dependencies&quot; src=&quot;https://i.imgur.com/dIgYKoj.png&quot; width=&quot;28%&quot; /&gt; &lt;/p&gt; 
&lt;h3&gt;Add Taps&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RKMUgM8.png&quot; alt=&quot;Tap Taps&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Brew Maintenance&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Brew Maintenance&quot; src=&quot;https://i.imgur.com/Ky9kjPo.png&quot; width=&quot;47%&quot; /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img alt=&quot;Brew Maintenance Results&quot; src=&quot;https://i.imgur.com/sxjbRg2.png&quot; width=&quot;47%&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Media&lt;/h2&gt; 
&lt;p&gt;Do you run a blog, a magazine, make videos, or just make content about apps for fun? Get in touch at &lt;a href=&quot;mailto:dev@corkmac.app&quot;&gt;dev@corkmac.app&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;I will provide you with the newest release and development version, answer any questions you have, and introduce you to Cork personally (and for free, or course), so you can focus on creating.&lt;/p&gt; 
&lt;h2&gt;Compiling Cork&lt;/h2&gt; 
&lt;p&gt;Compiling Cork is simple, as it does not have many dependencies. It uses Tuist to generate Xcode projects to speed up compilation.&lt;/p&gt; 
&lt;p&gt;Prerequisites:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS Ventura or newer&lt;/li&gt; 
 &lt;li&gt;Xcode 16 or newer&lt;/li&gt; 
 &lt;li&gt;Git&lt;/li&gt; 
 &lt;li&gt;Homebrew&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Instructions:&lt;/h3&gt; 
&lt;h4&gt;Before you begin&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Skip if you already have an Apple Developer account&lt;/em&gt;&lt;/p&gt; 
&lt;ol start=&quot;0&quot;&gt; 
 &lt;li&gt;Enroll your account in the developer program at &lt;a href=&quot;https://developer.apple.com/&quot;&gt;https://developer.apple.com/&lt;/a&gt;. You don&#39;t need a paid account, a free one works fine&lt;/li&gt; 
 &lt;li&gt;Install Xcode&lt;/li&gt; 
 &lt;li&gt;Add your Developer account to Xcode. To do so, in the Menu bar, click &lt;code&gt;Xcode → Settings&lt;/code&gt;, and in the window that opens, click &lt;code&gt;Accounts&lt;/code&gt;. You can add your account there&lt;/li&gt; 
 &lt;li&gt;After you add your account, it will appear in the list of Apple IDs on the left of the screen. Select your account there&lt;/li&gt; 
 &lt;li&gt;At the bottom of the screen, click &lt;code&gt;Manage Certificates...&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;On the bottom left, click the &lt;strong&gt;+&lt;/strong&gt; icon and select &lt;code&gt;Apple Development&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;When a new item appears in the list called &lt;code&gt;Apple Development Certificates&lt;/code&gt;, you can press &lt;code&gt;Done&lt;/code&gt; to close the account manager&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Installing Tuist and Its Prerequisites&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Skip if you already have Tuist and Mise installed&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Installing Mise&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Cork uses Mise to prevent conflicts arising from mismatched Tuist versions across Macs. Mise is a tool similar to Homebrew, but offers some advantages for Tuist specifically, like the aforementioned version synchronization.&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Mise using &lt;code&gt;curl https://mise.run | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Initialize Mise using the command you see after the installation finishes. It&#39;s located under &lt;code&gt;mise: run the following to activate mise in your shell:&lt;/code&gt;.&lt;br /&gt; In my case, it was &lt;code&gt;echo &quot;eval \&quot;\$(/Users/david/.local/bin/mise activate zsh)\&quot;&quot; &amp;gt;&amp;gt; &quot;/Users/david/.zshrc&quot;&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] Make sure to copy the command Mise itself gives you, and not the one I used above. This command is only valid for my Mac, and will not work on your machine.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Add &lt;code&gt;mise&lt;/code&gt; to your path using one of the following commands, depending on your shell.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;zsh&lt;/strong&gt;: &lt;code&gt;echo &#39;eval &quot;$(~/.local/bin/mise activate zsh)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;bash&lt;/strong&gt;: &lt;code&gt;echo &#39;eval &quot;$(~/.local/bin/mise activate bash)&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;fish&lt;/strong&gt;: &lt;code&gt;echo &#39;~/.local/bin/mise activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;strong&gt;zsh&lt;/strong&gt; is the default macOS shell.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you don&#39;t know which shell you&#39;re running, use the command &lt;code&gt;echo $SHELL&lt;/code&gt;. The last part of the output after the last slash is the name of your shell In my case, the output of the command is &lt;code&gt;/bin/zsh&lt;/code&gt;. This means my shell is &lt;code&gt;zsh&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installing Tuist&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Tuist using &lt;code&gt;mise install tuist&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Compiling Cork&lt;/h4&gt; 
&lt;ol start=&quot;0&quot;&gt; 
 &lt;li&gt;I recommend you pick a version marked by one of the version tags. Those are released versions. If you decide to compile the current state of any of the branches, you might encounter experience-breaking bugs and unfinished features&lt;/li&gt; 
 &lt;li&gt;Use the command &lt;code&gt;git clone https://github.com/buresdv/Cork.git &amp;amp;&amp;amp; cd Cork &amp;amp;&amp;amp; mise exec tuist@4.50.2 -- tuist install &amp;amp;&amp;amp; mise exec tuist@4.50.2 -- tuist generate --no-binary-cache&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mise will ask you to trust the local &lt;a href=&quot;https://raw.githubusercontent.com/buresdv/Cork/main/.mise.toml&quot;&gt;&lt;code&gt;.mise.toml&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;You can either: 
  &lt;ul&gt; 
   &lt;li&gt;Say yes, to always use &lt;code&gt;tuist&lt;/code&gt; version 4.50.2 in this directory.&lt;/li&gt; 
   &lt;li&gt;Say no, and the command will use &lt;code&gt;tuist&lt;/code&gt; 4.50.2 anyway, but future invocations of &lt;code&gt;tuist&lt;/code&gt; will not be version controlled.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Xcode will open the project.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div style=&quot;margin-left: 1rem&quot;&gt; 
 &lt;details&gt; 
  &lt;summary&gt;What does this command do?&lt;/summary&gt; 
  &lt;br /&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;git clone https://github.com/buresdv/Cork.git&lt;/code&gt; downloads the source code&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cd Cork&lt;/code&gt; opens the folder you downloaded Cork into&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mise exec [...]&lt;/code&gt; runs a command using version &lt;i&gt;4.50.2&lt;/i&gt; of Tuist, without polluting your local `mise.toml`, to build Cork&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;tuist install&lt;/code&gt; downloads all Cork pre-requisites&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;tuist generate&lt;/code&gt; creates the Xcode project and opens it&lt;/li&gt; 
  &lt;/ol&gt; 
 &lt;/details&gt; 
&lt;/div&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Wait until all the dependencies are resolved. It should take a couple minutes at most&lt;/li&gt; 
 &lt;li&gt;In the file browser on the left, click &lt;code&gt;Cork&lt;/code&gt; at the very top. It&#39;s the icon with the App Store logo&lt;/li&gt; 
 &lt;li&gt;In the pane that opens on the right, click &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; at the top&lt;/li&gt; 
 &lt;li&gt;Under &lt;code&gt;Signing&lt;/code&gt;, switch the &lt;code&gt;Team&lt;/code&gt; dropdown to &lt;code&gt;None&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Under &lt;code&gt;Signing → macOS&lt;/code&gt;, switch the &lt;code&gt;Signing Certificate&lt;/code&gt; to &lt;code&gt;Sign to Run Locally&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;If it isn&#39;t already selected, change the Build Scheme to &lt;code&gt;Self-Compiled&lt;/code&gt; in Xcode&#39;s &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/toolbars#macOS&quot;&gt;toolbar&lt;/a&gt;. &lt;img src=&quot;https://files.catbox.moe/ofufd1.jpg&quot; alt=&quot;Build Scheme Selector&quot; /&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] If you don&#39;t select the correct Build Scheme, Cork will require you to put in a license.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;8&quot;&gt; 
 &lt;li&gt;In the Menu Bar, click &lt;code&gt;Product → Archive&lt;/code&gt; and wait for the building to finish&lt;/li&gt; 
 &lt;li&gt;A new window will open. From the list of Cork rows, select the topmost one, and click &lt;code&gt;Distribute App&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;In the popup that appears, click &lt;code&gt;Custom&lt;/code&gt;, then click &lt;code&gt;Next&lt;/code&gt; in the bottom right of the popup&lt;/li&gt; 
 &lt;li&gt;Click &lt;code&gt;Copy App&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Open the resulting folder. You&#39;ll see an app called Cork. Drag Cork to your &lt;code&gt;/Applications/&lt;/code&gt; folder, and you&#39;re done!&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Cork is licensed under &lt;a href=&quot;https://commonsclause.com&quot;&gt;Commons Clause&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This means that Cork&#39;s source source is available and you can modify it, contribute to it etc., but you can&#39;t sell or distribute Cork or modified versions of it.&lt;/p&gt; 
&lt;p&gt;Moreover, you can’t distribute compiled versions of Cork without consulting me first. Compiling versions for your personal use is fine.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mhaeuser/Battery-Toolkit</title>
      <link>https://github.com/mhaeuser/Battery-Toolkit</link>
      <description>&lt;p&gt;Control the platform power state of your Apple Silicon Mac.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Battery Toolkit logo&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/LogoCaption.png&quot; width=&quot;500&quot; align=&quot;center&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Control the platform power state of your Apple Silicon Mac.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#features&quot;&gt;Features&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#uninstall&quot;&gt; Uninstall &lt;/a&gt; •&lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#limitations&quot;&gt; Limitations &lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#technical-details&quot;&gt; Technical Details &lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/#donate&quot;&gt; Donate &lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;h2&gt;Limits battery charge to an upper limit&lt;/h2&gt; 
&lt;p&gt;Modern batteries deteriorate more when always kept at full charge. For this reason, Apple introduced the “Optimized Charging“ feature for all their portable devices, including Macs. However, its limit cannot be changed, and you cannot force charging to be put on hold. Battery Toolkit allows specifying a hard limit past which battery charging will be turned off. For safety reasons, this limit cannot be lower than 50&amp;nbsp;%.&lt;/p&gt; 
&lt;h2&gt;Allows battery charge to drain to a lower limit&lt;/h2&gt; 
&lt;p&gt;Even when connected to power, your Mac&#39;s battery may slowly lose battery charge for various reasons. Short battery charging bursts can further deteriorate batteries. For this reason, Battery Toolkit allows specifying a limit only below which battery charging will be turned on. For safety reasons, this limit cannot be lower than 20&amp;nbsp;%.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This setting is not honoured for cold boots or reboots, because Apple Silicon Macs reset their platform state in these cases. As battery charging will already be ongoing when Battery Toolkit starts, it lets charging proceed to the upper limit to not cause further short bursts across reboots.&lt;/p&gt; 
&lt;h2&gt;Allows you to disable the power adapter&lt;/h2&gt; 
&lt;p&gt;If you want to discharge the battery of your Mac, e.g., to recalibrate it, you can turn off the power adapter without actually unplugging it. You can also have Battery Toolkit disable sleeping when the power adapter is disabled.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Your Mac may go to sleep immediately after enabling the power adapter again. This is a software bug in macOS and cannot easily be worked around.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;img alt=&quot;Power Settings&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/PowerSettings.png&quot; width=&quot;607&quot; /&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Fig. 1&lt;/strong&gt;. &lt;em&gt;Power Settings&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Grants you manual control&lt;/h2&gt; 
&lt;p&gt;The Battery Toolkit &quot;Commands&quot; menu and its menu bar extra allow you to issue various commands related to the power state of your Mac. These include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enabling and disabling the power adapter&lt;/li&gt; 
 &lt;li&gt;Requesting a full charge&lt;/li&gt; 
 &lt;li&gt;Requesting a charge to the specified upper limit&lt;/li&gt; 
 &lt;li&gt;Stopping charging immediately&lt;/li&gt; 
 &lt;li&gt;Pausing all background activity&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;img alt=&quot;Menu Bar Extra&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/MenuBarExtra.png&quot; width=&quot;283&quot; /&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;strong&gt;Fig. 2&lt;/strong&gt;. &lt;em&gt;Menu Bar Extra&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Battery Toolkit currently only supports Apple Silicon Macs &lt;a href=&quot;https://github.com/mhaeuser/Battery-Toolkit/issues/15&quot;&gt;#15&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Manual Install&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to the GitHub &lt;a href=&quot;https://github.com/mhaeuser/Battery-Toolkit/releases/latest&quot;&gt;releases&lt;/a&gt; page&lt;/li&gt; 
 &lt;li&gt;Download the latest non-dSYM build (i.e., &lt;code&gt;Battery-Toolkit-X.Y.zip&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Unzip the archive&lt;/li&gt; 
 &lt;li&gt;Drag &lt;code&gt;Battery Toolkit.app&lt;/code&gt; into your Applications folder&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Install via Homebrew &lt;span&gt;🍺&lt;/span&gt;&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt; if you haven&#39;t already&lt;/li&gt; 
 &lt;li&gt;Open Terminal and run &lt;code&gt;brew tap mhaeuser/mhaeuser&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;brew install battery-toolkit&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You may want to add the &lt;code&gt;--no-quarantine&lt;/code&gt; flag onto the end of the install command to bypass Gatekeeper more conveniently, but beware the potential security risks of doing so.&lt;/p&gt; 
&lt;p&gt;Otherwise, follow the steps mentioned below.&lt;/p&gt; 
&lt;h3&gt;Opening the App&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] This step is necessary, because the app has not been notarized by Apple due to the membership fees of the Apple Developer Program. &quot;Apple could not verify &#39;Battery Toolkit.app&#39; is free of malware&quot; refers to the &lt;a href=&quot;https://support.apple.com/en-us/102445&quot;&gt;lack of notarizaion&lt;/a&gt;, not to any anomalies detected.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;On macOS 14 Sonoma or below:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Right click &lt;code&gt;Battery Toolkit.app&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Click &quot;Open&quot;&lt;/li&gt; 
 &lt;li&gt;Click &quot;Open&quot; in the dialog box&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;On macOS 15 Sequoia or above:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Try to open the app, it will tell you it&#39;s blocked&lt;/li&gt; 
 &lt;li&gt;Go to &lt;code&gt;System Settings &amp;gt; Privacy &amp;amp; Security&lt;/code&gt; and scroll to the bottom&lt;/li&gt; 
 &lt;li&gt;Click &quot;Open Anyway&quot; to allow Battery Toolkit to open&lt;/li&gt; 
 &lt;li&gt;Click &quot;Open Anyway&quot; on the next dialog box and authenticate&lt;/li&gt; 
 &lt;li&gt;Open Battery Toolkit again from Applications folder&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] To ensure there is no chance of interference, please turn “Optimized Charging” &lt;strong&gt;off&lt;/strong&gt; when Battery Toolkit is in use. &lt;br /&gt; Go to macOS System Settings &amp;gt; Battery &amp;gt; the (i) next to Battery Health &amp;gt; Optimized Battery Charging &amp;gt; toggle off&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open Battery Toolkit from your Applications folder&lt;/li&gt; 
 &lt;li&gt;The menu bar will change to show the app menus, and a menu bar extra will should be visible&lt;/li&gt; 
 &lt;li&gt;Configure the settings through either method (see &lt;strong&gt;Fig. 2, 3, 4&lt;/strong&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;img alt=&quot;Menu Bar Main&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/MenuBarMain.png&quot; width=&quot;316&quot; /&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;img alt=&quot;Menu Bar Extra&quot; src=&quot;https://raw.githubusercontent.com/mhaeuser/Battery-Toolkit/main/Resources/MenuBarCommands.png&quot; width=&quot;248&quot; /&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;strong&gt;Fig. 3&lt;/strong&gt;. &lt;em&gt;Main Menu&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;. &lt;em&gt;Menu Bar Commands&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;If you prefer, you can quit the GUI to hide the menu bar extra and Battery Toolkit will keep running in the background. If you want to change any settings, simply re-open the app.&lt;/p&gt; 
&lt;h1&gt;Uninstall&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;Focus Battery Toolkit&lt;/li&gt; 
 &lt;li&gt;Open the main Battery Toolkit menu in the menu bar (see &lt;strong&gt;Fig. 3&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Choose &quot;Disable Background Activity&quot;&lt;/li&gt; 
 &lt;li&gt;Move the app to the Trash and empty it&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Limitations&lt;/h1&gt; 
&lt;p&gt;Battery Toolkit disables sleep while it is charging, because it has to actively disable charging once reaching the maximum. Sleep is re-enabled once charging is stopped for any reason, e.g., reaching the maximum charge level, manual cancellation, or unplugging the MacBook.&lt;/p&gt; 
&lt;p&gt;Apps, including Battery Toolkit, cannot control the charge state when the machine is shut down. If the charger remains plugged in while the Mac is off, the battery will charge to 100&amp;nbsp;%.&lt;/p&gt; 
&lt;p&gt;Note that sleep should usually be disabled when the power adapter is disabled, as this will exit Clamshell mode and the machine will sleep immediately if the lid is closed. Refer to the toggle in the Settings dialog (see &lt;strong&gt;Fig. 1&lt;/strong&gt;).&lt;/p&gt; 
&lt;h1&gt;Technical Details&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Based on IOPowerManagement events to minimize resource usage, especially when not connected to power&lt;/li&gt; 
 &lt;li&gt;Support for macOS Ventura daemons and login items for a more reliable experience&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Privileged operations are authenticated by the daemon&lt;/li&gt; 
 &lt;li&gt;Privileged daemon exposes only a minimal protocol via XPC&lt;/li&gt; 
 &lt;li&gt;XPC communication uses the latest macOS codesign features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Credits&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Icon based on &lt;a href=&quot;https://seekicon.com/free-icon/rechargable-battery_1&quot;&gt;reference icon by Streamline&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;README overhauled by &lt;a href=&quot;https://github.com/realrogue&quot;&gt;rogue&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Donate&lt;/h1&gt; 
&lt;p&gt;For various reasons, I will not accept personal donations. However, if you would like to support my work with the &lt;a href=&quot;https://www.kinderschutzbund-kaiserslautern.de/&quot;&gt;Kinderschutzbund Kaiserslautern-Kusel&lt;/a&gt; child protection association, you may donate &lt;a href=&quot;https://www.kinderschutzbund-kaiserslautern.de/helfen-sie-mit/spenden/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MonitorControl/MonitorControl</title>
      <link>https://github.com/MonitorControl/MonitorControl</link>
      <description>&lt;p&gt;🖥 Control your display&#39;s brightness &amp; volume on your Mac as if it was a native Apple Display. Use Apple Keyboard keys or custom shortcuts. Shows the native macOS OSDs.&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/Icon-cropped.png&quot; width=&quot;200&quot; alt=&quot;App icon&quot; align=&quot;left&quot; /&gt; 
&lt;div&gt; 
 &lt;h3&gt;MonitorControl&lt;/h3&gt; 
 &lt;p&gt;Controls your external display brightness and volume and shows native OSD. Use menubar extra sliders or the keyboard, including native Apple keys!&lt;/p&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/macos_badge_noborder.png&quot; width=&quot;175&quot; alt=&quot;Download for macOS&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/MonitorControl/MonitorControl/total.svg?style=flat&quot; alt=&quot;downloads&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release-pre/MonitorControl/MonitorControl.svg?style=flat&quot; alt=&quot;latest version&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/raw/master/License.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/MonitorControl/MonitorControl.svg?style=flat&quot; alt=&quot;license&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/platform-macOS-blue.svg?style=flat&quot; alt=&quot;platform&quot; /&gt;&lt;/a&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/screenshot.png&quot; width=&quot;824&quot; alt=&quot;Screenshot&quot; /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] MonitorControl v4.2.0 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/issues/1663&quot;&gt;may crash&lt;/a&gt; on certain configurations running macOS 15 Sequoia. Additionally, this version will not automatically update to the &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;latest app version&lt;/a&gt;. To resolve the issue and ensure future updates, please upgrade manually.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;p&gt;Go to &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;Releases&lt;/a&gt; and download the latest &lt;code&gt;.dmg&lt;/code&gt;, or you can install via Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;brew install --cask monitorcontrol
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Major features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Control your display&#39;s brightness, volume and contrast!&lt;/li&gt; 
 &lt;li&gt;Shows native OSD for brightness and volume.&lt;/li&gt; 
 &lt;li&gt;Supports multiple protocols to adjust brightness: DDC for external displays (brightness, contrast, volume), native Apple protocol for Apple and built-in displays, Gamma table control for software dimming, shade control for AirPlay, Sidecar and Display Link devices and other virtual screens.&lt;/li&gt; 
 &lt;li&gt;Supports smooth brightness transitions.&lt;/li&gt; 
 &lt;li&gt;Seamlessly combined hardware and software dimming extends dimming beyond the minimum brightness available on your display.&lt;/li&gt; 
 &lt;li&gt;Synchronize brightness from built-in and Apple screens - replicate Ambient light sensor and touch bar induced changes to a non-Apple external display!&lt;/li&gt; 
 &lt;li&gt;Sync up all your displays using a single slider or keyboard shortcuts.&lt;/li&gt; 
 &lt;li&gt;Allows dimming to full black.&lt;/li&gt; 
 &lt;li&gt;Support for custom keyboard shortcuts as well as standard brightness and media keys on Apple keyboards.&lt;/li&gt; 
 &lt;li&gt;Dozens of customization options to tweak the inner workings of the app to suit your hardware and needs (don&#39;t forget to enable &lt;code&gt;Show advanced settings&lt;/code&gt; in app Settings).&lt;/li&gt; 
 &lt;li&gt;Simple, unobtrusive UI to blend in to the general aesthetics of macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;One of the best app of its kind, completely FREE.&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For additional features, more advanced brightness control with XDR/HDR brightness upscaling and support for more Mac models and displays, check out &lt;a href=&quot;https://github.com/waydabber/BetterDisplay#readme&quot;&gt;BetterDisplay&lt;/a&gt;!&lt;/p&gt; 
&lt;h3&gt;Screenshots (Settings)&lt;/h3&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_1.png&quot; width=&quot;392&quot; alt=&quot;Screenshot&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_2.png&quot; width=&quot;392&quot; alt=&quot;Screenshot&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_3.png&quot; width=&quot;392&quot; alt=&quot;Screenshot&quot; /&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_4.png&quot; width=&quot;392&quot; alt=&quot;Screenshot&quot; /&gt; 
&lt;/div&gt; 
&lt;h2&gt;How to install and use the app&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;Download the app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Copy the MonitorControl app file from the .dmg file to your Applications folder&lt;/li&gt; 
 &lt;li&gt;Click on the &lt;code&gt;MonitorControl&lt;/code&gt; app&lt;/li&gt; 
 &lt;li&gt;Add the app to &lt;code&gt;Accessibility&lt;/code&gt; under &lt;code&gt;System Settings&lt;/code&gt; » &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt; as prompted (this is required only if you wish to use the native Apple keyboard brightness and media keys - if this is not the case, you can safely skip this step).&lt;/li&gt; 
 &lt;li&gt;Use your keyboard or the sliders in the app menu (a brightness symbol in the macOS menubar as shown on the screenshot above) to control your displays.&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;Settings…&lt;/code&gt; for customization options (enable &lt;code&gt;Show advanced settings&lt;/code&gt; for even more options).&lt;/li&gt; 
 &lt;li&gt;You can set up custom keyboard shortcuts under the &lt;code&gt;Keyboard&lt;/code&gt; in Settings (the app uses Apple media keys by default).&lt;/li&gt; 
 &lt;li&gt;If you have any questions, go to &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/discussions&quot;&gt;Discussions&lt;/a&gt;!&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;macOS compatibility&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;MonitorControl version&lt;/th&gt; 
   &lt;th&gt;macOS version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v4.0.0&lt;/td&gt; 
   &lt;td&gt;Catalina 10.15*&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v3.1.1&lt;/td&gt; 
   &lt;td&gt;Mojave 10.14&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;v2.1.0&lt;/td&gt; 
   &lt;td&gt;Sierra 10.12&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;em&gt;* With some limitations - full functionality available on macOS 11 Big Sur or newer.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;For macOS Sequoia compatibility &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl/releases&quot;&gt;v4.3.2 or newer&lt;/a&gt; is required!&lt;/p&gt; 
&lt;h3&gt;Supported displays&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Most modern LCD displays from all major manufacturers supported implemented DDC/CI protocol via USB-C, DisplayPort, HDMI, DVI or VGA to allow for hardware backlight and volume control.&lt;/li&gt; 
 &lt;li&gt;Apple displays and built-in displays are supported using native protocols.&lt;/li&gt; 
 &lt;li&gt;LCD and LED Televisions usually do not implement DDC, these are supported using software alternatives to dim the image.&lt;/li&gt; 
 &lt;li&gt;DisplayLink, Airplay, Sidecar and other virtual screens are supported via shade (overlay) control.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Notable exceptions for hardware control compatibility:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;DDC control using the built-in HDMI port of the 2018 Intel Mac mini, the built-in HDMI port of all M1 Macs (MacBook Pro 14&quot; and 16&quot;, Mac Mini, Mac Studio) and the built-in HDMI port of the entry level M2 Mac mini are not supported. Use USB-C instead or get &lt;a href=&quot;https://betterdisplay.pro&quot;&gt;BetterDisplay&lt;/a&gt; for full DDC control over HDMI with these Macs as well for free. Software-only dimming is still available for these connections.&lt;/li&gt; 
 &lt;li&gt;Some displays (notably EIZO) use MCCS over USB or an entirely custom protocol for control. These displays are supported with software dimming only.&lt;/li&gt; 
 &lt;li&gt;DisplayLink docks and dongles do not allow for DDC control on Macs, only software dimming is available for these connections.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Compatibility with&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;f.lux users: please activate &lt;code&gt;Avoid gamma table manipulation&lt;/code&gt; under &lt;code&gt;Settings&lt;/code&gt; » &lt;code&gt;Displays&lt;/code&gt;! This step is not needed if you use Night Shift.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://betterdisplay.pro/&quot;&gt;BetterDisplay&lt;/a&gt; users: either activate &lt;code&gt;Avoid gamma table manipulation&lt;/code&gt; in MonitorControl or turn off &lt;code&gt;Allow color table adjustments&lt;/code&gt; in BetterDisplay (under Settings/Displays/Overview). You might want to disable native keyboard control either in MonitorControl or BetterDisplay, depending on which app you want to use for brightness control and dimming.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing to the project&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can help out &lt;a href=&quot;https://opencollective.com/monitorcontrol&quot;&gt;by contributiong to the project with your one-time donation or by being a regular Sponsor&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;If you want, you can fork the code, make improvements and submit a pull request to improve the app. Accepting a PR is solely in the hands of the maintainer - before making fundamental changes expecting it to be accepted, please consult the maintainer of the project!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to build&lt;/h2&gt; 
&lt;h3&gt;Required&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;Swiftlint&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;SwiftFormat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Flinesoft/BartyCrouch&quot;&gt;BartyCrouch&lt;/a&gt; (for updating localizations)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build steps&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the project via this Terminal command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/MonitorControl/MonitorControl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you want to clone one of the branches, add &lt;code&gt;--single-branch --branch [branchname]&lt;/code&gt; after the &lt;code&gt;clone&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;You&#39;re all set! Now open the &lt;code&gt;MonitorControl.xcodeproj&lt;/code&gt; with Xcode! The dependencies will automatically get downloaded once you open the project. If they don&#39;t: &lt;code&gt;File &amp;gt; Packages &amp;gt; Resolve Package Versions&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Third party dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MonitorControl/MediaKeyTap&quot;&gt;MediaKeyTap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/Settings&quot;&gt;Settings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rnine/SimplyCoreAudio&quot;&gt;SimplyCoreAudio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/KeyboardShortcuts&quot;&gt;KeyboardShortcuts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sparkle-project/Sparkle&quot;&gt;Sparkle&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Hall of Honor&lt;/h2&gt; 
&lt;h3&gt;Current maintainer of the project&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/waydabber&quot;&gt;@waydabber&lt;/a&gt;, developer of &lt;a href=&quot;https://github.com/waydabber/BetterDisplay#readme&quot;&gt;BetterDisplay&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Former maintainers, special contributors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/the0neyouseek&quot;&gt;@the0neyouseek&lt;/a&gt; - previous (now honorary) maintainer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JoniVR&quot;&gt;@JoniVR&lt;/a&gt; - previous (now honorary) maintainer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/alin23&quot;&gt;@alin23&lt;/a&gt; (generally spearheaded M1 DDC support and figured out a many of the caveats)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mathew-kurian/&quot;&gt;@mathew-kurian&lt;/a&gt; (original developer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Tyilo/&quot;&gt;@Tyilo&lt;/a&gt; (fork)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bensge/&quot;&gt;@Bensge&lt;/a&gt; - (used some code from his project &lt;a href=&quot;https://github.com/Bensge/NativeDisplayBrightness&quot;&gt;NativeDisplayBrightness&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nhurden/&quot;&gt;@nhurden&lt;/a&gt; (for the original MediaKeyTap)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kfix/ddcctl&quot;&gt;@kfix&lt;/a&gt; (for ddcctl)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reitermarkus&quot;&gt;@reitermarkus&lt;/a&gt; (for Intel DDC support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.deviantart.com/javierocasio&quot;&gt;javierocasio&lt;/a&gt; (app icon background)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>groue/GRDB.swift</title>
      <link>https://github.com/groue/GRDB.swift</link>
      <description>&lt;p&gt;A toolkit for SQLite databases, with a focus on application development&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB~dark.png&quot; /&gt; 
 &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB.png&quot; /&gt; 
 &lt;img alt=&quot;GRDB: A toolkit for SQLite databases, with a focus on application development.&quot; src=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB.png&quot; /&gt; 
&lt;/picture&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;A toolkit for SQLite databases, with a focus on application development&lt;/strong&gt;&lt;br /&gt; Proudly serving the community since 2015 &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;&lt;img alt=&quot;Swift 6&quot; src=&quot;https://img.shields.io/badge/swift-6-orange.svg?style=flat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/groue/GRDB.swift/raw/master/LICENSE&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/groue/GRDB.swift.svg?maxAge=2592000&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml&quot;&gt;&lt;img alt=&quot;CI Status&quot; src=&quot;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml/badge.svg?branch=master&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://menial.co.uk/base/&quot;&gt;&lt;img alt=&quot;Base: The best SQLite database editor for macOS&quot; src=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Sponsors/base.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;Thank you to &lt;a href=&quot;https://menial.co.uk/base/&quot;&gt;Base&lt;/a&gt; for sponsoring GRDB&lt;/strong&gt;&lt;br /&gt;Base is a small, powerful, comfortable SQLite editor for everyone on macOS. &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Latest release&lt;/strong&gt;: September 23, 2025 • &lt;a href=&quot;https://github.com/groue/GRDB.swift/tree/v7.7.0&quot;&gt;version 7.7.0&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB7MigrationGuide.md&quot;&gt;Migrating From GRDB 6 to GRDB 7&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;: iOS 13.0+ / macOS 10.15+ / tvOS 13.0+ / watchOS 7.0+ • SQLite 3.20.0+ • Swift 6+ / Xcode 16+&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Contact&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Release announcements and usage tips: follow &lt;a href=&quot;https://hachyderm.io/@groue&quot;&gt;@groue@hachyderm.io&lt;/a&gt; on Mastodon.&lt;/li&gt; 
 &lt;li&gt;Report bugs in a &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/new&quot;&gt;Github issue&lt;/a&gt;. Make sure you check the &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues?q=is%3Aopen&quot;&gt;existing issues&lt;/a&gt; first.&lt;/li&gt; 
 &lt;li&gt;A question? Looking for advice? Do you wonder how to contribute? Fancy a chat? Go to the &lt;a href=&quot;https://github.com/groue/GRDB.swift/discussions&quot;&gt;GitHub discussions&lt;/a&gt;, or the &lt;a href=&quot;https://forums.swift.org/c/related-projects/grdb&quot;&gt;GRDB forums&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is GRDB?&lt;/h2&gt; 
&lt;p&gt;Use this library to save your application’s permanent data into SQLite databases. It comes with built-in tools that address common needs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQL Generation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Enhance your application models with persistence and fetching methods, so that you don&#39;t have to deal with SQL and raw database rows when you don&#39;t want to.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database Observation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Get notifications when database values are modified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Robust Concurrency&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Multi-threaded applications can efficiently use their databases, including WAL databases that support concurrent reads and writes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Migrations&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Evolve the schema of your database as you ship new versions of your application.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Leverage your SQLite skills&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Not all developers need advanced SQLite features. But when you do, GRDB is as sharp as you want it to be. Come with your SQL and SQLite skills, or learn new ones as you go!&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#usage&quot;&gt;Usage&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&quot;&gt;Installation&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;details open&gt; 
 &lt;summary&gt;Start using the database in four steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import GRDB

// 1. Open a database connection
let dbQueue = try DatabaseQueue(path: &quot;/path/to/database.sqlite&quot;)

// 2. Define the database schema
try dbQueue.write { db in
    try db.create(table: &quot;player&quot;) { t in
        t.primaryKey(&quot;id&quot;, .text)
        t.column(&quot;name&quot;, .text).notNull()
        t.column(&quot;score&quot;, .integer).notNull()
    }
}

// 3. Define a record type
struct Player: Codable, Identifiable, FetchableRecord, PersistableRecord {
    var id: String
    var name: String
    var score: Int
    
    enum Columns {
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}

// 4. Write and read in the database
try dbQueue.write { db in
    try Player(id: &quot;1&quot;, name: &quot;Arthur&quot;, score: 100).insert(db)
    try Player(id: &quot;2&quot;, name: &quot;Barbara&quot;, score: 1000).insert(db)
}

try dbQueue.read { db in
    let player = try Player.find(db, id: &quot;1&quot;))
    
    let bestPlayers = try Player
        .order(\.score.desc)
        .limit(10)
        .fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Access to raw SQL&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.execute(sql: &quot;&quot;&quot;
        CREATE TABLE player (
          id TEXT PRIMARY KEY,
          name TEXT NOT NULL,
          score INT NOT NULL)
        &quot;&quot;&quot;)
    
    try db.execute(sql: &quot;&quot;&quot;
        INSERT INTO player (id, name, score)
        VALUES (?, ?, ?)
        &quot;&quot;&quot;, arguments: [&quot;1&quot;, &quot;Arthur&quot;, 100])
    
    // Avoid SQL injection with SQL interpolation
    let id = &quot;2&quot;
    let name = &quot;O&#39;Brien&quot;
    let score = 1000
    try db.execute(literal: &quot;&quot;&quot;
        INSERT INTO player (id, name, score)
        VALUES (\(id), \(name), \(score))
        &quot;&quot;&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&quot;&gt;Executing Updates&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Access to raw database rows and values&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // Fetch database rows
    let rows = try Row.fetchCursor(db, sql: &quot;SELECT * FROM player&quot;)
    while let row = try rows.next() {
        let id: String = row[&quot;id&quot;]
        let name: String = row[&quot;name&quot;]
        let score: Int = row[&quot;score&quot;]
    }
    
    // Fetch values
    let playerCount = try Int.fetchOne(db, sql: &quot;SELECT COUNT(*) FROM player&quot;)! // Int
    let playerNames = try String.fetchAll(db, sql: &quot;SELECT name FROM player&quot;) // [String]
}

let playerCount = try dbQueue.read { db in
    try Int.fetchOne(db, sql: &quot;SELECT COUNT(*) FROM player&quot;)!
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&quot;&gt;Fetch Queries&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Database model types aka &quot;records&quot;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Codable, Identifiable, FetchableRecord, PersistableRecord {
    var id: String
    var name: String
    var score: Int
    
    enum Columns {
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}

try dbQueue.write { db in
    // Create database table
    try db.create(table: &quot;player&quot;) { t in
        t.primaryKey(&quot;id&quot;, .text)
        t.column(&quot;name&quot;, .text).notNull()
        t.column(&quot;score&quot;, .integer).notNull()
    }
    
    // Insert a record
    var player = Player(id: &quot;1&quot;, name: &quot;Arthur&quot;, score: 100)
    try player.insert(db)
    
    // Update a record
    player.score += 10
    try score.update(db)
    
    try player.updateChanges { $0.score += 10 }
    
    // Delete a record
    try player.delete(db)
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Query the database with the Swift query interface&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // Player
    let player = try Player.find(db, id: &quot;1&quot;)
    
    // Player?
    let arthur = try Player.filter { $0.name == &quot;Arthur&quot; }.fetchOne(db)
    
    // [Player]
    let bestPlayers = try Player.order(\.score.desc).limit(10).fetchAll(db)
    
    // Int
    let playerCount = try Player.fetchCount(db)
    
    // SQL is always welcome
    let players = try Player.fetchAll(db, sql: &quot;SELECT * FROM player&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;Query Interface&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Database changes notifications&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Define the observed value
let observation = ValueObservation.tracking { db in
    try Player.fetchAll(db)
}

// Start observation
let cancellable = observation.start(
    in: dbQueue,
    onError: { error in ... },
    onChange: { (players: [Player]) in print(&quot;Fresh players: \(players)&quot;) })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Ready-made support for Combine and RxSwift:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Swift concurrency
for try await players in observation.values(in: dbQueue) {
    print(&quot;Fresh players: \(players)&quot;)
}

// Combine
let cancellable = observation.publisher(in: dbQueue).sink(
    receiveCompletion: { completion in ... },
    receiveValue: { (players: [Player]) in print(&quot;Fresh players: \(players)&quot;) })

// RxSwift
let disposable = observation.rx.observe(in: dbQueue).subscribe(
    onNext: { (players: [Player]) in print(&quot;Fresh players: \(players)&quot;) },
    onError: { error in ... })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseobservation&quot;&gt;Database Observation&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&quot;&gt;Combine Support&lt;/a&gt;, &lt;a href=&quot;https://github.com/RxSwiftCommunity/RxGRDB&quot;&gt;RxGRDB&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;GRDB runs on top of SQLite&lt;/strong&gt;: you should get familiar with the &lt;a href=&quot;http://www.sqlite.org/faq.html&quot;&gt;SQLite FAQ&lt;/a&gt;. For general and detailed information, jump to the &lt;a href=&quot;http://www.sqlite.org/docs.html&quot;&gt;SQLite Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Demo Applications &amp;amp; Frequently Asked Questions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&quot;&gt;Demo Applications&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Reference&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/&quot;&gt;GRDB Reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Getting Started&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;Database Connections&lt;/a&gt;: Connect to SQLite databases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;SQLite and SQL&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&quot;&gt;SQLite API&lt;/a&gt;: The low-level SQLite API • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&quot;&gt;executing updates&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&quot;&gt;fetch queries&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Records and the Query Interface&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;Query Interface&lt;/a&gt;: A swift way to generate SQL • &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseschema&quot;&gt;create tables, indexes, etc&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&quot;&gt;requests&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;associations between record types&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Application Tools&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/migrations&quot;&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&quot;&gt;Full-Text Search&lt;/a&gt;: Perform efficient and customizable full-text searches.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseobservation&quot;&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&quot;&gt;Encryption&lt;/a&gt;: Encrypt your database with SQLCipher.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#backup&quot;&gt;Backup&lt;/a&gt;: Dump the content of a database to another.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#interrupt-a-database&quot;&gt;Interrupt a Database&lt;/a&gt;: Abort any pending database operation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasesharing&quot;&gt;Sharing a Database&lt;/a&gt;: How to share an SQLite database between multiple processes - recommendations for App Group containers, App Extensions, App Sandbox, and file coordination.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to Know&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;Concurrency&lt;/a&gt;: How to access databases in a multi-threaded application.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&quot;&gt;Combine&lt;/a&gt;: Access and observe the database with Combine publishers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&quot;&gt;Avoiding SQL Injection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&quot;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&quot;&gt;Unicode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#memory-management&quot;&gt;Memory Management&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseconnections&quot;&gt;Data Protection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB7MigrationGuide.md&quot;&gt;Migrating From GRDB 6 to GRDB 7&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/WhyAdoptGRDB.md&quot;&gt;Why Adopt GRDB?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recordrecommendedpractices&quot;&gt;Recommended Practices for Designing Record Types&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Companion Libraries&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/groue/GRDBQuery&quot;&gt;GRDBQuery&lt;/a&gt;: Access and observe the database from your SwiftUI views.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/groue/GRDBSnapshotTesting&quot;&gt;GRDBSnapshotTesting&lt;/a&gt;: Test your database.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sample-code&quot;&gt;Sample Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;The installation procedures below have GRDB use the version of SQLite that ships with the target operating system.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&quot;&gt;Encryption&lt;/a&gt; for the installation procedure of GRDB with SQLCipher.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&quot;&gt;Custom SQLite builds&lt;/a&gt; for the installation procedure of GRDB with a customized build of SQLite.&lt;/p&gt; 
&lt;h2&gt;Swift Package Manager&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; automates the distribution of Swift code. To use GRDB with SPM, add a dependency to &lt;code&gt;https://github.com/groue/GRDB.swift.git&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;GRDB offers two libraries, &lt;code&gt;GRDB&lt;/code&gt; and &lt;code&gt;GRDB-dynamic&lt;/code&gt;. Pick only one. When in doubt, prefer &lt;code&gt;GRDB&lt;/code&gt;. The &lt;code&gt;GRDB-dynamic&lt;/code&gt; library can reveal useful if you are going to link it with multiple targets within your app and only wish to link to a shared, dynamic framework once. See &lt;a href=&quot;https://forums.swift.org/t/how-to-link-a-swift-package-as-dynamic/32062&quot;&gt;How to link a Swift Package as dynamic&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Linux support is provided by contributors. It is not automatically tested, and not officially maintained. If you notice a build or runtime failure on Linux, please open a pull request with the necessary fix, thank you!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;CocoaPods&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Xcode projects. To use GRDB with CocoaPods (version 1.2 or higher), specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;GRDB.swift&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GRDB can be installed as a framework, or a static library.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important Note for CocoaPods installation&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Due to an &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/11839&quot;&gt;issue&lt;/a&gt; in CocoaPods, it is currently not possible to deploy new versions of GRDB to CocoaPods. The last version available on CocoaPods is 6.24.1. To install later versions of GRDB using CocoaPods, use one of the following workarounds:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Depend on the &lt;code&gt;GRDB7&lt;/code&gt; branch. This is more or less equivalent to what &lt;code&gt;pod &#39;GRDB.swift&#39;, &#39;~&amp;gt; 7.0&#39;&lt;/code&gt; would normally do, if CocoaPods would accept new GRDB versions to be published:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Can&#39;t use semantic versioning due to https://github.com/CocoaPods/CocoaPods/issues/11839
pod &#39;GRDB.swift&#39;, git: &#39;https://github.com/groue/GRDB.swift.git&#39;, branch: &#39;GRDB7&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Depend on a specific version explicitly (Replace the tag with the version you want to use):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Can&#39;t use semantic versioning due to https://github.com/CocoaPods/CocoaPods/issues/11839
# Replace the tag with the tag that you want to use.
pod &#39;GRDB.swift&#39;, git: &#39;https://github.com/groue/GRDB.swift.git&#39;, tag: &#39;v6.29.0&#39; 
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Carthage&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is &lt;strong&gt;unsupported&lt;/strong&gt;. For some context about this decision, see &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/433&quot;&gt;#433&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manually&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/groue/GRDB.swift/releases&quot;&gt;Download&lt;/a&gt; a copy of GRDB, or clone its repository and make sure you checkout the latest tagged version.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Embed the &lt;code&gt;GRDB.xcodeproj&lt;/code&gt; project in your own project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDB&lt;/code&gt; target in the &lt;strong&gt;Target Dependencies&lt;/strong&gt; section of the &lt;strong&gt;Build Phases&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDB.framework&lt;/code&gt; to the &lt;strong&gt;Embedded Binaries&lt;/strong&gt; section of the &lt;strong&gt;General&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Database Connections&lt;/h1&gt; 
&lt;p&gt;GRDB provides two classes for accessing SQLite databases: &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;&lt;code&gt;DatabaseQueue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;&lt;code&gt;DatabasePool&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import GRDB

// Pick one:
let dbQueue = try DatabaseQueue(path: &quot;/path/to/database.sqlite&quot;)
let dbPool = try DatabasePool(path: &quot;/path/to/database.sqlite&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The differences are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Database pools allow concurrent database accesses (this can improve the performance of multithreaded applications).&lt;/li&gt; 
 &lt;li&gt;Database pools open your SQLite database in the &lt;a href=&quot;https://www.sqlite.org/wal.html&quot;&gt;WAL mode&lt;/a&gt; (unless read-only).&lt;/li&gt; 
 &lt;li&gt;Database queues support &lt;a href=&quot;https://www.sqlite.org/inmemorydb.html&quot;&gt;in-memory databases&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;If you are not sure, choose &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;&lt;code&gt;DatabaseQueue&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt; You will always be able to switch to &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;&lt;code&gt;DatabasePool&lt;/code&gt;&lt;/a&gt; later.&lt;/p&gt; 
&lt;p&gt;For more information and tips when opening connections, see &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseconnections&quot;&gt;Database Connections&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;SQLite API&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;In this section of the documentation, we will talk SQL.&lt;/strong&gt; Jump to the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt; if SQL is not your cup of tea.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&quot;&gt;Executing Updates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&quot;&gt;Fetch Queries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;Fetching Methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&quot;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&quot;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&quot;&gt;Data&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&quot;&gt;Date and DateComponents&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&quot;&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&quot;&gt;Swift enums&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt;: the protocol for custom value types&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/transactions&quot;&gt;Transactions and Savepoints&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Advanced topics:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;Prepared Statements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&quot;&gt;Custom SQL Functions and Aggregates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseschemaintrospection&quot;&gt;Database Schema Introspection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/rowadapter&quot;&gt;Row Adapters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#raw-sqlite-pointers&quot;&gt;Raw SQLite Pointers&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Executing Updates&lt;/h2&gt; 
&lt;p&gt;Once granted with a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;database connection&lt;/a&gt;, the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/execute(sql:arguments:)&quot;&gt;&lt;code&gt;execute(sql:arguments:)&lt;/code&gt;&lt;/a&gt; method executes the SQL statements that do not return any database row, such as &lt;code&gt;CREATE TABLE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, etc.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.execute(sql: &quot;&quot;&quot;
        CREATE TABLE player (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            score INT)
        &quot;&quot;&quot;)
    
    try db.execute(
        sql: &quot;INSERT INTO player (name, score) VALUES (?, ?)&quot;,
        arguments: [&quot;Barbara&quot;, 1000])
    
    try db.execute(
        sql: &quot;UPDATE player SET score = :score WHERE id = :id&quot;,
        arguments: [&quot;score&quot;: 1000, &quot;id&quot;: 1])
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:score&lt;/code&gt; in the SQL query are the &lt;strong&gt;statements arguments&lt;/strong&gt;. You pass arguments with arrays or dictionaries, as in the example above. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;&lt;code&gt;StatementArguments&lt;/code&gt;&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; 
&lt;p&gt;You can also embed query arguments right into your SQL queries, with &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/execute(literal:)&quot;&gt;&lt;code&gt;execute(literal:)&lt;/code&gt;&lt;/a&gt;, as in the example below. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    let name = &quot;O&#39;Brien&quot;
    let score = 550
    try db.execute(literal: &quot;&quot;&quot;
        INSERT INTO player (name, score) VALUES (\(name), \(score))
        &quot;&quot;&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Never ever embed values directly in your raw SQL strings&lt;/strong&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&quot;&gt;Avoiding SQL Injection&lt;/a&gt; for more information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// WRONG: don&#39;t embed values in raw SQL strings
let id = 123
let name = textField.text
try db.execute(
    sql: &quot;UPDATE player SET name = &#39;\(name)&#39; WHERE id = \(id)&quot;)

// CORRECT: use arguments dictionary
try db.execute(
    sql: &quot;UPDATE player SET name = :name WHERE id = :id&quot;,
    arguments: [&quot;name&quot;: name, &quot;id&quot;: id])

// CORRECT: use arguments array
try db.execute(
    sql: &quot;UPDATE player SET name = ? WHERE id = ?&quot;,
    arguments: [name, id])

// CORRECT: use SQL Interpolation
try db.execute(
    literal: &quot;UPDATE player SET name = \(name) WHERE id = \(id)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Join multiple statements with a semicolon&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.execute(sql: &quot;&quot;&quot;
    INSERT INTO player (name, score) VALUES (?, ?);
    INSERT INTO player (name, score) VALUES (?, ?);
    &quot;&quot;&quot;, arguments: [&quot;Arthur&quot;, 750, &quot;Barbara&quot;, 1000])

try db.execute(literal: &quot;&quot;&quot;
    INSERT INTO player (name, score) VALUES (\(&quot;Arthur&quot;), \(750));
    INSERT INTO player (name, score) VALUES (\(&quot;Barbara&quot;), \(1000));
    &quot;&quot;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you want to make sure that a single statement is executed, use a prepared &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;After an INSERT statement&lt;/strong&gt;, you can get the row ID of the inserted row with &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/lastinsertedrowid&quot;&gt;&lt;code&gt;lastInsertedRowID&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.execute(
    sql: &quot;INSERT INTO player (name, score) VALUES (?, ?)&quot;,
    arguments: [&quot;Arthur&quot;, 1000])
let playerId = db.lastInsertedRowID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Don&#39;t miss &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;, that provide classic &lt;strong&gt;persistence methods&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var player = Player(name: &quot;Arthur&quot;, score: 1000)
try player.insert(db)
let playerId = player.id
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fetch Queries&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;Database connections&lt;/a&gt; let you fetch database rows, plain values, and custom models aka &quot;records&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rows&lt;/strong&gt; are the raw results of SQL queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    if let row = try Row.fetchOne(db, sql: &quot;SELECT * FROM wine WHERE id = ?&quot;, arguments: [1]) {
        let name: String = row[&quot;name&quot;]
        let color: Color = row[&quot;color&quot;]
        print(name, color)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt; are the Bool, Int, String, Date, Swift enums, etc. stored in row columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    let urls = try URL.fetchCursor(db, sql: &quot;SELECT url FROM wine&quot;)
    while let url = try urls.next() {
        print(url)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Records&lt;/strong&gt; are your application objects that can initialize themselves from rows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let wines = try dbQueue.read { db in
    try Wine.fetchAll(db, sql: &quot;SELECT * FROM wine&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;Fetching Methods&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&quot;&gt;Cursors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&quot;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&quot;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Fetching Methods&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Throughout GRDB&lt;/strong&gt;, you can always fetch &lt;em&gt;cursors&lt;/em&gt;, &lt;em&gt;arrays&lt;/em&gt;, &lt;em&gt;sets&lt;/em&gt;, or &lt;em&gt;single values&lt;/em&gt; of any fetchable type (database &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&quot;&gt;row&lt;/a&gt;, simple &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&quot;&gt;value&lt;/a&gt;, or custom &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;record&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Row.fetchCursor(...) // A Cursor of Row
try Row.fetchAll(...)    // [Row]
try Row.fetchSet(...)    // Set&amp;lt;Row&amp;gt;
try Row.fetchOne(...)    // Row?
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchCursor&lt;/code&gt; returns a &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&quot;&gt;cursor&lt;/a&gt;&lt;/strong&gt; over fetched values:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchCursor(db, sql: &quot;SELECT ...&quot;) // A Cursor of Row
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchAll&lt;/code&gt; returns an &lt;strong&gt;array&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let players = try Player.fetchAll(db, sql: &quot;SELECT ...&quot;) // [Player]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchSet&lt;/code&gt; returns a &lt;strong&gt;set&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let names = try String.fetchSet(db, sql: &quot;SELECT ...&quot;) // Set&amp;lt;String&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns a &lt;strong&gt;single optional value&lt;/strong&gt;, and consumes a single database row (if any).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let count = try Int.fetchOne(db, sql: &quot;SELECT COUNT(*) ...&quot;) // Int?
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;All those fetching methods require an SQL string that contains a single SQL statement.&lt;/strong&gt; When you want to fetch from multiple statements joined with a semicolon, iterate the multiple &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;prepared statements&lt;/a&gt; found in the SQL string.&lt;/p&gt; 
&lt;h3&gt;Cursors&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Whenever you consume several rows from the database, you can fetch an Array, a Set, or a Cursor&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;fetchAll()&lt;/code&gt; and &lt;code&gt;fetchSet()&lt;/code&gt; methods return regular Swift array and sets, that you iterate like all other arrays and sets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // [Player]
    let players = try Player.fetchAll(db, sql: &quot;SELECT ...&quot;)
    for player in players {
        // use player
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike arrays and sets, cursors returned by &lt;code&gt;fetchCursor()&lt;/code&gt; load their results step after step:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // Cursor of Player
    let players = try Player.fetchCursor(db, sql: &quot;SELECT ...&quot;)
    while let player = try players.next() {
        // use player
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can not be used on any thread&lt;/strong&gt;: you must consume a cursor on the dispatch queue it was created in. Particularly, don&#39;t extract a cursor out of a database access method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Wrong
let cursor = try dbQueue.read { db in
    try Player.fetchCursor(db, ...)
}
while let player = try cursor.next() { ... }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Conversely, arrays and sets may be consumed on any thread:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// OK
let array = try dbQueue.read { db in
    try Player.fetchAll(db, ...)
}
for player in array { ... }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can be iterated only one time.&lt;/strong&gt; Arrays and sets can be iterated many times.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors iterate database results in a lazy fashion&lt;/strong&gt;, and don&#39;t consume much memory. Arrays and sets contain copies of database values, and may take a lot of memory when there are many fetched results.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are granted with direct access to SQLite,&lt;/strong&gt; unlike arrays and sets that have to take the time to copy database values. If you look after extra performance, you may prefer cursors.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can feed Swift collections.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You will most of the time use &lt;code&gt;fetchAll&lt;/code&gt; or &lt;code&gt;fetchSet&lt;/code&gt; when you want an array or a set. For more specific needs, you may prefer one of the initializers below. All of them accept an extra optional &lt;code&gt;minimumCapacity&lt;/code&gt; argument which helps optimizing your app when you have an idea of the number of elements in a cursor (the built-in &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchSet&lt;/code&gt; do not perform such an optimization).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt; and all types conforming to &lt;code&gt;RangeReplaceableCollection&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// [String]
let cursor = try String.fetchCursor(db, ...)
let array = try Array(cursor)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Sets&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Set&amp;lt;Int&amp;gt;
let cursor = try Int.fetchCursor(db, ...)
let set = try Set(cursor)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// [Int64: [Player]]
let cursor = try Player.fetchCursor(db)
let dictionary = try Dictionary(grouping: cursor, by: { $0.teamID })

// [Int64: Player]
let cursor = try Player.fetchCursor(db).map { ($0.id, $0) }
let dictionary = try Dictionary(uniqueKeysWithValues: cursor)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors adopt the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/cursor&quot;&gt;Cursor&lt;/a&gt; protocol, which looks a lot like standard &lt;a href=&quot;https://developer.apple.com/reference/swift/lazysequenceprotocol&quot;&gt;lazy sequences&lt;/a&gt; of Swift.&lt;/strong&gt; As such, cursors come with many convenience methods: &lt;code&gt;compactMap&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;dropFirst&lt;/code&gt;, &lt;code&gt;dropLast&lt;/code&gt;, &lt;code&gt;drop(while:)&lt;/code&gt;, &lt;code&gt;enumerated&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;joined&lt;/code&gt;, &lt;code&gt;joined(separator:)&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;max(by:)&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;min(by:)&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;prefix(while:)&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;reduce(into:)&lt;/code&gt;, &lt;code&gt;suffix&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Prints all Github links
try URL
    .fetchCursor(db, sql: &quot;SELECT url FROM link&quot;)
    .filter { url in url.host == &quot;github.com&quot; }
    .forEach { url in print(url) }

// An efficient cursor of coordinates:
let locations = try Row.
    .fetchCursor(db, sql: &quot;SELECT latitude, longitude FROM place&quot;)
    .map { row in
        CLLocationCoordinate2D(latitude: row[0], longitude: row[1])
    }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are not Swift sequences.&lt;/strong&gt; That&#39;s because Swift sequences can&#39;t handle iteration errors, when reading SQLite results may fail at any time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors require a little care&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Don&#39;t modify the results during a cursor iteration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Undefined behavior
while let player = try players.next() {
    try db.execute(sql: &quot;DELETE ...&quot;)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you don&#39;t see, or don&#39;t care about the difference, use arrays. If you care about memory and performance, use cursors when appropriate.&lt;/p&gt; 
&lt;h3&gt;Row Queries&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-rows&quot;&gt;Fetching Rows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&quot;&gt;Column Values&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rows-as-dictionaries&quot;&gt;Rows as Dictionaries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/row&quot;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Fetching Rows&lt;/h4&gt; 
&lt;p&gt;Fetch &lt;strong&gt;cursors&lt;/strong&gt; of rows, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; rows (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching methods&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    try Row.fetchCursor(db, sql: &quot;SELECT ...&quot;, arguments: ...) // A Cursor of Row
    try Row.fetchAll(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // [Row]
    try Row.fetchSet(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Set&amp;lt;Row&amp;gt;
    try Row.fetchOne(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Row?
    
    let rows = try Row.fetchCursor(db, sql: &quot;SELECT * FROM wine&quot;)
    while let row = try rows.next() {
        let name: String = row[&quot;name&quot;]
        let color: Color = row[&quot;color&quot;]
        print(name, color)
    }
}

let rows = try dbQueue.read { db in
    try Row.fetchAll(db, sql: &quot;SELECT * FROM player&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arguments are optional arrays or dictionaries that fill the positional &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchAll(db,
    sql: &quot;SELECT * FROM player WHERE name = ?&quot;,
    arguments: [&quot;Arthur&quot;])

let rows = try Row.fetchAll(db,
    sql: &quot;SELECT * FROM player WHERE name = :name&quot;,
    arguments: [&quot;name&quot;: &quot;Arthur&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;&lt;code&gt;StatementArguments&lt;/code&gt;&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; 
&lt;p&gt;Unlike row arrays that contain copies of the database rows, row cursors are close to the SQLite metal, and require a little care:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;strong&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set&lt;/strong&gt;. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Column Values&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Read column values&lt;/strong&gt; by index or column name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String = row[0]      // 0 is the leftmost column
let name: String = row[&quot;name&quot;] // Leftmost matching column - lookup is case-insensitive
let name: String = row[Column(&quot;name&quot;)] // Using query interface&#39;s Column
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure to ask for an optional when the value may be NULL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String? = row[&quot;name&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;row[]&lt;/code&gt; subscript returns the type you ask for. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported value types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let bookCount: Int     = row[&quot;bookCount&quot;]
let bookCount64: Int64 = row[&quot;bookCount&quot;]
let hasBooks: Bool     = row[&quot;bookCount&quot;] // false when 0

let string: String     = row[&quot;date&quot;]      // &quot;2015-09-11 18:14:15.123&quot;
let date: Date         = row[&quot;date&quot;]      // Date
self.date = row[&quot;date&quot;] // Depends on the type of the property.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use the &lt;code&gt;as&lt;/code&gt; type casting operator:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;row[...] as Int
row[...] as Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Throwing accessors exist as well. Their use is not encouraged, because a database decoding error is a programming error. If an application stores invalid data in the database file, that is a bug that needs to be fixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name = try row.decode(String.self, atIndex: 0)
let bookCount = try row.decode(Int.self, forColumn: &quot;bookCount&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: avoid the &lt;code&gt;as!&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt; operators:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if let int = row[...] as? Int { ... } // BAD - doesn&#39;t work
if let int = row[...] as Int? { ... } // GOOD
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: avoid nil-coalescing row values, and prefer the &lt;code&gt;coalesce&lt;/code&gt; method instead:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String? = row[&quot;nickname&quot;] ?? row[&quot;name&quot;]     // BAD - doesn&#39;t work
let name: String? = row.coalesce([&quot;nickname&quot;, &quot;name&quot;]) // GOOD
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Generally speaking, you can extract the type you need, provided it can be converted from the underlying SQLite value:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Successful conversions include:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;All numeric SQLite values to all numeric Swift types, and Bool (zero is the only false boolean).&lt;/li&gt; 
   &lt;li&gt;Text SQLite values to Swift String.&lt;/li&gt; 
   &lt;li&gt;Blob SQLite values to Foundation Data.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported types (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;NULL returns nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT NULL&quot;)!
row[0] as Int? // nil
row[0] as Int  // fatal error: could not convert NULL to Int.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is one exception, though: the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;row[0] as DatabaseValue // DatabaseValue.null
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Missing columns return nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;foo&#39; AS foo&quot;)!
row[&quot;missing&quot;] as String? // nil
row[&quot;missing&quot;] as String  // fatal error: no such column: missing
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can explicitly check for a column presence with the &lt;code&gt;hasColumn&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Invalid conversions throw a fatal error.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;Mom’s birthday&#39;&quot;)!
row[0] as String // &quot;Mom’s birthday&quot;
row[0] as Date?  // fatal error: could not convert &quot;Mom’s birthday&quot; to Date.
row[0] as Date   // fatal error: could not convert &quot;Mom’s birthday&quot; to Date.

let row = try Row.fetchOne(db, sql: &quot;SELECT 256&quot;)!
row[0] as Int    // 256
row[0] as UInt8? // fatal error: could not convert 256 to UInt8.
row[0] as UInt8  // fatal error: could not convert 256 to UInt8.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Those conversion fatal errors can be avoided with the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;Mom’s birthday&#39;&quot;)!
let dbValue: DatabaseValue = row[0]
if dbValue.isNull {
    // Handle NULL
} else if let date = Date.fromDatabaseValue(dbValue) {
    // Handle valid date
} else {
    // Handle invalid date
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This extra verbosity is the consequence of having to deal with an untrusted database: you may consider fixing the content of your database instead. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&quot;&gt;Fatal Errors&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQLite has a weak type system, and provides &lt;a href=&quot;https://www.sqlite.org/c3ref/column_blob.html&quot;&gt;convenience conversions&lt;/a&gt; that can turn String to Int, Double to Blob, etc.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;GRDB will sometimes let those conversions go through:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchCursor(db, sql: &quot;SELECT &#39;20 small cigars&#39;&quot;)
while let row = try rows.next() {
    row[0] as Int   // 20
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t freak out: those conversions did not prevent SQLite from becoming the immensely successful database engine you want to use. And GRDB adds safety checks described just above. You can also prevent those convenience conversions altogether by using the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; type.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;DatabaseValue&lt;/h4&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalue&quot;&gt;&lt;code&gt;DatabaseValue&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;DatabaseValue&lt;/code&gt; is an intermediate type between SQLite and your values, which gives information about the raw value stored in the database.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You get &lt;code&gt;DatabaseValue&lt;/code&gt; just like other value types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dbValue: DatabaseValue = row[0]
let dbValue: DatabaseValue? = row[&quot;name&quot;] // nil if and only if column does not exist

// Check for NULL:
dbValue.isNull // Bool

// The stored value:
dbValue.storage.value // Int64, Double, String, Data, or nil

// All the five storage classes supported by SQLite:
switch dbValue.storage {
case .null:                 print(&quot;NULL&quot;)
case .int64(let int64):     print(&quot;Int64: \(int64)&quot;)
case .double(let double):   print(&quot;Double: \(double)&quot;)
case .string(let string):   print(&quot;String: \(string)&quot;)
case .blob(let data):       print(&quot;Data: \(data)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can extract regular &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) from &lt;code&gt;DatabaseValue&lt;/code&gt; with the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible/fromdatabasevalue(_:)-21zzv&quot;&gt;fromDatabaseValue()&lt;/a&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dbValue: DatabaseValue = row[&quot;bookCount&quot;]
let bookCount   = Int.fromDatabaseValue(dbValue)   // Int?
let bookCount64 = Int64.fromDatabaseValue(dbValue) // Int64?
let hasBooks    = Bool.fromDatabaseValue(dbValue)  // Bool?, false when 0

let dbValue: DatabaseValue = row[&quot;date&quot;]
let string = String.fromDatabaseValue(dbValue)     // &quot;2015-09-11 18:14:15.123&quot;
let date   = Date.fromDatabaseValue(dbValue)       // Date?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;fromDatabaseValue&lt;/code&gt; returns nil for invalid conversions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;Mom’s birthday&#39;&quot;)!
let dbValue: DatabaseValue = row[0]
let string = String.fromDatabaseValue(dbValue) // &quot;Mom’s birthday&quot;
let int    = Int.fromDatabaseValue(dbValue)    // nil
let date   = Date.fromDatabaseValue(dbValue)   // nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Rows as Dictionaries&lt;/h4&gt; 
&lt;p&gt;Row adopts the standard &lt;a href=&quot;https://developer.apple.com/documentation/swift/randomaccesscollection&quot;&gt;RandomAccessCollection&lt;/a&gt; protocol, and can be seen as a dictionary of &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// All the (columnName, dbValue) tuples, from left to right:
for (columnName, dbValue) in row {
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;You can build rows from dictionaries&lt;/strong&gt; (standard Swift dictionaries and NSDictionary). See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information on supported types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row: Row = [&quot;name&quot;: &quot;foo&quot;, &quot;date&quot;: nil]
let row = Row([&quot;name&quot;: &quot;foo&quot;, &quot;date&quot;: nil])
let row = Row(/* [AnyHashable: Any] */) // nil if invalid dictionary
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yet rows are not real dictionaries: they may contain duplicate columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT 1 AS foo, 2 AS foo&quot;)!
row.columnNames    // [&quot;foo&quot;, &quot;foo&quot;]
row.databaseValues // [1, 2]
row[&quot;foo&quot;]         // 1 (leftmost matching column)
for (columnName, dbValue) in row { ... } // (&quot;foo&quot;, 1), (&quot;foo&quot;, 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;When you build a dictionary from a row&lt;/strong&gt;, you have to disambiguate identical columns, and choose how to present database values. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: DatabaseValue]&lt;/code&gt; dictionary that keeps leftmost value in case of duplicated column name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dict = Dictionary(row, uniquingKeysWith: { (left, _) in left })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: AnyObject]&lt;/code&gt; dictionary which keeps rightmost value in case of duplicated column name. This dictionary is identical to FMResultSet&#39;s resultDictionary from FMDB. It contains NSNull values for null columns, and can be shared with Objective-C:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dict = Dictionary(
    row.map { (column, dbValue) in
        (column, dbValue.storage.value as AnyObject)
    },
    uniquingKeysWith: { (_, right) in right })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: Any]&lt;/code&gt; dictionary that can feed, for example, JSONSerialization:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dict = Dictionary(
    row.map { (column, dbValue) in
        (column, dbValue.storage.value)
    },
    uniquingKeysWith: { (left, _) in left })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the documentation of &lt;a href=&quot;https://developer.apple.com/documentation/swift/dictionary/2892961-init&quot;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Value Queries&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Instead of rows, you can directly fetch values.&lt;/strong&gt; There are many supported &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;value types&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt; 
&lt;p&gt;Like rows, fetch values as &lt;strong&gt;cursors&lt;/strong&gt;, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; values (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching methods&lt;/a&gt;). Values are extracted from the leftmost column of the SQL queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    try Int.fetchCursor(db, sql: &quot;SELECT ...&quot;, arguments: ...) // A Cursor of Int
    try Int.fetchAll(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // [Int]
    try Int.fetchSet(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Set&amp;lt;Int&amp;gt;
    try Int.fetchOne(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Int?
    
    let maxScore = try Int.fetchOne(db, sql: &quot;SELECT MAX(score) FROM player&quot;) // Int?
    let names = try String.fetchAll(db, sql: &quot;SELECT name FROM player&quot;)       // [String]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;Int.fetchOne&lt;/code&gt; returns nil in two cases: either the SELECT statement yielded no row, or one row with a NULL value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// No row:
try Int.fetchOne(db, sql: &quot;SELECT 42 WHERE FALSE&quot;) // nil

// One row with a NULL value:
try Int.fetchOne(db, sql: &quot;SELECT NULL&quot;)           // nil

// One row with a non-NULL value:
try Int.fetchOne(db, sql: &quot;SELECT 42&quot;)             // 42
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For requests which may contain NULL, fetch optionals:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    try Optional&amp;lt;Int&amp;gt;.fetchCursor(db, sql: &quot;SELECT ...&quot;, arguments: ...) // A Cursor of Int?
    try Optional&amp;lt;Int&amp;gt;.fetchAll(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // [Int?]
    try Optional&amp;lt;Int&amp;gt;.fetchSet(db, sql: &quot;SELECT ...&quot;, arguments: ...)    // Set&amp;lt;Int?&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: One advanced use case, when you fetch one value, is to distinguish the cases of a statement that yields no row, or one row with a NULL value. To do so, use &lt;code&gt;Optional&amp;lt;Int&amp;gt;.fetchOne&lt;/code&gt;, which returns a double optional &lt;code&gt;Int??&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// No row:
try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &quot;SELECT 42 WHERE FALSE&quot;) // .none
// One row with a NULL value:
try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &quot;SELECT NULL&quot;)           // .some(.none)
// One row with a non-NULL value:
try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &quot;SELECT 42&quot;)             // .some(.some(42))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There are many supported value types (Bool, Int, String, Date, Swift enums, etc.). See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;Values&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Values&lt;/h2&gt; 
&lt;p&gt;GRDB ships with built-in support for the following value types:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Swift Standard Library&lt;/strong&gt;: Bool, Double, Float, all signed and unsigned integer types, String, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&quot;&gt;Swift enums&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Foundation&lt;/strong&gt;: &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&quot;&gt;Data&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&quot;&gt;Date&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&quot;&gt;DateComponents&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&quot;&gt;Decimal&lt;/a&gt;, NSNull, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&quot;&gt;NSNumber&lt;/a&gt;, NSString, URL, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&quot;&gt;UUID&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;CoreGraphics&lt;/strong&gt;: CGFloat.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;&lt;/strong&gt;, the type which gives information about the raw value stored in the database.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full-Text Patterns&lt;/strong&gt;: &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&quot;&gt;FTS3Pattern&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&quot;&gt;FTS5Pattern&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Generally speaking, all types that adopt the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt; protocol.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Values can be used as &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;statement arguments&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let url: URL = ...
let verified: Bool = ...
try db.execute(
    sql: &quot;INSERT INTO link (url, verified) VALUES (?, ?)&quot;,
    arguments: [url, verified])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Values can be &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&quot;&gt;extracted from rows&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchCursor(db, sql: &quot;SELECT * FROM link&quot;)
while let row = try rows.next() {
    let url: URL = row[&quot;url&quot;]
    let verified: Bool = row[&quot;verified&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Values can be &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&quot;&gt;directly fetched&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let urls = try URL.fetchAll(db, sql: &quot;SELECT url FROM link&quot;)  // [URL]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use values in &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;Records&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Link: FetchableRecord {
    var url: URL
    var isVerified: Bool
    
    init(row: Row) {
        url = row[&quot;url&quot;]
        isVerified = row[&quot;verified&quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use values in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let url: URL = ...
let link = try Link.filter { $0.url == url }.fetchOne(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Data (and Memory Savings)&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt; suits the BLOB SQLite columns. It can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let rows = try Row.fetchCursor(db, sql: &quot;SELECT data, ...&quot;)
while let row = try rows.next() {
    let data: Data = row[&quot;data&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;At each step of the request iteration, the &lt;code&gt;row[]&lt;/code&gt; subscript creates &lt;em&gt;two copies&lt;/em&gt; of the database bytes: one fetched by SQLite, and another, stored in the Swift Data value.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;You have the opportunity to save memory&lt;/strong&gt; by not copying the data fetched by SQLite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;while let row = try rows.next() {
    try row.withUnsafeData(name: &quot;data&quot;) { (data: Data?) in
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The non-copied data does not live longer than the iteration step: make sure that you do not use it past this point.&lt;/p&gt; 
&lt;h3&gt;Date and DateComponents&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&quot;&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#datecomponents&quot;&gt;&lt;strong&gt;DateComponents&lt;/strong&gt;&lt;/a&gt; can be stored and fetched from the database.&lt;/p&gt; 
&lt;p&gt;Here is how GRDB supports the various &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;date formats&lt;/a&gt; supported by SQLite:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;SQLite format&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Date&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;DateComponents&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD HH:MM&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD HH:MM:SS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD HH:MM:SS.SSS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ² / Write ¹&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS.SSS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ¹ ²&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ²&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;HH:MM&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;HH:MM:SS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;HH:MM:SS.SSS&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ² / Write&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Timestamps since unix epoch&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read ³&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;now&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;¹ Missing components are assumed to be zero. Dates are stored and read in the UTC time zone, unless the format is followed by a timezone indicator ⁽²⁾.&lt;/p&gt; 
&lt;p&gt;² This format may be optionally followed by a timezone indicator of the form &lt;code&gt;[+-]HH:MM&lt;/code&gt; or just &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;³ GRDB 2+ interprets numerical values as timestamps that fuel &lt;code&gt;Date(timeIntervalSince1970:)&lt;/code&gt;. Previous GRDB versions used to interpret numbers as &lt;a href=&quot;https://en.wikipedia.org/wiki/Julian_day&quot;&gt;julian days&lt;/a&gt;. Julian days are still supported, with the &lt;code&gt;Date(julianDay:)&lt;/code&gt; initializer.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date formats is 0000-9999. You will need to pick another date format when your application needs to process years outside of this range. See the following chapters.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Date&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.execute(
    sql: &quot;INSERT INTO player (creationDate, ...) VALUES (?, ...)&quot;,
    arguments: [Date(), ...])

let row = try Row.fetchOne(db, ...)!
let creationDate: Date = row[&quot;creationDate&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Dates are stored using the format &quot;YYYY-MM-DD HH:MM:SS.SSS&quot; in the UTC time zone. It is precise to the millisecond.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this format was chosen because it is the only format that is:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Comparable (&lt;code&gt;ORDER BY date&lt;/code&gt; works)&lt;/li&gt; 
  &lt;li&gt;Comparable with the SQLite keyword CURRENT_TIMESTAMP (&lt;code&gt;WHERE date &amp;gt; CURRENT_TIMESTAMP&lt;/code&gt; works)&lt;/li&gt; 
  &lt;li&gt;Able to feed &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Precise enough&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date format is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Some applications may prefer another date format:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Some may prefer ISO-8601, with a &lt;code&gt;T&lt;/code&gt; separator.&lt;/li&gt; 
 &lt;li&gt;Some may prefer ISO-8601, with a time zone.&lt;/li&gt; 
 &lt;li&gt;Some may need to store years beyond the 0000-9999 range.&lt;/li&gt; 
 &lt;li&gt;Some may need sub-millisecond precision.&lt;/li&gt; 
 &lt;li&gt;Some may need exact &lt;code&gt;Date&lt;/code&gt; roundtrip.&lt;/li&gt; 
 &lt;li&gt;Etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;You should think twice before choosing a different date format:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ISO-8601 is about &lt;em&gt;exchange and communication&lt;/em&gt;, when SQLite is about &lt;em&gt;storage and data manipulation&lt;/em&gt;. Sharing the same representation in your database and in JSON files only provides a superficial convenience, and should be the least of your priorities. Don&#39;t store dates as ISO-8601 without understanding what you lose. For example, ISO-8601 time zones forbid database-level date comparison.&lt;/li&gt; 
 &lt;li&gt;Sub-millisecond precision and exact &lt;code&gt;Date&lt;/code&gt; roundtrip are not as obvious needs as it seems at first sight. Dates generally don&#39;t precisely roundtrip as soon as they leave your application anyway, because the other systems your app communicates with use their own date representation (the Android version of your app, the server your application is talking to, etc.) On top of that, &lt;code&gt;Date&lt;/code&gt; comparison is at least as hard and nasty as &lt;a href=&quot;https://www.google.com/search?q=floating+point+comparison+is+hard&quot;&gt;floating point comparison&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The customization of date format is explicit. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let date = Date()
let timeInterval = date.timeIntervalSinceReferenceDate
try db.execute(
    sql: &quot;INSERT INTO player (creationDate, ...) VALUES (?, ...)&quot;,
    arguments: [timeInterval, ...])

if let row = try Row.fetchOne(db, ...) {
    let timeInterval: TimeInterval = row[&quot;creationDate&quot;]
    let creationDate = Date(timeIntervalSinceReferenceDate: timeInterval)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more date customization options, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt; if you want to define a Date-wrapping type with customized database representation.&lt;/p&gt; 
&lt;h4&gt;DateComponents&lt;/h4&gt; 
&lt;p&gt;DateComponents is indirectly supported, through the &lt;strong&gt;DatabaseDateComponents&lt;/strong&gt; helper type.&lt;/p&gt; 
&lt;p&gt;DatabaseDateComponents reads date components from all &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;date formats supported by SQLite&lt;/a&gt;, and stores them in the format of your choice, from HH:MM to YYYY-MM-DD HH:MM:SS.SSS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&quot;&gt;Date&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;DatabaseDateComponents can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let components = DateComponents()
components.year = 1973
components.month = 9
components.day = 18

// Store &quot;1973-09-18&quot;
let dbComponents = DatabaseDateComponents(components, format: .YMD)
try db.execute(
    sql: &quot;INSERT INTO player (birthDate, ...) VALUES (?, ...)&quot;,
    arguments: [dbComponents, ...])

// Read &quot;1973-09-18&quot;
let row = try Row.fetchOne(db, sql: &quot;SELECT birthDate ...&quot;)!
let dbComponents: DatabaseDateComponents = row[&quot;birthDate&quot;]
dbComponents.format         // .YMD (the actual format found in the database)
dbComponents.dateComponents // DateComponents
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;NSNumber&lt;/strong&gt; and &lt;strong&gt;Decimal&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here is how GRDB supports the various data types supported by SQLite:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Integer&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Double&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;String&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;NSNumber&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;NSDecimalNumber&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Decimal&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Read / Write&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;All three types can decode database integers and doubles:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let number = try NSNumber.fetchOne(db, sql: &quot;SELECT 10&quot;)            // NSNumber
let number = try NSDecimalNumber.fetchOne(db, sql: &quot;SELECT 1.23&quot;)   // NSDecimalNumber
let number = try Decimal.fetchOne(db, sql: &quot;SELECT -100&quot;)           // Decimal
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;All three types decode database strings as decimal numbers:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let number = try NSNumber.fetchOne(db, sql: &quot;SELECT &#39;10&#39;&quot;)          // NSDecimalNumber (sic)
let number = try NSDecimalNumber.fetchOne(db, sql: &quot;SELECT &#39;1.23&#39;&quot;) // NSDecimalNumber
let number = try Decimal.fetchOne(db, sql: &quot;SELECT &#39;-100&#39;&quot;)         // Decimal
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;NSNumber&lt;/code&gt; and &lt;code&gt;NSDecimalNumber&lt;/code&gt; send 64-bit signed integers and doubles in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// INSERT INTO transfer VALUES (10)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [NSNumber(value: 10)])

// INSERT INTO transfer VALUES (10.0)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [NSNumber(value: 10.0)])

// INSERT INTO transfer VALUES (10)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [NSDecimalNumber(string: &quot;10.0&quot;)])

// INSERT INTO transfer VALUES (10.5)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [NSDecimalNumber(string: &quot;10.5&quot;)])
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: since SQLite does not support decimal numbers, sending a non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; can result in a loss of precision during the conversion to double.&lt;/p&gt; 
   &lt;p&gt;Instead of sending non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; to the database, you may prefer:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Send &lt;code&gt;Decimal&lt;/code&gt; instead (those store decimal strings in the database).&lt;/li&gt; 
    &lt;li&gt;Send integers instead (for example, store amounts of cents instead of amounts of Euros).&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Decimal&lt;/code&gt; sends decimal strings in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// INSERT INTO transfer VALUES (&#39;10&#39;)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [Decimal(10)])

// INSERT INTO transfer VALUES (&#39;10.5&#39;)
try db.execute(sql: &quot;INSERT INTO transfer VALUES (?)&quot;, arguments: [Decimal(string: &quot;10.5&quot;)!])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;UUID&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;UUID&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;GRDB stores uuids as 16-bytes data blobs, and decodes them from both 16-bytes data blobs and strings such as &quot;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&quot;.&lt;/p&gt; 
&lt;h3&gt;Swift Enums&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Swift enums&lt;/strong&gt; and generally all types that adopt the &lt;a href=&quot;https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_RawRepresentable_Protocol/index.html&quot;&gt;RawRepresentable&lt;/a&gt; protocol can be stored and fetched from the database just like their raw &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Color : Int {
    case red, white, rose
}

enum Grape : String {
    case chardonnay, merlot, riesling
}

// Declare empty DatabaseValueConvertible adoption
extension Color : DatabaseValueConvertible { }
extension Grape : DatabaseValueConvertible { }

// Store
try db.execute(
    sql: &quot;INSERT INTO wine (grape, color) VALUES (?, ?)&quot;,
    arguments: [Grape.merlot, Color.red])

// Read
let rows = try Row.fetchCursor(db, sql: &quot;SELECT * FROM wine&quot;)
while let row = try rows.next() {
    let grape: Grape = row[&quot;grape&quot;]
    let color: Color = row[&quot;color&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;When a database value does not match any enum case&lt;/strong&gt;, you get a fatal error. This fatal error can be avoided with the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT &#39;syrah&#39;&quot;)!

row[0] as String  // &quot;syrah&quot;
row[0] as Grape?  // fatal error: could not convert &quot;syrah&quot; to Grape.
row[0] as Grape   // fatal error: could not convert &quot;syrah&quot; to Grape.

let dbValue: DatabaseValue = row[0]
if dbValue.isNull {
    // Handle NULL
} else if let grape = Grape.fromDatabaseValue(dbValue) {
    // Handle valid grape
} else {
    // Handle unknown grape
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Custom SQL Functions and Aggregates&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;SQLite lets you define SQL functions and aggregates.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A custom SQL function or aggregate extends SQLite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT reverse(name) FROM player;   -- custom function
SELECT maxLength(name) FROM player; -- custom aggregate
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&quot;&gt;Custom SQL Functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-aggregates&quot;&gt;Custom Aggregates&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Custom SQL Functions&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasefunction&quot;&gt;&lt;code&gt;DatabaseFunction&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A &lt;em&gt;function&lt;/em&gt; argument takes an array of &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;, and returns any valid &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) The number of database values is guaranteed to be &lt;em&gt;argumentCount&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;SQLite has the opportunity to perform additional optimizations when functions are &quot;pure&quot;, which means that their result only depends on their arguments. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let reverse = DatabaseFunction(&quot;reverse&quot;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in
    // Extract string value, if any...
    guard let string = String.fromDatabaseValue(values[0]) else {
        return nil
    }
    // ... and return reversed string:
    return String(string.reversed())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You make a function available to a database connection through its configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    db.add(function: reverse)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)

try dbQueue.read { db in
    // &quot;oof&quot;
    try String.fetchOne(db, sql: &quot;SELECT reverse(&#39;foo&#39;)&quot;)!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Functions can take a variable number of arguments:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;When you don&#39;t provide any explicit &lt;em&gt;argumentCount&lt;/em&gt;, the function can take any number of arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let averageOf = DatabaseFunction(&quot;averageOf&quot;, pure: true) { (values: [DatabaseValue]) in
    let doubles = values.compactMap { Double.fromDatabaseValue($0) }
    return doubles.reduce(0, +) / Double(doubles.count)
}
db.add(function: averageOf)

// 2.0
try Double.fetchOne(db, sql: &quot;SELECT averageOf(1, 2, 3)&quot;)!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Functions can throw:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let sqrt = DatabaseFunction(&quot;sqrt&quot;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in
    guard let double = Double.fromDatabaseValue(values[0]) else {
        return nil
    }
    guard double &amp;gt;= 0 else {
        throw DatabaseError(message: &quot;invalid negative number&quot;)
    }
    return sqrt(double)
}
db.add(function: sqrt)

// SQLite error 1 with statement `SELECT sqrt(-1)`: invalid negative number
try Double.fetchOne(db, sql: &quot;SELECT sqrt(-1)&quot;)!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Use custom functions in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT reverseString(&quot;name&quot;) FROM player
Player.select { reverseString($0.name) }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;GRDB ships with built-in SQL functions that perform unicode-aware string transformations.&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&quot;&gt;Unicode&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Custom Aggregates&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasefunction&quot;&gt;&lt;code&gt;DatabaseFunction&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseaggregate&quot;&gt;&lt;code&gt;DatabaseAggregate&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Before registering a custom aggregate, you need to define a type that adopts the &lt;code&gt;DatabaseAggregate&lt;/code&gt; protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol DatabaseAggregate {
    // Initializes an aggregate
    init()
    
    // Called at each step of the aggregation
    mutating func step(_ dbValues: [DatabaseValue]) throws
    
    // Returns the final result
    func finalize() throws -&amp;gt; DatabaseValueConvertible?
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct MaxLength : DatabaseAggregate {
    var maxLength: Int = 0
    
    mutating func step(_ dbValues: [DatabaseValue]) {
        // At each step, extract string value, if any...
        guard let string = String.fromDatabaseValue(dbValues[0]) else {
            return
        }
        // ... and update the result
        let length = string.count
        if length &amp;gt; maxLength {
            maxLength = length
        }
    }
    
    func finalize() -&amp;gt; DatabaseValueConvertible? {
        maxLength
    }
}

let maxLength = DatabaseFunction(
    &quot;maxLength&quot;,
    argumentCount: 1,
    pure: true,
    aggregate: MaxLength.self)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Like &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&quot;&gt;custom SQL Functions&lt;/a&gt;, you make an aggregate function available to a database connection through its configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    db.add(function: maxLength)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)

try dbQueue.read { db in
    // Some Int
    try Int.fetchOne(db, sql: &quot;SELECT maxLength(name) FROM player&quot;)!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;step&lt;/code&gt; method of the aggregate takes an array of &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt;. This array contains as many values as the &lt;em&gt;argumentCount&lt;/em&gt; parameter (or any number of values, when &lt;em&gt;argumentCount&lt;/em&gt; is omitted).&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;finalize&lt;/code&gt; method of the aggregate returns the final aggregated &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt; 
&lt;p&gt;SQLite has the opportunity to perform additional optimizations when aggregates are &quot;pure&quot;, which means that their result only depends on their inputs. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Use custom aggregates in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT maxLength(&quot;name&quot;) FROM player
let request = Player.select { maxLength($0.name) }
try Int.fetchOne(db, request) // Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Raw SQLite Pointers&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;If not all SQLite APIs are exposed in GRDB, you can still use the &lt;a href=&quot;https://www.sqlite.org/c3ref/intro.html&quot;&gt;SQLite C Interface&lt;/a&gt; and call &lt;a href=&quot;https://www.sqlite.org/c3ref/funclist.html&quot;&gt;SQLite C functions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To access the C SQLite functions from SQLCipher or the system SQLite, you need to perform an extra import:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SQLite3   // System SQLite
import SQLCipher // SQLCipher

let sqliteVersion = String(cString: sqlite3_libversion())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Raw pointers to database connections and statements are available through the &lt;code&gt;Database.sqliteConnection&lt;/code&gt; and &lt;code&gt;Statement.sqliteStatement&lt;/code&gt; properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    // The raw pointer to a database connection:
    let sqliteConnection = db.sqliteConnection

    // The raw pointer to a statement:
    let statement = try db.makeStatement(sql: &quot;SELECT ...&quot;)
    let sqliteStatement = statement.sqliteStatement
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Those pointers are owned by GRDB: don&#39;t close connections or finalize statements created by GRDB.&lt;/li&gt; 
  &lt;li&gt;GRDB opens SQLite connections in the &quot;&lt;a href=&quot;https://www.sqlite.org/threadsafe.html&quot;&gt;multi-thread mode&lt;/a&gt;&quot;, which (oddly) means that &lt;strong&gt;they are not thread-safe&lt;/strong&gt;. Make sure you touch raw databases and statements inside their dedicated dispatch queues.&lt;/li&gt; 
  &lt;li&gt;Use the raw SQLite C Interface at your own risk. GRDB won&#39;t prevent you from shooting yourself in the foot.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Records&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;On top of the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&quot;&gt;SQLite API&lt;/a&gt;, GRDB provides protocols&lt;/strong&gt; that help manipulating database rows as regular objects named &quot;records&quot;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    if var place = try Player.fetchOne(db, id: 1) {
        player.score += 10
        try player.update(db)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, you need to open a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;database connection&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseschema&quot;&gt;create database tables&lt;/a&gt; first.&lt;/p&gt; 
&lt;p&gt;To define a record type, define a type and extend it with database protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;FetchableRecord&lt;/code&gt; makes it possible to fetch instances from the database.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PersistableRecord&lt;/code&gt; makes it possible to save instances into the database.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Codable&lt;/code&gt; (not mandatory) provides ready-made serialization to and from database rows.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Identifiable&lt;/code&gt; (not mandatory) provides extra convenience database methods.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To make it easier to customize database requests, also nest a &lt;code&gt;Columns&lt;/code&gt; enum:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Codable, Identifiable {
    var id: Int64
    var name: String
    var score: Int
    var team: String?
}

// Add database support
extension Player: FetchableRecord, PersistableRecord {
    enum Columns {
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
        static let team = Column(CodingKeys.team)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&quot;&gt;examples of record definitions&lt;/a&gt; below.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: if you are familiar with Core Data&#39;s NSManagedObject or Realm&#39;s Object, you may experience a cultural shock: GRDB records are not uniqued, do not auto-update, and do not lazy-load. This is both a purpose, and a consequence of protocol-oriented programming.&lt;/p&gt; 
 &lt;p&gt;Tip: The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recordrecommendedpractices&quot;&gt;Recommended Practices for Designing Record Types&lt;/a&gt; guide provides general guidance..&lt;/p&gt; 
 &lt;p&gt;Tip: See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&quot;&gt;Demo Applications&lt;/a&gt; for sample apps that uses records.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#inserting-records&quot;&gt;Inserting Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-records&quot;&gt;Fetching Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#updating-records&quot;&gt;Updating Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#deleting-records&quot;&gt;Deleting Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#counting-records&quot;&gt;Counting Records&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Protocols and the Record Class&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord Protocol&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&quot;&gt;Persistence Methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods-and-the-returning-clause&quot;&gt;Persistence Methods and the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;Persistence Callbacks&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&quot;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recordtimestamps&quot;&gt;Record Timestamps and Transaction Date&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Inserting Records&lt;/h3&gt; 
&lt;p&gt;To insert a record in the database, call the &lt;code&gt;insert&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let player = Player(id: 1, name: &quot;Arthur&quot;, score: 1000)
try player.insert(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; &lt;code&gt;insert&lt;/code&gt; is available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Fetching Records&lt;/h3&gt; 
&lt;p&gt;To fetch records from the database, call a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching method&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let arthur = try Player.fetchOne(db,            // Player?
    sql: &quot;SELECT * FROM players WHERE name = ?&quot;,
    arguments: [&quot;Arthur&quot;])

let bestPlayers = try Player                    // [Player]
    .order(\.score.desc)
    .limit(10)
    .fetchAll(db)
    
let spain = try Country.fetchOne(db, id: &quot;ES&quot;)  // Country?
let italy = try Country.find(db, id: &quot;IT&quot;)      // Country
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; Fetching from raw SQL is available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; Fetching without SQL, using the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;, is available for types that adopt both &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Updating Records&lt;/h3&gt; 
&lt;p&gt;To update a record in the database, call the &lt;code&gt;update&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var player: Player = ...
player.score = 1000
try player.update(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;avoid useless updates&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// does not hit the database if score has not changed
try player.updateChanges(db) {
    $0.score = 1000
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt; for batch updates:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player
    .filter { $0.team == &quot;red&quot; }
    .updateAll(db) { $0.score += 1 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; update methods are available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol. Batch updates are available on the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Deleting Records&lt;/h3&gt; 
&lt;p&gt;To delete a record in the database, call the &lt;code&gt;delete&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let player: Player = ...
try player.delete(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also delete by primary key, unique key, or perform batch deletes (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&quot;&gt;Delete Requests&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.deleteOne(db, id: 1)
try Player.deleteOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
try Country.deleteAll(db, ids: [&quot;FR&quot;, &quot;US&quot;])
try Player
    .filter { $0.email == nil }
    .deleteAll(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; delete methods are available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol. Batch deletes are available on the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Counting Records&lt;/h3&gt; 
&lt;p&gt;To count records, call the &lt;code&gt;fetchCount&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let playerCount: Int = try Player.fetchCount(db)

let playerWithEmailCount: Int = try Player
    .filter { $0.email == nil }
    .fetchCount(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; &lt;code&gt;fetchCount&lt;/code&gt; is available for types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;p&gt;Details follow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord Protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&quot;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&quot;&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Record Protocols Overview&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;GRDB ships with three record protocols&lt;/strong&gt;. Your own types will adopt one or several of them, according to the abilities you want to extend your types with.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; is able to &lt;strong&gt;decode database rows&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: FetchableRecord { ... }

let places = try dbQueue.read { db in
    try Place.fetchAll(db, sql: &quot;SELECT * FROM place&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;FetchableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Decodable&lt;/code&gt; protocol. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;p&gt;&lt;code&gt;FetchableRecord&lt;/code&gt; can decode database rows, but it is not able to build SQL requests for you. For that, you also need &lt;code&gt;TableRecord&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; is able to &lt;strong&gt;generate SQL queries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: TableRecord { ... }

let placeCount = try dbQueue.read { db in
    // Generates and runs `SELECT COUNT(*) FROM place`
    try Place.fetchCount(db)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When a type adopts both &lt;code&gt;TableRecord&lt;/code&gt; and &lt;code&gt;FetchableRecord&lt;/code&gt;, it can load from those requests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: TableRecord, FetchableRecord { ... }

try dbQueue.read { db in
    let places = try Place.order(\.title).fetchAll(db)
    let paris = try Place.fetchOne(id: 1)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; is able to &lt;strong&gt;write&lt;/strong&gt;: it can create, update, and delete rows in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place : PersistableRecord { ... }

try dbQueue.write { db in
    try Place.delete(db, id: 1)
    try Place(...).insert(db)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A persistable record can also &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;compare&lt;/a&gt; itself against other records, and avoid useless database updates.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;PersistableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Encodable&lt;/code&gt; protocol. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FetchableRecord Protocol&lt;/h2&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/fetchablerecord&quot;&gt;&lt;code&gt;FetchableRecord&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The FetchableRecord protocol grants fetching methods to any type&lt;/strong&gt; that can be built from a database row:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    /// Row initializer
    init(row: Row) throws
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place {
    var id: Int64?
    var title: String
    var coordinate: CLLocationCoordinate2D
}

extension Place: FetchableRecord {
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let title = Column(&quot;title&quot;)
        static let latitude = Column(&quot;latitude&quot;)
        static let longitude = Column(&quot;longitude&quot;)
    }
    
    init(row: Row) {
        id = row[Columns.id]
        title = row[Columns.title]
        coordinate = CLLocationCoordinate2D(
            latitude: row[Columns.latitude],
            longitude: row[Columns.longitude])
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&quot;&gt;column values&lt;/a&gt; for more information about the &lt;code&gt;row[]&lt;/code&gt; subscript.&lt;/p&gt; 
&lt;p&gt;When your record type adopts the standard Decodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;init(row:)&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// That&#39;s all
struct Player: Decodable, FetchableRecord {
    var id: Int64
    var name: String
    var score: Int
    
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FetchableRecord allows adopting types to be fetched from SQL queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Place.fetchCursor(db, sql: &quot;SELECT ...&quot;, arguments:...) // A Cursor of Place
try Place.fetchAll(db, sql: &quot;SELECT ...&quot;, arguments:...)    // [Place]
try Place.fetchSet(db, sql: &quot;SELECT ...&quot;, arguments:...)    // Set&amp;lt;Place&amp;gt;
try Place.fetchOne(db, sql: &quot;SELECT ...&quot;, arguments:...)    // Place?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods. See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;&lt;code&gt;StatementArguments&lt;/code&gt;&lt;/a&gt; for more information about the query arguments.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: for performance reasons, the same row argument to &lt;code&gt;init(row:)&lt;/code&gt; is reused during the iteration of a fetch query. If you want to keep the row for later use, make sure to store a copy: &lt;code&gt;self.row = row.copy()&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;FetchableRecord.init(row:)&lt;/code&gt; initializer fits the needs of most applications. But some application are more demanding than others. When FetchableRecord does not exactly provide the support you need, have a look at the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&quot;&gt;Beyond FetchableRecord&lt;/a&gt; chapter.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;TableRecord Protocol&lt;/h2&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerecord&quot;&gt;&lt;code&gt;TableRecord&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The TableRecord protocol&lt;/strong&gt; generates SQL for you:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol TableRecord {
    static var databaseTableName: String { get }
    static var databaseSelection: [any SQLSelectable] { get }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;databaseSelection&lt;/code&gt; type property is optional, and documented in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&quot;&gt;Columns Selected by a Request&lt;/a&gt; chapter.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;databaseTableName&lt;/code&gt; type property is the name of a database table. By default, it is derived from the type name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: TableRecord { }

print(Place.databaseTableName) // prints &quot;place&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Place: &lt;code&gt;place&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Country: &lt;code&gt;country&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;PostalAddress: &lt;code&gt;postalAddress&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;HTTPRequest: &lt;code&gt;httpRequest&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;TOEFL: &lt;code&gt;toefl&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can still provide a custom table name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: TableRecord {
    static let databaseTableName = &quot;location&quot;
}

print(Place.databaseTableName) // prints &quot;location&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When a type adopts both TableRecord and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt;, it can be fetched using the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM place WHERE name = &#39;Paris&#39;
let paris = try Place.filter { $0.name == &quot;Paris&quot; }.fetchOne(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;TableRecord can also fetch deal with primary and unique keys: see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&quot;&gt;Fetching by Key&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&quot;&gt;Testing for Record Existence&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;PersistableRecord Protocol&lt;/h2&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/encodablerecord&quot;&gt;&lt;code&gt;EncodableRecord&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/mutablepersistablerecord&quot;&gt;&lt;code&gt;MutablePersistableRecord&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/persistablerecord&quot;&gt;&lt;code&gt;PersistableRecord&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;GRDB record types can create, update, and delete rows in the database.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Those abilities are granted by three protocols:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Defines how a record encodes itself into the database
protocol EncodableRecord {
    /// Defines the values persisted in the database
    func encode(to container: inout PersistenceContainer) throws
}

// Adds persistence methods
protocol MutablePersistableRecord: TableRecord, EncodableRecord {
    /// Optional method that lets your adopting type store its rowID upon
    /// successful insertion. Don&#39;t call it directly: it is called for you.
    mutating func didInsert(_ inserted: InsertionSuccess)
}

// Adds immutability
protocol PersistableRecord: MutablePersistableRecord {
    /// Non-mutating version of the optional didInsert(_:)
    func didInsert(_ inserted: InsertionSuccess)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yes, three protocols instead of one. Here is how you pick one or the other:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a class&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;. On top of that, implement &lt;code&gt;didInsert(_:)&lt;/code&gt; if the database table has an auto-incremented primary key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a struct, and the database table has an auto-incremented primary key&lt;/strong&gt;, choose &lt;code&gt;MutablePersistableRecord&lt;/code&gt;, and implement &lt;code&gt;didInsert(_:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;, and ignore &lt;code&gt;didInsert(_:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;encode(to:)&lt;/code&gt; method defines which &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) are assigned to database columns.&lt;/p&gt; 
&lt;p&gt;The optional &lt;code&gt;didInsert&lt;/code&gt; method lets the adopting type store its rowID after successful insertion, and is only useful for tables that have an auto-incremented primary key. It is called from a protected dispatch queue, and serialized with all database updates.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Place: MutablePersistableRecord {
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let title = Column(&quot;title&quot;)
        static let latitude = Column(&quot;latitude&quot;)
        static let longitude = Column(&quot;longitude&quot;)
    }
    
    /// The values persisted in the database
    func encode(to container: inout PersistenceContainer) {
        container[Columns.id] = id
        container[Columns.title] = title
        container[Columns.latitude] = coordinate.latitude
        container[Columns.longitude] = coordinate.longitude
    }
    
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}

var paris = Place(
    id: nil,
    title: &quot;Paris&quot;,
    coordinate: CLLocationCoordinate2D(latitude: 48.8534100, longitude: 2.3488000))

try paris.insert(db)
paris.id   // some value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When your record type adopts the standard Encodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;encode(to:)&lt;/code&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// That&#39;s all
struct Player: Encodable, MutablePersistableRecord {
    var id: Int64?
    var name: String
    var score: Int
    
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
    
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Persistence Methods&lt;/h3&gt; 
&lt;p&gt;Types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol are given methods that insert, update, and delete:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// INSERT
try place.insert(db)
let insertedPlace = try place.inserted(db) // non-mutating

// UPDATE
try place.update(db)
try place.update(db, columns: [&quot;title&quot;])

// Maybe UPDATE
try place.updateChanges(db, from: otherPlace)
try place.updateChanges(db) { $0.isFavorite = true }

// INSERT or UPDATE
try place.save(db)
let savedPlace = place.saved(db) // non-mutating

// UPSERT
try place.upsert(db)
let insertedPlace = place.upsertAndFetch(db)

// DELETE
try place.delete(db)

// EXISTENCE CHECK
let exists = try place.exists(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#upsert&quot;&gt;Upsert&lt;/a&gt; below for more information about upserts.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol comes with batch operations&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE
try Place.updateAll(db, ...)

// DELETE
try Place.deleteAll(db)
try Place.deleteAll(db, ids:...)
try Place.deleteAll(db, keys:...)
try Place.deleteOne(db, id:...)
try Place.deleteOne(db, key:...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information about batch updates, see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#update-requests&quot;&gt;Update Requests&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;All persistence methods can throw a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&quot;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;update&lt;/code&gt; and &lt;code&gt;updateChanges&lt;/code&gt; throw &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&quot;&gt;RecordError&lt;/a&gt; if the database does not contain any row for the primary key of the record.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;save&lt;/code&gt; makes sure your values are stored in the database. It performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly performs an INSERT if the record has no primary key, or a null primary key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;deleteOne&lt;/code&gt; returns whether a database row was deleted or not. &lt;code&gt;deleteAll&lt;/code&gt; returns the number of deleted rows. &lt;code&gt;updateAll&lt;/code&gt; returns the number of updated rows. &lt;code&gt;updateChanges&lt;/code&gt; returns whether a database row was updated or not.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;All primary keys are supported&lt;/strong&gt;, including composite primary keys that span several columns, and the &lt;a href=&quot;https://www.sqlite.org/rowidtable.html&quot;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To customize persistence methods&lt;/strong&gt;, you provide &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;Persistence Callbacks&lt;/a&gt;, described below. Do not attempt at overriding the ready-made persistence methods.&lt;/p&gt; 
&lt;h3&gt;Upsert&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.sqlite.org/lang_UPSERT.html&quot;&gt;UPSERT&lt;/a&gt; is an SQLite feature that causes an INSERT to behave as an UPDATE or a no-op if the INSERT would violate a uniqueness constraint (primary key or unique index).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Upsert apis are available from SQLite 3.35.0+: iOS 15.0+, macOS 12.0+, tvOS 15.0+, watchOS 8.0+, or with a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&quot;&gt;custom SQLite build&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&quot;&gt;SQLCipher&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: With regard to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#available-callbacks&quot;&gt;persistence callbacks&lt;/a&gt;, an upsert behaves exactly like an insert. In particular: the &lt;code&gt;aroundInsert(_:)&lt;/code&gt; and &lt;code&gt;didInsert(_:)&lt;/code&gt; callbacks reports the rowid of the inserted or updated row; &lt;code&gt;willUpdate&lt;/code&gt;, &lt;code&gt;aroundUpdate&lt;/code&gt;, &lt;code&gt;didUpdate&lt;/code&gt; are not called.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; provides three upsert methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;upsert(_:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Inserts or updates a record.&lt;/p&gt; &lt;p&gt;The upsert behavior is triggered by a violation of any uniqueness constraint on the table (primary key or unique index). In case of conflict, all columns but the primary key are overwritten with the inserted values:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Encodable, PersistableRecord {
    var id: Int64
    var name: String
    var score: Int
}

// INSERT INTO player (id, name, score)
// VALUES (1, &#39;Arthur&#39;, 1000)
// ON CONFLICT DO UPDATE SET
//   name = excluded.name,
//   score = excluded.score
let player = Player(id: 1, name: &quot;Arthur&quot;, score: 1000)
try player.upsert(db)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;upsertAndFetch(_:onConflict:doUpdate:)&lt;/code&gt; (requires &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; conformance)&lt;/p&gt; &lt;p&gt;Inserts or updates a record, and returns the upserted record.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;onConflict&lt;/code&gt; and &lt;code&gt;doUpdate&lt;/code&gt; arguments let you further control the upsert behavior. Make sure you check the &lt;a href=&quot;https://www.sqlite.org/lang_UPSERT.html&quot;&gt;SQLite UPSERT documentation&lt;/a&gt; for detailed information.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;onConflict&lt;/code&gt;: the &quot;conflict target&quot; is the array of columns in the uniqueness constraint (primary key or unique index) that triggers the upsert.&lt;/p&gt; &lt;p&gt;If empty (the default), all uniqueness constraint are considered.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;doUpdate&lt;/code&gt;: a closure that returns columns assignments to perform in case of conflict. Other columns are overwritten with the inserted values.&lt;/p&gt; &lt;p&gt;By default, all inserted columns but the primary key and the conflict target are overwritten.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In the example below, we upsert the new vocabulary word &quot;jovial&quot;. It is inserted if that word is not already in the dictionary. Otherwise, &lt;code&gt;count&lt;/code&gt; is incremented, &lt;code&gt;isTainted&lt;/code&gt; is not overwritten, and &lt;code&gt;kind&lt;/code&gt; is overwritten:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// CREATE TABLE vocabulary(
//   word TEXT NOT NULL PRIMARY KEY,
//   kind TEXT NOT NULL,
//   isTainted BOOLEAN DEFAULT 0,
//   count INT DEFAULT 1))
struct Vocabulary: Encodable, PersistableRecord {
    var word: String
    var kind: String
    var isTainted: Bool
}

// INSERT INTO vocabulary(word, kind, isTainted)
// VALUES(&#39;jovial&#39;, &#39;adjective&#39;, 0)
// ON CONFLICT(word) DO UPDATE SET \
//   count = count + 1,   -- on conflict, count is incremented
//   kind = excluded.kind -- on conflict, kind is overwritten
// RETURNING *
let vocabulary = Vocabulary(word: &quot;jovial&quot;, kind: &quot;adjective&quot;, isTainted: false)
let upserted = try vocabulary.upsertAndFetch(
    db, onConflict: [&quot;word&quot;],
    doUpdate: { _ in
        [Column(&quot;count&quot;) += 1,            // on conflict, count is incremented
         Column(&quot;isTainted&quot;).noOverwrite] // on conflict, isTainted is NOT overwritten
    })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;doUpdate&lt;/code&gt; closure accepts an &lt;code&gt;excluded&lt;/code&gt; TableAlias argument that refers to the inserted values that trigger the conflict. You can use it to specify an explicit overwrite, or to perform a computation. In the next example, the upsert keeps the maximum date in case of conflict:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// INSERT INTO message(id, text, date)
// VALUES(...)
// ON CONFLICT DO UPDATE SET \
//   text = excluded.text,
//   date = MAX(date, excluded.date)
// RETURNING *
let upserted = try message.upsertAndFetch(doUpdate: { excluded in
    // keep the maximum date in case of conflict
    [Column(&quot;date&quot;).set(to: max(Column(&quot;date&quot;), excluded[&quot;date&quot;]))]
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;upsertAndFetch(_:as:onConflict:doUpdate:)&lt;/code&gt; (does not require &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; conformance)&lt;/p&gt; &lt;p&gt;This method is identical to &lt;code&gt;upsertAndFetch(_:onConflict:doUpdate:)&lt;/code&gt; described above, but you can provide a distinct &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; record type as a result, in order to specify the returned columns.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Persistence Methods and the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/h3&gt; 
&lt;p&gt;SQLite is able to return values from a inserted, updated, or deleted row, with the &lt;a href=&quot;https://www.sqlite.org/lang_returning.html&quot;&gt;&lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Support for the &lt;code&gt;RETURNING&lt;/code&gt; clause is available from SQLite 3.35.0+: iOS 15.0+, macOS 12.0+, tvOS 15.0+, watchOS 8.0+, or with a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&quot;&gt;custom SQLite build&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&quot;&gt;SQLCipher&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The &lt;code&gt;RETURNING&lt;/code&gt; clause helps dealing with database features such as auto-incremented ids, default values, and &lt;a href=&quot;https://sqlite.org/gencol.html&quot;&gt;generated columns&lt;/a&gt;. You can, for example, insert a few columns and fetch the default or generated ones in one step.&lt;/p&gt; 
&lt;p&gt;GRDB uses the &lt;code&gt;RETURNING&lt;/code&gt; clause in all persistence methods that contain &lt;code&gt;AndFetch&lt;/code&gt; in their name.&lt;/p&gt; 
&lt;p&gt;For example, given a database table with an auto-incremented primary key and a default score:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.execute(sql: &quot;&quot;&quot;
        CREATE TABLE player(
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          score INTEGER NOT NULL DEFAULT 1000)
        &quot;&quot;&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can define a record type with full database information, and another partial record type that deals with a subset of columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// A player with full database information
struct Player: Codable, PersistableRecord, FetchableRecord {
    var id: Int64
    var name: String
    var score: Int
    
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}

// A partial player
struct PartialPlayer: Encodable, PersistableRecord {
    static let databaseTableName = &quot;player&quot;
    var name: String
    
    typealias Columns = Player.Columns
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now you can get a full player by inserting a partial one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    let partialPlayer = PartialPlayer(name: &quot;Alice&quot;)
    
    // INSERT INTO player (name) VALUES (&#39;Alice&#39;) RETURNING *
    let player = try partialPlayer.insertAndFetch(db, as: Player.self)
    print(player.id)    // The inserted id
    print(player.name)  // The inserted name
    print(player.score) // The default score
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For extra precision, you can select only the columns you need, and fetch the desired value from the provided prepared &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    let partialPlayer = PartialPlayer(name: &quot;Alice&quot;)
    
    // INSERT INTO player (name) VALUES (&#39;Alice&#39;) RETURNING score
    let score = try partialPlayer.insertAndFetch(db) { statement in
        try Int.fetchOne(statement)
    } select: {
        [$0.score]
    }
    print(score) // Prints 1000, the default score
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are other similar persistence methods, such as &lt;code&gt;upsertAndFetch&lt;/code&gt;, &lt;code&gt;saveAndFetch&lt;/code&gt;, &lt;code&gt;updateAndFetch&lt;/code&gt;, &lt;code&gt;updateChangesAndFetch&lt;/code&gt;, etc. They all behave like &lt;code&gt;upsert&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;updateChanges&lt;/code&gt;, except that they return saved values. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Save and return the saved player
let savedPlayer = try player.saveAndFetch(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&quot;&gt;Persistence Methods&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#upsert&quot;&gt;Upsert&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-updatechanges-methods&quot;&gt;&lt;code&gt;updateChanges&lt;/code&gt; methods&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Batch operations&lt;/strong&gt; can return updated or deleted values:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Make sure you check the &lt;a href=&quot;https://www.sqlite.org/lang_returning.html#limitations_and_caveats&quot;&gt;documentation of the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;, which describes important limitations and caveats for batch operations.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.filter(...)...

// Fetch all deleted players
// DELETE FROM player RETURNING *
let deletedPlayers = try request.deleteAndFetchAll(db) // [Player]

// Fetch a selection of columns from the deleted rows
// DELETE FROM player RETURNING name
let statement = try request.deleteAndFetchStatement(db) { [$0.name] }
let deletedNames = try String.fetchSet(statement)

// Fetch all updated players
// UPDATE player SET score = score + 10 RETURNING *
let updatedPlayers = try request.updateAndFetchAll(db) { [$0.score += 10] } // [Player]

// Fetch a selection of columns from the updated rows
// UPDATE player SET score = score + 10 RETURNING score
let statement = try request.updateAndFetchStatement(db) {
    [$0.score += 10]
} select: {
    [$0.score]
}
let updatedScores = try Int.fetchAll(statement)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Persistence Callbacks&lt;/h3&gt; 
&lt;p&gt;Your custom type may want to perform extra work when the persistence methods are invoked.&lt;/p&gt; 
&lt;p&gt;To this end, your record type can implement &lt;strong&gt;persistence callbacks&lt;/strong&gt;. Callbacks are methods that get called at certain moments of a record&#39;s life cycle. With callbacks it is possible to write code that will run whenever an record is inserted, updated, or deleted.&lt;/p&gt; 
&lt;p&gt;In order to use a callback method, you need to provide its implementation. For example, a frequently used callback is &lt;code&gt;didInsert&lt;/code&gt;, in the case of auto-incremented database ids:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: MutablePersistableRecord {
    var id: Int64?
    
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}

try dbQueue.write { db in
    var player = Player(id: nil, ...)
    try player.insert(db)
    print(player.id) // didInsert was called: prints some non-nil id
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Callbacks can also help implementing record validation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Link: PersistableRecord {
    var url: URL
    
    func willSave(_ db: Database) throws {
        if url.host == nil {
            throw ValidationError(&quot;url must be absolute.&quot;)
        }
    }
}

try link.insert(db) // Calls the willSave callback
try link.update(db) // Calls the willSave callback
try link.save(db)   // Calls the willSave callback
try link.upsert(db) // Calls the willSave callback
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available Callbacks&lt;/h4&gt; 
&lt;p&gt;Here is a list with all the available &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;persistence callbacks&lt;/a&gt;, listed in the same order in which they will get called during the respective operations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Inserting a record (all &lt;code&gt;record.insert&lt;/code&gt; and &lt;code&gt;record.upsert&lt;/code&gt; methods)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;willSave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundSave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;willInsert&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundInsert&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didInsert&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didSave&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Updating a record (all &lt;code&gt;record.update&lt;/code&gt; methods)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;willSave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundSave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;willUpdate&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundUpdate&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didUpdate&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didSave&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Deleting a record (only the &lt;code&gt;record.delete(_:)&lt;/code&gt; method)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;willDelete&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;aroundDelete&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;didDelete&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For detailed information about each callback, check the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/mutablepersistablerecord/&quot;&gt;reference&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In the &lt;code&gt;MutablePersistableRecord&lt;/code&gt; protocol, &lt;code&gt;willInsert&lt;/code&gt; and &lt;code&gt;didInsert&lt;/code&gt; are mutating methods. In &lt;code&gt;PersistableRecord&lt;/code&gt;, they are not mutating.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;record.save(_:)&lt;/code&gt; method performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly performs an INSERT if the record has no primary key, or a null primary key. It triggers update and/or insert callbacks accordingly.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Callbacks are only invoked from persistence methods called on record instances. Callbacks are not invoked when you call a type method, perform a batch operations, or execute raw SQL.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: When a &lt;code&gt;did***&lt;/code&gt; callback is invoked, do not assume that the change is actually persisted on disk, because the database may still be inside an uncommitted transaction. When you need to handle transaction completions, use the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&quot;&gt;afterNextTransaction(onCommit:onRollback:)&lt;/a&gt;. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct PictureFile: PersistableRecord {
    var path: String
    
    func willDelete(_ db: Database) {
        db.afterNextTransaction { _ in
            try? deleteFileOnDisk()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Identifiable Records&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;When a record type maps a table with a single-column primary key, it is recommended to have it adopt the standard &lt;a href=&quot;https://developer.apple.com/documentation/swift/identifiable&quot;&gt;Identifiable&lt;/a&gt; protocol.&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Identifiable, FetchableRecord, PersistableRecord {
    var id: Int64 // fulfills the Identifiable requirement
    var name: String
    var score: Int
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;code&gt;id&lt;/code&gt; has a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;database-compatible type&lt;/a&gt; (Int64, Int, String, UUID, ...), the &lt;code&gt;Identifiable&lt;/code&gt; conformance unlocks type-safe record and request methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let player = try Player.find(db, id: 1)               // Player
let player = try Player.fetchOne(db, id: 1)           // Player?
let players = try Player.fetchAll(db, ids: [1, 2, 3]) // [Player]
let players = try Player.fetchSet(db, ids: [1, 2, 3]) // Set&amp;lt;Player&amp;gt;

let request = Player.filter(id: 1)
let request = Player.filter(ids: [1, 2, 3])

try Player.deleteOne(db, id: 1)
try Player.deleteAll(db, ids: [1, 2, 3])
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Not all record types can be made &lt;code&gt;Identifiable&lt;/code&gt;, and not all tables have a single-column primary key. GRDB provides other methods that deal with primary and unique keys, but they won&#39;t check the type of their arguments:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Available on non-Identifiable types
try Player.fetchOne(db, key: 1)
try Player.fetchOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
try Country.fetchAll(db, keys: [&quot;FR&quot;, &quot;US&quot;])
try Citizenship.fetchOne(db, key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])

let request = Player.filter(key: 1)
let request = Player.filter(keys: [1, 2, 3])

try Player.deleteOne(db, key: 1)
try Player.deleteAll(db, keys: [1, 2, 3])
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It is not recommended to use &lt;code&gt;Identifiable&lt;/code&gt; on record types that use an auto-incremented primary key:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// AVOID declaring Identifiable conformance when key is auto-incremented
struct Player {
    var id: Int64? // Not an id suitable for Identifiable
    var name: String
    var score: Int
}

extension Player: FetchableRecord, MutablePersistableRecord {
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For a detailed rationale, please see &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/1435#issuecomment-1740857712&quot;&gt;issue #1435&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Some database tables have a single-column primary key which is not called &quot;id&quot;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.create(table: &quot;country&quot;) { t in
    t.primaryKey(&quot;isoCode&quot;, .text)
    t.column(&quot;name&quot;, .text).notNull()
    t.column(&quot;population&quot;, .integer).notNull()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case, &lt;code&gt;Identifiable&lt;/code&gt; conformance can be achieved, for example, by returning the primary key column from the &lt;code&gt;id&lt;/code&gt; property:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Country: Identifiable, FetchableRecord, PersistableRecord {
    var isoCode: String
    var name: String
    var population: Int
    
    // Fulfill the Identifiable requirement
    var id: String { isoCode }
}

let france = try dbQueue.read { db in
    try Country.fetchOne(db, id: &quot;FR&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Codable Records&lt;/h2&gt; 
&lt;p&gt;Record types that adopt an archival protocol (&lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&quot;&gt;Codable, Encodable or Decodable&lt;/a&gt;) get free database support just by declaring conformance to the desired &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;record protocols&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Declare a record...
struct Player: Codable, FetchableRecord, PersistableRecord {
    var id: Int64
    var name: String
    var score: Int
    
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}

// ...and there you go:
try dbQueue.write { db in
    try Player(id: 1, name: &quot;Arthur&quot;, score: 100).insert(db)
    let players = try Player.order(\.score.desc).fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Codable records encode and decode their properties according to their own implementation of the Encodable and Decodable protocols. Yet databases have specific requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Properties are always coded according to their preferred database representation, when they have one (all &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;values&lt;/a&gt; that adopt the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt; protocol).&lt;/li&gt; 
 &lt;li&gt;You can customize the encoding and decoding of dates and uuids.&lt;/li&gt; 
 &lt;li&gt;Complex properties (arrays, dictionaries, nested structs, etc.) are stored as JSON.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about Codable records, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&quot;&gt;JSON Columns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&quot;&gt;Column Names Coding Strategies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-date-and-uuid-coding-strategies&quot;&gt;Data, Date, and UUID Coding Strategies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&quot;&gt;The userInfo Dictionary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tip-derive-columns-from-coding-keys&quot;&gt;Tip: Derive Columns from Coding Keys&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&quot;&gt;Demo Applications&lt;/a&gt; for sample code that uses Codable records.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;JSON Columns&lt;/h3&gt; 
&lt;p&gt;When a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable record&lt;/a&gt; contains a property that is not a simple &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.), that value is encoded and decoded as a &lt;strong&gt;JSON string&lt;/strong&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum AchievementColor: String, Codable {
    case bronze, silver, gold
}

struct Achievement: Codable {
    var name: String
    var color: AchievementColor
}

struct Player: Codable, FetchableRecord, PersistableRecord {
    var name: String
    var score: Int
    var achievements: [Achievement] // stored in a JSON column
}

try dbQueue.write { db in
    // INSERT INTO player (name, score, achievements)
    // VALUES (
    //   &#39;Arthur&#39;,
    //   100,
    //   &#39;[{&quot;color&quot;:&quot;gold&quot;,&quot;name&quot;:&quot;Use Codable Records&quot;}]&#39;)
    let achievement = Achievement(name: &quot;Use Codable Records&quot;, color: .gold)
    let player = Player(name: &quot;Arthur&quot;, score: 100, achievements: [achievement])
    try player.insert(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GRDB uses the standard &lt;a href=&quot;https://developer.apple.com/documentation/foundation/jsondecoder&quot;&gt;JSONDecoder&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/documentation/foundation/jsonencoder&quot;&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt; 
&lt;p&gt;You can customize the JSON format by implementing those methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    static func databaseJSONDecoder(for column: String) -&amp;gt; JSONDecoder
}

protocol EncodableRecord {
    static func databaseJSONEncoder(for column: String) -&amp;gt; JSONEncoder
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Make sure you set the JSONEncoder &lt;code&gt;sortedKeys&lt;/code&gt; option. This option makes sure that the JSON output is stable. This stability is required for &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;Record Comparison&lt;/a&gt; to work as expected, and database observation tools such as &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/valueobservation&quot;&gt;ValueObservation&lt;/a&gt; to accurately recognize changed records.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Column Names Coding Strategies&lt;/h3&gt; 
&lt;p&gt;By default, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; store their values into database columns that match their coding keys: the &lt;code&gt;teamID&lt;/code&gt; property is stored into the &lt;code&gt;teamID&lt;/code&gt; column.&lt;/p&gt; 
&lt;p&gt;This behavior can be overridden, so that you can, for example, store the &lt;code&gt;teamID&lt;/code&gt; property into the &lt;code&gt;team_id&lt;/code&gt; column:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy { get }
}

protocol EncodableRecord {
    static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy { get }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasecolumndecodingstrategy&quot;&gt;DatabaseColumnDecodingStrategy&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasecolumnencodingstrategy/&quot;&gt;DatabaseColumnEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; 
&lt;h3&gt;Data, Date, and UUID Coding Strategies&lt;/h3&gt; 
&lt;p&gt;By default, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; encode and decode their Data properties as blobs, and Date and UUID properties as described in the general &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&quot;&gt;Date and DateComponents&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&quot;&gt;UUID&lt;/a&gt; chapters.&lt;/p&gt; 
&lt;p&gt;To sum up: dates encode themselves in the &quot;YYYY-MM-DD HH:MM:SS.SSS&quot; format, in the UTC time zone, and decode a variety of date formats and timestamps. UUIDs encode themselves as 16-bytes data blobs, and decode both 16-bytes data blobs and strings such as &quot;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&quot;.&lt;/p&gt; 
&lt;p&gt;Those behaviors can be overridden:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    static func databaseDataDecodingStrategy(for column: String) -&amp;gt; DatabaseDataDecodingStrategy
    static func databaseDateDecodingStrategy(for column: String) -&amp;gt; DatabaseDateDecodingStrategy
}

protocol EncodableRecord {
    static func databaseDataEncodingStrategy(for column: String) -&amp;gt; DatabaseDataEncodingStrategy
    static func databaseDateEncodingStrategy(for column: String) -&amp;gt; DatabaseDateEncodingStrategy
    static func databaseUUIDEncodingStrategy(for column: String) -&amp;gt; DatabaseUUIDEncodingStrategy
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasedatadecodingstrategy/&quot;&gt;DatabaseDataDecodingStrategy&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasedatedecodingstrategy/&quot;&gt;DatabaseDateDecodingStrategy&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasedataencodingstrategy/&quot;&gt;DatabaseDataEncodingStrategy&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasedateencodingstrategy/&quot;&gt;DatabaseDateEncodingStrategy&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseuuidencodingstrategy/&quot;&gt;DatabaseUUIDEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; 
&lt;p&gt;There is no customization of uuid decoding, because UUID can already decode all its encoded variants (16-bytes blobs and uuid strings, both uppercase and lowercase).&lt;/p&gt; 
&lt;p&gt;Customized coding strategies apply:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When encoding and decoding database rows to and from records (fetching and persistence methods).&lt;/li&gt; 
 &lt;li&gt;In requests by single-column primary key: &lt;code&gt;fetchOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;filter(id:)&lt;/code&gt;, &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt;, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;They do not apply&lt;/em&gt; in other requests based on data, date, or uuid values.&lt;/p&gt; 
&lt;p&gt;So make sure that those are properly encoded in your requests. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Codable, FetchableRecord, PersistableRecord, Identifiable {
    // UUIDs are stored as strings
    static func databaseUUIDEncodingStrategy(for column: String) -&amp;gt; DatabaseUUIDEncodingStrategy {
        .uppercaseString
    }
    
    var id: UUID
    ...
}

try dbQueue.write { db in
    let uuid = UUID()
    let player = Player(id: uuid, ...)
    
    // OK: inserts a player in the database, with a string uuid
    try player.insert(db)
    
    // OK: performs a string-based query, finds the inserted player
    _ = try Player.filter(id: uuid).fetchOne(db)

    // NOT OK: performs a blob-based query, fails to find the inserted player
    _ = try Player.filter { $0.id == uuid }.fetchOne(db)
    
    // OK: performs a string-based query, finds the inserted player
    _ = try Player.filter { $0.id == uuid.uuidString }.fetchOne(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The userInfo Dictionary&lt;/h3&gt; 
&lt;p&gt;Your &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; can be stored in the database, but they may also have other purposes. In this case, you may need to customize their implementations of &lt;code&gt;Decodable.init(from:)&lt;/code&gt; and &lt;code&gt;Encodable.encode(to:)&lt;/code&gt;, depending on the context.&lt;/p&gt; 
&lt;p&gt;The standard way to provide such context is the &lt;code&gt;userInfo&lt;/code&gt; dictionary. Implement those properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol FetchableRecord {
    static var databaseDecodingUserInfo: [CodingUserInfoKey: Any] { get }
}

protocol EncodableRecord {
    static var databaseEncodingUserInfo: [CodingUserInfoKey: Any] { get }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, here is a Player type that customizes its decoding:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// A key that holds a decoder&#39;s name
let decoderName = CodingUserInfoKey(rawValue: &quot;decoderName&quot;)!

struct Player: FetchableRecord, Decodable {
    init(from decoder: Decoder) throws {
        // Print the decoder name
        let decoderName = decoder.userInfo[decoderName] as? String
        print(&quot;Decoded from \(decoderName ?? &quot;unknown decoder&quot;)&quot;)
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can have a specific decoding from JSON...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// prints &quot;Decoded from JSON&quot;
let decoder = JSONDecoder()
decoder.userInfo = [decoderName: &quot;JSON&quot;]
let player = try decoder.decode(Player.self, from: jsonData)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... and another one from database rows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player: FetchableRecord {
    static var databaseDecodingUserInfo: [CodingUserInfoKey: Any] {
        [decoderName: &quot;database row&quot;]
    }
}

// prints &quot;Decoded from database row&quot;
let player = try Player.fetchOne(db, ...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseDecodingUserInfo&lt;/code&gt; and &lt;code&gt;databaseEncodingUserInfo&lt;/code&gt; properties are explicitly declared as &lt;code&gt;[CodingUserInfoKey: Any]&lt;/code&gt;. If they are not, the Swift compiler may silently miss the protocol requirement, resulting in sticky empty userInfo.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Tip: Derive Columns from Coding Keys&lt;/h3&gt; 
&lt;p&gt;Codable types are granted with a &lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&quot;&gt;CodingKeys&lt;/a&gt; enum. You can use them to safely define database columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: Codable {
    var id: Int64
    var name: String
    var score: Int
}

extension Player: FetchableRecord, PersistableRecord {
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
        static let score = Column(CodingKeys.score)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recordrecommendedpractices&quot;&gt;Recommended Practices for Designing Record Types&lt;/a&gt; for further information.&lt;/p&gt; 
&lt;h2&gt;Record Comparison&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Records that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;EncodableRecord&lt;/a&gt; protocol can compare against other records, or against previous versions of themselves.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This helps avoiding costly UPDATE statements when a record has not been edited.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-updatechanges-methods&quot;&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseequals-method&quot;&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databasechanges-and-hasdatabasechanges-methods&quot;&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;updateChanges&lt;/code&gt; methods perform a database update of the changed columns only (and does nothing if record has no change).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:from:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you compare two records:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if let oldPlayer = try Player.fetchOne(db, id: 42) {
    var newPlayer = oldPlayer
    newPlayer.score = 100
    if try newPlayer.updateChanges(db, from: oldPlayer) {
        print(&quot;player was modified, and updated in the database&quot;)
    } else {
        print(&quot;player was not modified, and database was not hit&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:modify:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you update a record in place:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;if var player = try Player.fetchOne(db, id: 42) {
    let modified = try player.updateChanges(db) {
        $0.score = 100
    }
    if modified {
        print(&quot;player was modified, and updated in the database&quot;)
    } else {
        print(&quot;player was not modified, and database was not hit&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/h3&gt; 
&lt;p&gt;This method returns whether two records have the same database representation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let oldPlayer: Player = ...
var newPlayer: Player = ...
if newPlayer.databaseEquals(oldPlayer) == false {
    try newPlayer.save(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The comparison is performed on the database representation of records. As long as your record type adopts the EncodableRecord protocol, you don&#39;t need to care about Equatable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;databaseChanges(from:)&lt;/code&gt; returns a dictionary of differences between two records:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let oldPlayer = Player(id: 1, name: &quot;Arthur&quot;, score: 100)
let newPlayer = Player(id: 1, name: &quot;Arthur&quot;, score: 1000)
for (column, oldValue) in try newPlayer.databaseChanges(from: oldPlayer) {
    print(&quot;\(column) was \(oldValue)&quot;)
}
// prints &quot;score was 100&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For an efficient algorithm which synchronizes the content of a database table with a JSON payload, check &lt;a href=&quot;https://github.com/groue/SortedDifference&quot;&gt;groue/SortedDifference&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Record Customization Options&lt;/h2&gt; 
&lt;p&gt;GRDB records come with many default behaviors, that are designed to fit most situations. Many of those defaults can be customized for your specific needs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;Persistence Callbacks&lt;/a&gt;: define what happens when you call a persistence method such as &lt;code&gt;player.insert(db)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&quot;&gt;Conflict Resolution&lt;/a&gt;: Run &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; queries, and generally define what happens when a persistence method violates a unique index.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&quot;&gt;Columns Selected by a Request&lt;/a&gt;: define which columns are selected by requests such as &lt;code&gt;Player.fetchAll(db)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&quot;&gt;Beyond FetchableRecord&lt;/a&gt;: the FetchableRecord protocol is not the end of the story.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; have a few extra options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&quot;&gt;JSON Columns&lt;/a&gt;: control the format of JSON columns.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&quot;&gt;Column Names Coding Strategies&lt;/a&gt;: control how coding keys are turned into column names&lt;/li&gt; 
 &lt;li&gt;[Date and UUID Coding Strategies]: control the format of Date and UUID properties in your Codable records.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&quot;&gt;The userInfo Dictionary&lt;/a&gt;: adapt your Codable implementation for the database.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Conflict Resolution&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Insertions and updates can create conflicts&lt;/strong&gt;: for example, a query may attempt to insert a duplicate row that violates a unique index.&lt;/p&gt; 
&lt;p&gt;Those conflicts normally end with an error. Yet SQLite let you alter the default behavior, and handle conflicts with specific policies. For example, the &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; statement handles conflicts with the &quot;replace&quot; policy which replaces the conflicting row instead of throwing an error.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://www.sqlite.org/lang_conflict.html&quot;&gt;five different policies&lt;/a&gt; are: abort (the default), replace, rollback, fail, and ignore.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SQLite let you specify conflict policies at two different places:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;In the definition of the database table:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// CREATE TABLE player (
//     id INTEGER PRIMARY KEY AUTOINCREMENT,
//     email TEXT UNIQUE ON CONFLICT REPLACE
// )
try db.create(table: &quot;player&quot;) { t in
    t.autoIncrementedPrimaryKey(&quot;id&quot;)
    t.column(&quot;email&quot;, .text).unique(onConflict: .replace) // &amp;lt;--
}

// Despite the unique index on email, both inserts succeed.
// The second insert replaces the first row:
try db.execute(sql: &quot;INSERT INTO player (email) VALUES (?)&quot;, arguments: [&quot;arthur@example.com&quot;])
try db.execute(sql: &quot;INSERT INTO player (email) VALUES (?)&quot;, arguments: [&quot;arthur@example.com&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In each modification query:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// CREATE TABLE player (
//     id INTEGER PRIMARY KEY AUTOINCREMENT,
//     email TEXT UNIQUE
// )
try db.create(table: &quot;player&quot;) { t in
    t.autoIncrementedPrimaryKey(&quot;id&quot;)
    t.column(&quot;email&quot;, .text).unique()
}

// Again, despite the unique index on email, both inserts succeed.
try db.execute(sql: &quot;INSERT OR REPLACE INTO player (email) VALUES (?)&quot;, arguments: [&quot;arthur@example.com&quot;])
try db.execute(sql: &quot;INSERT OR REPLACE INTO player (email) VALUES (?)&quot;, arguments: [&quot;arthur@example.com&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When you want to handle conflicts at the query level, specify a custom &lt;code&gt;persistenceConflictPolicy&lt;/code&gt; in your type that adopts the PersistableRecord protocol. It will alter the INSERT and UPDATE queries run by the &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&quot;&gt;persistence methods&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol MutablePersistableRecord {
    /// The policy that handles SQLite conflicts when records are
    /// inserted or updated.
    ///
    /// This property is optional: its default value uses the ABORT
    /// policy for both insertions and updates, so that GRDB generate
    /// regular INSERT and UPDATE queries.
    static var persistenceConflictPolicy: PersistenceConflictPolicy { get }
}

struct Player : MutablePersistableRecord {
    static let persistenceConflictPolicy = PersistenceConflictPolicy(
        insert: .replace,
        update: .replace)
}

// INSERT OR REPLACE INTO player (...) VALUES (...)
try player.insert(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you specify the &lt;code&gt;ignore&lt;/code&gt; policy for inserts, the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;&lt;code&gt;didInsert&lt;/code&gt; callback&lt;/a&gt; will be called with some random id in case of failed insert. You can detect failed insertions with &lt;code&gt;insertAndFetch&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// How to detect failed `INSERT OR IGNORE`:
// INSERT OR IGNORE INTO player ... RETURNING *
do {
    let insertedPlayer = try player.insertAndFetch(db) {
    // Successful insertion
catch RecordError.recordNotFound {
    // Failed insertion due to IGNORE policy
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;replace&lt;/code&gt; policy may have to delete rows so that inserts and updates can succeed. Those deletions are not reported to &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/transactionobserver&quot;&gt;transaction observers&lt;/a&gt; (this might change in a future release of SQLite).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Beyond FetchableRecord&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Some GRDB users eventually discover that the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; protocol does not fit all situations.&lt;/strong&gt; Use cases that are not well handled by FetchableRecord include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Your application needs polymorphic row decoding: it decodes some type or another, depending on the values contained in a database row.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Your application needs to decode rows with a context: each decoded value should be initialized with some extra value that does not come from the database.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Since those use cases are not well handled by FetchableRecord, don&#39;t try to implement them on top of this protocol: you&#39;ll just fight the framework.&lt;/p&gt; 
&lt;h2&gt;Examples of Record Definitions&lt;/h2&gt; 
&lt;p&gt;We will show below how to declare a record type for the following database table:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.create(table: &quot;place&quot;) { t in
        t.autoIncrementedPrimaryKey(&quot;id&quot;)
        t.column(&quot;title&quot;, .text).notNull()
        t.column(&quot;isFavorite&quot;, .boolean).notNull().defaults(to: false)
        t.column(&quot;longitude&quot;, .double).notNull()
        t.column(&quot;latitude&quot;, .double).notNull()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each one of the three examples below is correct. You will pick one or the other depending on your personal preferences and the requirements of your application:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Define a Codable struct, and adopt the record protocols you need&lt;/summary&gt; 
 &lt;p&gt;This is the shortest way to define a record type.&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: Codable {
    var id: Int64?
    var title: String
    var isFavorite: Bool
    private var latitude: CLLocationDegrees
    private var longitude: CLLocationDegrees
    
    var coordinate: CLLocationCoordinate2D {
        get {
            CLLocationCoordinate2D(
                latitude: latitude,
                longitude: longitude)
        }
        set {
            latitude = newValue.latitude
            longitude = newValue.longitude
        }
    }
}

// SQL generation
extension Place: TableRecord {
    /// The table columns
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let title = Column(CodingKeys.title)
        static let isFavorite = Column(CodingKeys.isFavorite)
        static let latitude = Column(CodingKeys.latitude)
        static let longitude = Column(CodingKeys.longitude)
    }
}

// Fetching methods
extension Place: FetchableRecord { }

// Persistence methods
extension Place: MutablePersistableRecord {
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Define a plain struct, and adopt the record protocols you need&lt;/summary&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place {
    var id: Int64?
    var title: String
    var isFavorite: Bool
    var coordinate: CLLocationCoordinate2D
}

// SQL generation
extension Place: TableRecord {
    /// The table columns
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let title = Column(&quot;title&quot;)
        static let isFavorite = Column(&quot;isFavorite&quot;)
        static let latitude = Column(&quot;latitude&quot;)
        static let longitude = Column(&quot;longitude&quot;)
    }
}

// Fetching methods
extension Place: FetchableRecord {
    /// Creates a record from a database row
    init(row: Row) {
        id = row[Columns.id]
        title = row[Columns.title]
        isFavorite = row[Columns.isFavorite]
        coordinate = CLLocationCoordinate2D(
            latitude: row[Columns.latitude],
            longitude: row[Columns.longitude])
    }
}

// Persistence methods
extension Place: MutablePersistableRecord {
    /// The values persisted in the database
    func encode(to container: inout PersistenceContainer) {
        container[Columns.id] = id
        container[Columns.title] = title
        container[Columns.isFavorite] = isFavorite
        container[Columns.latitude] = coordinate.latitude
        container[Columns.longitude] = coordinate.longitude
    }
    
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Define a plain struct optimized for fetching performance&lt;/summary&gt; 
 &lt;p&gt;This struct derives its persistence methods from the standard Encodable protocol (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&quot;&gt;Codable Records&lt;/a&gt;), but performs optimized row decoding by accessing database columns with numeric indexes.&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&quot;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Place: Encodable {
    var id: Int64?
    var title: String
    var isFavorite: Bool
    private var latitude: CLLocationDegrees
    private var longitude: CLLocationDegrees
    
    var coordinate: CLLocationCoordinate2D {
        get {
            CLLocationCoordinate2D(
                latitude: latitude,
                longitude: longitude)
        }
        set {
            latitude = newValue.latitude
            longitude = newValue.longitude
        }
    }
}

// SQL generation
extension Place: TableRecord {
    /// The table columns
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let title = Column(CodingKeys.title)
        static let isFavorite = Column(CodingKeys.isFavorite)
        static let latitude = Column(CodingKeys.latitude)
        static let longitude = Column(CodingKeys.longitude)
    }
    
    /// Arrange the selected columns and lock their order
    static var databaseSelection: [any SQLSelectable] {
        [
            Columns.id,
            Columns.title,
            Columns.favorite,
            Columns.latitude,
            Columns.longitude,
        ]
    }
}

// Fetching methods
extension Place: FetchableRecord {
    /// Creates a record from a database row
    init(row: Row) {
        // For high performance, use numeric indexes that match the
        // order of Place.databaseSelection
        id = row[0]
        title = row[1]
        isFavorite = row[2]
        coordinate = CLLocationCoordinate2D(
            latitude: row[3],
            longitude: row[4])
    }
}

// Persistence methods
extension Place: MutablePersistableRecord {
    // Update auto-incremented id upon successful insertion
    mutating func didInsert(_ inserted: InsertionSuccess) {
        id = inserted.rowID
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h1&gt;The Query Interface&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;The query interface lets you write pure Swift instead of SQL:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    // Update database schema
    try db.create(table: &quot;player&quot;) { t in ... }
    
    // Fetch records
    let bestPlayers = try Player
        .order(\.score.desc)
        .limit(10)
        .fetchAll(db)
    
    // Count
    let count = try Player
        .filter { $0.score &amp;gt;= 1000 }
        .fetchCount(db)
    
    // Batch update
    try Player
        .filter { $0.team == &quot;Reds&quot; }
        .updateAll(db) { $0.score += 100 }
    
    // Batch delete
    try Player
        .filter { $0.score == 0 }
        .deleteAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You need to open a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;database connection&lt;/a&gt; before you can query the database.&lt;/p&gt; 
&lt;p&gt;Please bear in mind that the query interface can not generate all possible SQL queries. You may also &lt;em&gt;prefer&lt;/em&gt; writing SQL, and this is just OK. From little snippets to full queries, your SQL skills are welcome:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    // Update database schema (with SQL)
    try db.execute(sql: &quot;CREATE TABLE player (...)&quot;)
    
    // Fetch records (with SQL)
    let bestPlayers = try Player.fetchAll(db, sql: &quot;&quot;&quot;
        SELECT * FROM player ORDER BY score DESC LIMIT 10
        &quot;&quot;&quot;)
    
    // Count (with an SQL snippet)
    let minScore = 1000
    let count = try Player
        .filter(sql: &quot;score &amp;gt;= ?&quot;, arguments: [minScore])
        .fetchCount(db)
    
    // Update (with SQL)
    try db.execute(sql: &quot;UPDATE player SET score = score + 100 WHERE team = &#39;Reds&#39;&quot;)
    
    // Delete (with SQL)
    try db.execute(sql: &quot;DELETE FROM player WHERE score = 0&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So don&#39;t miss the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&quot;&gt;SQL API&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseschema&quot;&gt;The Database Schema&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&quot;&gt;Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#expressions&quot;&gt;Expressions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&quot;&gt;SQL Operators&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&quot;&gt;SQL Functions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&quot;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&quot;&gt;Fetching from Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&quot;&gt;Fetching by Key&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&quot;&gt;Testing for Record Existence&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-aggregated-values&quot;&gt;Fetching Aggregated Values&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&quot;&gt;Delete Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#update-requests&quot;&gt;Update Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-requests&quot;&gt;Custom Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations and Joins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;Common Table Expressions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&quot;&gt;Query Interface Organization&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requests&lt;/h2&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest&quot;&gt;&lt;code&gt;QueryInterfaceRequest&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/table&quot;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The query interface requests&lt;/strong&gt; let you fetch values from the database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.filter { $0.email != nil }.order(\.name)
let players = try request.fetchAll(db)  // [Player]
let count = try request.fetchCount(db)  // Int
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Query interface requests usually start from &lt;strong&gt;a type&lt;/strong&gt; that adopts the &lt;code&gt;TableRecord&lt;/code&gt; protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: TableRecord { ... }

// The request for all players:
let request = Player.all()
let players = try request.fetchAll(db) // [Player]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you can not use a record type, use &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// The request for all rows from the player table:
let table = Table(&quot;player&quot;)
let request = table.all()
let rows = try request.fetchAll(db)    // [Row]

// The request for all players from the player table:
let table = Table&amp;lt;Player&amp;gt;(&quot;player&quot;)
let request = table.all()
let players = try request.fetchAll(db) // [Player]
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: all examples in the documentation below use a record type, but you can always substitute a &lt;code&gt;Table&lt;/code&gt; instead.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Next, declare the table &lt;strong&gt;columns&lt;/strong&gt; that you want to use for filtering, or sorting, in a nested type named &lt;code&gt;Columns&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player {
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let name = Column(&quot;name&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;code&gt;Player&lt;/code&gt; is &lt;code&gt;Codable&lt;/code&gt;, you&#39;ll prefer defining columns from coding keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player {
    enum Columns {
        static let id = Column(CodingKeys.id)
        static let name = Column(CodingKeys.name)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can now build requests with the following methods: &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;having&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;reversed&lt;/code&gt;, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;joining&lt;/code&gt;, &lt;code&gt;including&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;. All those methods return another request, which you can further refine by applying another method: &lt;code&gt;Player.select(...).filter(...).order(...)&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerecord/all()&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerecord/none()&quot;&gt;&lt;code&gt;none()&lt;/code&gt;&lt;/a&gt;: the requests for all rows, or no row.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player
Player.all()
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, all columns are selected. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&quot;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/selectionrequest/select(_:)-ruzy&quot;&gt;&lt;code&gt;select(...)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/select(_:as:)-58954&quot;&gt;&lt;code&gt;select(..., as:)&lt;/code&gt;&lt;/a&gt; define the selected columns. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&quot;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT name FROM player
Player.select(\.name, as: String.self)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/selectID()&quot;&gt;&lt;code&gt;selectID()&lt;/code&gt;&lt;/a&gt; is available on &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt;. It supports all tables that have a single-column primary key:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT id FROM player
Player.selectID()

// SELECT id FROM player WHERE name IS NOT NULL
Player.filter { $0.name != nil }.selectID()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/selectionrequest/annotated(with:)-1satx&quot;&gt;&lt;code&gt;annotated(with: expression...)&lt;/code&gt;&lt;/a&gt; extends the selection.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT *, (score + bonus) AS total FROM player
Player.annotated { ($0.score + $0.bonus).forKey(&quot;total&quot;) }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/derivablerequest/annotated(with:)-74xfs&quot;&gt;&lt;code&gt;annotated(with: aggregate)&lt;/code&gt;&lt;/a&gt; extends the selection with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&quot;&gt;association aggregates&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT team.*, COUNT(DISTINCT player.id) AS playerCount
// FROM team
// LEFT JOIN player ON player.teamId = team.id
// GROUP BY team.id
Team.annotated(with: Team.players.count)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/annotated(withrequired:)&quot;&gt;&lt;code&gt;annotated(withRequired: association)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/annotated(withoptional:)&quot;&gt;&lt;code&gt;annotated(withOptional: association)&lt;/code&gt;&lt;/a&gt; extends the selection with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT player.*, team.color
// FROM player
// JOIN team ON team.id = player.teamId
Player.annotated(withRequired: Player.team.select(\.color))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/derivablerequest/distinct()&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; performs uniquing.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT DISTINCT name FROM player
Player.select(\.name, as: String.self).distinct()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/filteredrequest/filter(_:)-6xr3d&quot;&gt;&lt;code&gt;filter(expression)&lt;/code&gt;&lt;/a&gt; applies conditions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)
Player.filter { [1,2,3].contains($0.id) }

// SELECT * FROM player WHERE (name IS NOT NULL) AND (height &amp;gt; 1.75)
Player.filter { $0.name != nil &amp;amp;&amp;amp; $0.height &amp;gt; 1.75 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/filter(id:)&quot;&gt;&lt;code&gt;filter(id:)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/filter(ids:)&quot;&gt;&lt;code&gt;filter(ids:)&lt;/code&gt;&lt;/a&gt; are type-safe methods available on &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id = 1
Player.filter(id: 1)

// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)
Country.filter(ids: [&quot;FR&quot;, &quot;US&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/filter(key:)-1p9sq&quot;&gt;&lt;code&gt;filter(key:)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/filter(keys:)-6ggt1&quot;&gt;&lt;code&gt;filter(keys:)&lt;/code&gt;&lt;/a&gt; apply conditions on primary and unique keys:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id = 1
Player.filter(key: 1)

// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)
Country.filter(keys: [&quot;FR&quot;, &quot;US&quot;])

// SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = &#39;FR&#39;
Citizenship.filter(key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])

// SELECT * FROM player WHERE email = &#39;arthur@example.com&#39;
Player.filter(key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;matching(pattern)&lt;/code&gt; (&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/matching(_:)-3s3zr&quot;&gt;FTS3&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/matching(_:)-7c1e8&quot;&gt;FTS5&lt;/a&gt;) performs &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&quot;&gt;full-text search&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;
let pattern = FTS3Pattern(matchingAllTokensIn: &quot;SQLite database&quot;)
Document.matching(pattern)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the pattern is nil, no row will match.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/aggregatingrequest/group(_:)-2g7br&quot;&gt;&lt;code&gt;group(expression, ...)&lt;/code&gt;&lt;/a&gt; groups rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT name, MAX(score) FROM player GROUP BY name
Player
    .select { [$0.name, max($0.score)] }
    .group(\.name)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/aggregatingrequest/having(_:)-2oggh&quot;&gt;&lt;code&gt;having(expression)&lt;/code&gt;&lt;/a&gt; applies conditions on grouped rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT team, MAX(score) FROM player GROUP BY team HAVING MIN(score) &amp;gt;= 1000
Player
    .select { [$0.team, max($0.score)] }
    .group(\.team)
    .having { min($0.score) &amp;gt;= 1000 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/derivablerequest/having(_:)&quot;&gt;&lt;code&gt;having(aggregate)&lt;/code&gt;&lt;/a&gt; applies conditions on grouped rows, according to an &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&quot;&gt;association aggregate&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT team.*
// FROM team
// LEFT JOIN player ON player.teamId = team.id
// GROUP BY team.id
// HAVING COUNT(DISTINCT player.id) &amp;gt;= 5
Team.having(Team.players.count &amp;gt;= 5)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/orderedrequest/order(_:)-9d0hr&quot;&gt;&lt;code&gt;order(ordering, ...)&lt;/code&gt;&lt;/a&gt; sorts.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY name
Player.order(\.name)

// SELECT * FROM player ORDER BY score DESC
Player.order(\.score.desc)

// SELECT * FROM player ORDER BY score DESC, name
Player.order { [$0.score.desc, $0.name] }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLite considers NULL values to be smaller than any other values for sorting purposes. Hence, NULLs naturally appear at the beginning of an ascending ordering and at the end of a descending ordering. With a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&quot;&gt;custom SQLite build&lt;/a&gt;, this can be changed using &lt;code&gt;.ascNullsLast&lt;/code&gt; and &lt;code&gt;.descNullsFirst&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY score ASC NULLS LAST
Player.order(\.name.ascNullsLast)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each &lt;code&gt;order&lt;/code&gt; call clears any previous ordering:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY name
Player.order(\.score).order(\.name)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/orderedrequest/reversed()&quot;&gt;&lt;code&gt;reversed()&lt;/code&gt;&lt;/a&gt; reverses the eventual orderings.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY score ASC, name DESC
Player.order { [$0.score.desc, $0.name] }.reversed()
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If no ordering was already specified, this method has no effect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player
Player.all().reversed()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/limit(_:offset:)&quot;&gt;&lt;code&gt;limit(limit, offset: offset)&lt;/code&gt;&lt;/a&gt; limits and pages results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player LIMIT 5
Player.limit(5)

// SELECT * FROM player LIMIT 5 OFFSET 10
Player.limit(5, offset: 10)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/joining(required:)&quot;&gt;&lt;code&gt;joining(required:)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/joining(optional:)&quot;&gt;&lt;code&gt;joining(optional:)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/including(required:)&quot;&gt;&lt;code&gt;including(required:)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/including(optional:)&quot;&gt;&lt;code&gt;including(optional:)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/joinablerequest/including(all:)&quot;&gt;&lt;code&gt;including(all:)&lt;/code&gt;&lt;/a&gt; fetch and join records through &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT player.*, team.*
// FROM player
// JOIN team ON team.id = player.teamId
Player.including(required: Player.team)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/derivablerequest/with(_:)&quot;&gt;&lt;code&gt;with(cte)&lt;/code&gt;&lt;/a&gt; embeds a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;common table expression&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// WITH ... SELECT * FROM player
let cte = CommonTableExpression(...)
Player.with(cte)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Other requests that involve the primary key:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/selectprimarykey(as:)&quot;&gt;&lt;code&gt;selectPrimaryKey(as:)&lt;/code&gt;&lt;/a&gt; selects the primary key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT id FROM player
Player.selectPrimaryKey(as: Int64.self)    // QueryInterfaceRequest&amp;lt;Int64&amp;gt;

// SELECT code FROM country
Country.selectPrimaryKey(as: String.self)  // QueryInterfaceRequest&amp;lt;String&amp;gt;

// SELECT citizenId, countryCode FROM citizenship
Citizenship.selectPrimaryKey(as: Row.self) // QueryInterfaceRequest&amp;lt;Row&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/orderbyprimarykey()&quot;&gt;&lt;code&gt;orderByPrimaryKey()&lt;/code&gt;&lt;/a&gt; sorts by primary key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player ORDER BY id
Player.orderByPrimaryKey()

// SELECT * FROM country ORDER BY code
Country.orderByPrimaryKey()

// SELECT * FROM citizenship ORDER BY citizenId, countryCode
Citizenship.orderByPrimaryKey()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/tablerequest/groupbyprimarykey()&quot;&gt;&lt;code&gt;groupByPrimaryKey()&lt;/code&gt;&lt;/a&gt; groups rows by primary key.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can refine requests by chaining those methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (email IS NOT NULL) ORDER BY name
Player.order(\.name).filter { $0.email != nil }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, and &lt;code&gt;limit&lt;/code&gt; methods ignore and replace previously applied selection, orderings, grouping, and limits. On the opposite, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, and &lt;code&gt;having&lt;/code&gt; methods extend the query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Player                          // SELECT * FROM player
    .filter { $0.name != nil }  // WHERE (name IS NOT NULL)
    .filter { $0.email != nil } //        AND (email IS NOT NULL)
    .order(\.name)              // - ignored -
    .reversed()                 // - ignored -
    .order(\.score)             // ORDER BY score
    .limit(20, offset: 40)      // - ignored -
    .limit(10)                  // LIMIT 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Raw SQL snippets are also accepted, with eventual &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statementarguments&quot;&gt;arguments&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT DATE(creationDate), COUNT(*) FROM player WHERE name = &#39;Arthur&#39; GROUP BY date(creationDate)
Player
    .select(sql: &quot;DATE(creationDate), COUNT(*)&quot;)
    .filter(sql: &quot;name = ?&quot;, arguments: [&quot;Arthur&quot;])
    .group(sql: &quot;DATE(creationDate)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Columns Selected by a Request&lt;/h3&gt; 
&lt;p&gt;By default, query interface requests select all columns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player
struct Player: TableRecord { ... }
let request = Player.all()

// SELECT * FROM player
let table = Table(&quot;player&quot;)
let request = table.all()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;The selection can be changed for each individual requests, or in the case of record-based requests, for all requests built from this record type.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; methods change the selection of a single request (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&quot;&gt;Fetching from Requests&lt;/a&gt; for detailed information):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.select { max($0.score) }
let maxScore = try Int.fetchOne(db, request) // Int?

let request = Player.select({ max($0.score) }, as: Int.self)
let maxScore = try request.fetchOne(db)      // Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The default selection for a record type is controlled by the &lt;code&gt;databaseSelection&lt;/code&gt; property. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Select a limited set of columns
struct RestrictedPlayer: TableRecord {
    static let databaseTableName = &quot;player&quot;
    
    enum Columns {
        static let id = Column(&quot;id&quot;)
        static let name = Column(&quot;name&quot;)
    }
    
    static var databaseSelection: [any SQLSelectable] {
        [Columns.id, Columns.name]
    }
}

// SELECT id, name FROM player
let request = RestrictedPlayer.all()
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Select all but a few columns
struct Player : TableRecord {
    static var databaseSelection: [any SQLSelectable] { 
        [.allColumns(excluding: [&quot;generatedColumn&quot;])]
    }
}

// SELECT id, name FROM player
let request = RestrictedPlayer.all()
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Select all columns and more
struct ExtendedPlayer : TableRecord {
    static let databaseTableName = &quot;player&quot;
    static var databaseSelection: [any SQLSelectable] {
        [.allColumns, .rowID]
    }
}

// SELECT *, rowid FROM player
let request = ExtendedPlayer.all()
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseSelection&lt;/code&gt; property is explicitly declared as &lt;code&gt;[any SQLSelectable]&lt;/code&gt;. If it is not, the Swift compiler may silently miss the protocol requirement, resulting in sticky &lt;code&gt;SELECT *&lt;/code&gt; requests. To verify your setup, see the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&quot;&gt;How do I print a request as SQL?&lt;/a&gt; FAQ.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Expressions&lt;/h2&gt; 
&lt;p&gt;Feed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&quot;&gt;requests&lt;/a&gt; with SQL expressions built from your Swift code:&lt;/p&gt; 
&lt;h3&gt;SQL Operators&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/sqlspecificexpressible&quot;&gt;&lt;code&gt;SQLSpecificExpressible&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&quot;https://sqlite.org/lang_expr.html#operators&quot;&gt;built-in operators&lt;/a&gt;, listed below. But not all: see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&quot;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL operators.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;IS&lt;/code&gt;, &lt;code&gt;IS NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Comparison operators are based on the Swift operators &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (name = &#39;Arthur&#39;)
Player.filter { $0.name == &quot;Arthur&quot; }

// SELECT * FROM player WHERE (name IS NULL)
Player.filter { $0.name == nil }

// SELECT * FROM player WHERE (score IS 1000)
Player.filter { $0.score === 1000 }

// SELECT * FROM rectangle WHERE width &amp;lt; height
Rectangle.filter { $0.width &amp;lt; $0.height }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Subqueries are supported:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)
let maximumScore = Player.select { max($0.score) }
Player.filter { $0.score == maximumScore }

// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)
let maximumScore = SQLRequest(&quot;SELECT max(score) FROM player&quot;)
Player.filter { $0.score == maximumScore }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&quot;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/p&gt; &lt;p&gt;SQLite arithmetic operators are derived from their Swift equivalent:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT ((temperature * 1.8) + 32) AS fahrenheit FROM planet
Planet.select { ($0.temperature * 1.8 + 32).forKey(&quot;fahrenheit&quot;) }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: an expression like &lt;code&gt;nameColumn + &quot;rrr&quot;&lt;/code&gt; will be interpreted by SQLite as a numerical addition (with funny results), not as a string concatenation. See the &lt;code&gt;concat&lt;/code&gt; operator below.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT score + bonus + 1000 FROM player
Player.select {
    [$0.score, $0.bonus, 1000.databaseValue].joined(operator: .add)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw values: &lt;code&gt;1000.databaseValue&lt;/code&gt;. A plain &lt;code&gt;1000&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .add)&lt;/code&gt; returns 0, and &lt;code&gt;joined(operator: .multiply)&lt;/code&gt; returns 1.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Bitwise operations (bitwise and, or, not, left shift, right shift) are derived from their Swift equivalent:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT mask &amp;amp; 2 AS isRocky FROM planet
Planet.select { ($0.mask &amp;amp; 2).forKey(&quot;isRocky&quot;) }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;||&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Concatenate several strings:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT firstName || &#39; &#39; || lastName FROM player
Player.select {
    [$0.firstName, &quot; &quot;.databaseValue, $0.lastName].joined(operator: .concat)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw strings: &lt;code&gt;&quot; &quot;.databaseValue&lt;/code&gt;. A plain &lt;code&gt;&quot; &quot;&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .concat)&lt;/code&gt; returns the empty string.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQL logical operators are derived from the Swift &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE ((NOT isVerified) OR (score &amp;lt; 1000))
Player.filter { !$0.isVerified || $0.score &amp;lt; 1000 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;OR&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (isVerified AND (score &amp;gt;= 1000) AND (name IS NOT NULL))
Player.filter {
    [$0.isVerified, $0.score &amp;gt;= 1000, $0.name != nil].joined(operator: .and)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .and)&lt;/code&gt; returns true, and &lt;code&gt;joined(operator: .or)&lt;/code&gt; returns false:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt;, &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;NOT IN&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check inclusion in a Swift sequence (array, set, range…), call the &lt;code&gt;contains&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)
Player.filter { [1, 2, 3].contains($0.id) }

// SELECT * FROM player WHERE id NOT IN (1, 2, 3)
Player.filter { ![1, 2, 3].contains($0.id) }

// SELECT * FROM player WHERE score BETWEEN 0 AND 1000
Player.filter { (0...1000).contains($0.score) }

// SELECT * FROM player WHERE (score &amp;gt;= 0) AND (score &amp;lt; 1000)
Player.filter { (0..&amp;lt;1000).contains($0.score) }

// SELECT * FROM player WHERE initial BETWEEN &#39;A&#39; AND &#39;N&#39;
Player.filter { (&quot;A&quot;...&quot;N&quot;).contains($0.initial) }

// SELECT * FROM player WHERE (initial &amp;gt;= &#39;A&#39;) AND (initial &amp;lt; &#39;N&#39;)
Player.filter { (&quot;A&quot;..&amp;lt;&quot;N&quot;).contains($0.initial) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a subquery, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)
let selectedPlayerIds = PlayerSelection.select(\.playerId)
Player.filter { selectedPlayerIds.contains($0.id) }

// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)
let selectedPlayerIds = SQLRequest(&quot;SELECT playerId FROM playerSelection&quot;)
Player.filter { selectedPlayerIds.contains($0.id) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;common table expression&lt;/a&gt;, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// WITH selectedName AS (...)
// SELECT * FROM player WHERE name IN selectedName
let cte = CommonTableExpression(named: &quot;selectedName&quot;, ...)
Player
    .with(cte)
    .filter { cte.contains($0.name) }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&quot;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;EXISTS&lt;/code&gt;, &lt;code&gt;NOT EXISTS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check if a subquery would return rows, call the &lt;code&gt;exists&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Teams that have at least one other player
//
//  SELECT * FROM team
//  WHERE EXISTS (SELECT * FROM player WHERE teamId = team.id)
let teamAlias = TableAlias&amp;lt;Team&amp;gt;()
let player = Player.filter { $0.teamId == teamAlias.id }
let teams = Team.aliased(teamAlias).filter(player.exists())

// Teams that have no player
//
//  SELECT * FROM team
//  WHERE NOT EXISTS (SELECT * FROM player WHERE teamId = team.id)
let teams = Team.aliased(teamAlias).filter(!player.exists())
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, you use a &lt;code&gt;TableAlias&lt;/code&gt; in order to let a subquery refer to a column from another table.&lt;/p&gt; &lt;p&gt;In the next example, which involves the same table twice, the table alias requires an explicit disambiguation with &lt;code&gt;TableAlias(name:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Players who coach at least one other player
//
//  SELECT coach.* FROM player coach
//  WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)
let coachAlias = TableAlias&amp;lt;Player&amp;gt;(name: &quot;coach&quot;)
let coachedPlayer = Player.filter { $0.coachId == coachAlias.id }
let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, subqueries can also be expressed as SQL, with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT coach.* FROM player coach
// WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)
let coachedPlayer = SQLRequest(&quot;SELECT * FROM player WHERE coachId = \(coachAlias.id)&quot;)
let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQLite LIKE operator is available as the &lt;code&gt;like&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (email LIKE &#39;%@example.com&#39;)
Player.filter { $0.email.like(&quot;%@example.com&quot;) }

// SELECT * FROM book WHERE (title LIKE &#39;%10\%%&#39; ESCAPE &#39;\&#39;)
Player.filter { $0.email.like(&quot;%10\\%%&quot;, escape: &quot;\\&quot;) }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the SQLite LIKE operator is case-insensitive but not Unicode-aware. For example, the expression &lt;code&gt;&#39;a&#39; LIKE &#39;A&#39;&lt;/code&gt; is true but &lt;code&gt;&#39;æ&#39; LIKE &#39;Æ&#39;&lt;/code&gt; is false.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MATCH&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The full-text MATCH operator is available through &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&quot;&gt;FTS3Pattern&lt;/a&gt; (for FTS3 and FTS4 tables) and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&quot;&gt;FTS5Pattern&lt;/a&gt; (for FTS5):&lt;/p&gt; &lt;p&gt;FTS3 and FTS4:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let pattern = FTS3Pattern(matchingAllTokensIn: &quot;SQLite database&quot;)

// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;
Document.matching(pattern)

// SELECT * FROM document WHERE content MATCH &#39;sqlite database&#39;
Document.filter { $0.content.match(pattern) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;FTS5:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let pattern = FTS5Pattern(matchingAllTokensIn: &quot;SQLite database&quot;)

// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;
Document.matching(pattern)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;AS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To give an alias to an expression, use the &lt;code&gt;forKey&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT (score + bonus) AS total
// FROM player
Player.select { ($0.score + $0.bonus).forKey(&quot;total&quot;) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need to refer to this aliased column in another place of the request, use a detached column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT (score + bonus) AS total
// FROM player 
// ORDER BY total
Player
    .select { ($0.score + $0.bonus).forKey(&quot;total&quot;) }
    .order(Column(&quot;total&quot;).detached)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The detached column &lt;code&gt;Column(&quot;total&quot;).detached&lt;/code&gt; is not considered as a part of the &quot;player&quot; table, so it is always rendered as &lt;code&gt;total&lt;/code&gt; in the generated SQL, even when the request involves other tables via an &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;association&lt;/a&gt; or a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;common table expression&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;SQL Functions&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/sqlspecificexpressible&quot;&gt;&lt;code&gt;SQLSpecificExpressible&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&quot;https://sqlite.org/lang_corefunc.html&quot;&gt;built-in functions&lt;/a&gt;, listed below. But not all: see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&quot;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL functions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ABS&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;COALESCE&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;DATETIME&lt;/code&gt;, &lt;code&gt;JULIANDAY&lt;/code&gt;, &lt;code&gt;LENGTH&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;TOTAL&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;Those are based on the &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;coalesce&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;dateTime&lt;/code&gt;, &lt;code&gt;julianDay&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, and &lt;code&gt;total&lt;/code&gt; Swift functions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT MIN(score), MAX(score) FROM player
Player.select { [min($0.score), max($0.score)] }

// SELECT COUNT(name) FROM player
Player.select { count($0.name) }

// SELECT COUNT(DISTINCT name) FROM player
Player.select { count(distinct: $0.name) }

// SELECT JULIANDAY(date, &#39;start of year&#39;) FROM game
Game.select { julianDay($0.date, .startOfYear) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more information about the functions &lt;code&gt;dateTime&lt;/code&gt; and &lt;code&gt;julianDay&lt;/code&gt;, see &lt;a href=&quot;https://www.sqlite.org/lang_datefunc.html&quot;&gt;Date And Time Functions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;CAST&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;cast&lt;/code&gt; Swift function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT (CAST(wins AS REAL) / games) AS successRate FROM player
Player.select { (cast($0.wins, as: .real) / $0.games).forKey(&quot;successRate&quot;) }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;a href=&quot;https://www.sqlite.org/lang_expr.html#castexpr&quot;&gt;CAST expressions&lt;/a&gt; for more information about SQLite conversions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;IFNULL&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the Swift &lt;code&gt;??&lt;/code&gt; operator:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;Anonymous&#39;) FROM player
Player.select { $0.name ?? &quot;Anonymous&quot; }

// SELECT IFNULL(name, email) FROM player
Player.select { $0.name ?? $0.email }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;LOWER&lt;/code&gt;, &lt;code&gt;UPPER&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query interface does not give access to those SQLite functions. Nothing against them, but they are not unicode aware.&lt;/p&gt; &lt;p&gt;Instead, GRDB extends SQLite with SQL functions that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Player.select { $0.name.uppercased() }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When &lt;em&gt;comparing&lt;/em&gt; strings, you&#39;d rather use a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&quot;&gt;collation&lt;/a&gt;:&lt;/p&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String = ...

// Not recommended
Player.filter { $0.name.uppercased() == name.uppercased() }

// Better
Player.filter { $0.name.collating(.caseInsensitiveCompare) == name }
&lt;/code&gt;&lt;/pre&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Custom SQL functions and aggregates&lt;/p&gt; &lt;p&gt;You can apply your own &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-functions-&quot;&gt;custom SQL functions and aggregates&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let myFunction = DatabaseFunction(&quot;myFunction&quot;, ...)

// SELECT myFunction(name) FROM player
Player.select { myFunction($0.name) }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Embedding SQL in Query Interface Requests&lt;/h2&gt; 
&lt;p&gt;You will sometimes want to extend your query interface requests with SQL snippets. This can happen because GRDB does not provide a Swift interface for some SQL function or operator, or because you want to use an SQLite construct that GRDB does not support.&lt;/p&gt; 
&lt;p&gt;Support for extensibility is large, but not unlimited. All the SQL queries built by the query interface request have the shape below. &lt;em&gt;If you need something else, you&#39;ll have to use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&quot;&gt;raw SQL requests&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;WITH ...     -- 1
SELECT ...   -- 2
FROM ...     -- 3
JOIN ...     -- 4
WHERE ...    -- 5
GROUP BY ... -- 6
HAVING ...   -- 7
ORDER BY ... -- 8
LIMIT ...    -- 9
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;WITH ...&lt;/code&gt;: see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&quot;&gt;Common Table Expressions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;SELECT ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The selection can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player
let request = Player.select(sql: &quot;IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score&quot;)

// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player
let defaultName = &quot;O&#39;Brien&quot;
let request = Player.select(sql: &quot;IFNULL(name, ?), score&quot;, arguments: [suffix])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player
let defaultName = &quot;O&#39;Brien&quot;
let request = Player.select(literal: &quot;IFNULL(name, \(defaultName)), score&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with a mix of Swift and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player
let defaultName = &quot;O&#39;Brien&quot;
let request = Player.select {
    let displayName: SQL = &quot;IFNULL(\($0.name), \(defaultName)) AS displayName&quot;
    return [displayName, $0.score]
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the custom SQL snippet should behave as a full-fledged expression, with support for the &lt;code&gt;+&lt;/code&gt; Swift operator, the &lt;code&gt;forKey&lt;/code&gt; aliasing method, and all other &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&quot;&gt;SQL Operators&lt;/a&gt;, build an &lt;em&gt;expression literal&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player
let defaultName = &quot;O&#39;Brien&quot;
let request = Player.select {
    let displayName = SQL(&quot;IFNULL(\($0.name), \(defaultName))&quot;).sqlExpression
    return [displayName.forKey(&quot;displayName&quot;), $0.score]
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Such expression literals allow you to build a reusable support library of SQL functions or operators that are missing from the query interface. For example, you can define a Swift &lt;code&gt;date&lt;/code&gt; function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func date(_ value: some SQLSpecificExpressible) -&amp;gt; SQLExpression {
    SQL(&quot;DATE(\(value))&quot;).sqlExpression
}

// SELECT * FROM &quot;player&quot; WHERE DATE(&quot;createdAt&quot;) = &#39;2020-01-23&#39;
let request = Player.filter { date($0.createdAt) == &quot;2020-01-23&quot; }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&quot;&gt;Query Interface Organization&lt;/a&gt; for more information about &lt;code&gt;SQLSpecificExpressible&lt;/code&gt; and &lt;code&gt;SQLExpression&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;FROM ...&lt;/code&gt;: only one table is supported here. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;JOIN ...&lt;/code&gt;: joins are fully controlled by &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;WHERE ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The WHERE clause can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000
let request = Player.filter(sql: &quot;score &amp;gt;= 1000&quot;)

// SELECT * FROM player WHERE score &amp;gt;= 1000
let minScore = 1000
let request = Player.filter(sql: &quot;score &amp;gt;= ?&quot;, arguments: [minScore])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000
let minScore = 1000
let request = Player.filter(literal: &quot;score &amp;gt;= \(minScore)&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with a mix of Swift and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM player WHERE (score &amp;gt;= 1000) AND (team = &#39;red&#39;)
let minScore = 1000
let request = Player.filter { 
    let scoreCondition: SQL = &quot;\($0.score) &amp;gt;= \(minScore)&quot;
    return scoreCondition &amp;amp;&amp;amp; $0.team == &quot;red&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;code&gt;SELECT ...&lt;/code&gt; above for more SQL Interpolation examples.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;GROUP BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The GROUP BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;HAVING ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The HAVING clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ORDER BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The ORDER BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;p&gt;In order to support the &lt;code&gt;desc&lt;/code&gt; and &lt;code&gt;asc&lt;/code&gt; query interface operators, and the &lt;code&gt;reversed()&lt;/code&gt; query interface method, you must provide your orderings as &lt;em&gt;expression literals&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM &quot;player&quot; 
// ORDER BY (score + bonus) ASC, name DESC
let request = Player
    .order {
        let total = SQL(&quot;(\($0.score) + \($0.bonus))&quot;).sqlExpression
        return [total.desc, $0.name]
    }
    .reversed()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;LIMIT ...&lt;/code&gt;: use the &lt;code&gt;limit(_:offset:)&lt;/code&gt; method. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Fetching from Requests&lt;/h2&gt; 
&lt;p&gt;Once you have a request, you can fetch the records at the origin of the request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Some request based on `Player`
let request = Player.filter { ... }... // QueryInterfaceRequest&amp;lt;Player&amp;gt;

// Fetch players:
try request.fetchCursor(db) // A Cursor of Player
try request.fetchAll(db)    // [Player]
try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;
try request.fetchOne(db)    // Player?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let allPlayers = try Player.fetchAll(db)                            // [Player]
let arthur = try Player.filter { $0.name == &quot;Arthur&quot; }.fetchOne(db) // Player?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&quot;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;You sometimes want to fetch other values&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The simplest way is to use the request as an argument to a fetching method of the desired type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Fetch an Int
let request = Player.select { max($0.score) }
let maxScore = try Int.fetchOne(db, request) // Int?

// Fetch a Row
let request = Player.select { [min($0.score), max($0.score)] }
let row = try Row.fetchOne(db, request)!     // Row
let minScore = row[0] as Int?
let maxScore = row[1] as Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also change the request so that it knows the type it has to fetch:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;With &lt;code&gt;asRequest(of:)&lt;/code&gt;, useful when you use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct BookInfo: FetchableRecord, Decodable {
    var book: Book
    var author: Author
}

// A request of BookInfo
let request = Book
    .including(required: Book.author)
    .asRequest(of: BookInfo.self)

let bookInfos = try dbQueue.read { db in
    try request.fetchAll(db) // [BookInfo]
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;With &lt;code&gt;select(..., as:)&lt;/code&gt;, which is handy when you change the selection:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// A request of Int
let request = Player.select({ max($0.score) }, as: Int.self)

let maxScore = try dbQueue.read { db in
    try request.fetchOne(db) // Int?
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Fetching by Key&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Fetching records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;find(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:ids:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:ids:)&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.find(db, id: 1)                   // Player
try Player.fetchOne(db, id: 1)               // Player?
try Country.fetchAll(db, ids: [&quot;FR&quot;, &quot;US&quot;])  // [Countries]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All record types can use &lt;code&gt;find(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchOne(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:keys:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.find(db, key: 1)                  // Player
try Player.fetchOne(db, key: 1)              // Player?
try Country.fetchAll(db, keys: [&quot;FR&quot;, &quot;US&quot;]) // [Country]
try Player.fetchOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])            // Player?
try Citizenship.fetchOne(db, key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;]) // Citizenship?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&quot;https://www.sqlite.org/rowidtable.html&quot;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT * FROM document WHERE rowid = 1
try Document.fetchOne(db, key: 1)            // Document?
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;When you want to build a request and plan to fetch from it later&lt;/strong&gt;, use a &lt;code&gt;filter&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.filter(id: 1)
let request = Country.filter(ids: [&quot;FR&quot;, &quot;US&quot;])
let request = Player.filter(key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
let request = Citizenship.filter(key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Testing for Record Existence&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;You can check if a request has matching rows in the database.&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Some request based on `Player`
let request = Player.filter { ... }...

// Check for player existence:
let noSuchPlayer = try request.isEmpty(db) // Bool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should check for emptiness instead of counting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Correct
let noSuchPlayer = try request.fetchCount(db) == 0
// Even better
let noSuchPlayer = try request.isEmpty(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;You can also check if a given primary or unique key exists in the database.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt; can use the type-safe method &lt;code&gt;exists(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.exists(db, id: 1)
try Country.exists(db, id: &quot;FR&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All record types can use &lt;code&gt;exists(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt; that can check primary and unique keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.exists(db, key: 1)
try Country.exists(db, key: &quot;FR&quot;)
try Player.exists(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
try Citizenship.exists(db, key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should check for key existence instead of fetching a record and checking for nil:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Correct
let playerExists = try Player.fetchOne(db, id: 1) != nil
// Even better
let playerExists = try Player.exists(db, id: 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Fetching Aggregated Values&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requests can count.&lt;/strong&gt; The &lt;code&gt;fetchCount()&lt;/code&gt; method returns the number of rows that would be returned by a fetch request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SELECT COUNT(*) FROM player
let count = try Player.fetchCount(db) // Int

// SELECT COUNT(*) FROM player WHERE email IS NOT NULL
let count = try Player.filter { $0.email != nil }.fetchCount(db)

// SELECT COUNT(DISTINCT name) FROM player
let count = try Player.select(\.name).distinct().fetchCount(db)

// SELECT COUNT(*) FROM (SELECT DISTINCT name, score FROM player)
let count = try Player.select { [$0.name, $0.score] }.distinct().fetchCount(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Other aggregated values&lt;/strong&gt; can also be selected and fetched (see &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&quot;&gt;SQL Functions&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.select { max($0.score) }
let maxScore = try Int.fetchOne(db, request) // Int?

let request = Player.select { [min($0.score), max($0.score)] }
let row = try Row.fetchOne(db, request)!     // Row
let minScore = row[0] as Int?
let maxScore = row[1] as Int?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Delete Requests&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requests can delete records&lt;/strong&gt;, with the &lt;code&gt;deleteAll()&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// DELETE FROM player
try Player.deleteAll(db)

// DELETE FROM player WHERE team = &#39;Reds&#39;
try Player
    .filter { $0.team == &quot;Reds&quot; }
    .deleteAll(db)

// DELETE FROM player ORDER BY score LIMIT 10
try Player
    .order(\.score)
    .limit(10)
    .deleteAll(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Deletion methods are available on types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: TableRecord { ... }
try Player.deleteAll(db)          // Fine
try Table(&quot;player&quot;).deleteAll(db) // Just as fine
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Deleting records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&quot;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;deleteOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:ids:)&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.deleteOne(db, id: 1)
try Country.deleteAll(db, ids: [&quot;FR&quot;, &quot;US&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All record types can use &lt;code&gt;deleteOne(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.deleteOne(db, key: 1)
try Country.deleteAll(db, keys: [&quot;FR&quot;, &quot;US&quot;])
try Player.deleteOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
try Citizenship.deleteOne(db, key: [&quot;citizenId&quot;: 1, &quot;countryCode&quot;: &quot;FR&quot;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&quot;https://www.sqlite.org/rowidtable.html&quot;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// DELETE FROM document WHERE rowid = 1
try Document.deleteOne(db, id: 1)             // Document?
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Update Requests&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Requests can batch update records&lt;/strong&gt;. The &lt;code&gt;updateAll()&lt;/code&gt; method accepts &lt;em&gt;column assignments&lt;/em&gt; defined with the &lt;code&gt;set(to:)&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE player SET score = 0, isHealthy = 1, bonus = NULL
try Player.updateAll(db) { [
    $0.score.set(to: 0), 
    $0.isHealthy.set(to: true), 
    $0.bonus.set(to: nil),
] }

// UPDATE player SET score = 0 WHERE team = &#39;Reds&#39;
try Player
    .filter { $0.team == &quot;Reds&quot; }
    .updateAll(db) { $0.score.set(to: 0) }

// UPDATE player SET isGreat = 1 ORDER BY score DESC LIMIT 10
try Player
    .order(\.score.desc)
    .limit(10)
    .updateAll(db) { $0.isGreat.set(to: true) }

// UPDATE country SET population = 67848156 WHERE id = &#39;FR&#39;
try Country
    .filter(id: &quot;FR&quot;)
    .updateAll(db) { $0.population.set(to: 67_848_156) }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Column assignments accept any expression:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE player SET score = score + (bonus * 2)
try Player.updateAll(db) {
    $0.score.set(to: $0.score + $0.bonus * 2)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a convenience, you can also use the &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, or &lt;code&gt;/=&lt;/code&gt; operators:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE player SET score = score + (bonus * 2)
try Player.updateAll(db) { $0.score += $0.bonus * 2 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Default &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&quot;&gt;Conflict Resolution&lt;/a&gt; rules apply, and you may also provide a specific one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// UPDATE OR IGNORE player SET ...
try Player.updateAll(db, onConflict: .ignore) { /* assignments... */ }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;updateAll&lt;/code&gt; method is available on types that adopt the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Player: TableRecord { ... }
try Player.updateAll(db, ...)          // Fine
try Table(&quot;player&quot;).updateAll(db, ...) // Just as fine
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom Requests&lt;/h2&gt; 
&lt;p&gt;Until now, we have seen &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&quot;&gt;requests&lt;/a&gt; created from any type that adopts the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let request = Player.all()  // QueryInterfaceRequest&amp;lt;Player&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Those requests of type &lt;code&gt;QueryInterfaceRequest&lt;/code&gt; can fetch and count:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try request.fetchCursor(db) // A Cursor of Player
try request.fetchAll(db)    // [Player]
try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;
try request.fetchOne(db)    // Player?
try request.fetchCount(db)  // Int
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;When the query interface can not generate the SQL you need&lt;/strong&gt;, you can still fallback to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&quot;&gt;raw SQL&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Custom SQL is always welcome
try Player.fetchAll(db, sql: &quot;SELECT ...&quot;)   // [Player]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But you may prefer to bring some elegance back in, and build custom requests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// No custom SQL in sight
try Player.customRequest().fetchAll(db) // [Player]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;To build custom requests&lt;/strong&gt;, you can use one of the built-in requests or derive requests from other requests.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/sqlrequest&quot;&gt;SQLRequest&lt;/a&gt; is a fetch request built from raw SQL. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player {
    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {
        SQLRequest&amp;lt;Player&amp;gt;(
            sql: &quot;SELECT * FROM player WHERE color = ?&quot;
            arguments: [color])
    }
}

// [Player]
try Player.filter(color: .red).fetchAll(db)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLRequest supports &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&quot;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Player {
    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {
        &quot;SELECT * FROM player WHERE color = \(color)&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterfacerequest/asrequest(of:)&quot;&gt;&lt;code&gt;asRequest(of:)&lt;/code&gt;&lt;/a&gt; method changes the type fetched by the request. It is useful, for example, when you use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&quot;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct BookInfo: FetchableRecord, Decodable {
    var book: Book
    var author: Author
}

let request = Book
    .including(required: Book.author)
    .asRequest(of: BookInfo.self)

// [BookInfo]
try request.fetchAll(db)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/fetchrequest/adapted(_:)&quot;&gt;&lt;code&gt;adapted(_:)&lt;/code&gt;&lt;/a&gt; method eases the consumption of complex rows with row adapters. See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/rowadapter&quot;&gt;&lt;code&gt;RowAdapter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/splittingrowadapters(columncounts:)&quot;&gt;&lt;code&gt;splittingRowAdapters(columnCounts:)&lt;/code&gt;&lt;/a&gt; for a sample code that uses &lt;code&gt;adapted(_:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Encryption&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;GRDB can encrypt your database with &lt;a href=&quot;http://sqlcipher.net&quot;&gt;SQLCipher&lt;/a&gt; v3.4+.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Use &lt;a href=&quot;http://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;, and specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# GRDB with SQLCipher 4
pod &#39;GRDB.swift/SQLCipher&#39;
pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 4.0&#39;

# GRDB with SQLCipher 3
pod &#39;GRDB.swift/SQLCipher&#39;
pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 3.4&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure you remove any existing &lt;code&gt;pod &#39;GRDB.swift&#39;&lt;/code&gt; from your Podfile. &lt;code&gt;GRDB.swift/SQLCipher&lt;/code&gt; must be the only active GRDB pod in your whole project, or you will face linker or runtime errors, due to the conflicts between SQLCipher and the system SQLite.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#creating-or-opening-an-encrypted-database&quot;&gt;Creating or Opening an Encrypted Database&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#changing-the-passphrase-of-an-encrypted-database&quot;&gt;Changing the Passphrase of an Encrypted Database&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&quot;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#security-considerations&quot;&gt;Security Considerations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Creating or Opening an Encrypted Database&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;You create and open an encrypted database&lt;/strong&gt; by providing a passphrase to your &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&quot;&gt;database connection&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(&quot;secret&quot;)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also in &lt;code&gt;prepareDatabase&lt;/code&gt; that you perform other &lt;a href=&quot;https://www.zetetic.net/sqlcipher/sqlcipher-api/&quot;&gt;SQLCipher configuration steps&lt;/a&gt; that must happen early in the lifetime of a SQLCipher connection. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(&quot;secret&quot;)
    try db.execute(sql: &quot;PRAGMA cipher_page_size = ...&quot;)
    try db.execute(sql: &quot;PRAGMA kdf_iter = ...&quot;)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you want to open an existing SQLCipher 3 database with SQLCipher 4, you may want to run the &lt;code&gt;cipher_compatibility&lt;/code&gt; pragma:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Open an SQLCipher 3 database with SQLCipher 4
var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(&quot;secret&quot;)
    try db.execute(sql: &quot;PRAGMA cipher_compatibility = 3&quot;)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://www.zetetic.net/blog/2018/11/30/sqlcipher-400-release/&quot;&gt;SQLCipher 4.0.0 Release&lt;/a&gt; and &lt;a href=&quot;https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283&quot;&gt;Upgrading to SQLCipher 4&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Changing the Passphrase of an Encrypted Database&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;You can change the passphrase&lt;/strong&gt; of an already encrypted database.&lt;/p&gt; 
&lt;p&gt;When you use a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;database queue&lt;/a&gt;, open the database with the old passphrase, and then apply the new passphrase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try db.changePassphrase(&quot;newSecret&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you use a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;database pool&lt;/a&gt;, make sure that no concurrent read can happen by changing the passphrase within the &lt;code&gt;barrierWriteWithoutTransaction&lt;/code&gt; block. You must also ensure all future reads open a new database connection by calling the &lt;code&gt;invalidateReadOnlyConnections&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbPool.barrierWriteWithoutTransaction { db in
    try db.changePassphrase(&quot;newSecret&quot;)
    dbPool.invalidateReadOnlyConnections()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When an application wants to keep on using a database queue or pool after the passphrase has changed, it is responsible for providing the correct passphrase to the &lt;code&gt;usePassphrase&lt;/code&gt; method called in the database preparation function. Consider:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// WRONG: this won&#39;t work across a passphrase change
let passphrase = try getPassphrase()
var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(passphrase)
}

// CORRECT: get the latest passphrase when it is needed
var config = Configuration()
config.prepareDatabase { db in
    let passphrase = try getPassphrase()
    try db.usePassphrase(passphrase)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;DatabasePool.barrierWriteWithoutTransaction&lt;/code&gt; method does not prevent &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasesnapshot&quot;&gt;database snapshots&lt;/a&gt; from accessing the database during the passphrase change, or after the new passphrase has been applied to the database. Those database accesses may throw errors. Applications should provide their own mechanism for invalidating open snapshots before the passphrase is changed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Instead of changing the passphrase &quot;in place&quot; as described here, you can also export the database in a new encrypted database that uses the new passphrase. See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&quot;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Exporting a Database to an Encrypted Database&lt;/h3&gt; 
&lt;p&gt;Providing a passphrase won&#39;t encrypt a clear-text database that already exists, though. SQLCipher can&#39;t do that, and you will get an error instead: &lt;code&gt;SQLite error 26: file is encrypted or is not a database&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Instead, create a new encrypted database, at a distinct location, and export the content of the existing database. This can both encrypt a clear-text database, or change the passphrase of an encrypted database.&lt;/p&gt; 
&lt;p&gt;The technique to do that is &lt;a href=&quot;https://discuss.zetetic.net/t/how-to-encrypt-a-plaintext-sqlite-database-to-use-sqlcipher-and-avoid-file-is-encrypted-or-is-not-a-database-errors/868/1&quot;&gt;documented&lt;/a&gt; by SQLCipher.&lt;/p&gt; 
&lt;p&gt;With GRDB, it gives:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// The existing database
let existingDBQueue = try DatabaseQueue(path: &quot;/path/to/existing.db&quot;)

// The new encrypted database, at some distinct location:
var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(&quot;secret&quot;)
}
let newDBQueue = try DatabaseQueue(path: &quot;/path/to/new.db&quot;, configuration: config)

try existingDBQueue.inDatabase { db in
    try db.execute(
        sql: &quot;&quot;&quot;
            ATTACH DATABASE ? AS encrypted KEY ?;
            SELECT sqlcipher_export(&#39;encrypted&#39;);
            DETACH DATABASE encrypted;
            &quot;&quot;&quot;,
        arguments: [newDBQueue.path, &quot;secret&quot;])
}

// Now the export is completed, and the existing database can be deleted.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Security Considerations&lt;/h3&gt; 
&lt;h4&gt;Managing the lifetime of the passphrase string&lt;/h4&gt; 
&lt;p&gt;It is recommended to avoid keeping the passphrase in memory longer than necessary. To do this, make sure you load the passphrase from the &lt;code&gt;prepareDatabase&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// NOT RECOMMENDED: this keeps the passphrase in memory longer than necessary
let passphrase = try getPassphrase()
var config = Configuration()
config.prepareDatabase { db in
    try db.usePassphrase(passphrase)
}

// RECOMMENDED: only load the passphrase when it is needed
var config = Configuration()
config.prepareDatabase { db in
    let passphrase = try getPassphrase()
    try db.usePassphrase(passphrase)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This technique helps manages the lifetime of the passphrase, although keep in mind that the content of a String may remain intact in memory long after the object has been released.&lt;/p&gt; 
&lt;p&gt;For even better control over the lifetime of the passphrase in memory, use a Data object which natively provides the &lt;code&gt;resetBytes&lt;/code&gt; function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// RECOMMENDED: only load the passphrase when it is needed and reset its content immediately after use
var config = Configuration()
config.prepareDatabase { db in
    var passphraseData = try getPassphraseData() // Data
    defer {
        passphraseData.resetBytes(in: 0..&amp;lt;passphraseData.count)
    }
    try db.usePassphrase(passphraseData)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some demanding users will want to go further, and manage the lifetime of the raw passphrase bytes. See below.&lt;/p&gt; 
&lt;h4&gt;Managing the lifetime of the passphrase bytes&lt;/h4&gt; 
&lt;p&gt;GRDB offers convenience methods for providing the database passphrases as Swift strings: &lt;code&gt;usePassphrase(_:)&lt;/code&gt; and &lt;code&gt;changePassphrase(_:)&lt;/code&gt;. Those methods don&#39;t keep the passphrase String in memory longer than necessary. But they are as secure as the standard String type: the lifetime of actual passphrase bytes in memory is not under control.&lt;/p&gt; 
&lt;p&gt;When you want to precisely manage the passphrase bytes, talk directly to SQLCipher, using its raw C functions.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    ... // Carefully load passphrase bytes
    let code = sqlite3_key(db.sqliteConnection, /* passphrase bytes */)
    ... // Carefully dispose passphrase bytes
    guard code == SQLITE_OK else {
        throw DatabaseError(
            resultCode: ResultCode(rawValue: code), 
            message: db.lastErrorMessage)
    }
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Passphrase availability vs. Database availability&lt;/h4&gt; 
&lt;p&gt;When the passphrase is securely stored in the system keychain, your application can protect it using the &lt;a href=&quot;https://developer.apple.com/documentation/security/ksecattraccessible&quot;&gt;&lt;code&gt;kSecAttrAccessible&lt;/code&gt;&lt;/a&gt; attribute.&lt;/p&gt; 
&lt;p&gt;Such protection prevents GRDB from creating SQLite connections when the passphrase is not available:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    let passphrase = try loadPassphraseFromSystemKeychain()
    try db.usePassphrase(passphrase)
}

// Success if and only if the passphrase is available
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For the same reason, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;database pools&lt;/a&gt;, which open SQLite connections on demand, may fail at any time as soon as the passphrase becomes unavailable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Success if and only if the passphrase is available
let dbPool = try DatabasePool(path: dbPath, configuration: config)

// May fail if passphrase has turned unavailable
try dbPool.read { ... }

// May trigger value observation failure if passphrase has turned unavailable
try dbPool.write { ... }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because DatabasePool maintains a pool of long-lived SQLite connections, some database accesses will use an existing connection, and succeed. And some other database accesses will fail, as soon as the pool wants to open a new connection. It is impossible to predict which accesses will succeed or fail.&lt;/p&gt; 
&lt;p&gt;For the same reason, a database queue, which also maintains a long-lived SQLite connection, will remain available even after the passphrase has turned unavailable.&lt;/p&gt; 
&lt;p&gt;Applications are thus responsible for protecting database accesses when the passphrase is unavailable. To this end, they can use &lt;a href=&quot;https://developer.apple.com/documentation/uikit/protecting_the_user_s_privacy/encrypting_your_app_s_files&quot;&gt;Data Protection&lt;/a&gt;. They can also destroy their instances of database queue or pool when the passphrase becomes unavailable.&lt;/p&gt; 
&lt;h2&gt;Backup&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;You can backup (copy) a database into another.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Backups can for example help you copying an in-memory database to and from a database file when you implement NSDocument subclasses.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let source: DatabaseQueue = ...      // or DatabasePool
let destination: DatabaseQueue = ... // or DatabasePool
try source.backup(to: destination)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; method blocks the current thread until the destination database contains the same contents as the source database.&lt;/p&gt; 
&lt;p&gt;When the source is a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;database pool&lt;/a&gt;, concurrent writes can happen during the backup. Those writes may, or may not, be reflected in the backup, but they won&#39;t trigger any error.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Database&lt;/code&gt; has an analogous &lt;code&gt;backup&lt;/code&gt; method.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let source: DatabaseQueue = ...      // or DatabasePool
let destination: DatabaseQueue = ... // or DatabasePool
try source.write { sourceDb in
    try destination.barrierWriteWithoutTransaction { destDb in
        try sourceDb.backup(to: destDb)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This method allows for the choice of source and destination &lt;code&gt;Database&lt;/code&gt; handles with which to backup the database.&lt;/p&gt; 
&lt;h3&gt;Backup Progress Reporting&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; methods take optional &lt;code&gt;pagesPerStep&lt;/code&gt; and &lt;code&gt;progress&lt;/code&gt; parameters. Together these parameters can be used to track a database backup in progress and abort an incomplete backup.&lt;/p&gt; 
&lt;p&gt;When &lt;code&gt;pagesPerStep&lt;/code&gt; is provided, the database backup is performed in &lt;em&gt;steps&lt;/em&gt;. At each step, no more than &lt;code&gt;pagesPerStep&lt;/code&gt; database pages are copied from the source to the destination. The backup proceeds one step at a time until all pages have been copied.&lt;/p&gt; 
&lt;p&gt;When a &lt;code&gt;progress&lt;/code&gt; callback is provided, &lt;code&gt;progress&lt;/code&gt; is called after every backup step, including the last. Even if a non-default &lt;code&gt;pagesPerStep&lt;/code&gt; is specified or the backup is otherwise completed in a single step, the &lt;code&gt;progress&lt;/code&gt; callback will be called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try source.backup(
    to: destination,
    pagesPerStep: ...)
    { backupProgress in
       print(&quot;Database backup progress:&quot;, backupProgress)
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Aborting an Incomplete Backup&lt;/h3&gt; 
&lt;p&gt;If a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == false&lt;/code&gt;, the backup will be aborted and the error rethrown. However, if a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == true&lt;/code&gt;, the backup is unaffected and the error is silently ignored.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Passing non-default values of &lt;code&gt;pagesPerStep&lt;/code&gt; or &lt;code&gt;progress&lt;/code&gt; to the backup methods is an advanced API intended to provide additional capabilities to expert users. GRDB&#39;s backup API provides a faithful, low-level wrapper to the underlying SQLite online backup API. GRDB&#39;s documentation is not a comprehensive substitute for the official SQLite &lt;a href=&quot;https://www.sqlite.org/c3ref/backup_finish.html&quot;&gt;documentation of their backup API&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Interrupt a Database&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;interrupt()&lt;/code&gt; method&lt;/strong&gt; causes any pending database operation to abort and return at its earliest opportunity.&lt;/p&gt; 
&lt;p&gt;It can be called from any thread.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dbQueue.interrupt()
dbPool.interrupt()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A call to &lt;code&gt;interrupt()&lt;/code&gt; that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after &lt;code&gt;interrupt()&lt;/code&gt; returns.&lt;/p&gt; 
&lt;p&gt;A database operation that is interrupted will throw a DatabaseError with code &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt;. If the interrupted SQL operation is an INSERT, UPDATE, or DELETE that is inside an explicit transaction, then the entire transaction will be rolled back automatically. If the rolled back transaction was started by a transaction-wrapping method such as &lt;code&gt;DatabaseWriter.write&lt;/code&gt; or &lt;code&gt;Database.inTransaction&lt;/code&gt;, then all database accesses will throw a DatabaseError with code &lt;code&gt;SQLITE_ABORT&lt;/code&gt; until the wrapping method returns.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.write { db in
    try Player(...).insert(db)     // throws SQLITE_INTERRUPT
    try Player(...).insert(db)     // not executed
}                                  // throws SQLITE_INTERRUPT

try dbQueue.write { db in
    do {
        try Player(...).insert(db) // throws SQLITE_INTERRUPT
    } catch { }
}                                  // throws SQLITE_ABORT

try dbQueue.write { db in
    do {
        try Player(...).insert(db) // throws SQLITE_INTERRUPT
    } catch { }
    try Player(...).insert(db)     // throws SQLITE_ABORT
}                                  // throws SQLITE_ABORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can catch both &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt; and &lt;code&gt;SQLITE_ABORT&lt;/code&gt; errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try dbPool.write { db in ... }
} catch DatabaseError.SQLITE_INTERRUPT, DatabaseError.SQLITE_ABORT {
    // Oops, the database was interrupted.
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://www.sqlite.org/c3ref/interrupt.html&quot;&gt;Interrupt A Long-Running Query&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Avoiding SQL Injection&lt;/h2&gt; 
&lt;p&gt;SQL injection is a technique that lets an attacker nuke your database.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/exploits_of_a_mom.png&quot; alt=&quot;XKCD: Exploits of a Mom&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here is an example of code that is vulnerable to SQL injection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// BAD BAD BAD
let id = 1
let name = textField.text
try dbQueue.write { db in
    try db.execute(sql: &quot;UPDATE students SET name = &#39;\(name)&#39; WHERE id = \(id)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the user enters a funny string like &lt;code&gt;Robert&#39;; DROP TABLE students; --&lt;/code&gt;, SQLite will see the following SQL, and drop your database table instead of updating a name as intended:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;UPDATE students SET name = &#39;Robert&#39;;
DROP TABLE students;
--&#39; WHERE id = 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To avoid those problems, &lt;strong&gt;never embed raw values in your SQL queries&lt;/strong&gt;. The only correct technique is to provide &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&quot;&gt;arguments&lt;/a&gt; to your raw SQL queries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name = textField.text
try dbQueue.write { db in
    // Good
    try db.execute(
        sql: &quot;UPDATE students SET name = ? WHERE id = ?&quot;,
        arguments: [name, id])
    
    // Just as good
    try db.execute(
        sql: &quot;UPDATE students SET name = :name WHERE id = :id&quot;,
        arguments: [&quot;name&quot;: name, &quot;id&quot;: id])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&quot;&gt;records&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;, GRDB always prevents SQL injection for you:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let id = 1
let name = textField.text
try dbQueue.write { db in
    if var student = try Student.fetchOne(db, id: id) {
        student.name = name
        try student.update(db)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Error Handling&lt;/h2&gt; 
&lt;p&gt;GRDB can throw &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&quot;&gt;DatabaseError&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&quot;&gt;RecordError&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rowdecodingerror&quot;&gt;RowDecodingError&lt;/a&gt;, or crash your program with a &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&quot;&gt;fatal error&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Considering that a local database is not some JSON loaded from a remote server, GRDB focuses on &lt;strong&gt;trusted databases&lt;/strong&gt;. Dealing with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&quot;&gt;untrusted databases&lt;/a&gt; requires extra care.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&quot;&gt;DatabaseError&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&quot;&gt;RecordError&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rowdecodingerror&quot;&gt;RowDecodingError&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&quot;&gt;Fatal Errors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&quot;&gt;How to Deal with Untrusted Inputs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-log&quot;&gt;Error Log&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;DatabaseError&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseerror&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;DatabaseError&lt;/strong&gt; are thrown on SQLite errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try Pet(masterId: 1, name: &quot;Bobby&quot;).insert(db)
} catch let error as DatabaseError {
    // The SQLite error code: 19 (SQLITE_CONSTRAINT)
    error.resultCode
    
    // The extended error code: 787 (SQLITE_CONSTRAINT_FOREIGNKEY)
    error.extendedResultCode
    
    // The eventual SQLite message: FOREIGN KEY constraint failed
    error.message
    
    // The eventual erroneous SQL query
    // &quot;INSERT INTO pet (masterId, name) VALUES (?, ?)&quot;
    error.sql
    
    // The eventual SQL arguments
    // [1, &quot;Bobby&quot;]
    error.arguments
    
    // Full error description
    // &amp;gt; SQLite error 19: FOREIGN KEY constraint failed -
    // &amp;gt; while executing `INSERT INTO pet (masterId, name) VALUES (?, ?)`
    error.description
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to see statement arguments in the error description, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/configuration/publicstatementarguments&quot;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SQLite uses &lt;a href=&quot;https://www.sqlite.org/rescode.html&quot;&gt;results codes&lt;/a&gt; to distinguish between various errors&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;You can catch a DatabaseError and match on result codes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try ...
} catch let error as DatabaseError {
    switch error {
    case DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY:
        // foreign key constraint error
    case DatabaseError.SQLITE_CONSTRAINT:
        // any other constraint error
    default:
        // any other database error
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also directly match errors on result codes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try ...
} catch DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY {
    // foreign key constraint error
} catch DatabaseError.SQLITE_CONSTRAINT {
    // any other constraint error
} catch {
    // any other database error
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each DatabaseError has two codes: an &lt;code&gt;extendedResultCode&lt;/code&gt; (see &lt;a href=&quot;https://www.sqlite.org/rescode.html#extended_result_code_list&quot;&gt;extended result code&lt;/a&gt;), and a less precise &lt;code&gt;resultCode&lt;/code&gt; (see &lt;a href=&quot;https://www.sqlite.org/rescode.html#primary_result_code_list&quot;&gt;primary result code&lt;/a&gt;). Extended result codes are refinements of primary result codes, as &lt;code&gt;SQLITE_CONSTRAINT_FOREIGNKEY&lt;/code&gt; is to &lt;code&gt;SQLITE_CONSTRAINT&lt;/code&gt;, for example.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: SQLite has progressively introduced extended result codes across its versions. The &lt;a href=&quot;http://www.sqlite.org/changes.html&quot;&gt;SQLite release notes&lt;/a&gt; are unfortunately not quite clear about that: write your handling of extended result codes with care.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;RecordError&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/recorderror&quot;&gt;&lt;code&gt;RecordError&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RecordError&lt;/strong&gt; is thrown by the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; protocol when the &lt;code&gt;update&lt;/code&gt; method could not find any row to update:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try player.update(db)
} catch let RecordError.recordNotFound(databaseTableName: table, key: key) {
    print(&quot;Key \(key) was not found in table \(table).&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;RecordError&lt;/strong&gt; is also thrown by the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; protocol when the &lt;code&gt;find&lt;/code&gt; method does not find any record:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    let player = try Player.find(db, id: 42)
} catch let RecordError.recordNotFound(databaseTableName: table, key: key) {
    print(&quot;Key \(key) was not found in table \(table).&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RowDecodingError&lt;/h3&gt; 
&lt;p&gt;📖 &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/rowdecodingerror&quot;&gt;&lt;code&gt;RowDecodingError&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RowDecodingError&lt;/strong&gt; is thrown when the application can not decode a value from a database row. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let row = try Row.fetchOne(db, sql: &quot;SELECT NULL AS name&quot;)!
// RowDecodingError: could not decode String from database value NULL.
let name = try row.decode(String.self, forColumn: &quot;name&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fatal Errors&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Fatal errors notify that the program, or the database, has to be changed.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;They uncover programmer errors, false assumptions, and prevent misuses. Here are a few examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;The code asks for a non-optional value, when the database contains NULL:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// fatal error: could not convert NULL to String.
let name: String = row[&quot;name&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, use &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/columndefinition/notnull(onconflict:)&quot;&gt;NOT NULL constraints&lt;/a&gt;, or load an optional:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String? = row[&quot;name&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Conversion from database value to Swift type fails:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// fatal error: could not convert &quot;Mom’s birthday&quot; to Date.
let date: Date = row[&quot;date&quot;]

// fatal error: could not convert &quot;&quot; to URL.
let url: URL = row[&quot;url&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, or use &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; to handle all possible cases:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let dbValue: DatabaseValue = row[&quot;date&quot;]
if dbValue.isNull {
    // Handle NULL
} else if let date = Date.fromDatabaseValue(dbValue) {
    // Handle valid date
} else {
    // Handle invalid date
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;The database can&#39;t guarantee that the code does what it says:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// fatal error: table player has no unique index on column email
try Player.deleteOne(db, key: [&quot;email&quot;: &quot;arthur@example.com&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: add a unique index to the player.email column, or use the &lt;code&gt;deleteAll&lt;/code&gt; method to make it clear that you may delete more than one row:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try Player.filter { $0.email == &quot;arthur@example.com&quot; }.deleteAll(db)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database connections are not reentrant:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// fatal error: Database methods are not reentrant.
dbQueue.write { db in
    dbQueue.write { db in
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: avoid reentrancy, and instead pass a database connection along.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How to Deal with Untrusted Inputs&lt;/h3&gt; 
&lt;p&gt;Let&#39;s consider the code below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let sql = &quot;SELECT ...&quot;

// Some untrusted arguments for the query
let arguments: [String: Any] = ...
let rows = try Row.fetchCursor(db, sql: sql, arguments: StatementArguments(arguments))

while let row = try rows.next() {
    // Some untrusted database value:
    let date: Date? = row[0]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It has two opportunities to throw fatal errors:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Untrusted arguments&lt;/strong&gt;: The dictionary may contain values that do not conform to the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&quot;&gt;DatabaseValueConvertible protocol&lt;/a&gt;, or may miss keys required by the statement.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Untrusted database content&lt;/strong&gt;: The row may contain a non-null value that can&#39;t be turned into a date.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In such a situation, you can still avoid fatal errors by exposing and handling each failure point, one level down in the GRDB API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Untrusted arguments
if let arguments = StatementArguments(arguments) {
    let statement = try db.makeStatement(sql: sql)
    try statement.setArguments(arguments)
    
    var cursor = try Row.fetchCursor(statement)
    while let row = try iterator.next() {
        // Untrusted database content
        let dbValue: DatabaseValue = row[0]
        if dbValue.isNull {
            // Handle NULL
        if let date = Date.fromDatabaseValue(dbValue) {
            // Handle valid date
        } else {
            // Handle invalid date
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&quot;&gt;DatabaseValue&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Error Log&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This global error callback must be configured early in the lifetime of your application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Database.logError = { (resultCode, message) in
    NSLog(&quot;%@&quot;, &quot;SQLite error \(resultCode): \(message)&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Database.logError must be set before any database connection is opened. This includes the connections that your application opens with GRDB, but also connections opened by other tools, such as third-party libraries. Setting it after a connection has been opened is an SQLite misuse, and has no effect.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See &lt;a href=&quot;https://sqlite.org/errlog.html&quot;&gt;The Error And Warning Log&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Unicode&lt;/h2&gt; 
&lt;p&gt;SQLite lets you store unicode strings in the database.&lt;/p&gt; 
&lt;p&gt;However, SQLite does not provide any unicode-aware string transformations or comparisons.&lt;/p&gt; 
&lt;h3&gt;Unicode functions&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;UPPER&lt;/code&gt; and &lt;code&gt;LOWER&lt;/code&gt; built-in SQLite functions are not unicode-aware:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// &quot;JéRôME&quot;
try String.fetchOne(db, sql: &quot;SELECT UPPER(&#39;Jérôme&#39;)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GRDB extends SQLite with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&quot;&gt;SQL functions&lt;/a&gt; that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// &quot;JÉRÔME&quot;
let uppercased = DatabaseFunction.uppercase
try String.fetchOne(db, sql: &quot;SELECT \(uppercased.name)(&#39;Jérôme&#39;)&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Those unicode-aware string functions are also readily available in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&quot;&gt;query interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Player.select { $0.name.uppercased }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;String Comparison&lt;/h3&gt; 
&lt;p&gt;SQLite compares strings in many occasions: when you sort rows according to a string column, or when you use a comparison operator such as &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The comparison result comes from a &lt;em&gt;collating function&lt;/em&gt;, or &lt;em&gt;collation&lt;/em&gt;. SQLite comes with three built-in collations that do not support Unicode: &lt;a href=&quot;https://www.sqlite.org/datatype3.html#collation&quot;&gt;binary, nocase, and rtrim&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;GRDB comes with five extra collations that leverage unicode-aware comparisons based on the standard Swift String comparison functions and operators:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;unicodeCompare&lt;/code&gt; (uses the built-in &lt;code&gt;&amp;lt;=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; Swift operators)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;caseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;localizedCompare&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;localizedStandardCompare&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A collation can be applied to a table column. All comparisons involving this column will then automatically trigger the comparison function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try db.create(table: &quot;player&quot;) { t in
    // Guarantees case-insensitive email unicity
    t.column(&quot;email&quot;, .text).unique().collate(.nocase)
    
    // Sort names in a localized case insensitive way
    t.column(&quot;name&quot;, .text).collate(.localizedCaseInsensitiveCompare)
}

// Players are sorted in a localized case insensitive way:
let players = try Player.order(\.name).fetchAll(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: SQLite &lt;em&gt;requires&lt;/em&gt; host applications to provide the definition of any collation other than binary, nocase and rtrim. When a database file has to be shared or migrated to another SQLite library of platform (such as the Android version of your application), make sure you provide a compatible collation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you can&#39;t or don&#39;t want to define the comparison behavior of a column (see warning above), you can still use an explicit collation in SQL requests and in the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&quot;&gt;query interface&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let collation = DatabaseCollation.localizedCaseInsensitiveCompare
let players = try Player.fetchAll(db,
    sql: &quot;SELECT * FROM player ORDER BY name COLLATE \(collation.name))&quot;)
let players = try Player.order { $0.name.collating(collation) }.fetchAll(db)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;You can also define your own collations&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let collation = DatabaseCollation(&quot;customCollation&quot;) { (lhs, rhs) -&amp;gt; NSComparisonResult in
    // return the comparison of lhs and rhs strings.
}

// Make the collation available to a database connection
var config = Configuration()
config.prepareDatabase { db in
    db.add(collation: collation)
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Memory Management&lt;/h2&gt; 
&lt;p&gt;Both SQLite and GRDB use non-essential memory that help them perform better.&lt;/p&gt; 
&lt;p&gt;You can reclaim this memory with the &lt;code&gt;releaseMemory&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Release as much memory as possible.
dbQueue.releaseMemory()
dbPool.releaseMemory()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This method blocks the current thread until all current database accesses are completed, and the memory collected.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: If &lt;code&gt;DatabasePool.releaseMemory()&lt;/code&gt; is called while a long read is performed concurrently, then no other read access will be possible until this long read has completed, and the memory has been released. If this does not suit your application needs, look for the asynchronous options below:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can release memory in an asynchronous way as well:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// On a DatabaseQueue
dbQueue.asyncWriteWithoutTransaction { db in
    db.releaseMemory()
}

// On a DatabasePool
dbPool.releaseMemoryEventually()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;DatabasePool.releaseMemoryEventually()&lt;/code&gt; does not block the current thread, and does not prevent concurrent database accesses. In exchange for this convenience, you don&#39;t know when memory has been freed.&lt;/p&gt; 
&lt;h3&gt;Memory Management on iOS&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;The iOS operating system likes applications that do not consume much memory.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;Database queues&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;pools&lt;/a&gt; automatically free non-essential memory when the application receives a memory warning, and when the application enters background.&lt;/p&gt; 
&lt;p&gt;You can opt out of this automatic memory management:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.automaticMemoryManagement = false
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config) // or DatabasePool
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;FAQ&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-opening-connections&quot;&gt;FAQ: Opening Connections&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&quot;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&quot;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&quot;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-sql&quot;&gt;FAQ: SQL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&quot;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-general&quot;&gt;FAQ: General&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&quot;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&quot;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&quot;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-associations&quot;&gt;FAQ: Associations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&quot;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-valueobservation&quot;&gt;FAQ: ValueObservation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&quot;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-errors&quot;&gt;FAQ: Errors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&quot;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&quot;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&quot;&gt;SQLite error 1 &quot;no such column&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&quot;&gt;SQLite error 10 &quot;disk I/O error&quot;, SQLite error 23 &quot;not authorized&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&quot;&gt;SQLite error 21 &quot;wrong number of statement arguments&quot; with LIKE queries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ: Opening Connections&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&quot;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&quot;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&quot;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I create a database in my application?&lt;/h3&gt; 
&lt;p&gt;First choose a proper location for the database file. Document-based applications will let the user pick a location. Apps that use the database as a global storage will prefer the Application Support directory.&lt;/p&gt; 
&lt;p&gt;The sample code below creates or opens a database file inside its dedicated directory (a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseconnections&quot;&gt;recommended practice&lt;/a&gt;). On the first run, a new empty database file is created. On subsequent runs, the database file already exists, so it just opens a connection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// HOW TO create an empty database, or open an existing database file

// Create the &quot;Application Support/MyDatabase&quot; directory
let fileManager = FileManager.default
let appSupportURL = try fileManager.url(
    for: .applicationSupportDirectory, in: .userDomainMask,
    appropriateFor: nil, create: true) 
let directoryURL = appSupportURL.appendingPathComponent(&quot;MyDatabase&quot;, isDirectory: true)
try fileManager.createDirectory(at: directoryURL, withIntermediateDirectories: true)

// Open or create the database
let databaseURL = directoryURL.appendingPathComponent(&quot;db.sqlite&quot;)
let dbQueue = try DatabaseQueue(path: databaseURL.path)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How do I open a database stored as a resource of my application?&lt;/h3&gt; 
&lt;p&gt;Open a read-only connection to your resource:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// HOW TO open a read-only connection to a database resource

// Get the path to the database resource.
if let dbPath = Bundle.main.path(forResource: &quot;db&quot;, ofType: &quot;sqlite&quot;) {
    // If the resource exists, open a read-only connection.
    // Writes are disallowed because resources can not be modified. 
    var config = Configuration()
    config.readonly = true
    let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
} else {
    // The database resource can not be found.
    // Fix your setup, or report the problem to the user. 
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How do I close a database connection?&lt;/h3&gt; 
&lt;p&gt;Database connections are automatically closed when &lt;code&gt;DatabaseQueue&lt;/code&gt; or &lt;code&gt;DatabasePool&lt;/code&gt; instances are deinitialized.&lt;/p&gt; 
&lt;p&gt;If the correct execution of your program depends on precise database closing, perform an explicit call to &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasereader/close()&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. This method may fail and create zombie connections, so please check its detailed documentation.&lt;/p&gt; 
&lt;h2&gt;FAQ: SQL&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&quot;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I print a request as SQL?&lt;/h3&gt; 
&lt;p&gt;When you want to debug a request that does not deliver the expected results, you may want to print the SQL that is actually executed.&lt;/p&gt; 
&lt;p&gt;You can compile the request into a prepared &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;try dbQueue.read { db in
    let request = Player.filter { $0.email == &quot;arthur@example.com&quot; }
    let statement = try request.makePreparedRequest(db).statement
    print(statement) // SELECT * FROM player WHERE email = ?
    print(statement.arguments) // [&quot;arthur@example.com&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another option is to setup a tracing function that prints out the executed SQL requests. For example, provide a tracing function when you connect to the database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Prints all SQL statements
var config = Configuration()
config.prepareDatabase { db in
    db.trace { print($0) }
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)

try dbQueue.read { db in
    // Prints &quot;SELECT * FROM player WHERE email = ?&quot;
    let players = try Player.filter { $0.email == &quot;arthur@example.com&quot; }.fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/configuration/publicstatementarguments&quot;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;FAQ: General&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&quot;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&quot;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&quot;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I monitor the duration of database statements execution?&lt;/h3&gt; 
&lt;p&gt;Use the &lt;code&gt;trace(options:_:)&lt;/code&gt; method, with the &lt;code&gt;.profile&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var config = Configuration()
config.prepareDatabase { db in
    db.trace(options: .profile) { event in
        // Prints all SQL statements with their duration
        print(event)
        
        // Access to detailed profiling information
        if case let .profile(statement, duration) = event, duration &amp;gt; 0.5 {
            print(&quot;Slow query: \(statement.sql)&quot;)
        }
    }
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)

try dbQueue.read { db in
    let players = try Player.filter { $0.email == &quot;arthur@example.com&quot; }.fetchAll(db)
    // Prints &quot;0.003s SELECT * FROM player WHERE email = ?&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/configuration/publicstatementarguments&quot;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;What Are Experimental Features?&lt;/h3&gt; 
&lt;p&gt;Since GRDB 1.0, all backwards compatibility guarantees of &lt;a href=&quot;http://semver.org&quot;&gt;semantic versioning&lt;/a&gt; apply: no breaking change will happen until the next major version of the library.&lt;/p&gt; 
&lt;p&gt;There is an exception, though: &lt;em&gt;experimental features&lt;/em&gt;, marked with the &quot;&lt;strong&gt;&lt;span&gt;🔥&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&quot; badge. Those are advanced features that are too young, or lack user feedback. They are not stabilized yet.&lt;/p&gt; 
&lt;p&gt;Those experimental features are not protected by semantic versioning, and may break between two minor releases of the library. To help them becoming stable, &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues&quot;&gt;your feedback&lt;/a&gt; is greatly appreciated.&lt;/p&gt; 
&lt;h3&gt;Does GRDB support library evolution and ABI stability?&lt;/h3&gt; 
&lt;p&gt;No, GRDB does not support library evolution and ABI stability. The only promise is API stability according to &lt;a href=&quot;http://semver.org&quot;&gt;semantic versioning&lt;/a&gt;, with an exception for &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&quot;&gt;experimental features&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Yet, GRDB can be built with the &quot;Build Libraries for Distribution&quot; Xcode option (&lt;code&gt;BUILD_LIBRARY_FOR_DISTRIBUTION&lt;/code&gt;), so that you can build binary frameworks at your convenience.&lt;/p&gt; 
&lt;h2&gt;FAQ: Associations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&quot;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I filter records and only keep those that are associated to another record?&lt;/h3&gt; 
&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch books that have an author, and discard anonymous books.&lt;/p&gt; 
&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Book: TableRecord {
    ...
    static let author = belongsTo(Author.self)
}

struct Author: TableRecord {
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we can write our request and only fetch books that have an author, discarding anonymous ones:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let books: [Book] = try dbQueue.read { db in
    // SELECT book.* FROM book 
    // JOIN author ON author.id = book.authorID
    let request = Book.joining(required: Book.author)
    return try request.fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note how this request does not use the &lt;code&gt;filter&lt;/code&gt; method. Indeed, we don&#39;t have any condition to express on any column. Instead, we just need to &quot;require that a book can be joined to its author&quot;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt; below for the opposite question.&lt;/p&gt; 
&lt;h3&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/h3&gt; 
&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch anonymous books that do not have any author.&lt;/p&gt; 
&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Book: TableRecord {
    ...
    static let author = belongsTo(Author.self)
}

struct Author: TableRecord {
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we can write our request and only fetch anonymous books that don&#39;t have any author:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let books: [Book] = try dbQueue.read { db in
    // SELECT book.* FROM book
    // LEFT JOIN author ON author.id = book.authorID
    // WHERE author.id IS NULL
    let authorAlias = TableAlias&amp;lt;Author&amp;gt;()
    let request = Book
        .joining(optional: Book.author.aliased(authorAlias))
        .filter(!authorAlias.exists)
    return try request.fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This request uses a TableAlias in order to be able to filter on the eventual associated author. We make sure that the &lt;code&gt;Author.primaryKey&lt;/code&gt; is nil, which is another way to say it does not exist: the book has no author.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&quot;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt; above for the opposite question.&lt;/p&gt; 
&lt;h3&gt;How do I select only one column of an associated record?&lt;/h3&gt; 
&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to fetch all books with their author name, but not the full associated author records.&lt;/p&gt; 
&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Book: Decodable, TableRecord {
    ...
    static let author = belongsTo(Author.self)
}

struct Author: Decodable, TableRecord {
    ...
    enum Columns {
        static let name = Column(CodingKeys.name)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we can write our request and the ad-hoc record that decodes it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct BookInfo: Decodable, FetchableRecord {
    var book: Book
    var authorName: String? // nil when the book is anonymous
    
    static func all() -&amp;gt; QueryInterfaceRequest&amp;lt;BookInfo&amp;gt; {
        // SELECT book.*, author.name AS authorName
        // FROM book
        // LEFT JOIN author ON author.id = book.authorID
        return Book
            .annotated(withOptional: Book.author.select { 
                $0.name.forKey(CodingKeys.authorName)
            })
            .asRequest(of: BookInfo.self)
    }
}

let bookInfos: [BookInfo] = try dbQueue.read { db in
    BookInfo.all().fetchAll(db)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By defining the request as a static method of BookInfo, you have access to the private &lt;code&gt;CodingKeys.authorName&lt;/code&gt;, and a compiler-checked SQL column name.&lt;/p&gt; 
&lt;p&gt;By using the &lt;code&gt;annotated(withOptional:)&lt;/code&gt; method, you append the author name to the top-level selection that can be decoded by the ad-hoc record.&lt;/p&gt; 
&lt;p&gt;By using &lt;code&gt;asRequest(of:)&lt;/code&gt;, you enhance the type-safety of your request.&lt;/p&gt; 
&lt;h2&gt;FAQ: ValueObservation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&quot;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Why is ValueObservation not publishing value changes?&lt;/h3&gt; 
&lt;p&gt;Sometimes it looks that a &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/valueobservation&quot;&gt;ValueObservation&lt;/a&gt; does not notify the changes you expect.&lt;/p&gt; 
&lt;p&gt;There may be four possible reasons for this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The expected changes were not committed into the database.&lt;/li&gt; 
 &lt;li&gt;The expected changes were committed into the database, but were quickly overwritten.&lt;/li&gt; 
 &lt;li&gt;The observation was stopped.&lt;/li&gt; 
 &lt;li&gt;The observation does not track the expected database region.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To answer the first two questions, look at SQL statements executed by the database. This is done when you open the database connection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Prints all SQL statements
var config = Configuration()
config.prepareDatabase { db in
    db.trace { print(&quot;SQL: \($0)&quot;) }
}
let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If, after that, you are convinced that the expected changes were committed into the database, and not overwritten soon after, trace observation events:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let observation = ValueObservation
    .tracking { db in ... }
    .print() // &amp;lt;- trace observation events
let cancellable = observation.start(...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Look at the observation logs which start with &lt;code&gt;cancel&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt;: maybe the observation was cancelled by your app, or did fail with an error.&lt;/p&gt; 
&lt;p&gt;Look at the observation logs which start with &lt;code&gt;value&lt;/code&gt;: make sure, again, that the expected value was not actually notified, then overwritten.&lt;/p&gt; 
&lt;p&gt;Finally, look at the observation logs which start with &lt;code&gt;tracked region&lt;/code&gt;. Does the printed database region cover the expected changes?&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;empty&lt;/code&gt;: The empty region, which tracks nothing and never triggers the observation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;player(*)&lt;/code&gt;: The full &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;player(id,name)&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;player(id,name)[1]&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the row with id 1 in the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;player(*),team(*)&lt;/code&gt;: Both the full &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;team&lt;/code&gt; tables&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you happen to use the &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; method and see a mismatch between the tracked region and your expectation, then change the definition of your observation by using &lt;code&gt;tracking(_:)&lt;/code&gt;. You should witness that the logs which start with &lt;code&gt;tracked region&lt;/code&gt; now evolve in order to include the expected changes, and that you get the expected notifications.&lt;/p&gt; 
&lt;p&gt;If after all those steps (thanks you!), your observation is still failing you, please &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/new&quot;&gt;open an issue&lt;/a&gt; and provide a &lt;a href=&quot;https://stackoverflow.com/help/minimal-reproducible-example&quot;&gt;minimal reproducible example&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;FAQ: Errors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&quot;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&quot;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&quot;&gt;SQLite error 1 &quot;no such column&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&quot;&gt;SQLite error 10 &quot;disk I/O error&quot;, SQLite error 23 &quot;not authorized&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&quot;&gt;SQLite error 21 &quot;wrong number of statement arguments&quot; with LIKE queries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/h3&gt; 
&lt;p&gt;You may get this error when using the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; methods of database queues and pools:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Generic parameter &#39;T&#39; could not be inferred
let string = try dbQueue.read { db in
    let result = try String.fetchOne(db, ...)
    return result
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a limitation of the Swift compiler.&lt;/p&gt; 
&lt;p&gt;The general workaround is to explicitly declare the type of the closure result:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// General Workaround
let string = try dbQueue.read { db -&amp;gt; String? in
    let result = try String.fetchOne(db, ...)
    return result
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also, when possible, write a single-line closure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Single-line closure workaround:
let string = try dbQueue.read { db in
    try String.fetchOne(db, ...)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Mutation of captured var in concurrently-executing code&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;persistence methods&lt;/a&gt; can trigger a compiler error in async contexts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var player = Player(id: nil, name: &quot;Arthur&quot;)
try await dbWriter.write { db in
    // Error: Mutation of captured var &#39;player&#39; in concurrently-executing code
    try player.insert(db)
}
print(player.id) // A non-nil id
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When this happens, prefer the &lt;code&gt;inserted&lt;/code&gt; and &lt;code&gt;saved&lt;/code&gt; methods instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// OK
var player = Player(id: nil, name: &quot;Arthur&quot;)
player = try await dbWriter.write { [player] db in
    return try player.inserted(db)
}
print(player.id) // A non-nil id
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SQLite error 1 &quot;no such column&quot;&lt;/h3&gt; 
&lt;p&gt;This error message is self-explanatory: do check for misspelled or non-existing column names.&lt;/p&gt; 
&lt;p&gt;However, sometimes this error only happens when an app runs on a recent operating system (iOS 14+, Big Sur+, etc.) The error does not happen with previous ones.&lt;/p&gt; 
&lt;p&gt;When this is the case, there are two possible explanations:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Maybe a column name is &lt;em&gt;really&lt;/em&gt; misspelled or missing from the database schema.&lt;/p&gt; &lt;p&gt;To find it, check the SQL statement that comes with the &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&quot;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Maybe the application is using the character &lt;code&gt;&quot;&lt;/code&gt; instead of the single quote &lt;code&gt;&#39;&lt;/code&gt; as the delimiter for string literals in raw SQL queries. Recent versions of SQLite have learned to tell about this deviation from the SQL standard, and this is why you are seeing this error.&lt;/p&gt; &lt;p&gt;For example: this is not standard SQL: &lt;code&gt;UPDATE player SET name = &quot;Arthur&quot;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The standard version is: &lt;code&gt;UPDATE player SET name = &#39;Arthur&#39;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It just happens that old versions of SQLite used to accept the former, non-standard version. Newer versions are able to reject it with an error.&lt;/p&gt; &lt;p&gt;The fix is to change the SQL statements run by the application: replace &lt;code&gt;&quot;&lt;/code&gt; with &lt;code&gt;&#39;&lt;/code&gt; in your string literals.&lt;/p&gt; &lt;p&gt;It may also be time to learn about statement arguments and &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&quot;&gt;SQL injection&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name: String = ...

// NOT STANDARD (double quote)
try db.execute(sql: &quot;&quot;&quot;
    UPDATE player SET name = &quot;\(name)&quot;
    &quot;&quot;&quot;)

// STANDARD, BUT STILL NOT RECOMMENDED (single quote)
try db.execute(sql: &quot;UPDATE player SET name = &#39;\(name)&#39;&quot;)

// STANDARD, AND RECOMMENDED (statement arguments)
try db.execute(sql: &quot;UPDATE player SET name = ?&quot;, arguments: [name])

// STANDARD, AND RECOMMENDED (SQL interpolation)
try db.execute(literal: &quot;UPDATE player SET name = \(name)&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://sqlite.org/quirks.html#double_quoted_string_literals_are_accepted&quot;&gt;Double-quoted String Literals Are Accepted&lt;/a&gt;, and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/configuration/acceptsdoublequotedstringliterals&quot;&gt;Configuration.acceptsDoubleQuotedStringLiterals&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;SQLite error 10 &quot;disk I/O error&quot;, SQLite error 23 &quot;not authorized&quot;&lt;/h3&gt; 
&lt;p&gt;Those errors may be the sign that SQLite can&#39;t access the database due to &lt;a href=&quot;https://developer.apple.com/documentation/uikit/protecting_the_user_s_privacy/encrypting_your_app_s_files&quot;&gt;data protection&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When your application should be able to run in the background on a locked device, it has to catch this error, and, for example, wait for &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom&quot;&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable&quot;&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification and retry the failed database operation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;do {
    try ...
} catch DatabaseError.SQLITE_IOERR, DatabaseError.SQLITE_AUTH {
    // Handle possible data protection error
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This error can also be prevented altogether by using a more relaxed &lt;a href=&quot;https://developer.apple.com/reference/foundation/filemanager/1653059-file_protection_values&quot;&gt;file protection&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;SQLite error 21 &quot;wrong number of statement arguments&quot; with LIKE queries&lt;/h3&gt; 
&lt;p&gt;You may get the error &quot;wrong number of statement arguments&quot; when executing a LIKE query similar to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name = textField.text
let players = try dbQueue.read { db in
    try Player.fetchAll(db, sql: &quot;SELECT * FROM player WHERE name LIKE &#39;%?%&#39;&quot;, arguments: [name])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The problem lies in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; pattern.&lt;/p&gt; 
&lt;p&gt;SQLite only interprets &lt;code&gt;?&lt;/code&gt; as a parameter when it is a placeholder for a whole value (int, double, string, blob, null). In this incorrect query, &lt;code&gt;?&lt;/code&gt; is just a character in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; string: it is not a query parameter, and is not processed in any way. See &lt;a href=&quot;https://www.sqlite.org/lang_expr.html#varparam&quot;&gt;https://www.sqlite.org/lang_expr.html#varparam&lt;/a&gt; for more information about SQLite parameters.&lt;/p&gt; 
&lt;p&gt;To fix the error, you can feed the request with the pattern itself, instead of the name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let name = textField.text
let players: [Player] = try dbQueue.read { db in
    let pattern = &quot;%\(name)%&quot;
    return try Player.fetchAll(db, sql: &quot;SELECT * FROM player WHERE name LIKE ?&quot;, arguments: [pattern])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Sample Code&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&quot;&gt;Documentation&lt;/a&gt; is full of GRDB snippets.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&quot;&gt;Demo Applications&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;GRDB.xcworkspace&lt;/code&gt;: it contains GRDB-enabled playgrounds to play with.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/groue/SortedDifference&quot;&gt;groue/SortedDifference&lt;/a&gt;: How to synchronize a database table with a JSON payload&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://pierlis.com&quot;&gt;Pierlis&lt;/a&gt;, where we write great software.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/alextrob&quot;&gt;@alextrob&lt;/a&gt;, &lt;a href=&quot;https://github.com/alexwlchan&quot;&gt;@alexwlchan&lt;/a&gt;, &lt;a href=&quot;https://github.com/bellebethcooper&quot;&gt;@bellebethcooper&lt;/a&gt;, &lt;a href=&quot;https://github.com/bfad&quot;&gt;@bfad&lt;/a&gt;, &lt;a href=&quot;https://github.com/cfilipov&quot;&gt;@cfilipov&lt;/a&gt;, &lt;a href=&quot;https://github.com/charlesmchen-signal&quot;&gt;@charlesmchen-signal&lt;/a&gt;, &lt;a href=&quot;https://github.com/Chiliec&quot;&gt;@Chiliec&lt;/a&gt;, &lt;a href=&quot;https://github.com/chrisballinger&quot;&gt;@chrisballinger&lt;/a&gt;, &lt;a href=&quot;https://github.com/darrenclark&quot;&gt;@darrenclark&lt;/a&gt;, &lt;a href=&quot;https://github.com/davidkraus&quot;&gt;@davidkraus&lt;/a&gt;, &lt;a href=&quot;https://github.com/eburns-vmware&quot;&gt;@eburns-vmware&lt;/a&gt;, &lt;a href=&quot;https://github.com/felixscheinost&quot;&gt;@felixscheinost&lt;/a&gt;, &lt;a href=&quot;https://github.com/fpillet&quot;&gt;@fpillet&lt;/a&gt;, &lt;a href=&quot;https://github.com/gcox&quot;&gt;@gcox&lt;/a&gt;, &lt;a href=&quot;https://github.com/GetToSet&quot;&gt;@GetToSet&lt;/a&gt;, &lt;a href=&quot;https://github.com/gjeck&quot;&gt;@gjeck&lt;/a&gt;, &lt;a href=&quot;https://github.com/guidedways&quot;&gt;@guidedways&lt;/a&gt;, &lt;a href=&quot;https://github.com/gusrota&quot;&gt;@gusrota&lt;/a&gt;, &lt;a href=&quot;https://github.com/haikusw&quot;&gt;@haikusw&lt;/a&gt;, &lt;a href=&quot;https://github.com/hartbit&quot;&gt;@hartbit&lt;/a&gt;, &lt;a href=&quot;https://github.com/holsety&quot;&gt;@holsety&lt;/a&gt;, &lt;a href=&quot;https://github.com/jroselightricks&quot;&gt;@jroselightricks&lt;/a&gt;, &lt;a href=&quot;https://github.com/kdubb&quot;&gt;@kdubb&lt;/a&gt;, &lt;a href=&quot;https://github.com/kluufger&quot;&gt;@kluufger&lt;/a&gt;, &lt;a href=&quot;https://github.com/KyleLeneau&quot;&gt;@KyleLeneau&lt;/a&gt;, &lt;a href=&quot;https://github.com/layoutSubviews&quot;&gt;@layoutSubviews&lt;/a&gt;, &lt;a href=&quot;https://github.com/mallman&quot;&gt;@mallman&lt;/a&gt;, &lt;a href=&quot;https://github.com/MartinP7r&quot;&gt;@MartinP7r&lt;/a&gt;, &lt;a href=&quot;https://github.com/Marus&quot;&gt;@Marus&lt;/a&gt;, &lt;a href=&quot;https://github.com/mattgallagher&quot;&gt;@mattgallagher&lt;/a&gt;, &lt;a href=&quot;https://github.com/MaxDesiatov&quot;&gt;@MaxDesiatov&lt;/a&gt;, &lt;a href=&quot;https://github.com/michaelkirk-signal&quot;&gt;@michaelkirk-signal&lt;/a&gt;, &lt;a href=&quot;https://github.com/mtancock&quot;&gt;@mtancock&lt;/a&gt;, &lt;a href=&quot;https://github.com/pakko972&quot;&gt;@pakko972&lt;/a&gt;, &lt;a href=&quot;https://github.com/peter-ss&quot;&gt;@peter-ss&lt;/a&gt;, &lt;a href=&quot;https://github.com/pierlo&quot;&gt;@pierlo&lt;/a&gt;, &lt;a href=&quot;https://github.com/pocketpixels&quot;&gt;@pocketpixels&lt;/a&gt;, &lt;a href=&quot;https://github.com/pp5x&quot;&gt;@pp5x&lt;/a&gt;, &lt;a href=&quot;https://github.com/professordeng&quot;&gt;@professordeng&lt;/a&gt;, &lt;a href=&quot;https://github.com/robcas3&quot;&gt;@robcas3&lt;/a&gt;, &lt;a href=&quot;https://github.com/runhum&quot;&gt;@runhum&lt;/a&gt;, &lt;a href=&quot;https://github.com/sberrevoets&quot;&gt;@sberrevoets&lt;/a&gt;, &lt;a href=&quot;https://github.com/schveiguy&quot;&gt;@schveiguy&lt;/a&gt;, &lt;a href=&quot;https://github.com/SD10&quot;&gt;@SD10&lt;/a&gt;, &lt;a href=&quot;https://github.com/sobri909&quot;&gt;@sobri909&lt;/a&gt;, &lt;a href=&quot;https://github.com/sroddy&quot;&gt;@sroddy&lt;/a&gt;, &lt;a href=&quot;https://github.com/steipete&quot;&gt;@steipete&lt;/a&gt;, &lt;a href=&quot;https://github.com/swiftlyfalling&quot;&gt;@swiftlyfalling&lt;/a&gt;, &lt;a href=&quot;https://github.com/Timac&quot;&gt;@Timac&lt;/a&gt;, &lt;a href=&quot;https://github.com/tternes&quot;&gt;@tternes&lt;/a&gt;, &lt;a href=&quot;https://github.com/valexa&quot;&gt;@valexa&lt;/a&gt;, &lt;a href=&quot;https://github.com/wuyuehyang&quot;&gt;@wuyuehyang&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZevEisenberg&quot;&gt;@ZevEisenberg&lt;/a&gt;, and &lt;a href=&quot;https://github.com/zmeyc&quot;&gt;@zmeyc&lt;/a&gt; for their contributions, help, and feedback on GRDB.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aymerick&quot;&gt;@aymerick&lt;/a&gt; and &lt;a href=&quot;https://github.com/kali&quot;&gt;@kali&lt;/a&gt; because SQL.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ccgus/fmdb&quot;&gt;ccgus/fmdb&lt;/a&gt; for its excellency.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/Provider/Style/URI&quot;&gt;URIs don&#39;t change: people change them.&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Adding support for missing SQL functions or operators&lt;/h4&gt; 
&lt;p&gt;This chapter was renamed to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&quot;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Advanced DatabasePool&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;After Commit Hook&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Asynchronous APIs&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Changes Tracking&lt;/h4&gt; 
&lt;p&gt;This chapter has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&quot;&gt;Record Comparison&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Concurrency&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Custom Value Types&lt;/h4&gt; 
&lt;p&gt;Custom Value Types conform to the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasevalueconvertible&quot;&gt;&lt;code&gt;DatabaseValueConvertible&lt;/code&gt;&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h4&gt;Customized Decoding of Database Rows&lt;/h4&gt; 
&lt;p&gt;This chapter has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&quot;&gt;Beyond FetchableRecord&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Customizing the Persistence Methods&lt;/h4&gt; 
&lt;p&gt;This chapter was replaced with &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&quot;&gt;Persistence Callbacks&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Changes Observation&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseobservation&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Configuration&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/configuration&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Queues&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasequeue&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Pools&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasepool&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Database Snapshots&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;DatabaseWriter and DatabaseReader Protocols&lt;/h4&gt; 
&lt;p&gt;This chapter was removed. See the references of &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasereader&quot;&gt;DatabaseReader&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasewriter&quot;&gt;DatabaseWriter&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Date and UUID Coding Strategies&lt;/h4&gt; 
&lt;p&gt;This chapter has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-date-and-uuid-coding-strategies&quot;&gt;Data, Date, and UUID Coding Strategies&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Dealing with External Connections&lt;/h4&gt; 
&lt;p&gt;This chapter has been superseded by the &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databasesharing&quot;&gt;Sharing a Database&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h4&gt;Differences between Database Queues and Pools&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Enabling FTS5 Support&lt;/h4&gt; 
&lt;p&gt;FTS5 is enabled by default since GRDB 6.7.0.&lt;/p&gt; 
&lt;h4&gt;FetchedRecordsController&lt;/h4&gt; 
&lt;p&gt;FetchedRecordsController has been removed in GRDB 5.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseobservation&quot;&gt;Database Observation&lt;/a&gt; chapter describes the other ways to observe the database.&lt;/p&gt; 
&lt;h4&gt;Full-Text Search&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Guarantees and Rules&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Joined Queries Support&lt;/h4&gt; 
&lt;p&gt;This chapter was replaced with the documentation of &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/splittingrowadapters(columncounts:)&quot;&gt;splittingRowAdapters(columnCounts:)&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;List of Record Methods&lt;/h4&gt; 
&lt;p&gt;See &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/queryinterface&quot;&gt;Records and the Query Interface&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Migrations&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/migrations&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;NSNumber and NSDecimalNumber&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Persistable Protocol&lt;/h4&gt; 
&lt;p&gt;This protocol has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&quot;&gt;PersistableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; 
&lt;h4&gt;PersistenceError&lt;/h4&gt; 
&lt;p&gt;This error was renamed to &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&quot;&gt;RecordError&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Prepared Statements&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/statement&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Record Class&lt;/h4&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/record&quot;&gt;&lt;code&gt;Record&lt;/code&gt;&lt;/a&gt; class is a legacy GRDB type. Since GRDB 7, it is not recommended to define record types by subclassing the &lt;code&gt;Record&lt;/code&gt; class.&lt;/p&gt; 
&lt;h4&gt;Row Adapters&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/rowadapter&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;RowConvertible Protocol&lt;/h4&gt; 
&lt;p&gt;This protocol has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&quot;&gt;FetchableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; 
&lt;h4&gt;TableMapping Protocol&lt;/h4&gt; 
&lt;p&gt;This protocol has been renamed &lt;a href=&quot;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&quot;&gt;TableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; 
&lt;h4&gt;Transactions and Savepoints&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/transactions&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Transaction Hook&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;TransactionObserver Protocol&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/transactionobserver&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Unsafe Concurrency APIs&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/concurrency&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;ValueObservation&lt;/h4&gt; 
&lt;p&gt;This chapter has &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/valueobservation&quot;&gt;moved&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;ValueObservation and DatabaseRegionObservation&lt;/h4&gt; 
&lt;p&gt;This chapter has been superseded by &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/valueobservation&quot;&gt;ValueObservation&lt;/a&gt; and &lt;a href=&quot;https://swiftpackageindex.com/groue/GRDB.swift/documentation/grdb/databaseregionobservation&quot;&gt;DatabaseRegionObservation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iina/iina</title>
      <link>https://github.com/iina/iina</link>
      <description>&lt;p&gt;The modern video player for macOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img height=&quot;256&quot; src=&quot;https://github.com/iina/iina/raw/master/iina/Assets.xcassets/AppIcon.appiconset/iina-icon-256.png&quot; /&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt;IINA&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt;IINA is the &lt;b&gt;modern&lt;/b&gt; video player for macOS.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://iina.io/&quot;&gt;Website&lt;/a&gt; · &lt;a href=&quot;https://github.com/iina/iina/releases&quot;&gt;Releases&lt;/a&gt; · &lt;a href=&quot;https://t.me/IINAUsers&quot;&gt;Telegram Group&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://crowdin.com/project/iina&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/iina/localized.svg?sanitize=true&quot; alt=&quot;Crowdin&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Based on &lt;a href=&quot;https://github.com/mpv-player/mpv&quot;&gt;mpv&lt;/a&gt;, which provides the best decoding capacity on macOS&lt;/li&gt; 
 &lt;li&gt;Designed with modern versions of macOS (10.15+) in mind&lt;/li&gt; 
 &lt;li&gt;All the features you need for video and music: subtitles, playlists, chapters…and much, much more!&lt;/li&gt; 
 &lt;li&gt;Force Touch, picture-in-picture and advanced Touch Bar support&lt;/li&gt; 
 &lt;li&gt;Customizable user interface including multiple color schemes and on screen controller (OSC) layout positioning&lt;/li&gt; 
 &lt;li&gt;Standalone Music Mode designed for audio files&lt;/li&gt; 
 &lt;li&gt;Video thumbnails&lt;/li&gt; 
 &lt;li&gt;Online subtitle searching and intelligent local subtitle matching&lt;/li&gt; 
 &lt;li&gt;Unlimited playback history&lt;/li&gt; 
 &lt;li&gt;Convenient and interactive settings for video/audio filters&lt;/li&gt; 
 &lt;li&gt;Fully customizable keyboard, mouse, trackpad, and gesture controls&lt;/li&gt; 
 &lt;li&gt;mpv configuration files and script system for advanced users&lt;/li&gt; 
 &lt;li&gt;Command line tool and browser extensions provided&lt;/li&gt; 
 &lt;li&gt;In active development&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Downloading&lt;/h2&gt; 
&lt;p&gt;You can get IINA through several sources. For the latest stable and beta releases, visit the &lt;a href=&quot;https://github.com/iina/iina/releases&quot;&gt;GitHub release page&lt;/a&gt; or the &lt;a href=&quot;https://iina.io/&quot;&gt;IINA official website&lt;/a&gt;. If you want to try out the latest features and improvements before they are officially released, you can download the nightly builds from our &lt;a href=&quot;https://iina.io/nightly/&quot;&gt;Nightly Download Page&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Nightly builds are generated by GitHub automatically for every commits, which might be buggy and unusable. If you find a bug, please follow the &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/#Contributing&quot;&gt;contributing section&lt;/a&gt; and file an issue.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;IINA uses mpv for media playback. To build IINA, you can either fetch copies of these libraries we have already built (using the instructions below) or build them yourself by skipping to &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/#building-mpv-manually&quot;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using the pre-compiled libraries&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download pre-compiled libraries by running&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;./other/download_libs.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Change the URL in the shell script if you want to download arch-specific binaries. By default, it will download the universal ones. You can download other binaries from &lt;code&gt;https://iina.io/dylibs/${ARCH}/filelist.txt&lt;/code&gt; where &lt;code&gt;ARCH&lt;/code&gt; can be &lt;code&gt;universal&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;If you want to build an older IINA version, make sure to download the corresponding dylibs. For example, &lt;code&gt;https://iina.io/dylibs/1.2.0/universal/filelist.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&quot;https://apps.apple.com/app/xcode/id497799835&quot;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Building mpv manually&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Build your own copy of mpv. If you&#39;re using a package manager to manage dependencies, the steps below outline the process.&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;p&gt;Use our tap as it passes in the correct flags to mpv&#39;s configure script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;brew tap iina/homebrew-mpv-iina
brew install mpv-iina
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;p&gt;Pass in these flags when installing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;port install mpv +uchardet -bundle -rubberband configure.args=&quot;--enable-libmpv-shared --enable-lua --enable-libarchive --enable-libbluray --disable-swift --disable-rubberband&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Copy the corresponding mpv and FFmpeg header files into &lt;code&gt;deps/include/&lt;/code&gt;, replacing the current ones. You can find them on GitHub &lt;a href=&quot;https://github.com/mpv-player/mpv/tree/master/libmpv&quot;&gt;(e.g. mpv)&lt;/a&gt;, but it&#39;s recommended to copy them from the Homebrew or MacPorts installation. Always make sure the header files have the same version of the dylibs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/parse_doc.rb&lt;/code&gt;. This script will fetch the latest mpv documentation and generate &lt;code&gt;MPVOption.swift&lt;/code&gt;, &lt;code&gt;MPVCommand.swift&lt;/code&gt; and &lt;code&gt;MPVProperty.swift&lt;/code&gt;. Copy them from &lt;code&gt;other/&lt;/code&gt; to &lt;code&gt;iina/&lt;/code&gt;, replacing the current files. This is only needed when updating libmpv. Note that if the API changes, the player source code may also need to be changed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/change_lib_dependencies.rb&lt;/code&gt;. This script will deploy the dependent libraries into &lt;code&gt;deps/lib&lt;/code&gt;. If you&#39;re using a package manager to manage dependencies, invoke it like so:&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;other/change_lib_dependencies.rb &quot;$(brew --prefix)&quot; &quot;$(brew --prefix mpv-iina)/lib/libmpv.dylib&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;port contents mpv | grep &#39;\.dylib$&#39; | xargs other/change_lib_dependencies.rb /opt/local
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open &lt;code&gt;iina.xcodeproj&lt;/code&gt; in the &lt;a href=&quot;https://apps.apple.com/app/xcode/id497799835&quot;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Remove all references to &lt;code&gt;.dylib&lt;/code&gt; files from the Frameworks group in the sidebar and add all the &lt;code&gt;.dylib&lt;/code&gt; files in &lt;code&gt;deps/lib&lt;/code&gt; to that group by clicking &quot;Add Files to iina...&quot; in the context menu.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add all the imported &lt;code&gt;.dylib&lt;/code&gt; files into the &quot;Copy Dylibs&quot; phase under &quot;Build Phases&quot; tab of the iina target.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the necessary &lt;code&gt;.dylib&lt;/code&gt; files are present in the &quot;Link Binary With Libraries&quot; phase under &quot;Build Phases&quot;. Xcode should have already added all dylibs under this section.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;IINA is always looking for contributions, whether it&#39;s through bug reports, code, or new translations.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If you find a bug in IINA, or would like to suggest a new feature or enhancement, it&#39;d be nice if you could &lt;a href=&quot;https://github.com/iina/iina/issues&quot;&gt;search your problem first&lt;/a&gt;; while we don&#39;t mind duplicates, keeping issues unique helps us save time and consolidates effort. If you can&#39;t find your issue, feel free to &lt;a href=&quot;https://github.com/iina/iina/issues/new/choose&quot;&gt;file a new one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you&#39;re looking to contribute code, please read &lt;a href=&quot;https://raw.githubusercontent.com/iina/iina/develop/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; — it has information on IINA&#39;s process for handling contributions, and tips on how the code is structured to make your work easier.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you&#39;d like to translate IINA to your language, please visit &lt;a href=&quot;https://translate.iina.io/&quot;&gt;IINA&#39;s instance of Crowdin&lt;/a&gt;. You can create an account for free and start translating. Please do not send a pull request to this repo directly, Crowdin will automatically sync new translations with our repo. If you want to translate IINA into a new language that is currently not on the list, feel free to open an issue.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>realm/SwiftLint</title>
      <link>https://github.com/realm/SwiftLint</link>
      <description>&lt;p&gt;A tool to enforce Swift style and conventions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftLint&lt;/h1&gt; 
&lt;p&gt;A tool to enforce Swift style and conventions, loosely based on the now archived &lt;a href=&quot;https://github.com/github/swift-style-guide&quot;&gt;GitHub Swift Style Guide&lt;/a&gt;. SwiftLint enforces the style guide rules that are generally accepted by the Swift community. These rules are well described in popular style guides like &lt;a href=&quot;https://github.com/kodecocodes/swift-style-guide&quot;&gt;Kodeco&#39;s Swift Style Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;SwiftLint hooks into &lt;a href=&quot;http://clang.llvm.org&quot;&gt;Clang&lt;/a&gt; and &lt;a href=&quot;http://www.jpsim.com/uncovering-sourcekit&quot;&gt;SourceKit&lt;/a&gt; to use the &lt;a href=&quot;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&quot;&gt;AST&lt;/a&gt; representation of your source files for more accurate results.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/realm/SwiftLint&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Frealm%2FSwiftLint%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Supported Swift Versions&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/realm/SwiftLint&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Frealm%2FSwiftLint%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;Supported Platforms&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/jpsim/SwiftLint/_build/latest?definitionId=4?branchName=main&quot;&gt;&lt;img src=&quot;https://dev.azure.com/jpsim/SwiftLint/_apis/build/status/realm.SwiftLint?branchName=main&quot; alt=&quot;Azure Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://buildkite.com/swiftlint/swiftlint&quot;&gt;&lt;img src=&quot;https://badge.buildkite.com/e2a5bc32c347e76e2793e4c5764a5f42bcd42bbe32f79c3a53.svg?branch=main&quot; alt=&quot;Buildkite Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/screenshot.png&quot; alt=&quot;SwiftLint violations highlighted in the Xcode editor&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This project adheres to the &lt;a href=&quot;https://realm.io/conduct&quot;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Switch Language: &lt;a href=&quot;https://github.com/realm/SwiftLint/raw/main/README_CN.md&quot;&gt;中文&lt;/a&gt; &lt;a href=&quot;https://github.com/realm/SwiftLint/raw/main/README_KR.md&quot;&gt;한국어&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Video Introduction&lt;/h2&gt; 
&lt;p&gt;To get a high-level overview of SwiftLint, we encourage you to watch this presentation recorded January 9th, 2017 by JP Simard (transcript provided):&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/9Z1nTMTejqU&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/presentation.svg?sanitize=true&quot; alt=&quot;Presentation&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;SwiftLint can be used as a &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#swift-package-command-plugin&quot;&gt;command plugin&lt;/a&gt; or a &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#build-tool-plugins&quot;&gt;build tool plugin&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Add&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/SimplyDanny/SwiftLintPlugins&quot;, from: &quot;&amp;lt;version&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to your &lt;code&gt;Package.swift&lt;/code&gt; file to consume the latest release of SwiftLint automatically or pin the dependency to a specific version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/SimplyDanny/SwiftLintPlugins&quot;, exact: &quot;&amp;lt;version&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Therein, replace &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; with the desired minimum or exact version.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Consuming the plugins directly from the SwiftLint repository comes with several drawbacks. To avoid them and reduce the overhead imposed, it&#39;s highly recommended to consume the plugins from the dedicated &lt;a href=&quot;https://github.com/SimplyDanny/SwiftLintPlugins&quot;&gt;SwiftLintPlugins repository&lt;/a&gt;, even though plugins from the SwiftLint repository are also absolutely functional. If the plugins from SwiftLint are preferred, just use the URL &lt;code&gt;https://github.com/realm/SwiftLint&lt;/code&gt; in the package declarations above.&lt;/p&gt; 
 &lt;p&gt;However, &lt;a href=&quot;https://github.com/SimplyDanny/SwiftLintPlugins&quot;&gt;SwiftLintPlugins&lt;/a&gt; facilitates plugin adoption massively. It lists some of the reasons that drive the plugins as provided by SwiftLint itself very troublesome. Since the plugin code and the releases are kept in sync, there is no difference in functionality between the two, but you spare yourself a lot of time and trouble using the dedicated plugins repository.&lt;/p&gt; 
 &lt;p&gt;This document assumes you&#39;re relying on SwiftLintPlugins.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding-package-dependencies-to-your-app&quot;&gt;Xcode Package Dependency&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Use the following link to add SwiftLint as a Package Dependency to an Xcode project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;https://github.com/SimplyDanny/SwiftLintPlugins
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Add the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SwiftLint&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will download the SwiftLint binaries and dependencies in &lt;code&gt;Pods/&lt;/code&gt; during your next &lt;code&gt;pod install&lt;/code&gt; execution and will allow you to invoke it via &lt;code&gt;${PODS_ROOT}/SwiftLint/swiftlint&lt;/code&gt; in your Script Build Phases.&lt;/p&gt; 
&lt;p&gt;Installing via Cocoapods also enables pinning to a specific version of SwiftLint rather than simply the latest (which is the case with &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#homebrew&quot;&gt;Homebrew&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Note that this will add the SwiftLint binaries, its dependencies&#39; binaries, and the Swift binary library distribution to the &lt;code&gt;Pods/&lt;/code&gt; directory, so checking in this directory to SCM such as Git is discouraged.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/yonaskolb/mint&quot;&gt;Mint&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mint install realm/SwiftLint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://bazel.build&quot;&gt;Bazel&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Put this in your &lt;code&gt;MODULE.bazel&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bzl&quot;&gt;bazel_dep(name = &quot;swiftlint&quot;, version = &quot;0.52.4&quot;, repo_name = &quot;SwiftLint&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or put this in your &lt;code&gt;WORKSPACE&lt;/code&gt;:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;WORKSPACE&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bzl&quot;&gt;load(&quot;@bazel_tools//tools/build_defs/repo:http.bzl&quot;, &quot;http_archive&quot;)

http_archive(
    name = &quot;build_bazel_rules_apple&quot;,
    sha256 = &quot;390841dd5f8a85fc25776684f4793d56e21b098dfd7243cd145b9831e6ef8be6&quot;,
    url = &quot;https://github.com/bazelbuild/rules_apple/releases/download/2.4.1/rules_apple.2.4.1.tar.gz&quot;,
)

load(
    &quot;@build_bazel_rules_apple//apple:repositories.bzl&quot;,
    &quot;apple_rules_dependencies&quot;,
)

apple_rules_dependencies()

load(
    &quot;@build_bazel_rules_swift//swift:repositories.bzl&quot;,
    &quot;swift_rules_dependencies&quot;,
)

swift_rules_dependencies()

load(
    &quot;@build_bazel_rules_swift//swift:extras.bzl&quot;,
    &quot;swift_rules_extra_dependencies&quot;,
)

swift_rules_extra_dependencies()

http_archive(
    name = &quot;SwiftLint&quot;,
    sha256 = &quot;c6ea58b9c72082cdc1ada4a2d48273ecc355896ed72204cedcc586b6ccb8aca6&quot;,
    url = &quot;https://github.com/realm/SwiftLint/releases/download/0.52.4/bazel.tar.gz&quot;,
)

load(&quot;@SwiftLint//bazel:repos.bzl&quot;, &quot;swiftlint_repos&quot;)

swiftlint_repos()

load(&quot;@SwiftLint//bazel:deps.bzl&quot;, &quot;swiftlint_deps&quot;)

swiftlint_deps()
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Then you can run SwiftLint in the current directory with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;bazel run -c opt @SwiftLint//:swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pre-Built Package&lt;/h3&gt; 
&lt;p&gt;Download &lt;code&gt;SwiftLint.pkg&lt;/code&gt; from the &lt;a href=&quot;https://github.com/realm/SwiftLint/releases/latest&quot;&gt;latest GitHub release&lt;/a&gt; and run it.&lt;/p&gt; 
&lt;h3&gt;From Source&lt;/h3&gt; 
&lt;p&gt;Make sure the build tool &lt;a href=&quot;https://bazel.build&quot;&gt;Bazel&lt;/a&gt; and a recent &lt;a href=&quot;https://www.swift.org/download/&quot;&gt;Swift toolchain&lt;/a&gt; are installed and all tools are discoverable in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To build SwiftLint, clone this repository and run &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] While it may seem intuitive to run SwiftLint before compiling Swift source files to exit a build early when there are lint violations, it is important to understand that SwiftLint is designed to analyze valid source code that is compilable. Non-compiling code can very easily lead to unexpected and confusing results, especially when executing with &lt;code&gt;--fix&lt;/code&gt;/&lt;code&gt;--autocorrect&lt;/code&gt; command line arguments.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Build Tool Plugins&lt;/h3&gt; 
&lt;p&gt;SwiftLint can be used as a build tool plugin for both &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#swift-package-projects&quot;&gt;Swift Package projects&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#xcode-projects&quot;&gt;Xcode projects&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The build tool plugin determines the SwiftLint working directory by locating the topmost config file within the package/project directory. If a config file is not found therein, the package/project directory is used as the working directory.&lt;/p&gt; 
&lt;p&gt;The plugin throws an error when it is unable to resolve the SwiftLint working directory. For example, this will occur in Xcode projects where the target&#39;s Swift files are not located within the project directory.&lt;/p&gt; 
&lt;p&gt;To maximize compatibility with the plugin, avoid project structures that require the use of the &lt;code&gt;--config&lt;/code&gt; option.&lt;/p&gt; 
&lt;h3&gt;Swift Package Projects&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Requires installing via &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Build tool plugins run when building each target. When a project has multiple targets, the plugin must be added to the desired targets individually.&lt;/p&gt; 
&lt;p&gt;To do this, add the plugin to the target(s) to be linted as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.target(
    ...
    plugins: [.plugin(name: &quot;SwiftLintBuildToolPlugin&quot;, package: &quot;SwiftLintPlugins&quot;)]
),
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Swift Package Command Plugin&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Requires installing via &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The command plugin enables running SwiftLint from the command line as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;swift package plugin swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Xcode Projects&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Requires installing via &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#xcode-package-dependency&quot;&gt;Xcode Package Dependency&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Build tool plugins run as a build phase of each target. When a project has multiple targets, the plugin must be added to the desired targets individually.&lt;/p&gt; 
&lt;p&gt;To do this, add the &lt;code&gt;SwiftLintBuildToolPlugin&lt;/code&gt; to the &lt;code&gt;Run Build Tool Plug-ins&lt;/code&gt; phase of the &lt;code&gt;Build Phases&lt;/code&gt; for the target(s) to be linted.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] When using the plugin for the first time, be sure to trust and enable it when prompted. If a macros build warning exists, select it to trust and enable the macros as well.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For unattended use (e.g. on CI), package plugin and macro validations can be disabled with either of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Using &lt;code&gt;xcodebuild&lt;/code&gt; options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;-skipPackagePluginValidation
-skipMacroValidation
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Setting Xcode defaults:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidatation -bool YES
defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The unattended use options bypass Xcode&#39;s validation dialogs and implicitly trust all plugins and macros, which has security implications.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Unexpected Xcode Project Structures&lt;/h4&gt; 
&lt;p&gt;Project structures where SwiftLint&#39;s configuration file is located outside of the package/project directory are not directly supported by the build tool plugin. This is because it isn&#39;t possible to pass arguments to build tool plugins (e.g., passing the config file path).&lt;/p&gt; 
&lt;p&gt;If your project structure doesn&#39;t work directly with the build tool plugin, please consider one of the following options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To use a config file located outside the package/project directory, a config file may be added to that directory specifying a parent config path to the other config file, e.g., &lt;code&gt;parent_config: path/to/.swiftlint.yml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;You can also consider the use of a &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#xcode-run-script-build-phase&quot;&gt;Run Script Build Phase&lt;/a&gt; in place of the build tool plugin.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Xcode Run Script Build Phase&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Based upon the installation method used, the shell command syntax in the Run Script Build Phase may be different or additional configuration could be required. Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#installation&quot;&gt;installation&lt;/a&gt; instructions for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If the build tool plugin does not work for your project setup or when additional custom setup is required, SwiftLint can be added as a Run Script Build Phase. This is useful when a project setup relies on the &lt;code&gt;--config&lt;/code&gt; SwiftLint option; or to lint all targets together in a single &lt;code&gt;swiftlint&lt;/code&gt; invocation. File inclusions and exclusions can be configured in the &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#configuration&quot;&gt;&lt;code&gt;.swiftlint.yml&lt;/code&gt; configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To do this, add a custom script to a &lt;code&gt;Run Script&lt;/code&gt; phase of the &lt;code&gt;Build Phases&lt;/code&gt; of the primary app target, after the &lt;code&gt;Compile Sources&lt;/code&gt; phase. Use the following script implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if command -v swiftlint &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
then
    swiftlint
else
    echo &quot;warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#installation for installation instructions.&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re using the SwiftLintPlugin in a Swift package, you may refer to the &lt;code&gt;swiftlint&lt;/code&gt; executable in the following way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;SWIFT_PACKAGE_DIR=&quot;${BUILD_DIR%Build/*}SourcePackages/artifacts&quot;
SWIFTLINT_CMD=&quot;$SWIFT_PACKAGE_DIR/swiftlintplugins/SwiftLintBinary/SwiftLintBinary.artifactbundle/macos/swiftlint&quot;

if test -f &quot;$SWIFTLINT_CMD&quot; 2&amp;gt;&amp;amp;1
then
    &quot;$SWIFTLINT_CMD&quot;
else
    echo &quot;warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#xcode-run-script-build-phase for installation instructions.&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The &lt;code&gt;SWIFTLINT_CMD&lt;/code&gt; path uses the default Xcode configuration and has been tested on Xcode 15/16. In case of another configuration (e.g. a custom Swift package path), please adapt the values accordingly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- markdownlint-disable MD028 --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Uncheck &lt;code&gt;Based on dependency analysis&lt;/code&gt; to run &lt;code&gt;swiftlint&lt;/code&gt; on all incremental builds, suppressing the unspecified outputs warning.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Consideration for Xcode 15.0&lt;/h4&gt; 
&lt;p&gt;Xcode 15 made a significant change by setting the default value of the &lt;code&gt;ENABLE_USER_SCRIPT_SANDBOXING&lt;/code&gt; build setting from &lt;code&gt;NO&lt;/code&gt; to &lt;code&gt;YES&lt;/code&gt;. As a result, SwiftLint encounters an error related to missing file permissions, which typically manifests as &lt;code&gt;error: Sandbox: swiftlint(19427) deny(1) file-read-data.&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To resolve this issue, it is necessary to manually set the &lt;code&gt;ENABLE_USER_SCRIPT_SANDBOXING&lt;/code&gt; setting to &lt;code&gt;NO&lt;/code&gt; for the specific target that SwiftLint is being configured for.&lt;/p&gt; 
&lt;h4&gt;Consideration for Apple Silicon&lt;/h4&gt; 
&lt;p&gt;If you installed SwiftLint via Homebrew on Apple Silicon, you might experience this warning:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is because Homebrew on Apple Silicon installs the binaries into the &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; folder by default. To instruct Xcode where to find SwiftLint, you can either add &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; environment variable in your build phase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [[ &quot;$(uname -m)&quot; == arm64 ]]
then
    export PATH=&quot;/opt/homebrew/bin:$PATH&quot;
fi

if command -v swiftlint &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
then
    swiftlint
else
    echo &quot;warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#installation for installation instructions.&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or you can create a symbolic link in &lt;code&gt;/usr/local/bin&lt;/code&gt; pointing to the actual binary:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ln -s /opt/homebrew/bin/swiftlint /usr/local/bin/swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Additional Considerations&lt;/h4&gt; 
&lt;p&gt;If you wish to fix violations as well, your script could run &lt;code&gt;swiftlint --fix &amp;amp;&amp;amp; swiftlint&lt;/code&gt; instead of just &lt;code&gt;swiftlint&lt;/code&gt;. This will mean that all correctable violations are fixed while ensuring warnings show up in your project for remaining violations.&lt;/p&gt; 
&lt;p&gt;If you&#39;ve installed SwiftLint via CocoaPods the script should look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&quot;${PODS_ROOT}/SwiftLint/swiftlint&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Visual Studio Code&lt;/h3&gt; 
&lt;p&gt;To integrate SwiftLint with &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt;, install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftlint&quot;&gt;&lt;code&gt;vscode-swiftlint&lt;/code&gt;&lt;/a&gt; extension from the marketplace.&lt;/p&gt; 
&lt;h3&gt;Fastlane&lt;/h3&gt; 
&lt;p&gt;You can use the official &lt;a href=&quot;https://docs.fastlane.tools/actions/swiftlint&quot;&gt;&lt;code&gt;swiftlint&lt;/code&gt; fastlane action&lt;/a&gt; to run SwiftLint as part of your fastlane process.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;swiftlint(
    mode: :lint,                            # SwiftLint mode: :lint (default) or :autocorrect
    executable: &quot;Pods/SwiftLint/swiftlint&quot;, # The SwiftLint binary path (optional). Important if you&#39;ve installed it via CocoaPods
    path: &quot;/path/to/lint&quot;,                  # Specify path to lint (optional)
    output_file: &quot;swiftlint.result.json&quot;,   # The path of the output file (optional)
    reporter: &quot;json&quot;,                       # The custom reporter to use (optional)
    config_file: &quot;.swiftlint-ci.yml&quot;,       # The path of the configuration file (optional)
    files: [                                # List of files to process (optional)
        &quot;AppDelegate.swift&quot;,
        &quot;path/to/project/Model.swift&quot;
    ],
    ignore_exit_status: true,               # Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)
    quiet: true,                            # Don&#39;t print status logs like &#39;Linting &#39; &amp;amp; &#39;Done linting&#39; (Default: false)
    strict: true                            # Fail on warnings? (Default: false)
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;SwiftLint is also available as a &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; image using &lt;code&gt;Ubuntu&lt;/code&gt;. So just the first time you need to pull the docker image using the next command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull ghcr.io/realm/swiftlint:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then following times, you just run &lt;code&gt;swiftlint&lt;/code&gt; inside of the docker like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will execute &lt;code&gt;swiftlint&lt;/code&gt; in the folder where you are right now (&lt;code&gt;pwd&lt;/code&gt;), showing an output like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest
Linting Swift files in current working directory
Linting &#39;RuleDocumentation.swift&#39; (1/490)
...
Linting &#39;YamlSwiftLintTests.swift&#39; (490/490)
Done linting! Found 0 violations, 0 serious in 490 files.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here you have more documentation about the usage of &lt;a href=&quot;https://docs.docker.com/&quot;&gt;Docker Images&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Command Line Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;$ swiftlint help
OVERVIEW: A tool to enforce Swift style and conventions.

USAGE: swiftlint &amp;lt;subcommand&amp;gt;

OPTIONS:
  --version               Show the version.
  -h, --help              Show help information.

SUBCOMMANDS:
  analyze                 Run analysis rules
  docs                    Open SwiftLint documentation website in the default web browser
  generate-docs           Generates markdown documentation for selected group of rules
  lint (default)          Print lint warnings and errors
  baseline                Operations on existing baselines
  reporters               Display the list of reporters and their identifiers
  rules                   Display the list of rules and their identifiers
  version                 Display the current version of SwiftLint

  See &#39;swiftlint help &amp;lt;subcommand&amp;gt;&#39; for detailed help.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run &lt;code&gt;swiftlint&lt;/code&gt; in the directory containing the Swift files to lint. Directories will be searched recursively.&lt;/p&gt; 
&lt;p&gt;To specify a list of files when using &lt;code&gt;lint&lt;/code&gt; or &lt;code&gt;analyze&lt;/code&gt; (like the list of files modified by Xcode specified by the &lt;a href=&quot;https://github.com/norio-nomura/ExtraBuildPhase&quot;&gt;&lt;code&gt;ExtraBuildPhase&lt;/code&gt;&lt;/a&gt; Xcode plugin, or modified files in the working tree based on &lt;code&gt;git ls-files -m&lt;/code&gt;), you can do so by passing the option &lt;code&gt;--use-script-input-files&lt;/code&gt; and setting the following instance variables: &lt;code&gt;SCRIPT_INPUT_FILE_COUNT&lt;/code&gt; and &lt;code&gt;SCRIPT_INPUT_FILE_0&lt;/code&gt;, &lt;code&gt;SCRIPT_INPUT_FILE_1&lt;/code&gt;, ..., &lt;code&gt;SCRIPT_INPUT_FILE_{SCRIPT_INPUT_FILE_COUNT - 1}&lt;/code&gt;. Similarly, files can be read from file lists by passing the option &lt;code&gt;--use-script-input-file-lists&lt;/code&gt; and setting the following instance variables: &lt;code&gt;SCRIPT_INPUT_FILE_LIST_COUNT&lt;/code&gt; and &lt;code&gt;SCRIPT_INPUT_FILE_LIST_0&lt;/code&gt;, &lt;code&gt;SCRIPT_INPUT_FILE_LIST_1&lt;/code&gt;, ..., &lt;code&gt;SCRIPT_INPUT_FILE_LIST_{SCRIPT_INPUT_FILE_LIST_COUNT - 1}&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;These are same environment variables set for input files to &lt;a href=&quot;http://indiestack.com/2014/12/speeding-up-custom-script-phases/&quot;&gt;custom Xcode script phases&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Working With Multiple Swift Versions&lt;/h2&gt; 
&lt;p&gt;SwiftLint hooks into SourceKit so it continues working even as Swift evolves!&lt;/p&gt; 
&lt;p&gt;This also keeps SwiftLint lean, as it doesn&#39;t need to ship with a full Swift compiler, it just communicates with the official one you already have installed on your machine.&lt;/p&gt; 
&lt;p&gt;You should always run SwiftLint with the same toolchain you use to compile your code.&lt;/p&gt; 
&lt;p&gt;You may want to override SwiftLint&#39;s default Swift toolchain if you have multiple toolchains or Xcodes installed.&lt;/p&gt; 
&lt;p&gt;Here&#39;s the order in which SwiftLint determines which Swift toolchain to use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$TOOLCHAIN_DIR&lt;/code&gt; or &lt;code&gt;$TOOLCHAINS&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;xcrun -find swift&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;sourcekitd.framework&lt;/code&gt; is expected to be found in the &lt;code&gt;usr/lib/&lt;/code&gt; subdirectory of the value passed in the paths above.&lt;/p&gt; 
&lt;p&gt;You may also set the &lt;code&gt;TOOLCHAINS&lt;/code&gt; environment variable to the reverse-DNS notation that identifies a Swift toolchain version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 swiftlint --fix
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Linux, SourceKit is expected to be located in &lt;code&gt;/usr/lib/libsourcekitdInProc.so&lt;/code&gt; or specified by the &lt;code&gt;LINUX_SOURCEKIT_LIB_PATH&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h2&gt;Git &lt;code&gt;pre-commit&lt;/code&gt; Hook&lt;/h2&gt; 
&lt;p&gt;SwiftLint can be run as a &lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt; hook. Once &lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;installed&lt;/a&gt;, add this to the &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; in the root of your repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;repos:
  - repo: https://github.com/realm/SwiftLint
    rev: 0.57.1
    hooks:
      - id: swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Adjust &lt;code&gt;rev&lt;/code&gt; to the SwiftLint version of your choice. &lt;code&gt;pre-commit autoupdate&lt;/code&gt; can be used to update to the current version.&lt;/p&gt; 
&lt;p&gt;SwiftLint can be configured using &lt;code&gt;entry&lt;/code&gt; to apply fixes and fail on errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;-   repo: https://github.com/realm/SwiftLint
    rev: 0.57.1
    hooks:
    -   id: swiftlint
        entry: swiftlint --fix --strict
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Rules&lt;/h2&gt; 
&lt;p&gt;Over 200 rules are included in SwiftLint and the Swift community (that&#39;s you!) continues to contribute more over time. &lt;a href=&quot;https://github.com/realm/SwiftLint/raw/main/CONTRIBUTING.md&quot;&gt;Pull requests&lt;/a&gt; are encouraged.&lt;/p&gt; 
&lt;p&gt;You can find an updated list of rules and more information about them in the &lt;a href=&quot;https://realm.github.io/SwiftLint/rule-directory.html&quot;&gt;Rule Directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also check the &lt;a href=&quot;https://github.com/realm/SwiftLint/tree/main/Source/SwiftLintBuiltInRules/Rules&quot;&gt;Source/SwiftLintBuiltInRules/Rules&lt;/a&gt; directory to see their implementation.&lt;/p&gt; 
&lt;h3&gt;Opt-In Rules&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;opt_in_rules&lt;/code&gt; are disabled by default (i.e., you have to explicitly enable them in your configuration file).&lt;/p&gt; 
&lt;p&gt;Guidelines on when to mark a rule as opt-in:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A rule that can have many false positives (e.g. &lt;code&gt;empty_count&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;A rule that is too slow&lt;/li&gt; 
 &lt;li&gt;A rule that is not general consensus or is only useful in some cases (e.g. &lt;code&gt;force_unwrapping&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Disable rules in code&lt;/h3&gt; 
&lt;p&gt;Rules can be disabled with a comment inside a source file with the following format:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;// swiftlint:disable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The rules will be disabled until the end of the file or until the linter sees a matching enable comment:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;// swiftlint:enable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftlint:disable colon
let noWarning :String = &quot;&quot; // No warning about colons immediately after variable names!
// swiftlint:enable colon
let hasWarning :String = &quot;&quot; // Warning generated about colons immediately after variable names
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Including the &lt;code&gt;all&lt;/code&gt; keyword will disable all rules until the linter sees a matching enable comment:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;// swiftlint:disable all&lt;/code&gt; &lt;code&gt;// swiftlint:enable all&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftlint:disable all
let noWarning :String = &quot;&quot; // No warning about colons immediately after variable names!
let i = &quot;&quot; // Also no warning about short identifier names
// swiftlint:enable all
let hasWarning :String = &quot;&quot; // Warning generated about colons immediately after variable names
let y = &quot;&quot; // Warning generated about short identifier names
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s also possible to modify a &lt;code&gt;disable&lt;/code&gt; or &lt;code&gt;enable&lt;/code&gt; command by appending &lt;code&gt;:previous&lt;/code&gt;, &lt;code&gt;:this&lt;/code&gt; or &lt;code&gt;:next&lt;/code&gt; for only applying the command to the previous, this (current) or next line respectively.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftlint:disable:next force_cast
let noWarning = NSNumber() as! Int
let hasWarning = NSNumber() as! Int
let noWarning2 = NSNumber() as! Int // swiftlint:disable:this force_cast
let noWarning3 = NSNumber() as! Int
// swiftlint:disable:previous force_cast
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run &lt;code&gt;swiftlint rules&lt;/code&gt; to print a list of all available rules and their identifiers.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Configure SwiftLint by adding a &lt;code&gt;.swiftlint.yml&lt;/code&gt; file from the directory you&#39;ll run SwiftLint from. The following parameters can be configured:&lt;/p&gt; 
&lt;p&gt;Rule inclusion:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;disabled_rules&lt;/code&gt;: Disable rules from the default enabled set.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;opt_in_rules&lt;/code&gt;: Enable rules that are not part of the default set. The special &lt;code&gt;all&lt;/code&gt; identifier will enable all opt in linter rules, except the ones listed in &lt;code&gt;disabled_rules&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;only_rules&lt;/code&gt;: Only the rules specified in this list will be enabled. Cannot be specified alongside &lt;code&gt;disabled_rules&lt;/code&gt; or &lt;code&gt;opt_in_rules&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;analyzer_rules&lt;/code&gt;: This is an entirely separate list of rules that are only run by the &lt;code&gt;analyze&lt;/code&gt; command. All analyzer rules are opt-in, so this is the only configurable rule list, there are no equivalents for &lt;code&gt;disabled_rules&lt;/code&gt; and &lt;code&gt;only_rules&lt;/code&gt;. The special &lt;code&gt;all&lt;/code&gt; identifier can also be used here to enable all analyzer rules, except the ones listed in &lt;code&gt;disabled_rules&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# By default, SwiftLint uses a set of sensible default rules you can adjust:
disabled_rules: # rule identifiers turned on by default to exclude from running
  - colon
  - comma
  - control_statement
opt_in_rules: # some rules are turned off by default, so you need to opt-in
  - empty_count # find all the available rules by running: `swiftlint rules`

# Alternatively, specify all rules explicitly by uncommenting this option:
# only_rules: # delete `disabled_rules` &amp;amp; `opt_in_rules` if using this
#   - empty_parameters
#   - vertical_whitespace

analyzer_rules: # rules run by `swiftlint analyze`
  - explicit_self

# Case-sensitive paths to include during linting. Directory paths supplied on the
# command line will be ignored.
included: 
  - Sources
excluded: # case-sensitive paths to ignore during linting. Takes precedence over `included`
  - Carthage
  - Pods
  - Sources/ExcludedFolder
  - Sources/ExcludedFile.swift
  - Sources/*/ExcludedFile.swift # exclude files with a wildcard

# If true, SwiftLint will not fail if no lintable files are found.
allow_zero_lintable_files: false

# If true, SwiftLint will treat all warnings as errors.
strict: false

# If true, SwiftLint will treat all errors as warnings.
lenient: false

# The path to a baseline file, which will be used to filter out detected violations.
baseline: Baseline.json

# The path to save detected violations to as a new baseline.
write_baseline: Baseline.json

# If true, SwiftLint will check for updates after linting or analyzing.
check_for_updates: true

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 110
# they can set both implicitly with an array
type_body_length:
  - 300 # warning
  - 400 # error
# or they can set both explicitly
file_length:
  warning: 500
  error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 40
    error: 50
  excluded: iPhone # excluded via string
  allowed_symbols: [&quot;_&quot;] # these are allowed in type names
identifier_name:
  min_length: # only min_length
    error: 4 # only error
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey
reporter: &quot;xcode&quot; # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging, summary)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use environment variables in your configuration file, by using &lt;code&gt;${SOME_VARIABLE}&lt;/code&gt; in a string.&lt;/p&gt; 
&lt;h3&gt;Defining Custom Rules&lt;/h3&gt; 
&lt;p&gt;In addition to the rules that the main SwiftLint project ships with, SwiftLint can also run two types of custom rules that you can define yourself in your own projects:&lt;/p&gt; 
&lt;h4&gt;1. Swift Custom Rules&lt;/h4&gt; 
&lt;p&gt;These rules are written the same way as the Swift-based rules that ship with SwiftLint so they&#39;re fast, accurate, can leverage SwiftSyntax, can be unit tested, and more.&lt;/p&gt; 
&lt;p&gt;Using these requires building SwiftLint with Bazel as described in &lt;a href=&quot;https://vimeo.com/820572803&quot;&gt;this video&lt;/a&gt; or its associated code in &lt;a href=&quot;https://github.com/jpsim/swiftlint-bazel-example&quot;&gt;github.com/jpsim/swiftlint-bazel-example&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;2. Regex Custom Rules&lt;/h4&gt; 
&lt;p&gt;You can define custom regex-based rules in your configuration file using the following syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;custom_rules:
  pirates_beat_ninjas: # rule identifier
    included:
      - &quot;.*\\.swift&quot; # regex that defines paths to include during linting. optional.
    excluded:
      - &quot;.*Test\\.swift&quot; # regex that defines paths to exclude during linting. optional
    name: &quot;Pirates Beat Ninjas&quot; # rule name. optional.
    regex: &quot;([nN]inja)&quot; # matching pattern
    capture_group: 0 # number of regex capture group to highlight the rule violation at. optional.
    match_kinds: # SyntaxKinds to match. optional.
      - comment
      - identifier
    message: &quot;Pirates are better than ninjas.&quot; # violation message. optional.
    severity: error # violation severity. optional.
  no_hiding_in_strings:
    regex: &quot;([nN]inja)&quot;
    match_kinds: string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is what the output would look like:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/custom-rule.png&quot; alt=&quot;Custom violations highlighted in the Xcode editor&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;It is important to note that the regular expression pattern is used with the flags &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; enabled, that is &lt;code&gt;.&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsregularexpression/options/1412529-dotmatcheslineseparators&quot;&gt;matches newlines&lt;/a&gt; and &lt;code&gt;^&lt;/code&gt;/&lt;code&gt;$&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsregularexpression/options/1408263-anchorsmatchlines&quot;&gt;match the start and end of lines&lt;/a&gt;, respectively. If you do not want to have &lt;code&gt;.&lt;/code&gt; match newlines, for example, the regex can be prepended by &lt;code&gt;(?-s)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can filter the matches by providing one or more &lt;code&gt;match_kinds&lt;/code&gt;, which will reject matches that include syntax kinds that are not present in this list. Here are all the possible syntax kinds:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;attribute.builtin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;attribute.id&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;buildconfig.id&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;buildconfig.keyword&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;comment.mark&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;comment.url&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doccomment&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doccomment.field&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;identifier&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;keyword&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;number&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;objectliteral&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parameter&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;placeholder&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;string_interpolation_anchor&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;typeidentifier&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All syntax kinds used in a snippet of Swift code can be extracted asking &lt;a href=&quot;https://github.com/jpsim/SourceKitten&quot;&gt;SourceKitten&lt;/a&gt;. For example, &lt;code&gt;sourcekitten syntax --text &quot;struct S {}&quot;&lt;/code&gt; delivers&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;source.lang.swift.syntaxtype.keyword&lt;/code&gt; for the &lt;code&gt;struct&lt;/code&gt; keyword and&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;source.lang.swift.syntaxtype.identifier&lt;/code&gt; for its name &lt;code&gt;S&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;which match to &lt;code&gt;keyword&lt;/code&gt; and &lt;code&gt;identifier&lt;/code&gt; in the above list.&lt;/p&gt; 
&lt;p&gt;If using custom rules in combination with &lt;code&gt;only_rules&lt;/code&gt;, you must include the literal string &lt;code&gt;custom_rules&lt;/code&gt; in the &lt;code&gt;only_rules&lt;/code&gt; list:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;only_rules:
  - custom_rules

custom_rules:
  no_hiding_in_strings:
    regex: &quot;([nN]inja)&quot;
    match_kinds: string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike Swift custom rules, you can use official SwiftLint builds (e.g. from Homebrew) to run regex custom rules.&lt;/p&gt; 
&lt;h3&gt;Auto-correct&lt;/h3&gt; 
&lt;p&gt;SwiftLint can automatically correct certain violations. Files on disk are overwritten with a corrected version.&lt;/p&gt; 
&lt;p&gt;Please make sure to have backups of these files before running &lt;code&gt;swiftlint --fix&lt;/code&gt;, otherwise important data may be lost.&lt;/p&gt; 
&lt;p&gt;Standard linting is disabled while correcting because of the high likelihood of violations (or their offsets) being incorrect after modifying a file while applying corrections.&lt;/p&gt; 
&lt;h3&gt;Analyze&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;swiftlint analyze&lt;/code&gt; command can lint Swift files using the full type-checked AST. The compiler log path containing the clean &lt;code&gt;swiftc&lt;/code&gt; build command invocation (incremental builds will fail) must be passed to &lt;code&gt;analyze&lt;/code&gt; via the &lt;code&gt;--compiler-log-path&lt;/code&gt; flag. e.g. &lt;code&gt;--compiler-log-path /path/to/xcodebuild.log&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This can be obtained by&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Cleaning DerivedData (incremental builds won&#39;t work with analyze)&lt;/li&gt; 
 &lt;li&gt;Running &lt;code&gt;xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} &amp;gt; xcodebuild.log&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Running &lt;code&gt;swiftlint analyze --compiler-log-path xcodebuild.log&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Analyzer rules tend to be considerably slower than lint rules.&lt;/p&gt; 
&lt;h2&gt;Using Multiple Configuration Files&lt;/h2&gt; 
&lt;p&gt;SwiftLint offers a variety of ways to include multiple configuration files. Multiple configuration files get merged into one single configuration that is then applied just as a single configuration file would get applied.&lt;/p&gt; 
&lt;p&gt;There are quite a lot of use cases where using multiple configuration files could be helpful:&lt;/p&gt; 
&lt;p&gt;For instance, one could use a team-wide shared SwiftLint configuration while allowing overrides in each project via a child configuration file.&lt;/p&gt; 
&lt;p&gt;Team-Wide Configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;disabled_rules:
- force_cast
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Project-Specific Configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;opt_in_rules:
- force_cast
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Child/Parent Configs (Locally)&lt;/h3&gt; 
&lt;p&gt;You can specify a &lt;code&gt;child_config&lt;/code&gt; and/or a &lt;code&gt;parent_config&lt;/code&gt; reference within a configuration file. These references should be local paths relative to the folder of the configuration file they are specified in. This even works recursively, as long as there are no cycles and no ambiguities.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A child config is treated as a refinement and thus has a higher priority&lt;/strong&gt;, while a parent config is considered a base with lower priority in case of conflicts.&lt;/p&gt; 
&lt;p&gt;Here&#39;s an example, assuming you have the following file structure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;ProjectRoot
    |_ .swiftlint.yml
    |_ .swiftlint_refinement.yml
    |_ Base
        |_ .swiftlint_base.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To include both the refinement and the base file, your &lt;code&gt;.swiftlint.yml&lt;/code&gt; should look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;child_config: .swiftlint_refinement.yml
parent_config: Base/.swiftlint_base.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When merging parent and child configs, &lt;code&gt;included&lt;/code&gt; and &lt;code&gt;excluded&lt;/code&gt; configurations are processed carefully to account for differences in the directory location of the containing configuration files.&lt;/p&gt; 
&lt;h3&gt;Child/Parent Configs (Remote)&lt;/h3&gt; 
&lt;p&gt;Just as you can provide local &lt;code&gt;child_config&lt;/code&gt;/&lt;code&gt;parent_config&lt;/code&gt; references, instead of referencing local paths, you can just put urls that lead to configuration files. In order for SwiftLint to detect these remote references, they must start with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The referenced remote configuration files may even recursively reference other remote configuration files, but aren&#39;t allowed to include local references.&lt;/p&gt; 
&lt;p&gt;Using a remote reference, your &lt;code&gt;.swiftlint.yml&lt;/code&gt; could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;parent_config: https://myteamserver.com/our-base-swiftlint-config.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every time you run SwiftLint and have an Internet connection, SwiftLint tries to get a new version of every remote configuration that is referenced. If this request times out, a cached version is used if available. If there is no cached version available, SwiftLint fails – but no worries, a cached version should be there once SwiftLint has run successfully at least once.&lt;/p&gt; 
&lt;p&gt;If needed, the timeouts for the remote configuration fetching can be specified manually via the configuration file(s) using the &lt;code&gt;remote_timeout&lt;/code&gt;/&lt;code&gt;remote_timeout_if_cached&lt;/code&gt; specifiers. These values default to 2 seconds or 1 second, respectively.&lt;/p&gt; 
&lt;h3&gt;Command Line&lt;/h3&gt; 
&lt;p&gt;Instead of just providing one configuration file when running SwiftLint via the command line, you can also pass a hierarchy, where the first configuration is treated as a parent, while the last one is treated as the highest-priority child.&lt;/p&gt; 
&lt;p&gt;A simple example including just two configuration files looks like this:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;swiftlint --config .swiftlint.yml --config .swiftlint_child.yml&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Nested Configurations&lt;/h3&gt; 
&lt;p&gt;In addition to a main configuration (the &lt;code&gt;.swiftlint.yml&lt;/code&gt; file in the root folder), you can put other configuration files named &lt;code&gt;.swiftlint.yml&lt;/code&gt; into the directory structure that then get merged as a child config, but only with an effect for those files that are within the same directory as the config or in a deeper directory where there isn&#39;t another configuration file. In other words: Nested configurations don&#39;t work recursively – there&#39;s a maximum number of one nested configuration per file that may be applied in addition to the main configuration.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;.swiftlint.yml&lt;/code&gt; files are only considered as a nested configuration if they have not been used to build the main configuration already (e. g. by having been referenced via something like &lt;code&gt;child_config: Folder/.swiftlint.yml&lt;/code&gt;). Also, &lt;code&gt;parent_config&lt;/code&gt;/&lt;code&gt;child_config&lt;/code&gt; specifications of nested configurations are getting ignored because there&#39;s no sense to that.&lt;/p&gt; 
&lt;p&gt;If one (or more) SwiftLint file(s) are explicitly specified via the &lt;code&gt;--config&lt;/code&gt; parameter, that configuration will be treated as an override, no matter whether there exist other &lt;code&gt;.swiftlint.yml&lt;/code&gt; files somewhere within the directory. &lt;strong&gt;So if you want to use nested configurations, you can&#39;t use the &lt;code&gt;--config&lt;/code&gt; parameter.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint/raw/main/LICENSE&quot;&gt;MIT licensed.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;SwiftLint is utterly maintained by volunteers contributing to its success entirely in their free time. As such, SwiftLint isn&#39;t a commercial product in any way.&lt;/p&gt; 
&lt;p&gt;Be kind to the people maintaining SwiftLint as a hobby and accept that their time is limited. Support them by contributing to the project, reporting issues, and helping others in the community.&lt;/p&gt; 
&lt;p&gt;Special thanks go to &lt;a href=&quot;https://www.macstadium.com&quot;&gt;MacStadium&lt;/a&gt; for providing physical Mac mini machines to run our performance tests.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/macstadium.png&quot; alt=&quot;MacStadium&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;We also thank Realm (now MongoDB) for their initial contributions and setup of the project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodeEditApp/CodeEdit</title>
      <link>https://github.com/CodeEditApp/CodeEdit</link>
      <description>&lt;p&gt;📝 CodeEdit App for macOS – Elevate your code editing experience. Open source, free forever.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/CodeEditApp/CodeEdit/raw/main/.github/CodeEdit-Icon-128@2x.png?raw=true&quot; height=&quot;128&quot; /&gt; &lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;CodeEdit for macOS&lt;/h1&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a aria-label=&quot;Follow CodeEdit on X&quot; href=&quot;https://x.com/CodeEditApp&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/Follow%20@CodeEditApp-black.svg?style=for-the-badge&amp;amp;logo=X&quot; /&gt; &lt;/a&gt; &lt;a aria-label=&quot;Follow CodeEdit on BlueSky&quot; href=&quot;https://bsky.app/profile/codeedit.app&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/Follow%20@codeedit.app-black.svg?style=for-the-badge&amp;amp;logo=bluesky&quot; /&gt; &lt;/a&gt; &lt;a aria-label=&quot;Join the community on Discord&quot; href=&quot;https://discord.gg/vChUXVf9Em&quot; target=&quot;_blank&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/Join%20the%20community-black.svg?style=for-the-badge&amp;amp;logo=Discord&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;CodeEdit is a code editor built by the community, for the community, written entirely and unapologetically for macOS. Features include syntax highlighting, code completion, project find and replace, snippets, terminal, task running, debugging, git integration, code review, extensions, and more.&lt;/p&gt; 
&lt;img width=&quot;1012&quot; alt=&quot;github-banner&quot; src=&quot;https://user-images.githubusercontent.com/806104/194004176-3143d19f-1ad9-449c-bd41-8c4f9998f44b.png&quot; /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/CodeEditApp/CodeEdit?color=orange&amp;amp;label=latest%20release&amp;amp;sort=semver&amp;amp;style=flat-square&quot; alt=&quot;GitHub release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#contributors-&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/all_contributors-32-orange.svg?style=flat-square&quot; alt=&quot;All Contributors&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/actions/workflows/CI-pre-release.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/CodeEditApp/CodeEdit/CI-pre-release.yml?style=flat-square&quot; alt=&quot;GitHub Workflow Status (with branch)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/CodeEditApp/CodeEdit?style=flat-square&quot; alt=&quot;GitHub Repo stars&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/forks&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/forks/CodeEditApp/CodeEdit?style=flat-square&quot; alt=&quot;GitHub forks&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/vChUXVf9Em&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/951544472238444645?color=5865F2&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&quot; alt=&quot;Discord Badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] CodeEdit is currently in development and not yet recommended for production use, however you can take part in shaping it&#39;s future by test-driving &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/releases&quot;&gt;pre-release versions&lt;/a&gt; and &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues&quot;&gt;submitting an issue&lt;/a&gt; to let us know what you think.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#mission&quot;&gt;Mission&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#activity&quot;&gt;Activity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#contributors&quot;&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#sponsors&quot;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#backers&quot;&gt;Backers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;Most editors in use today rely on Electron or other cross-platform frameworks, limiting their ability to fully utilize system resources. While Xcode provides a native experience, it is specifically designed for projects targeting Apple platforms.&lt;/p&gt; 
&lt;p&gt;We think developers working on projects not written for Apple platforms deserve that same macOS-native experience we get with Xcode while unlocking the full potential of the Mac.&lt;/p&gt; 
&lt;p&gt;This raised the question &quot;what if such an editor existed?&quot;, a question that led to the creation of &lt;a href=&quot;https://www.figma.com/proto/qj6raZbQsZpGO0NAVi4qsv/CodeEdit-Concept?node-id=1%3A870&quot;&gt;this concept&lt;/a&gt;, which our project aims to make a reality.&lt;/p&gt; 
&lt;h2&gt;Mission&lt;/h2&gt; 
&lt;p&gt;It is our commitment to keep CodeEdit open source and free forever, supported by the community.&lt;/p&gt; 
&lt;img width=&quot;1012&quot; alt=&quot;TextEdit plus Xcode equals CodeEdit&quot; src=&quot;https://github.com/CodeEditApp/CodeEdit/assets/806104/a9379df0-ab26-4ef8-98a9-2e2b4bd8c7b4&quot; /&gt; 
&lt;p&gt;Our goal is to maintain a lightweight experience, similar to TextEdit, while being able to scale up to a more feature-rich experience, comparable to Xcode, as necessary.&lt;/p&gt; 
&lt;p&gt;We strive to remain true to Apple&#39;s human interface guidelines and development patterns, ensuring CodeEdit looks and feels like an application developed by Apple themselves, which includes a meticulous attention to detail.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our growing community on &lt;a href=&quot;https://discord.gg/vChUXVf9Em&quot;&gt;Discord&lt;/a&gt; and &lt;a href=&quot;https://github.com/orgs/CodeEditApp/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; where we discuss and collaborate on all things CodeEdit. Don&#39;t be shy, jump right in and be part of the discussion!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] We hold a weekly meetup on Discord &lt;strong&gt;every Saturday at 3pm UTC&lt;/strong&gt; where we discuss latests development, feature requests, goals, and priorities.&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://discord.gg/KvdE3wYKNR?event=1189275961456336937&quot;&gt;&lt;strong&gt;Join us&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Activity&lt;/h2&gt; 
&lt;img src=&quot;https://repobeats.axiom.co/api/embed/acd5eeb654fc98f6ffbce26b09fd0e3603edf1fd.svg?sanitize=true&quot; alt=&quot;CodeEdit Repository Activity&quot; width=&quot;100%&quot; /&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Be part of the next revolution in code editing by contributing to the project. This is a community-led effort, so we welcome as many contributors who can help. Read the &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/raw/main/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;This project spans &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit#related-repositories&quot;&gt;multiple repositories&lt;/a&gt; so instead of browsing issues in the issues tab, it may be helpful to find an issue to get started on in our &lt;a href=&quot;https://github.com/orgs/CodeEditApp/projects/3/views/1&quot;&gt;project board&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For issues we want to focus on that are most relevant at any given time, please see the issues scoped to our current iteration &lt;a href=&quot;https://github.com/orgs/CodeEditApp/projects/3/views/10&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.austincondiff.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/806104?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Austin Condiff&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Austin Condiff&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#design-austincondiff&quot; title=&quot;Design&quot;&gt;🎨&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=austincondiff&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://lukaspistrol.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9460130?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Lukas Pistrol&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Lukas Pistrol&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-lukepistrol&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;🚇&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=lukepistrol&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=lukepistrol&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://blog.windchillmedia.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/35942988?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Khan Winter&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Khan Winter&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=thecoolwinter&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Athecoolwinter&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/matthijseikelenboom&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1364843?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Matthijs Eikelenboom&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matthijs Eikelenboom&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=matthijseikelenboom&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Amatthijseikelenboom&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Wouter01&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/62355975?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Wouter Hennen&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Wouter Hennen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Wouter01&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://wdg.codes&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1290461?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Wesley De Groot&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Wesley De Groot&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-0xWDG&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;🚇&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=0xWDG&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=0xWDG&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/KaiTheRedNinja&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/88234730?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;KaiTheRedNinja&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;KaiTheRedNinja&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=KaiTheRedNinja&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/pkasila&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17158860?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Pavel Kasila&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Pavel Kasila&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-pkasila&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;🚇&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=pkasila&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=pkasila&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/MarcoCarnevali&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9656572?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Marco Carnevali&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Marco Carnevali&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-MarcoCarnevali&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;🚇&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=MarcoCarnevali&quot; title=&quot;Tests&quot;&gt;⚠️&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=MarcoCarnevali&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nanashili&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/63672227?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nanashi Li&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nanashi Li&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=nanashili&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://ninjiacoder.me&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/22616933?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;ninjiacoder&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ninjiacoder&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=RayZhao1998&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://twitch.tv/Jeehut&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6942160?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Cihat Gündüz&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Cihat Gündüz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Jeehut&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/MysteryCoder456&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43755491?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rehatbir Singh&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rehatbir Singh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=MysteryCoder456&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Angelk90&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/20476002?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Angelk90&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Angelk90&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Angelk90&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.stefkors.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11800807?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Stef Kors&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Stef Kors&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=StefKors&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://akringblog.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6525286?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Chris Akring&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chris Akring&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=akring&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/highjeans&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/77588045?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;highjeans&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;highjeans&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=highjeans&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/jasonplatts&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/48892071?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Jason Platts&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jason Platts&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-jasonplatts&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;🚇&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#plugin-jasonplatts&quot; title=&quot;Plugin/utility libraries&quot;&gt;🔌&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dzign1&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44317715?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Rob Hughes&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rob Hughes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=dzign1&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://lingxi.li&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/36816148?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Lingxi Li&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Lingxi Li&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=lilingxi01&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Alilingxi01&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/octree&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7934444?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;HZ.Liu&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;HZ.Liu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=octree&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aoctree&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCx1gvWpy5zjOd7yZyDwmXEA?sub_confirmation=1&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/8013017?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Richard Topchii&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Richard Topchii&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=richardtop&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Pythonen&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/53183345?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Pythonen&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Pythonen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Pythonen&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/jav-solo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10246220?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Javier Solorzano&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Javier Solorzano&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=jav-solo&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Ajav-solo&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://angcosmin.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/8146514?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Cosmin Anghel&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Cosmin Anghel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=AngCosmin&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://mmshivesh.ml&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/23611514?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Shivesh&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shivesh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=mmshivesh&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/drucelweisse&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/36012972?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Andrey Plotnikov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andrey Plotnikov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=drucelweisse&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/POPOBE97&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7891810?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;POPOBE97&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;POPOBE97&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=POPOBE97&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nrudnyk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/20221382?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;nrudnyk&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;nrudnyk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=nrudnyk&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/benkoska&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17319613?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ben Koska&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ben Koska&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=benkoska&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/evolify&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12669069?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;evolify&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;evolify&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aevolify&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/shibotong&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44807628?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Shibo Tong&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shibo Tong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=shibotong&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://ethanwong.me&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/8158163?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ethan Wong&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ethan Wong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=GetToSet&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://gantoreno.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43397475?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Gabriel Moreno&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Gabriel Moreno&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Agantoreno&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Prince213&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/25235514?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sizhe Zhao&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sizhe Zhao&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3APrince213&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Muhammed9991&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/80204376?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Muhammed Mahmood&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Muhammed Mahmood&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Muhammed9991&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#maintenance-Muhammed9991&quot; title=&quot;Maintenance&quot;&gt;🚧&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/muescha&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/184316?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Muescha&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Muescha&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=muescha&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://alexsinelnikov.io/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1757017?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Alex Sinelnikov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alex Sinelnikov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=avdept&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://pribess.github.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/72389357?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Heewon Cho&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Heewon Cho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3APribess&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.xcodes.app&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1119565?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Matt Kiazyk&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matt Kiazyk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=MattKiazyk&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/DingoBits&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/107956274?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;DingoBits&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;DingoBits&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=DingoBits&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sk409&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/25968819?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Shoto Kobayashi&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shoto Kobayashi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Ask409&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=sk409&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.linkedin.com/in/aaryankotharii&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/53724307?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Aaryan Kothari&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aaryan Kothari&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aaaryankotharii&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://kyleye.top/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43724855?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kyle&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kyle&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Kyle-Ye&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/NakaokaRei&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/39183069?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nakaoka Rei&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nakaoka Rei&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=NakaokaRei&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3ANakaokaRei&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/alexdeem&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/404584?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Alex Deem&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alex Deem&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#maintenance-alexdeem&quot; title=&quot;Maintenance&quot;&gt;🚧&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/denizak&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1758456?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;deni zakya&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;deni zakya&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Adenizak&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ahmdyasser&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/42544598?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ahmad Yasser&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ahmad Yasser&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aahmdyasser&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ezraberch&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/49635435?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;ezraberch&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ezraberch&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=ezraberch&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Eliulm&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/82230675?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Elias Wahl&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Elias Wahl&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3AEliulm&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/bombardier200&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/25121427?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;bombardier200&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;bombardier200&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=bombardier200&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/yapryntsev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/18378212?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Alex Yapryntsev&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alex Yapryntsev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=yapryntsev&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Code-DJ&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/8212554?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Code-DJ&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Code-DJ&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Code-DJ&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3ACode-DJ&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/neilZon&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46465568?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Neilzon Viloria&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Neilzon Viloria&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3AneilZon&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://cubik65536.top&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/72877496?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Cubik&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Cubik&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3ACubik65536&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Cubik65536&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://twitter.com/RenanGreca&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5760386?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Renan Greca&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Renan Greca&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=RenanGreca&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/maxkel&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46418077?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;maxkel&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;maxkel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Amaxkel&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=maxkel&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://scrapp08.xyz&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/105889363?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Scrap&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Scrap&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=scrapp08&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/iggy890&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/98705626?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;iggy890&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;iggy890&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=iggy890&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/stavares843&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/29093946?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Sara Tavares&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sara Tavares&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Astavares843&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=stavares843&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/luah5&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/128280019?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;luah5&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;luah5&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=luah5&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/evanlwang&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/71157264?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Evan Wang&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Evan Wang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=evanlwang&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dscyrescotti&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/67727096?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dscyre Scotti&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dscyre Scotti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=dscyrescotti&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://tomasboda.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/40064599?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Tomáš Boďa&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tomáš Boďa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Advandyy&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Ahattalla&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/53402452?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ahmed Attalla&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ahmed Attalla&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3AAhattalla&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Ahattalla&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://estebanborai.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/34756077?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Esteban Borai&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Esteban Borai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=EstebanBorai&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/avinizhanov&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/42622715?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;avinizhanov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;avinizhanov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aavinizhanov&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=avinizhanov&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kmohsin11&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/28269317?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;kmohsin11&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;kmohsin11&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Akmohsin11&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/armartinez&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1909987?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Axel Martinez&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Axel Martinez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aarmartinez&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=armartinez&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nivora.app&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5382443?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Federico Zivolo&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Federico Zivolo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=FezVrasta&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ElvisWong213&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/40566101?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Elvis Wong&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Elvis Wong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3AElvisWong213&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://ibrahimcetin.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/33904390?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;İbrahim Çetin&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;İbrahim Çetin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aibrahimcetin&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/phlpsong&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/103433299?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;phlpsong&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;phlpsong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aphlpsong&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://ahnafmahmud.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44692189?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Ahnaf Mahmud&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ahnaf Mahmud&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=infinitepower18&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/DanKlaver15&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9391497?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Dan K&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dan K&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=DanKlaver15&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://knotbin.xyz&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/118622417?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Roscoe Rubin-Rottenberg&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Roscoe Rubin-Rottenberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=knotbin&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/plbstl&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/49006567?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Paul Ebose&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Paul Ebose&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aplbstl&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://danielz.xyz&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/65467530?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Daniel Zhu&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniel Zhu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Adanielzsh&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/simonwhitaker&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/116432?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Simon Whitaker&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Simon Whitaker&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Asimonwhitaker&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/LeonardoLarranaga&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/83844690?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Leonardo&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Leonardo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=LeonardoLarranaga&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/scaredcr6w&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/85457088?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Levente Anda&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Levente Anda&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=scaredcr6w&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://nobelliu.github.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10796646?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Nobel&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nobel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=NobelLiu&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/SavelyUkuren&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/125015568?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Savely&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Savely&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=SavelyUkuren&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Kihron&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30128800?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Kihron&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kihron&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3AKihron&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/pro100filipp&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12880697?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Filipp Kuznetsov&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Filipp Kuznetsov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=pro100filipp&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/rustemd02&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11714456?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;rustemd02&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;rustemd02&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Arustemd02&quot; title=&quot;Bug reports&quot;&gt;🐛&lt;/a&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=rustemd02&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/SimonKudsk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10168417?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Simon Kudsk&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Simon Kudsk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=SimonKudsk&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Syrux64&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/118998822?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Surya&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Surya&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=Syrux64&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/georgetchelidze&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/96194129?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;George Tchelidze&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;George Tchelidze&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=georgetchelidze&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://zhr.is&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/148818634?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;Chris Pineda&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chris Pineda&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/commits?author=zhrispineda&quot; title=&quot;Code&quot;&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Support CodeEdit&#39;s development by &lt;a href=&quot;https://github.com/sponsors/CodeEditApp&quot;&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a title=&quot;Vercel&quot; href=&quot;https://vercel.com/?utm_source=codeedit&amp;amp;utm_campaign=oss&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/806104/162766170-60f3b95a-ca30-4015-a3e3-a605df78b98a.png&quot; width=&quot;128&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;MacStadium&quot; href=&quot;https://macstadium.com&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/806104/162766594-eff7f985-31a9-48c5-9e58-139794fefa10.png&quot; width=&quot;128&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;GitBook&quot; href=&quot;https://www.gitbook.com/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/806104/162766464-c10dc9fc-088a-4945-a0e1-17bd42705b70.png&quot; width=&quot;128&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;panascais&quot; href=&quot;https://github.com/panascais&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19628635?s=200&amp;amp;v=4&quot; width=&quot;128&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;DevUtilsApp&quot; href=&quot;https://devutils.app/?utm_source=codeedit&amp;amp;utm_campaign=oss&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://devutils.app/512.png&quot; width=&quot;128&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;Proxyman&quot; href=&quot;https://proxyman.io/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/35942988/215859653-0d3622e4-a214-4691-acbe-cd96ca833193.png&quot; width=&quot;128&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;TablePlus&quot; href=&quot;https://tableplus.com/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/29408238?s=200&amp;amp;v=4&quot; width=&quot;128&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Backers&lt;/h2&gt; 
&lt;p&gt;Support CodeEdit&#39;s development by &lt;a href=&quot;https://github.com/sponsors/CodeEditApp&quot;&gt;becoming a backer&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a title=&quot;dannydorazio&quot; href=&quot;https://github.com/dannydorazio&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/21158275?v=4&quot; width=&quot;64&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;omrd&quot; href=&quot;https://github.com/omrd&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/34616424?v=4&quot; width=&quot;64&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;sparrowcode&quot; href=&quot;https://github.com/sparrowcode&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/98487302?s=200&amp;amp;v=4&quot; width=&quot;64&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;Gebes&quot; href=&quot;https://github.com/Gebes&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/35232234?v=4&quot; width=&quot;64&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;lovetodream&quot; href=&quot;https://github.com/lovetodream&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/38291523?v=4&quot; width=&quot;64&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;ridafkih&quot; href=&quot;https://github.com/ridafkih&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9158485?v=4&quot; width=&quot;64&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;tjkohi&quot; href=&quot;https://github.com/tjkohli&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7361247?v=4&quot; width=&quot;64&quot; /&gt;&lt;/a&gt; &lt;a title=&quot;mattpilott&quot; href=&quot;https://github.com/mattpilott&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2401925?v=4&quot; width=&quot;64&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Thanks to all of our other backers&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ivanvorobei&quot;&gt;@ivanvorobei&lt;/a&gt; &lt;a href=&quot;https://github.com/albertorestifo&quot;&gt;@albertorestifo&lt;/a&gt; &lt;a href=&quot;https://github.com/rkusa&quot;&gt;@rkusa&lt;/a&gt; &lt;a href=&quot;https://github.com/cadenkriese&quot;&gt;@cadenkriese&lt;/a&gt; &lt;a href=&quot;https://github.com/petrjahoda&quot;&gt;@petrjahoda&lt;/a&gt; &lt;a href=&quot;https://github.com/allejo&quot;&gt;@allejo&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/frousselet&quot;&gt;@frousselet&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/wkillerud&quot;&gt;@wkillerud&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under the &lt;a href=&quot;https://github.com/CodeEditApp/CodeEdit/raw/main/LICENSE.md&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Related Repositories&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEditKit&quot;&gt; &lt;img src=&quot;https://github.com/CodeEditApp/CodeEditKit/raw/main/.github/CodeEditKit-Icon-128@2x.png?raw=true&quot; height=&quot;128&quot; /&gt; &lt;/a&gt; &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEditKit&quot;&gt;CodeEditKit&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEditTextView&quot;&gt; &lt;img src=&quot;https://github.com/CodeEditApp/CodeEditTextView/raw/main/.github/CodeEditTextView-Icon-128@2x.png?raw=true&quot; height=&quot;128&quot; /&gt; &lt;/a&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEditTextView&quot;&gt;CodeEditTextView&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEditSourceEditor&quot;&gt; &lt;img src=&quot;https://github.com/CodeEditApp/CodeEditTextView/raw/main/.github/CodeEditSourceEditor-Icon-128@2x.png?raw=true&quot; height=&quot;128&quot; /&gt; &lt;/a&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEditSourceEditor&quot;&gt;CodeEditSourceEditor&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEditLanguages&quot;&gt; &lt;img src=&quot;https://github.com/CodeEditApp/CodeEditLanguages/raw/main/.github/CodeEditLanguages-Icon-128@2x.png?raw=true&quot; height=&quot;128&quot; /&gt; &lt;/a&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEditLanguages&quot;&gt;CodeEditLanguages&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/CodeEditApp/CodeEditCLI&quot;&gt; &lt;img src=&quot;https://github.com/CodeEditApp/CodeEditCLI/raw/main/.github/CodeEditCLI-Icon-128@2x.png?raw=true&quot; height=&quot;128&quot; /&gt; &lt;/a&gt; &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://github.com/CodeEditApp/CodeEditCLI&quot;&gt;CodeEditCLI&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>siteline/swiftui-introspect</title>
      <link>https://github.com/siteline/swiftui-introspect</link>
      <description>&lt;p&gt;Introspect underlying UIKit/AppKit components from SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUI Introspect&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/siteline/swiftui-introspect/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/siteline/swiftui-introspect/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI Status Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2Fswiftui-introspect%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Swift Version Compatibility Badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2Fswiftui-introspect%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;Platform Compatibility Badge&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;SwiftUI Introspect lets you access the underlying UIKit or AppKit view for a SwiftUI view.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#install&quot;&gt;Install&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#cocoapods&quot;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#view-types&quot;&gt;View Types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#general-guidelines&quot;&gt;General Guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#advanced-usage&quot;&gt;Advanced usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#implement-your-own-introspectable-type&quot;&gt;Implement your own introspectable type&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#introspect-on-future-platform-versions&quot;&gt;Introspect on future platform versions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#keep-instances-outside-the-customize-closure&quot;&gt;Keep instances outside the customize closure&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#note-for-library-authors&quot;&gt;Note for library authors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#community-projects&quot;&gt;Community projects&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How it works&lt;/h2&gt; 
&lt;p&gt;SwiftUI Introspect adds an invisible &lt;code&gt;IntrospectionView&lt;/code&gt; above the selected view and an invisible anchor below it, then searches the UIKit/AppKit view hierarchy between them to find the relevant view.&lt;/p&gt; 
&lt;p&gt;For instance, when introspecting a &lt;code&gt;ScrollView&lt;/code&gt;...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;ScrollView {
	Text(&quot;Item 1&quot;)
}
.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in
	// do something with UIScrollView
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... it will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add marker views before and after &lt;code&gt;ScrollView&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Traverse through all subviews between both marker views until a &lt;code&gt;UIScrollView&lt;/code&gt; instance (if any) is found.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Although this method is solid and unlikely to break on its own, future OS releases require explicit opt in for introspection (&lt;code&gt;.iOS(.vXYZ)&lt;/code&gt;) because underlying UIKit/AppKit types can change between major versions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;By default, &lt;code&gt;.introspect&lt;/code&gt; acts on its receiver. Calling &lt;code&gt;.introspect&lt;/code&gt; from inside the view you want to introspect has no effect. If you need to introspect an ancestor instead, set &lt;code&gt;scope: .ancestor&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;ScrollView {
	Text(&quot;Item 1&quot;)
		.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26), scope: .ancestor) { scrollView in
			// do something with UIScrollView
		}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage in production&lt;/h3&gt; 
&lt;p&gt;SwiftUI Introspect is suitable for production. It does not use private APIs. It inspects the view hierarchy using public methods and takes a defensive approach: it makes no hard layout assumptions, performs no forced casts to UIKit/AppKit classes, and ignores &lt;code&gt;.introspect&lt;/code&gt; when the expected UIKit/AppKit view cannot be found.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;h4&gt;Xcode&lt;/h4&gt; 
&lt;img width=&quot;660&quot; height=&quot;300&quot; src=&quot;https://github.com/user-attachments/assets/ab1c1a62-96d9-417d-ad2b-43012a69cae8&quot; /&gt; 
&lt;h4&gt;Package.swift&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let package = Package(
	dependencies: [
		.package(url: &quot;https://github.com/siteline/swiftui-introspect&quot;, from: &quot;26.0.0&quot;),
	],
	targets: [
		.target(name: &amp;lt;#Target Name#&amp;gt;, dependencies: [
			.product(name: &quot;SwiftUIIntrospect&quot;, package: &quot;swiftui-introspect&quot;),
		]),
	]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SwiftUIIntrospect&#39;, &#39;~&amp;gt; 26.0.0&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;View Types&lt;/h2&gt; 
&lt;h3&gt;Implemented&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/buttontype&quot;&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/colorpickertype&quot;&gt;&lt;code&gt;ColorPicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickertype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithcompactstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.compact&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithfieldstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.field&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithgraphicalstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.graphical&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithstepperfieldstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.stepperField&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithwheelstyletype&quot;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/formtype&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/formwithgroupedstyletype&quot;&gt;&lt;code&gt;Form&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/fullScreenCovertype&quot;&gt;&lt;code&gt;.fullScreenCover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listtype&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithborderedstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.bordered&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithgroupedstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithinsetgroupedstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.insetGrouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithinsetstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.inset&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithsidebarstyletype&quot;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.sidebar&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listcelltype&quot;&gt;&lt;code&gt;ListCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/maptype&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/navigationsplitviewtype&quot;&gt;&lt;code&gt;NavigationSplitView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/navigationstacktype&quot;&gt;&lt;code&gt;NavigationStack&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/NavigationViewWithColumnsStyleType&quot;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.columns&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/NavigationViewWithStackStyleType&quot;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.stack&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pagecontroltype&quot;&gt;&lt;code&gt;PageControl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithmenustyletype&quot;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.menu&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithsegmentedstyletype&quot;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.segmented&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithwheelstyletype&quot;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/popovertype&quot;&gt;&lt;code&gt;.popover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/progressviewwithcircularstyletype&quot;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.circular&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/progressviewwithlinearstyletype&quot;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.linear&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/scrollviewtype&quot;&gt;&lt;code&gt;ScrollView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/searchfieldtype&quot;&gt;&lt;code&gt;.searchable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/securefieldtype&quot;&gt;&lt;code&gt;SecureField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/sheettype&quot;&gt;&lt;code&gt;.sheet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/slidertype&quot;&gt;&lt;code&gt;Slider&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/steppertype&quot;&gt;&lt;code&gt;Stepper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/tabletype&quot;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/tabviewtype&quot;&gt;&lt;code&gt;TabView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/TabViewWithPageStyleType&quot;&gt;&lt;code&gt;TabView&lt;/code&gt; with &lt;code&gt;.page&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/texteditortype&quot;&gt;&lt;code&gt;TextEditor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/textfieldtype&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/TextFieldWithVerticalAxisType&quot;&gt;&lt;code&gt;TextField&lt;/code&gt; with &lt;code&gt;.vertical&lt;/code&gt; axis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/toggletype&quot;&gt;&lt;code&gt;Toggle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithbuttonstyletype&quot;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;button&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithcheckboxstyletype&quot;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;checkbox&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithswitchstyletype&quot;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;switch&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/videoplayertype&quot;&gt;&lt;code&gt;VideoPlayer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/viewtype&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/viewcontrollertype&quot;&gt;&lt;code&gt;ViewController&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/webviewtype&quot;&gt;&lt;code&gt;WebView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/windowtype&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&quot;https://github.com/siteline/swiftui-introspect/discussions/new?category=ideas&quot;&gt;start a discussion&lt;/a&gt;. As a temporary solution, you can &lt;a href=&quot;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#implement-your-own-introspectable-type&quot;&gt;implement your own introspectable view type&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Cannot implement&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;SwiftUI&lt;/th&gt; 
   &lt;th&gt;Affected Frameworks&lt;/th&gt; 
   &lt;th&gt;Why&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Text&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;Not a UILabel / NSLabel&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Image&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;Not a UIImageView / NSImageView&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Button&lt;/td&gt; 
   &lt;td&gt;UIKit&lt;/td&gt; 
   &lt;td&gt;Not a UIButton&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Link&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;Not a UIButton / NSButton&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;NavigationLink&lt;/td&gt; 
   &lt;td&gt;UIKit&lt;/td&gt; 
   &lt;td&gt;Not a UIButton&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GroupBox&lt;/td&gt; 
   &lt;td&gt;AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Menu&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Spacer&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Divider&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;HStack, VStack, ZStack&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;LazyVStack, LazyHStack, LazyVGrid, LazyHGrid&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Color&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ForEach&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GeometryReader&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;No underlying view&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Chart&lt;/td&gt; 
   &lt;td&gt;UIKit, AppKit&lt;/td&gt; 
   &lt;td&gt;Native SwiftUI framework&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;List&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;List {
	Text(&quot;Item&quot;)
}
.introspect(.list, on: .iOS(.v13, .v14, .v15)) { tableView in
	tableView.bounces = false
}
.introspect(.list, on: .iOS(.v16, .v17, .v18, .v26)) { collectionView in
	collectionView.bounces = false
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ScrollView&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;ScrollView {
	Text(&quot;Item&quot;)
}
.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in
	scrollView.bounces = false
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NavigationView&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;NavigationView {
	Text(&quot;Item&quot;)
}
.navigationViewStyle(.stack)
.introspect(.navigationView(style: .stack), on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { navigationController in
	navigationController.navigationBar.backgroundColor = .cyan
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;TextField&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;TextField(&quot;Text Field&quot;, text: &amp;lt;#Binding&amp;lt;String&amp;gt;#&amp;gt;)
	.introspect(.textField, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { textField in
		textField.backgroundColor = .red
	}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;General Guidelines&lt;/h2&gt; 
&lt;p&gt;Here are some guidelines to keep in mind when using SwiftUI Introspect:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Use sparingly&lt;/strong&gt;: prefer native SwiftUI modifiers when available. Use introspection only when you need underlying UIKit/AppKit APIs that SwiftUI does not expose.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Program defensively&lt;/strong&gt;: the introspection closure may be called multiple times during the view&#39;s lifecycle, such as during view updates or re-renders. Ensure that your customization code can handle being executed multiple times without causing unintended side effects.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Avoid direct state changes&lt;/strong&gt;: do not change SwiftUI state from inside the introspection closure. If you must update state, wrap it in &lt;code&gt;DispatchQueue.main.async&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Test across OS versions&lt;/strong&gt;: underlying implementations can differ by OS, which can affect customization.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Avoid retain cycles&lt;/strong&gt;: be cautious about capturing &lt;code&gt;self&lt;/code&gt; or other strong references within the introspection closure, as this can lead to memory leaks. Use &lt;code&gt;[weak self]&lt;/code&gt; or &lt;code&gt;[unowned self]&lt;/code&gt; capture lists as appropriate.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scope&lt;/strong&gt;: &lt;code&gt;.introspect&lt;/code&gt; targets its receiver by default. Use &lt;code&gt;scope: .ancestor&lt;/code&gt; only when you need to introspect an ancestor. In general, you shouldn&#39;t worry about this as each view type has sensible, predictable default scopes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Advanced usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] These features are advanced and unnecessary for most use cases. Use them when you need extra control or flexibility.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] To access these features, import SwiftUI Introspect using &lt;code&gt;@_spi(Advanced)&lt;/code&gt; (see examples below).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Implement your own introspectable type&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&quot;https://github.com/siteline/swiftui-introspect/discussions/new?category=ideas&quot;&gt;start a discussion&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In the unlikely event SwiftUI Introspect does not support the element you need, you can implement your own introspectable type.&lt;/p&gt; 
&lt;p&gt;For example, here&#39;s how the library implements the introspectable &lt;code&gt;TextField&lt;/code&gt; type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SwiftUI
@_spi(Advanced) import SwiftUIIntrospect

public struct TextFieldType: IntrospectableViewType {}

extension IntrospectableViewType where Self == TextFieldType {
	public static var textField: Self { .init() }
}

#if canImport(UIKit)
extension iOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {
	public static let v13 = Self(for: .v13)
	public static let v14 = Self(for: .v14)
	public static let v15 = Self(for: .v15)
	public static let v16 = Self(for: .v16)
	public static let v17 = Self(for: .v17)
	public static let v18 = Self(for: .v18)
	public static let v26 = Self(for: .v26)
}

extension tvOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {
	public static let v13 = Self(for: .v13)
	public static let v14 = Self(for: .v14)
	public static let v15 = Self(for: .v15)
	public static let v16 = Self(for: .v16)
	public static let v17 = Self(for: .v17)
	public static let v18 = Self(for: .v18)
	public static let v26 = Self(for: .v26)
}

extension visionOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {
	public static let v1 = Self(for: .v1)
	public static let v2 = Self(for: .v2)
	public static let v26 = Self(for: .v26)
}
#elseif canImport(AppKit)
extension macOSViewVersion&amp;lt;TextFieldType, NSTextField&amp;gt; {
	public static let v10_15 = Self(for: .v10_15)
	public static let v11 = Self(for: .v11)
	public static let v12 = Self(for: .v12)
	public static let v13 = Self(for: .v13)
	public static let v14 = Self(for: .v14)
	public static let v15 = Self(for: .v15)
	public static let v26 = Self(for: .v26)
}
#endif
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Introspect on future platform versions&lt;/h3&gt; 
&lt;p&gt;By default, introspection targets specific platform versions. This is an intentional design decision to maintain maximum predictability in actively maintained apps. However library authors may prefer to cover future versions to limit their commitment to regular maintenance without breaking client apps. For that, SwiftUI Introspect provides range-based version predicates via the Advanced SPI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SwiftUI
@_spi(Advanced) import SwiftUIIntrospect

struct ContentView: View {
	var body: some View {
		ScrollView {
			// ...
		}
		.introspect(.scrollView, on: .iOS(.v13...)) { scrollView in
			// ...
		}
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use this cautiously. Future OS versions may change underlying types, in which case the customization closure will not run unless support is explicitly declared.&lt;/p&gt; 
&lt;h3&gt;Keep instances outside the customize closure&lt;/h3&gt; 
&lt;p&gt;Sometimes you need to keep an introspected instance beyond the customization closure. &lt;code&gt;@State&lt;/code&gt; is not appropriate for this, as it can create retain cycles. Instead, SwiftUI Introspect offers a &lt;code&gt;@Weak&lt;/code&gt; property wrapper behind the Advanced SPI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SwiftUI
@_spi(Advanced) import SwiftUIIntrospect

struct ContentView: View {
	@Weak var scrollView: UIScrollView?

	var body: some View {
		ScrollView {
			// ...
		}
		.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in
			self.scrollView = scrollView
		}
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Note for library authors&lt;/h2&gt; 
&lt;p&gt;If your library depends on SwiftUI Introspect, declare a version range that spans at least the &lt;strong&gt;last two major versions&lt;/strong&gt; instead of jumping straight to the latest. This avoids conflicts when apps pull the library directly and through multiple dependencies. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/siteline/swiftui-introspect&quot;, &quot;1.3.0&quot;..&amp;lt;&quot;27.0.0&quot;),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A wider range is safe because SwiftUI Introspect is essentially “finished”: no new features will be added, only newer platform versions and view types. Thanks to &lt;a href=&quot;https://github.com/siteline/swiftui-introspect#introspect-on-future-platform-versions&quot;&gt;&lt;code&gt;@_spi(Advanced)&lt;/code&gt; imports&lt;/a&gt;, it is already future proof without frequent version bumps.&lt;/p&gt; 
&lt;h2&gt;Community projects&lt;/h2&gt; 
&lt;p&gt;Here are some open source libraries powered by SwiftUI Introspect:&lt;/p&gt; 
&lt;a href=&quot;https://github.com/paescebu/CustomKeyboardKit&quot;&gt; &lt;img src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=paescebu&amp;amp;repo=CustomKeyboardKit&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://github.com/davdroman/swiftui-navigation-transitions&quot;&gt; &lt;img src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=davdroman&amp;amp;repo=swiftui-navigation-transitions&quot; /&gt; &lt;/a&gt; 
&lt;p&gt;If you&#39;re working on a library built on SwiftUI Introspect or know of one, feel free to submit a PR adding it to the list.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tuist/tuist</title>
      <link>https://github.com/tuist/tuist</link>
      <description>&lt;p&gt;A virtual platform team for mobile devs who ship&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;div&gt; 
  &lt;a href=&quot;https://tuist.io&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/header.jpg&quot; alt=&quot;header&quot; /&gt;&lt;/a&gt; 
 &lt;/div&gt; 
 &lt;img src=&quot;https://img.shields.io/github/commit-activity/w/tuist/tuist?style=flat-square&amp;amp;label=commits&quot; alt=&quot;Commit Activity&quot; /&gt; 
 &lt;a href=&quot;https://fosstodon.org/@tuist&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tuist-gray.svg?logo=mastodon&amp;amp;logoColor=f5f5f5&quot; alt=&quot;Mastodon badge&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://bsky.app/profile/tuist.dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tuist-gray.svg?logo=bluesky&quot; alt=&quot;Bluesky badge&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://join.slack.com/t/tuistapp/shared_invite/zt-1lqw355mp-zElRwLeoZ2EQsgGEkyaFgg&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tuist-gray.svg?logo=slack&quot; alt=&quot;Slack Workspace&quot; /&gt;&lt;/a&gt; 
 &lt;a href=&quot;https://t.me/tuist&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tuist-gray.svg?logo=telegram&quot; alt=&quot;Slack Workspace&quot; /&gt;&lt;/a&gt; 
 &lt;div&gt; 
  &lt;a href=&quot;https://cal.com/team/tuist/cloud?utm_source=banner&amp;amp;utm_campaign=oss&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Book us with Cal.com&quot; src=&quot;https://cal.com/book-with-cal-dark.svg?sanitize=true&quot; width=&quot;150&quot; /&gt;&lt;/a&gt; 
 &lt;/div&gt; 
 &lt;a href=&quot;https://translate.tuist.dev/engage/tuist/&quot;&gt; &lt;img src=&quot;https://translate.tuist.dev/widget/tuist/svg-badge.svg?sanitize=true&quot; alt=&quot;Translation status&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;Tuist&lt;/h1&gt; 
&lt;p&gt;Tuist is a virtual platform team for Swift app devs who ship. Through an integrated platform that integrates with your toolchain and projects, we help you stay focused and productive while building apps.&lt;/p&gt; 
&lt;p&gt;The following solutions are part of Tuist:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.tuist.dev/en/guides/features/projects&quot;&gt;🗂️ &lt;strong&gt;Generated projects&lt;/strong&gt;&lt;/a&gt;: A solution for more accessible and easier-to-manage Xcode projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.tuist.dev/en/guides/features/cache&quot;&gt;🚝 &lt;strong&gt;Cache&lt;/strong&gt;&lt;/a&gt;: Speed up builds across environments with a content-addressable store.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.tuist.dev/en/guides/features/selective-testing&quot;&gt;✅ &lt;strong&gt;Selective testing&lt;/strong&gt;&lt;/a&gt;: Run tests faster by selecting them based on the file changes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.tuist.dev/en/guides/features/registry&quot;&gt;📦 &lt;strong&gt;Registry&lt;/strong&gt;&lt;/a&gt;: Speed up the resolution of &lt;a href=&quot;https://swiftpackageindex.com/&quot;&gt;Swift Package Index&lt;/a&gt;-indexed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.tuist.dev/en/guides/features/insights&quot;&gt;📈 &lt;strong&gt;Insights&lt;/strong&gt;&lt;/a&gt;: Get actionable insights from your projects, builds, and test runs to make informed decisions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.tuist.dev/en/guides/features/bundle-size&quot;&gt;📱 &lt;strong&gt;Bundle analysis&lt;/strong&gt;&lt;/a&gt;: Analyze your built apps and get suggestions to improve them.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Openness and community are cornerstones in shaping Tuist, as we believe they are the key to building the best solution. We recommend checking out the following resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.tuist.dev&quot;&gt;📑 &lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://handbook.tuist.dev&quot;&gt;📚 &lt;strong&gt;Handbook&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://community.tuist.dev&quot;&gt;💬 &lt;strong&gt;Community forum&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Even though our current focus is on the development phase of Apple native apps, we&#39;ll gradually expand our focus to include other ecosystems (e.g., Android, RN, and Flutter), and expand beyond just development.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;p&gt;You can run the following command to get started with [Mise] (check out &lt;a href=&quot;https://docs.tuist.dev/en/guides/quick-start/get-started&quot;&gt;this page&lt;/a&gt; for other methods):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mise x tuist@latest -- tuist init
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The &lt;code&gt;init&lt;/code&gt; workflow is designed to integrate with an existing Xcode project or create &lt;a href=&quot;https://docs.tuist.dev/en/guides/features/projects&quot;&gt;a generated project&lt;/a&gt;. If you are migrating an existing Xcode project to a generated project, we recommend &lt;a href=&quot;https://docs.tuist.dev/en/guides/features/projects/adoption/migrate/xcode-project&quot;&gt;checking out these docs&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Do you want to know more about what Tuist can offer you? Or perhaps want to contribute to the project and you need a starting point?&lt;/p&gt; 
&lt;p&gt;You can check out &lt;a href=&quot;https://docs.tuist.dev&quot;&gt;the project documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Sample projects&lt;/h3&gt; 
&lt;p&gt;You can find some sample projects in the &lt;a href=&quot;https://raw.githubusercontent.com/tuist/tuist/main/cli/Fixtures&quot;&gt;fixtures folder&lt;/a&gt; or the &lt;a href=&quot;https://github.com/tuist/awesome-tuist&quot;&gt;awesome Tuist repo&lt;/a&gt;! 🎉&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;This repository represents a monorepo with the following projects:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tuist/tuist/main/cli&quot;&gt;cli&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The command line interface for Tuist&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tuist/tuist/main/app&quot;&gt;app&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The Swift-powered iOS and macOS app&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tuist/tuist/main/docs&quot;&gt;docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The documentation for Tuist&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tuist/tuist/main/handbook&quot;&gt;handbook&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The company&#39;s handbook&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Some companies support our community and open source efforts with contributions through &lt;a href=&quot;https://github.com/sponsors/tuist&quot;&gt;GitHub Sponsors&lt;/a&gt; and &lt;a href=&quot;https://opencollective.com/tuistapp&quot;&gt;Open Collective Backers&lt;/a&gt;. We&#39;d like to give a special mention to the following sponsors:&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;30%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://monday.com?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;&amp;amp;utm_term=tuist&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;300&quot; src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/monday.com.svg?sanitize=true&quot; alt=&quot;mondaycom_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://monday.com?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;&amp;amp;utm_term=tuist&quot;&gt;Monday.com&lt;/a&gt; is a cloud-based work operating system (Work OS) that empowers teams to run projects and workflows with confidence. It&#39;s a versatile platform that combines features of project management, workflow automation, and team collaboration to streamline the way teams work together.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;30%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://lapse.com?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;&amp;amp;utm_term=tuist&quot; target=&quot;_blank&quot;&gt; &lt;img width=&quot;200&quot; src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/lapse.svg?sanitize=true&quot; alt=&quot;lapse_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://lapse.com?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;&amp;amp;utm_term=tuist&quot;&gt;Lapse&lt;/a&gt; is an app designed to reclaim how we take and share memories. A camera for living in the moment and a private photo journal for friends, not followers.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Companies using Tuist&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://play.tv2.no&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/tv2.svg?sanitize=true&quot; alt=&quot;tv2_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.depop.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/depop.svg?sanitize=true&quot; alt=&quot;depop_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://bendingspoons.com&quot; target=&quot;_blank&quot;&gt; 
     &lt;picture&gt; 
      &lt;source srcset=&quot;assets/companies/bendingspoons-darkmode.png&quot; media=&quot;(prefers-color-scheme: dark)&quot; /&gt; 
      &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/bendingspoons.png&quot; alt=&quot;bendingspoons_logo&quot; /&gt; 
     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://globekeeper.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/globekeeper.png&quot; alt=&quot;globekeeper_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://getyourguide.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/getyourguide.png&quot; alt=&quot;getyourguide_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://emplate.it&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/emplate.svg?sanitize=true&quot; alt=&quot;emplate_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.trendyol.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/Trendyol.png&quot; alt=&quot;trendyol_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://angrynerds.co&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/angrynerds.svg?sanitize=true&quot; alt=&quot;angrynerds_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.compass.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/compass.png&quot; alt=&quot;compass_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.wefox.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/wefox.png&quot; alt=&quot;wefox_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.hedvig.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/hedvig.svg?sanitize=true&quot; alt=&quot;hedvig_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.takeoutcentral.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/takeoutcentral.svg?sanitize=true&quot; alt=&quot;takeoutcentral_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.olx.com.br&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/olx.png&quot; alt=&quot;olx_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.justeattakeaway.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/justeattakeaway.svg?sanitize=true&quot; alt=&quot;justeattakeaway_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://qnips.io&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/qnips.svg?sanitize=true&quot; alt=&quot;qnips_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.telepass.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/telepass.svg?sanitize=true&quot; alt=&quot;telepass_logo&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.crunchyroll.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/crunchyroll.svg?sanitize=true&quot; alt=&quot;crunchyroll_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://altel.kz&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/altel.svg?sanitize=true&quot; alt=&quot;altel_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://tele2.kz&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/tele2.svg?sanitize=true&quot; alt=&quot;altel_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://izi.me/kz&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/izi.svg?sanitize=true&quot; alt=&quot;izi_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://wise.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/wise.png&quot; alt=&quot;wise_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://zapis.kz/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/zapis.svg?sanitize=true&quot; alt=&quot;wise_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://apps.apple.com/kz/app/rbk-business/id1466194695&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/rbkbusiness.svg?sanitize=true&quot; alt=&quot;rbkbusiness_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://snoonu.com/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/snoonu.svg?sanitize=true&quot; alt=&quot;rbkbusiness_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://get.sajda.app&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/sajda_app.svg?sanitize=true&quot; alt=&quot;sajda_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;20%&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;https://abb-bank.az&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/tuist/tuist/main/assets/companies/abb-logo-slogan.png&quot; alt=&quot;abb_mobile_logo&quot; height=&quot;75&quot; /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width=&quot;20%&quot;&gt;&lt;/td&gt; 
   &lt;td width=&quot;20%&quot;&gt;&lt;/td&gt; 
   &lt;td width=&quot;20%&quot;&gt;&lt;/td&gt; 
   &lt;td width=&quot;20%&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Want to contribute?&lt;/h2&gt; 
&lt;p&gt;You can use our &lt;a href=&quot;https://docs.tuist.dev/en/contributors/get-started&quot;&gt;contribution docs&lt;/a&gt; to get started. You can find good issues for first-time contributors &lt;a href=&quot;https://github.com/tuist/tuist/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Core Team&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/pepicrft&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/663605?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Pedro Piñera&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/fortmarek&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/9371695?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Marek Fořt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.matrixprojects.net&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/11914919?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kas&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/danyf90&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2794031?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniele Formichelli&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/waltflanagan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/398293?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mike Simons&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Core Alumni&lt;/h2&gt; 
&lt;p&gt;The following people were once core contributors helping steer the project in the right direction and ensuring we have a reliable foundation we can build new features upon:&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://natanrolnik.me&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/1164565?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Natan Rolnik&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/andreacipriani&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/536929?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andrea Cipriani&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ollieatkinson&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1382565?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Oliver Atkinson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/RomainBoulay&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/169323?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Romain Boulay&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/laxmorek&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/4774319?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kamil Harasimowicz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.luispadron.com&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/13840545?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Luis Padron&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/adellibovi&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/67916?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alfredo Delli Bovi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people:&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kalkwarf&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1033839?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;kalkwarf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/fortmarek&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/9371695?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Marek Fořt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.matrixprojects.net&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/11914919?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kas&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://natanrolnik.me&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/1164565?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Natan Rolnik&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/svastven&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/42235915?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;svastven&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://bhuemer.github.io&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/1212480?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Bernhard Huemer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://djankowski.dev&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/10795657?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniel Jankowski&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/facumenzella&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1125252?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Facundo Menzella&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/eito&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/775643?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Eric Ito&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/laxmorek&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/4774319?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kamil Harasimowicz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/olejnjak&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/3148214?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jakub Olejník&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lakpa&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/389328?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ldindu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gtsifrikas&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/8904378?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;George Tsifrikas&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/yurapriv&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/7814127?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Privezentsev Yura&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://ferologics.github.io&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/5576161?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Fero&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://heberti.com&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/103670?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Heberti Almeida&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://benscheirman.com&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/59140?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ben Scheirman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://jsorge.net&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/2585841?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jared Sorge&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://joeblau.com&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1218847?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Joe Blau&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://twitter.com/dchavezlive&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2475932?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;David Chavez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/роман-подымов-72338ab0/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/10789692?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Roman Podymov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/marcinreliga-fn&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/76949651?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Marcin Religa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/adellibovi&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/67916?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alfredo Delli Bovi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Jake-Prickett&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/26095410?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jake Prickett&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/danyf90&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2794031?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniele Formichelli&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.facebook.com/PetrachkovSergey&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7995896?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sergey Petrachkov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://jinuman.github.io/resume&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/26243835?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jinwoo, Kim&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/thedavidharris&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5666250?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;David Harris&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/DimaMishchenko&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/25247301?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dmytro Mishchenko&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.sampettersson.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5459507?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sam Pettersson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.joshholtz.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/401294?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Josh Holtz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://jierong.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7414906?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jierong Li&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://twitter.com/freak4pc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/605076?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shai Mishali&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://twitter.com/FranzJBusch&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3491887?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Franz Busch&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tiarnann&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10522081?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tíarnán McGrath&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/softmaxsg&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3723817?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vitaly Chupryk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/rmnblm&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5942764?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Roman Blum&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://nanotek.me&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7265334?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Giovanni Filaferro&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://twitter.com/tovkal&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5960675?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andrés Pizá Bückmann&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://coutinho.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17842860?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Gabriel Coutinho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://medium.com/@riccardocipolleschi&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11162307?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Riccardo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/bolismauro&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/771999?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mauro Bolis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://twitter.com/iteractive_man&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/461805?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Peter Weishapl&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/users/1878594/swiftycruz&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2609775?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Cruz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/svenmuennich&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1932115?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sven Münnich&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/santi-d&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/993826?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Santiago A. Delgado&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://wojciechkulik.pl&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3128467?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Wojciech Kulik&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/iainsmith&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/993745?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Iain Smith&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/havebeenfitz&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/31866271?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Max Kraev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/mstfy&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5105861?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mustafa Yusuf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://twitter.com/danielbarden&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/104456?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Daniel Barden&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/zzzkk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12541603?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Zofia Kulus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://randombits.org/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3589315?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;David Peterson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://bandism.net/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/22633385?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ikko Ashimine&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/setoelkahfi&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1797197?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Seto Elkahfi / 塞托·埃尔卡菲&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://apps4everyone.at&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1915802?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;apps4everyone&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/LorDisturbia&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12445776?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Lorenzo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/DarkoDamjanovic&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11902775?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Darko Damjanovic&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://twitter.com/MarvinNazari&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/926772?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Marvin Nazari&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://twitter.com/codeOfRobin&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5009041?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Robin Malhotra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/astromonkee&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44421303?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Astromonkee&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ezraberch&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/49635435?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ezraberch&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/cconstable&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/564781?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Christopher Constable&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/neakor&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1827517?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yi Wang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.mustafadur.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/971530?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mustafa Dur&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lucabartoletti&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/838925?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Luca Bartoletti&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sujata23&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1849089?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sujata Chakraborty&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.viber.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5096762?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Pavel Trafimuk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://alexsilva.dev/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/633535?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alejandro Silva Fernández&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.jakeadams.co&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3605966?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jake Adams&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/wattson12&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1217873?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sam Watts&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://erkekin.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/701481?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Erk Ekin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/morozkin&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16591888?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Denis Morozov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/orbitekk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4222449?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;orbitekk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://blog.naver.com/wogus3602&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46857148?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Park Jae Hyun&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/regularberry&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/565192?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sean Berry&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://hisaac.net&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/923876?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Isaac Halvorson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/mohitsaxenaknoldus&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/76725454?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mohit Saxena&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/mikchmie&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/15248837?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mikołaj Chmielewski&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/takinwande&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4744429?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tope Akinwande&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.theinkedengineer.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13349066?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;TheInkedEngineer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://alexanderweiss.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12934015?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alexander Weiß&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kyungpyoda&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44656036?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;kyungpyoda&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.villewitt.net&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/522544?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ville Witt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/paulsamuels&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/527091?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;paul.s&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/aniltaskiran&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16738729?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;aniltaskiran&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/unxavi&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3817679?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Javier Vieira&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/a-sarris&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/78614622?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aris Sarris&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://xxw9999.notion.site/xxw9999/iOS-8585a34b2886419586960c5c02b9d845&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/67373938?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;kimxwan0319&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://florian.codes&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7734806?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Florian Fittschen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/jesus-mg-ios&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/85997060?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jesus (iOS)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nicholaskim94&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7912759?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nicholas Kim&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Smponias&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14213855?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alexandros Smponias&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/mangofever&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/724343?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Go&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/AlbGarciam&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/45308839?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alberto Garcia&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/andreascuderi/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/8319309?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andrea Scuderi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://dogoautilio.wordpress.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1487375?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Diogo Autilio&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/shahzadmajeed&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1209459?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shahzad Majeed&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/danrevah&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7808742?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nivanchikov&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1830010?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Nikita Ivanchikov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/xoxo-anastasi-xoxo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/28875920?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Anastasia Kazantseva&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://twitter.com/MonocularVision&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/429790?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Michael McGuire&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.michaelfcollins3.me&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/104274?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Michael Collins&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/devyhan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/45344633?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;YoHan Cho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/euriasb&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3721257?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;euriasb&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/MontakOleg&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1800899?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;MontakOleg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/oozoofrog&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3011832?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;oozoofrog&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/MartinStrambach&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11178869?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Martin Strambach&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sh-a-n&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2219548?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;sh-a-n&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://linkedin.com/in/batuhansaka&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9626765?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Batuhan Saka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://jcsoohwancho.github.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/51935215?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;SooHwanCho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://www.bouncingball.mobi&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/798117?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Gary Riches&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://mustiikhalil.github.io/mustiikhalil/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/26250654?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;mustiikhalil&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/serejahh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2575555?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Serhii Butenko&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/petrukha-ivan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/93926277?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Petrukha Ivan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lo1tuma&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/169170?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mathias Schreck&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Buju77&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/266349?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yen-Chia Lin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://coolmathgames.tech&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6877780?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mary &lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/woohyunjin06&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/30452977?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Hyunjin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kevin58332&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/47673410?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kevin Aguilar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://andrewroan.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9873566?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andrew Roan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/ibrahim-oktay-518b4939/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/36792481?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ibrahim oktay&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/navartis&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7813723?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dmitriy Kulakov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/woin2ee&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/81426024?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Jaewon-Yun&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tatagrigory&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5187973?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;tatagrigory&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://linkedin.com/in/denilchungath&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/95201442?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Denil Chungath&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/victor-sarda/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6460866?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Victor Sarda&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/tzxdtc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19767846?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;tzxdtc10&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ThiemeFM&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/143395823?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Thieme&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Lilfaen&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/39119695?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Clemens Beck&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://macpaw.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/119268?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Paul Taykalo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/in4lio&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/976061?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vitaly Kravtsov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://dc.wtf&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/643865?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;dc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/baekteun&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/74440939?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;baegteun&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://vcoutasso.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44986513?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vinícius Couto Tasso&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://blog.jihoon.me&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/68891494?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;안지훈&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dxmvsh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/44325936?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dimash&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/danibachar&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6380777?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;danibachar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dp221125&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10572119?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;한석호(MilKyo)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://medium.com/@haifengkaohaifengkao&amp;amp;usg=AOvVaw2_xG-ZLdBawBIyS7m-99RQ&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4080524?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Hai Feng Kao&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/anlaital-oura&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/133648611?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Antti Laitala&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/PushedCrayon&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/37077444?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;PushedCrayon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://stefanomondino.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1691903?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Stefano Mondino&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/leszko11&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/23533452?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Łukasz Lech&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/costapombo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/31352351?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;costapombo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/isavynskyi&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/18377497?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ihor Savynskyi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kapitoshka438&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3232401?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Eduard Miniakhmetov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/alexfilimon&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19904867?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alexander Filimonov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/rofle100lvl&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/45801227?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Gorbenko Roman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/lucas-paim/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7849484?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Lucas Mrowskovsky Paim&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://actuallytaylor.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/32944568?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Taylor Lineman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/nandodelauni&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1938501?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Miguel Ferrando&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/barredewe&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19188911?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;BarredEwe&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/chris-livefront&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/126101032?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Chris Sessions&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ajkolean&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5394701?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andy Kolean&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Binlogo&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7845507?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Binlogo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/DevilDimon&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10220441?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dmitry Serov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://darrarski.pl&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1384684?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dariusz Rybicki&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/dansinclair25&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2573447?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dan Sinclair&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.kaioelfke.de&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1190948?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Kai Oelfke&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/users/468724/inder-kumar-rathore&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/352443?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Inder&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/kyounh12&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/25301615?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;kyounh12&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/alvar-bolt&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/72379847?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alvar Hansen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/barakwei&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5232161?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Barak Weiss&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/hiltonc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/470753?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Hilton Campbell&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/rgnns&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/811827?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Gabriel Liévano&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/vijaytholpadi&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1171868?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vijay Tholpadi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://withiosdeveloper.blogspot.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/27220138?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Minhoi Goo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sphanley&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1323769?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Sam Hanley&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ahmdyasser&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/42544598?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ahmdyasser&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/minhaaan&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/87178301?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;minhaaan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/TamarMilchtaich&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/49520876?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Tamar Milchtaich Lavi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/rock88&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/323908?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Andrey K&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://2stable.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/69604865?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alex Vera&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.annalisemariottini.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/14299642?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Annalise Mariottini&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/gustn3965&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/48749182?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;HyunSu Park&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/vldalx&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13873200?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vladimir&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://rhysmorgan.co&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11096937?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rhys Morgan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/pierrerodgers&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/48193278?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;pierrerodgers&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/honghoker&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/50417461?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;eunpyo hong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://medium.com/@dbstj169&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/65678579?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Yunseo Kang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/ilia3546&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4445510?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ilya Kharlamov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/brianvar&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/115399684?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;brianvar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/HossamYoussof&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6381926?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Hossam Youssof&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/devMinseok&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/51021614?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Minseok Kang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/alpanyukov&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/36258478?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alexander&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/sanghyeok-kim&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/57667738?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Loyle&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/vvisionnn&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/24761186?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ydna&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://brucemcrooster.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/53529192?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Evan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://www.snipnotes.de&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5102728?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Felix Lisczyk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lukaswuerzburger&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10812458?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Lukas Würzburger&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/GetToSet&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/8158163?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ethan Wong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://tdkn.dev&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1296540?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Shun Tedokon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://connorricks.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/13373737?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Connor Ricks&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://franciscodiaz.cl&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/530662?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Francisco Diaz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Ethan-IS&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/140235921?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ethan Parker&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/lukevanin&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/550579?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Luke Van In&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://mustafataibah.vercel.app/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/83141712?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mustafa Taibah&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/vkondrashkov&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16046780?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Vladislav Kondrashkov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/chrisjrex&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4457170?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Christopher Rex&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/bahattinkoc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/61124759?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;baaddin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/mattjung&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/19891158?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matt Jung&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://imaginativeworld.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1952630?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Md. Mahmudul Hasan Shohag&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://ma.tyas.cz&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6033733?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Matty Cross&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/YIshihara11201&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/98417271?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;YIshihara11201&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/PhilippeWeidmann&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5843044?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Philippe Weidmann&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://github.com/Zentaur0&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/75909658?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Anton SVTSV&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;https://johannes.plunien.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/31597?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Johannes Plunien&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;14.28%&quot;&gt;&lt;a href=&quot;http://emirhankarahan.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/48404459?v=4&quot; width=&quot;100px;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Emirhan KARAHAN&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;</description>
    </item>
    
  </channel>
</rss>
