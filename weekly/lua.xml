<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Weekly Trending</title>
    <description>Weekly Trending of Lua in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:44:28 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>mason-org/mason-lspconfig.nvim</title>
      <link>https://github.com/mason-org/mason-lspconfig.nvim</link>
      <description>&lt;p&gt;Extension to mason.nvim that makes it easier to use lspconfig with mason.nvim.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Linux-%23.svg?logo=linux&amp;amp;color=FCC624&amp;amp;logoColor=black&quot; alt=&quot;Linux&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/macOS-%23.svg?logo=apple&amp;amp;color=000000&amp;amp;logoColor=white&quot; alt=&quot;macOS&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Windows-%23.svg?logo=windows&amp;amp;color=0078D6&amp;amp;logoColor=white&quot; alt=&quot;Windows&quot; /&gt; &lt;a href=&quot;https://github.com/mason-org/mason-lspconfig.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/mason-org/mason-lspconfig.nvim/workflows/Tests/badge.svg?sanitize=true&quot; alt=&quot;GitHub CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/williamboman&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/williamboman?style=flat-square&quot; alt=&quot;Sponsors&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt;mason-lspconfig.nvim&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;code&gt;mason-lspconfig&lt;/code&gt; bridges &lt;a href=&quot;https://github.com/mason-org/mason.nvim&quot;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt; plugin - making it easier to use both plugins together. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;code&gt;:help mason-lspconfig.nvim&lt;/code&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;sup&gt;Latest version: v2.1.0&lt;/sup&gt; 
 &lt;!-- x-release-please-version --&gt; &lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#installation--usage&quot;&gt;Installation &amp;amp; Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#recommended-setup-for-lazynvim&quot;&gt;Recommended setup for &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#automatically-enable-installed-servers&quot;&gt;Automatically enable installed servers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#commands&quot;&gt;Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#default-configuration&quot;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;:h mason-lspconfig-introduction&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This plugin&#39;s main responsibilities are to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;allow you to (i) automatically install, and (ii) automatically enable (&lt;code&gt;vim.lsp.enable()&lt;/code&gt;) installed servers&lt;/li&gt; 
 &lt;li&gt;provide extra convenience APIs such as the &lt;code&gt;:LspInstall&lt;/code&gt; command&lt;/li&gt; 
 &lt;li&gt;provide additional LSP configurations for a few servers&lt;/li&gt; 
 &lt;li&gt;translate between &lt;code&gt;nvim-lspconfig&lt;/code&gt; server names and &lt;code&gt;mason.nvim&lt;/code&gt; package names (e.g. &lt;code&gt;lua_ls &amp;lt;-&amp;gt; lua-language-server&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Since the introduction of &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#vim.lsp.config()&quot;&gt;&lt;code&gt;:h vim.lsp.config&lt;/code&gt;&lt;/a&gt; in Neovim 0.11, this plugin&#39;s feature set has been reduced. Use this plugin if you want to automatically enable installed servers (&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#vim.lsp.enable()&quot;&gt;&lt;code&gt;:h vim.lsp.enable()&lt;/code&gt;&lt;/a&gt;) or have access to the &lt;code&gt;:LspInstall&lt;/code&gt; command.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;:h mason-lspconfig-requirements&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;neovim &amp;gt;= 0.11.0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mason.nvim &amp;gt;= 2.0.0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nvim-lspconfig &amp;gt;= 2.0.0&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;:h mason-lspconfig-quickstart&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Install using your plugin manager of choice. &lt;strong&gt;Setup is required&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason-lspconfig&quot;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s important that you set up &lt;code&gt;mason.nvim&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; have &lt;code&gt;nvim-lspconfig&lt;/code&gt; available in &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;runtimepath&#39;&quot;&gt;&lt;code&gt;:h runtimepath&lt;/code&gt;&lt;/a&gt; before setting up &lt;code&gt;mason-lspconfig.nvim&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; 
&lt;h3&gt;Recommended setup for &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The following is the recommended setup when using &lt;code&gt;lazy.nvim&lt;/code&gt;. It will set up the plugin for you, meaning &lt;strong&gt;you don&#39;t have to call &lt;code&gt;require(&quot;mason-lspconfig&quot;).setup()&lt;/code&gt; yourself&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;mason-org/mason-lspconfig.nvim&quot;,
    opts = {},
    dependencies = {
        { &quot;mason-org/mason.nvim&quot;, opts = {} },
        &quot;neovim/nvim-lspconfig&quot;,
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Automatically enable installed servers&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt; will automatically enable (&lt;code&gt;vim.lsp.enable()&lt;/code&gt;) installed servers for you by default.&lt;/p&gt; 
&lt;p&gt;To disable this feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason-lspconfig&quot;).setup {
    automatic_enable = false
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To exclude certain servers from being enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason-lspconfig&quot;).setup {
    automatic_enable = {
        exclude = {
            &quot;rust_analyzer&quot;,
            &quot;ts_ls&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, to only enable specific servers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason-lspconfig&quot;).setup {
    automatic_enable = {
        &quot;lua_ls&quot;,
        &quot;vimls&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This will only enable servers that are installed via Mason. It will not recognize servers installed elsewhere on your system.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;:h mason-lspconfig-commands&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LspInstall [&amp;lt;server&amp;gt; ...]&lt;/code&gt;: Installs the provided servers. If no server is provided you will be prompted to select a server based on the current buffer&#39;s &lt;code&gt;&amp;amp;filetype&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspUninstall &amp;lt;server&amp;gt; ...&lt;/code&gt;: Uninstalls the provided servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;:h mason-lspconfig-settings&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason-lspconfig.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason-lspconfig.nvim/main/#default-configuration&quot;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason-lspconfig&quot;).setup {
    ensure_installed = { &quot;lua_ls&quot;, &quot;rust_analyzer&quot; },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration using &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;mason-org/mason-lspconfig.nvim&quot;,
    opts = {
        ensure_installed = { &quot;lua_ls&quot;, &quot;rust_analyzer&quot; },
    },
    dependencies = {
        { &quot;mason-org/mason.nvim&quot;, opts = {} },
        &quot;neovim/nvim-lspconfig&quot;,
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Default configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local DEFAULT_SETTINGS = {
    -- A list of servers to automatically install if they&#39;re not already installed. Example: { &quot;rust_analyzer@nightly&quot;, &quot;lua_ls&quot; }
    ---@type string[]
    ensure_installed = {},

    -- Whether installed servers should automatically be enabled via `:h vim.lsp.enable()`.
    --
    -- To exclude certain servers from being automatically enabled:
    -- ```lua
    --   automatic_enable = {
    --     exclude = { &quot;rust_analyzer&quot;, &quot;ts_ls&quot; }
    --   }
    -- ```
    --
    -- To only enable certain servers to be automatically enabled:
    -- ```lua
    --   automatic_enable = {
    --     &quot;lua_ls&quot;,
    --     &quot;vimls&quot;
    --   }
    -- ```
    ---@type boolean | string[] | { exclude: string[] }
    automatic_enable = true,
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>nvim-neo-tree/neo-tree.nvim</title>
      <link>https://github.com/nvim-neo-tree/neo-tree.nvim</link>
      <description>&lt;p&gt;Neovim plugin to manage the file system and other tree like structures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neo-tree.nvim&lt;/h1&gt; 
&lt;p&gt;Neo-tree is a Neovim plugin to browse the file system and other tree like structures in whatever style suits you, including sidebars, floating windows, netrw split style, or all of them at once!&lt;/p&gt; 
&lt;p&gt;This screenshot shows Neo-tree opened in the traditional sidebar layout:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-right-aligned-symbols.png&quot; alt=&quot;Neo-tree file system sidebar&quot; /&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; Neo-tree filesystem screenshot, Netrw Style &lt;/summary&gt; 
 &lt;p&gt;The below screenshot shows Neo-tree opened &quot;netrw style&quot; (&lt;code&gt;:Neotree position=current&lt;/code&gt;). When opened in this way, there is more room so the extra detail columns can be shown. This screenshot also shows how the contents can be sorted on any column. In this example, we are sorted on &quot;Size&quot; descending:&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-file-details-and-sort.png&quot; alt=&quot;Neo-tree file system details&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Breaking Changes BAD &lt;span&gt;💣&lt;/span&gt; &lt;span&gt;👿&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;The biggest and most important feature of Neo-tree is that we will never knowingly push a breaking change and interrupt your day. Bugs happen, but breaking changes can always be avoided. When breaking changes are needed, there will be a new branch that you can opt into, when it is a good time for you.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/#what-is-a-breaking-change&quot;&gt;What is a Breaking Change?&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Changelog#30&quot;&gt;Changelog 3.0&lt;/a&gt; for breaking changes and deprecations in 3.0.&lt;/p&gt; 
&lt;h3&gt;User Experience GOOD &lt;span&gt;🙂&lt;/span&gt; &lt;span&gt;👍&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;Aside from being polite about breaking changes, Neo-tree is also focused on the little details of user experience. Everything should work exactly as you would expect a sidebar to work without all of the glitchy behavior that is normally accepted in (neo)vim sidebars. I can&#39;t stand glitchy behavior, and neither should you!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neo-tree won&#39;t let other buffers take over its window.&lt;/li&gt; 
 &lt;li&gt;Neo-tree won&#39;t leave its window scrolled to the last line when there is plenty of room to display the whole tree.&lt;/li&gt; 
 &lt;li&gt;Neo-tree does not need to be manually refreshed (set &lt;code&gt;use_libuv_file_watcher=true&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Neo-tree can intelligently follow the current file (set &lt;code&gt;follow_current_file.enabled=true&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Neo-tree is thoughtful about maintaining or setting focus on the right node&lt;/li&gt; 
 &lt;li&gt;Neo-tree windows in different tabs are completely separate&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;respect_gitignore&lt;/code&gt; actually works!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Neo-tree is meant to be smooth, efficient, stable, and intuitive. If you find anything janky, slow, broken, or unintuitive, please open an issue so we can fix it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;This plugin relies upon these two excellent library plugins:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;MunifTanjim/nui.nvim&lt;/a&gt; for all UI components, including the tree!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;nvim-lua/plenary.nvim&lt;/a&gt; for backend utilities, such as scanning the filesystem.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are also some optional plugins that work with Neo-tree:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-tree/nvim-web-devicons&lt;/a&gt; for file icons.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/antosha417/nvim-lsp-file-operations&quot;&gt;antosha417/nvim-lsp-file-operations&lt;/a&gt; for LSP-enhanced renames/etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;folke/snacks.nvim&lt;/a&gt; for image previews, see Preview Mode section. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/rename.md#neo-treenvim&quot;&gt;snacks.rename&lt;/a&gt; can also work with Neo-tree&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/3rd/image.nvim&quot;&gt;3rd/image.nvim&lt;/a&gt; for image previews. 
  &lt;ul&gt; 
   &lt;li&gt;If both snacks.nvim and image.nvim are installed. Neo-tree currently will try to preview with snacks.nvim first, then try image.nvim.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/s1n7ax/nvim-window-picker&quot;&gt;s1n7ax/nvim-window-picker&lt;/a&gt; for &lt;code&gt;_with_window_picker&lt;/code&gt; keymaps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;mini.deps example:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local add = MiniDeps.add

add({
  source = &#39;nvim-neo-tree/neo-tree.nvim&#39;,
  checkout = &#39;v3.x&#39;,
  depends = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- optional, but recommended
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;lazy.nvim example:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;nvim-neo-tree/neo-tree.nvim&quot;,
    branch = &quot;v3.x&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;MunifTanjim/nui.nvim&quot;,
      &quot;nvim-tree/nvim-web-devicons&quot;, -- optional, but recommended
    },
    lazy = false, -- neo-tree will lazily load itself
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt; lazy.nvim example with all optional plugins: &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &quot;nvim-neo-tree/neo-tree.nvim&quot;,
    branch = &quot;v3.x&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;MunifTanjim/nui.nvim&quot;,
      &quot;nvim-tree/nvim-web-devicons&quot;,
    },
  },
  {
    &quot;antosha417/nvim-lsp-file-operations&quot;,
    dependencies = {
      &quot;nvim-lua/plenary.nvim&quot;,
      &quot;nvim-neo-tree/neo-tree.nvim&quot;, -- makes sure that this loads after Neo-tree.
    },
    config = function()
      require(&quot;lsp-file-operations&quot;).setup()
    end,
  },
  {
    &quot;s1n7ax/nvim-window-picker&quot;,
    version = &quot;2.*&quot;,
    config = function()
      require(&quot;window-picker&quot;).setup({
        filter_rules = {
          include_current_win = false,
          autoselect_one = true,
          -- filter using buffer options
          bo = {
            -- if the file type is one of following, the window will be ignored
            filetype = { &quot;neo-tree&quot;, &quot;neo-tree-popup&quot;, &quot;notify&quot; },
            -- if the buffer type is one of following, the window will be ignored
            buftype = { &quot;terminal&quot;, &quot;quickfix&quot; },
          },
        },
      })
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; Packer.nvim example: &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use({
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  branch = &quot;v3.x&quot;,
  requires = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- optional, but recommended
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; vim.pack example (Neovim v0.12, still in development at time of writing): &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add({
  {
    src = &#39;https://github.com/nvim-neo-tree/neo-tree.nvim&#39;,
    version = vim.version.range(&#39;3&#39;)
  },
  -- dependencies
  &quot;nvim-lua/plenary.nvim&quot;,
  &quot;MunifTanjim/nui.nvim&quot;,
  -- optional, but recommended
  &quot;nvim-tree/nvim-web-devicons&quot;,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Manual installation via &lt;code&gt;:h packages&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/doc/install.sh&quot;&gt;doc/install.sh&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/doc/install.ps1&quot;&gt;doc/install.ps1&lt;/a&gt; for POSIX/Windows respectively.&lt;/p&gt; 
&lt;h2&gt;Post-install: Try it out!&lt;/h2&gt; 
&lt;p&gt;Try &lt;code&gt;:Neotree&lt;/code&gt; to open Neo-tree as a sidebar, and press &lt;code&gt;?&lt;/code&gt; while in Neo-tree to open the keyboard help.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You can &lt;code&gt;:checkhealth neo-tree&lt;/code&gt; to ensure you have all the required dependencies. It can also check that your config table looks correct. This is still in its early stages, so please file issues if you&#39;d like to see more checks added or a check isn&#39;t working properly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;neo-tree&#39;).setup({
  -- options go here
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt; 💤 lazy.nvim/Neovim distro users: &lt;/summary&gt; 
 &lt;p&gt;The table passed into &lt;code&gt;setup()&lt;/code&gt; has a type of &lt;code&gt;neotree.Config&lt;/code&gt;. If you&#39;re on a distro using lazy.nvim (e.g. LazyVim) or you just like the syntax, you might want to consider using lazy.nvim&#39;s &lt;code&gt;opts&lt;/code&gt; instead:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;nvim-neo-tree/neo-tree.nvim&quot;,
  branch = &quot;v3.x&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;, -- optional, but recommended
  },
  lazy = false, -- neo-tree will lazily load itself
  ---@module &#39;neo-tree&#39;
  ---@type neotree.Config
  opts = {
    -- options go here
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You do not need to call &lt;code&gt;setup()&lt;/code&gt; for Neo-tree and its commands to work. &lt;code&gt;setup()&lt;/code&gt; is only for configuration.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt; Example configuration featuring many interesting settings: &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;e&quot;, &quot;&amp;lt;Cmd&amp;gt;Neotree&amp;lt;CR&amp;gt;&quot;)
require(&quot;neo-tree&quot;).setup({
  close_if_last_window = false, -- Close Neo-tree if it is the last window left in the tab
  popup_border_style = &quot;NC&quot;, -- or &quot;&quot; to use &#39;winborder&#39; on Neovim v0.11+
  enable_git_status = true,
  enable_diagnostics = true,
  open_files_do_not_replace_types = { &quot;terminal&quot;, &quot;trouble&quot;, &quot;qf&quot; }, -- when opening files, do not use windows containing these filetypes or buftypes
  open_files_using_relative_paths = false,
  sort_case_insensitive = false, -- used when sorting files and directories in the tree
  sort_function = nil, -- use a custom function for sorting files and directories in the tree
  -- sort_function = function (a,b)
  --       if a.type == b.type then
  --           return a.path &amp;gt; b.path
  --       else
  --           return a.type &amp;gt; b.type
  --       end
  --   end , -- this sorts files and directories descendantly
  default_component_configs = {
    container = {
      enable_character_fade = true,
    },
    indent = {
      indent_size = 2,
      padding = 1, -- extra padding on left hand side
      -- indent guides
      with_markers = true,
      indent_marker = &quot;│&quot;,
      last_indent_marker = &quot;└&quot;,
      highlight = &quot;NeoTreeIndentMarker&quot;,
      -- expander config, needed for nesting files
      with_expanders = nil, -- if nil and file nesting is enabled, will enable expanders
      expander_collapsed = &quot;&quot;,
      expander_expanded = &quot;&quot;,
      expander_highlight = &quot;NeoTreeExpander&quot;,
    },
    icon = {
      folder_closed = &quot;&quot;,
      folder_open = &quot;&quot;,
      folder_empty = &quot;󰜌&quot;,
      provider = function(icon, node, state) -- default icon provider utilizes nvim-web-devicons if available
        if node.type == &quot;file&quot; or node.type == &quot;terminal&quot; then
          local success, web_devicons = pcall(require, &quot;nvim-web-devicons&quot;)
          local name = node.type == &quot;terminal&quot; and &quot;terminal&quot; or node.name
          if success then
            local devicon, hl = web_devicons.get_icon(name)
            icon.text = devicon or icon.text
            icon.highlight = hl or icon.highlight
          end
        end
      end,
      -- The next two settings are only a fallback, if you use nvim-web-devicons and configure default icons there
      -- then these will never be used.
      default = &quot;*&quot;,
      highlight = &quot;NeoTreeFileIcon&quot;,
    },
    modified = {
      symbol = &quot;[+]&quot;,
      highlight = &quot;NeoTreeModified&quot;,
    },
    name = {
      trailing_slash = false,
      use_git_status_colors = true,
      highlight = &quot;NeoTreeFileName&quot;,
    },
    git_status = {
      symbols = {
        -- Change type
        added = &quot;&quot;, -- or &quot;✚&quot;
        modified = &quot;&quot;, -- or &quot;&quot;
        deleted = &quot;✖&quot;, -- this can only be used in the git_status source
        renamed = &quot;󰁕&quot;, -- this can only be used in the git_status source
        -- Status type
        untracked = &quot;&quot;,
        ignored = &quot;&quot;,
        unstaged = &quot;󰄱&quot;,
        staged = &quot;&quot;,
        conflict = &quot;&quot;,
      },
    },
    -- If you don&#39;t want to use these columns, you can set `enabled = false` for each of them individually
    file_size = {
      enabled = true,
      width = 12, -- width of the column
      required_width = 64, -- min width of window required to show this column
    },
    type = {
      enabled = true,
      width = 10, -- width of the column
      required_width = 122, -- min width of window required to show this column
    },
    last_modified = {
      enabled = true,
      width = 20, -- width of the column
      required_width = 88, -- min width of window required to show this column
    },
    created = {
      enabled = true,
      width = 20, -- width of the column
      required_width = 110, -- min width of window required to show this column
    },
    symlink_target = {
      enabled = false,
    },
  },
  -- A list of functions, each representing a global custom command
  -- that will be available in all sources (if not overridden in `opts[source_name].commands`)
  -- see `:h neo-tree-custom-commands-global`
  commands = {},
  window = {
    position = &quot;left&quot;,
    width = 40,
    mapping_options = {
      noremap = true,
      nowait = true,
    },
    mappings = {
      [&quot;&amp;lt;space&amp;gt;&quot;] = {
        &quot;toggle_node&quot;,
        nowait = false, -- disable `nowait` if you have existing combos starting with this char that you want to use
      },
      [&quot;&amp;lt;2-LeftMouse&amp;gt;&quot;] = &quot;open&quot;,
      [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;open&quot;,
      [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;cancel&quot;, -- close preview or floating neo-tree window
      [&quot;P&quot;] = {
        &quot;toggle_preview&quot;,
        config = {
          use_float = true,
          use_snacks_image = true,
          use_image_nvim = true,
        },
      },
      -- Read `# Preview Mode` for more information
      [&quot;l&quot;] = &quot;focus_preview&quot;,
      [&quot;S&quot;] = &quot;open_split&quot;,
      [&quot;s&quot;] = &quot;open_vsplit&quot;,
      -- [&quot;S&quot;] = &quot;split_with_window_picker&quot;,
      -- [&quot;s&quot;] = &quot;vsplit_with_window_picker&quot;,
      [&quot;t&quot;] = &quot;open_tabnew&quot;,
      -- [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;open_drop&quot;,
      -- [&quot;t&quot;] = &quot;open_tab_drop&quot;,
      [&quot;w&quot;] = &quot;open_with_window_picker&quot;,
      --[&quot;P&quot;] = &quot;toggle_preview&quot;, -- enter preview mode, which shows the current node without focusing
      [&quot;C&quot;] = &quot;close_node&quot;,
      -- [&#39;C&#39;] = &#39;close_all_subnodes&#39;,
      [&quot;z&quot;] = &quot;close_all_nodes&quot;,
      --[&quot;Z&quot;] = &quot;expand_all_nodes&quot;,
      --[&quot;Z&quot;] = &quot;expand_all_subnodes&quot;,
      [&quot;a&quot;] = {
        &quot;add&quot;,
        -- this command supports BASH style brace expansion (&quot;x{a,b,c}&quot; -&amp;gt; xa,xb,xc). see `:h neo-tree-file-actions` for details
        -- some commands may take optional config options, see `:h neo-tree-mappings` for details
        config = {
          show_path = &quot;none&quot;, -- &quot;none&quot;, &quot;relative&quot;, &quot;absolute&quot;
        },
      },
      [&quot;A&quot;] = &quot;add_directory&quot;, -- also accepts the optional config.show_path option like &quot;add&quot;. this also supports BASH style brace expansion.
      [&quot;d&quot;] = &quot;delete&quot;,
      [&quot;r&quot;] = &quot;rename&quot;,
      [&quot;b&quot;] = &quot;rename_basename&quot;,
      [&quot;y&quot;] = &quot;copy_to_clipboard&quot;,
      [&quot;x&quot;] = &quot;cut_to_clipboard&quot;,
      [&quot;p&quot;] = &quot;paste_from_clipboard&quot;,
      [&quot;c&quot;] = &quot;copy&quot;, -- takes text input for destination, also accepts the optional config.show_path option like &quot;add&quot;:
      -- [&quot;c&quot;] = {
      --  &quot;copy&quot;,
      --  config = {
      --    show_path = &quot;none&quot; -- &quot;none&quot;, &quot;relative&quot;, &quot;absolute&quot;
      --  }
      --}
      [&quot;m&quot;] = &quot;move&quot;, -- takes text input for destination, also accepts the optional config.show_path option like &quot;add&quot;.
      [&quot;q&quot;] = &quot;close_window&quot;,
      [&quot;R&quot;] = &quot;refresh&quot;,
      [&quot;?&quot;] = &quot;show_help&quot;,
      [&quot;&amp;lt;&quot;] = &quot;prev_source&quot;,
      [&quot;&amp;gt;&quot;] = &quot;next_source&quot;,
      [&quot;i&quot;] = &quot;show_file_details&quot;,
      -- [&quot;i&quot;] = {
      --   &quot;show_file_details&quot;,
      --   -- format strings of the timestamps shown for date created and last modified (see `:h os.date()`)
      --   -- both options accept a string or a function that takes in the date in seconds and returns a string to display
      --   -- config = {
      --   --   created_format = &quot;%Y-%m-%d %I:%M %p&quot;,
      --   --   modified_format = &quot;relative&quot;, -- equivalent to the line below
      --   --   modified_format = function(seconds) return require(&#39;neo-tree.utils&#39;).relative_date(seconds) end
      --   -- }
      -- },
    },
  },
  nesting_rules = {},
  filesystem = {
    filtered_items = {
      visible = false, -- when true, they will just be displayed differently than normal items
      hide_dotfiles = true,
      hide_gitignored = true,
      hide_hidden = true, -- only works on Windows for hidden files/directories
      hide_by_name = {
        --&quot;node_modules&quot;
      },
      hide_by_pattern = { -- uses glob style patterns
        --&quot;*.meta&quot;,
        --&quot;*/src/*/tsconfig.json&quot;,
      },
      always_show = { -- remains visible even if other settings would normally hide it
        --&quot;.gitignored&quot;,
      },
      always_show_by_pattern = { -- uses glob style patterns
        --&quot;.env*&quot;,
      },
      never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show
        --&quot;.DS_Store&quot;,
        --&quot;thumbs.db&quot;
      },
      never_show_by_pattern = { -- uses glob style patterns
        --&quot;.null-ls_*&quot;,
      },
    },
    follow_current_file = {
      enabled = false, -- This will find and focus the file in the active buffer every time
      --               -- the current file is changed while the tree is open.
      leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
    },
    group_empty_dirs = false, -- when true, empty folders will be grouped together
    hijack_netrw_behavior = &quot;open_default&quot;, -- netrw disabled, opening a directory opens neo-tree
    -- in whatever position is specified in window.position
    -- &quot;open_current&quot;,  -- netrw disabled, opening a directory opens within the
    -- window like netrw would, regardless of window.position
    -- &quot;disabled&quot;,    -- netrw left alone, neo-tree does not handle opening dirs
    use_libuv_file_watcher = false, -- This will use the OS level file watchers to detect changes
    -- instead of relying on nvim autocmd events.
    window = {
      mappings = {
        [&quot;&amp;lt;bs&amp;gt;&quot;] = &quot;navigate_up&quot;,
        [&quot;.&quot;] = &quot;set_root&quot;,
        [&quot;H&quot;] = &quot;toggle_hidden&quot;,
        [&quot;/&quot;] = &quot;fuzzy_finder&quot;,
        [&quot;D&quot;] = &quot;fuzzy_finder_directory&quot;,
        [&quot;#&quot;] = &quot;fuzzy_sorter&quot;, -- fuzzy sorting using the fzy algorithm
        -- [&quot;D&quot;] = &quot;fuzzy_sorter_directory&quot;,
        [&quot;f&quot;] = &quot;filter_on_submit&quot;,
        [&quot;&amp;lt;c-x&amp;gt;&quot;] = &quot;clear_filter&quot;,
        [&quot;[g&quot;] = &quot;prev_git_modified&quot;,
        [&quot;]g&quot;] = &quot;next_git_modified&quot;,
        [&quot;o&quot;] = {
          &quot;show_help&quot;,
          nowait = false,
          config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
        },
        [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
        [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
        [&quot;og&quot;] = { &quot;order_by_git_status&quot;, nowait = false },
        [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
        [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
        [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
        [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
        -- [&#39;&amp;lt;key&amp;gt;&#39;] = function(state) ... end,
      },
      fuzzy_finder_mappings = { -- define keymaps for filter popup window in fuzzy_finder_mode
        [&quot;&amp;lt;down&amp;gt;&quot;] = &quot;move_cursor_down&quot;,
        [&quot;&amp;lt;C-n&amp;gt;&quot;] = &quot;move_cursor_down&quot;,
        [&quot;&amp;lt;up&amp;gt;&quot;] = &quot;move_cursor_up&quot;,
        [&quot;&amp;lt;C-p&amp;gt;&quot;] = &quot;move_cursor_up&quot;,
        [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;close&quot;,
        [&quot;&amp;lt;S-CR&amp;gt;&quot;] = &quot;close_keep_filter&quot;,
        [&quot;&amp;lt;C-CR&amp;gt;&quot;] = &quot;close_clear_filter&quot;,
        [&quot;&amp;lt;C-w&amp;gt;&quot;] = { &quot;&amp;lt;C-S-w&amp;gt;&quot;, raw = true },
        {
          -- normal mode mappings
          n = {
            [&quot;j&quot;] = &quot;move_cursor_down&quot;,
            [&quot;k&quot;] = &quot;move_cursor_up&quot;,
            [&quot;&amp;lt;S-CR&amp;gt;&quot;] = &quot;close_keep_filter&quot;,
            [&quot;&amp;lt;C-CR&amp;gt;&quot;] = &quot;close_clear_filter&quot;,
            [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;close&quot;,
          }
        }
        -- [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;noop&quot;, -- if you want to use normal mode
        -- [&quot;key&quot;] = function(state, scroll_padding) ... end,
      },
    },

    commands = {}, -- Add a custom command or override a global one using the same function name
  },
  buffers = {
    follow_current_file = {
      enabled = true, -- This will find and focus the file in the active buffer every time
      --              -- the current file is changed while the tree is open.
      leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
    },
    group_empty_dirs = true, -- when true, empty folders will be grouped together
    show_unloaded = true,
    window = {
      mappings = {
        [&quot;d&quot;] = &quot;buffer_delete&quot;,
        [&quot;bd&quot;] = &quot;buffer_delete&quot;,
        [&quot;&amp;lt;bs&amp;gt;&quot;] = &quot;navigate_up&quot;,
        [&quot;.&quot;] = &quot;set_root&quot;,
        [&quot;o&quot;] = {
          &quot;show_help&quot;,
          nowait = false,
          config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
        },
        [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
        [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
        [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
        [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
        [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
        [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
      },
    },
  },
  git_status = {
    window = {
      position = &quot;float&quot;,
      mappings = {
        [&quot;A&quot;] = &quot;git_add_all&quot;,
        [&quot;gu&quot;] = &quot;git_unstage_file&quot;,
        [&quot;gU&quot;] = &quot;git_undo_last_commit&quot;,
        [&quot;ga&quot;] = &quot;git_add_file&quot;,
        [&quot;gr&quot;] = &quot;git_revert_file&quot;,
        [&quot;gc&quot;] = &quot;git_commit&quot;,
        [&quot;gp&quot;] = &quot;git_push&quot;,
        [&quot;gg&quot;] = &quot;git_commit_and_push&quot;,
        [&quot;o&quot;] = {
          &quot;show_help&quot;,
          nowait = false,
          config = { title = &quot;Order by&quot;, prefix_key = &quot;o&quot; },
        },
        [&quot;oc&quot;] = { &quot;order_by_created&quot;, nowait = false },
        [&quot;od&quot;] = { &quot;order_by_diagnostics&quot;, nowait = false },
        [&quot;om&quot;] = { &quot;order_by_modified&quot;, nowait = false },
        [&quot;on&quot;] = { &quot;order_by_name&quot;, nowait = false },
        [&quot;os&quot;] = { &quot;order_by_size&quot;, nowait = false },
        [&quot;ot&quot;] = { &quot;order_by_type&quot;, nowait = false },
      },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree&lt;/code&gt; for full documentation. You can also preview that online at &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/doc/neo-tree.txt&quot;&gt;doc/neo-tree.txt&lt;/a&gt;, although it&#39;s best viewed within Neovim.&lt;/p&gt; 
&lt;p&gt;To see all of the default config options with commentary, you can view it online at &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/lua/neo-tree/defaults.lua&quot;&gt;lua/neo-tree/defaults.lua&lt;/a&gt;. You can also paste it into a buffer after installing Neo-tree by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:lua require(&quot;neo-tree&quot;).paste_default_config()
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Diagnostics icons:&lt;/summary&gt; 
 &lt;p&gt;If you want icons for diagnostic errors, you&#39;ll need to define them somewhere. In Neovim v0.10+, you can configure them in vim.diagnostic.config(), like:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.diagnostic.config({
  signs = {
    text = {
      [vim.diagnostic.severity.ERROR] = &#39;&#39;,
      [vim.diagnostic.severity.WARN] = &#39;&#39;,
      [vim.diagnostic.severity.INFO] = &#39;&#39;,
      [vim.diagnostic.severity.HINT] = &#39;󰌵&#39;,
    },
  }
})
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For older versions of Neovim:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.fn.sign_define(&quot;DiagnosticSignError&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignError&quot; })
vim.fn.sign_define(&quot;DiagnosticSignWarn&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignWarn&quot; })
vim.fn.sign_define(&quot;DiagnosticSignInfo&quot;, { text = &quot; &quot;, texthl = &quot;DiagnosticSignInfo&quot; })
vim.fn.sign_define(&quot;DiagnosticSignHint&quot;, { text = &quot;󰌵&quot;, texthl = &quot;DiagnosticSignHint&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;The &lt;code&gt;:Neotree&lt;/code&gt; Command&lt;/h2&gt; 
&lt;p&gt;The single &lt;code&gt;:Neotree&lt;/code&gt; command accepts a range of arguments that give you full control over the details of what and where it will show. For example, the following command will open a file browser on the right hand side, &quot;revealing&quot; the currently active file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree filesystem reveal right
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arguments can be specified as either a key=value pair or just as the value. The key=value form is more verbose but may help with clarity. For example, the command above can also be specified as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree source=filesystem reveal=true position=right
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All arguments are optional and can be specified in any order. If you issue the command without any arguments, it will use default values for everything. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will open the filesystem source on the left hand side and focus it, if you are using the default config.&lt;/p&gt; 
&lt;h3&gt;Tab Completion&lt;/h3&gt; 
&lt;p&gt;Neotree supports tab completion for all arguments. Once a given argument has a value, it will stop suggesting those completions. It will also offer completions for paths. The simplest way to disambiguate a path from another type of argument is to start them with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;./&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Arguments&lt;/h3&gt; 
&lt;p&gt;Here is the full list of arguments you can use:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;action&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;What to do. Can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;focus&lt;/td&gt; 
   &lt;td&gt;Show and/or switch focus to the specified Neotree window. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;show&lt;/td&gt; 
   &lt;td&gt;Show the window, but keep focus on your current window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;close&lt;/td&gt; 
   &lt;td&gt;Close the window(s) specified. Can be combined with &quot;position&quot; and/or &quot;source&quot; to specify which window(s) to close.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;source&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;What to show. Can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;filesystem&lt;/td&gt; 
   &lt;td&gt;Show a file browser. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;buffers&lt;/td&gt; 
   &lt;td&gt;Show a list of currently open buffers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;git_status&lt;/td&gt; 
   &lt;td&gt;Show the output of &lt;code&gt;git status&lt;/code&gt; in a tree layout.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;last&lt;/td&gt; 
   &lt;td&gt;Equivalent to the last source used&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;position&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Where to show it, can be one of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;left&lt;/td&gt; 
   &lt;td&gt;Open as left hand sidebar. DEFAULT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;right&lt;/td&gt; 
   &lt;td&gt;Open as right hand sidebar.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;top&lt;/td&gt; 
   &lt;td&gt;Open as top window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bottom&lt;/td&gt; 
   &lt;td&gt;Open as bottom window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;float&lt;/td&gt; 
   &lt;td&gt;Open as floating window.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;current&lt;/td&gt; 
   &lt;td&gt;Open within the current window, like netrw or vinegar would.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;code&gt;toggle&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Adding this means that the window will be closed if it is already open.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The directory to set as the root/cwd of the specified window. If you include a directory as one of the arguments, it will be assumed to be this option, you don&#39;t need the full dir=/path. You may use any value that can be passed to the &#39;expand&#39; function, such as &lt;code&gt;%:p:h:h&lt;/code&gt; to specify two directories up from the current file. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree ./relative/path
:Neotree /home/user/relative/path
:Neotree dir=/home/user/relative/path
:Neotree position=current dir=relative/path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;git_base&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The base that is used to calculate the git status for each dir/file. By default it uses &lt;code&gt;HEAD&lt;/code&gt;, so it shows all changes that are not yet committed. You can for example work on a feature branch, and set it to &lt;code&gt;main&lt;/code&gt;. It will show all changes that happened on the feature branch and main since you branched off.&lt;/p&gt; 
&lt;p&gt;Any git ref, commit, tag, or sha will work.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree main
:Neotree v1.0
:Neotree git_base=8fe34be
:Neotree git_base=HEAD
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;reveal&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Adding this will make Neotree automatically find and focus the current file when it opens.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;reveal_file&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A path to a file to reveal. This supersedes the &quot;reveal&quot; flag so there is no need to specify both. Use this if you want to reveal something other than the current file. If you include a path to a file as one of the arguments, it will be assumed to be this option. Like &quot;dir&quot;, you can pass any value that can be passed to the &#39;expand&#39; function. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree reveal_file=/home/user/my/file.text
:Neotree position=current dir=%:p:h:h reveal_file=%:p
:Neotree current %:p:h:h %:p
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One neat trick you can do with this is to open a Neotree window which is focused on the file under the cursor using the &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nnoremap gd :Neotree float reveal_file=&amp;lt;cfile&amp;gt; reveal_force_cwd&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;reveal_force_cwd&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. Normally, if you use one of the reveal options and the given file is not within the current working directory, you will be asked if you want to change the current working directory. If you include this flag, it will automatically change the directory without prompting. This option implies &quot;reveal&quot;, so you do not need to specify both.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;selector&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;This is a boolean flag. When you specifically set this to false (&lt;code&gt;selector=false&lt;/code&gt;) neo-tree will disable the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/#source-selector&quot;&gt;source selector&lt;/a&gt; for that neo-tree instance. Otherwise, the source selector will depend on what you specified in the configuration (&lt;code&gt;config.source_selector.{winbar,statusline}&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree-commands&lt;/code&gt; for details and a full listing of available arguments.&lt;/p&gt; 
&lt;h3&gt;File Nesting&lt;/h3&gt; 
&lt;p&gt;See &lt;code&gt;:h neo-tree-file-nesting&lt;/code&gt; for more details about file nesting.&lt;/p&gt; 
&lt;h3&gt;Netrw Hijack&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;:edit .
:[v]split .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;code&gt;&quot;filesystem.window.position&quot;&lt;/code&gt; is set to &lt;code&gt;&quot;current&quot;&lt;/code&gt;, or if you have specified &lt;code&gt;filesystem.hijack_netrw_behavior = &quot;open_current&quot;&lt;/code&gt;, then any command that would open a directory will open neo-tree in the specified window.&lt;/p&gt; 
&lt;h2&gt;Sources&lt;/h2&gt; 
&lt;p&gt;Neo-tree is built on the idea of supporting various sources. Sources are basically interface implementations whose job it is to provide a list of hierarchical items to be rendered, along with commands that are appropriate to those items.&lt;/p&gt; 
&lt;h3&gt;filesystem&lt;/h3&gt; 
&lt;p&gt;The default source is &lt;code&gt;filesystem&lt;/code&gt;, which displays your files and folders. This is the default source in commands when none is specified.&lt;/p&gt; 
&lt;p&gt;This source can be used to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Browse the filesystem&lt;/li&gt; 
 &lt;li&gt;Control the current working directory of nvim&lt;/li&gt; 
 &lt;li&gt;Add/Copy/Delete/Move/Rename files and directories&lt;/li&gt; 
 &lt;li&gt;Search the filesystem&lt;/li&gt; 
 &lt;li&gt;Monitor git status and lsp diagnostics for the current working directory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;buffers&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-buffers.png&quot; alt=&quot;Neo-tree buffers&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Another available source is &lt;code&gt;buffers&lt;/code&gt;, which displays your open buffers. This is the same list you would see from &lt;code&gt;:ls&lt;/code&gt;. To show with the &lt;code&gt;buffers&lt;/code&gt; list, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree buffers
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;git_status&lt;/h3&gt; 
&lt;p&gt;This view take the results of the &lt;code&gt;git status&lt;/code&gt; command and display them in a tree. It includes commands for adding, unstaging, reverting, and committing.&lt;/p&gt; 
&lt;p&gt;The screenshot below shows the result of &lt;code&gt;:Neotree float git_status&lt;/code&gt; while the filesystem is open in a sidebar:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-git_status.png&quot; alt=&quot;Neo-tree git_status&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can specify a different git base here as well. But be aware that it is not possible to unstage / revert a file that is already committed.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree float git_status git_base=main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;document_symbols&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/neo-tree-document-symbols.png&quot; alt=&quot;Neo-tree document_symbols&quot; /&gt; The document_symbols source lists the symbols in the current document obtained by the LSP request &quot;textDocument/documentSymbols&quot;. It currently supports the following features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; UI: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Display all symbols in the current file with symbol kinds&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Symbols nesting&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Configurable kinds&#39; name and icon&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Auto-refresh symbol list 
    &lt;ul&gt; 
     &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Follow cursor&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Commands 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Jump to symbols, open symbol in split,... (&lt;code&gt;open_split&lt;/code&gt; and friends)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Rename symbols (&lt;code&gt;rename&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Preview symbol (&lt;code&gt;preview&lt;/code&gt; and friends)&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Hover docs&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Call hierarchy&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LSP 
  &lt;ul&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LSP Support&lt;/li&gt; 
   &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; LSP server selection (ignore, allow_only, use first, use all, etc.)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; CoC Support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See #879 for the tracking issue of these features.&lt;/p&gt; 
&lt;p&gt;This source is currently experimental, so in order to use it, you need to first add &lt;code&gt;&quot;document_symbols&quot;&lt;/code&gt; to &lt;code&gt;config.sources&lt;/code&gt; and open it with the command&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Neotree document_symbols
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;External Sources&lt;/h3&gt; 
&lt;p&gt;There are more sources available as extensions that are managed outside of this repository. See the &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/External-Sources&quot;&gt;wiki&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Source Selector&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-source-selector.png&quot; alt=&quot;Neo-tree source selector&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can enable a clickable source selector in either the winbar (requires neovim 0.8+) or the statusline. To do so, set one of these options to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;    require(&quot;neo-tree&quot;).setup({
        source_selector = {
            winbar = false,
            statusline = false
        }
    })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many configuration options to change the style of these tabs. See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/lua/neo-tree/defaults.lua&quot;&gt;lua/neo-tree/defaults.lua&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Preview Mode&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;:h neo-tree-preview-mode&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Preview mode will temporarily show whatever file the cursor is on without switching focus from the Neo-tree window. By default, files will be previewed in a new floating window. This can also be configured to automatically choose an existing split by configuring the command like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neo-tree&quot;).setup({
  window = {
    mappings = {
      [&quot;P&quot;] = {
        &quot;toggle_preview&quot;,
        config = {
          use_float = false,
          -- use_image_nvim = true,
          -- use_snacks_image = true,
          -- title = &#39;Neo-tree Preview&#39;,
        },
      },
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Anything that causes Neo-tree to lose focus will end preview mode. When &lt;code&gt;use_float = false&lt;/code&gt;, the window that was taken over by preview mode will revert back to whatever was shown in that window before preview mode began.&lt;/p&gt; 
&lt;p&gt;You can choose a custom title for the floating window by setting the &lt;code&gt;title&lt;/code&gt; option in its config.&lt;/p&gt; 
&lt;p&gt;If you want to work with the floating preview mode window in autocmds or other custom code, the window will have the &lt;code&gt;neo-tree-preview&lt;/code&gt; filetype.&lt;/p&gt; 
&lt;p&gt;When preview mode is not using floats, the window will have the window local variable &lt;code&gt;neo_tree_preview&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; to indicate that it is being used as a preview window. You can refer to this in statusline and winbar configs to mark a window as being used as a preview.&lt;/p&gt; 
&lt;h4&gt;Image Support in Preview Mode&lt;/h4&gt; 
&lt;p&gt;If you have &lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/image.md&quot;&gt;folke/snacks.nvim&lt;/a&gt; or &lt;a href=&quot;https://github.com/3rd/image.nvim&quot;&gt;3rd/image.nvim&lt;/a&gt; installed, preview mode supports image rendering by default using kitty graphics protocol or ueberzug (&lt;a href=&quot;https://user-images.githubusercontent.com/41065736/277180763-b7152637-f310-43a5-b8c3-4bcba135629d.mp4&quot;&gt;Video&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;However, if you do not want this feature, you can disable it by setting &lt;code&gt;use_snacks_image = false&lt;/code&gt; or &lt;code&gt;use_image_nvim = false&lt;/code&gt; in the mappings config mentioned above.&lt;/p&gt; 
&lt;h2&gt;Configuration and Customization&lt;/h2&gt; 
&lt;p&gt;This is designed to be flexible. The way that is achieved is by making everything a function, or a string that identifies a built-in function. All of the built-in functions can be replaced with your own implementation, or you can add new ones.&lt;/p&gt; 
&lt;p&gt;Each node in the tree is created from the renderer specified for the given node type, and each renderer is a list of component configs to be rendered in order. Each component is a function, either built-in or specified in your config. Those functions simply return the text and highlight group for the component.&lt;/p&gt; 
&lt;p&gt;Additionally, there is an events system that you can hook into. If you want to show some new data point related to your files, gather it in the &lt;code&gt;before_render&lt;/code&gt; event, create a component to display it, and reference that component in the renderer for the &lt;code&gt;file&lt;/code&gt; and/or &lt;code&gt;directory&lt;/code&gt; type.&lt;/p&gt; 
&lt;p&gt;Details on how to configure everything is in the help file at &lt;code&gt;:h neo-tree-configuration&lt;/code&gt; or online at &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/raw/main/doc/neo-tree.txt&quot;&gt;neo-tree.txt&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Recipes for customizations can be found on the &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes&quot;&gt;wiki&lt;/a&gt;. Recipes include things like adding a component to show the &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;Harpoon&lt;/a&gt; index for files, or responding to the &lt;code&gt;&quot;file_opened&quot;&lt;/code&gt; event to auto clear the search when you open a file.&lt;/p&gt; 
&lt;h2&gt;Why?&lt;/h2&gt; 
&lt;p&gt;There are many tree plugins for (Neo)vim, so why make another one? Well, I wanted something that was:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Easy to maintain and enhance.&lt;/li&gt; 
 &lt;li&gt;Stable.&lt;/li&gt; 
 &lt;li&gt;Easy to customize.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Easy to maintain and enhance&lt;/h3&gt; 
&lt;p&gt;This plugin is designed to grow and be flexible. This is accomplished by making the code as decoupled and functional as possible. Hopefully new contributors will find it easy to work with.&lt;/p&gt; 
&lt;p&gt;One big difference between this plugin and the ones that came before it, which is also what finally pushed me over the edge into making a new plugin, is that we now have libraries to build upon that did not exist when other tree plugins were created. Most notably, &lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;nui.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvm&lt;/a&gt;. Building upon shared libraries will go a long way in making neo-tree easy to maintain.&lt;/p&gt; 
&lt;h3&gt;Stable&lt;/h3&gt; 
&lt;p&gt;This project will have releases and release tags that follow a simplified Semantic Versioning scheme. The quickstart instructions will always refer to the latest stable major version. Following the &lt;strong&gt;main&lt;/strong&gt; branch is for contributors and those that always want bleeding edge. There will be branches for &lt;strong&gt;v1.x&lt;/strong&gt;, &lt;strong&gt;v2.x&lt;/strong&gt;, etc which will receive updates after a short testing period in &lt;strong&gt;main&lt;/strong&gt;. You should be safe to follow those branches and be sure your tree won&#39;t break in an update. There will also be tags for each release pushed to those branches named &lt;strong&gt;v1.1&lt;/strong&gt;, &lt;strong&gt;v1.2&lt;/strong&gt;, etc. If stability is critical to you, or a bug accidentally makes it into &lt;strong&gt;v3.x&lt;/strong&gt;, you can use those tags instead. It&#39;s possible we may backport bug fixes to those tags, but no guarantees on that.&lt;/p&gt; 
&lt;p&gt;There will never be a breaking change within a major version (1.x, 2.x, etc.) If a breaking change is needed, there will be depracation warnings in the prior major version, and the breaking change will happen in the next major version.&lt;/p&gt; 
&lt;h3&gt;Easy to Customize&lt;/h3&gt; 
&lt;p&gt;Neo-tree follows in the spirit of plugins like &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/noib3/nvim-cokeline&quot;&gt;nvim-cokeline&lt;/a&gt;. Everything will be configurable and take either strings, tables, or functions. You can take sane defaults or build your tree items from scratch. There should be the ability to add any features you can think of through existing hooks in the setup function.&lt;/p&gt; 
&lt;h2&gt;What is a Breaking Change?&lt;/h2&gt; 
&lt;p&gt;As of v1.30, a breaking change is defined as anything that &lt;em&gt;changes&lt;/em&gt; existing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;vim commands (&lt;code&gt;:Neotree&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;configuration options that are passed into the &lt;code&gt;setup()&lt;/code&gt; function&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NeoTree*&lt;/code&gt; highlight groups&lt;/li&gt; 
 &lt;li&gt;lua functions exported in the following modules that are not prefixed with &lt;code&gt;_&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.events&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.sources.manager&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.sources.*&lt;/code&gt; (init.lua files)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.sources.*.commands&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.ui.renderer&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;neo-tree.utils&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If there are other functions you would like to use that are not yet considered part of the public API, please open an issue so we can discuss it.&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Contributions are encouraged. Please see &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;p&gt;First and foremost, this project is a community endeavor and would not survive without the constant stream of features and bug fixes that comes from that community. There have been many valued contributors, but a few have stepped up to become maintainers that generously donate their time to guide the project, help out others, and manage the issues. The current list of maintainers are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@pynappo&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Past maintainers:&lt;/h3&gt; 
&lt;p&gt;(in alphabetical order)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@cseickel&lt;/li&gt; 
 &lt;li&gt;@miversen33&lt;/li&gt; 
 &lt;li&gt;@nhat-vo&lt;/li&gt; 
 &lt;li&gt;@pysan3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other Projects&lt;/h3&gt; 
&lt;p&gt;The design is heavily inspired by these excellent plugins:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/noib3/nvim-cokeline&quot;&gt;nvim-cokeline&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Everything I know about writing a tree control in lua, I learned from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- vim: set textwidth=80 shiftwidth=2: --&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/starter</title>
      <link>https://github.com/LazyVim/starter</link>
      <description>&lt;p&gt;Starter template for LazyVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💤 LazyVim&lt;/h1&gt; 
&lt;p&gt;A starter template for &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt;LazyVim&lt;/a&gt;. Refer to the &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;documentation&lt;/a&gt; to get started.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>folke/snacks.nvim</title>
      <link>https://github.com/folke/snacks.nvim</link>
      <description>&lt;p&gt;🍿 A collection of QoL plugins for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🍿 &lt;code&gt;snacks.nvim&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;A collection of small QoL plugins for Neovim.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;!-- toc:start --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Snack&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Setup&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/animate.md&quot;&gt;animate&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Efficient animations including over 45 easing functions &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/bigfile.md&quot;&gt;bigfile&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Deal with big files&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/bufdelete.md&quot;&gt;bufdelete&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Delete buffers without disrupting window layout&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/dashboard.md&quot;&gt;dashboard&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Beautiful declarative dashboards&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/debug.md&quot;&gt;debug&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty inspect &amp;amp; backtraces for debugging&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/dim.md&quot;&gt;dim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Focus on the active scope by dimming the rest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/explorer.md&quot;&gt;explorer&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A file explorer (picker in disguise)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/git.md&quot;&gt;git&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Git utilities&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/gitbrowse.md&quot;&gt;gitbrowse&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open the current file, branch, commit, or repo in a browser (e.g. GitHub, GitLab, Bitbucket)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/image.md&quot;&gt;image&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Image viewer using Kitty Graphics Protocol, supported by &lt;code&gt;kitty&lt;/code&gt;, &lt;code&gt;wezterm&lt;/code&gt; and &lt;code&gt;ghostty&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/indent.md&quot;&gt;indent&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Indent guides and scopes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/input.md&quot;&gt;input&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Better &lt;code&gt;vim.ui.input&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/layout.md&quot;&gt;layout&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Window layouts&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/lazygit.md&quot;&gt;lazygit&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open LazyGit in a float, auto-configure colorscheme and integration with Neovim&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/notifier.md&quot;&gt;notifier&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/notify.md&quot;&gt;notify&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utility functions to work with Neovim&#39;s &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md&quot;&gt;picker&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Picker for selecting items&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/profiler.md&quot;&gt;profiler&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Neovim lua profiler&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/quickfile.md&quot;&gt;quickfile&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;When doing &lt;code&gt;nvim somefile.txt&lt;/code&gt;, it will render the file as quickly as possible, before loading your plugins.&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/rename.md&quot;&gt;rename&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;LSP-integrated file renaming with support for plugins like &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-mini/mini.files&quot;&gt;mini.files&lt;/a&gt;.&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scope.md&quot;&gt;scope&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scope detection, text objects and jumping based on treesitter or indent&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scratch.md&quot;&gt;scratch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scratch buffers with a persistent file&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scroll.md&quot;&gt;scroll&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Smooth scrolling&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/statuscolumn.md&quot;&gt;statuscolumn&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty status column&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/terminal.md&quot;&gt;terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create and toggle floating/split terminals&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/toggle.md&quot;&gt;toggle&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle keymaps integrated with which-key icons / colors&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/util.md&quot;&gt;util&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utility functions for Snacks &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/win.md&quot;&gt;win&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create and manage floating windows or splits&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/words.md&quot;&gt;words&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Auto-show LSP references and quickly navigate between them&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‼️&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/zen.md&quot;&gt;zen&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Zen mode • distraction-free coding&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- toc:end --&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4&lt;/li&gt; 
 &lt;li&gt;for proper icons support: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-mini/mini.icons&quot;&gt;mini.icons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager:&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important] A couple of plugins &lt;strong&gt;require&lt;/strong&gt; &lt;code&gt;snacks.nvim&lt;/code&gt; to be set-up early. Setup creates some autocmds and does not load any plugins. Check the &lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/lua/snacks/init.lua&quot;&gt;code&lt;/a&gt; to see what it does.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!caution] You need to explicitly pass options for a plugin or set &lt;code&gt;enabled = true&lt;/code&gt; to enable it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!tip] It&#39;s a good idea to run &lt;code&gt;:checkhealth snacks&lt;/code&gt; to see if everything is set up correctly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/snacks.nvim&quot;,
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
    bigfile = { enabled = true },
    dashboard = { enabled = true },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    picker = { enabled = true },
    notifier = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For an in-depth setup of &lt;code&gt;snacks.nvim&lt;/code&gt; with &lt;code&gt;lazy.nvim&lt;/code&gt;, check the &lt;a href=&quot;https://github.com/folke/snacks.nvim?tab=readme-ov-file#-usage&quot;&gt;example&lt;/a&gt; below.&lt;/p&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;Please refer to the readme of each plugin for their specific configuration.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class snacks.Config
---@field animate? snacks.animate.Config
---@field bigfile? snacks.bigfile.Config
---@field dashboard? snacks.dashboard.Config
---@field dim? snacks.dim.Config
---@field explorer? snacks.explorer.Config
---@field gitbrowse? snacks.gitbrowse.Config
---@field image? snacks.image.Config
---@field indent? snacks.indent.Config
---@field input? snacks.input.Config
---@field layout? snacks.layout.Config
---@field lazygit? snacks.lazygit.Config
---@field notifier? snacks.notifier.Config
---@field picker? snacks.picker.Config
---@field profiler? snacks.profiler.Config
---@field quickfile? snacks.quickfile.Config
---@field scope? snacks.scope.Config
---@field scratch? snacks.scratch.Config
---@field scroll? snacks.scroll.Config
---@field statuscolumn? snacks.statuscolumn.Config
---@field terminal? snacks.terminal.Config
---@field toggle? snacks.toggle.Config
---@field win? snacks.win.Config
---@field words? snacks.words.Config
---@field zen? snacks.zen.Config
---@field styles? table&amp;lt;string, snacks.win.Config&amp;gt;
---@field image? snacks.image.Config|{}
{
  image = {
    -- define these here, so that we don&#39;t need to load the image module
    formats = {
      &quot;png&quot;,
      &quot;jpg&quot;,
      &quot;jpeg&quot;,
      &quot;gif&quot;,
      &quot;bmp&quot;,
      &quot;webp&quot;,
      &quot;tiff&quot;,
      &quot;heic&quot;,
      &quot;avif&quot;,
      &quot;mp4&quot;,
      &quot;mov&quot;,
      &quot;avi&quot;,
      &quot;mkv&quot;,
      &quot;webm&quot;,
      &quot;pdf&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;p&gt;Some plugins have examples in their documentation. You can include them in your config like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  dashboard = { example = &quot;github&quot; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to customize options for a plugin after they have been resolved, you can use the &lt;code&gt;config&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  gitbrowse = {
    config = function(opts, defaults)
      table.insert(opts.remote_patterns, { &quot;my&quot;, &quot;custom pattern&quot; })
    end
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;p&gt;See the example below for how to configure &lt;code&gt;snacks.nvim&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- example:start --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/snacks.nvim&quot;,
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    bigfile = { enabled = true },
    dashboard = { enabled = true },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    notifier = {
      enabled = true,
      timeout = 3000,
    },
    picker = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
    styles = {
      notification = {
        -- wo = { wrap = true } -- Wrap notifications
      }
    }
  },
  keys = {
    -- Top Pickers &amp;amp; Explorer
    { &quot;&amp;lt;leader&amp;gt;&amp;lt;space&amp;gt;&quot;, function() Snacks.picker.smart() end, desc = &quot;Smart Find Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;,&quot;, function() Snacks.picker.buffers() end, desc = &quot;Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;/&quot;, function() Snacks.picker.grep() end, desc = &quot;Grep&quot; },
    { &quot;&amp;lt;leader&amp;gt;:&quot;, function() Snacks.picker.command_history() end, desc = &quot;Command History&quot; },
    { &quot;&amp;lt;leader&amp;gt;n&quot;, function() Snacks.picker.notifications() end, desc = &quot;Notification History&quot; },
    { &quot;&amp;lt;leader&amp;gt;e&quot;, function() Snacks.explorer() end, desc = &quot;File Explorer&quot; },
    -- find
    { &quot;&amp;lt;leader&amp;gt;fb&quot;, function() Snacks.picker.buffers() end, desc = &quot;Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;fc&quot;, function() Snacks.picker.files({ cwd = vim.fn.stdpath(&quot;config&quot;) }) end, desc = &quot;Find Config File&quot; },
    { &quot;&amp;lt;leader&amp;gt;ff&quot;, function() Snacks.picker.files() end, desc = &quot;Find Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;fg&quot;, function() Snacks.picker.git_files() end, desc = &quot;Find Git Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;fp&quot;, function() Snacks.picker.projects() end, desc = &quot;Projects&quot; },
    { &quot;&amp;lt;leader&amp;gt;fr&quot;, function() Snacks.picker.recent() end, desc = &quot;Recent&quot; },
    -- git
    { &quot;&amp;lt;leader&amp;gt;gb&quot;, function() Snacks.picker.git_branches() end, desc = &quot;Git Branches&quot; },
    { &quot;&amp;lt;leader&amp;gt;gl&quot;, function() Snacks.picker.git_log() end, desc = &quot;Git Log&quot; },
    { &quot;&amp;lt;leader&amp;gt;gL&quot;, function() Snacks.picker.git_log_line() end, desc = &quot;Git Log Line&quot; },
    { &quot;&amp;lt;leader&amp;gt;gs&quot;, function() Snacks.picker.git_status() end, desc = &quot;Git Status&quot; },
    { &quot;&amp;lt;leader&amp;gt;gS&quot;, function() Snacks.picker.git_stash() end, desc = &quot;Git Stash&quot; },
    { &quot;&amp;lt;leader&amp;gt;gd&quot;, function() Snacks.picker.git_diff() end, desc = &quot;Git Diff (Hunks)&quot; },
    { &quot;&amp;lt;leader&amp;gt;gf&quot;, function() Snacks.picker.git_log_file() end, desc = &quot;Git Log File&quot; },
    -- Grep
    { &quot;&amp;lt;leader&amp;gt;sb&quot;, function() Snacks.picker.lines() end, desc = &quot;Buffer Lines&quot; },
    { &quot;&amp;lt;leader&amp;gt;sB&quot;, function() Snacks.picker.grep_buffers() end, desc = &quot;Grep Open Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;sg&quot;, function() Snacks.picker.grep() end, desc = &quot;Grep&quot; },
    { &quot;&amp;lt;leader&amp;gt;sw&quot;, function() Snacks.picker.grep_word() end, desc = &quot;Visual selection or word&quot;, mode = { &quot;n&quot;, &quot;x&quot; } },
    -- search
    { &#39;&amp;lt;leader&amp;gt;s&quot;&#39;, function() Snacks.picker.registers() end, desc = &quot;Registers&quot; },
    { &#39;&amp;lt;leader&amp;gt;s/&#39;, function() Snacks.picker.search_history() end, desc = &quot;Search History&quot; },
    { &quot;&amp;lt;leader&amp;gt;sa&quot;, function() Snacks.picker.autocmds() end, desc = &quot;Autocmds&quot; },
    { &quot;&amp;lt;leader&amp;gt;sb&quot;, function() Snacks.picker.lines() end, desc = &quot;Buffer Lines&quot; },
    { &quot;&amp;lt;leader&amp;gt;sc&quot;, function() Snacks.picker.command_history() end, desc = &quot;Command History&quot; },
    { &quot;&amp;lt;leader&amp;gt;sC&quot;, function() Snacks.picker.commands() end, desc = &quot;Commands&quot; },
    { &quot;&amp;lt;leader&amp;gt;sd&quot;, function() Snacks.picker.diagnostics() end, desc = &quot;Diagnostics&quot; },
    { &quot;&amp;lt;leader&amp;gt;sD&quot;, function() Snacks.picker.diagnostics_buffer() end, desc = &quot;Buffer Diagnostics&quot; },
    { &quot;&amp;lt;leader&amp;gt;sh&quot;, function() Snacks.picker.help() end, desc = &quot;Help Pages&quot; },
    { &quot;&amp;lt;leader&amp;gt;sH&quot;, function() Snacks.picker.highlights() end, desc = &quot;Highlights&quot; },
    { &quot;&amp;lt;leader&amp;gt;si&quot;, function() Snacks.picker.icons() end, desc = &quot;Icons&quot; },
    { &quot;&amp;lt;leader&amp;gt;sj&quot;, function() Snacks.picker.jumps() end, desc = &quot;Jumps&quot; },
    { &quot;&amp;lt;leader&amp;gt;sk&quot;, function() Snacks.picker.keymaps() end, desc = &quot;Keymaps&quot; },
    { &quot;&amp;lt;leader&amp;gt;sl&quot;, function() Snacks.picker.loclist() end, desc = &quot;Location List&quot; },
    { &quot;&amp;lt;leader&amp;gt;sm&quot;, function() Snacks.picker.marks() end, desc = &quot;Marks&quot; },
    { &quot;&amp;lt;leader&amp;gt;sM&quot;, function() Snacks.picker.man() end, desc = &quot;Man Pages&quot; },
    { &quot;&amp;lt;leader&amp;gt;sp&quot;, function() Snacks.picker.lazy() end, desc = &quot;Search for Plugin Spec&quot; },
    { &quot;&amp;lt;leader&amp;gt;sq&quot;, function() Snacks.picker.qflist() end, desc = &quot;Quickfix List&quot; },
    { &quot;&amp;lt;leader&amp;gt;sR&quot;, function() Snacks.picker.resume() end, desc = &quot;Resume&quot; },
    { &quot;&amp;lt;leader&amp;gt;su&quot;, function() Snacks.picker.undo() end, desc = &quot;Undo History&quot; },
    { &quot;&amp;lt;leader&amp;gt;uC&quot;, function() Snacks.picker.colorschemes() end, desc = &quot;Colorschemes&quot; },
    -- LSP
    { &quot;gd&quot;, function() Snacks.picker.lsp_definitions() end, desc = &quot;Goto Definition&quot; },
    { &quot;gD&quot;, function() Snacks.picker.lsp_declarations() end, desc = &quot;Goto Declaration&quot; },
    { &quot;gr&quot;, function() Snacks.picker.lsp_references() end, nowait = true, desc = &quot;References&quot; },
    { &quot;gI&quot;, function() Snacks.picker.lsp_implementations() end, desc = &quot;Goto Implementation&quot; },
    { &quot;gy&quot;, function() Snacks.picker.lsp_type_definitions() end, desc = &quot;Goto T[y]pe Definition&quot; },
    { &quot;&amp;lt;leader&amp;gt;ss&quot;, function() Snacks.picker.lsp_symbols() end, desc = &quot;LSP Symbols&quot; },
    { &quot;&amp;lt;leader&amp;gt;sS&quot;, function() Snacks.picker.lsp_workspace_symbols() end, desc = &quot;LSP Workspace Symbols&quot; },
    -- Other
    { &quot;&amp;lt;leader&amp;gt;z&quot;,  function() Snacks.zen() end, desc = &quot;Toggle Zen Mode&quot; },
    { &quot;&amp;lt;leader&amp;gt;Z&quot;,  function() Snacks.zen.zoom() end, desc = &quot;Toggle Zoom&quot; },
    { &quot;&amp;lt;leader&amp;gt;.&quot;,  function() Snacks.scratch() end, desc = &quot;Toggle Scratch Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;S&quot;,  function() Snacks.scratch.select() end, desc = &quot;Select Scratch Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;n&quot;,  function() Snacks.notifier.show_history() end, desc = &quot;Notification History&quot; },
    { &quot;&amp;lt;leader&amp;gt;bd&quot;, function() Snacks.bufdelete() end, desc = &quot;Delete Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;cR&quot;, function() Snacks.rename.rename_file() end, desc = &quot;Rename File&quot; },
    { &quot;&amp;lt;leader&amp;gt;gB&quot;, function() Snacks.gitbrowse() end, desc = &quot;Git Browse&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
    { &quot;&amp;lt;leader&amp;gt;gg&quot;, function() Snacks.lazygit() end, desc = &quot;Lazygit&quot; },
    { &quot;&amp;lt;leader&amp;gt;un&quot;, function() Snacks.notifier.hide() end, desc = &quot;Dismiss All Notifications&quot; },
    { &quot;&amp;lt;c-/&amp;gt;&quot;,      function() Snacks.terminal() end, desc = &quot;Toggle Terminal&quot; },
    { &quot;&amp;lt;c-_&amp;gt;&quot;,      function() Snacks.terminal() end, desc = &quot;which_key_ignore&quot; },
    { &quot;]]&quot;,         function() Snacks.words.jump(vim.v.count1) end, desc = &quot;Next Reference&quot;, mode = { &quot;n&quot;, &quot;t&quot; } },
    { &quot;[[&quot;,         function() Snacks.words.jump(-vim.v.count1) end, desc = &quot;Prev Reference&quot;, mode = { &quot;n&quot;, &quot;t&quot; } },
    {
      &quot;&amp;lt;leader&amp;gt;N&quot;,
      desc = &quot;Neovim News&quot;,
      function()
        Snacks.win({
          file = vim.api.nvim_get_runtime_file(&quot;doc/news.txt&quot;, false)[1],
          width = 0.6,
          height = 0.6,
          wo = {
            spell = false,
            wrap = false,
            signcolumn = &quot;yes&quot;,
            statuscolumn = &quot; &quot;,
            conceallevel = 3,
          },
        })
      end,
    }
  },
  init = function()
    vim.api.nvim_create_autocmd(&quot;User&quot;, {
      pattern = &quot;VeryLazy&quot;,
      callback = function()
        -- Setup some globals for debugging (lazy-loaded)
        _G.dd = function(...)
          Snacks.debug.inspect(...)
        end
        _G.bt = function()
          Snacks.debug.backtrace()
        end

        -- Override print to use snacks for `:=` command
        if vim.fn.has(&quot;nvim-0.11&quot;) == 1 then
          vim._print = function(_, ...)
            dd(...)
          end
        else
          vim.print = _G.dd 
        end

        -- Create some toggle mappings
        Snacks.toggle.option(&quot;spell&quot;, { name = &quot;Spelling&quot; }):map(&quot;&amp;lt;leader&amp;gt;us&quot;)
        Snacks.toggle.option(&quot;wrap&quot;, { name = &quot;Wrap&quot; }):map(&quot;&amp;lt;leader&amp;gt;uw&quot;)
        Snacks.toggle.option(&quot;relativenumber&quot;, { name = &quot;Relative Number&quot; }):map(&quot;&amp;lt;leader&amp;gt;uL&quot;)
        Snacks.toggle.diagnostics():map(&quot;&amp;lt;leader&amp;gt;ud&quot;)
        Snacks.toggle.line_number():map(&quot;&amp;lt;leader&amp;gt;ul&quot;)
        Snacks.toggle.option(&quot;conceallevel&quot;, { off = 0, on = vim.o.conceallevel &amp;gt; 0 and vim.o.conceallevel or 2 }):map(&quot;&amp;lt;leader&amp;gt;uc&quot;)
        Snacks.toggle.treesitter():map(&quot;&amp;lt;leader&amp;gt;uT&quot;)
        Snacks.toggle.option(&quot;background&quot;, { off = &quot;light&quot;, on = &quot;dark&quot;, name = &quot;Dark Background&quot; }):map(&quot;&amp;lt;leader&amp;gt;ub&quot;)
        Snacks.toggle.inlay_hints():map(&quot;&amp;lt;leader&amp;gt;uh&quot;)
        Snacks.toggle.indent():map(&quot;&amp;lt;leader&amp;gt;ug&quot;)
        Snacks.toggle.dim():map(&quot;&amp;lt;leader&amp;gt;uD&quot;)
      end,
    })
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- example:end --&gt; 
&lt;h2&gt;🌈 Highlight Groups&lt;/h2&gt; 
&lt;p&gt;Snacks defines &lt;strong&gt;a lot&lt;/strong&gt; of highlight groups and it&#39;s impossible to document them all.&lt;/p&gt; 
&lt;p&gt;Instead, you can use the picker to see all the highlight groups.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;Snacks.picker.highlights({pattern = &quot;hl_group:^Snacks&quot;})
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>neovim/nvim-lspconfig</title>
      <link>https://github.com/neovim/nvim-lspconfig</link>
      <description>&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; 
&lt;p&gt;nvim-lspconfig is a collection of LSP server configurations for the &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;Nvim LSP client&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;View &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;all configs&lt;/a&gt;, or run &lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim.&lt;/p&gt; 
&lt;h2&gt;Important ⚠️&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;lspconfig&#39;)&lt;/code&gt; (the legacy &quot;framework&quot; of nvim-lspconfig) &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/issues/3693&quot;&gt;is &lt;strong&gt;deprecated&lt;/strong&gt;&lt;/a&gt; in favor of &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;vim.lsp.config&lt;/a&gt; (Nvim 0.11+). 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lua/lspconfig.lua&quot;&gt;lspconfig.lua&lt;/a&gt; &lt;em&gt;module&lt;/em&gt; will be dropped. Calls to &lt;code&gt;require(&#39;lspconfig&#39;)&lt;/code&gt; will show a warning, which will later become an error.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;nvim-lspconfig itself is &lt;strong&gt;NOT deprecated&lt;/strong&gt;. It provides server-specific configs. 
  &lt;ul&gt; 
   &lt;li&gt;The configs live in the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;lsp/&lt;/a&gt; directory. &lt;code&gt;vim.lsp.config&lt;/code&gt; automatically finds them and merges them with any local &lt;code&gt;lsp/*.lua&lt;/code&gt; configs defined by you or a plugin.&lt;/li&gt; 
   &lt;li&gt;The old configs in &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lua/lspconfig/&quot;&gt;lua/lspconfig/&lt;/a&gt; are &lt;strong&gt;deprecated&lt;/strong&gt; and will be removed.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Migration instructions&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Upgrade to Nvim 0.11+&lt;/li&gt; 
 &lt;li&gt;(Optional) Use &lt;code&gt;vim.lsp.config(&#39;…&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.….setup{}&lt;/code&gt;) to &lt;em&gt;customize&lt;/em&gt; or &lt;em&gt;define&lt;/em&gt; a config.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;vim.lsp.enable(&#39;…&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.….setup{}&lt;/code&gt;) to &lt;em&gt;enable&lt;/em&gt; a config, so that it activates for its &lt;code&gt;filetypes&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;These configs are &lt;strong&gt;best-effort and supported by the community (you).&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&quot;&gt;contributions&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, not the issue tracker.&lt;/li&gt; 
 &lt;li&gt;If you found a bug in Nvim LSP (&lt;code&gt;:help lsp&lt;/code&gt;), &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; report it here. Only configuration data lives here.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/neovim/nvim-lspconfig&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Nvim 0.11.3+. 
  &lt;ul&gt; 
   &lt;li&gt;Support for Nvim 0.10 &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/issues/3693&quot;&gt;will be removed&lt;/a&gt;. Upgrade Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install nvim-lspconfig using Vim&#39;s &quot;packages&quot; feature: &lt;pre&gt;&lt;code&gt;git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or with Nvim 0.12 (nightly), you can use the builtin &lt;code&gt;vim.pack&lt;/code&gt; plugin manager: &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add{
  { src = &#39;https://github.com/neovim/nvim-lspconfig&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or use a 3rd-party plugin manager.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install a language server, e.g. &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md#pyright&quot;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g pyright
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable its config in your init.lua (&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-quickstart&quot;&gt;:help lsp-quickstart&lt;/a&gt;). &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.enable(&#39;pyright&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Ensure your project/workspace contains a root marker as specified in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Open a code file in Nvim. LSP will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;code&gt;:help lspconfig-all&lt;/code&gt; for the full list of server-specific details. For servers not on your &lt;code&gt;$PATH&lt;/code&gt; (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually set the &lt;code&gt;cmd&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;jdtls&#39;, {
  cmd = { &#39;/path/to/jdtls&#39; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Nvim sets default options and mappings when LSP is active in a buffer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-defaults&quot;&gt;:help lsp-defaults&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#diagnostic-defaults&quot;&gt;:help diagnostic-defaults&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To customize, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-attach&quot;&gt;:help lsp-attach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-buf&quot;&gt;:help lsp-buf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Extra settings can be specified for each LSP server. With Nvim 0.11+ you can &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;extend a config&lt;/a&gt; by calling &lt;code&gt;vim.lsp.config(&#39;…&#39;, {…})&lt;/code&gt;. (You can also copy any config directly from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt; and put it in a local &lt;code&gt;lsp/&lt;/code&gt; directory in your &#39;runtimepath&#39;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;rust_analyzer&#39;, {
  -- Server-specific settings. See `:help lsp-quickstart`
  settings = {
    [&#39;rust-analyzer&#39;] = {},
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Create a new config&lt;/h2&gt; 
&lt;p&gt;To create a new config you can either (1) use &lt;code&gt;vim.lsp.config&lt;/code&gt; or (2) create a file &lt;code&gt;lsp/&amp;lt;config-name&amp;gt;.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;.&lt;/p&gt; 
&lt;h3&gt;Example: define a new config as code&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.config(&#39;foo&#39;, {cmd={&#39;true&#39;}})&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. 😎&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Example: define a new config as a file&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a file &lt;code&gt;lsp/foo.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;. &lt;pre&gt;&lt;code&gt;:exe &#39;edit&#39; stdpath(&#39;config&#39;) .. &#39;/lsp/foo.lua&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add this code to the file (or copy any of the examples from the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;lsp/ directory&lt;/a&gt; in this repo): &lt;pre&gt;&lt;code&gt;return {
  cmd = { &#39;true&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Save the file (with &lt;code&gt;++p&lt;/code&gt; to ensure its parent directory is created). &lt;pre&gt;&lt;code&gt;:write ++p
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable the config. &lt;pre&gt;&lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. 🌈&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Start with &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to troubleshoot. The most common reasons a language server does not start or attach are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in the config from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is a name instead of an absolute path, ensure it is on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Missing filetype plugins. Some languages are not detected by Nvim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set filetype?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Not triggering root detection. Some language servers require a &quot;workspace&quot;, which is found by looking for an ancestor directory that contains a &quot;root marker&quot;. The most common root marker is &lt;code&gt;.git/&lt;/code&gt;, but each config defines other &quot;root marker&quot; names. Root markers/directories are listed in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can also explicitly set a root instead of relying on automatic detection by enabling &lt;code&gt;&#39;exrc&#39;&lt;/code&gt; and adding an &lt;code&gt;.nvim.lua&lt;/code&gt; at the desired root dir with the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;&amp;lt;client name&amp;gt;&#39;, {
  root_dir = vim.fn.fnamemodify(debug.getinfo(1, &#39;S&#39;).source:sub(2), &#39;:p:h&#39;),
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that prior to nvim 0.12 &lt;code&gt;exrc&lt;/code&gt; file is executed only if it&#39;s inside of a cwd where you start &lt;code&gt;nvim&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bug reports&lt;/h2&gt; 
&lt;p&gt;If you found a bug with LSP functionality, &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;. Add this to your init.lua to enable verbose logging:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.set_log_level(&quot;debug&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attempt to run the language server, then run &lt;code&gt;:LspLog&lt;/code&gt; to open the log. Most of the time, the reason for failure is present in the logs.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; (alias to &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;) shows the status of active and configured language servers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStop [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Stops the given server. Defaults to stopping all servers active on the current buffer. To force stop add &lt;code&gt;++force&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspRestart [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Restarts the given client, and attempts to reattach to all previously attached buffers. Defaults to restarting all active servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;If a language server is missing from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;configs.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create a new file at &lt;code&gt;lsp/&amp;lt;server_name&amp;gt;.lua&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Copy an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tree/master/lsp&quot;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lsp/texlab.lua&quot;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; or in the &lt;a href=&quot;https://app.element.io/#/room/#neovim:matrix.org&quot;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Release process&lt;/h2&gt; 
&lt;p&gt;To publish a release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create and push a new &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tags&quot;&gt;tag&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;After pushing the tag, a &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/.github/workflows/release.yml&quot;&gt;GitHub action&lt;/a&gt; will automatically package the plugin and publish the release to LuaRocks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright Neovim contributors. All rights reserved.&lt;/p&gt; 
&lt;p&gt;nvim-lspconfig is licensed under the terms of the Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mason-org/mason.nvim</title>
      <link>https://github.com/mason-org/mason.nvim</link>
      <description>&lt;p&gt;Portable package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Linux-%23.svg?logo=linux&amp;amp;color=FCC624&amp;amp;logoColor=black&quot; alt=&quot;Linux&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/macOS-%23.svg?logo=apple&amp;amp;color=000000&amp;amp;logoColor=white&quot; alt=&quot;macOS&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Windows-%23.svg?logo=windows&amp;amp;color=0078D6&amp;amp;logoColor=white&quot; alt=&quot;Windows&quot; /&gt; &lt;a href=&quot;https://github.com/mason-org/mason.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/mason-org/mason.nvim/workflows/Tests/badge.svg?sanitize=true&quot; alt=&quot;GitHub CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/williamboman&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/williamboman&quot; alt=&quot;Sponsors&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/6705160/177613416-0c0354d2-f431-40d8-87f0-21310f0bba0e.png&quot; alt=&quot;mason.nvim&quot; /&gt; &lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; Portable package manager for Neovim that runs everywhere Neovim runs.&lt;br /&gt; Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;br /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;code&gt;:help mason.nvim&lt;/code&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;sup&gt;Latest version: v2.0.1&lt;/sup&gt; 
 &lt;!-- x-release-please-version --&gt; &lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#installation--usage&quot;&gt;Installation &amp;amp; Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#recommended-setup-for-lazynvim&quot;&gt;Recommended setup for &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#commands&quot;&gt;Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#registries&quot;&gt;Registries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#screenshots&quot;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L11&quot;&gt;&lt;code&gt;:h mason-introduction&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is a Neovim plugin that allows you to easily manage external editor tooling such as LSP servers, DAP servers, linters, and formatters through a single interface. It runs everywhere Neovim runs (across Linux, macOS, Windows, etc.), with only a small set of &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#requirements&quot;&gt;external requirements&lt;/a&gt; needed.&lt;/p&gt; 
&lt;p&gt;Packages are installed in Neovim&#39;s data directory (&lt;a href=&quot;https://neovim.io/doc/user/starting.html#standard-path&quot;&gt;&lt;code&gt;:h standard-path&lt;/code&gt;&lt;/a&gt;) by default. Executables are linked to a single &lt;code&gt;bin/&lt;/code&gt; directory, which &lt;code&gt;mason.nvim&lt;/code&gt; will add to Neovim&#39;s PATH during setup, allowing seamless access from Neovim builtins (LSP client, shell, terminal, etc.) as well as other 3rd party plugins.&lt;/p&gt; 
&lt;p&gt;For a list of all available packages, see &lt;a href=&quot;https://mason-registry.dev/registry/list&quot;&gt;https://mason-registry.dev/registry/list&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L42&quot;&gt;&lt;code&gt;:h mason-quickstart&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Install using your plugin manager of choice. &lt;strong&gt;Setup is required&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason&quot;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is optimized to load as little as possible during setup. Lazy-loading the plugin, or somehow deferring the setup, is not recommended.&lt;/p&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; 
&lt;h3&gt;Recommended setup for &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The following is the recommended setup when using &lt;code&gt;lazy.nvim&lt;/code&gt;. It will set up the plugin for you, meaning &lt;strong&gt;you don&#39;t have to call &lt;code&gt;require(&quot;mason&quot;).setup()&lt;/code&gt; yourself&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;mason-org/mason.nvim&quot;,
    opts = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L25&quot;&gt;&lt;code&gt;:h mason-requirements&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; relaxes the minimum requirements by attempting multiple different utilities (for example, &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, and &lt;code&gt;Invoke-WebRequest&lt;/code&gt; are all perfect substitutes). The &lt;em&gt;minimum&lt;/em&gt; recommended requirements are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.10.0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For Unix systems: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;git(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;curl(1)&lt;/code&gt; or &lt;code&gt;GNU wget(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;unzip(1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;GNU tar (&lt;code&gt;tar(1)&lt;/code&gt; or &lt;code&gt;gtar(1)&lt;/code&gt; depending on platform)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;gzip(1)&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;For Windows systems: 
  &lt;ul&gt; 
   &lt;li&gt;pwsh or powershell&lt;/li&gt; 
   &lt;li&gt;git&lt;/li&gt; 
   &lt;li&gt;GNU tar&lt;/li&gt; 
   &lt;li&gt;One of the following: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.7-zip.org/&quot;&gt;7zip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://peazip.github.io/&quot;&gt;peazip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/mholt/archiver&quot;&gt;archiver&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.winzip.com/&quot;&gt;winzip&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://www.win-rar.com/&quot;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that &lt;code&gt;mason.nvim&lt;/code&gt; will regularly shell out to external package managers, such as &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;. Depending on your personal usage, some of these will also need to be installed. Refer to &lt;code&gt;:checkhealth mason&lt;/code&gt; for a full list.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L140&quot;&gt;&lt;code&gt;:h mason-commands&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:Mason&lt;/code&gt; - opens a graphical status window&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUpdate&lt;/code&gt; - updates all managed registries&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonInstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - installs/re-installs the provided packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUninstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - uninstalls the provided packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonUninstallAll&lt;/code&gt; - uninstalls all packages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:MasonLog&lt;/code&gt; - opens the &lt;code&gt;mason.nvim&lt;/code&gt; log file in a new tab window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Registries&lt;/h2&gt; 
&lt;p&gt;Mason&#39;s core package registry is located at &lt;a href=&quot;https://github.com/mason-org/mason-registry&quot;&gt;mason-org/mason-registry&lt;/a&gt;. Before any packages can be used, the registry needs to be downloaded. This is done automatically for you when using the different Mason commands (e.g. &lt;code&gt;:MasonInstall&lt;/code&gt;), but can also be done manually by using the &lt;code&gt;:MasonUpdate&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;If you&#39;re utilizing Mason&#39;s Lua APIs to access packages, it&#39;s recommended to use the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L520&quot;&gt;&lt;code&gt;:h mason-registry.refresh()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L513&quot;&gt;&lt;code&gt;:h mason-registry.update()&lt;/code&gt;&lt;/a&gt; functions to ensure you have the latest package information before retrieving packages.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Main window&quot; src=&quot;https://github.com/user-attachments/assets/b9a57d21-f551-45ad-a1e5-a9fd66291510&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Language search&quot; src=&quot;https://github.com/user-attachments/assets/3d24fb7b-2c57-4948-923b-0a42bb627cbe&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Language filter&quot; src=&quot;https://github.com/user-attachments/assets/c0ca5818-3c74-4071-bc41-427a2cd1056d&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Package information&quot; src=&quot;https://github.com/user-attachments/assets/6f9f6819-ac97-483d-a77c-8f6c6131ac85&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;New package versions&quot; src=&quot;https://github.com/user-attachments/assets/ff1adc4d-2fcc-46df-ab4c-291c891efa50&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img alt=&quot;Help window&quot; src=&quot;https://github.com/user-attachments/assets/1fbe75e4-fe69-4417-83e3-82329e1c236e&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt#L200&quot;&gt;&lt;code&gt;:h mason-settings&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/#default-configuration&quot;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;mason&quot;).setup({
    ui = {
        icons = {
            package_installed = &quot;✓&quot;,
            package_pending = &quot;➜&quot;,
            package_uninstalled = &quot;✗&quot;
        }
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration using &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;mason-org/mason.nvim&quot;,
    opts = {
        ui = {
            icons = {
                package_installed = &quot;✓&quot;,
                package_pending = &quot;➜&quot;,
                package_uninstalled = &quot;✗&quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Default configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class MasonSettings
local DEFAULT_SETTINGS = {
    ---@since 1.0.0
    -- The directory in which to install packages.
    install_root_dir = path.concat { vim.fn.stdpath &quot;data&quot;, &quot;mason&quot; },

    ---@since 1.0.0
    -- Where Mason should put its bin location in your PATH. Can be one of:
    -- - &quot;prepend&quot; (default, Mason&#39;s bin location is put first in PATH)
    -- - &quot;append&quot; (Mason&#39;s bin location is put at the end of PATH)
    -- - &quot;skip&quot; (doesn&#39;t modify PATH)
    ---@type &#39;&quot;prepend&quot;&#39; | &#39;&quot;append&quot;&#39; | &#39;&quot;skip&quot;&#39;
    PATH = &quot;prepend&quot;,

    ---@since 1.0.0
    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when
    -- debugging issues with package installations.
    log_level = vim.log.levels.INFO,

    ---@since 1.0.0
    -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further
    -- packages that are requested to be installed will be put in a queue.
    max_concurrent_installers = 4,

    ---@since 1.0.0
    -- [Advanced setting]
    -- The registries to source packages from. Accepts multiple entries. Should a package with the same name exist in
    -- multiple registries, the registry listed first will be used.
    registries = {
        &quot;github:mason-org/mason-registry&quot;,
    },

    ---@since 1.0.0
    -- The provider implementations to use for resolving supplementary package metadata (e.g., all available versions).
    -- Accepts multiple entries, where later entries will be used as fallback should prior providers fail.
    -- Builtin providers are:
    --   - mason.providers.registry-api  - uses the https://api.mason-registry.dev API
    --   - mason.providers.client        - uses only client-side tooling to resolve metadata
    providers = {
        &quot;mason.providers.registry-api&quot;,
        &quot;mason.providers.client&quot;,
    },

    github = {
        ---@since 1.0.0
        -- The template URL to use when downloading assets from GitHub.
        -- The placeholders are the following (in order):
        -- 1. The repository (e.g. &quot;rust-lang/rust-analyzer&quot;)
        -- 2. The release version (e.g. &quot;v0.3.0&quot;)
        -- 3. The asset name (e.g. &quot;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&quot;)
        download_url_template = &quot;https://github.com/%s/releases/download/%s/%s&quot;,
    },

    pip = {
        ---@since 1.0.0
        -- Whether to upgrade pip to the latest version in the virtual environment before installing packages.
        upgrade_pip = false,

        ---@since 1.0.0
        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior
        -- and is not recommended.
        --
        -- Example: { &quot;--proxy&quot;, &quot;https://proxyserver&quot; }
        install_args = {},
    },

    ui = {
        ---@since 1.0.0
        -- Whether to automatically check for new versions when opening the :Mason window.
        check_outdated_packages_on_open = true,

        ---@since 1.0.0
        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.
        -- Defaults to `:h &#39;winborder&#39;` if nil.
        border = nil,

        ---@since 1.11.0
        -- The backdrop opacity. 0 is fully opaque, 100 is fully transparent.
        backdrop = 60,

        ---@since 1.0.0
        -- Width of the window. Accepts:
        -- - Integer greater than 1 for fixed width.
        -- - Float in the range of 0-1 for a percentage of screen width.
        width = 0.8,

        ---@since 1.0.0
        -- Height of the window. Accepts:
        -- - Integer greater than 1 for fixed height.
        -- - Float in the range of 0-1 for a percentage of screen height.
        height = 0.9,

        icons = {
            ---@since 1.0.0
            -- The list icon to use for installed packages.
            package_installed = &quot;◍&quot;,
            ---@since 1.0.0
            -- The list icon to use for packages that are installing, or queued for installation.
            package_pending = &quot;◍&quot;,
            ---@since 1.0.0
            -- The list icon to use for packages that are not installed.
            package_uninstalled = &quot;◍&quot;,
        },

        keymaps = {
            ---@since 1.0.0
            -- Keymap to expand a package
            toggle_package_expand = &quot;&amp;lt;CR&amp;gt;&quot;,
            ---@since 1.0.0
            -- Keymap to install the package under the current cursor position
            install_package = &quot;i&quot;,
            ---@since 1.0.0
            -- Keymap to reinstall/update the package under the current cursor position
            update_package = &quot;u&quot;,
            ---@since 1.0.0
            -- Keymap to check for new version for the package under the current cursor position
            check_package_version = &quot;c&quot;,
            ---@since 1.0.0
            -- Keymap to update all installed packages
            update_all_packages = &quot;U&quot;,
            ---@since 1.0.0
            -- Keymap to check which installed packages are outdated
            check_outdated_packages = &quot;C&quot;,
            ---@since 1.0.0
            -- Keymap to uninstall a package
            uninstall_package = &quot;X&quot;,
            ---@since 1.0.0
            -- Keymap to cancel a package installation
            cancel_installation = &quot;&amp;lt;C-c&amp;gt;&quot;,
            ---@since 1.0.0
            -- Keymap to apply language filter
            apply_language_filter = &quot;&amp;lt;C-f&amp;gt;&quot;,
            ---@since 1.1.0
            -- Keymap to toggle viewing package installation log
            toggle_package_install_log = &quot;&amp;lt;CR&amp;gt;&quot;,
            ---@since 1.8.0
            -- Keymap to toggle the help view
            toggle_help = &quot;g?&quot;,
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;sup&gt; 👋 didn&#39;t find what you were looking for? Try looking in the &lt;a href=&quot;https://raw.githubusercontent.com/mason-org/mason.nvim/main/doc/mason.txt&quot;&gt;help docs&lt;/a&gt; &lt;code&gt;:help mason.nvim&lt;/code&gt;! &lt;/sup&gt;</description>
    </item>
    
    <item>
      <title>folke/tokyonight.nvim</title>
      <link>https://github.com/folke/tokyonight.nvim</link>
      <description>&lt;p&gt;🏙 A clean, dark Neovim theme written in Lua, with support for lsp, treesitter and lots of plugins. Includes additional themes for Kitty, Alacritty, iTerm and Fish.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🏙 Tokyo Night&lt;/h1&gt; 
&lt;p&gt;A dark and light &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; theme written in &lt;a href=&quot;https://www.lua.org&quot;&gt;Lua&lt;/a&gt; ported from the &lt;a href=&quot;https://github.com/enkia/tokyo-night-vscode-theme&quot;&gt;Visual Studio Code TokyoNight&lt;/a&gt; theme. Includes &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extra&lt;/a&gt; themes for &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;, &lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;, &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;.&lt;/p&gt; 
&lt;table width=&quot;100%&quot;&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt;Moon&lt;/th&gt; 
   &lt;th&gt;Storm&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/190951628-10ba28a1-57ff-4479-8eab-47400a402242.png&quot; /&gt; &lt;/td&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115295095-3a9e5080-a10e-11eb-9aed-6054488c46ce.png&quot; /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Night&lt;/th&gt; 
   &lt;th&gt;Day&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115295327-7afdce80-a10e-11eb-89b3-2591262bf95a.png&quot; /&gt; &lt;/td&gt; 
   &lt;td width=&quot;50%&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/292349/115996270-78c6c480-a593-11eb-8ed0-7d1400b058f5.png&quot; /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports the latest &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/v0.9.0&quot;&gt;0.9.0&lt;/a&gt; features.&lt;/li&gt; 
 &lt;li&gt;Terminal colors.&lt;/li&gt; 
 &lt;li&gt;Supports all major plugins.&lt;/li&gt; 
 &lt;li&gt;Provides &lt;a href=&quot;https://github.com/folke/tokyonight.nvim&quot;&gt;TokyoNight&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extras&lt;/a&gt; for numerous other applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;🎨 Supported Plugins&lt;/summary&gt; 
 &lt;!-- plugins:start --&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Plugin&lt;/th&gt; 
    &lt;th&gt;Source&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;aerial.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/aerial.lua&quot;&gt;&lt;code&gt;aerial&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/dense-analysis/ale&quot;&gt;ale&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/ale.lua&quot;&gt;&lt;code&gt;ale&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;alpha-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/alpha.lua&quot;&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/romgrk/barbar.nvim&quot;&gt;barbar.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/barbar.lua&quot;&gt;&lt;code&gt;barbar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/blink.lua&quot;&gt;&lt;code&gt;blink&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;bufferline.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/bufferline.lua&quot;&gt;&lt;code&gt;bufferline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/cmp.lua&quot;&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Exafunction/codeium.nvim&quot;&gt;codeium.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/codeium.lua&quot;&gt;&lt;code&gt;codeium&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/zbirenbaum/copilot.lua&quot;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/copilot.lua&quot;&gt;&lt;code&gt;copilot&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/dap.lua&quot;&gt;&lt;code&gt;dap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvimdev/dashboard-nvim&quot;&gt;dashboard-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/dashboard.lua&quot;&gt;&lt;code&gt;dashboard&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;flash.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/flash.lua&quot;&gt;&lt;code&gt;flash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/fzf.lua&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/gitgutter.lua&quot;&gt;&lt;code&gt;gitgutter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;gitsigns.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/gitsigns.lua&quot;&gt;&lt;code&gt;gitsigns&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lambdalisue/glyph-palette.vim&quot;&gt;glyph-palette.vim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/glyph-palette.lua&quot;&gt;&lt;code&gt;glyph-palette&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim&quot;&gt;grug-far.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/grug-far.lua&quot;&gt;&lt;code&gt;grug-far&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lukas-reineke/headlines.nvim&quot;&gt;headlines.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/headlines.lua&quot;&gt;&lt;code&gt;headlines&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/hop.lua&quot;&gt;&lt;code&gt;hop&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/RRethy/vim-illuminate&quot;&gt;vim-illuminate&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/illuminate.lua&quot;&gt;&lt;code&gt;illuminate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;indent-blankline.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/indent-blankline.lua&quot;&gt;&lt;code&gt;indent-blankline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvimdev/indentmini.nvim&quot;&gt;indentmini.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/indentmini.lua&quot;&gt;&lt;code&gt;indentmini&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/lazy.lua&quot;&gt;&lt;code&gt;lazy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/leap.lua&quot;&gt;&lt;code&gt;leap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/lspsaga.lua&quot;&gt;&lt;code&gt;lspsaga&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.animate&quot;&gt;mini.animate&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_animate.lua&quot;&gt;&lt;code&gt;mini_animate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.clue&quot;&gt;mini.clue&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_clue.lua&quot;&gt;&lt;code&gt;mini_clue&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.completion&quot;&gt;mini.completion&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_completion.lua&quot;&gt;&lt;code&gt;mini_completion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.cursorword&quot;&gt;mini.cursorword&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_cursorword.lua&quot;&gt;&lt;code&gt;mini_cursorword&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.deps&quot;&gt;mini.deps&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_deps.lua&quot;&gt;&lt;code&gt;mini_deps&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.diff&quot;&gt;mini.diff&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_diff.lua&quot;&gt;&lt;code&gt;mini_diff&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.files&quot;&gt;mini.files&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_files.lua&quot;&gt;&lt;code&gt;mini_files&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.hipatterns&quot;&gt;mini.hipatterns&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_hipatterns.lua&quot;&gt;&lt;code&gt;mini_hipatterns&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_icons.lua&quot;&gt;&lt;code&gt;mini_icons&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.indentscope&quot;&gt;mini.indentscope&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_indentscope.lua&quot;&gt;&lt;code&gt;mini_indentscope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.jump&quot;&gt;mini.jump&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_jump.lua&quot;&gt;&lt;code&gt;mini_jump&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.map&quot;&gt;mini.map&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_map.lua&quot;&gt;&lt;code&gt;mini_map&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.notify&quot;&gt;mini.notify&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_notify.lua&quot;&gt;&lt;code&gt;mini_notify&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.operators&quot;&gt;mini.operators&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_operators.lua&quot;&gt;&lt;code&gt;mini_operators&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.pick&quot;&gt;mini.pick&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_pick.lua&quot;&gt;&lt;code&gt;mini_pick&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.starter&quot;&gt;mini.starter&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_starter.lua&quot;&gt;&lt;code&gt;mini_starter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.statusline&quot;&gt;mini.statusline&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_statusline.lua&quot;&gt;&lt;code&gt;mini_statusline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.surround&quot;&gt;mini.surround&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_surround.lua&quot;&gt;&lt;code&gt;mini_surround&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.tabline&quot;&gt;mini.tabline&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_tabline.lua&quot;&gt;&lt;code&gt;mini_tabline&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.test&quot;&gt;mini.test&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_test.lua&quot;&gt;&lt;code&gt;mini_test&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.trailspace&quot;&gt;mini.trailspace&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/mini_trailspace.lua&quot;&gt;&lt;code&gt;mini_trailspace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/SmiteshP/nvim-navic&quot;&gt;nvim-navic&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/navic.lua&quot;&gt;&lt;code&gt;navic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neo-tree.lua&quot;&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/TimUntersberger/neogit&quot;&gt;neogit&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neogit.lua&quot;&gt;&lt;code&gt;neogit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/neotest.lua&quot;&gt;&lt;code&gt;neotest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/noice.nvim&quot;&gt;noice.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/noice.lua&quot;&gt;&lt;code&gt;noice&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/notify.lua&quot;&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/kyazdani42/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/nvim-tree.lua&quot;&gt;&lt;code&gt;nvim-tree&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;octo.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/octo.lua&quot;&gt;&lt;code&gt;octo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/HiPhish/rainbow-delimiters.nvim&quot;&gt;rainbow-delimiters.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/rainbow.lua&quot;&gt;&lt;code&gt;rainbow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/render-markdown.lua&quot;&gt;&lt;code&gt;render-markdown&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/petertriho/nvim-scrollbar&quot;&gt;nvim-scrollbar&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/scrollbar.lua&quot;&gt;&lt;code&gt;scrollbar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/snacks.lua&quot;&gt;&lt;code&gt;snacks&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/sneak.lua&quot;&gt;&lt;code&gt;sneak&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/supermaven-inc/supermaven-nvim&quot;&gt;supermaven-nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/supermaven.lua&quot;&gt;&lt;code&gt;supermaven&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/telescope.lua&quot;&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/treesitter-context.lua&quot;&gt;&lt;code&gt;treesitter-context&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/trouble.lua&quot;&gt;&lt;code&gt;trouble&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/vimwiki.lua&quot;&gt;&lt;code&gt;vimwiki&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/which-key.lua&quot;&gt;&lt;code&gt;which-key&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/gbprod/yanky.nvim&quot;&gt;yanky.nvim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/lua/tokyonight/groups/yanky.lua&quot;&gt;&lt;code&gt;yanky&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;!-- plugins:end --&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🍭 Extras&lt;/summary&gt; 
 &lt;!-- extras:start --&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Tool&lt;/th&gt; 
    &lt;th&gt;Extra&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://git.sr.ht/~rjarry/aerc/&quot;&gt;Aerc&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/aerc&quot;&gt;extras/aerc&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/alacritty&quot;&gt;extras/alacritty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;Delta&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/delta&quot;&gt;extras/delta&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://betterdiscord.app/&quot;&gt;(Better-)Discord&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/discord&quot;&gt;extras/discord&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://dunst-project.org/&quot;&gt;Dunst&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/dunst&quot;&gt;extras/dunst&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fish&quot;&gt;extras/fish&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://fishshell.com/docs/current/interactive.html#syntax-highlighting&quot;&gt;Fish Themes&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fish_themes&quot;&gt;extras/fish_themes&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://codeberg.org/dnkl/foot&quot;&gt;Foot&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/foot&quot;&gt;extras/foot&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://codeberg.org/dnkl/fuzzel&quot;&gt;Fuzzel&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fuzzel&quot;&gt;extras/fuzzel&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;Fzf&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/fzf&quot;&gt;extras/fzf&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ghostty-org/ghostty&quot;&gt;Ghostty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/ghostty&quot;&gt;extras/ghostty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/extrawurst/gitui&quot;&gt;GitUI&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/gitui&quot;&gt;extras/gitui&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-terminal&quot;&gt;GNOME Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/gnome_terminal&quot;&gt;extras/gnome_terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://helix-editor.com/&quot;&gt;Helix&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/helix&quot;&gt;extras/helix&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/iterm&quot;&gt;extras/iterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/kitty&quot;&gt;extras/kitty&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot;&gt;Lazygit&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lazygit&quot;&gt;extras/lazygit&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.lua.org&quot;&gt;Lua Table for testing&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua&quot;&gt;extras/lua&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://prismjs.com&quot;&gt;Prism&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/prism&quot;&gt;extras/prism&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://f1bonacc1.github.io/process-compose/&quot;&gt;process-compose&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/process_compose&quot;&gt;extras/process_compose&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/slack&quot;&gt;extras/slack&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/aome510/spotify-player&quot;&gt;Spotify Player&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/spotify_player&quot;&gt;extras/spotify_player&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.sublimetext.com/docs/themes&quot;&gt;Sublime Text&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/sublime&quot;&gt;extras/sublime&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://gnome-terminator.readthedocs.io/en/latest/config.html&quot;&gt;Terminator&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/terminator&quot;&gt;extras/terminator&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://termux.dev/&quot;&gt;Termux&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/termux&quot;&gt;extras/termux&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/gnunn1/tilix&quot;&gt;Tilix&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/tilix&quot;&gt;extras/tilix&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;Tmux&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/tmux&quot;&gt;extras/tmux&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://vimhelp.org/&quot;&gt;Vim&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/vim&quot;&gt;extras/vim&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://vimium.github.io/&quot;&gt;Vimium&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/vimium&quot;&gt;extras/vimium&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://wezfurlong.org/wezterm/config/files.html&quot;&gt;WezTerm&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/wezterm&quot;&gt;extras/wezterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://aka.ms/terminal-documentation&quot;&gt;Windows Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/windows_terminal&quot;&gt;extras/windows_terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://docs.xfce.org/apps/terminal/advanced&quot;&gt;Xfce Terminal&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/xfceterm&quot;&gt;extras/xfceterm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://wiki.archlinux.org/title/X_resources&quot;&gt;Xresources&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/xresources&quot;&gt;extras/xresources&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/sxyazi/yazi&quot;&gt;Yazi&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/yazi&quot;&gt;extras/yazi&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://pwmt.org/projects/zathura/&quot;&gt;Zathura&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/zathura&quot;&gt;extras/zathura&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href=&quot;https://zellij.dev/&quot;&gt;Zellij&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/zellij&quot;&gt;extras/zellij&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;!-- extras:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; &amp;gt;= &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/v0.8.0&quot;&gt;0.8.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Install the theme with your preferred package manager, such as &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;folke/lazy.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/tokyonight.nvim&quot;,
  lazy = false,
  priority = 1000,
  opts = {},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd[[colorscheme tokyonight]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;colorscheme tokyonight

&quot; There are also colorschemes for the different styles.
colorscheme tokyonight-night
colorscheme tokyonight-storm
colorscheme tokyonight-day
colorscheme tokyonight-moon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some plugins need extra configuration to work with &lt;strong&gt;TokyoNight&lt;/strong&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click here for more details&lt;/summary&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/utilyre/barbecue.nvim&quot;&gt;Barbecue&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
require(&#39;barbecue&#39;).setup {
  -- ... your barbecue config
  theme = &#39;tokyonight&#39;,
  -- ... your barbecue config
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;Lualine&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Lua
require(&#39;lualine&#39;).setup {
  options = {
    -- ... your lualine config
    theme = &#39;tokyonight&#39;
    -- ... your lualine config
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;Lightline&lt;/a&gt;&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; Vim Script
let g:lightline = {&#39;colorscheme&#39;: &#39;tokyonight&#39;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Set the configuration &lt;strong&gt;BEFORE&lt;/strong&gt; loading the color scheme with &lt;code&gt;colorscheme tokyonight&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The theme offers four styles: &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#storm&quot;&gt;storm&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#moon&quot;&gt;moon&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#night&quot;&gt;night&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#day&quot;&gt;day&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#day&quot;&gt;day&lt;/a&gt; style is used when &lt;code&gt;{ style = &quot;day&quot; }&lt;/code&gt; is passed to &lt;code&gt;setup(options)&lt;/code&gt; or when &lt;code&gt;vim.o.background = &quot;light&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/tokyonight.nvim&quot;&gt;TokyoNight&lt;/a&gt; uses the default options, unless &lt;code&gt;setup&lt;/code&gt; is explicitly called.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class tokyonight.Config
---@field on_colors fun(colors: ColorScheme)
---@field on_highlights fun(highlights: tokyonight.Highlights, colors: ColorScheme)
M.defaults = {
  style = &quot;moon&quot;, -- The theme comes in three styles, `storm`, a darker variant `night` and `day`
  light_style = &quot;day&quot;, -- The theme is used when the background is set to light
  transparent = false, -- Enable this to disable setting the background color
  terminal_colors = true, -- Configure the colors used when opening a `:terminal` in Neovim
  styles = {
    -- Style to be applied to different syntax groups
    -- Value is any valid attr-list value for `:help nvim_set_hl`
    comments = { italic = true },
    keywords = { italic = true },
    functions = {},
    variables = {},
    -- Background styles. Can be &quot;dark&quot;, &quot;transparent&quot; or &quot;normal&quot;
    sidebars = &quot;dark&quot;, -- style for sidebars, see below
    floats = &quot;dark&quot;, -- style for floating windows
  },
  day_brightness = 0.3, -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors
  dim_inactive = false, -- dims inactive windows
  lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold

  --- You can override specific color groups to use other groups or a hex color
  --- function will be called with a ColorScheme table
  ---@param colors ColorScheme
  on_colors = function(colors) end,

  --- You can override specific highlights to use other groups or a hex color
  --- function will be called with a Highlights and ColorScheme table
  ---@param highlights tokyonight.Highlights
  ---@param colors ColorScheme
  on_highlights = function(highlights, colors) end,

  cache = true, -- When set to true, the theme will be cached for better performance

  ---@type table&amp;lt;string, boolean|{enabled:boolean}&amp;gt;
  plugins = {
    -- enable all plugins when not using lazy.nvim
    -- set to false to manually enable/disable plugins
    all = package.loaded.lazy == nil,
    -- uses your plugin manager to automatically enable needed plugins
    -- currently only lazy.nvim is supported
    auto = true,
    -- add any plugins here that you want to enable
    -- for all possible plugins, see:
    --   * https://github.com/folke/tokyonight.nvim/tree/main/lua/tokyonight/groups
    -- telescope = true,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;🪓 Overriding Colors &amp;amp; Highlight Groups&lt;/h2&gt; 
&lt;p&gt;How the highlight groups are calculated:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;colors&lt;/code&gt; are determined based on your configuration, with the ability to override them using &lt;code&gt;config.on_colors(colors)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;These &lt;code&gt;colors&lt;/code&gt; are utilized to generate the highlight groups.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config.on_highlights(highlights, colors)&lt;/code&gt; can be used to override highlight groups.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For default values of &lt;code&gt;colors&lt;/code&gt; and &lt;code&gt;highlights&lt;/code&gt;, please consult the &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_storm.lua&quot;&gt;storm&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_moon.lua&quot;&gt;moon&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_night.lua&quot;&gt;night&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/lua/tokyonight_day.lua&quot;&gt;day&lt;/a&gt; themes.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Settings &amp;amp; Changing Colors&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;tokyonight&quot;).setup({
  -- use the night style
  style = &quot;night&quot;,
  -- disable italic for functions
  styles = {
    functions = {}
  },
  -- Change the &quot;hint&quot; color to the &quot;orange&quot; color, and make the &quot;error&quot; color bright red
  on_colors = function(colors)
    colors.hint = colors.orange
    colors.error = &quot;#ff0000&quot;
  end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Borderless Telescope&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;tokyonight&quot;).setup({
  on_highlights = function(hl, c)
    local prompt = &quot;#2d3149&quot;
    hl.TelescopeNormal = {
      bg = c.bg_dark,
      fg = c.fg_dark,
    }
    hl.TelescopeBorder = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
    hl.TelescopePromptNormal = {
      bg = prompt,
    }
    hl.TelescopePromptBorder = {
      bg = prompt,
      fg = prompt,
    }
    hl.TelescopePromptTitle = {
      bg = prompt,
      fg = prompt,
    }
    hl.TelescopePreviewTitle = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
    hl.TelescopeResultsTitle = {
      bg = c.bg_dark,
      fg = c.bg_dark,
    }
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Fix &lt;code&gt;undercurls&lt;/code&gt; in Tmux&lt;/summary&gt; 
 &lt;p&gt;To have undercurls show up and in color, add the following to your &lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;Tmux&lt;/a&gt; configuration file:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Undercurl
set -g default-terminal &quot;${TERM}&quot;
set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support
set -as terminal-overrides &#39;,*:Setulc=\E[58::2::::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;🍭 Extras&lt;/h2&gt; 
&lt;p&gt;Extra color configs for &lt;a href=&quot;https://sw.kovidgoyal.net/kitty/conf.html&quot;&gt;Kitty&lt;/a&gt;, &lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Alacritty&lt;/a&gt;, &lt;a href=&quot;https://fishshell.com/docs/current/index.html&quot;&gt;Fish&lt;/a&gt;, &lt;a href=&quot;https://wezfurlong.org/wezterm/config/files.html&quot;&gt;WezTerm&lt;/a&gt;, &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm&lt;/a&gt; and &lt;a href=&quot;https://codeberg.org/dnkl/foot&quot;&gt;foot&lt;/a&gt; can be found in &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/extras/&quot;&gt;extras&lt;/a&gt;. To use them, refer to their respective documentation.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/115395546-d8d6f880-a198-11eb-98fb-a1194787701d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can easily use the color palette for other plugins inside your &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;Neovim&lt;/a&gt; configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local colors = require(&quot;tokyonight.colors&quot;).setup() -- pass in any of the config options as explained above
local util = require(&quot;tokyonight.util&quot;)

aplugin.background = colors.bg_dark
aplugin.my_error = util.lighten(colors.red1, 0.3) -- number between 0 and 1. 0 results in white, 1 results in red1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🔥 Contributing&lt;/h2&gt; 
&lt;p&gt;Pull requests are welcome.&lt;/p&gt; 
&lt;p&gt;For the &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extras&lt;/a&gt;, we use a simple template system that can be used to generate themes for the different styles.&lt;/p&gt; 
&lt;p&gt;How to add a new extra template:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a file like &lt;code&gt;lua/tokyonight/extra/cool-app.lua&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the name and output file extension to the &lt;code&gt;extras&lt;/code&gt; table in &lt;code&gt;lua/tokyonight/extra/init.lua&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the following command to generate new &lt;a href=&quot;https://raw.githubusercontent.com/folke/tokyonight.nvim/main/#-extras&quot;&gt;extra&lt;/a&gt; themes from the tokyonight plugin directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;./scripts/build
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Check the newly created themes in the &lt;code&gt;extra/&lt;/code&gt; directory. Please &lt;strong&gt;DO NOT&lt;/strong&gt; commit them, as they are already automatically built by the CI.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>folke/which-key.nvim</title>
      <link>https://github.com/folke/which-key.nvim</link>
      <description>&lt;p&gt;💥 Create key bindings that stick. WhichKey helps you remember your Neovim keymaps, by showing available keybindings in a popup as you type.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💥 Which Key&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; helps you remember your Neovim keymaps, by showing available keybindings in a popup as you type.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/89277334-dcdc-4b0f-9fd4-02f27012f589&quot; alt=&quot;image&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/f8d71a75-312e-4a42-add8-d153493b2633&quot; alt=&quot;image&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/e4400a1d-7e71-4439-b6ff-6cbc40647a6f&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔍 &lt;strong&gt;Key Binding Help&lt;/strong&gt;: show available keybindings in a popup as you type.&lt;/li&gt; 
 &lt;li&gt;⌨️ &lt;strong&gt;Modes&lt;/strong&gt;: works in normal, insert, visual, operator pending, terminal and command mode. Every mode can be enabled/disabled.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Customizable Layouts&lt;/strong&gt;: choose from &lt;code&gt;classic&lt;/code&gt;, &lt;code&gt;modern&lt;/code&gt;, and &lt;code&gt;helix&lt;/code&gt; presets or customize the window.&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Flexible Sorting&lt;/strong&gt;: sort by &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;alphanum&lt;/code&gt;, &lt;code&gt;mod&lt;/code&gt;, &lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;icase&lt;/code&gt;, &lt;code&gt;desc&lt;/code&gt;, or &lt;code&gt;manual&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🎨 &lt;strong&gt;Formatting&lt;/strong&gt;: customizable key labels and descriptions&lt;/li&gt; 
 &lt;li&gt;🖼️ &lt;strong&gt;Icons&lt;/strong&gt;: integrates with &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⏱️ &lt;strong&gt;Delay&lt;/strong&gt;: delay is independent of &lt;code&gt;timeoutlen&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;🌐 &lt;strong&gt;Plugins&lt;/strong&gt;: built-in plugins for marks, registers, presets, and spelling suggestions&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Operators, Motions, Text Objects&lt;/strong&gt;: help for operators, motions and text objects&lt;/li&gt; 
 &lt;li&gt;🐙 &lt;strong&gt;Hydra Mode&lt;/strong&gt;: keep the popup open until you hit &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4&lt;/li&gt; 
 &lt;li&gt;for proper icons support: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager:&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/which-key.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  },
  keys = {
    {
      &quot;&amp;lt;leader&amp;gt;?&quot;,
      function()
        require(&quot;which-key&quot;).show({ global = false })
      end,
      desc = &quot;Buffer Local Keymaps (which-key)&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important] Make sure to run &lt;code&gt;:checkhealth which-key&lt;/code&gt; if something isn&#39;t working properly&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; is highly configurable. Expand to see the list of all the default options below.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class wk.Opts
local defaults = {
  ---@type false | &quot;classic&quot; | &quot;modern&quot; | &quot;helix&quot;
  preset = &quot;classic&quot;,
  -- Delay before showing the popup. Can be a number or a function that returns a number.
  ---@type number | fun(ctx: { keys: string, mode: string, plugin?: string }):number
  delay = function(ctx)
    return ctx.plugin and 0 or 200
  end,
  ---@param mapping wk.Mapping
  filter = function(mapping)
    -- example to exclude mappings without a description
    -- return mapping.desc and mapping.desc ~= &quot;&quot;
    return true
  end,
  --- You can add any mappings here, or use `require(&#39;which-key&#39;).add()` later
  ---@type wk.Spec
  spec = {},
  -- show a warning when issues were detected with your mappings
  notify = true,
  -- Which-key automatically sets up triggers for your mappings.
  -- But you can disable this and setup the triggers manually.
  -- Check the docs for more info.
  ---@type wk.Spec
  triggers = {
    { &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nxso&quot; },
  },
  -- Start hidden and wait for a key to be pressed before showing the popup
  -- Only used by enabled xo mapping modes.
  ---@param ctx { mode: string, operator: string }
  defer = function(ctx)
    return ctx.mode == &quot;V&quot; or ctx.mode == &quot;&amp;lt;C-V&amp;gt;&quot;
  end,
  plugins = {
    marks = true, -- shows a list of your marks on &#39; and `
    registers = true, -- shows your registers on &quot; in NORMAL or &amp;lt;C-r&amp;gt; in INSERT mode
    -- the presets plugin, adds help for a bunch of default keybindings in Neovim
    -- No actual key bindings are created
    spelling = {
      enabled = true, -- enabling this will show WhichKey when pressing z= to select spelling suggestions
      suggestions = 20, -- how many suggestions should be shown in the list?
    },
    presets = {
      operators = true, -- adds help for operators like d, y, ...
      motions = true, -- adds help for motions
      text_objects = true, -- help for text objects triggered after entering an operator
      windows = true, -- default bindings on &amp;lt;c-w&amp;gt;
      nav = true, -- misc bindings to work with windows
      z = true, -- bindings for folds, spelling and others prefixed with z
      g = true, -- bindings for prefixed with g
    },
  },
  ---@type wk.Win.opts
  win = {
    -- don&#39;t allow the popup to overlap with the cursor
    no_overlap = true,
    -- width = 1,
    -- height = { min = 4, max = 25 },
    -- col = 0,
    -- row = math.huge,
    -- border = &quot;none&quot;,
    padding = { 1, 2 }, -- extra window padding [top/bottom, right/left]
    title = true,
    title_pos = &quot;center&quot;,
    zindex = 1000,
    -- Additional vim.wo and vim.bo options
    bo = {},
    wo = {
      -- winblend = 10, -- value between 0-100 0 for fully opaque and 100 for fully transparent
    },
  },
  layout = {
    width = { min = 20 }, -- min and max width of the columns
    spacing = 3, -- spacing between columns
  },
  keys = {
    scroll_down = &quot;&amp;lt;c-d&amp;gt;&quot;, -- binding to scroll down inside the popup
    scroll_up = &quot;&amp;lt;c-u&amp;gt;&quot;, -- binding to scroll up inside the popup
  },
  ---@type (string|wk.Sorter)[]
  --- Mappings are sorted using configured sorters and natural sort of the keys
  --- Available sorters:
  --- * local: buffer-local mappings first
  --- * order: order of the items (Used by plugins like marks / registers)
  --- * group: groups last
  --- * alphanum: alpha-numerical first
  --- * mod: special modifier keys last
  --- * manual: the order the mappings were added
  --- * case: lower-case first
  sort = { &quot;local&quot;, &quot;order&quot;, &quot;group&quot;, &quot;alphanum&quot;, &quot;mod&quot; },
  ---@type number|fun(node: wk.Node):boolean?
  expand = 0, -- expand groups when &amp;lt;= n mappings
  -- expand = function(node)
  --   return not node.desc -- expand all nodes without a description
  -- end,
  -- Functions/Lua Patterns for formatting the labels
  ---@type table&amp;lt;string, ({[1]:string, [2]:string}|fun(str:string):string)[]&amp;gt;
  replace = {
    key = {
      function(key)
        return require(&quot;which-key.view&quot;).format(key)
      end,
      -- { &quot;&amp;lt;Space&amp;gt;&quot;, &quot;SPC&quot; },
    },
    desc = {
      { &quot;&amp;lt;Plug&amp;gt;%(?(.*)%)?&quot;, &quot;%1&quot; },
      { &quot;^%+&quot;, &quot;&quot; },
      { &quot;&amp;lt;[cC]md&amp;gt;&quot;, &quot;&quot; },
      { &quot;&amp;lt;[cC][rR]&amp;gt;&quot;, &quot;&quot; },
      { &quot;&amp;lt;[sS]ilent&amp;gt;&quot;, &quot;&quot; },
      { &quot;^lua%s+&quot;, &quot;&quot; },
      { &quot;^call%s+&quot;, &quot;&quot; },
      { &quot;^:%s*&quot;, &quot;&quot; },
    },
  },
  icons = {
    breadcrumb = &quot;»&quot;, -- symbol used in the command line area that shows your active key combo
    separator = &quot;➜&quot;, -- symbol used between a key and it&#39;s label
    group = &quot;+&quot;, -- symbol prepended to a group
    ellipsis = &quot;…&quot;,
    -- set to false to disable all mapping icons,
    -- both those explicitly added in a mapping
    -- and those from rules
    mappings = true,
    --- See `lua/which-key/icons.lua` for more details
    --- Set to `false` to disable keymap icons from rules
    ---@type wk.IconRule[]|false
    rules = {},
    -- use the highlights from mini.icons
    -- When `false`, it will use `WhichKeyIcon` instead
    colors = true,
    -- used by key format
    keys = {
      Up = &quot; &quot;,
      Down = &quot; &quot;,
      Left = &quot; &quot;,
      Right = &quot; &quot;,
      C = &quot;󰘴 &quot;,
      M = &quot;󰘵 &quot;,
      D = &quot;󰘳 &quot;,
      S = &quot;󰘶 &quot;,
      CR = &quot;󰌑 &quot;,
      Esc = &quot;󱊷 &quot;,
      ScrollWheelDown = &quot;󱕐 &quot;,
      ScrollWheelUp = &quot;󱕑 &quot;,
      NL = &quot;󰌑 &quot;,
      BS = &quot;󰁮&quot;,
      Space = &quot;󱁐 &quot;,
      Tab = &quot;󰌒 &quot;,
      F1 = &quot;󱊫&quot;,
      F2 = &quot;󱊬&quot;,
      F3 = &quot;󱊭&quot;,
      F4 = &quot;󱊮&quot;,
      F5 = &quot;󱊯&quot;,
      F6 = &quot;󱊰&quot;,
      F7 = &quot;󱊱&quot;,
      F8 = &quot;󱊲&quot;,
      F9 = &quot;󱊳&quot;,
      F10 = &quot;󱊴&quot;,
      F11 = &quot;󱊵&quot;,
      F12 = &quot;󱊶&quot;,
    },
  },
  show_help = true, -- show a help message in the command line for using WhichKey
  show_keys = true, -- show the currently pressed key and its label as a message in the command line
  -- disable WhichKey for certain buf types and file types.
  disable = {
    ft = {},
    bt = {},
  },
  debug = false, -- enable wk.log in the current directory
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;⌨️ Mappings&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; automatically gets the descriptions of your keymaps from the &lt;code&gt;desc&lt;/code&gt; attribute of the keymap. So for most use-cases, you don&#39;t need to do anything else.&lt;/p&gt; 
&lt;p&gt;However, the &lt;strong&gt;mapping spec&lt;/strong&gt; is still useful to configure group descriptions and mappings that don&#39;t really exist as a regular keymap.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The &lt;strong&gt;mappings spec&lt;/strong&gt; changed in &lt;code&gt;v3&lt;/code&gt;, so make sure to only use the new &lt;code&gt;add&lt;/code&gt; method if you updated your existing mappings.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Mappings can be added as part of the config &lt;code&gt;opts.spec&lt;/code&gt;, or can be added later using &lt;code&gt;require(&quot;which-key&quot;).add()&lt;/code&gt;. &lt;code&gt;wk.add()&lt;/code&gt; can be called multiple times from anywhere in your config files.&lt;/p&gt; 
&lt;p&gt;A mapping has the following attributes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[1]&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) lhs &lt;strong&gt;&lt;em&gt;(required)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2]&lt;/strong&gt;: (&lt;code&gt;string|fun()&lt;/code&gt;) rhs &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;: when present, it will create the mapping&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;desc&lt;/strong&gt;: (&lt;code&gt;string|fun():string&lt;/code&gt;) description &lt;strong&gt;&lt;em&gt;(required for non-groups)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;group&lt;/strong&gt;: (&lt;code&gt;string|fun():string&lt;/code&gt;) group name &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: (&lt;code&gt;string|string[]&lt;/code&gt;) mode &lt;strong&gt;&lt;em&gt;(optional, defaults to &lt;code&gt;&quot;n&quot;&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;cond&lt;/strong&gt;: (&lt;code&gt;boolean|fun():boolean&lt;/code&gt;) condition to enable the mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;hidden&lt;/strong&gt;: (&lt;code&gt;boolean&lt;/code&gt;) hide the mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;icon&lt;/strong&gt;: (&lt;code&gt;string|wk.Icon|fun():(wk.Icon|string)&lt;/code&gt;) icon spec &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;proxy&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) proxy to another mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;expand&lt;/strong&gt;: (&lt;code&gt;fun():wk.Spec&lt;/code&gt;) nested mappings &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;any other option valid for &lt;code&gt;vim.keymap.set&lt;/code&gt;. These are only used for creating mappings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When &lt;code&gt;desc&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;icon&lt;/code&gt; are functions, they are evaluated every time the popup is shown.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;expand&lt;/code&gt; property allows to create dynamic mappings. Only functions as &lt;code&gt;rhs&lt;/code&gt; are supported for dynamic mappings. Two examples are included in &lt;code&gt;which-key.extras&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;require(&quot;which-key.extras&quot;).expand.buf&lt;/code&gt;: creates numerical key to buffer mappings&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&quot;which-key.extras&quot;).expand.win&lt;/code&gt;: creates numerical key to window mappings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local wk = require(&quot;which-key&quot;)
wk.add({
  { &quot;&amp;lt;leader&amp;gt;f&quot;, group = &quot;file&quot; }, -- group
  { &quot;&amp;lt;leader&amp;gt;ff&quot;, &quot;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&quot;, desc = &quot;Find File&quot;, mode = &quot;n&quot; },
  { &quot;&amp;lt;leader&amp;gt;fb&quot;, function() print(&quot;hello&quot;) end, desc = &quot;Foobar&quot; },
  { &quot;&amp;lt;leader&amp;gt;fn&quot;, desc = &quot;New File&quot; },
  { &quot;&amp;lt;leader&amp;gt;f1&quot;, hidden = true }, -- hide this keymap
  { &quot;&amp;lt;leader&amp;gt;w&quot;, proxy = &quot;&amp;lt;c-w&amp;gt;&quot;, group = &quot;windows&quot; }, -- proxy to window mappings
  { &quot;&amp;lt;leader&amp;gt;b&quot;, group = &quot;buffers&quot;, expand = function()
      return require(&quot;which-key.extras&quot;).expand.buf()
    end
  },
  {
    -- Nested mappings are allowed and can be added in any order
    -- Most attributes can be inherited or overridden on any level
    -- There&#39;s no limit to the depth of nesting
    mode = { &quot;n&quot;, &quot;v&quot; }, -- NORMAL and VISUAL mode
    { &quot;&amp;lt;leader&amp;gt;q&quot;, &quot;&amp;lt;cmd&amp;gt;q&amp;lt;cr&amp;gt;&quot;, desc = &quot;Quit&quot; }, -- no need to specify mode since it&#39;s inherited
    { &quot;&amp;lt;leader&amp;gt;w&quot;, &quot;&amp;lt;cmd&amp;gt;w&amp;lt;cr&amp;gt;&quot;, desc = &quot;Write&quot; },
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🎯 Triggers&lt;/h2&gt; 
&lt;p&gt;There&#39;s two ways that &lt;strong&gt;which-key&lt;/strong&gt; can be triggered:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;by a trigger keymap&lt;/li&gt; 
 &lt;li&gt;by a &lt;code&gt;ModeChanged&lt;/code&gt; event for visual and operator pending mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Both can be configured using &lt;code&gt;opts.triggers&lt;/code&gt; and &lt;code&gt;opts.defer&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;By default &lt;code&gt;opts.triggers&lt;/code&gt; includes &lt;code&gt;{ &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nixsotc&quot; }&lt;/code&gt;, which will setup keymap triggers for every mode automatically and will trigger during &lt;code&gt;ModeChanged&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Auto triggers will never be created for existing keymaps. That includes every valid single key Neovim builtin mapping. If you want to trigger on a builtin keymap, you have to add it manually.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt; triggers = {
   { &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nixsotc&quot; },
   { &quot;a&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] To manually setup triggers, you can set &lt;code&gt;opts.triggers&lt;/code&gt; to:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt; triggers = {
   { &quot;&amp;lt;leader&amp;gt;&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For &lt;code&gt;ModeChanged&lt;/code&gt; triggers, you can configure the &lt;code&gt;opts.defer&lt;/code&gt; option. When it returns &lt;code&gt;true&lt;/code&gt;, the popup will be shown only after an additional key is pressed. So &lt;code&gt;yaf&lt;/code&gt;, would show which-key after pressing &lt;code&gt;ya&lt;/code&gt;, but not after &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Defer some operators:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@param ctx { mode: string, operator: string }
defer = function(ctx)
  if vim.list_contains({ &quot;d&quot;, &quot;y&quot; }, ctx.operator) then
    return true
  end
  return vim.list_contains({ &quot;&amp;lt;C-V&amp;gt;&quot;, &quot;V&quot; }, ctx.mode)
end,
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🎨 Icons&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!note] For full support, you need to install either &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; or &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There&#39;s multiple ways to set icons for your keymaps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;if you use lazy.nvim, then some icons will be autodetected for keymaps belonging to certain plugins.&lt;/li&gt; 
 &lt;li&gt;custom rules to decide what icon to use&lt;/li&gt; 
 &lt;li&gt;in your mapping spec, you can specify what icon to use at any level, so at the node for &lt;code&gt;&amp;lt;leader&amp;gt;g&lt;/code&gt; for example, to apply to all git keymaps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;icon&lt;/code&gt; attribute of a mapping can be a &lt;code&gt;string&lt;/code&gt;, which will be used as the actual icon, or an &lt;code&gt;wk.Icon&lt;/code&gt; object, which can have the following attributes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;icon&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the icon to use &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hl&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the highlight group to use for the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;color&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the color to use for the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt; valid colors are: &lt;code&gt;azure&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt;, &lt;code&gt;purple&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the category of the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt; valid categories are: &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;filetype&lt;/code&gt;, &lt;code&gt;extension&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the name of the icon in the specified category &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If you&#39;d rather not use icons, you can disable them by setting &lt;code&gt;opts.icons.mappings&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;p&gt;When the &lt;strong&gt;WhichKey&lt;/strong&gt; popup is open, you can use the following key bindings (they are also displayed at the bottom of the screen):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;hit one of the keys to open a group or execute a key binding&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; to cancel and close the popup&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;bs&amp;gt;&lt;/code&gt; go up one level&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt; scroll down&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; scroll up&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🐙 Hydra Mode&lt;/h2&gt; 
&lt;p&gt;Hydra mode is a special mode that keeps the popup open until you hit &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Show hydra mode for changing windows
require(&quot;which-key&quot;).show({
  keys = &quot;&amp;lt;c-w&amp;gt;&quot;,
  loop = true, -- this will keep the popup open until you hit &amp;lt;esc&amp;gt;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🔥 Plugins&lt;/h2&gt; 
&lt;p&gt;Four built-in plugins are included with &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;Presets&lt;/h3&gt; 
&lt;p&gt;Built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; and more.&lt;/p&gt; 
&lt;h3&gt;Marks&lt;/h3&gt; 
&lt;p&gt;Shows a list of your buffer local and global marks when you hit ` or &#39;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/43fb0874-7f79-4521-aee9-03e2b0841758&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Registers&lt;/h3&gt; 
&lt;p&gt;Shows a list of your buffer local and global registers when you hit &quot; in &lt;em&gt;NORMAL&lt;/em&gt; mode, or &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; in &lt;em&gt;INSERT&lt;/em&gt; mode.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d8077dcb-56fb-47b0-ad9e-1aba5db16950&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Spelling&lt;/h3&gt; 
&lt;p&gt;When enabled, this plugin hooks into &lt;code&gt;z=&lt;/code&gt; and replaces the full-screen spelling suggestions window by a list of suggestions within &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/102c7963-329a-40b9-b0a8-72c8656318b7&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;🎨 Colors&lt;/h2&gt; 
&lt;p&gt;The table below shows all the highlight groups defined for &lt;strong&gt;WhichKey&lt;/strong&gt; with their default link.&lt;/p&gt; 
&lt;!-- colors:start --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Default Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKey&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyBorder&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;FloatBorder&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Border of the which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyDesc&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Identifier&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;description&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyGroup&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Keyword&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;group name&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIcon&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;@markup.link&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;icons&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconAzure&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconBlue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticInfo&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconCyan&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticHint&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconGreen&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticOk&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconGrey&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Normal&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconOrange&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticWarn&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconPurple&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Constant&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconRed&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticError&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconYellow&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticWarn&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyNormal&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;NormalFloat&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Normal in th which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeySeparator&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;the separator between the key and its description&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyTitle&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;FloatTitle&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Title of the which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyValue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;values by plugins (like marks, registers, etc)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- colors:end --&gt;</description>
    </item>
    
    <item>
      <title>iDvel/rime-ice</title>
      <link>https://github.com/iDvel/rime-ice</link>
      <description>&lt;p&gt;Rime 配置：雾凇拼音 | 长期维护的简体词库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;雾凇拼音&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL--3.0--only-34ad9b&quot; alt=&quot;License: GPL 3.0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/iDvel/rime-ice?filter=!nightly&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/actions/workflows/release.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/iDvel/rime-ice/release.yml&quot; alt=&quot;GitHub Actions Workflow Status&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/stars/iDvel/rime-ice&quot; alt=&quot;GitHub Repo stars&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;功能齐全，词库体验良好，长期更新修订。&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;a href=&quot;https://rime.im/&quot;&gt;Rime Input Method Engine / 中州韵输入法引擎&lt;/a&gt; 是一个跨平台的输入法算法框架。&lt;/p&gt; 
&lt;p&gt;这里是 Rime 的一份配置仓库，用户需要下载各平台对应的前端，并将此配置应用到配置目录。&lt;/p&gt; 
&lt;p&gt;雾凇拼音提供了一套开箱即用的完整配置，包含输入方案（全拼、常见双拼）、长期维护的开源词库及各项扩展功能。&lt;/p&gt; 
&lt;p&gt;详细介绍：&lt;a href=&quot;https://dvel.me/posts/rime-ice/&quot;&gt;Rime 配置：雾凇拼音&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/133&quot;&gt;常见问题&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/CHANGELOG.md&quot;&gt;更新日志&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;基本套路&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;简体 | 全拼 | 双拼&lt;/li&gt; 
 &lt;li&gt;主要功能 
  &lt;ul&gt; 
   &lt;li&gt;轻量的英文输入，支持中英混输&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://dvel.me/posts/make-rime-en-better/&quot;&gt;优化英文输入体验&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;拆字反查（&lt;kbd&gt;uU&lt;/kbd&gt;+拼音），拆字辅码（拼音+&lt;kbd&gt;`&lt;/kbd&gt;+拆字辅码）&lt;/li&gt; 
   &lt;li&gt;自整理的 Emoji&lt;/li&gt; 
   &lt;li&gt;以词定字（左右中括号：&lt;kbd&gt;[&lt;/kbd&gt;、&lt;kbd&gt;]&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;长词优先&lt;/li&gt; 
   &lt;li&gt;Unicode（&lt;kbd&gt;U&lt;/kbd&gt;+Unicode 码位）&lt;/li&gt; 
   &lt;li&gt;数字、人民币大写（&lt;kbd&gt;R&lt;/kbd&gt;+数字）&lt;/li&gt; 
   &lt;li&gt;日期、时间、星期（详见方案 &lt;code&gt;/date_translator&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;农历（转写：&lt;kbd&gt;N&lt;/kbd&gt;+八位数字；获取当前农历：全拼&lt;kbd&gt;nl&lt;/kbd&gt;，双拼&lt;kbd&gt;lunar&lt;/kbd&gt;）&lt;/li&gt; 
   &lt;li&gt;简易计算器（&lt;kbd&gt;cC&lt;/kbd&gt;+算式）&lt;/li&gt; 
   &lt;li&gt;常见错音错字提示&lt;/li&gt; 
   &lt;li&gt;置顶候选项（详见方案 &lt;code&gt;/pin_cand_filter&lt;/code&gt; 节点）&lt;/li&gt; 
   &lt;li&gt;所有标点符号直接上屏&lt;/li&gt; 
   &lt;li&gt;特殊符号、字符输入（全拼&lt;kbd&gt;v&lt;/kbd&gt;+首字母缩写；双拼&lt;kbd&gt;V&lt;/kbd&gt;+首字母缩写）&lt;/li&gt; 
   &lt;li&gt;拼音纠错（模糊音）&lt;/li&gt; 
   &lt;li&gt;更多默认未启用的功能请参考 &lt;code&gt;lua/&lt;/code&gt; 及方案注释&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;简体字表、词库 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&quot;&gt;通用规范汉字表&lt;/a&gt;（by 中华人民共和国教育部）8K 常用汉字&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.unicode.org/Public/&quot;&gt;Unihan 字库&lt;/a&gt;（by Unicode lnc | &lt;a href=&quot;https://www.unicode.org/license.txt&quot;&gt;UNICODE LICENSE V3&lt;/a&gt;）40K 大字库， &lt;strong&gt;默认未启用&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D%E8%A1%A8&quot;&gt;现代汉语常用词表&lt;/a&gt;（by 中国国家语言文字工作委员会）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&quot;&gt;华宇野风词库&lt;/a&gt;（by 野风）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rime/rime-essay-simp&quot;&gt;简化字八股文&lt;/a&gt;（by rime | &lt;a href=&quot;https://github.com/rime/rime-essay-simp/raw/master/LICENSE&quot;&gt;LGPL&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/thunlp/THUOCL&quot;&gt;清华大学开源词库&lt;/a&gt;（by THUNLP | &lt;a href=&quot;https://github.com/thunlp/THUOCL/raw/master/LICENSE&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://ai.tencent.com/ailab/nlp/en/download.html&quot;&gt;腾讯词向量&lt;/a&gt;（@Huandeep &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/24&quot;&gt;整理&lt;/a&gt; | by Tencent AI Lab | &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;词库修订 
  &lt;ul&gt; 
   &lt;li&gt;校对大量异形词、错别字、错误注音&lt;/li&gt; 
   &lt;li&gt;全词库完成注音&lt;/li&gt; 
   &lt;li&gt;同义多音字注音&lt;/li&gt; 
   &lt;li&gt;参考 
    &lt;ul&gt; 
     &lt;li&gt;《现代汉语词典》&lt;/li&gt; 
     &lt;li&gt;《同义词词林》&lt;/li&gt; 
     &lt;li&gt;《新华成语大词典》&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;http://www.jiaodui.com/bbs/&quot;&gt;校对标准论坛&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Rime、Squirrel、Weasel 常用配置项的详尽注释&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;长期维护词库&lt;/h2&gt; 
&lt;p&gt;因为没有找到一份比较好的词库，干脆自己维护一个。综合了几个不错的词库，精心调教了很多。&lt;/p&gt; 
&lt;p&gt;主要维护的词库：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; 字表。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base&lt;/code&gt; 基础词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; 扩展词库，小词库。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; 扩展词库，大词库。&lt;/li&gt; 
 &lt;li&gt;Emoji&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;维护内容主要是异形词、错别字的校对，错误注音的修正，缺失的常用词汇的增添，词频的调整。&lt;/p&gt; 
&lt;p&gt;欢迎在词库方面提 issue &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/666&quot;&gt;#666&lt;/a&gt; ，我会及时更新修正。&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;使用说明&lt;/h2&gt; 
&lt;h3&gt;选择和安装 RIME 前端&lt;/h3&gt; 
&lt;p&gt;要使用雾凇拼音默认提供的所有功能，请保证&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;您的 RIME 前端提供的 librime 版本 ≥ 1.8.5 且&lt;/li&gt; 
 &lt;li&gt;含有 librime-lua 依赖&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;以下是主流平台上的一些 RIME 前端安装建议。部分信息具有时效性，请以当下具体情况为准：&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;系统&lt;/th&gt; 
   &lt;th&gt;RIME 前端&lt;/th&gt; 
   &lt;th&gt;雾凇拼音版本要求&lt;/th&gt; 
   &lt;th&gt;备注&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx5-android/fcitx5-android/releases&quot;&gt;fcitx5-android&lt;/a&gt; + plugin.rime（小企鹅输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 0.0.8&lt;/td&gt; 
   &lt;td&gt;暂不支持九宫格&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/osfans/trime&quot;&gt;Trime&lt;/a&gt;（同文输入法）&lt;/td&gt; 
   &lt;td&gt;≥ 3.2.11&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95/id6446617683&quot;&gt;Hamster&lt;/a&gt;（仓输入法）&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;闭源；有内购&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;ibus + &lt;a href=&quot;https://github.com/rime/ibus-rime&quot;&gt;ibus-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;fcitx5 + &lt;a href=&quot;https://github.com/fcitx/fcitx5-rime&quot;&gt;fcitx5-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ≥ 1.8.5 且装有 librime-lua&lt;/td&gt; 
   &lt;td&gt;部分发行版需手动安装 librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/squirrel&quot;&gt;Squirrel&lt;/a&gt;（鼠须管）&lt;/td&gt; 
   &lt;td&gt;≥ 1.0.0&lt;/td&gt; 
   &lt;td&gt;0.16.0 - 0.18.0 版本请参考&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/1062&quot;&gt;🔗&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx-contrib/fcitx5-macos&quot;&gt;fcitx5-macos&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;支持&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/941&quot;&gt;卷轴模式&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/weasel&quot;&gt;Weasel&lt;/a&gt;（小狼毫）&lt;/td&gt; 
   &lt;td&gt;≥ 0.15.0&lt;/td&gt; 
   &lt;td&gt;0.14.3 可手动更新 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/197&quot;&gt;rime.dll&lt;/a&gt;（但不支持彩色 emoji）&lt;br /&gt;Weasel 当下有兼容性问题，建议安装其他输入法备用&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Linux 依赖问题的具体解释请参考 &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/840&quot;&gt;#840&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;雾凇拼音的部分配置可能要求更高的 librime 或者客户端版本，这些功能已在具体配置文件中注明。&lt;/p&gt; 
&lt;p&gt;以下安装方式，选择其一：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85&quot;&gt;手动安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#git-%E5%AE%89%E8%A3%85&quot;&gt;Git 安装&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%B8%9C%E9%A3%8E%E7%A0%B4-plum&quot;&gt;东风破 plum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC&quot;&gt;自动部署脚本&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95-hamster&quot;&gt;仓输入法&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#arch-linux&quot;&gt;Arch Linux&lt;/a&gt;（AUR）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;手动安装&lt;/h3&gt; 
&lt;p&gt;您可以将仓库打包下载，将所有文件复制粘贴到 RIME 前端的配置目录，重新部署。&lt;/p&gt; 
&lt;p&gt;只需要使用或者更新词库的话，可以手动粘贴覆盖 &lt;code&gt;cn_dicts&lt;/code&gt; &lt;code&gt;en_dicts&lt;/code&gt; &lt;code&gt;opencc&lt;/code&gt; 三个文件夹。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] 雾凇拼音中多个文件可能与其他方案同名冲突，如果是新手想一键安装，建议备份原先配置，&lt;strong&gt;清空配置目录&lt;/strong&gt;再导入。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;单独使用词库注意事项：&lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 下面包含了大写字母，这和配置有些许绑定，可以直接删除，详细说明：&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/356&quot;&gt;#356&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;您也可以前往 &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases&quot;&gt;Release&lt;/a&gt; 界面，下载特定版本的词典文件（具体描述见 Release 说明），覆盖配置目录的对应文件。&lt;/p&gt; 
&lt;h3&gt;Git 安装&lt;/h3&gt; 
&lt;p&gt;您如果熟悉 git 常用操作，可以使用 git clone 命令将本仓库克隆到对应前端的用户目录。由于本库提交历史较多且更改频繁，添加 &lt;code&gt;--depth&lt;/code&gt; 参数可以显著减少传输体积。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/iDvel/rime-ice.git Rime --depth 1

# 更新
cd Rime
git pull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过 checkout 命令，您也可以实现更新部分文件的效果。&lt;/p&gt; 
&lt;h3&gt;东风破 &lt;a href=&quot;https://github.com/rime/plum&quot;&gt;plum&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;选择配方（&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;）来进行安装或更新。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;/plum/ 简易安装教程&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;安装 plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 请先安装 git 和 bash，并加入环境变量
# 请确保和 github.com 的连接稳定
cd ~
git clone https://github.com/rime/plum.git plum
# 卸载 plum 只需要删除 ~/plum 文件夹即可
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;使用 plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
bash rime-install &amp;lt;recipe_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr /&gt; 
&lt;/details&gt; 
&lt;p&gt;词库配方只是更新具体词库文件，并不更新 &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;，因为用户可能会挂载其他词库。如果更新后部署时报错，可能是增、删、改了文件名，需要检查上面两个文件和词库的对应关系。&lt;/p&gt; 
&lt;p&gt;℞ 安装或更新全部文件&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新所有词库文件（包含下面三个）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新拼音词库文件（ &lt;code&gt;cn_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新英文词库文件（ &lt;code&gt;en_dicts/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 安装或更新 opencc （ &lt;code&gt;opencc/&lt;/code&gt; 目录内所有文件）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;下面这个配方会在 &lt;code&gt;radical_pinyin.custom.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.custom.yaml&lt;/code&gt; 里将 &lt;code&gt;speller/algebra&lt;/code&gt; 修改为对应的双拼拼写，选择一个自己使用的双拼作为参数。&lt;/p&gt; 
&lt;p&gt;℞ 双拼补丁&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/config:schema=flypy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=double_pinyin
bash rime-install iDvel/rime-ice:others/recipes/config:schema=mspy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=sogou
bash rime-install iDvel/rime-ice:others/recipes/config:schema=abc
bash rime-install iDvel/rime-ice:others/recipes/config:schema=ziguang
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;℞ 下载特定版本的配置&lt;/p&gt; 
&lt;p&gt;在仓库后加 &lt;code&gt;@tag&lt;/code&gt; 即可，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bash rime-install iDvel/rime-ice@2024.05.21:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;仓输入法 &lt;a href=&quot;https://github.com/imfuxiao/Hamster&quot;&gt;Hamster&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;参考 &lt;a href=&quot;https://github.com/imfuxiao/Hamster/wiki/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%22%E9%9B%BE%E6%B7%9E%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%96%B9%E6%A1%88%22&quot;&gt;如何导入&quot;雾凇拼音输入方案&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;仓输入法目前已内置雾凇拼音。&lt;/p&gt; 
&lt;p&gt;使用九宫格，需要同时启用九宫格方案（输入方案设置）和九宫格布局（键盘设置 - 键盘布局 - 中文 9 键）。&lt;/p&gt; 
&lt;h3&gt;自动部署脚本&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Mark24Code/rime-auto-deploy&quot;&gt;Mark24Code/rime-auto-deploy&lt;/a&gt; 一个自动部署脚本，集成了雾凇拼音，帮助无痛快速安装、部署 Rime 输入法（中州韵、小狼毫，鼠须管）以及部署配置。&lt;/p&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;使用 AUR helper 安装 &lt;a href=&quot;https://aur.archlinux.org/packages/rime-ice-git&quot;&gt;rime-ice-git&lt;/a&gt; 包即可。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# paru 默认会每次重新评估 pkgver，所以有新的提交时 paru 会自动更新，
# yay 默认未开启此功能，可以通过此命令开启
# yay -Y --devel --save

paru -S rime-ice-git
# yay -S rime-ice-git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;推荐使用&lt;a href=&quot;https://github.com/rime/home/wiki/Configuration#%E8%A3%9C%E9%9D%AA&quot;&gt;补丁&lt;/a&gt;的方式启用。&lt;/p&gt; 
&lt;p&gt;参考下面的配置示例，修改对应输入法框架用户目录（见下）中的 &lt;code&gt;default.custom.yaml&lt;/code&gt; 文件&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iBus 为 &lt;code&gt;$HOME/.config/ibus/rime/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fcitx5 为 &lt;code&gt;$HOME/.local/share/fcitx5/rime/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;default.custom.yaml&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;patch:
  # 仅使用「雾凇拼音」的默认配置，配置此行即可
  __include: rime_ice_suggestion:/
  # 以下根据自己所需自行定义，仅做参考。
  # 针对对应处方的定制条目，请使用 &amp;lt;recipe&amp;gt;.custom.yaml 中配置，例如 rime_ice.custom.yaml
  __patch:
    key_binder/bindings/+:
      # 开启逗号句号翻页
      - { when: paging, accept: comma, send: Page_Up }
      - { when: has_menu, accept: period, send: Page_Down }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;h2&gt;感谢 ❤️&lt;/h2&gt; 
&lt;p&gt;特别感谢上文已经提及的词库、词典的作者、贡献者及整理者；特别感谢以及下列词库、方案、脚本的作者及贡献者（提及的均为 GitHub id）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@mozillazg 开发的汉字转拼音工具和数据库（MIT）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt&quot;&gt;melt_eng&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;） ：提供了部分（约 1000 条）英文词汇以及原始英文方案参考；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin&quot;&gt;部件拆字方案&lt;/a&gt;（@mirtlecn | &lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin/raw/master/LICENSE&quot;&gt;GPL 3.0&lt;/a&gt;）：提供的拆字反查和候选筛选插件；&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&quot;&gt;长词优先插件&lt;/a&gt;（@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;Unicode 插件&lt;/a&gt;（@shewer | &lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;MIT&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yanhuacuo/98wubi/raw/master/lua/number.lua&quot;&gt;数字、人民币大写插件&lt;/a&gt;（@98wubi）&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/boomker/rime-fast-xhup&quot;&gt;农历插件&lt;/a&gt;（@boomker | &lt;a href=&quot;https://github.com/boomker/rime-fast-xhup/raw/master/LICENSE&quot;&gt;LGPL 3.0&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;未能在此处详述的、在本库源码注释中提及的项目及作者给予的帮助和参考&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/Huandeep&quot;&gt;@Huandeep&lt;/a&gt; 整理的多个词库。&lt;/p&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/mirtlecn&quot;&gt;@Mirtle&lt;/a&gt; 完善的多个功能。&lt;/p&gt; 
&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/Lithium-7&quot;&gt;@Lithium-7&lt;/a&gt; 对词库的大量修订。&lt;/p&gt; 
&lt;p&gt;感谢所有贡献者。&lt;/p&gt; 
&lt;!-- 搜狗转 Rime：[lewangdev/scel2txt](https://github.com/lewangdev/scel2txt) --&gt; 
&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSourceSupport&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;赞助 ☕&lt;/h2&gt; 
&lt;p&gt;如果觉得项目不错，可以请 Dvel 吃个煎饼馃子。&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&quot; alt=&quot;请 Dvel 吃个煎饼馃子&quot; width=&quot;600&quot; /&gt;</description>
    </item>
    
    <item>
      <title>amzxyz/rime_wanxiang</title>
      <link>https://github.com/amzxyz/rime_wanxiang</link>
      <description>&lt;p&gt;Rime万象拼音输入方案：标准版与增强版可选，词库基于AI筛选和语料辅助筛选精干高效，配合全新语法模型，输入不再纠结。PRO版本支持10种双拼，6种辅助码，并且可以扩展更多，支持中英混输，内置超级注释、带调全拼输入码显示、快符与重复上屏、候选手动排序、tips等功能扩展，大大增强使用体验。　　Q群：11033572&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; 
&lt;h1&gt;万象系列方案 &lt;a href=&quot;https://deepwiki.com/amzxyz/rime_wanxiang&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;hr /&gt; 
&lt;h2&gt;万象拼音——基于深度优化的词库和语言模型&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;万象词库与万象语言模型&lt;/a&gt; 是一种带声调的词库，经过AI和大基数语料筛选、加频，结合语言模型获得更准确的整句输出。还结合了中英文混输，一套词库，多种用法，具体可以点击链接了解优势&lt;/p&gt; 
&lt;h3&gt;优势&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;词库词语全部加音调&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;设计6种辅助码，头部使用全拼编码，可以转化为任何双拼编码&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;词库解码顺序为：全拼拼音；墨奇码；鹤形；自然码；虎码首末；五笔前2；汉心码&lt;/li&gt; 
   &lt;li&gt;因此，万象拼音支持拼音和辅助码任意两两组合&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他类型辅助码用户可以通过LMDG工具包进行词库辅助码刷新，使用zrm-fuzhu方案包，替换为刷新后的词库即可使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;万象词库中的带声调拼音标注+词组构成+词频是整个万象项目的核心，是使用体验的基石，方案的其它功能皆可自定义，我希望使用者可以基于词库+转写的方式获得输入体验&lt;/strong&gt; &lt;a href=&quot;https://docs.qq.com/smartsheet/DWHZsdnZZaGh5bWJI?viewId=vUQPXH&amp;amp;tab=BB08J2&quot;&gt;万象词库问题收集反馈表&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;效果大赏&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202502200358104987_%E6%95%88%E6%9E%9C.png&quot; alt=&quot;效果.png&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;版本差异&lt;/th&gt; 
   &lt;th&gt;标准版&lt;/th&gt; 
   &lt;th&gt;增强版&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;方案文件&lt;/td&gt; 
   &lt;td&gt;wanxiang.schema.yaml&lt;/td&gt; 
   &lt;td&gt;wanxiang_pro.schema.yaml&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;是否调频&lt;/td&gt; 
   &lt;td&gt;默认开启&lt;/td&gt; 
   &lt;td&gt;默认关闭&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;用户词记录&lt;/td&gt; 
   &lt;td&gt;无差别自动记录，词库混乱&lt;/td&gt; 
   &lt;td&gt;需手动造词``引导，词库可控&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;用户词位置&lt;/td&gt; 
   &lt;td&gt;wanxiang.userdb&lt;/td&gt; 
   &lt;td&gt;zc.userdb&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;辅助码&lt;/td&gt; 
   &lt;td&gt;有基于声调的辅助&lt;/td&gt; 
   &lt;td&gt;有7种辅助码可选，同时兼容声调辅助&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;简码&lt;/td&gt; 
   &lt;td&gt;全拼开启基于转写的简码，双拼未开启&lt;/td&gt; 
   &lt;td&gt;有携带部分数据但未配置(自己设置的才是自己的)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;词库格式&lt;/td&gt; 
   &lt;td&gt;你➩nǐ➩1000&lt;/td&gt; 
   &lt;td&gt;你➩nǐ;re➩1000&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;新手快速入门&lt;/h3&gt; 
&lt;p&gt;不了解rime基础的可以参考友情链接，初步了解rime运行的些许特性：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.mintimate.cc/zh/guide/installRime.html&quot;&gt;oh my rime&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://xishansnow.github.io/posts/41ac964d.html&quot;&gt;rime参数配置&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;整个rime配置生态都是通的，里面有非常完整的使用方法，(诸如放到哪里、换个皮肤、什么是用户目录。。。)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;友情提示：&lt;/strong&gt; &lt;em&gt;如果你是第一次使用万象，可以不要用你过往经验来定义万象，按如下的步骤将万象跑起来后,体验一下万象的功能，然后学习一下万象的各项内容之后再考虑。&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;①快速运行：&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;将方案文件置于用户目录中，直接部署，等待部署完成后，&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;输入以下指令(斜杠引导)切换为对应的双拼/全拼，切换后按照提示重新部署，完成。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;这样的指令能帮你一次性完成4个补丁文件的输入类型修改，运行逻辑：根目录无自定义文件则复制custom文件夹相关文件出来并修改为对应的输入方案，如果根目录存在则只修改输入方案，不进行复制，因此不会被覆盖。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ios仓输入法，平台特殊，需要额外去：方案文件管理-使用键盘文件覆盖应用文件，才能完成文件变更&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;/flypy    → 小鹤双拼
/mspy     → 微软双拼
/zrm      → 自然码
/sogou    → 搜狗双拼
/abc      → 智能ABC
/ziguang  → 紫光双拼
/pyjj     → 拼音加加
/gbpy     → 国标双拼
/lxsq     → 乱序17
/pinyin   → 全拼
/zrlong   → 自然龙(反查是全拼)
/hxlong   → 汉心龙(反查是全拼)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;②进阶custom patch法（已经尽量为你简化）强烈推荐，适用于长期稳定使用：&lt;/h4&gt; 
&lt;p&gt;其实快速运行中我们已经完成了custom patch的部署，里面还预设了一些示例，这些例子只是例子，请务必详细阅读每一行，保留有用的删除无用的，千万不要改完双拼就万事大吉了，每一行详细查阅、理解、修改。custom是对对应方案文件的最后一道补丁，是真正属于你自己的配置文件，他不会被升级所覆盖。&lt;/p&gt; 
&lt;p&gt;方案提供了custom文件夹，预设了一些文件与教程，请不要删除相关文件，根据文件夹中内容进行相关修改变更：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;不要在default.custom写东西,任何patch都要对方案文件进行patch，default.custom留给前端操作请务必悉知！&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wanxiang.custom.yaml是对wanxiang.schema.yaml的补丁以此类推
可以打补丁的类型：
schema,default,weasel,squirrel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;注意不要删除和变更每一个custom的表头。&lt;/p&gt; 
&lt;p&gt;更详细参照：&lt;a href=&quot;https://docs.qq.com/doc/DQ0FqSXBmYVpWVFpy?rtkey=&quot;&gt;🚀 Rime 万象拼音输入方案 新手安装配置指南&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;③脚本更新：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;脚本的下载地址 &lt;a href=&quot;https://github.com/rimeinn/rime-wanxiang-update-tools&quot;&gt;万象方案更新脚本&lt;/a&gt;。这里以win版本的小狼毫为例，如果你是&lt;strong&gt;中文系统&lt;/strong&gt;请下载更新脚本的 powershell &lt;strong&gt;非utf-8版本&lt;/strong&gt;，具体文件名：&lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; 。在使用万象之前，请安装小狼毫，安装小狼毫的过程中，请一切保持默认即可，等你熟悉之后可以自定义。本入门最终会带你一步步设置使用&lt;strong&gt;小鹤双拼+墨奇辅助码&lt;/strong&gt;的方案。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;下载更新脚本：直接点击上面地址首页右边最新 release 链接，然后下载对应的 &lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; 文件即可。下载完成后，直接双击运行刚刚下载的ps1脚本。如果杀毒报错，请将你下载的文件恢复后，添加到信任文件。如果执行一闪而过、或者遇到乱码再尝试下载 utf-8 版本，具体文件名：&lt;code&gt;rime-wanxiang-update-windows-utf-8.ps1&lt;/code&gt;。如果提示权限不足，可以在 powershell 终端中执行 &lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser&lt;/code&gt; 再尝试运行下载的 ps1 脚本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;脚本执行后，需要你确认你使用的是全拼还是双拼用户，如果你是全拼用户，请根据提示输入 0 后回车。如果你双拼用户，需要你确认你使用的辅助码类型，默认的万象方案支持汉心、简单鹤、墨奇、虎码、五笔、自然码共计6种辅助码类型。如果没有你想要的辅助码类型，也不要着急，可在熟悉万象之后自定义。根据提示输入你使用的辅助码类型的数字后回车即可。这里我按墨奇辅助码输入。更不要着急怎么选择双拼方案，后面会告诉你的。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;脚本继续执行，提示选择是否全部更新，不要管，你是新手，直接选全部更新，输入 0 回车。然后就默默的等待脚本执行完后，按任意键退出即可。默认情况下，万象的双拼方案为自然码。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在使用脚本更新之前，务必使用进阶custom patch法维护好你的配置，更新不会覆盖custom.yaml类文件&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;④&lt;strong&gt;自定义数据获取：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在线custom目录随有三个数据源提供，按自己需求自行整理取用，这部分数据没有随zip方案包一起供应，需在线下载。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;jm_flypy.txt 用于提供小鹤类型的简码，下载后放置于根目录txt自定义库即可使用；&lt;/li&gt; 
 &lt;li&gt;jm_zrm.txt 用于提供自然码类型的简码，下载后放置于根目录txt自定义库即可使用；&lt;/li&gt; 
 &lt;li&gt;tips_user.txt tips用到的“翻译”类型的数据，下载后放置于lua/tips里面重新部署。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;答疑&lt;/h3&gt; 
&lt;h4&gt;为什么词库这么大，我见过只有单字携带辅助码的方案，词库可以缩小吗？&lt;/h4&gt; 
&lt;p&gt;在这里我借助wiki深入阐述一下这个问题并解答这些问题：&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%87%E8%B1%A1%E8%AF%8D%E5%BA%93PRO%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5&quot;&gt;万象词库PRO的设计理念&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%85%B3%E9%97%AD%E8%B0%83%E9%A2%91%E4%BB%A5%E5%8F%8A%E4%B8%8E%E4%B9%8B%E5%85%B3%E8%81%94%E7%9A%84%E6%8E%AA%E6%96%BD%E6%9C%89%E5%93%AA%E4%BA%9B&quot;&gt;为什么PRO版本默认关闭调频的说明&lt;/a&gt; &lt;code&gt;enable_user_dict: false # 是否开启自动调频，true为开启&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;功能一览&lt;/h3&gt; 
&lt;h4&gt;辅助码&lt;/h4&gt; 
&lt;p&gt;辅助码可以在输入一个确定得拼音后面继续输入一个部首的读音，使得这个字出现在靠前甚至第一位。这种方式易于理解，无须记忆字根，一切基于拼音得基础上。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041144502563_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121653.png&quot; alt=&quot;截图_选择区域_20240704121653.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能1&lt;/strong&gt; &lt;strong&gt;（仅PRO）&lt;/strong&gt; 直接辅助--如果想要 &lt;code&gt;镇&lt;/code&gt; 字显示在前面 那么在本方案下提供两种方式，第一种就是辅助码声母，&lt;code&gt;vf&lt;/code&gt;继续输入&lt;code&gt;j&lt;/code&gt; 也就是金字旁得声母即可出现结果，如果还是出现不了你要的结果，可以输入另外主体字的声母来继续缩小范围。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041147131421_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121809.png&quot; alt=&quot;截图_选择区域_20240704121809.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;句子中间或者单字输入时需要输入全位辅助码时由于与双拼词语重码，因为我们设计的基本辅助码是2位，加上双拼共4位，由于在整句中我们为了整句输入的顺畅，不会将4码聚拢作为优先级较高的选择，这样会在很多时候造成你想打的句子缩成一团变成全辅助码的词汇。此时可以通过追加/的方式使其聚拢，这种方式是由于我们是直接辅助码导致的，如果我们通过一个符号引导辅助码，那么在输入时要每一个都用到符号，而采用这种方式我们只需要在必要的时候使用/节省了输入的按键开支，下面由两个图片说明问题：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202408210142513354_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093644.png&quot; alt=&quot;截图_选择区域_20240821093644.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202408210143144721_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093701.png&quot; alt=&quot;截图_选择区域_20240821093701.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能2&lt;/strong&gt; &lt;strong&gt;（仅PRO）&lt;/strong&gt; 间接辅助--除以上直接使用辅助外,我们还支持中间加入/来引导辅助码的输入,即:功能1是&quot;nire/&quot; 在有需求的时候末尾增加斜杠能让系统侧重于单字,平时则永远在动态切分,这个模式也是比较吃词库的,当你的词组完整,遇到的异常就少,当词组不完整,你想输入三个字2+2=2编码结构,恰好辅助码与双拼编码重合就会出现3+3的聚拢,此时将你想输入的三个字放入词库中,这个问题就得到了解决,还有得项目通过Lua重新切分来解决,看似巧妙,实际上比较吃操作,影响节奏,无疑万象在很多选择上面选择了更加难的路线,用词库的全面性来托举. 而在功能2中是&quot;ni/re&quot;,也就是说辅助码必须经过/来引导,如果你不输入/它将与普通双拼无异,优点是类似vsg能够派生出&quot;中国&quot;,更适用于新手辅助码或者叫辅助码轻量使用者.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能3&lt;/strong&gt; 第二种方式是通过反查字库来定位，只是通过不同的方案实现，在输入主要拼音后，通过符号&lt;code&gt;`&lt;/code&gt; 来引导进入反查状态，引导后继续输入&lt;code&gt;jn&lt;/code&gt;金 则包含金的字就会被选出来；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041149125588_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121635.png&quot; alt=&quot;截图_选择区域_20240704121635.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;引导后继续输入&lt;code&gt;mu 木&lt;/code&gt;则带&lt;code&gt;木&lt;/code&gt;的字就会被选出来&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041149524870_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121611.png&quot; alt=&quot;截图_选择区域_20240704121611.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;实际上我们同时支持，&lt;code&gt;两分：你(ni`rfer，ni`re)、多分：莫（mu`ckrida）、笔画：你ni`pspzhpd&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能4&lt;/strong&gt; 通过 拼音状态下&lt;code&gt; ``〔反查：部件|笔画〕&lt;/code&gt; 来引导拆字模式 举例 &lt;code&gt;震&lt;/code&gt; 假设你不认识，你可以通过&lt;code&gt;雨和辰&lt;/code&gt; 来合并输入，拼音状态输入后，继续输入其它字符字母az会消失如下图，输入 &lt;code&gt;yu if&lt;/code&gt; 即雨 辰，结果出现了我们要的震字，且给出了辅助码 &lt;code&gt;y&lt;/code&gt; 和 &lt;code&gt;i&lt;/code&gt; ，&lt;code&gt;y&lt;/code&gt;是雨的声母&lt;code&gt;y&lt;/code&gt;，&lt;code&gt;i&lt;/code&gt;是辰的声母&lt;code&gt;ch&lt;/code&gt;，同时兼容通过hspnz代表横竖撇捺折五笔画。功能3是功能4的另一种表现形式,或者叫用法。这个功能依赖wanxiang_reverse.schema.yaml方案,可以通过custom配置成任意全拼双拼以匹配主方案一致的输入方式,因此是不是输入jn=jin需要看你具体的双拼类型。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202409280324599355_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240928112256.png&quot; alt=&quot;截图_选择区域_20240928112256.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;功能5&lt;/strong&gt; 句子中间或者单字输入时需要可以使用更精确的聚拢方式&quot;声调辅助&quot;，7890数字按键代表1234声，轻声归并到4声，在功能4中我们可以在双拼两码后面3个编码的位置任意插入声调与两位辅助码混合使用，就是除了不用斜杠了，我们还顺序自由了，下面由两个图片说明问题,其实在键盘上想要安排四个按键是很难得,不是占用这个按键就是占用另外的,还有得朋友觉得离得远,还有得更是不需要声调,要把候选做成9个。这些都是存在的情况,现在的处理也是妥协后的结果,要想完全不占用按键类似的办法可以改成大写字母来代表,像地球拼音则是使用大于小于号这一片的符号来表示,我们的词库有声调这个基础,一定程度上还是要利用起来：&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202505120222182012_截图_选择区域_20250512101814.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/20250512022217432_截图_选择区域_20250512101752.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202505120222163619_截图_选择区域_20250512101713.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;功能6&lt;/strong&gt; 混合输入:字母、汉字、数字、用于连接的特殊符号等组合，以及英文混输，我们统一放在了wanxiang_mixedcode.schema.yaml混合编码方案里，此功能无需引导，直接输入，不参与组句，类似：1000wclips、AD钙奶、PN结、Type-C以及纯英文，同样可以通过custom来定义你所使用的双拼。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260105536966_%E6%B7%B7%E5%90%88%E7%BC%96%E7%A0%81.jpg&quot; alt=&quot;东风5C&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;整合说明&lt;/strong&gt; 万象方案整合度很高，我们不希望使用户文件夹变得复杂，功能5中我们将两类习惯的五笔画和多分拆字和两分拆字整合到了一起，可以认为是4个挂接方案；在功能6中，我们将 英文输入、中英混合编码、以及一些其他混合编码整合到了一起，共享方案转写，两个功能都保证了可配置性，都能与你所使用的双拼契合， 对于词库也都整合到了dicts里面，为了能更好的统一更新和分发，仓库中我们支持基础版本词库、携带pro的辅助码版本词库、英文词库、混合词库4个类别，在release中各自归类，最终做到了根目录15个文件、4个文件夹示人，其中的custom目录还携带了用户自定义的法宝秘籍，能称得上简约而不简单。&lt;/p&gt; 
&lt;h4&gt;其他亮点功能&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;日期、时间、节日、节气、问候模板：&lt;/strong&gt; 可以在按键配置的地方定制引导前缀&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;key_binder/shijian_keys: [&quot;/&quot;, &quot;o&quot;]&lt;/code&gt; 这样的配置以为你你可以/sj也可以osj，某些方案o有别的作用时候可以去掉o,灵活处理。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;#时间：osj 或者 /sj
#日期：orq 或者 /rq
#农历：onl 或者 /nl
#星期：oxq 或者 /xq
#今年第几周：oww 或者 /ww
#节气：ojq 或者 /jq
#日期+时间：ors 或者 /rs
#时间戳：ott 或者 /tt
#大写N日期：N20250315 或者 N0302 即不添加年
#节日：ojr 或者 /jr
#问候模板：/day 或者 oday
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260107542641_N20250102.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260108069991_N0102.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;Unicode：&lt;/strong&gt; 大写 U 开头，如 U62fc 得到「拼」。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260111366093_U码.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;数字、金额大写：&lt;/strong&gt; 大写 R 开头，如 R1234 得到「一千二百三十四、壹仟贰佰叁拾肆元整」。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260124573417_金额大写.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;/引导模式：&lt;/strong&gt; 通过输入 /sx 快捷输入关于“数学”的特殊符号，具体能输入什么可以打开 symbols.yaml学习。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126183029_符号数学.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126173818_符号大于.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126167252_符号圆点.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;计算器：&lt;/strong&gt; 通过输入大写V引导继续输入如：V3+5 候选框就会有8和3+5=8，基础功能 &lt;code&gt;+ - * / % ^&lt;/code&gt; 还支持 &lt;code&gt;sin(x) cos(x)&lt;/code&gt; 等众多运算方式，打开super_calculator.lua阅读相关用法。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260127113759_计算器1.png&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260127126065_计算器2.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;自动上屏：&lt;/strong&gt; 例如：三位、四位简码唯一时，自动上屏如&lt;code&gt;jjkw岌岌可危&lt;/code&gt; &lt;code&gt;zmhu怎么回事&lt;/code&gt; 。默认未开启，方案文件中&lt;code&gt;speller:&lt;/code&gt;字段下取消注释这两句开启 &lt;code&gt;# auto_select: true # auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;错音错字提示：&lt;/strong&gt; 例如：输入&lt;code&gt;gei yu给予&lt;/code&gt;，获得&lt;code&gt;jǐ yǔ&lt;/code&gt;提示，此功能与全拼、双拼类型无关全部支持；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260127525844_错音给予.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260127524705_错音崩溃.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;快符Lua：&lt;/strong&gt; 例如通过 &lt;code&gt;a/&lt;/code&gt; ，快速自动上屏“！”符号或者定义为任意字符，享受26字母的扩展。其中值设置为&lt;code&gt;repeat&lt;/code&gt;则意味着按下对应按键能否重复上一次上屏的内容；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;超级tips：&lt;/strong&gt; 支持将表情、化学式、翻译、简码 提示等等你能想到得数据获得提示显示并将通过一个自定义按键直接上屏，默认为“.” 也表现为句号，如需句号翻页可以采用其他作为触发。避免了这类内容占用候选框，通过Control+t 进行开关。⚠️仓输入法、超越输入法设置按键交由rime去处理，没有特殊需求应该一律交给rime；&lt;/p&gt; 
&lt;p&gt;化学式：&lt;img src=&quot;https://storage.deepin.org/thread/202509260128462735_tips化学式.jpg&quot; height=&quot;80&quot; /&gt;符号：&lt;img src=&quot;https://storage.deepin.org/thread/202509260128454675_tips符号.jpg&quot; height=&quot;80&quot; /&gt;表情：&lt;img src=&quot;https://storage.deepin.org/thread/202509260128457494_tips表情.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;首选格式化：&lt;/strong&gt; 将自定义短语中，诸如\n \s \t 等行中标识符转换为实际的换行、空格、制表符等等，使得类似输入jys可以打出一首带格式的《静夜思》，这将成为类似书名号输入场景的利器。&lt;/p&gt; 
&lt;p&gt;例：&lt;code&gt;静夜思\n\s\s李白\n床前明月光\n疑似地上霜\n举头望明月\n低头思故乡 jys&lt;/code&gt;&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260129305342_格式化.jpg&quot; height=&quot;260&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;首选加成对符号：&lt;/strong&gt; 将输入中的短语通过输入追加\a 这样的末尾编码，触发相对于a这个字母映射的成对符号，例如：&lt;code&gt; sj mk lq lh ji\l=《三毛流浪记》&lt;/code&gt;可以通过custom自定义符号和触发方式。&lt;/p&gt; 
&lt;p&gt;工作逻辑：输入词汇编码 &amp;gt; 按下锁定按钮\ &amp;gt; 按下映射字符\a &amp;gt; 《候选包裹成对符号》&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260130219621_首选成对符号1.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260130208277_首选成对符号2.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260130199763_首选成对符号3.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;英文候选格式化：&lt;/strong&gt; 输入hello则得到hello，输入首字母大写Hello则得到Hello和一众首字母大写的联想词，输入前两码大写HEllo则得到全为大写的HELLO和一众大写英文。&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260133175234_首字母大写.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260133175362_双字母大写.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;辅助码提示（仅PRO）：&lt;/strong&gt; 任意长度候选词的辅助码提示能力，默认开启1个字的辅助码，可以在方案文件中定义更长的长度。Ctrl+a可以实时在开启辅助码提示、开启声调全拼提示、关闭注释 三个状态循环，Ctrl+c开启拆分辅助提示，优先级高于普通辅助提示；&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134283927_辅助码提示.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134278003_声调提示.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134284782_拆分提示.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;输入码音调显示：&lt;/strong&gt; 通过Ctrl+s可以使得输入码实时动态显示全拼并加音调，这是万象特色功能；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;用户按需造词（仅PRO）：&lt;/strong&gt; 默认通过&lt;code&gt;``&lt;/code&gt;引导的方式进入用户词自造词模式，继续输入则&lt;code&gt;``&lt;/code&gt;前缀消失，后面打出来的字上屏后完成造词。 pro版本讲究自主可控，由于辅助码的使用在很多时候不熟悉的时候可能会上屏更加异常的词汇或者生僻字，有的用户还不会使用Esc退出输入，而是选择直接敲下空格。按需造词可以有效把控造出的词是有意义的，而且默认靠后，原因简单基本上有意义的高频词万象已经提供，你应该使用辅助码将其前置。&lt;strong&gt;重点&lt;/strong&gt;：在此基础上我们还支持“后触发”当你输入编码后发现没有你要的行业词汇，此时在后面双击&lt;code&gt;``&lt;/code&gt; 就可以在不删除编码的情况下完成造词。还有一个是次选造词，如果次选是你想要的，并且是词库组合成的，上屏就会记录下来。&lt;/p&gt; 
&lt;p&gt;总结一下，造词功能由：①&lt;code&gt;``&lt;/code&gt;起始的主动造词，②&lt;code&gt;``&lt;/code&gt;在编码后面的主动造词，③次选造词。三个特性构成&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;无感造词（仅PRO）：&lt;/strong&gt; 在关闭调频的情况下，通过逐步选字选词的方式上屏将为你记录整段，且不会产生小碎片，所造词汇与db用户词是一回事，遵循用户词管理的相关逻辑，其中直接上屏不造词。相比按需造词更加不打断输入。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;用户词删除：&lt;/strong&gt; 使用Ctrl+del是rime系统删除用户词,就可以将用户词标记为c&amp;lt;=0，这在rime系统中就表现为不使用，假性删除。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;手动排序（Lua）：&lt;/strong&gt; ①词典候选类型：对选中的候选词操作，使用Ctrl+j向左一步，Ctrl+k向右一步，Ctrl+l(零)移除选中排序信息，Ctrl+p 置顶选中候选。其作用于当时编码与候选词；②动态生成的Lua候选，很多时候我们对日期、时间等输出格式首选有着自己的追求，复杂的配置又往往提升了使用难度，于是我们基于排序Lua实现了动态内容的按序号索引的排序，也就是说该序号下原本生成的格式整个发生了位置变化，使用方法一致。信息储存于Lua文件夹下排序数据库中sequence.userdb，支持导出导入数据便于多设备共用。&lt;/p&gt; 
&lt;p&gt;排序信息同步：&lt;/p&gt; 
&lt;p&gt;A 先点击同步，多见于右键菜单，保证创建了相应的同步目录，如没有自定义则位于用户目录下/sync&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;打开用户目录，会有installation.yaml文件，打开后会有如下信息，我们将installation_id认为是设备id，初次会创建自动串号，你也可以将其修改为当前设备名称&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;distribution_code_name: &quot;fcitx-rime&quot;
distribution_name: Rime
distribution_version: 5.1.9
install_time: &quot;Mon Jun 23 18:47:55 2025&quot;
installation_id: &quot;ff9b2823-8733-44bb-a497-daf382b74ca5&quot;  #这里可以随意编辑，比如修改为windows
rime_version: 1.13.1
update_time: &quot;Sat Sep  6 16:08:56 2025&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;得到这个id后我们就可以下一步构建出同步文件的名称sequence_设备id.txt&lt;/p&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;首先确定一个主要管理设备，在/sync中创建一个描述设备清单的文件 &lt;code&gt;sequence_device_list.txt&lt;/code&gt;，这个清单告诉程序要读取同目录下哪些文件进行合并&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-内部内容为：&quot;&gt;sequence_deepin.txt
sequence_windows.txt
sequence_iPhone.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;按「部署」，会进行以下几步：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;①、自动导出数据到 &lt;code&gt;sequence_deepin.txt&lt;/code&gt; 文件(假设为当前设备)，因此这个当前设备文件会被覆盖，请不要手动修改避免丢失；&lt;/p&gt; 
&lt;p&gt;②、读取列表中列出的文件，按时序以保留最新动作为依据进行去重合并，合并后数据将会回写到 &lt;code&gt;sequence_deepin.txt&lt;/code&gt; 文件；&lt;/p&gt; 
&lt;p&gt;③、将合并后的文件导入db数据库，完成数据合并，注意p=0的重置后的编码不会导入数据库，如数据库原本有对应的词汇，将删除对应的键。&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;通过云同步将/sync完成同步到windows设备，同步后，编辑 &lt;code&gt;sequence_device_list.txt&lt;/code&gt;将sequence_windows.txt写入文件，让同步程序再次完成多端同步&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;此时目录中已经存在如下文件，此时重新部署，稍作等待将会完成&lt;code&gt;sequence_windows.txt&lt;/code&gt;的输出&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_device_list.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_deepin.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_windows.txt&lt;/code&gt; #同步后新增&lt;/p&gt; 
&lt;p&gt;再次手动完成手动云同步，及时让文件对齐。&lt;/p&gt; 
&lt;p&gt;B 重复以上操作完成更多设备的添加和同步&lt;/p&gt; 
&lt;p&gt;由于此流程为模拟rime同步的方式，rime的同步本质上就是多端的数据合并的过程，可靠性可能相较于原生较弱一些，尤其是iPhone可能遇到更多问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;声调辅助回退（Lua）：&lt;/strong&gt; 万象是将7890用于代表1234声，轻声归并到了4，我们支持在例如输入ni9后发现我可能要4声，ni0，此时我们无需删除数字9而是直接输入对的0，类似手动在7890之间轮巡，能有效快速提升声调辅助的效率，减少使用负担，也是万象独创功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;删除键限制（Lua）：&lt;/strong&gt; 可以在输入中当持续按下删除编码为0时会卡住，抬起重新按下才能继续删除已经上屏内容，避免误删除上屏内容。目前仅PC可用，也是万象独创功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;输入长度限制（Lua）：&lt;/strong&gt; 对两类场景进行限制，避免数据并发卡顿：1、重复输入8个连续相同的字母，aaaaaaaa会提示:已超最大重复声母。因为连续多个的重复字母会造成严重的卡顿；2、分词片段限制在30个，也就是30个字，过长的语句价值不大还会造成卡顿。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tab循环切换音节：&lt;/strong&gt; 当输入多个字词时想要给前面补充辅助码，可以多次按下tab循环切换，这种可能比那些复杂的快捷键好用一些；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;翻译模式：&lt;/strong&gt; 输入状态按下Ctrl+E快捷键进入翻译模式，原理是opencc查表进行中英文互译，能否翻译取决于词表的丰富度；&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字符集过滤：&lt;/strong&gt; 默认开启过滤，写在charset.dict.yaml的就是可以通过的字表，默认为8105+𰻞𰻞，如果你想什么字在小字集模式可以通过可以写在这里，配套开关【小字集、大字集】，快捷键Ctrl+g&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自定义词库：&lt;/strong&gt; 自定义词库首先要利用&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;LMDG&lt;/a&gt;中的脚本将你自己的词库刷成与万象同类型的声调、或者声调+辅助码的形态，因为主词库要参与转写。对于custom_phrase则需要手动编辑编码为实际输入的编码&lt;/p&gt; 
&lt;img alt=&quot;pay&quot; src=&quot;./custom/万象输入方案.png&quot; /&gt; 
&lt;h2&gt;鸣谢&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;感谢网友的热情提报问题，使得模型和词库体验进一步提升。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;赞赏&lt;/h2&gt; 
&lt;p&gt;如果觉得项目好用，可以请AMZ喝咖啡&lt;/p&gt; 
&lt;img alt=&quot;pay&quot; src=&quot;./custom/赞赏.jpg&quot; height=&quot;312&quot; width=&quot;446&quot; /&gt;</description>
    </item>
    
    <item>
      <title>typecraft-dev/dotfiles</title>
      <link>https://github.com/typecraft-dev/dotfiles</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>zbirenbaum/copilot.lua</title>
      <link>https://github.com/zbirenbaum/copilot.lua</link>
      <description>&lt;p&gt;Fully featured &amp; enhanced replacement for copilot.vim complete with API for interacting with Github Copilot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;copilot.lua&lt;/h1&gt; 
&lt;p&gt;This plugin is the pure lua replacement for &lt;a href=&quot;https://github.com/github/copilot.vim&quot;&gt;github/copilot.vim&lt;/a&gt;. A huge thank you to @tris203 for the code behind the nes functionality (&lt;a href=&quot;https://github.com/copilotlsp-nvim/copilot-lsp&quot;&gt;copilot-lsp&lt;/a&gt;).&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Motivation behind `copilot.lua`&lt;/summary&gt; 
 &lt;p&gt;While using &lt;code&gt;copilot.vim&lt;/code&gt;, for the first time since I started using neovim my laptop began to overheat. Additionally, I found the large chunks of ghost text moving around my code, and interfering with my existing cmp ghost text disturbing. As lua is far more efficient and makes things easier to integrate with modern plugins, this repository was created.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Table Of Contents&lt;/h2&gt; 
&lt;!--toc:start--&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#install&quot;&gt;Install&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#authentication&quot;&gt;Authentication&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#authentication-with-alternate-github-instances&quot;&gt;Authentication with Alternate GitHub Instances&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#setup-and-configuration&quot;&gt;Setup and Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#panel&quot;&gt;panel&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#suggestion&quot;&gt;suggestion&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#filetypes&quot;&gt;filetypes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#logger&quot;&gt;logger&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#copilot_node_command&quot;&gt;copilot_node_command&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#server_opts_overrides&quot;&gt;server_opts_overrides&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#workspace_folders&quot;&gt;workspace_folders&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#root_dir&quot;&gt;root_dir&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#should_attach&quot;&gt;should_attach&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#server&quot;&gt;server&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#commands&quot;&gt;Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#integrations&quot;&gt;Integrations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!--toc:end--&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Curl&lt;/li&gt; 
 &lt;li&gt;NeoVim 0.11.0 or higher&lt;/li&gt; 
 &lt;li&gt;NodeJS v22 or higher if using the default nodejs LSP version&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your preferred plugin manager. For example, with &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use { &quot;zbirenbaum/copilot.lua&quot; 
  requires = {
    &quot;copilotlsp-nvim/copilot-lsp&quot;, -- (optional) for NES functionality
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authentication&lt;/h3&gt; 
&lt;p&gt;You can authenticate using one of the following methods:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Permanent sign-in (Recommended)&lt;/summary&gt; 
 &lt;p&gt;Once copilot is running, run &lt;code&gt;:Copilot auth&lt;/code&gt; to start the authentication process.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Token (not officially supported)&lt;/summary&gt; 
 &lt;p&gt;Tokens given by &lt;code&gt;gh auth token&lt;/code&gt; do not support Copilot, you therefore need to first generate a token through the LSP by:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Authenticating using the &lt;code&gt;Permanent sign-in&lt;/code&gt; method&lt;/li&gt; 
  &lt;li&gt;Grab the token by running &lt;code&gt;:Copilot auth info&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;You can then safely delete the &lt;code&gt;github-copilot&lt;/code&gt; folder created in your NeoVim base data directory.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Set either the environment variable &lt;code&gt;GITHUB_COPILOT_TOKEN&lt;/code&gt; or &lt;code&gt;GH_COPILOT_TOKEN&lt;/code&gt; to that token. Note that if you have the variable set, even empty, the LSP will attempt to use it to log in.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Authentication with Alternate GitHub Instances&lt;/h4&gt; 
&lt;p&gt;If your access to Copilot is not provided by the public GitHub instance, you can set your authentication provider to a custom URL with the corresponding config key e.g. &lt;code&gt;auth_provider_url = &quot;https://mycorp.ghe.com/&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Setup and Configuration&lt;/h2&gt; 
&lt;p&gt;You have to run the &lt;code&gt;require(&quot;copilot&quot;).setup(options)&lt;/code&gt; function in order to start Copilot. If no options are provided, the defaults are used.&lt;/p&gt; 
&lt;p&gt;Because the copilot server takes some time to start up, it is recommended that you lazy load copilot. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &quot;zbirenbaum/copilot.lua&quot;,
  requires = {
    &quot;copilotlsp-nvim/copilot-lsp&quot;, -- (optional) for NES functionality
  },
  cmd = &quot;Copilot&quot;,
  event = &quot;InsertEnter&quot;,
  config = function()
    require(&quot;copilot&quot;).setup({})
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;copilot&#39;).setup({
  panel = {
    enabled = true,
    auto_refresh = false,
    keymap = {
      jump_prev = &quot;[[&quot;,
      jump_next = &quot;]]&quot;,
      accept = &quot;&amp;lt;CR&amp;gt;&quot;,
      refresh = &quot;gr&quot;,
      open = &quot;&amp;lt;M-CR&amp;gt;&quot;
    },
    layout = {
      position = &quot;bottom&quot;, -- | top | left | right | bottom |
      ratio = 0.4
    },
  },
  suggestion = {
    enabled = true,
    auto_trigger = false,
    hide_during_completion = true,
    debounce = 75,
    trigger_on_accept = true,
    keymap = {
      accept = &quot;&amp;lt;M-l&amp;gt;&quot;,
      accept_word = false,
      accept_line = false,
      next = &quot;&amp;lt;M-]&amp;gt;&quot;,
      prev = &quot;&amp;lt;M-[&amp;gt;&quot;,
      dismiss = &quot;&amp;lt;C-]&amp;gt;&quot;,
    },
  },
  nes = {
    enabled = false, -- requires copilot-lsp as a dependency
    auto_trigger = false,
    keymap = {
      accept_and_goto = false,
      accept = false,
      dismiss = false,
    },
  },
  auth_provider_url = nil, -- URL to authentication provider, if not &quot;https://github.com/&quot;
  logger = {
    file = vim.fn.stdpath(&quot;log&quot;) .. &quot;/copilot-lua.log&quot;,
    file_log_level = vim.log.levels.OFF,
    print_log_level = vim.log.levels.WARN,
    trace_lsp = &quot;off&quot;, -- &quot;off&quot; | &quot;messages&quot; | &quot;verbose&quot;
    trace_lsp_progress = false,
    log_lsp_messages = false,
  },
  copilot_node_command = &#39;node&#39;, -- Node.js version must be &amp;gt; 20
  workspace_folders = {},
  copilot_model = &quot;&quot;,
  disable_limit_reached_message = false,  -- Set to `true` to suppress completion limit reached popup
  root_dir = function()
    return vim.fs.dirname(vim.fs.find(&quot;.git&quot;, { upward = true })[1])
  end,
  should_attach = function(_, _)
    if not vim.bo.buflisted then
      logger.debug(&quot;not attaching, buffer is not &#39;buflisted&#39;&quot;)
      return false
    end

    if vim.bo.buftype ~= &quot;&quot; then
      logger.debug(&quot;not attaching, buffer &#39;buftype&#39; is &quot; .. vim.bo.buftype)
      return false
    end

    return true
  end,
  server = {
    type = &quot;nodejs&quot;, -- &quot;nodejs&quot; | &quot;binary&quot;
    custom_server_filepath = nil,
  },
  server_opts_overrides = {},
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;panel&lt;/h3&gt; 
&lt;p&gt;Panel can be used to preview suggestions in a split window. You can run the &lt;code&gt;:Copilot panel&lt;/code&gt; command to open it.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;auto_refresh&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the suggestions are refreshed as you type in the buffer.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;copilot.panel&lt;/code&gt; module exposes the following functions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;copilot.panel&quot;).accept()
require(&quot;copilot.panel&quot;).jump_next()
require(&quot;copilot.panel&quot;).jump_prev()
require(&quot;copilot.panel&quot;).open({position, ratio})
require(&quot;copilot.panel&quot;).close()
require(&quot;copilot.panel&quot;).toggle()
require(&quot;copilot.panel&quot;).refresh()
require(&quot;copilot.panel&quot;).is_open()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These can also be accessed through the &lt;code&gt;:Copilot panel &amp;lt;function&amp;gt;&lt;/code&gt; command (eg. &lt;code&gt;:Copilot panel accept&lt;/code&gt;).&lt;/p&gt; 
&lt;h3&gt;suggestion&lt;/h3&gt; 
&lt;p&gt;When &lt;code&gt;auto_trigger&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, copilot starts suggesting as soon as you enter insert mode. When &lt;code&gt;auto_trigger&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, use the &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;prev&lt;/code&gt; or &lt;code&gt;accept&lt;/code&gt; keymap to trigger copilot suggestion. When &lt;code&gt;trigger_on_accept&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the keypress will be passed to the buffer as-is, instead of triggering completion.&lt;/p&gt; 
&lt;p&gt;To toggle auto trigger for the current buffer, use &lt;code&gt;require(&quot;copilot.suggestion&quot;).toggle_auto_trigger()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Copilot suggestion is automatically hidden when &lt;code&gt;popupmenu-completion&lt;/code&gt; is open. In case you use a custom menu for completion, you can set the &lt;code&gt;copilot_suggestion_hidden&lt;/code&gt; buffer variable to &lt;code&gt;true&lt;/code&gt; to have the same behavior.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example using nvim-cmp&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;cmp.event:on(&quot;menu_opened&quot;, function()
  vim.b.copilot_suggestion_hidden = true
end)

cmp.event:on(&quot;menu_closed&quot;, function()
  vim.b.copilot_suggestion_hidden = false
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example using blink.cmp&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;User&quot;, {
  pattern = &quot;BlinkCmpMenuOpen&quot;,
  callback = function()
    vim.b.copilot_suggestion_hidden = true
  end,
})

vim.api.nvim_create_autocmd(&quot;User&quot;, {
  pattern = &quot;BlinkCmpMenuClose&quot;,
  callback = function()
    vim.b.copilot_suggestion_hidden = false
  end,
})

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;The &lt;code&gt;copilot.suggestion&lt;/code&gt; module exposes the following functions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;copilot.suggestion&quot;).is_visible()
require(&quot;copilot.suggestion&quot;).accept(modifier)
require(&quot;copilot.suggestion&quot;).accept_word()
require(&quot;copilot.suggestion&quot;).accept_line()
require(&quot;copilot.suggestion&quot;).next()
require(&quot;copilot.suggestion&quot;).prev()
require(&quot;copilot.suggestion&quot;).clear_preview()
require(&quot;copilot.suggestion&quot;).update_preview()
require(&quot;copilot.suggestion&quot;).dismiss()
require(&quot;copilot.suggestion&quot;).toggle_auto_trigger()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These can also be accessed through the &lt;code&gt;:Copilot suggestion &amp;lt;function&amp;gt;&lt;/code&gt; command (eg. &lt;code&gt;:Copilot suggestion accept&lt;/code&gt;).&lt;/p&gt; 
&lt;h3&gt;nes (next edit suggestion)&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] This feature is still experimental and may not work as expected in all scenarios, please report any issues you encounter.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;When &lt;code&gt;enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, copilot will provide suggestions based on the next edit you are likely to make, through &lt;a href=&quot;https://github.com/copilotlsp-nvim/copilot-lsp&quot;&gt;copilot-lsp&lt;/a&gt;. If there is no suggestion, the keymaps will pass through the original keymap.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;copilot-lsp&lt;/code&gt; has a few configurations built-in as well, for additional configurations, please refer to the &lt;a href=&quot;https://github.com/copilotlsp-nvim/copilot-lsp/raw/main/README.md&quot;&gt;copilot-lsp documentation&lt;/a&gt;. These configurations should be set in the &lt;code&gt;init&lt;/code&gt; function of the &lt;code&gt;copilot-lsp&lt;/code&gt; dependency.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &quot;zbirenbaum/copilot.lua&quot;,
  requires = {
    &quot;copilotlsp-nvim/copilot-lsp&quot;,
    init = function()
      vim.g.copilot_nes_debounce = 500
    end,
  },
  cmd = &quot;Copilot&quot;,
  event = &quot;InsertEnter&quot;,
  config = function()
    require(&quot;copilot&quot;).setup({
      nes = {
        enabled = true,
        keymap = {
          accept_and_goto = &quot;&amp;lt;leader&amp;gt;p&quot;,
          accept = false,
          dismiss = &quot;&amp;lt;Esc&amp;gt;&quot;,
        },
      },
    })
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;filetypes&lt;/h3&gt; 
&lt;p&gt;Specify filetypes for attaching copilot.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;copilot&quot;).setup {
  filetypes = {
    markdown = true, -- overrides default
    terraform = false, -- disallow specific filetype
    sh = function ()
      if string.match(vim.fs.basename(vim.api.nvim_buf_get_name(0)), &#39;^%.env.*&#39;) then
        -- disable for .env files
        return false
      end
      return true
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you add &lt;code&gt;&quot;*&quot;&lt;/code&gt; as a filetype, the default configuration for &lt;code&gt;filetypes&lt;/code&gt; won&#39;t be used anymore. e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;copilot&quot;).setup {
  filetypes = {
    javascript = true, -- allow specific filetype
    typescript = true, -- allow specific filetype
    [&quot;*&quot;] = false, -- disable for all other filetypes and ignore default `filetypes`
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;logger&lt;/h3&gt; 
&lt;p&gt;Logs will be written to the &lt;code&gt;file&lt;/code&gt; for anything of &lt;code&gt;file_log_level&lt;/code&gt; or higher. Logs will be printed to NeoVim (using &lt;code&gt;notify&lt;/code&gt;) for anything of &lt;code&gt;print_log_level&lt;/code&gt; or higher. To turn either off, simply set its level to &lt;code&gt;vim.log.levels.OFF&lt;/code&gt;. File logging is done asynchronously to minimize performance impacts, however there is still some overhead.&lt;/p&gt; 
&lt;p&gt;Log levels used are the ones defined in &lt;code&gt;vim.log&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.log = {
  levels = {
    TRACE = 0,
    DEBUG = 1,
    INFO = 2,
    WARN = 3,
    ERROR = 4,
    OFF = 5,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;trace_lsp&lt;/code&gt; controls logging of LSP trace messages (&lt;code&gt;$/logTrace&lt;/code&gt;) can either be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;off&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;messages&lt;/code&gt; which will output the LSP messages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;verbose&lt;/code&gt; which adds additional information to the message.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When &lt;code&gt;trace_lsp_progress&lt;/code&gt; is true, LSP progress messages (&lt;code&gt;$/progress&lt;/code&gt;) will also be logged. When &lt;code&gt;log_lsp_messages&lt;/code&gt; is true, LSP log messages (&lt;code&gt;window/logMessage&lt;/code&gt;) events will be logged.&lt;/p&gt; 
&lt;p&gt;Careful turning on all logging features as the log files may get very large over time, and are not pruned by the application.&lt;/p&gt; 
&lt;h3&gt;copilot_node_command&lt;/h3&gt; 
&lt;p&gt;Use this field to provide the path to a specific node version such as one installed by nvm. Node.js version must be 20 or newer.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;copilot_node_command = vim.fn.expand(&quot;$HOME&quot;) .. &quot;/.config/nvm/versions/node/v20.0.1/bin/node&quot;, -- Node.js version must be &amp;gt; 20
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;server_opts_overrides&lt;/h3&gt; 
&lt;p&gt;Override copilot lsp client settings. The &lt;code&gt;settings&lt;/code&gt; field is where you can set the values of the options defined in &lt;a href=&quot;https://raw.githubusercontent.com/zbirenbaum/copilot.lua/master/SettingsOpts.md&quot;&gt;SettingsOpts.md&lt;/a&gt;. These options are specific to the copilot lsp and can be used to customize its behavior. Ensure that the name field is not overridden as is is used for efficiency reasons in numerous checks to verify copilot is actually running. See &lt;code&gt;:h vim.lsp.start&lt;/code&gt; for list of options.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;copilot&quot;).setup {
  server_opts_overrides = {
    trace = &quot;verbose&quot;,
    settings = {
      advanced = {
        listCount = 10, -- #completions for panel
        inlineSuggestCount = 3, -- #completions for getCompletions
      }
    },
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;workspace_folders&lt;/h3&gt; 
&lt;p&gt;Workspace folders improve Copilot&#39;s suggestions. By default, the root_dir is used as a workspace_folder.&lt;/p&gt; 
&lt;p&gt;Additional folders can be added through the configuration as such:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;workspace_folders = {
  &quot;/home/user/gits&quot;,
  &quot;/home/user/projects&quot;,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;They can also be added runtime, using the command &lt;code&gt;:Copilot workspace add [folderpath]&lt;/code&gt; where &lt;code&gt;[folderpath]&lt;/code&gt; is the workspace folder.&lt;/p&gt; 
&lt;h3&gt;root_dir&lt;/h3&gt; 
&lt;p&gt;This allows changing the function that gets the root folder, the default looks for a parent folder that contains the folder &lt;code&gt;.git&lt;/code&gt;. If none is found, it will use the current working directory.&lt;/p&gt; 
&lt;h3&gt;should_attach&lt;/h3&gt; 
&lt;p&gt;This function is called to determine if copilot should attach to the buffer or not. It is useful if you would like to go beyond the filetypes and have more control over when copilot should attach. You can also use it to attach to buflisted buffers by simply omitting that portion from the function. Since this happens before attaching to the buffer, it is good to prevent Copilot from reading sensitive files.&lt;/p&gt; 
&lt;p&gt;An example of this would be:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;copilot&quot;).setup {
  should_attach = function(_, bufname)
    if string.match(bufname, &quot;env&quot;) then
      return false
    end

    return true
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;server&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] &lt;code&gt;&quot;binary&quot;&lt;/code&gt; mode is still very much experimental, please report any issues you encounter.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; can be either &lt;code&gt;&quot;nodejs&quot;&lt;/code&gt; or &lt;code&gt;&quot;binary&quot;&lt;/code&gt;. The binary version will be downloaded if used.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;custom_server_filepath&lt;/code&gt; is used to specify the server path (filename included) of either the &lt;code&gt;js&lt;/code&gt; file if using &lt;code&gt;&quot;nodejs&quot;&lt;/code&gt; or to the binary if using &lt;code&gt;&quot;binary&quot;&lt;/code&gt;. The filename on its own can also be set if accessible through your PATH. When using &lt;code&gt;&quot;binary&quot;&lt;/code&gt;, the download process will be disabled and the binary will be used directly. example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;copilot&quot;).setup {
  server = {
    type = &quot;nodejs&quot;,
    custom_server_filepath = &quot;/home/user/copilot-lsp/language-server.js&quot;,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;copilot.lua&lt;/code&gt; defines the &lt;code&gt;:Copilot&lt;/code&gt; command that can perform various actions. It has completion support, so try it out.&lt;/p&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;copilot.api&lt;/code&gt; module can be used to build integrations on top of &lt;code&gt;copilot.lua&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zbirenbaum/copilot-cmp&quot;&gt;zbirenbaum/copilot-cmp&lt;/a&gt;: Integration with &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/giuxtaposition/blink-cmp-copilot&quot;&gt;giuxtaposition/blink-cmp-copilot&lt;/a&gt;: Integration with &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;&lt;code&gt;blink.cmp&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fang2hou/blink-copilot&quot;&gt;fang2hou/blink-copilot&lt;/a&gt;: Integration with &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;&lt;code&gt;blink.cmp&lt;/code&gt;&lt;/a&gt;, with some differences.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AndreM222/copilot-lualine&quot;&gt;AndreM222/copilot-lualine&lt;/a&gt;: Integration with &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;&lt;code&gt;lualine.nvim&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Certificate Parsing Error&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This is an issue with the copilot lsp itself as described in &lt;a href=&quot;https://github.com/orgs/community/discussions/136273#discussioncomment-10433527&quot;&gt;this discussion&lt;/a&gt;. Please update the plugin to the latest version to solve this issue. If updating does not help, some users have reported that updating the &lt;code&gt;/usr/bin/update-ca-trust&lt;/code&gt; and removing the --comment option from the trust extract commands solves the issue. However this has not been verified by the author of this plugin and may have unintended consequences so thread with care.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Multiple offset encodings warning&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;As discussed in #247, the problem arises because two or more clients are using different offset encodings. To solve this, in lspconfig:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local capabilities = vim.lsp.protocol.make_client_capabilities() -- Get The capabilities
capabilities.general.positionEncodings = { &quot;utf-16&quot; } -- Set the offset encoding, see `:h vim.lsp.start` for more info
require(&quot;lspconfig&quot;)[server].setup({ capabilities = capabilities }) -- Setup the server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Set the same for copilot in &lt;code&gt;server_opts_overrides&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;server_opts_overrides = {
  offset_encoding = &quot;utf-16&quot; -- Set the offset encoding same as above, see `:h vim.lsp.start` for more info
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to your plugins documentation for changes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/LazyVim</title>
      <link>https://github.com/LazyVim/LazyVim</link>
      <description>&lt;p&gt;Neovim config for the lazy&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/292349/213446185-2db63fd5-8c84-459c-9f04-e286382d6e80.png&quot; /&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h4 align=&quot;center&quot;&gt; &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;Install&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io/configuration&quot;&gt;Configure&lt;/a&gt; · &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;Docs&lt;/a&gt; &lt;/h4&gt; 
&lt;div align=&quot;center&quot;&gt;
 &lt;p&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/releases/latest&quot;&gt; &lt;img alt=&quot;Latest release&quot; src=&quot;https://img.shields.io/github/v/release/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&amp;amp;include_prerelease&amp;amp;sort=semver&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/pulse&quot;&gt; &lt;img alt=&quot;Last commit&quot; src=&quot;https://img.shields.io/github/last-commit/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/raw/main/LICENSE&quot;&gt; &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=ee999f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/stargazers&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c69ff5&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim/issues&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/LazyVim/LazyVim?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt; &lt;img alt=&quot;Repo Size&quot; src=&quot;https://img.shields.io/github/repo-size/LazyVim/LazyVim?color=%23DDB6F2&amp;amp;label=SIZE&amp;amp;logo=codesandbox&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=folke&quot;&gt; &lt;img alt=&quot;follow on Twitter&quot; src=&quot;https://img.shields.io/twitter/follow/folke?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=8aadf3&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;p&gt;LazyVim is a Neovim setup powered by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;💤 lazy.nvim&lt;/a&gt; to make it easy to customize and extend your config. Rather than having to choose between starting from scratch or using a pre-made distro, LazyVim offers the best of both worlds - the flexibility to tweak your config as needed, along with the convenience of a pre-configured setup.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/211285846-0b7bb3bf-0462-4029-b64c-4ee1d037fc1c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/292349/213447056-92290767-ea16-430c-8727-ce994c93e9cc.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔥 Transform your Neovim into a full-fledged IDE&lt;/li&gt; 
 &lt;li&gt;💤 Easily customize and extend your config with &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🚀 Blazingly fast&lt;/li&gt; 
 &lt;li&gt;🧹 Sane default settings for options, autocmds, and keymaps&lt;/li&gt; 
 &lt;li&gt;📦 Comes with a wealth of plugins pre-configured and ready to use&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.11.2&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;a &lt;strong&gt;C&lt;/strong&gt; compiler for &lt;code&gt;nvim-treesitter&lt;/code&gt;. See &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter#requirements&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a starter template for &lt;strong&gt;LazyVim&lt;/strong&gt; &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Try it with Docker&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -w /root -it --rm alpine:edge sh -uelic &#39;
  apk add git lazygit fzf curl neovim ripgrep alpine-sdk --update
  git clone https://github.com/LazyVim/starter ~/.config/nvim
  cd ~/.config/nvim
  nvim
&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Install the &lt;a href=&quot;https://github.com/LazyVim/starter&quot;&gt;LazyVim Starter&lt;/a&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Make a backup of your current Neovim files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.local/share/nvim ~/.local/share/nvim.bak
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Clone the starter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/LazyVim/starter ~/.config/nvim
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Remove the &lt;code&gt;.git&lt;/code&gt; folder, so you can add it to your own repo later&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rm -rf ~/.config/nvim/.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Start Neovim!&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the comments in the files on how to customize &lt;strong&gt;LazyVim&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;p&gt;There&#39;s a great video created by &lt;a href=&quot;https://github.com/elijahmanor&quot;&gt;@elijahmanor&lt;/a&gt; with a walkthrough to get started.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=N93cTbtLCIM&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/N93cTbtLCIM/hqdefault.jpg&quot; alt=&quot;Watch the video&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/dusty-phillips&quot;&gt;@dusty-phillips&lt;/a&gt; wrote a comprehensive book called &lt;a href=&quot;https://lazyvim-ambitious-devs.phillips.codes&quot;&gt;LazyVim for Ambitious Developers&lt;/a&gt; available for free online.&lt;/p&gt; 
&lt;h2&gt;📂 File Structure&lt;/h2&gt; 
&lt;p&gt;The files under config will be automatically loaded at the appropriate time, so you don&#39;t need to require those files manually. &lt;strong&gt;LazyVim&lt;/strong&gt; comes with a set of default config files that will be loaded &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; your own. See &lt;a href=&quot;https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/config&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can add your custom plugin specs under &lt;code&gt;lua/plugins/&lt;/code&gt;. All files there will be automatically loaded by &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;
~/.config/nvim
├── lua
│&amp;nbsp;&amp;nbsp; ├── config
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── autocmds.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymaps.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── lazy.lua
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── options.lua
│&amp;nbsp;&amp;nbsp; └── plugins
│&amp;nbsp;&amp;nbsp;     ├── spec1.lua
│&amp;nbsp;&amp;nbsp;     ├── **
│&amp;nbsp;&amp;nbsp;     └── spec2.lua
└── init.lua
&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://lazyvim.github.io&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>opentibiabr/canary</title>
      <link>https://github.com/opentibiabr/canary</link>
      <description>&lt;p&gt;Canary Server 14.x for OpenTibia community.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTibiaBR - Canary&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/gvTj5sh9Mp&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/528117503952551936.svg?style=flat-square&amp;amp;logo=discord&quot; alt=&quot;Discord Channel&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-ubuntu.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-ubuntu.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Ubuntu&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-cmake.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-cmake.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Windows - CMake&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-solution.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-solution.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Windows - Solution&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-docker.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-docker.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Docker&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://sonarcloud.io/dashboard?id=opentibiabr_canary&quot;&gt;&lt;img src=&quot;https://sonarcloud.io/api/project_badges/measure?project=opentibiabr_canary&amp;amp;metric=alert_status&quot; alt=&quot;Quality Gate Status&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/repo-size/opentibiabr/canary&quot; alt=&quot;GitHub repo size&quot; /&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/opentibiabr/canary&quot; alt=&quot;GitHub&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenTibiaBR - Canary is a free and open-source MMORPG server emulator written in C++. It is a fork of the &lt;a href=&quot;https://github.com/opentibiabr/otservbr-global&quot;&gt;OTServBR-Global&lt;/a&gt; project. To connect to the server and to take a stable experience, you can use &lt;a href=&quot;https://github.com/mehah/otclient&quot;&gt;mehah&#39;s otclient&lt;/a&gt; or &lt;a href=&quot;https://github.com/dudantas/tibia-client/releases/latest&quot;&gt;tibia client&lt;/a&gt; and if you want to edit something, check our &lt;a href=&quot;https://docs.opentibiabr.com/opentibiabr/downloads/tools&quot;&gt;customized tools&lt;/a&gt;. If you want to edit the map, use our own &lt;a href=&quot;https://github.com/opentibiabr/remeres-map-editor/&quot;&gt;remere&#39;s map editor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.opentibiabr.com/opentibiabr/projects/canary&quot;&gt;Gitbook&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/wiki&quot;&gt;Wiki&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Running Tests&lt;/h2&gt; 
&lt;p&gt;Tests can be run directly from the repository root using CMake test presets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Configure and build tests for your platform
cmake --preset linux-debug &amp;amp;&amp;amp; cmake --build --preset linux-debug

# Run all tests
ctest --preset linux-debug

# For other platforms use:
# ctest --preset macos-debug
# ctest --preset windows-debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For detailed testing information including adding tests and framework usage, see &lt;a href=&quot;https://raw.githubusercontent.com/opentibiabr/canary/main/tests/README.md&quot;&gt;tests/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you need help, please visit our &lt;a href=&quot;https://discord.gg/gvTj5sh9Mp&quot;&gt;discord&lt;/a&gt;. Our issue tracker is not a support forum, and using it as one will result in your issue being closed.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Here are some ways you can contribute:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/issues/new/choose&quot;&gt;Issue Tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/pulls&quot;&gt;Pull Request&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You are subject to our code of conduct, read at &lt;a href=&quot;https://github.com/opentibiabr/canary/raw/main/CODE_OF_CONDUCT.md&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Our contributors (&lt;a href=&quot;https://github.com/opentibiabr/canary/graphs/contributors&quot;&gt;Canary&lt;/a&gt; | &lt;a href=&quot;https://github.com/opentibiabr/otservbr-global/graphs/contributors&quot;&gt;OTServBR-Global&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;See our &lt;a href=&quot;https://docs.opentibiabr.com/home/donate&quot;&gt;donate page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Project supported by JetBrains&lt;/h2&gt; 
&lt;p&gt;We extend our heartfelt gratitude to Jetbrains for generously granting us licenses to collaborate on this and various other open-source initiatives.&lt;/p&gt; 
&lt;a href=&quot;https://jb.gg/OpenSourceSupport/?from=https://github.com/opentibiabr/canary/&quot;&gt; &lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot; width=&quot;150&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://forums.otserv.com.br&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/otbr/otserv-brasil/main/otbr.png&quot; alt=&quot;Supported by OTServ Brasil&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>catppuccin/nvim</title>
      <link>https://github.com/catppuccin/nvim</link>
      <description>&lt;p&gt;🍨 Soothing pastel theme for (Neo)vim&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&quot; width=&quot;100&quot; alt=&quot;Logo&quot; /&gt;&lt;br /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot; /&gt; Catppuccin for &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;(Neo)&lt;/a&gt;&lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot; /&gt; &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=b7bdf8&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=f5a97f&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=a6da95&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213472445-091e54fb-091f-4448-a631-fa6b2ba7d8a5.png&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; This port of &lt;a href=&quot;https://github.com/catppuccin/&quot;&gt;Catppuccin&lt;/a&gt; is special because it was the first one and the one that originated the project itself. Given this, it&#39;s important to acknowledge that it all didn&#39;t come to be what it is now out of nowhere. So, if you are interested in knowing more about the initial stages of the theme, you can find it under the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/v0.1&quot;&gt;v0.1&lt;/a&gt; tag. &lt;/p&gt; 
&lt;h2&gt;Previews&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;🌻 Latte&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473391-603bdc68-68f4-4877-a15a-b469040928b5.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🪴 Frappé&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473368-16931b70-fd84-4a89-a698-1b1bca1f82de.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🌺 Macchiato&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473285-7bd858be-6947-4d9e-8c01-2573cbc7e76c.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🌿 Mocha&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213471997-34837219-88cc-4db2-baca-e25813a89789.png&quot; /&gt; 
&lt;/details&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports both Vim and Neovim (requires &lt;a href=&quot;https://github.com/neovim/neovim/&quot;&gt;neovim&lt;/a&gt; &amp;gt;= 0.8 or &lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &amp;gt;= 9 compiled with &lt;a href=&quot;https://github.com/lua/lua&quot;&gt;lua&lt;/a&gt; &amp;gt;= 5.1)&lt;/li&gt; 
 &lt;li&gt;Highly configurable with 4 different flavours and &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;the ability to create your own!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/catppuccin/nvim#Compile&quot;&gt;Compiled&lt;/a&gt; configuration for &lt;a href=&quot;https://www.reddit.com/r/neovim/comments/xxfpt3/catppuccinnvim_now_startup_in_1ms/&quot;&gt;fast startup time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Integrations with lsp, treesitter and &lt;a href=&quot;https://github.com/catppuccin/nvim#integrations&quot;&gt;a bunch of plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://github.com/catppuccin/catppuccin&quot;&gt;many other applications&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{ &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot;, priority = 1000 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-deps.md&quot;&gt;mini.deps&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add({ source = &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use { &quot;catppuccin/nvim&quot;, as = &quot;catppuccin&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;catppuccin/nvim&#39;, { &#39;as&#39;: &#39;catppuccin&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;colorscheme catppuccin &quot; catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;There is no need to call &lt;code&gt;setup&lt;/code&gt; if you don&#39;t want to change the default options and settings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    flavour = &quot;auto&quot;, -- latte, frappe, macchiato, mocha
    background = { -- :h background
        light = &quot;latte&quot;,
        dark = &quot;mocha&quot;,
    },
    transparent_background = false, -- disables setting the background color.
    float = {
        transparent = false, -- enable transparent floating windows
        solid = false, -- use solid styling for floating windows, see |winborder|
    },
    show_end_of_buffer = false, -- shows the &#39;~&#39; characters after the end of buffers
    term_colors = false, -- sets terminal colors (e.g. `g:terminal_color_0`)
    dim_inactive = {
        enabled = false, -- dims the background color of inactive window
        shade = &quot;dark&quot;,
        percentage = 0.15, -- percentage of the shade to apply to the inactive window
    },
    no_italic = false, -- Force no italic
    no_bold = false, -- Force no bold
    no_underline = false, -- Force no underline
    styles = { -- Handles the styles of general hi groups (see `:h highlight-args`):
        comments = { &quot;italic&quot; }, -- Change the style of comments
        conditionals = { &quot;italic&quot; },
        loops = {},
        functions = {},
        keywords = {},
        strings = {},
        variables = {},
        numbers = {},
        booleans = {},
        properties = {},
        types = {},
        operators = {},
        -- miscs = {}, -- Uncomment to turn off hard-coded styles
    },
    color_overrides = {},
    custom_highlights = {},
    default_integrations = true,
    auto_integrations = false,
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
        -- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim#integrations)
    },
})

-- setup must be called before loading
vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;h3&gt;Getting colors&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local latte = require(&quot;catppuccin.palettes&quot;).get_palette &quot;latte&quot;
local frappe = require(&quot;catppuccin.palettes&quot;).get_palette &quot;frappe&quot;
local macchiato = require(&quot;catppuccin.palettes&quot;).get_palette &quot;macchiato&quot;
local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns a table where the key is the name of the color and the value is the hex code.&lt;/p&gt; 
&lt;h3&gt;Overwriting colors&lt;/h3&gt; 
&lt;p&gt;Colors can be overwritten using &lt;code&gt;color_overrides&lt;/code&gt;, see &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;https://github.com/catppuccin/nvim/discussions/323&lt;/a&gt; for inspiration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    color_overrides = {
        all = {
            text = &quot;#ffffff&quot;,
        },
        latte = {
            base = &quot;#ff0000&quot;,
            mantle = &quot;#242424&quot;,
            crust = &quot;#474747&quot;,
        },
        frappe = {},
        macchiato = {},
        mocha = {},
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Overwriting highlight groups&lt;/h3&gt; 
&lt;p&gt;Global highlight groups can be overwritten, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    custom_highlights = function(colors)
        return {
            Comment = { fg = colors.flamingo },
            TabLineSel = { bg = colors.pink },
            CmpBorder = { fg = colors.surface2 },
            Pmenu = { bg = colors.none },
        }
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Highlight groups per flavour can also be overwritten, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    highlight_overrides = {
        all = function(colors)
            return {
                NvimTreeNormal = { fg = colors.none },
                CmpBorder = { fg = &quot;#3e4145&quot; },
            }
        end,
        latte = function(latte)
            return {
                Normal = { fg = latte.base },
            }
        end,
        frappe = function(frappe)
            return {
                [&quot;@comment&quot;] = { fg = frappe.surface2, style = { &quot;italic&quot; } },
            }
        end,
        macchiato = function(macchiato)
            return {
                LineNr = { fg = macchiato.overlay1 },
            }
        end,
        mocha = function(mocha)
            return {
                Comment = { fg = mocha.flamingo },
            }
        end,
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;Catppuccin provides theme support for other plugins in the Neovim ecosystem and extended Neovim functionality through &lt;em&gt;integrations&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;To enable/disable an integration you just need to set it to true/false, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some integrations are enabled by default, you can control this behaviour with &lt;code&gt;default_integrations&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    default_integrations = false,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you use &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; as your package manager, you can use the &lt;code&gt;auto_integrations&lt;/code&gt; option to let catppuccin automatically detect installed plugins and enable their respective integrations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    auto_integrations = true,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Below is a list of supported plugins and their corresponding integration module.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] If you&#39;d like to see the full list of highlight groups modified by Catppuccin, see the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/main/lua/catppuccin/groups/integrations&quot;&gt;&lt;code&gt;lua/catppuccin/groups/integrations/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;b&gt;Plugin&lt;/b&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;b&gt;Default&lt;/b&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;aerial.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;aerial = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt; 
  &lt;!-- alpha.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;alpha-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;alpha = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- alpha.nvim --&gt; 
  &lt;!-- barbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/romgrk/barbar.nvim&quot;&gt;barbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbar = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbar.nvim --&gt; 
  &lt;!-- barbecue.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/utilyre/barbecue.nvim&quot;&gt;barbecue.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbecue = {
    dim_dirname = true, -- directory name is dimmed by default
    bold_basename = true,
    dim_context = false,
    alt_background = false,
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;barbecue&quot;).setup {
  theme = &quot;catppuccin&quot;, -- catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbecue.nvim --&gt; 
  &lt;!-- beacon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/DanilaMihailov/beacon.nvim&quot;&gt;beacon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;beacon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- beacon.nvim --&gt; 
  &lt;!-- blink.cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;blink_cmp = {
    style = &#39;bordered&#39;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- blink.cmp --&gt; 
  &lt;!-- bufferline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;bufferline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your bufferline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!NOTE] bufferline needs to be loaded after setting up Catppuccin or it will highlight incorrectly&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use &quot;akinsho/bufferline.nvim&quot; {
  after = &quot;catppuccin&quot;,
  config = function()
    require(&quot;bufferline&quot;).setup {
      highlights = require(&quot;catppuccin.special.bufferline&quot;).get_theme()
    }
  end
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Configurations are self-explanatory, see &lt;code&gt;:h bufferline-highlights&lt;/code&gt; for detailed explanations:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
bufferline.setup {
    highlights = require(&quot;catppuccin.special.bufferline&quot;).get_theme {
        styles = { &quot;italic&quot;, &quot;bold&quot; },
        custom = {
            all = {
                fill = { bg = &quot;#000000&quot; },
            },
            mocha = {
                background = { fg = mocha.text },
            },
            latte = {
                background = { fg = &quot;#000000&quot; },
            },
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- bufferline.nvim --&gt; 
  &lt;!-- buffon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/francescarpi/buffon.nvim&quot;&gt;buffon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;buffon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- buffon.nvim --&gt; 
  &lt;!-- coc.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot;&gt;coc.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = true,
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Note] coc.nvim by default link to native lsp highlight groups so &lt;code&gt;lsp_styles&lt;/code&gt; options will also apply to coc&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;p&gt;In the nested tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_styles = {
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- coc.nvim --&gt; 
  &lt;!-- colorful-winsep.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-zh/colorful-winsep.nvim&quot;&gt;colorful-winsep.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;colorful_winsep = {
    enabled = false,
    color = &quot;red&quot;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- colorful_winsep.nvim --&gt; 
  &lt;!-- dashboard-nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/dashboard-nvim&quot;&gt;dashboard-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dashboard = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dashboard-nvim --&gt; 
  &lt;!-- diffview.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;diffview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- diffview.nvim --&gt; 
  &lt;!-- dropbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Bekaboo/dropbar.nvim&quot;&gt;dropbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dropbar = {
    enabled = false,
    color_mode = false, -- enable color for kind&#39;s texts, not just kind&#39;s icons
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dropbar.nvim --&gt; 
  &lt;!-- feline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/freddiehaddad/feline.nvim/&quot;&gt;feline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;  
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your Feline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local ctp_feline = require(&#39;catppuccin.special.feline&#39;)

ctp_feline.setup()

require(&quot;feline&quot;).setup({
    components = ctp_feline.get_statusline(),
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Notice that calling &lt;code&gt;setup()&lt;/code&gt; is optional. You may pass a lua table in order to change assets, settings and the colors per vim mode.&lt;/p&gt; 
     &lt;p&gt;Here are the defaults:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local clrs = require(&quot;catppuccin.palettes&quot;).get_palette()
local ctp_feline = require(&#39;catppuccin.special.feline&#39;)
local U = require &quot;catppuccin.utils.colors&quot;

ctp_feline.setup({
    assets = {
        left_separator = &quot;&quot;,
        right_separator = &quot;&quot;,
        mode_icon = &quot;&quot;,
        dir = &quot;󰉖&quot;,
        file = &quot;󰈙&quot;,
        lsp = {
            server = &quot;󰅡&quot;,
            error = &quot;&quot;,
            warning = &quot;&quot;,
            info = &quot;&quot;,
            hint = &quot;&quot;,
        },
        git = {
            branch = &quot;&quot;,
            added = &quot;&quot;,
            changed = &quot;&quot;,
            removed = &quot;&quot;,
        },
    },
    sett = {
        text = U.vary_color({ latte = latte.base }, clrs.surface0),
        bkg = U.vary_color({ latte = latte.crust }, clrs.surface0),
        diffs = clrs.mauve,
        extras = clrs.overlay1,
        curr_file = clrs.maroon,
        curr_dir = clrs.flamingo,
        show_modified = false, -- show if the file has been modified
        show_lazy_updates = false -- show the count of updatable plugins from lazy.nvim
                                  -- need to set checker.enabled = true in lazy.nvim first
                                  -- the icon is set in ui.icons.plugin in lazy.nvim
    },
    mode_colors = {
        [&quot;n&quot;] = { &quot;NORMAL&quot;, clrs.lavender },
        [&quot;no&quot;] = { &quot;N-PENDING&quot;, clrs.lavender },
        [&quot;i&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;ic&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;t&quot;] = { &quot;TERMINAL&quot;, clrs.green },
        [&quot;v&quot;] = { &quot;VISUAL&quot;, clrs.flamingo },
        [&quot;V&quot;] = { &quot;V-LINE&quot;, clrs.flamingo },
        [&quot;&quot;] = { &quot;V-BLOCK&quot;, clrs.flamingo },
        [&quot;R&quot;] = { &quot;REPLACE&quot;, clrs.maroon },
        [&quot;Rv&quot;] = { &quot;V-REPLACE&quot;, clrs.maroon },
        [&quot;s&quot;] = { &quot;SELECT&quot;, clrs.maroon },
        [&quot;S&quot;] = { &quot;S-LINE&quot;, clrs.maroon },
        [&quot;&quot;] = { &quot;S-BLOCK&quot;, clrs.maroon },
        [&quot;c&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;cv&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;ce&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;r&quot;] = { &quot;PROMPT&quot;, clrs.teal },
        [&quot;rm&quot;] = { &quot;MORE&quot;, clrs.teal },
        [&quot;r?&quot;] = { &quot;CONFIRM&quot;, clrs.mauve },
        [&quot;!&quot;] = { &quot;SHELL&quot;, clrs.green },
    },
    view = {
        lsp = {
            progress = true, -- if true the status bar will display an lsp progress indicator
            name = false, -- if true the status bar will display the lsp servers name, otherwise it will display the text &quot;Lsp&quot;
            exclude_lsp_names = {}, -- lsp server names that should not be displayed when name is set to true
            separator = &quot;|&quot;, -- the separator used when there are multiple lsp servers
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Warning] Currently feline &lt;a href=&quot;https://github.com/feline-nvim/feline.nvim/issues/302&quot;&gt;doesn&#39;t officially support custom themes&lt;/a&gt;. In order for &lt;code&gt;:colorscheme catppuccin-&amp;lt;flavour&amp;gt;&lt;/code&gt; to work you could add this autocmd as a workaround:&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;ColorScheme&quot;, {
    pattern = &quot;*&quot;,
    callback = function()
        package.loaded[&quot;feline&quot;] = nil
        package.loaded[&quot;catppuccin.special.feline&quot;] = nil
        require(&quot;feline&quot;).setup {
            components = require(&quot;catppuccin.special.feline&quot;).get_statusline(),
        }
    end,
})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- feline.nvim --&gt; 
  &lt;!-- fern.vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lambdalisue/fern.vim&quot;&gt;fern.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fern = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fern.vim --&gt; 
  &lt;!-- fidget.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/j-hui/fidget.nvim&quot;&gt;fidget.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fidget = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; Set `notification.window.winblend` to `0`: 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fidget&quot;).setup {
    notification = {
        window = {
            winblend = 0,
        },
    }
    -- ... the rest of your fidget config
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fidget.nvim --&gt; 
  &lt;!-- flash.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;flash.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;flash = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- flash.nvim --&gt; 
    &lt;!-- fzf-lua --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fzf-lua --&gt; 
  &lt;!-- gitgraph.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/isakbm/gitgraph.nvim&quot;&gt;gitgraph.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgraph = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- gitgraph.nvim --&gt; 
    &lt;!-- gitsigns.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;gitsigns.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = {
  enabled = true,
  -- align with the transparent_background option by default
  transparent = false,
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- gitsigns.nvim --&gt; 
    &lt;!-- grug-far.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim&quot;&gt;grug-far.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;grug_far = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- grug-far.nvim --&gt; 
    &lt;!-- harpoon --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;harpoon&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;harpoon = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- harpoon --&gt; 
    &lt;!-- headlines.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/headlines.nvim&quot;&gt;headlines.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;headlines = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- headlines.nvim --&gt; 
    &lt;!-- hop.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hop = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- hop.nvim --&gt; 
    &lt;!-- indent-blankline.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;indent-blankline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;indent_blankline = {
    enabled = true,
    scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
    colored_indent_levels = false,
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;&lt;code&gt;colored_indent_levels&lt;/code&gt; enables char highlights per indent level. Follow the instructions &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim#multiple-indent-colors&quot;&gt;here&lt;/a&gt; to set the latter up.&lt;/p&gt; 
    &lt;/details&gt; 
    &lt;!-- indent-blankline.nvim --&gt; 
    &lt;!-- leap.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;leap = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- leap.nvim --&gt; 
    &lt;!-- lightline.vim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;lightline.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lightline = {&#39;colorscheme&#39;: &#39;catppuccin&#39;}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lightline.vim --&gt; 
    &lt;!-- lightspeed.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/lightspeed.nvim&quot;&gt;lightspeed.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lightspeed = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lightspeed.nvim --&gt; 
    &lt;!-- lir.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/tamago324/lir.nvim&quot;&gt;lir.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lir = {
    enabled = false,
    git_status = false
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lir.nvim --&gt; 
    &lt;!-- lspsaga.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_saga = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;For custom Lsp Kind Icon and Color&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lspsaga&quot;).setup {
    ui = {
        kind = require(&quot;catppuccin.groups.integrations.lsp_saga&quot;).custom_kind(),
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;!-- lspsaga.nvim --&gt; 
  &lt;!-- lualine.nvim --&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).setup {
    options = {
        theme = &quot;catppuccin&quot;
        -- ... the rest of your lualine config
    }
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lualine.nvim --&gt; 
    &lt;!-- markview.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/OXY2DEV/markview.nvim&quot;&gt;markview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;markview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- markview.nvim --&gt; 
  &lt;!-- mason.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;mason.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mason = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mason.nvim --&gt; 
  &lt;!-- mini.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim&quot;&gt;mini.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mini = {
    enabled = true,
    indentscope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mini.nvim --&gt; 
  &lt;!-- neo-tree.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neo-tree.nvim --&gt; 
  &lt;!-- neogit --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/NeogitOrg/neogit&quot;&gt;neogit&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neogit = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neogit --&gt; 
  &lt;!-- neotest --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotest = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neotest --&gt; 
  &lt;!-- noice.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/noice.nvim&quot;&gt;noice.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;noice = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- noice.nvim --&gt; 
  &lt;!-- notifier.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vigoux/notifier.nvim&quot;&gt;notifier.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notifier = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- notifier.nvim --&gt; 
  &lt;!-- nvim-cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;cmp = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-cmp --&gt; 
  &lt;!-- nvim-copilot-vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/github/copilot.vim&quot;&gt;copilot.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;copilot_vim = false,
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-copilot-vim --&gt; 
  &lt;!-- nvim-dap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special &lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local sign = vim.fn.sign_define

sign(&quot;DapBreakpoint&quot;, { text = &quot;●&quot;, texthl = &quot;DapBreakpoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapBreakpointCondition&quot;, { text = &quot;●&quot;, texthl = &quot;DapBreakpointCondition&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapLogPoint&quot;, { text = &quot;◆&quot;, texthl = &quot;DapLogPoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap --&gt; 
  &lt;!-- nvim-dap-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap_ui = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap-ui --&gt; 
  &lt;!-- nvim-lspconfig --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_styles = {
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-lspconfig --&gt; 
  &lt;!-- navic --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/SmiteshP/nvim-navic&quot;&gt;navic&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;navic = {
    enabled = false,
    custom_bg = &quot;NONE&quot;, -- &quot;lualine&quot; will set background to mantle
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- You NEED to enable highlight in nvim-navic setting or it won&#39;t work
require(&quot;nvim-navic&quot;).setup {
    highlight = true
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- navic --&gt; 
  &lt;!-- nvim-notify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-notify --&gt; 
  &lt;!-- nvim-surround --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kylechui/nvim-surround&quot;&gt;nvim-surround&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvim_surround = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-surround --&gt; 
  &lt;!-- nvim-tree.lua --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kyazdani42/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvimtree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-tree.lua --&gt; 
  &lt;!-- nvim-treesitter-context --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;treesitter_context = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-treesitter-context --&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/nvim-ts-rainbow2&quot;&gt;nvim-ts-rainbow2&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow2 = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt; 
  &lt;!-- nvim-ts-rainbow --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/p00f/nvim-ts-rainbow&quot;&gt;nvim-ts-rainbow&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow --&gt; 
  &lt;!-- nvim-ufo --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kevinhwang91/nvim-ufo&quot;&gt;nvim-ufo&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ufo = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ufo --&gt; 
  &lt;!-- nvim-window-picker --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/s1n7ax/nvim-window-picker&quot;&gt;nvim-window-picker&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;window_picker = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- nvim-window-picker --&gt; 
    &lt;!-- octo.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;octo.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;octo = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- octo.nvim --&gt; 
  &lt;!-- overseer.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/overseer.nvim&quot;&gt;overseer.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;overseer = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- overseer.nvim --&gt; 
  &lt;!-- pounce.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rlane/pounce.nvim&quot;&gt;pounce.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;pounce = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- pounce.nvim --&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/rainbow-delimiters.nvim&quot;&gt;rainbow-delimiters.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;rainbow_delimiters = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt; 
  &lt;!-- reactive.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rasulomaroff/reactive.nvim&quot;&gt;reactive.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;There&#39;re 2 available presets (&lt;code&gt;cursor&lt;/code&gt; and &lt;code&gt;cursorline&lt;/code&gt;) for every flavour.&lt;/p&gt; 
     &lt;p&gt;Here is how you can use them.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;reactive&#39;).setup {
  load = { &#39;catppuccin-mocha-cursor&#39;, &#39;catppuccin-mocha-cursorline&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;To use another flavour just replace &lt;code&gt;mocha&lt;/code&gt; with the one you want to use.&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- reactive.nvim --&gt; 
  &lt;!-- render-markdown.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;render_markdown = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- render-markdown.nvim --&gt; 
  &lt;!-- snacks.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;snacks = {
    enabled = false,
    indent_scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- snacks.nvim --&gt; 
  &lt;!-- symbols-outline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/simrat39/symbols-outline.nvim&quot;&gt;symbols-outline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;blockquote&gt; 
     &lt;p&gt;[!NOTE] This plugin has been archived by the author, consider using &lt;a href=&quot;https://github.com/hedyhli/outline.nvim&quot;&gt;outline.nvim&lt;/a&gt;&lt;/p&gt; 
    &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;symbols_outline = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- symbols-outline.nvim --&gt; 
  &lt;!-- telekasten.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/renerocksai/telekasten.nvim&quot;&gt;telekasten.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telekasten = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telekasten.nvim --&gt; 
  &lt;!-- telescope.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telescope = {
    enabled = true,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telescope.nvim --&gt; 
  &lt;!-- trouble.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_trouble = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- trouble.nvim --&gt; 
  &lt;!-- vim-airline --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim-airline&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:airline_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-airline --&gt; 
  &lt;!-- vim-clap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/liuchengxu/vim-clap&quot;&gt;vim-clap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:clap_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-clap --&gt; 
  &lt;!-- vim-dadbod-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kristijanhusak/vim-dadbod-ui&quot;&gt;vim-dadbod-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dadbod_ui = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-dadbod-ui --&gt; 
  &lt;!-- vim-gitgutter --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgutter = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-gitgutter --&gt; 
  &lt;!-- vim-illuminate --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/RRethy/vim-illuminate&quot;&gt;vim-illuminate&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;illuminate = {
    enabled = true,
    lsp = false
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-illuminate --&gt; 
  &lt;!-- vim-sandwich --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sandwich = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sandwich --&gt; 
  &lt;!-- vim-signify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;vim-signify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;signify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-signify --&gt; 
  &lt;!-- vim-sneak --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim_sneak = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sneak --&gt; 
  &lt;!-- vimwiki --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vimwiki = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vimwiki --&gt; 
  &lt;!-- which-key.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;which_key = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- which-key.nvim --&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Compile&lt;/h2&gt; 
&lt;p&gt;Catppuccin is a highly customizable and configurable colorscheme. This does however come at the cost of complexity and execution time. Catppuccin can pre compute the results of your configuration and store the results in a compiled Lua file. We use these pre-cached values to set it&#39;s highlights.&lt;/p&gt; 
&lt;p&gt;By default, Catppuccin writes the compiled results into the system&#39;s cache directory. See below if you&#39;d like to change the cache directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({ -- Note: On windows we replace `/` with `\` by default
    compile_path = vim.fn.stdpath &quot;cache&quot; .. &quot;/catppuccin&quot;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🙋 FAQ&lt;/h2&gt; 
&lt;h3&gt;Why do my Treesitter highlights look incorrect?&lt;/h3&gt; 
&lt;p&gt;Please disable &lt;code&gt;additional_vim_regex_highlighting&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-treesitter.configs&quot;).setup {
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = false
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Why aren&#39;t my colors the same as the previews?&lt;/h3&gt; 
&lt;p&gt;Catppuccin requires that your terminal supports true color, meaning that your terminal can display the full range of 16 million colors.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported: iterm2 (macOS), kitty, wezterm, alacritty, &lt;a href=&quot;https://github.com/termstandard/colors#truecolor-support-in-output-devices&quot;&gt;see full list...&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Unsupported: Terminal.app (macOS), Terminus, Terminology, &lt;a href=&quot;https://github.com/termstandard/colors#not-supporting-truecolor&quot;&gt;see full list...&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use tmux, make sure to enable &lt;a href=&quot;https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6&quot;&gt;true color support&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/gyribeiro/4192af1aced7a1b555df06bd3781a722&quot;&gt;italic font support&lt;/a&gt;. This will prevent issues raised in &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/415&quot;&gt;#415&lt;/a&gt; and &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/428&quot;&gt;#428&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;💝 Thanks to&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Current Maintainer(s)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vollowx&quot;&gt;vollowx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/comfysage&quot;&gt;robin&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Previous Maintainer(s)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pocco81&quot;&gt;Pocco81&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nullchilly&quot;&gt;nullchilly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mrtnvgr&quot;&gt;mrtnvgr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/footers/gray0_ctp_on_line.svg?sanitize=true&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Copyright © 2021-present &lt;a href=&quot;https://github.com/catppuccin&quot; target=&quot;_blank&quot;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=363a4f&amp;amp;colorB=b7bdf8&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>folke/trouble.nvim</title>
      <link>https://github.com/folke/trouble.nvim</link>
      <description>&lt;p&gt;🚦 A pretty diagnostics, references, telescope results, quickfix and location list to help you solve all the trouble your code is causing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🚦 Trouble&lt;/h1&gt; 
&lt;p&gt;A pretty list for showing diagnostics, references, telescope results, quickfix and location lists to help you solve all the trouble your code is causing.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/folke/trouble.nvim/assets/292349/481bc1f7-cb93-432d-8ab6-f54044334b96&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Diagnostics&lt;/li&gt; 
 &lt;li&gt;LSP references&lt;/li&gt; 
 &lt;li&gt;LSP implementations&lt;/li&gt; 
 &lt;li&gt;LSP definitions&lt;/li&gt; 
 &lt;li&gt;LSP type definitions&lt;/li&gt; 
 &lt;li&gt;LSP Document Symbols&lt;/li&gt; 
 &lt;li&gt;LSP Incoming/Outgoing calls&lt;/li&gt; 
 &lt;li&gt;quickfix list&lt;/li&gt; 
 &lt;li&gt;location list&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;Telescope&lt;/a&gt; search results&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt; results&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📰 What&#39;s new?&lt;/h2&gt; 
&lt;p&gt;This is a full rewrite of the original &lt;strong&gt;trouble.nvim&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The new version is much more flexible and powerful, with a lot of new features and improvements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;multiple trouble windows at the same time&lt;/li&gt; 
 &lt;li&gt;LSP document symbols&lt;/li&gt; 
 &lt;li&gt;LSP incoming/outgoing calls&lt;/li&gt; 
 &lt;li&gt;lots of options to configure trouble windows (floats or splits)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;focus&lt;/code&gt; option to focus the trouble window when opened (or not)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;follow&lt;/code&gt; option to follow the item under the cursor&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pinned&lt;/code&gt; option to pin the buffer as the source for the opened trouble window&lt;/li&gt; 
 &lt;li&gt;full tree views of anything&lt;/li&gt; 
 &lt;li&gt;highly configurable views with custom formatters, filters, and sorters&lt;/li&gt; 
 &lt;li&gt;show multiple sections in the same view&lt;/li&gt; 
 &lt;li&gt;multi-line messages&lt;/li&gt; 
 &lt;li&gt;prettier and configurable indent guides&lt;/li&gt; 
 &lt;li&gt;tree view that follows the natural hierarchy of the items (like document symbols, or file structure)&lt;/li&gt; 
 &lt;li&gt;expansive API and &lt;code&gt;Trouble&lt;/code&gt; command&lt;/li&gt; 
 &lt;li&gt;trouble &lt;code&gt;modes&lt;/code&gt; to define custom views&lt;/li&gt; 
 &lt;li&gt;statusline component (useful with document symbols)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim &amp;gt;= 0.9.2&lt;/li&gt; 
 &lt;li&gt;Neovim &amp;gt;= 0.10.0 &lt;strong&gt;OR&lt;/strong&gt; the &lt;code&gt;markdown&lt;/code&gt; and &lt;code&gt;markdown_inline&lt;/code&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt; parsers&lt;/li&gt; 
 &lt;li&gt;Properly configured Neovim LSP client&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; is optional to enable file icons&lt;/li&gt; 
 &lt;li&gt;a theme with properly configured highlight groups for Neovim Diagnostics&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;patched font&lt;/a&gt; for the default severity and fold icons&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/trouble.nvim&quot;,
  opts = {}, -- for default options, refer to the configuration section for custom setup.
  cmd = &quot;Trouble&quot;,
  keys = {
    {
      &quot;&amp;lt;leader&amp;gt;xx&quot;,
      &quot;&amp;lt;cmd&amp;gt;Trouble diagnostics toggle&amp;lt;cr&amp;gt;&quot;,
      desc = &quot;Diagnostics (Trouble)&quot;,
    },
    {
      &quot;&amp;lt;leader&amp;gt;xX&quot;,
      &quot;&amp;lt;cmd&amp;gt;Trouble diagnostics toggle filter.buf=0&amp;lt;cr&amp;gt;&quot;,
      desc = &quot;Buffer Diagnostics (Trouble)&quot;,
    },
    {
      &quot;&amp;lt;leader&amp;gt;cs&quot;,
      &quot;&amp;lt;cmd&amp;gt;Trouble symbols toggle focus=false&amp;lt;cr&amp;gt;&quot;,
      desc = &quot;Symbols (Trouble)&quot;,
    },
    {
      &quot;&amp;lt;leader&amp;gt;cl&quot;,
      &quot;&amp;lt;cmd&amp;gt;Trouble lsp toggle focus=false win.position=right&amp;lt;cr&amp;gt;&quot;,
      desc = &quot;LSP Definitions / references / ... (Trouble)&quot;,
    },
    {
      &quot;&amp;lt;leader&amp;gt;xL&quot;,
      &quot;&amp;lt;cmd&amp;gt;Trouble loclist toggle&amp;lt;cr&amp;gt;&quot;,
      desc = &quot;Location List (Trouble)&quot;,
    },
    {
      &quot;&amp;lt;leader&amp;gt;xQ&quot;,
      &quot;&amp;lt;cmd&amp;gt;Trouble qflist toggle&amp;lt;cr&amp;gt;&quot;,
      desc = &quot;Quickfix List (Trouble)&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Trouble&lt;/strong&gt; is highly configurable. Please refer to the default settings below.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Settings&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class trouble.Mode: trouble.Config,trouble.Section.spec
---@field desc? string
---@field sections? string[]

---@class trouble.Config
---@field mode? string
---@field config? fun(opts:trouble.Config)
---@field formatters? table&amp;lt;string,trouble.Formatter&amp;gt; custom formatters
---@field filters? table&amp;lt;string, trouble.FilterFn&amp;gt; custom filters
---@field sorters? table&amp;lt;string, trouble.SorterFn&amp;gt; custom sorters
local defaults = {
  auto_close = false, -- auto close when there are no items
  auto_open = false, -- auto open when there are items
  auto_preview = true, -- automatically open preview when on an item
  auto_refresh = true, -- auto refresh when open
  auto_jump = false, -- auto jump to the item when there&#39;s only one
  focus = false, -- Focus the window when opened
  restore = true, -- restores the last location in the list when opening
  follow = true, -- Follow the current item
  indent_guides = true, -- show indent guides
  max_items = 200, -- limit number of items that can be displayed per section
  multiline = true, -- render multi-line messages
  pinned = false, -- When pinned, the opened trouble window will be bound to the current buffer
  warn_no_results = true, -- show a warning when there are no results
  open_no_results = false, -- open the trouble window when there are no results
  ---@type trouble.Window.opts
  win = {}, -- window options for the results window. Can be a split or a floating window.
  -- Window options for the preview window. Can be a split, floating window,
  -- or `main` to show the preview in the main editor window.
  ---@type trouble.Window.opts
  preview = {
    type = &quot;main&quot;,
    -- when a buffer is not yet loaded, the preview window will be created
    -- in a scratch buffer with only syntax highlighting enabled.
    -- Set to false, if you want the preview to always be a real loaded buffer.
    scratch = true,
  },
  -- Throttle/Debounce settings. Should usually not be changed.
  ---@type table&amp;lt;string, number|{ms:number, debounce?:boolean}&amp;gt;
  throttle = {
    refresh = 20, -- fetches new data when needed
    update = 10, -- updates the window
    render = 10, -- renders the window
    follow = 100, -- follows the current item
    preview = { ms = 100, debounce = true }, -- shows the preview for the current item
  },
  -- Key mappings can be set to the name of a builtin action,
  -- or you can define your own custom action.
  ---@type table&amp;lt;string, trouble.Action.spec|false&amp;gt;
  keys = {
    [&quot;?&quot;] = &quot;help&quot;,
    r = &quot;refresh&quot;,
    R = &quot;toggle_refresh&quot;,
    q = &quot;close&quot;,
    o = &quot;jump_close&quot;,
    [&quot;&amp;lt;esc&amp;gt;&quot;] = &quot;cancel&quot;,
    [&quot;&amp;lt;cr&amp;gt;&quot;] = &quot;jump&quot;,
    [&quot;&amp;lt;2-leftmouse&amp;gt;&quot;] = &quot;jump&quot;,
    [&quot;&amp;lt;c-s&amp;gt;&quot;] = &quot;jump_split&quot;,
    [&quot;&amp;lt;c-v&amp;gt;&quot;] = &quot;jump_vsplit&quot;,
    -- go down to next item (accepts count)
    -- j = &quot;next&quot;,
    [&quot;}&quot;] = &quot;next&quot;,
    [&quot;]]&quot;] = &quot;next&quot;,
    -- go up to prev item (accepts count)
    -- k = &quot;prev&quot;,
    [&quot;{&quot;] = &quot;prev&quot;,
    [&quot;[[&quot;] = &quot;prev&quot;,
    dd = &quot;delete&quot;,
    d = { action = &quot;delete&quot;, mode = &quot;v&quot; },
    i = &quot;inspect&quot;,
    p = &quot;preview&quot;,
    P = &quot;toggle_preview&quot;,
    zo = &quot;fold_open&quot;,
    zO = &quot;fold_open_recursive&quot;,
    zc = &quot;fold_close&quot;,
    zC = &quot;fold_close_recursive&quot;,
    za = &quot;fold_toggle&quot;,
    zA = &quot;fold_toggle_recursive&quot;,
    zm = &quot;fold_more&quot;,
    zM = &quot;fold_close_all&quot;,
    zr = &quot;fold_reduce&quot;,
    zR = &quot;fold_open_all&quot;,
    zx = &quot;fold_update&quot;,
    zX = &quot;fold_update_all&quot;,
    zn = &quot;fold_disable&quot;,
    zN = &quot;fold_enable&quot;,
    zi = &quot;fold_toggle_enable&quot;,
    gb = { -- example of a custom action that toggles the active view filter
      action = function(view)
        view:filter({ buf = 0 }, { toggle = true })
      end,
      desc = &quot;Toggle Current Buffer Filter&quot;,
    },
    s = { -- example of a custom action that toggles the severity
      action = function(view)
        local f = view:get_filter(&quot;severity&quot;)
        local severity = ((f and f.filter.severity or 0) + 1) % 5
        view:filter({ severity = severity }, {
          id = &quot;severity&quot;,
          template = &quot;{hl:Title}Filter:{hl} {severity}&quot;,
          del = severity == 0,
        })
      end,
      desc = &quot;Toggle Severity Filter&quot;,
    },
  },
  ---@type table&amp;lt;string, trouble.Mode&amp;gt;
  modes = {
    -- sources define their own modes, which you can use directly,
    -- or override like in the example below
    lsp_references = {
      -- some modes are configurable, see the source code for more details
      params = {
        include_declaration = true,
      },
    },
    -- The LSP base mode for:
    -- * lsp_definitions, lsp_references, lsp_implementations
    -- * lsp_type_definitions, lsp_declarations, lsp_command
    lsp_base = {
      params = {
        -- don&#39;t include the current location in the results
        include_current = false,
      },
    },
    -- more advanced example that extends the lsp_document_symbols
    symbols = {
      desc = &quot;document symbols&quot;,
      mode = &quot;lsp_document_symbols&quot;,
      focus = false,
      win = { position = &quot;right&quot; },
      filter = {
        -- remove Package since luals uses it for control flow structures
        [&quot;not&quot;] = { ft = &quot;lua&quot;, kind = &quot;Package&quot; },
        any = {
          -- all symbol kinds for help / markdown files
          ft = { &quot;help&quot;, &quot;markdown&quot; },
          -- default set of symbol kinds
          kind = {
            &quot;Class&quot;,
            &quot;Constructor&quot;,
            &quot;Enum&quot;,
            &quot;Field&quot;,
            &quot;Function&quot;,
            &quot;Interface&quot;,
            &quot;Method&quot;,
            &quot;Module&quot;,
            &quot;Namespace&quot;,
            &quot;Package&quot;,
            &quot;Property&quot;,
            &quot;Struct&quot;,
            &quot;Trait&quot;,
          },
        },
      },
    },
  },
  -- stylua: ignore
  icons = {
    ---@type trouble.Indent.symbols
    indent = {
      top           = &quot;│ &quot;,
      middle        = &quot;├╴&quot;,
      last          = &quot;└╴&quot;,
      -- last          = &quot;-╴&quot;,
      -- last       = &quot;╰╴&quot;, -- rounded
      fold_open     = &quot; &quot;,
      fold_closed   = &quot; &quot;,
      ws            = &quot;  &quot;,
    },
    folder_closed   = &quot; &quot;,
    folder_open     = &quot; &quot;,
    kinds = {
      Array         = &quot; &quot;,
      Boolean       = &quot;󰨙 &quot;,
      Class         = &quot; &quot;,
      Constant      = &quot;󰏿 &quot;,
      Constructor   = &quot; &quot;,
      Enum          = &quot; &quot;,
      EnumMember    = &quot; &quot;,
      Event         = &quot; &quot;,
      Field         = &quot; &quot;,
      File          = &quot; &quot;,
      Function      = &quot;󰊕 &quot;,
      Interface     = &quot; &quot;,
      Key           = &quot; &quot;,
      Method        = &quot;󰊕 &quot;,
      Module        = &quot; &quot;,
      Namespace     = &quot;󰦮 &quot;,
      Null          = &quot; &quot;,
      Number        = &quot;󰎠 &quot;,
      Object        = &quot; &quot;,
      Operator      = &quot; &quot;,
      Package       = &quot; &quot;,
      Property      = &quot; &quot;,
      String        = &quot; &quot;,
      Struct        = &quot;󰆼 &quot;,
      TypeParameter = &quot; &quot;,
      Variable      = &quot;󰀫 &quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;p&gt;Make sure to check the &lt;a href=&quot;https://raw.githubusercontent.com/folke/trouble.nvim/main/docs/examples.md&quot;&gt;Examples&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;🚀 Usage&lt;/h2&gt; 
&lt;h3&gt;Commands&lt;/h3&gt; 
&lt;p&gt;The &lt;strong&gt;Trouble&lt;/strong&gt; command is a wrapper around the &lt;strong&gt;Trouble&lt;/strong&gt; API. It can do anything the regular API can do.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Trouble [mode] [action] [options]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Toggle diagnostics for the current buffer and stay in the current window: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;Trouble diagnostics toggle focus=false filter.buf=0&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Show document symbols on the right of the current window. Keep the document symbols in sync with the buffer you started the command in. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;Trouble symbols toggle pinned=true win.relative=win win.position=right&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;You can use &lt;strong&gt;lua&lt;/strong&gt; code in the options for the &lt;code&gt;Trouble&lt;/code&gt; command. The examples below all do the same thing. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;Trouble diagnostics filter.severity=vim.diagnostic.severity.ERROR&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Trouble diagnostics filter.severity = vim.diagnostic.severity.ERROR&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Trouble diagnostics filter = { severity=vim.diagnostic.severity.ERROR }&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Merging of nested options, with or without quoting strings: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;Trouble diagnostics win.type = split win.position=right&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Trouble diagnostics win = { type = split, position=right}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;Trouble diagnostics win = { type = &quot;split&quot;, position=&#39;right&#39;}&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please refer to the API section for more information on the available actions and options.&lt;/p&gt; 
&lt;p&gt;Modes:&lt;/p&gt; 
&lt;!-- modes:start --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;diagnostics&lt;/strong&gt;: diagnostics&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;fzf&lt;/strong&gt;: FzfLua results previously opened with &lt;code&gt;require(&#39;trouble.sources.fzf&#39;).open()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;fzf_files&lt;/strong&gt;: FzfLua results previously opened with &lt;code&gt;require(&#39;trouble.sources.fzf&#39;).open()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;loclist&lt;/strong&gt;: Location List&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp&lt;/strong&gt;: LSP definitions, references, implementations, type definitions, and declarations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_command&lt;/strong&gt;: command&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_declarations&lt;/strong&gt;: declarations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_definitions&lt;/strong&gt;: definitions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_document_symbols&lt;/strong&gt;: document symbols&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_implementations&lt;/strong&gt;: implementations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_incoming_calls&lt;/strong&gt;: Incoming Calls&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_outgoing_calls&lt;/strong&gt;: Outgoing Calls&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_references&lt;/strong&gt;: references&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;lsp_type_definitions&lt;/strong&gt;: type definitions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;qflist&lt;/strong&gt;: Quickfix List&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;quickfix&lt;/strong&gt;: Quickfix List&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;snacks&lt;/strong&gt;: Snacks results previously opened with &lt;code&gt;require(&#39;trouble.sources.snacks&#39;).open()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;snacks_files&lt;/strong&gt;: Snacks results previously opened with &lt;code&gt;require(&#39;trouble.sources.snacks&#39;).open()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;symbols&lt;/strong&gt;: document symbols&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;telescope&lt;/strong&gt;: Telescope results previously opened with &lt;code&gt;require(&#39;trouble.sources.telescope&#39;).open()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;telescope_files&lt;/strong&gt;: Telescope results previously opened with &lt;code&gt;require(&#39;trouble.sources.telescope&#39;).open()&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- modes:end --&gt; 
&lt;h3&gt;Filters&lt;/h3&gt; 
&lt;p&gt;Please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/folke/trouble.nvim/main/docs/filter.md&quot;&gt;filter docs&lt;/a&gt; for more information examples on filters.&lt;/p&gt; 
&lt;h3&gt;API&lt;/h3&gt; 
&lt;p&gt;You can use the following functions in your keybindings:&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;API&lt;/summary&gt; 
 &lt;!-- api:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Opens trouble with the given mode.
-- If a view is already open with the same mode,
-- it will be focused unless `opts.focus = false`.
-- When a view is already open and `opts.new = true`,
-- a new view will be created.
---@param opts? trouble.Mode | { new?: boolean, refresh?: boolean } | string
---@return trouble.View?
require(&quot;trouble&quot;).open(opts)

-- Closes the last open view matching the filter.
---@param opts? trouble.Mode|string
---@return trouble.View?
require(&quot;trouble&quot;).close(opts)

-- Toggle the view with the given mode.
---@param opts? trouble.Mode|string
---@return trouble.View?
require(&quot;trouble&quot;).toggle(opts)

-- Returns true if there is an open view matching the mode.
---@param opts? trouble.Mode|string
require(&quot;trouble&quot;).is_open(opts)

-- Refresh all open views. Normally this is done automatically,
-- unless you disabled auto refresh.
---@param opts? trouble.Mode|string
require(&quot;trouble&quot;).refresh(opts)

-- Get all items from the active view for a given mode.
---@param opts? trouble.Mode|string
require(&quot;trouble&quot;).get_items(opts)

-- Renders a trouble list as a statusline component.
-- Check the docs for examples.
---@param opts? trouble.Mode|string|{hl_group?:string}
---@return {get: (fun():string), has: (fun():boolean)}
require(&quot;trouble&quot;).statusline(opts)

-- Closes the preview and goes to the main window.
-- The Trouble window is not closed.
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).cancel(opts)

-- Open the preview
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).delete(opts)

-- filter
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).filter(opts)

-- Go to the first item
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).first(opts)

-- Focus the trouble window
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).focus(opts)

-- Fold close 
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_close(opts)

-- fold close all
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_close_all(opts)

-- Fold close recursive
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_close_recursive(opts)

-- fold disable
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_disable(opts)

-- fold enable
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_enable(opts)

-- fold more
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_more(opts)

-- Fold open 
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_open(opts)

-- fold open all
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_open_all(opts)

-- Fold open recursive
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_open_recursive(opts)

-- fold reduce
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_reduce(opts)

-- Fold toggle 
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_toggle(opts)

-- fold toggle enable
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_toggle_enable(opts)

-- Fold toggle recursive
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_toggle_recursive(opts)

-- fold update
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_update(opts)

-- fold update all
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).fold_update_all(opts)

-- Show the help
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).help(opts)

-- Dump the item to the console
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).inspect(opts)

-- Jump to the item if on an item, otherwise fold the node
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).jump(opts)

-- Jump to the item and close the trouble window
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).jump_close(opts)

-- Jump to the item if on an item, otherwise do nothing
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).jump_only(opts)

-- Open the item in a split
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).jump_split(opts)

-- Open the item in a split and close the trouble window
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).jump_split_close(opts)

-- Open the item in a vsplit
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).jump_vsplit(opts)

-- Open the item in a vsplit and close the trouble window
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).jump_vsplit_close(opts)

-- Go to the last item
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).last(opts)

-- Go to the next item
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).next(opts)

-- Go to the previous item
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).prev(opts)

-- Open the preview
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).preview(opts)

-- Refresh the trouble source
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).refresh(opts)

-- Toggle the preview
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).toggle_preview(opts)

-- Toggle the auto refresh
---@param opts? trouble.Mode | { new? : boolean } | string
---@return trouble.View
require(&quot;trouble&quot;).toggle_refresh(opts)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- api:end --&gt; 
&lt;/details&gt; 
&lt;h3&gt;Telescope&lt;/h3&gt; 
&lt;p&gt;You can easily open any search results in &lt;strong&gt;Trouble&lt;/strong&gt;, by defining a custom action:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local actions = require(&quot;telescope.actions&quot;)
local open_with_trouble = require(&quot;trouble.sources.telescope&quot;).open

-- Use this to add more results without clearing the trouble list
local add_to_trouble = require(&quot;trouble.sources.telescope&quot;).add

local telescope = require(&quot;telescope&quot;)

telescope.setup({
  defaults = {
    mappings = {
      i = { [&quot;&amp;lt;c-t&amp;gt;&quot;] = open_with_trouble },
      n = { [&quot;&amp;lt;c-t&amp;gt;&quot;] = open_with_trouble },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you open telescope, you can now hit &lt;code&gt;&amp;lt;c-t&amp;gt;&lt;/code&gt; to open the results in &lt;strong&gt;Trouble&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;fzf-lua&lt;/h3&gt; 
&lt;p&gt;You can easily open any search results in &lt;strong&gt;Trouble&lt;/strong&gt;, by defining a custom action:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local config = require(&quot;fzf-lua.config&quot;)
local actions = require(&quot;trouble.sources.fzf&quot;).actions
config.defaults.actions.files[&quot;ctrl-t&quot;] = actions.open
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you open fzf-lua, you can now hit &lt;code&gt;&amp;lt;c-t&amp;gt;&lt;/code&gt; to open the results in &lt;strong&gt;Trouble&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Statusline Component&lt;/h3&gt; 
&lt;p&gt;Example for &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;nvim-lualine/lualine.nvim&quot;,
  opts = function(_, opts)
    local trouble = require(&quot;trouble&quot;)
    local symbols = trouble.statusline({
      mode = &quot;lsp_document_symbols&quot;,
      groups = {},
      title = false,
      filter = { range = true },
      format = &quot;{kind_icon}{symbol.name:Normal}&quot;,
      -- The following line is needed to fix the background color
      -- Set it to the lualine section you want to use
      hl_group = &quot;lualine_c_normal&quot;,
    })
    table.insert(opts.sections.lualine_c, {
      symbols.get,
      cond = symbols.has,
    })
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🎨 Colors&lt;/h2&gt; 
&lt;p&gt;The table below shows all the highlight groups defined for Trouble.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Highlight Groups&lt;/summary&gt; 
 &lt;!-- colors:start --&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Highlight Group&lt;/th&gt; 
    &lt;th&gt;Default Group&lt;/th&gt; 
    &lt;th&gt;Description&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleBasename&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;TroubleFilename&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleCode&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Special&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleCount&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;TabLineSel&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleDirectory&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Directory&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleFilename&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Directory&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconArray&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@punctuation.bracket&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconBoolean&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@boolean&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconClass&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@type&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconConstant&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@constant&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconConstructor&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@constructor&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconDirectory&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Special&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconEnum&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@lsp.type.enum&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconEnumMember&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@lsp.type.enumMember&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconEvent&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Special&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconField&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@variable.member&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconFile&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Normal&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconFunction&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@function&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconInterface&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@lsp.type.interface&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconKey&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@lsp.type.keyword&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconMethod&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@function.method&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconModule&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@module&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconNamespace&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@module&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconNull&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@constant.builtin&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconNumber&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@number&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconObject&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@constant&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconOperator&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@operator&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconPackage&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@module&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconProperty&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@property&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconString&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@string&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconStruct&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@lsp.type.struct&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconTypeParameter&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@lsp.type.typeParameter&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIconVariable&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;@variable&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIndent&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;LineNr&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIndentFoldClosed&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;CursorLineNr&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIndentFoldOpen&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;TroubleIndent&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIndentLast&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;TroubleIndent&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIndentMiddle&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;TroubleIndent&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIndentTop&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;TroubleIndent&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleIndentWs&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;TroubleIndent&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleNormal&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;NormalFloat&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleNormalNC&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;NormalFloat&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroublePos&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;LineNr&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroublePreview&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Visual&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleSource&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;TroubleText&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;em&gt;&lt;strong&gt;Normal&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;!-- colors:end --&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Saghen/blink.cmp</title>
      <link>https://github.com/Saghen/blink.cmp</link>
      <description>&lt;p&gt;Performant, batteries-included completion plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;Blink Completion (blink.cmp)&lt;/h2&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; Performant, batteries-included completion plugin for Neovim &lt;/p&gt; 
&lt;p align=&quot;center&quot; style=&quot;text-decoration: none; border: none;&quot;&gt; &lt;a href=&quot;https://github.com/saghen/blink.cmp/stargazers&quot; style=&quot;text-decoration: none&quot;&gt; &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/saghen/blink.cmp?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=C9CBFF&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/saghen/blink.cmp/issues&quot; style=&quot;text-decoration: none&quot;&gt; &lt;img alt=&quot;Issues&quot; src=&quot;https://img.shields.io/github/issues/saghen/blink.cmp?style=for-the-badge&amp;amp;logo=bilibili&amp;amp;color=F5E0DC&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/saghen/blink.cmp/contributors&quot; style=&quot;text-decoration: none&quot;&gt; &lt;img alt=&quot;Contributors&quot; src=&quot;https://img.shields.io/github/contributors/saghen/blink.cmp?color=%23DDB6F2&amp;amp;label=CONTRIBUTORS&amp;amp;logo=git&amp;amp;style=for-the-badge&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://cmp.saghen.dev&quot;&gt;Documentation&lt;/a&gt; · &lt;a href=&quot;https://cmp.saghen.dev/installation&quot;&gt;Installation&lt;/a&gt; · &lt;a href=&quot;https://cmp.saghen.dev/recipes&quot;&gt;Recipes&lt;/a&gt; · &lt;a href=&quot;https://cmp.saghen.dev/configuration/general&quot;&gt;Configuration&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;blink.cmp&lt;/strong&gt; is a completion plugin with support for LSPs, cmdline, signature help, and snippets. It uses an &lt;a href=&quot;https://cmp.saghen.dev/configuration/fuzzy.html#rust-vs-lua-implementation&quot;&gt;optional&lt;/a&gt; custom &lt;a href=&quot;https://github.com/saghen/frizbee&quot;&gt;fuzzy matcher&lt;/a&gt; for typo resistance. It provides extensibility via pluggable sources (LSP, buffer, snippets, etc), component based rendering and dynamic configuration.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/bd1e25dd-48b0-4d33-90f4-1468d822f2be&quot;&gt;https://github.com/user-attachments/assets/bd1e25dd-48b0-4d33-90f4-1468d822f2be&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Works out of the box with no additional configuration&lt;/li&gt; 
 &lt;li&gt;Updates on every keystroke (0.5-4ms async, single core)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/saghen/frizbee&quot;&gt;Typo resistant fuzzy&lt;/a&gt; with frecency and proximity bonus&lt;/li&gt; 
 &lt;li&gt;Extensive LSP support (&lt;a href=&quot;https://cmp.saghen.dev/development/lsp-tracker&quot;&gt;tracker&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/configuration/snippets.html&quot;&gt;Snippet support&lt;/a&gt;: native &lt;code&gt;vim.snippet&lt;/code&gt; (including &lt;code&gt;friendly-snippets&lt;/code&gt;), &lt;code&gt;LuaSnip&lt;/code&gt; and &lt;code&gt;mini.snippets&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;External sources support (&lt;a href=&quot;https://cmp.saghen.dev/configuration/sources.html#community-sources&quot;&gt;community sources&lt;/a&gt; and &lt;a href=&quot;https://github.com/saghen/blink.compat&quot;&gt;compatibility layer for &lt;code&gt;nvim-cmp&lt;/code&gt; sources&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/configuration/completion.html#auto-brackets&quot;&gt;Auto-bracket support&lt;/a&gt; based on semantic tokens&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/configuration/signature.html&quot;&gt;Signature help&lt;/a&gt; (experimental, opt-in)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/modes/cmdline.html&quot;&gt;Command line completion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/modes/term&quot;&gt;Terminal completion&lt;/a&gt; (0.11+ only! No source for shell completions exists yet, contributions welcome!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/#compared-to-built-in-completion&quot;&gt;Comparison with built-in completion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cmp.saghen.dev/#compared-to-nvim-cmp&quot;&gt;Comparison with nvim-cmp&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Head over to the &lt;a href=&quot;https://cmp.saghen.dev/installation&quot;&gt;documentation website&lt;/a&gt; for installation instructions and configuration options.&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/&quot;&gt;@hrsh7th&lt;/a&gt; nvim-cmp used as inspiration and cmp-path/cmp-cmdline implementations modified for path/cmdline sources&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/garymjr&quot;&gt;@garymjr&lt;/a&gt; nvim-snippets implementation modified for snippets source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/redxtech&quot;&gt;@redxtech&lt;/a&gt; Help with design and testing&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aaditya-sahay&quot;&gt;@aaditya-sahay&lt;/a&gt; Help with rust, design and testing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stefanboca&quot;&gt;@stefanboca&lt;/a&gt; Author of &lt;a href=&quot;https://github.com/saghen/blink.compat&quot;&gt;blink.compat&lt;/a&gt; and maintainer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/soifou&quot;&gt;@soifou&lt;/a&gt; Maintainer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lopi-py&quot;&gt;@lopi-py&lt;/a&gt; Windowing code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scottmckendry&quot;&gt;@scottmckendry&lt;/a&gt; CI and prebuilt binaries&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Balssh&quot;&gt;@balssh&lt;/a&gt; + &lt;a href=&quot;https://github.com/konradmalik&quot;&gt;@konradmalik&lt;/a&gt; Nix flake, nixpkg and nixvim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/abeldekat&quot;&gt;@abeldekat&lt;/a&gt; mini.snippets source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FelipeLema&quot;&gt;@FelipeLema&lt;/a&gt; vsnip source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wurli&quot;&gt;@wurli&lt;/a&gt; Terminal completions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mikavilpas&quot;&gt;@mikavilpas&lt;/a&gt; + &lt;a href=&quot;https://github.com/xzbdmw&quot;&gt;@xzbdmw&lt;/a&gt; Dot-repeat (&lt;code&gt;.&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FerretDetective&quot;&gt;@FerretDetective&lt;/a&gt; &lt;code&gt;complete_func&lt;/code&gt; source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/krovuxdev&quot;&gt;@krovuxdev&lt;/a&gt; Community moderation and help&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nvim-lua/kickstart.nvim</title>
      <link>https://github.com/nvim-lua/kickstart.nvim</link>
      <description>&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kickstart.nvim&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Small&lt;/li&gt; 
 &lt;li&gt;Single-file&lt;/li&gt; 
 &lt;li&gt;Completely Documented&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt; a Neovim distribution, but instead a starting point for your configuration.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install Neovim&lt;/h3&gt; 
&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/nightly&quot;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; 
&lt;h3&gt;Install External Dependencies&lt;/h3&gt; 
&lt;p&gt;External Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic utils: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, C Compiler (&lt;code&gt;gcc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation&quot;&gt;ripgrep&lt;/a&gt;, &lt;a href=&quot;https://github.com/sharkdp/fd#installation&quot;&gt;fd-find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clipboard tool (xclip/xsel/win32yank or other depending on the platform)&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt;: optional, provides various icons 
  &lt;ul&gt; 
   &lt;li&gt;if you have it set &lt;code&gt;vim.g.have_nerd_font&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt; to true&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emoji fonts (Ubuntu only, and only if you want emoji!) &lt;code&gt;sudo apt install fonts-noto-color-emoji&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Language Setup: 
  &lt;ul&gt; 
   &lt;li&gt;If you want to write Typescript, you need &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;If you want to write Golang, you will need &lt;code&gt;go&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Recipes&quot;&gt;Install Recipes&lt;/a&gt; for additional Windows and Linux specific notes and quick install snippets&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install Kickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#FAQ&quot;&gt;Backup&lt;/a&gt; your previous configuration (if any exists)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Neovim&#39;s configurations are located under the following paths, depending on your OS:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;OS&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;PATH&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux, MacOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt;, &lt;code&gt;~/.config/nvim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (cmd)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;%localappdata%\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (powershell)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$env:LOCALAPPDATA\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Recommended Step&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/fork-a-repo&quot;&gt;Fork&lt;/a&gt; this repo so that you have your own copy that you can modify, then install by cloning the fork to your machine using one of the commands below, depending on your OS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Your fork&#39;s URL will be something like this: &lt;code&gt;https://github.com/&amp;lt;your_github_username&amp;gt;/kickstart.nvim.git&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You likely want to remove &lt;code&gt;lazy-lock.json&lt;/code&gt; from your fork&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file too - it&#39;s ignored in the kickstart repo to make maintenance easier, but it&#39;s &lt;a href=&quot;https://lazy.folke.io/usage/lockfile&quot;&gt;recommended to track it in version control&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Clone kickstart.nvim&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If following the recommended step above (i.e., forking the repo), replace &lt;code&gt;nvim-lua&lt;/code&gt; with &lt;code&gt;&amp;lt;your_github_username&amp;gt;&lt;/code&gt; in the commands below&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt;
 &lt;summary&gt; Linux and Mac &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${XDG_CONFIG_HOME:-$HOME/.config}&quot;/nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt; Windows &lt;/summary&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;%localappdata%\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;powershell.exe&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${env:LOCALAPPDATA}\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Post Installation&lt;/h3&gt; 
&lt;p&gt;Start Neovim&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! Lazy will install all the plugins you have. Use &lt;code&gt;:Lazy&lt;/code&gt; to view the current plugin status. Hit &lt;code&gt;q&lt;/code&gt; to close the window.&lt;/p&gt; 
&lt;h4&gt;Read The Friendly Documentation&lt;/h4&gt; 
&lt;p&gt;Read through the &lt;code&gt;init.lua&lt;/code&gt; file in your configuration folder for more information about extending and exploring Neovim. That also includes examples of adding popularly requested plugins.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] For more information about a particular plugin check its repository&#39;s documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/m8C0Cq9Uv9o&quot;&gt;The Only Video You Need to Get Started with Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;What should I do if I already have a pre-existing Neovim configuration? 
  &lt;ul&gt; 
   &lt;li&gt;You should back it up and then delete all associated files.&lt;/li&gt; 
   &lt;li&gt;This includes your existing init.lua and the Neovim files in &lt;code&gt;~/.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Can I keep my existing configuration in parallel to kickstart? 
  &lt;ul&gt; 
   &lt;li&gt;Yes! You can use &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt;&lt;code&gt;=nvim-NAME&lt;/code&gt; to maintain multiple configurations. For example, you can install the kickstart configuration in &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; and create an alias: &lt;pre&gt;&lt;code&gt;alias nvim-kickstart=&#39;NVIM_APPNAME=&quot;nvim-kickstart&quot; nvim&#39;
&lt;/code&gt;&lt;/pre&gt; When you run Neovim using &lt;code&gt;nvim-kickstart&lt;/code&gt; alias it will use the alternative config directory and the matching local directory &lt;code&gt;~/.local/share/nvim-kickstart&lt;/code&gt;. You can apply this approach to any Neovim distribution that you would like to try out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;What if I want to &quot;uninstall&quot; this configuration: 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://lazy.folke.io/usage#-uninstalling&quot;&gt;lazy.nvim uninstall&lt;/a&gt; information&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the kickstart &lt;code&gt;init.lua&lt;/code&gt; a single file? Wouldn&#39;t it make sense to split it into multiple files? 
  &lt;ul&gt; 
   &lt;li&gt;The main purpose of kickstart is to serve as a teaching tool and a reference configuration that someone can easily use to &lt;code&gt;git clone&lt;/code&gt; as a basis for their own. As you progress in learning Neovim and Lua, you might consider splitting &lt;code&gt;init.lua&lt;/code&gt; into smaller parts. A fork of kickstart that does this while maintaining the same functionality is available here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/dam9000/kickstart-modular.nvim&quot;&gt;kickstart-modular.nvim&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Discussions on this topic can be found here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/issues/218&quot;&gt;Restructure the configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/pull/473&quot;&gt;Reorganize init.lua into a multi-file setup&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install Recipes&lt;/h3&gt; 
&lt;p&gt;Below you can find OS specific install instructions for Neovim and dependencies.&lt;/p&gt; 
&lt;p&gt;After installing all the dependencies continue with the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Kickstart&quot;&gt;Install Kickstart&lt;/a&gt; step.&lt;/p&gt; 
&lt;h4&gt;Windows Installation&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with Microsoft C++ Build Tools and CMake&lt;/summary&gt; Installation may require installing build tools and updating the run command for `telescope-fzf-native` 
 &lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documentation for &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&quot;&gt;more details&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install CMake and the Microsoft C++ Build Tools on Windows&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, build = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with gcc/make using chocolatey&lt;/summary&gt; Alternatively, one can install gcc and make which don&#39;t require changing the config, the easiest way is to use choco: 
 &lt;ol&gt; 
  &lt;li&gt;install &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; either follow the instructions on the page or use winget, run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;winget install --accept-source-agreements chocolatey.chocolatey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start=&quot;2&quot;&gt; 
  &lt;li&gt;install all requirements using choco, exit the previous cmd and open a new one so that choco path is set, and run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;choco install -y neovim git ripgrep wget fd unzip gzip mingw make
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;WSL (Windows Subsystem for Linux)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;wsl --install
wsl
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Linux Install&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Ubuntu Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Debian Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl

# Now we install nvim
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz

# make it available in /usr/local/bin, distro installs to /usr/bin
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Fedora Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo dnf install -y gcc make git ripgrep fd-find unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Arch Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo pacman -S --noconfirm --needed gcc make git ripgrep fd unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>apache/apisix</title>
      <link>https://github.com/apache/apisix</link>
      <description>&lt;p&gt;The Cloud-Native API Gateway and AI Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX API Gateway ｜ AI Gateway&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/logos/apisix-white-bg.jpg&quot; alt=&quot;APISIX logo&quot; height=&quot;150px&quot; align=&quot;right&quot; /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/apisix/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/apache/apisix&quot; alt=&quot;Commit activity&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&quot; alt=&quot;Percentage of issues still open&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Slack/Join%20Apache%20APISIX?icon=slack&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; 
&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; 
&lt;p&gt;APISIX can serve as an &lt;strong&gt;&lt;a href=&quot;https://apisix.apache.org/ai-gateway/&quot;&gt;AI Gateway&lt;/a&gt;&lt;/strong&gt; through its flexible plugin system, providing AI proxying, load balancing for LLMs, retries and fallbacks, token-based rate limiting, and robust security to ensure the efficiency and reliability of AI agents. APISIX also provides the &lt;a href=&quot;https://apisix.apache.org/blog/2025/04/21/host-mcp-server-with-api-gateway/&quot;&gt;&lt;code&gt;mcp-bridge&lt;/code&gt;&lt;/a&gt; plugin to seamlessly convert stdio-based MCP servers to scalable HTTP SSE services.&lt;/p&gt; 
&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&quot;https://github.com/apache/apisix-ingress-controller&quot;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&quot; alt=&quot;Technical architecture of Apache APISIX&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.g2.com/products/apache-apisix/reviews&quot;&gt;Kindly Write a Review&lt;/a&gt; for APISIX in G2.&lt;/li&gt; 
 &lt;li&gt;Mailing List: Mail to &lt;a href=&quot;mailto:dev-subscribe@apisix.apache.org&quot;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; 
 &lt;li&gt;Slack Workspace - &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;invitation link&lt;/a&gt; (Please open an &lt;a href=&quot;https://apisix.apache.org/docs/general/submit-issue&quot;&gt;issue&lt;/a&gt; if this link is expired), and then join the #apisix channel (Channels -&amp;gt; Browse channels -&amp;gt; search for &quot;apisix&quot;).&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;You can use APISIX API Gateway as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX API Gateway can run from bare-metal to Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&quot;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&quot;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&quot;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&quot;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&quot;&gt;3.1.*&lt;/a&gt;, &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;5.0&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&quot;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&quot;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&quot;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; 
   &lt;li&gt;Proxy Websocket&lt;/li&gt; 
   &lt;li&gt;Proxy Protocol&lt;/li&gt; 
   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&quot;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/http3.md&quot;&gt;HTTP/3 with QUIC&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&quot;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&quot;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; 
   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; 
   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/tutorials/health-check.md&quot;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; 
   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&quot;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&quot;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&quot;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&quot;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree#operator-list&quot;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&quot;arg_age&quot;, &quot;&amp;gt;&quot;, 24}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&quot;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&quot;&gt;Support priority&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&quot;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&quot;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Rich authentication &amp;amp; authorization support: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&quot;&gt;key-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&quot;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&quot;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&quot;&gt;casbin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&quot;&gt;keycloak&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&quot;&gt;casdoor&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&quot;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&quot;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&quot;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&quot;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&quot;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&quot;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&quot;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&quot;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&quot;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&quot;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&quot;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Zipkin tracing: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open source APM: support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&quot;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul.md&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&quot;&gt;Consul_kv&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&quot;&gt;Nacos&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&quot;&gt;Eureka&lt;/a&gt; and &lt;a href=&quot;https://github.com/api7/apisix-seed/raw/main/docs/en/latest/zookeeper.md&quot;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Monitoring And Metrics: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&quot;https://etcd.io/docs/v3.5/op-guide/clustering/&quot;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; 
   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/deployment-modes.md#standalone&quot;&gt;Standalone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&quot;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; 
   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&quot;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller.&lt;/li&gt; 
   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&quot;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&quot;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&quot;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&quot;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&quot;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&quot;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&quot;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&quot;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&quot;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&quot;&gt;File Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&quot;&gt;SolarWinds Loggly Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tencent-cloud-cls.md&quot;&gt;TencentCloud CLS&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/clickhouse-logger.md&quot;&gt;ClickHouse&lt;/a&gt;: push logs to ClickHouse.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/elasticsearch-logger.md&quot;&gt;Elasticsearch&lt;/a&gt;: push logs to Elasticsearch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&quot;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-helm-chart&quot;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in jwt-auth authentication plugin using &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/secret.md&quot;&gt;APISIX Secret&lt;/a&gt; resource.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&quot;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&quot;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; 
   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/external-plugin.png&quot; alt=&quot;Multi Language Support into Apache APISIX&quot; /&gt;&lt;/li&gt; 
   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&quot;https://github.com/apache/apisix-java-plugin-runner&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-go-plugin-runner&quot;&gt;Golang&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-python-plugin-runner&quot;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; 
   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&quot;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&quot;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&quot;https://github.com/proxy-wasm/spec#sdks&quot;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&quot;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&quot;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&quot;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&quot;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/installation-guide/&quot;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more documents, please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&quot;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/blog/2022/06/07/installation-performance-test-of-apigateway-apisix-on-aws-graviton3&quot;&gt;APISIX also works perfectly in AWS graviton3 C7g.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;User Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&quot;&gt;European eFactory Platform: API Security Gateway – Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&quot;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog/tags/case-studies/&quot;&gt;More Stories&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses APISIX API Gateway?&lt;/h2&gt; 
&lt;p&gt;A wide variety of companies and organizations use APISIX API Gateway for research, production and commercial product, below are some of them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Airwallex&lt;/li&gt; 
 &lt;li&gt;Bilibili&lt;/li&gt; 
 &lt;li&gt;CVTE&lt;/li&gt; 
 &lt;li&gt;European eFactory Platform&lt;/li&gt; 
 &lt;li&gt;European Copernicus Reference System&lt;/li&gt; 
 &lt;li&gt;Geely&lt;/li&gt; 
 &lt;li&gt;HONOR&lt;/li&gt; 
 &lt;li&gt;Horizon Robotics&lt;/li&gt; 
 &lt;li&gt;iQIYI&lt;/li&gt; 
 &lt;li&gt;Lenovo&lt;/li&gt; 
 &lt;li&gt;NASA JPL&lt;/li&gt; 
 &lt;li&gt;Nayuki&lt;/li&gt; 
 &lt;li&gt;OPPO&lt;/li&gt; 
 &lt;li&gt;QingCloud&lt;/li&gt; 
 &lt;li&gt;Swisscom&lt;/li&gt; 
 &lt;li&gt;Tencent Game&lt;/li&gt; 
 &lt;li&gt;Travelsky&lt;/li&gt; 
 &lt;li&gt;vivo&lt;/li&gt; 
 &lt;li&gt;Sina Weibo&lt;/li&gt; 
 &lt;li&gt;WeCity&lt;/li&gt; 
 &lt;li&gt;WPS&lt;/li&gt; 
 &lt;li&gt;XPENG&lt;/li&gt; 
 &lt;li&gt;Zoom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&quot;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apache.org/logos/#apisix&quot;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mrcjkb/rustaceanvim</title>
      <link>https://github.com/mrcjkb/rustaceanvim</link>
      <description>&lt;p&gt;🦀 Supercharge your Rust experience in Neovim! A heavily modified fork of rust-tools.nvim&lt;/p&gt;&lt;hr&gt;&lt;br /&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/rustaceanvim.svg?sanitize=true&quot; alt=&quot;rustaceanvim&quot; /&gt; &lt;/a&gt; 
 &lt;p align=&quot;center&quot;&gt; &lt;br /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/rustaceanvim.txt&quot;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/issues/new?assignees=&amp;amp;labels=bug&amp;amp;projects=&amp;amp;template=bug_report.yml&quot;&gt;Report Bug&lt;/a&gt; · &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/discussions/new?category=ideas&quot;&gt;Request Feature&lt;/a&gt; · &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/discussions/new?category=q-a&quot;&gt;Ask Question&lt;/a&gt; &lt;/p&gt; 
 &lt;p&gt; &lt;strong&gt; Supercharge your Rust experience in &lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim&lt;/a&gt;!&lt;br /&gt; A heavily modified fork of &lt;a href=&quot;https://github.com/simrat39/rust-tools.nvim&quot;&gt;rust-tools.nvim&lt;/a&gt;&lt;br /&gt; &lt;/strong&gt; &lt;/p&gt; 
 &lt;p&gt;🦀&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&quot; alt=&quot;Neovim&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.lua.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&quot; alt=&quot;Lua&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Rust-000000?style=for-the-badge&amp;amp;logo=rust&amp;amp;logoColor=white&quot; alt=&quot;Rust&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://nixos.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/nix-0175C2?style=for-the-badge&amp;amp;logo=NixOS&amp;amp;logoColor=white&quot; alt=&quot;Nix&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/mrcjkb/rustaceanvim.svg?style=for-the-badge&quot; alt=&quot;GPL2 License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/mrcjkb/rustaceanvim.svg?style=for-the-badge&quot; alt=&quot;Issues&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/actions/workflows/nix-build.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/mrcjkb/rustaceanvim/nix-build.yml?style=for-the-badge&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://luarocks.org/modules/MrcJkb/rustaceanvim&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/MrcJkb/rustaceanvim?logo=lua&amp;amp;color=purple&amp;amp;style=for-the-badge&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Just works. &lt;a href=&quot;https://mrcjkb.dev/posts/2023-08-22-setup.html&quot;&gt;No need to call &lt;code&gt;setup&lt;/code&gt;!&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;No dependency on &lt;code&gt;lspconfig&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Lazy initialization by design.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;span&gt;🔗&lt;/span&gt; Quick Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#pencil-prerequisites&quot;&gt;&lt;span&gt;📝&lt;/span&gt; Prerequisites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#inbox_tray-installation&quot;&gt;&lt;span&gt;📥&lt;/span&gt; Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#zap-quick-setup&quot;&gt;&lt;span&gt;⚡&lt;/span&gt; Quick setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&quot;&gt;&lt;span&gt;📚&lt;/span&gt; Usage / Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#gear-advanced-configuration&quot;&gt;&lt;span&gt;⚙&lt;/span&gt; Advanced configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#stethoscope-troubleshooting&quot;&gt;&lt;span&gt;🩺&lt;/span&gt; Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#left_speech_bubble-faq&quot;&gt;&lt;span&gt;🗨&lt;/span&gt; FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mrcjkb/rustaceanvim/discussions/122&quot;&gt;&lt;span&gt;🚣&lt;/span&gt; Migrating from rust-tools&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;❔&lt;/span&gt; Do I need rustaceanvim&lt;/h2&gt; 
&lt;p&gt;If you are starting out with Rust, Neovim&#39;s built-in LSP client API (see &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;&lt;code&gt;:h lsp&lt;/code&gt;&lt;/a&gt;) or &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;&lt;code&gt;nvim-lspconfig.rust_analyzer&lt;/code&gt;&lt;/a&gt; is probably enough for you. It provides the lowest common denominator of LSP support. This plugin is for those who would like &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&quot;&gt;additional non-standard features&lt;/a&gt; that are specific to rust-analyzer.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;📝&lt;/span&gt; Prerequisites&lt;/h2&gt; 
&lt;h3&gt;Required&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;neovim &amp;gt;= 0.11&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rust-analyzer.github.io/&quot;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;For versions that are compatible with older Neovim versions, see previous major version bumps in &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/CHANGELOG.md&quot;&gt;the changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Optional&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://graphviz.org/doc/info/lang.html&quot;&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt;&lt;/a&gt;, for crate graphs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/cargo/&quot;&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt;, required for Cargo projects.&lt;/li&gt; 
 &lt;li&gt;A debug adapter (e.g. &lt;a href=&quot;https://lldb.llvm.org/&quot;&gt;&lt;code&gt;lldb&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/vadimcn/codelldb&quot;&gt;&lt;code&gt;codelldb&lt;/code&gt;&lt;/a&gt;) and &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;, required for debugging.&lt;/li&gt; 
 &lt;li&gt;A tree-sitter parser for Rust (required for the &lt;code&gt;:Rustc unpretty&lt;/code&gt; command). Can be installed using &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt;, which also provides highlights, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;📥&lt;/span&gt; Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/lua%3Arustaceanvim/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/lua%3Arustaceanvim.svg?exclude_unsupported=1&quot; alt=&quot;Packaging status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/nvim-neorocks/rocks.nvim&quot;&gt;&lt;code&gt;rocks.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:Rocks install rustaceanvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &#39;mrcjkb/rustaceanvim&#39;,
  version = &#39;^6&#39;, -- Recommended
  lazy = false, -- This plugin is already lazy
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;It is suggested to pin to tagged releases if you would like to avoid breaking changes.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To manually generate documentation, use &lt;code&gt;:helptags ALL&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Nix&lt;/h3&gt; 
&lt;p&gt;For Nix users with flakes enabled, this project provides outputs in the form of a package and an overlay. It is also available in &lt;code&gt;nixpkgs&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Look at the configuration information below to get started.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⚡&lt;/span&gt; Quick Setup&lt;/h2&gt; 
&lt;p&gt;This plugin automatically configures the &lt;code&gt;rust-analyzer&lt;/code&gt; builtin LSP client and integrates with other Rust tools. See the &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#books-usage--features&quot;&gt;Usage / Features&lt;/a&gt; section for more info.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;Do not call the &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;&lt;code&gt;nvim-lspconfig.rust_analyzer&lt;/code&gt;&lt;/a&gt; setup or set up the LSP client for &lt;code&gt;rust-analyzer&lt;/code&gt; manually, as doing so may cause conflicts.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This is a filetype plugin that works out of the box, so there is no need to call a &lt;code&gt;setup&lt;/code&gt; function or configure anything to get this plugin working.&lt;/p&gt; 
&lt;p&gt;You will most likely want to add some keymaps. Most keymaps are only useful in rust files, so I suggest you define them in &lt;code&gt;~/.config/nvim/after/ftplugin/rust.lua&lt;/code&gt;[^1]&lt;/p&gt; 
&lt;p&gt;[^1]: See &lt;a href=&quot;https://neovim.io/doc/user/starting.html#base-directories&quot;&gt;&lt;code&gt;:help base-directories&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local bufnr = vim.api.nvim_get_current_buf()
vim.keymap.set(
  &quot;n&quot;, 
  &quot;&amp;lt;leader&amp;gt;a&quot;, 
  function()
    vim.cmd.RustLsp(&#39;codeAction&#39;) -- supports rust-analyzer&#39;s grouping
    -- or vim.lsp.buf.codeAction() if you don&#39;t want grouping.
  end,
  { silent = true, buffer = bufnr }
)
vim.keymap.set(
  &quot;n&quot;, 
  &quot;K&quot;,  -- Override Neovim&#39;s built-in hover keymap with rustaceanvim&#39;s hover actions
  function()
    vim.cmd.RustLsp({&#39;hover&#39;, &#39;actions&#39;})
  end,
  { silent = true, buffer = bufnr }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For more LSP related keymaps, &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig#suggested-configuration&quot;&gt;see the &lt;code&gt;nvim-lspconfig&lt;/code&gt; suggestions&lt;/a&gt;.&lt;/li&gt; 
  &lt;li&gt;If you want to share keymaps with &lt;code&gt;nvim-lspconfig&lt;/code&gt;, you can also use the &lt;code&gt;vim.g.rustaceanvim.server.on_attach&lt;/code&gt; function, or an &lt;code&gt;LspAttach&lt;/code&gt; autocommand.&lt;/li&gt; 
  &lt;li&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/#gear-advanced-configuration&quot;&gt;Advanced configuration&lt;/a&gt; section or &lt;code&gt;:h rustaceanvim.config&lt;/code&gt; for more configuration options.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Do &lt;strong&gt;not&lt;/strong&gt; set &lt;code&gt;vim.g.rustaceanvim&lt;/code&gt; in &lt;code&gt;after/ftplugin/rust.lua&lt;/code&gt;, as the file is sourced after the plugin is initialized.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;span&gt;📚&lt;/span&gt; Usage / Features&lt;/h2&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Debugging&lt;/b&gt; &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;debuggables&lt;/code&gt; opens a prompt to select from available targets.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; searches for a target at the current cursor position.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp[!] debuggables {args[]}?
:RustLsp[!] debug {args[]}?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;debug&#39;)
vim.cmd.RustLsp(&#39;debuggables&#39;)
-- or, to run the previous debuggable:
vim.cmd.RustLsp { &#39;debuggables&#39;, bang = true }
-- or, to override the executable&#39;s args:
vim.cmd.RustLsp {&#39;debuggables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last debuggable.&lt;/p&gt; 
 &lt;p&gt;Requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt; (Please read the plugin&#39;s documentation).&lt;/li&gt; 
  &lt;li&gt;A debug adapter (e.g. &lt;a href=&quot;https://lldb.llvm.org/resources/lldbdap&quot;&gt;&lt;code&gt;lldb-dap&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/vadimcn/codelldb&quot;&gt;&lt;code&gt;codelldb&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;By default, this plugin will silently attempt to autoload &lt;code&gt;nvim-dap&lt;/code&gt; configurations when the LSP client attaches. You can call them with &lt;code&gt;require(&#39;dap&#39;).continue()&lt;/code&gt; or &lt;code&gt;:DapContinue&lt;/code&gt; once they have been loaded. The feature can be disabled by setting &lt;code&gt;vim.g.rustaceanvim.dap.autoload_configurations = false&lt;/code&gt;.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;:RustLsp debuggables&lt;/code&gt; will only load debug configurations created by &lt;code&gt;rust-analyzer&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;require(&#39;dap&#39;).continue()&lt;/code&gt; will load all Rust debug configurations, including those specified in a &lt;code&gt;.vscode/launch.json&lt;/code&gt; (see &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap/raw/9adbfdca13afbe646d09a8d7a86d5d031fb9c5a5/doc/dap.txt#L316&quot;&gt;&lt;code&gt;:h dap-launch.json&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
  &lt;li&gt;Note that rustaceanvim may only be able to load DAP configurations when rust-analyzer has finished initializing (which may be after the client attaches, in large projects). This means that the DAP configurations may not be loaded immediately upon startup.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/ce17d228-ae0a-416a-8159-fe095a85dcb7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Runnables&lt;/b&gt; &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;runnables&lt;/code&gt; opens a prompt to select from available targets.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;run&lt;/code&gt; searches for a target at the current cursor position.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp[!] runnables {args[]}?
:RustLsp[!] run {args[]}?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;run&#39;) 
vim.cmd.RustLsp(&#39;runnables&#39;)
-- or, to run the previous runnable:
vim.cmd.RustLsp { &#39;runnables&#39;, bang = true }
-- or, to override the executable&#39;s args:
vim.cmd.RustLsp {&#39;runnables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last runnable.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/95183192-5669-4a07-804b-83f67831be57&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Testables and failed test diagnostics&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;If you set the &lt;code&gt;vim.g.rustaceanvim.tools.test_executor&lt;/code&gt; option to &lt;code&gt;&#39;background&#39;&lt;/code&gt;, this plugin will run tests in the background, parse the results, and - if possible - display failed tests as diagnostics.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp[!] testables {args[]}?
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;testables&#39;)
-- or, to run the previous testables:
vim.cmd.RustLsp { &#39;testables&#39;, bang = true }
-- or, to override the executable&#39;s args:
vim.cmd.RustLsp {&#39;testables&#39;, &#39;arg1&#39;, &#39;arg2&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will rerun the last testable.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b3639b7a-105e-49de-9bdc-9c88e8e508a2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Neotest integration&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;This plugin provides a &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt; adapter, which you can add to neotest as follows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;neotest&#39;).setup {
    -- ...,
    adapters = {
      -- ...,
      require(&#39;rustaceanvim.neotest&#39;)
    },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: If you use rustaceanvim&#39;s neotest adapter, do not add &lt;a href=&quot;https://github.com/rouge8/neotest-rust&quot;&gt;neotest-rust&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Here is a comparison between rustaceanvim&#39;s adapter and neotest-rust:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th align=&quot;left&quot;&gt;&lt;/th&gt; 
    &lt;th align=&quot;left&quot;&gt;rustaceanvim&lt;/th&gt; 
    &lt;th align=&quot;left&quot;&gt;neotest-rust&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;left&quot;&gt;Test discovery&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;rust-analyzer (LSP)&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;tree-sitter&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;left&quot;&gt;Command construction&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;rust-analyzer (LSP)&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;tree-sitter&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;left&quot;&gt;DAP strategy&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;Automatic DAP detection (reuses &lt;code&gt;debuggables&lt;/code&gt;); overridable with &lt;code&gt;vim.g.rustaceanvim.dap&lt;/code&gt;&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;Defaults to &lt;code&gt;codelldb&lt;/code&gt;; manual configuration&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align=&quot;left&quot;&gt;Test runner&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;&lt;code&gt;cargo&lt;/code&gt; or &lt;code&gt;cargo-nextest&lt;/code&gt;, if detected&lt;/td&gt; 
    &lt;td align=&quot;left&quot;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;If you configure rustaceanvim to use neotest, the &lt;code&gt;tools.test_executor&lt;/code&gt; will default to using neotest for &lt;code&gt;testables&lt;/code&gt; and &lt;code&gt;runnables&lt;/code&gt; that are tests.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b734fdb6-3c8a-492b-9b39-bb238d7cd7b1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Expand macros recursively&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp expandMacro
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;expandMacro&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/477d9e58-74b0-42ff-87ca-2fef34d06db3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Rebuild proc macros&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp rebuildProcMacros
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;rebuildProcMacros&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Move item up/down&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp moveItem {up|down}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;moveItem&#39;,  &#39;up&#39; }
vim.cmd.RustLsp { &#39;moveItem&#39;,  &#39;down&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Grouped code actions&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Sometimes, rust-analyzer groups code actions by category, which is not supported by Neovim&#39;s built-in &lt;code&gt;vim.lsp.buf.codeAction&lt;/code&gt;. This plugin provides a command with a UI that does:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp codeAction
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;codeAction&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you set the option &lt;code&gt;vim.g.rustaceanvim.tools.code_actions.ui_select_fallback&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;), it will fall back to &lt;code&gt;vim.ui.select&lt;/code&gt; if there are no grouped code actions.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/866d3cb1-8e56-4380-8c03-812386441f47&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Hover actions&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Note: To activate hover actions, run the command twice. This will move you into the window, then press enter on the selection you want. Alternatively, you can set &lt;code&gt;auto_focus&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your config and you will automatically enter the hover actions window.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp hover actions
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;hover&#39;, &#39;actions&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can invoke a hover action by switching to the hover window and entering &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on the respective line, or with a keymap for the &lt;code&gt;&amp;lt;Plug&amp;gt;RustHoverAction&lt;/code&gt; mapping, which accepts a &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt; prefix as the (1-based) index of the hover action to invoke.&lt;/p&gt; 
 &lt;p&gt;For example, if you set the following keymap:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;space&amp;gt;a&#39;, &#39;&amp;lt;Plug&amp;gt;RustHoverAction&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;you can invoke the third hover action with &lt;code&gt;3&amp;lt;space&amp;gt;a&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/c7b6c730-4439-47b0-9a75-7ea4e6831f7a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Hover range&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp hover range
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;hover&#39;, &#39;range&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Explain errors&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Display a hover window with explanations from the &lt;a href=&quot;https://doc.rust-lang.org/error_codes/error-index.html&quot;&gt;rust error codes index&lt;/a&gt; over error diagnostics (if they have an error code).&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp explainError {cycle?|cycle_prev?|current?}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;explainError&#39;) -- default to &#39;cycle&#39;
vim.cmd.RustLsp({ &#39;explainError&#39;, &#39;cycle&#39; })
vim.cmd.RustLsp({ &#39;explainError&#39;, &#39;cycle_prev&#39; })
vim.cmd.RustLsp({ &#39;explainError&#39;, &#39;current&#39; })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle&lt;/code&gt; or no args: Like &lt;code&gt;vim.diagnostic.goto_next&lt;/code&gt;, &lt;code&gt;explainError&lt;/code&gt; will cycle diagnostics, starting at the cursor position, until it can find a diagnostic with an error code.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle_prev&lt;/code&gt;: Like &lt;code&gt;vim.diagnostic.goto_prev&lt;/code&gt;, searches backwards for a diagnostic with an error code.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;current&lt;/code&gt;: Searches for diagnostics only in the current cursor line.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/bac9b31c-22ca-40c4-bfd3-b8c5ba4cc49a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Render diagnostics&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Display a hover window with the rendered diagnostic, as displayed during &lt;code&gt;cargo build&lt;/code&gt;. Useful for solving bugs around borrowing and generics, as it consolidates the important bits (sometimes across files) together.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp renderDiagnostic {cycle?|cycle_prev?|current?}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;renderDiagnostic&#39;) -- defaults to &#39;cycle&#39;
vim.cmd.RustLsp({ &#39;renderDiagnostic&#39;, &#39;cycle&#39; })
vim.cmd.RustLsp({ &#39;renderDiagnostic&#39;, &#39;cycle_prev&#39; })
vim.cmd.RustLsp({ &#39;renderDiagnostic&#39;, &#39;current&#39; })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle&lt;/code&gt; or no args: Like &lt;code&gt;vim.diagnostic.goto_next&lt;/code&gt;, &lt;code&gt;renderDiagnostic&lt;/code&gt; will cycle diagnostics, starting at the cursor position, until it can find a diagnostic with rendered data.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;cycle_prev&lt;/code&gt;: Like &lt;code&gt;vim.diagnostic.goto_prev&lt;/code&gt;, searches backwards for a diagnostic with rendered data.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If called with &lt;code&gt;current&lt;/code&gt;: Searches for diagnostics only in the current cursor line.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/a972c6b6-c504-4c2a-8380-53451bb8c2de&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Jump to related diagnostics&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Sometimes, rust-analyzer provides related diagnostics in multiple locations. Using the &lt;code&gt;relatedDiagnostics&lt;/code&gt; subcommand, you can navigate between them. If a diagnostic has more than one related diagnostic, this will populate the quickfix list.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp relatedDiagnostics
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;relatedDiagnostics&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/26695f41-2d9d-4250-82fa-fea867fd9432&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Open Cargo.toml&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp openCargo
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;openCargo&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Open docs.rs documentation&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Open docs.rs documentation for the symbol under the cursor.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp openDocs
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;openDocs&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Parent Module&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp parentModule
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;parentModule&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Filtered workspace symbol searches&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;rust-analyzer supports filtering workspace symbol searches.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp[!] workspaceSymbol {onlyTypes?|allSymbols?} {query?}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;workspaceSymbol&#39;)
-- or
vim.cmd.RustLsp { 
  &#39;workspaceSymbol&#39;, 
  &#39;&amp;lt;onlyTypes|allSymbols&amp;gt;&#39; --[[ optional ]], 
  &#39;&amp;lt;query&amp;gt;&#39; --[[ optional ]], 
  bang = true --[[ optional ]]
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Calling the command with a bang &lt;code&gt;!&lt;/code&gt; will include dependencies in the search.&lt;/li&gt; 
  &lt;li&gt;You can also influence the behaviour of &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.workspace_symbol()&quot;&gt;&lt;code&gt;vim.lsp.buf.workspace_symbol()&lt;/code&gt;&lt;/a&gt; by setting the rust-analyzer &lt;code&gt;workspace.symbol.search&lt;/code&gt; server option.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Join lines&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces. Works with individual lines in normal mode and multiple lines in visual mode.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp joinLines
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;joinLines&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/124515923-4504e800-dde9-11eb-8d58-d97945a1a785.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Structural search replace&lt;/b&gt; &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Searches the entire buffer in normal mode.&lt;/li&gt; 
  &lt;li&gt;Searches the selection in visual mode.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp ssr {query}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;ssr&#39;, &#39;&amp;lt;query&amp;gt;&#39; --[[ optional ]] }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/b61fbc56-ab53-48e6-bfdd-eb8d4de28795&quot; alt=&quot;tty&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;View crate graph&lt;/b&gt; &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp crateGraph {backend {output}}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;crateGraph&#39;, &#39;[backend]&#39;, &#39;[output]&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://graphviz.org/doc/info/lang.html&quot;&gt;&lt;code&gt;dot&lt;/code&gt; from &lt;code&gt;graphviz&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;View syntax tree&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Requires rust-analyzer &amp;gt;= 2025-01-20.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp syntaxTree
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;syntaxTree&#39;)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://github.com/mrcjkb/rustaceanvim/assets/12857160/c865a263-1568-41c7-a32b-bc4a34b198dc&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Fly check&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Run &lt;code&gt;cargo check&lt;/code&gt; or another compatible command (f.x. &lt;code&gt;clippy&lt;/code&gt;) in a background thread and provide LSP diagnostics based on the output of the command.&lt;/p&gt; 
 &lt;p&gt;Useful in large projects where running &lt;code&gt;cargo check&lt;/code&gt; on each save can be costly.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp flyCheck {run?|clear?|cancel?}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp(&#39;flyCheck&#39;) -- defaults to &#39;run&#39;
vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;run&#39; }
vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;clear&#39; }
vim.cmd.RustLsp { &#39;flyCheck&#39;, &#39;cancel&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE]&lt;/p&gt; 
  &lt;p&gt;This is only useful if you set the option, &lt;code&gt;[&#39;rust-analzyer&#39;].checkOnSave = false&lt;/code&gt;.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;View HIR / MIR&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Opens a buffer with a textual representation of the HIR or MIR of the function containing the cursor. Useful for debugging or when working on rust-analyzer itself.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustLsp view {hir|mir}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustLsp { &#39;view&#39;, &#39;hir&#39; }
vim.cmd.RustLsp { &#39;view&#39;, &#39;mir&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Rustc unpretty&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;Opens a buffer with a textual representation of the MIR or others things, of the function closest to the cursor. Achieves an experience similar to Rust Playground.&lt;/p&gt; 
 &lt;p&gt;NOTE: This currently requires a tree-sitter parser for Rust, and a nightly compiler toolchain.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:Rustc unpretty {hir|mir|...}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.Rustc { &#39;unpretty&#39;, &#39;hir&#39; }
vim.cmd.Rustc { &#39;unpretty&#39;, &#39;mir&#39; }
-- ...
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;A tree-sitter parser for Rust (required for the &lt;code&gt;:Rustc unpretty&lt;/code&gt; command). Can be installed using &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;ra-multiplex&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;On Linux and MacOS, rustaceanvim can auto-detect and connect to a running &lt;a href=&quot;https://github.com/pr2502/ra-multiplex&quot;&gt;ra-multiplex&lt;/a&gt; server. By default, it will try to do so automatically if the &lt;code&gt;vim.g.rustaceanvim.server.cmd&lt;/code&gt; option is unset. See also &lt;code&gt;:h rustaceanvim.ra_multiplex&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;b&gt;Configure rust-analyzer on the fly&lt;/b&gt; &lt;/summary&gt; 
 &lt;p&gt;You can configure rust-analyzer on the fly using the &lt;code&gt;:RustAnalyzer config&lt;/code&gt; subcommand. The command takes a Lua table as an argument (it does not validate it!).&lt;/p&gt; 
 &lt;p&gt;For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:RustAnalyzer config { checkOnSave = false }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.RustAnalyzer { &#39;config&#39;, &#39;{ checkOnSave = false }&#39; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See also: &lt;a href=&quot;https://rust-analyzer.github.io/book/configuration&quot;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;h2&gt;&lt;span&gt;⚙&lt;/span&gt; Advanced configuration&lt;/h2&gt; 
&lt;p&gt;To modify the default configuration, set &lt;code&gt;vim.g.rustaceanvim&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/rustaceanvim.txt&quot;&gt;&lt;code&gt;:h rustaceanvim&lt;/code&gt;&lt;/a&gt; for a detailed documentation of all available configuration options. You may need to run &lt;code&gt;:helptags ALL&lt;/code&gt; if the documentation has not been installed.&lt;/li&gt; 
 &lt;li&gt;The default configuration &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/lua/rustaceanvim/config/internal.lua&quot;&gt;can be found here (see &lt;code&gt;RustaceanDefaultConfig&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For detailed descriptions of the language server configs, see the &lt;a href=&quot;https://rust-analyzer.github.io/book/configuration&quot;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You only need to specify the keys that you want to be changed, because defaults are applied for keys that are not provided.&lt;/p&gt; 
&lt;p&gt;Example config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.g.rustaceanvim = {
  -- Plugin configuration
  tools = {
  },
  -- LSP configuration
  server = {
    on_attach = function(client, bufnr)
      -- you can also put keymaps in here
    end,
    default_settings = {
      -- rust-analyzer language server configuration
      [&#39;rust-analyzer&#39;] = {
      },
    },
  },
  -- DAP configuration
  dap = {
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;code&gt;vim.g.rustaceanvim&lt;/code&gt; can also be a function that returns a table.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;You can also use &lt;code&gt;:h vim.lsp.config&lt;/code&gt; to configure &lt;code&gt;vim.g.rustaceanvim.server&lt;/code&gt; options. For example, &lt;code&gt;vim.lsp.config(&quot;*&quot;, {})&lt;/code&gt; or &lt;code&gt;vim.lsp.config(&quot;rust-analyzer&quot;, {})&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Using &lt;code&gt;codelldb&lt;/code&gt; for debugging&lt;/h3&gt; 
&lt;p&gt;For Rust, &lt;code&gt;codelldb&lt;/code&gt; from the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&quot;&gt;CodeLLDB VSCode extension&lt;/a&gt; provides a better experience than &lt;code&gt;lldb&lt;/code&gt;. If you are using a distribution that lets you install the &lt;code&gt;codelldb&lt;/code&gt; executable, this plugin will automatically detect it and configure itself to use it as a debug adapter.&lt;/p&gt; 
&lt;p&gt;Some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NixOS: &lt;a href=&quot;https://github.com/NixOS/nixpkgs/raw/nixos-unstable/pkgs/applications/editors/vscode/extensions/vadimcn.vscode-lldb/default.nix#L134&quot;&gt;&lt;code&gt;vscode-extensions.vadimcn.vscode-lldb.adapter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;This repository&#39;s Nix flake provides a &lt;code&gt;codelldb&lt;/code&gt; package.&lt;/li&gt; 
 &lt;li&gt;Arch Linux: &lt;a href=&quot;https://aur.archlinux.org/packages/codelldb-bin&quot;&gt;&lt;code&gt;codelldb-bin&lt;/code&gt; (AUR)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Using &lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;:MasonInstall codelldb&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If your distribution does not have a &lt;code&gt;codelldb&lt;/code&gt; package, you can configure it as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb&quot;&gt;CodeLLDB VSCode extension&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Find out where it is installed. On Linux, this is typically in &lt;code&gt;$HOME/.vscode/extensions/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Update your configuration:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.g.rustaceanvim = function()
  -- Update this path
  local extension_path = vim.env.HOME .. &#39;/.vscode/extensions/vadimcn.vscode-lldb-1.10.0/&#39;
  local codelldb_path = extension_path .. &#39;adapter/codelldb&#39;
  local liblldb_path = extension_path .. &#39;lldb/lib/liblldb&#39;
  local this_os = vim.uv.os_uname().sysname;

  -- The path is different on Windows
  if this_os:find &quot;Windows&quot; then
    codelldb_path = extension_path .. &quot;adapter\\codelldb.exe&quot;
    liblldb_path = extension_path .. &quot;lldb\\bin\\liblldb.dll&quot;
  else
    -- The liblldb extension is .so for Linux and .dylib for MacOS
    liblldb_path = liblldb_path .. (this_os == &quot;Linux&quot; and &quot;.so&quot; or &quot;.dylib&quot;)
  end

  local cfg = require(&#39;rustaceanvim.config&#39;)
  return {
    dap = {
      adapter = cfg.get_codelldb_adapter(codelldb_path, liblldb_path),
    },
  }
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;How to dynamically load different &lt;code&gt;rust-analyzer&lt;/code&gt; settings per project&lt;/h3&gt; 
&lt;p&gt;By default, this plugin will look for a &lt;code&gt;.vscode/settings.json&lt;/code&gt;[^2] file and attempt to load it. If the file does not exist, or it can&#39;t be decoded, the &lt;code&gt;server.default_settings&lt;/code&gt; will be used.&lt;/p&gt; 
&lt;p&gt;[^2]: See &lt;a href=&quot;https://github.com/rust-analyzer/rust-project.json-example/raw/master/.vscode/settings.json&quot;&gt;this example&lt;/a&gt; and the rust-analyzer &lt;a href=&quot;https://rust-analyzer.github.io/book/configuration&quot;&gt;configuration manual&lt;/a&gt;. Note that JSON5 is currently not supported by Neovim.&lt;/p&gt; 
&lt;p&gt;Another option is to use &lt;code&gt;:h exrc&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🩺&lt;/span&gt; Troubleshooting&lt;/h2&gt; 
&lt;h3&gt;Health checks&lt;/h3&gt; 
&lt;p&gt;For a health check, run &lt;code&gt;:checkhealth rustaceanvim&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; log file&lt;/h3&gt; 
&lt;p&gt;To open the &lt;code&gt;rust-analyzer&lt;/code&gt; log file, run &lt;code&gt;:RustLsp logFile&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Minimal config&lt;/h3&gt; 
&lt;p&gt;To troubleshoot this plugin with a minimal config in a temporary directory, you can try &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/troubleshooting/minimal.lua&quot;&gt;minimal.lua&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;nvim -u minimal.lua
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;I strongly recommend against using rust-analyzer managed my mason.nvim, as version mismatches between rust-analyzer and your project toolchain can and most likely will lead to subtle issues.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you cannot reproduce your issue with a minimal config, it may be caused by another plugin, or a setting of your plugin manager. In this case, add additional plugins and configurations to &lt;code&gt;minimal.lua&lt;/code&gt;, until you can reproduce it. Or, bisect your existing plugins and config.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;If you use Nix, you can run &lt;code&gt;nix run &quot;github:mrcjkb/rustaceanvim#nvim-minimal-stable&quot;&lt;/code&gt;. or &lt;code&gt;nix run &quot;github:mrcjkb/rustaceanvim#nvim-minimal-nightly&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;rust-analyzer troubleshooting&lt;/h3&gt; 
&lt;p&gt;For issues related to rust-analyzer (e.g. LSP features not working), see also &lt;a href=&quot;https://rust-analyzer.github.io/book/troubleshooting.html&quot;&gt;the rust-analyzer troubleshooting guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;🗨&lt;/span&gt; FAQ&lt;/h3&gt; 
&lt;h4&gt;Where are inlay hints / type hints?&lt;/h4&gt; 
&lt;p&gt;As Neovim &amp;gt;= 0.10 supports inlay hints natively, I have removed the code from this plugin. See &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-inlay_hint&quot;&gt;&lt;code&gt;:h lsp-inlay_hint&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; 
&lt;h4&gt;Can I display inlay hints to the end of the line?&lt;/h4&gt; 
&lt;p&gt;You can use the &lt;a href=&quot;https://github.com/chrisgrieser/nvim-lsp-endhints&quot;&gt;&lt;code&gt;nvim-lsp-endhints&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; 
&lt;h4&gt;How to enable auto completion?&lt;/h4&gt; 
&lt;p&gt;As of &lt;a href=&quot;https://github.com/neovim/neovim/pull/27339&quot;&gt;#ff097f2091e7a970e5b12960683b4dade5563040&lt;/a&gt;, Neovim has built-in completion based on the &lt;code&gt;triggerCharacters&lt;/code&gt; sent by language servers. Omni completion is also available for a more traditional &lt;code&gt;vim&lt;/code&gt;-like completion experience.&lt;/p&gt; 
&lt;p&gt;For more extensible and complex autocompletion setups, you need a plugin such as &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&lt;/a&gt; and a LSP completion source like &lt;a href=&quot;https://github.com/hrsh7th/cmp-nvim-lsp&quot;&gt;&lt;code&gt;cmp-nvim-lsp&lt;/code&gt;&lt;/a&gt;, or you may use &lt;a href=&quot;https://github.com/saghen/blink.cmp&quot;&gt;&lt;code&gt;blink.cmp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;I&#39;m having issues with (auto)completion&lt;/h4&gt; 
&lt;p&gt;rustaceanvim doesn&#39;t implement (auto)completion. Issues with (auto)completion either come from another plugin or rust-analzyer.&lt;/p&gt; 
&lt;h4&gt;mason.nvim and nvim-lspconfig&lt;/h4&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/mrcjkb/rustaceanvim/master/doc/mason.txt&quot;&gt;&lt;code&gt;:h rustaceanvim.mason&lt;/code&gt;&lt;/a&gt; for details about troubleshooting mason.nvim and nvim-lspconfig issues, or configuring rustaceanvim to use a rust-analyzer installation that is managed by mason.nvim.&lt;/p&gt; 
&lt;h4&gt;I am not seeing diagnostics in a standalone file&lt;/h4&gt; 
&lt;p&gt;rust-analyzer has limited support for standalone files. Many diagnostics come from Cargo. If you&#39;re not in a Cargo project, you won&#39;t see any Cargo diagnostics.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🔗&lt;/span&gt; Related Projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rouge8/neotest-rust&quot;&gt;&lt;code&gt;rouge8/neotest-rust&lt;/code&gt;&lt;/a&gt; A &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;&lt;code&gt;neotest&lt;/code&gt;&lt;/a&gt; adapter for Rust, using &lt;a href=&quot;https://nexte.st/&quot;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Saecki/crates.nvim&quot;&gt;&lt;code&gt;Saecki/crates.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vxpm/ferris.nvim&quot;&gt;&lt;code&gt;vxpm/ferris.nvim&lt;/code&gt;&lt;/a&gt; Geared towards people who prefer manual LSP client configuration. Has some features that have not yet been implemented by this plugin.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/adaszko/tree_climber_rust.nvim&quot;&gt;&lt;code&gt;adaszko/tree_climber_rust.nvim&lt;/code&gt;&lt;/a&gt; tree-sitter powered incremental selection tailored for Rust.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;rust-tools.nvim&lt;/code&gt; draws inspiration from &lt;a href=&quot;https://github.com/akinsho/flutter-tools.nvim&quot;&gt;&lt;code&gt;akinsho/flutter-tools.nvim&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;</description>
    </item>
    
    <item>
      <title>pwntester/octo.nvim</title>
      <link>https://github.com/pwntester/octo.nvim</link>
      <description>&lt;p&gt;Edit and review GitHub issues and pull requests from the comfort of your favorite editor&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/repo-size/pwntester/octo.nvim&quot; alt=&quot;GitHub repository size&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/pwntester/octo.nvim&quot; alt=&quot;Issues&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/pwntester/octo.nvim&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://saythanks.io/to/alvaro%40pwntester.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/say-thanks-modal.svg?sanitize=true&quot; alt=&quot;Say thanks&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim/commits/main&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/pwntester/octo.nvim&quot; alt=&quot;Latest commit&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/pwntester/octo.nvim&quot; alt=&quot;Repository&#39;s starts&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;🐙&lt;/span&gt; Octo.nvim&lt;/h1&gt; 
&lt;p&gt;Edit and review GitHub issues, pull requests, and discussions from the comfort of your favorite editor.&lt;/p&gt; 
&lt;p&gt;Just edit the title, body, or comments as a regular buffer and use &lt;code&gt;:w(rite)&lt;/code&gt; to sync with GitHub.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/pwntester&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-blue.png&quot; alt=&quot;BuyMeACoffee&quot; width=&quot;140&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🌲 Table of Contents&lt;/h2&gt; 
&lt;!--toc:start--&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#octopus-octonvim&quot;&gt;&lt;span&gt;🐙&lt;/span&gt; Octo.nvim&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-table-of-contents&quot;&gt;🌲 Table of Contents&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-features&quot;&gt;💫 Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-examples&quot;&gt;🔥 Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-requirements&quot;&gt;🎯 Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-installation&quot;&gt;📦 Installation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-configuration&quot;&gt;🔧 Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-commands&quot;&gt;🤖 Commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-pr-reviews&quot;&gt;📋 PR reviews&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-completion&quot;&gt;🍞 Completion&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-colors&quot;&gt;🎨 Colors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-demos&quot;&gt;📺 Demos&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-faq&quot;&gt;🙋 FAQ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-contributing&quot;&gt;🙌 Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-credits&quot;&gt;🌟 Credits&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-say-thanks&quot;&gt;🙏 Say Thanks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/#-license&quot;&gt;📜 License&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;!--toc:end--&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;💫 Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Edit GitHub issues, PRs, and discussions&lt;/li&gt; 
 &lt;li&gt;Add/Modify/Delete comments&lt;/li&gt; 
 &lt;li&gt;Add/Remove label, reactions, assignees, project cards, reviewers, etc.&lt;/li&gt; 
 &lt;li&gt;Add Review PRs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔥 Examples&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Octo https://github.com/pwntester/octo.nvim/issues/12
Octo issue create
Octo issue create pwntester/octo.nvim
Octo comment add
Octo reaction add hooray
Octo issue edit pwntester/octo.nvim 1
Octo issue edit 1
Octo issue list createdBy=pwntester
Octo issue list neovim/neovim labels=bug,help\ wanted states=OPEN
Octo search assignee:pwntester is:pr
Octo search is:discussion repo:pwntester/octo.nvim category:&quot;Show and Tell&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🎯 Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim &lt;code&gt;&amp;gt;=0.10.0&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://cli.github.com/&quot;&gt;GitHub CLI&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you&#39;d like to use &lt;a href=&quot;https://docs.github.com/en/issues/planning-and-tracking-with-projects&quot;&gt;Projects v2&lt;/a&gt; you will need to add the &lt;code&gt;read:project&lt;/code&gt; scope to your &lt;code&gt;gh&lt;/code&gt; token. You can do so by running &lt;code&gt;gh auth refresh -s read:project&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;If you&#39;d like to actually modify projects you can instead add the &lt;code&gt;project&lt;/code&gt; scope to your token instead.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install one of: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation&lt;/h2&gt; 
&lt;p&gt;Use your favourite plugin manager to install it, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &#39;pwntester/octo.nvim&#39;,
  requires = {
    &#39;nvim-lua/plenary.nvim&#39;,
    &#39;nvim-telescope/telescope.nvim&#39;,
    -- OR &#39;ibhagwan/fzf-lua&#39;,
    -- OR &#39;folke/snacks.nvim&#39;,
    &#39;nvim-tree/nvim-web-devicons&#39;,
  },
  config = function ()
    require&quot;octo&quot;.setup()
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🔧 Configuration&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require&quot;octo&quot;.setup({
  use_local_fs = false,                    -- use local files on right side of reviews
  enable_builtin = false,                  -- shows a list of builtin actions when no action is provided
  default_remote = {&quot;upstream&quot;, &quot;origin&quot;}, -- order to try remotes
  default_merge_method = &quot;commit&quot;,         -- default merge method which should be used for both `Octo pr merge` and merging from picker, could be `commit`, `rebase` or `squash`
  default_delete_branch = false,           -- whether to delete branch when merging pull request with either `Octo pr merge` or from picker (can be overridden with `delete`/`nodelete` argument to `Octo pr merge`)
  ssh_aliases = {},                        -- SSH aliases. e.g. `ssh_aliases = {[&quot;github.com-work&quot;] = &quot;github.com&quot;}`. The key part will be interpreted as an anchored Lua pattern.
  picker = &quot;telescope&quot;,                    -- or &quot;fzf-lua&quot; or &quot;snacks&quot;
  picker_config = {
    use_emojis = false,                    -- only used by &quot;fzf-lua&quot; picker for now
    mappings = {                           -- mappings for the pickers
      open_in_browser = { lhs = &quot;&amp;lt;C-b&amp;gt;&quot;, desc = &quot;open issue in browser&quot; },
      copy_url = { lhs = &quot;&amp;lt;C-y&amp;gt;&quot;, desc = &quot;copy url to system clipboard&quot; },
      copy_sha = { lhs = &quot;&amp;lt;C-e&amp;gt;&quot;, desc = &quot;copy commit SHA to system clipboard&quot; },
      checkout_pr = { lhs = &quot;&amp;lt;C-o&amp;gt;&quot;, desc = &quot;checkout pull request&quot; },
      merge_pr = { lhs = &quot;&amp;lt;C-r&amp;gt;&quot;, desc = &quot;merge pull request&quot; },
    },
    snacks = {                                -- snacks specific config
      actions = {                             -- custom actions for specific snacks pickers (array of tables)
        issues = {                            -- actions for the issues picker
          -- { name = &quot;my_issue_action&quot;, fn = function(picker, item) print(&quot;Issue action:&quot;, vim.inspect(item)) end, lhs = &quot;&amp;lt;leader&amp;gt;a&quot;, desc = &quot;My custom issue action&quot; },
        },
        pull_requests = {                     -- actions for the pull requests picker
          -- { name = &quot;my_pr_action&quot;, fn = function(picker, item) print(&quot;PR action:&quot;, vim.inspect(item)) end, lhs = &quot;&amp;lt;leader&amp;gt;b&quot;, desc = &quot;My custom PR action&quot; },
        },
        notifications = {},                   -- actions for the notifications picker
        issue_templates = {},                 -- actions for the issue templates picker
        search = {},                          -- actions for the search picker
        -- ... add actions for other pickers as needed
      },
    },
  },
  comment_icon = &quot;▎&quot;,                      -- comment marker
  outdated_icon = &quot;󰅒 &quot;,                    -- outdated indicator
  resolved_icon = &quot; &quot;,                    -- resolved indicator
  reaction_viewer_hint_icon = &quot; &quot;,        -- marker for user reactions
  commands = {},                           -- additional subcommands made available to `Octo` command
  users = &quot;search&quot;,                        -- Users for assignees or reviewers. Values: &quot;search&quot; | &quot;mentionable&quot; | &quot;assignable&quot;
  user_icon = &quot; &quot;,                        -- user icon
  ghost_icon = &quot;󰊠 &quot;,                       -- ghost icon
  timeline_marker = &quot; &quot;,                  -- timeline marker
  timeline_indent = 2,                   -- timeline indentation
  use_timeline_icons = true,               -- toggle timeline icons
  timeline_icons = {                       -- the default icons based on timelineItems
    commit = &quot;  &quot;,
    label = &quot;  &quot;,
    reference = &quot; &quot;,
    connected = &quot;  &quot;,
    subissue = &quot;  &quot;,
    cross_reference = &quot;  &quot;,
    parent_issue = &quot;  &quot;,
    pinned = &quot;  &quot;,
    milestone = &quot;  &quot;,
    renamed = &quot;  &quot;,
    merged = { &quot;  &quot;, &quot;OctoPurple&quot; },
    closed = {
      closed = { &quot;  &quot;, &quot;OctoRed&quot; },
      completed = { &quot;  &quot;, &quot;OctoPurple&quot; },
      not_planned = { &quot;  &quot;, &quot;OctoGrey&quot; },
      duplicate = { &quot;  &quot;, &quot;OctoGrey&quot; },
    },
    reopened = { &quot;  &quot;, &quot;OctoGreen&quot; },
    assigned = &quot;  &quot;,
    review_requested = &quot;  &quot;,
  },
  right_bubble_delimiter = &quot;&quot;,            -- bubble delimiter
  left_bubble_delimiter = &quot;&quot;,             -- bubble delimiter
  github_hostname = &quot;&quot;,                    -- GitHub Enterprise host
  snippet_context_lines = 4,               -- number or lines around commented lines
  gh_cmd = &quot;gh&quot;,                           -- Command to use when calling Github CLI
  gh_env = {},                             -- extra environment variables to pass on to GitHub CLI, can be a table or function returning a table
  timeout = 5000,                          -- timeout for requests between the remote server
  default_to_projects_v2 = false,          -- use projects v2 for the `Octo card ...` command by default. Both legacy and v2 commands are available under `Octo cardlegacy ...` and `Octo cardv2 ...` respectively.
  ui = {
    use_signcolumn = false,                -- show &quot;modified&quot; marks on the sign column
    use_signstatus = true,                 -- show &quot;modified&quot; marks on the status column
  },
  issues = {
    order_by = {                           -- criteria to sort results of `Octo issue list`
      field = &quot;CREATED_AT&quot;,                -- either COMMENTS, CREATED_AT or UPDATED_AT (https://docs.github.com/en/graphql/reference/enums#issueorderfield)
      direction = &quot;DESC&quot;                   -- either DESC or ASC (https://docs.github.com/en/graphql/reference/enums#orderdirection)
    }
  },
  reviews = {
    auto_show_threads = true,              -- automatically show comment threads on cursor move
    focus             = &quot;right&quot;,           -- focus right buffer on diff open
  },
  runs = {
    icons = {
      pending = &quot;🕖&quot;,
      in_progress = &quot;🔄&quot;,
      failed = &quot;❌&quot;,
      succeeded = &quot;&quot;,
      skipped = &quot;⏩&quot;,
      cancelled = &quot;✖&quot;,
    },
  },
  pull_requests = {
    order_by = {                            -- criteria to sort the results of `Octo pr list`
      field = &quot;CREATED_AT&quot;,                 -- either COMMENTS, CREATED_AT or UPDATED_AT (https://docs.github.com/en/graphql/reference/enums#issueorderfield)
      direction = &quot;DESC&quot;                    -- either DESC or ASC (https://docs.github.com/en/graphql/reference/enums#orderdirection)
    },
    always_select_remote_on_create = false, -- always give prompt to select base remote repo when creating PRs
    use_branch_name_as_title = false        -- sets branch name to be the name for the PR
  },
  notifications = {
    current_repo_only = false,             -- show notifications for current repo only
  },
  file_panel = {
    size = 10,                             -- changed files panel rows
    use_icons = true                       -- use web-devicons in file panel (if false, nvim-web-devicons does not need to be installed)
  },
  colors = {                               -- used for highlight groups (see Colors section below)
    white = &quot;#ffffff&quot;,
    grey = &quot;#2A354C&quot;,
    black = &quot;#000000&quot;,
    red = &quot;#fdb8c0&quot;,
    dark_red = &quot;#da3633&quot;,
    green = &quot;#acf2bd&quot;,
    dark_green = &quot;#238636&quot;,
    yellow = &quot;#d3c846&quot;,
    dark_yellow = &quot;#735c0f&quot;,
    blue = &quot;#58A6FF&quot;,
    dark_blue = &quot;#0366d6&quot;,
    purple = &quot;#6f42c1&quot;,
  },
  mappings_disable_default = false,        -- disable default mappings if true, but will still adapt user mappings
  mappings = {
    runs = {
      expand_step = { lhs = &quot;o&quot;, desc = &quot;expand workflow step&quot; },
      open_in_browser = { lhs = &quot;&amp;lt;C-b&amp;gt;&quot;, desc = &quot;open workflow run in browser&quot; },
      refresh = { lhs = &quot;&amp;lt;C-r&amp;gt;&quot;, desc = &quot;refresh workflow&quot; },
      rerun = { lhs = &quot;&amp;lt;C-o&amp;gt;&quot;, desc = &quot;rerun workflow&quot; },
      rerun_failed = { lhs = &quot;&amp;lt;C-f&amp;gt;&quot;, desc = &quot;rerun failed workflow&quot; },
      cancel = { lhs = &quot;&amp;lt;C-x&amp;gt;&quot;, desc = &quot;cancel workflow&quot; },
      copy_url = { lhs = &quot;&amp;lt;C-y&amp;gt;&quot;, desc = &quot;copy url to system clipboard&quot; },
    },
    issue = {
      close_issue = { lhs = &quot;&amp;lt;localleader&amp;gt;ic&quot;, desc = &quot;close issue&quot; },
      reopen_issue = { lhs = &quot;&amp;lt;localleader&amp;gt;io&quot;, desc = &quot;reopen issue&quot; },
      list_issues = { lhs = &quot;&amp;lt;localleader&amp;gt;il&quot;, desc = &quot;list open issues on same repo&quot; },
      reload = { lhs = &quot;&amp;lt;C-r&amp;gt;&quot;, desc = &quot;reload issue&quot; },
      open_in_browser = { lhs = &quot;&amp;lt;C-b&amp;gt;&quot;, desc = &quot;open issue in browser&quot; },
      copy_url = { lhs = &quot;&amp;lt;C-y&amp;gt;&quot;, desc = &quot;copy url to system clipboard&quot; },
      add_assignee = { lhs = &quot;&amp;lt;localleader&amp;gt;aa&quot;, desc = &quot;add assignee&quot; },
      remove_assignee = { lhs = &quot;&amp;lt;localleader&amp;gt;ad&quot;, desc = &quot;remove assignee&quot; },
      create_label = { lhs = &quot;&amp;lt;localleader&amp;gt;lc&quot;, desc = &quot;create label&quot; },
      add_label = { lhs = &quot;&amp;lt;localleader&amp;gt;la&quot;, desc = &quot;add label&quot; },
      remove_label = { lhs = &quot;&amp;lt;localleader&amp;gt;ld&quot;, desc = &quot;remove label&quot; },
      goto_issue = { lhs = &quot;&amp;lt;localleader&amp;gt;gi&quot;, desc = &quot;navigate to a local repo issue&quot; },
      add_comment = { lhs = &quot;&amp;lt;localleader&amp;gt;ca&quot;, desc = &quot;add comment&quot; },
      add_reply = { lhs = &quot;&amp;lt;localleader&amp;gt;cr&quot;, desc = &quot;add reply&quot; },
      delete_comment = { lhs = &quot;&amp;lt;localleader&amp;gt;cd&quot;, desc = &quot;delete comment&quot; },
      next_comment = { lhs = &quot;]c&quot;, desc = &quot;go to next comment&quot; },
      prev_comment = { lhs = &quot;[c&quot;, desc = &quot;go to previous comment&quot; },
      react_hooray = { lhs = &quot;&amp;lt;localleader&amp;gt;rp&quot;, desc = &quot;add/remove 🎉 reaction&quot; },
      react_heart = { lhs = &quot;&amp;lt;localleader&amp;gt;rh&quot;, desc = &quot;add/remove ❤️ reaction&quot; },
      react_eyes = { lhs = &quot;&amp;lt;localleader&amp;gt;re&quot;, desc = &quot;add/remove 👀 reaction&quot; },
      react_thumbs_up = { lhs = &quot;&amp;lt;localleader&amp;gt;r+&quot;, desc = &quot;add/remove 👍 reaction&quot; },
      react_thumbs_down = { lhs = &quot;&amp;lt;localleader&amp;gt;r-&quot;, desc = &quot;add/remove 👎 reaction&quot; },
      react_rocket = { lhs = &quot;&amp;lt;localleader&amp;gt;rr&quot;, desc = &quot;add/remove 🚀 reaction&quot; },
      react_laugh = { lhs = &quot;&amp;lt;localleader&amp;gt;rl&quot;, desc = &quot;add/remove 😄 reaction&quot; },
      react_confused = { lhs = &quot;&amp;lt;localleader&amp;gt;rc&quot;, desc = &quot;add/remove 😕 reaction&quot; },
    },
    pull_request = {
      checkout_pr = { lhs = &quot;&amp;lt;localleader&amp;gt;po&quot;, desc = &quot;checkout PR&quot; },
      merge_pr = { lhs = &quot;&amp;lt;localleader&amp;gt;pm&quot;, desc = &quot;merge commit PR&quot; },
      squash_and_merge_pr = { lhs = &quot;&amp;lt;localleader&amp;gt;psm&quot;, desc = &quot;squash and merge PR&quot; },
      rebase_and_merge_pr = { lhs = &quot;&amp;lt;localleader&amp;gt;prm&quot;, desc = &quot;rebase and merge PR&quot; },
      merge_pr_queue = { lhs = &quot;&amp;lt;localleader&amp;gt;pq&quot;, desc = &quot;merge commit PR and add to merge queue (Merge queue must be enabled in the repo)&quot; },
      squash_and_merge_queue = { lhs = &quot;&amp;lt;localleader&amp;gt;psq&quot;, desc = &quot;squash and add to merge queue (Merge queue must be enabled in the repo)&quot; },
      rebase_and_merge_queue = { lhs = &quot;&amp;lt;localleader&amp;gt;prq&quot;, desc = &quot;rebase and add to merge queue (Merge queue must be enabled in the repo)&quot; },
      list_commits = { lhs = &quot;&amp;lt;localleader&amp;gt;pc&quot;, desc = &quot;list PR commits&quot; },
      list_changed_files = { lhs = &quot;&amp;lt;localleader&amp;gt;pf&quot;, desc = &quot;list PR changed files&quot; },
      show_pr_diff = { lhs = &quot;&amp;lt;localleader&amp;gt;pd&quot;, desc = &quot;show PR diff&quot; },
      add_reviewer = { lhs = &quot;&amp;lt;localleader&amp;gt;va&quot;, desc = &quot;add reviewer&quot; },
      remove_reviewer = { lhs = &quot;&amp;lt;localleader&amp;gt;vd&quot;, desc = &quot;remove reviewer request&quot; },
      close_issue = { lhs = &quot;&amp;lt;localleader&amp;gt;ic&quot;, desc = &quot;close PR&quot; },
      reopen_issue = { lhs = &quot;&amp;lt;localleader&amp;gt;io&quot;, desc = &quot;reopen PR&quot; },
      list_issues = { lhs = &quot;&amp;lt;localleader&amp;gt;il&quot;, desc = &quot;list open issues on same repo&quot; },
      reload = { lhs = &quot;&amp;lt;C-r&amp;gt;&quot;, desc = &quot;reload PR&quot; },
      open_in_browser = { lhs = &quot;&amp;lt;C-b&amp;gt;&quot;, desc = &quot;open PR in browser&quot; },
      copy_url = { lhs = &quot;&amp;lt;C-y&amp;gt;&quot;, desc = &quot;copy url to system clipboard&quot; },
      goto_file = { lhs = &quot;gf&quot;, desc = &quot;go to file&quot; },
      add_assignee = { lhs = &quot;&amp;lt;localleader&amp;gt;aa&quot;, desc = &quot;add assignee&quot; },
      remove_assignee = { lhs = &quot;&amp;lt;localleader&amp;gt;ad&quot;, desc = &quot;remove assignee&quot; },
      create_label = { lhs = &quot;&amp;lt;localleader&amp;gt;lc&quot;, desc = &quot;create label&quot; },
      add_label = { lhs = &quot;&amp;lt;localleader&amp;gt;la&quot;, desc = &quot;add label&quot; },
      remove_label = { lhs = &quot;&amp;lt;localleader&amp;gt;ld&quot;, desc = &quot;remove label&quot; },
      goto_issue = { lhs = &quot;&amp;lt;localleader&amp;gt;gi&quot;, desc = &quot;navigate to a local repo issue&quot; },
      add_comment = { lhs = &quot;&amp;lt;localleader&amp;gt;ca&quot;, desc = &quot;add comment&quot; },
      add_reply = { lhs = &quot;&amp;lt;localleader&amp;gt;cr&quot;, desc = &quot;add reply&quot; },
      delete_comment = { lhs = &quot;&amp;lt;localleader&amp;gt;cd&quot;, desc = &quot;delete comment&quot; },
      next_comment = { lhs = &quot;]c&quot;, desc = &quot;go to next comment&quot; },
      prev_comment = { lhs = &quot;[c&quot;, desc = &quot;go to previous comment&quot; },
      react_hooray = { lhs = &quot;&amp;lt;localleader&amp;gt;rp&quot;, desc = &quot;add/remove 🎉 reaction&quot; },
      react_heart = { lhs = &quot;&amp;lt;localleader&amp;gt;rh&quot;, desc = &quot;add/remove ❤️ reaction&quot; },
      react_eyes = { lhs = &quot;&amp;lt;localleader&amp;gt;re&quot;, desc = &quot;add/remove 👀 reaction&quot; },
      react_thumbs_up = { lhs = &quot;&amp;lt;localleader&amp;gt;r+&quot;, desc = &quot;add/remove 👍 reaction&quot; },
      react_thumbs_down = { lhs = &quot;&amp;lt;localleader&amp;gt;r-&quot;, desc = &quot;add/remove 👎 reaction&quot; },
      react_rocket = { lhs = &quot;&amp;lt;localleader&amp;gt;rr&quot;, desc = &quot;add/remove 🚀 reaction&quot; },
      react_laugh = { lhs = &quot;&amp;lt;localleader&amp;gt;rl&quot;, desc = &quot;add/remove 😄 reaction&quot; },
      react_confused = { lhs = &quot;&amp;lt;localleader&amp;gt;rc&quot;, desc = &quot;add/remove 😕 reaction&quot; },
      review_start = { lhs = &quot;&amp;lt;localleader&amp;gt;vs&quot;, desc = &quot;start a review for the current PR&quot; },
      review_resume = { lhs = &quot;&amp;lt;localleader&amp;gt;vr&quot;, desc = &quot;resume a pending review for the current PR&quot; },
      resolve_thread = { lhs = &quot;&amp;lt;localleader&amp;gt;rt&quot;, desc = &quot;resolve PR thread&quot; },
      unresolve_thread = { lhs = &quot;&amp;lt;localleader&amp;gt;rT&quot;, desc = &quot;unresolve PR thread&quot; },
    },
    review_thread = {
      goto_issue = { lhs = &quot;&amp;lt;localleader&amp;gt;gi&quot;, desc = &quot;navigate to a local repo issue&quot; },
      add_comment = { lhs = &quot;&amp;lt;localleader&amp;gt;ca&quot;, desc = &quot;add comment&quot; },
      add_reply = { lhs = &quot;&amp;lt;localleader&amp;gt;cr&quot;, desc = &quot;add reply&quot; },
      add_suggestion = { lhs = &quot;&amp;lt;localleader&amp;gt;sa&quot;, desc = &quot;add suggestion&quot; },
      delete_comment = { lhs = &quot;&amp;lt;localleader&amp;gt;cd&quot;, desc = &quot;delete comment&quot; },
      next_comment = { lhs = &quot;]c&quot;, desc = &quot;go to next comment&quot; },
      prev_comment = { lhs = &quot;[c&quot;, desc = &quot;go to previous comment&quot; },
      select_next_entry = { lhs = &quot;]q&quot;, desc = &quot;move to next changed file&quot; },
      select_prev_entry = { lhs = &quot;[q&quot;, desc = &quot;move to previous changed file&quot; },
      select_first_entry = { lhs = &quot;[Q&quot;, desc = &quot;move to first changed file&quot; },
      select_last_entry = { lhs = &quot;]Q&quot;, desc = &quot;move to last changed file&quot; },
      close_review_tab = { lhs = &quot;&amp;lt;C-c&amp;gt;&quot;, desc = &quot;close review tab&quot; },
      react_hooray = { lhs = &quot;&amp;lt;localleader&amp;gt;rp&quot;, desc = &quot;add/remove 🎉 reaction&quot; },
      react_heart = { lhs = &quot;&amp;lt;localleader&amp;gt;rh&quot;, desc = &quot;add/remove ❤️ reaction&quot; },
      react_eyes = { lhs = &quot;&amp;lt;localleader&amp;gt;re&quot;, desc = &quot;add/remove 👀 reaction&quot; },
      react_thumbs_up = { lhs = &quot;&amp;lt;localleader&amp;gt;r+&quot;, desc = &quot;add/remove 👍 reaction&quot; },
      react_thumbs_down = { lhs = &quot;&amp;lt;localleader&amp;gt;r-&quot;, desc = &quot;add/remove 👎 reaction&quot; },
      react_rocket = { lhs = &quot;&amp;lt;localleader&amp;gt;rr&quot;, desc = &quot;add/remove 🚀 reaction&quot; },
      react_laugh = { lhs = &quot;&amp;lt;localleader&amp;gt;rl&quot;, desc = &quot;add/remove 😄 reaction&quot; },
      react_confused = { lhs = &quot;&amp;lt;localleader&amp;gt;rc&quot;, desc = &quot;add/remove 😕 reaction&quot; },
      resolve_thread = { lhs = &quot;&amp;lt;localleader&amp;gt;rt&quot;, desc = &quot;resolve PR thread&quot; },
      unresolve_thread = { lhs = &quot;&amp;lt;localleader&amp;gt;rT&quot;, desc = &quot;unresolve PR thread&quot; },
    },
    submit_win = {
      approve_review = { lhs = &quot;&amp;lt;C-a&amp;gt;&quot;, desc = &quot;approve review&quot;, mode = { &quot;n&quot;, &quot;i&quot; } },
      comment_review = { lhs = &quot;&amp;lt;C-m&amp;gt;&quot;, desc = &quot;comment review&quot;, mode = { &quot;n&quot;, &quot;i&quot; } },
      request_changes = { lhs = &quot;&amp;lt;C-r&amp;gt;&quot;, desc = &quot;request changes review&quot;, mode = { &quot;n&quot;, &quot;i&quot; } },
      close_review_tab = { lhs = &quot;&amp;lt;C-c&amp;gt;&quot;, desc = &quot;close review tab&quot;, mode = { &quot;n&quot;, &quot;i&quot; } },
    },
    review_diff = {
      submit_review = { lhs = &quot;&amp;lt;localleader&amp;gt;vs&quot;, desc = &quot;submit review&quot; },
      discard_review = { lhs = &quot;&amp;lt;localleader&amp;gt;vd&quot;, desc = &quot;discard review&quot; },
      add_review_comment = { lhs = &quot;&amp;lt;localleader&amp;gt;ca&quot;, desc = &quot;add a new review comment&quot;, mode = { &quot;n&quot;, &quot;x&quot; } },
      add_review_suggestion = { lhs = &quot;&amp;lt;localleader&amp;gt;sa&quot;, desc = &quot;add a new review suggestion&quot;, mode = { &quot;n&quot;, &quot;x&quot; } },
      focus_files = { lhs = &quot;&amp;lt;localleader&amp;gt;e&quot;, desc = &quot;move focus to changed file panel&quot; },
      toggle_files = { lhs = &quot;&amp;lt;localleader&amp;gt;b&quot;, desc = &quot;hide/show changed files panel&quot; },
      next_thread = { lhs = &quot;]t&quot;, desc = &quot;move to next thread&quot; },
      prev_thread = { lhs = &quot;[t&quot;, desc = &quot;move to previous thread&quot; },
      select_next_entry = { lhs = &quot;]q&quot;, desc = &quot;move to next changed file&quot; },
      select_prev_entry = { lhs = &quot;[q&quot;, desc = &quot;move to previous changed file&quot; },
      select_first_entry = { lhs = &quot;[Q&quot;, desc = &quot;move to first changed file&quot; },
      select_last_entry = { lhs = &quot;]Q&quot;, desc = &quot;move to last changed file&quot; },
      close_review_tab = { lhs = &quot;&amp;lt;C-c&amp;gt;&quot;, desc = &quot;close review tab&quot; },
      toggle_viewed = { lhs = &quot;&amp;lt;localleader&amp;gt;&amp;lt;space&amp;gt;&quot;, desc = &quot;toggle viewer viewed state&quot; },
      goto_file = { lhs = &quot;gf&quot;, desc = &quot;go to file&quot; },
    },
    file_panel = {
      submit_review = { lhs = &quot;&amp;lt;localleader&amp;gt;vs&quot;, desc = &quot;submit review&quot; },
      discard_review = { lhs = &quot;&amp;lt;localleader&amp;gt;vd&quot;, desc = &quot;discard review&quot; },
      next_entry = { lhs = &quot;j&quot;, desc = &quot;move to next changed file&quot; },
      prev_entry = { lhs = &quot;k&quot;, desc = &quot;move to previous changed file&quot; },
      select_entry = { lhs = &quot;&amp;lt;cr&amp;gt;&quot;, desc = &quot;show selected changed file diffs&quot; },
      refresh_files = { lhs = &quot;R&quot;, desc = &quot;refresh changed files panel&quot; },
      focus_files = { lhs = &quot;&amp;lt;localleader&amp;gt;e&quot;, desc = &quot;move focus to changed file panel&quot; },
      toggle_files = { lhs = &quot;&amp;lt;localleader&amp;gt;b&quot;, desc = &quot;hide/show changed files panel&quot; },
      select_next_entry = { lhs = &quot;]q&quot;, desc = &quot;move to next changed file&quot; },
      select_prev_entry = { lhs = &quot;[q&quot;, desc = &quot;move to previous changed file&quot; },
      select_first_entry = { lhs = &quot;[Q&quot;, desc = &quot;move to first changed file&quot; },
      select_last_entry = { lhs = &quot;]Q&quot;, desc = &quot;move to last changed file&quot; },
      close_review_tab = { lhs = &quot;&amp;lt;C-c&amp;gt;&quot;, desc = &quot;close review tab&quot; },
      toggle_viewed = { lhs = &quot;&amp;lt;localleader&amp;gt;&amp;lt;space&amp;gt;&quot;, desc = &quot;toggle viewer viewed state&quot; },
    },
    notification = {
      read = { lhs = &quot;&amp;lt;localleader&amp;gt;nr&quot;, desc = &quot;mark notification as read&quot; },
      done = { lhs = &quot;&amp;lt;localleader&amp;gt;nd&quot;, desc = &quot;mark notification as done&quot; },
      unsubscribe = { lhs = &quot;&amp;lt;localleader&amp;gt;nu&quot;, desc = &quot;unsubscribe from notifications&quot; },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🤖 Commands&lt;/h2&gt; 
&lt;p&gt;There is only an &lt;code&gt;Octo &amp;lt;object&amp;gt; &amp;lt;action&amp;gt; [arguments]&lt;/code&gt; command: If no command is passed, the argument to &lt;code&gt;Octo&lt;/code&gt; is treated as a URL from where an issue or pr repo and number are extracted.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Object&lt;/th&gt; 
   &lt;th&gt;Action&lt;/th&gt; 
   &lt;th&gt;Arguments&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;issue&lt;/td&gt; 
   &lt;td&gt;close&lt;/td&gt; 
   &lt;td&gt;Close the current issue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;reopen&lt;/td&gt; 
   &lt;td&gt;Reopen the current issue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;create [repo]&lt;/td&gt; 
   &lt;td&gt;Creates a new issue in the current or specified repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;develop&lt;/td&gt; 
   &lt;td&gt;Create and checkout a new branch for an issue in the current repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;edit [repo] 
    &lt;number&gt;&lt;/number&gt;&lt;/td&gt; 
   &lt;td&gt;Edit issue &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; in current or specified repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;list [repo] [key=value] (1)&lt;/td&gt; 
   &lt;td&gt;List all issues satisfying given filter&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;search&lt;/td&gt; 
   &lt;td&gt;Live issue search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;reload&lt;/td&gt; 
   &lt;td&gt;Reload issue. Same as doing &lt;code&gt;e!&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;browser&lt;/td&gt; 
   &lt;td&gt;Open current issue in the browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;url&lt;/td&gt; 
   &lt;td&gt;Copies the URL of the current issue to the system clipboard&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;pin&lt;/td&gt; 
   &lt;td&gt;Pin the current issue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;unpin&lt;/td&gt; 
   &lt;td&gt;Unpin the current issue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pr&lt;/td&gt; 
   &lt;td&gt;list [repo] [key=value] (2)&lt;/td&gt; 
   &lt;td&gt;List all PRs satisfying given filter&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;search&lt;/td&gt; 
   &lt;td&gt;Live issue search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;edit [repo] 
    &lt;number&gt;&lt;/number&gt;&lt;/td&gt; 
   &lt;td&gt;Edit PR &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; in current or specified repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;reopen&lt;/td&gt; 
   &lt;td&gt;Reopen the current PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;create&lt;/td&gt; 
   &lt;td&gt;Creates a new PR for the current branch&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;close&lt;/td&gt; 
   &lt;td&gt;Close the current PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;checkout&lt;/td&gt; 
   &lt;td&gt;Checkout PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;commits&lt;/td&gt; 
   &lt;td&gt;List all PR commits&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;changes&lt;/td&gt; 
   &lt;td&gt;Show all PR changes (diff hunks)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;diff&lt;/td&gt; 
   &lt;td&gt;Show PR diff&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;merge [commit|rebase|squash] [delete|nodelete]&lt;/td&gt; 
   &lt;td&gt;Merge current PR using the specified method&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;ready&lt;/td&gt; 
   &lt;td&gt;Mark a draft PR as ready for review&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;draft&lt;/td&gt; 
   &lt;td&gt;Send a ready PR back to draft&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;checks&lt;/td&gt; 
   &lt;td&gt;Show the status of all checks run on the PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;reload&lt;/td&gt; 
   &lt;td&gt;Reload PR. Same as doing &lt;code&gt;e!&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;browser&lt;/td&gt; 
   &lt;td&gt;Open current PR in the browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;url&lt;/td&gt; 
   &lt;td&gt;Copies the URL of the current PR to the system clipboard&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;sha&lt;/td&gt; 
   &lt;td&gt;Copies the head commit SHA of the current PR to the system clipboard&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;runs&lt;/td&gt; 
   &lt;td&gt;List all workflow runs for the PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;repo&lt;/td&gt; 
   &lt;td&gt;list (3)&lt;/td&gt; 
   &lt;td&gt;List repos user owns, contributes or belong to&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;fork&lt;/td&gt; 
   &lt;td&gt;Fork repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;browser&lt;/td&gt; 
   &lt;td&gt;Open current repo in the browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;url&lt;/td&gt; 
   &lt;td&gt;Copies the URL of the current repo to the system clipboard&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;view&lt;/td&gt; 
   &lt;td&gt;Open a repo by path ({organization}/{name})&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gist&lt;/td&gt; 
   &lt;td&gt;list [repo] [key=value] (4)&lt;/td&gt; 
   &lt;td&gt;List user gists&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;comment&lt;/td&gt; 
   &lt;td&gt;add&lt;/td&gt; 
   &lt;td&gt;Add a new comment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;suggest&lt;/td&gt; 
   &lt;td&gt;Add a new suggestion&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;delete&lt;/td&gt; 
   &lt;td&gt;Delete a comment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;url&lt;/td&gt; 
   &lt;td&gt;Copies the URL of the current comment to the system clipboard&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;reply&lt;/td&gt; 
   &lt;td&gt;Add comment as a reply to the current comment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;thread&lt;/td&gt; 
   &lt;td&gt;resolve&lt;/td&gt; 
   &lt;td&gt;Mark a review thread as resolved&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;unresolve&lt;/td&gt; 
   &lt;td&gt;Mark a review thread as unresolved&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;label&lt;/td&gt; 
   &lt;td&gt;add [label]&lt;/td&gt; 
   &lt;td&gt;Add a label from available label menu&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;remove [label]&lt;/td&gt; 
   &lt;td&gt;Remove a label&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;create [label]&lt;/td&gt; 
   &lt;td&gt;Create a new label&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;delete [label]&lt;/td&gt; 
   &lt;td&gt;Delete an existing label from repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;edit [label]&lt;/td&gt; 
   &lt;td&gt;Edit name or description of an existing label from repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;type&lt;/td&gt; 
   &lt;td&gt;add&lt;/td&gt; 
   &lt;td&gt;Add an issue type from available issue type menu&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;remove&lt;/td&gt; 
   &lt;td&gt;Remove an issueType&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;milestone&lt;/td&gt; 
   &lt;td&gt;add [milestone]&lt;/td&gt; 
   &lt;td&gt;Add a milestone to current Issue or PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;remove&lt;/td&gt; 
   &lt;td&gt;Remove a milestone from current Issue or PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;create [milestone]&lt;/td&gt; 
   &lt;td&gt;Create a new milestone&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;list [repo]&lt;/td&gt; 
   &lt;td&gt;List all milestones for repo or current repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;assignee&lt;/td&gt; 
   &lt;td&gt;add [login]&lt;/td&gt; 
   &lt;td&gt;Assign a user&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;remove [login]&lt;/td&gt; 
   &lt;td&gt;Unassign a user&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;reviewer&lt;/td&gt; 
   &lt;td&gt;add [login]&lt;/td&gt; 
   &lt;td&gt;Assign a PR reviewer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;reaction&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;thumbs_up&lt;/code&gt; | &lt;code&gt;+1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add 👍 reaction&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;thumbs_down&lt;/code&gt; | &lt;code&gt;-1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add 👎 reaction&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;eyes&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add 👀 reaction&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;laugh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add 😄 reaction&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;confused&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add 😕 reaction&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rocket&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add 🚀 reaction&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;heart&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add ❤️ reaction&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hooray&lt;/code&gt; | &lt;code&gt;party&lt;/code&gt; | &lt;code&gt;tada&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add 🎉 reaction&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;card&lt;/td&gt; 
   &lt;td&gt;add&lt;/td&gt; 
   &lt;td&gt;Assign issue/PR to a project new card&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;remove&lt;/td&gt; 
   &lt;td&gt;Delete project card&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;move&lt;/td&gt; 
   &lt;td&gt;Move project card to different project/column&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;review&lt;/td&gt; 
   &lt;td&gt;start&lt;/td&gt; 
   &lt;td&gt;Start a new review&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;submit&lt;/td&gt; 
   &lt;td&gt;Submit the review&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;resume&lt;/td&gt; 
   &lt;td&gt;Edit a pending review for current PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;discard&lt;/td&gt; 
   &lt;td&gt;Deletes a pending review for current PR if any&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;comments&lt;/td&gt; 
   &lt;td&gt;View pending review comments&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;commit&lt;/td&gt; 
   &lt;td&gt;Pick a specific commit to review&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;close&lt;/td&gt; 
   &lt;td&gt;Close the review window and return to the PR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;actions&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Lists all available Octo actions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;search&lt;/td&gt; 
   &lt;td&gt;
    &lt;query&gt;&lt;/query&gt;&lt;/td&gt; 
   &lt;td&gt;Search GitHub for issues and PRs matching the &lt;a href=&quot;https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests&quot;&gt;query&lt;/a&gt; or Discussions with &lt;code&gt;is:discussion&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;run&lt;/td&gt; 
   &lt;td&gt;list&lt;/td&gt; 
   &lt;td&gt;List workflow runs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;notification&lt;/td&gt; 
   &lt;td&gt;list&lt;/td&gt; 
   &lt;td&gt;Shows current unread notifications&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;discussion&lt;/td&gt; 
   &lt;td&gt;list [repo]&lt;/td&gt; 
   &lt;td&gt;List open discussions for current or specified repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;browser&lt;/td&gt; 
   &lt;td&gt;Open the current discussion in the browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;create [repo]&lt;/td&gt; 
   &lt;td&gt;Create discussion for current or specified repo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;reload&lt;/td&gt; 
   &lt;td&gt;Reload the current discussion buffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;close&lt;/td&gt; 
   &lt;td&gt;Close the discussion&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;mark&lt;/td&gt; 
   &lt;td&gt;Mark the discussion comment as answer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;unmark&lt;/td&gt; 
   &lt;td&gt;Unmark the discussion comment as answer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;reopen&lt;/td&gt; 
   &lt;td&gt;Reopen the current discussion&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;search&lt;/td&gt; 
   &lt;td&gt;Search discussions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;parent&lt;/td&gt; 
   &lt;td&gt;add&lt;/td&gt; 
   &lt;td&gt;Add a parent issue to current issue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;remove&lt;/td&gt; 
   &lt;td&gt;Remove the parent issue to current issue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;edit&lt;/td&gt; 
   &lt;td&gt;Edit the parent issue to current issue&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ol start=&quot;0&quot;&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;[repo]&lt;/code&gt;: If repo is not provided, it will be derived from &lt;code&gt;&amp;lt;cwd&amp;gt;/.git/config&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In-menu mappings:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;: Edit Issue&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;: Opens issue in the browser&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;: Copies URL to system clipboard&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-e&amp;gt;&lt;/code&gt;: Copies commit SHA to system clipboard (where applicable)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/graphql/reference/input-objects#issuefilters&quot;&gt;Available filter keys&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;since&lt;/li&gt; 
 &lt;li&gt;createdBy&lt;/li&gt; 
 &lt;li&gt;assignee&lt;/li&gt; 
 &lt;li&gt;mentioned&lt;/li&gt; 
 &lt;li&gt;labels&lt;/li&gt; 
 &lt;li&gt;milestone&lt;/li&gt; 
 &lt;li&gt;states&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;In-menu mappings:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;: Edit PR&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;: Opens PR in the browser&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-o&amp;gt;&lt;/code&gt;: Checkout PR&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;: Copies URL to system clipboard&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-e&amp;gt;&lt;/code&gt;: Copies commit SHA to system clipboard (for commits and PRs)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pwntester/octo.nvim/raw/master/lua/octo/pickers/telescope/provider.lua#L34&quot;&gt;Available filter keys&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;baseRefName&lt;/li&gt; 
 &lt;li&gt;headRefName&lt;/li&gt; 
 &lt;li&gt;labels&lt;/li&gt; 
 &lt;li&gt;states&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;In-menu mappings:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;: View repo&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;: Opens repo in the browser&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;/code&gt;: Copies URL to system clipboard&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;In-menu mappings:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;: Append Gist to buffer &lt;a href=&quot;https://cli.github.com/manual/gh_gist_list&quot;&gt;Available keys&lt;/a&gt;: &lt;code&gt;repo&lt;/code&gt;|&lt;code&gt;public&lt;/code&gt;|&lt;code&gt;secret&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;Users in the assignee and reviewer commands:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;search&lt;/code&gt;: Dynamically search all GitHub users&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;mentionable&lt;/code&gt;: List of &lt;em&gt;mentionable&lt;/em&gt; users in current repo&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;assignable&lt;/code&gt;: List of &lt;em&gt;assignable&lt;/em&gt; users in current repo&lt;/p&gt; &lt;p&gt;Here, &lt;code&gt;search&lt;/code&gt; is the default value and most broad. Both &lt;code&gt;assignable&lt;/code&gt; and &lt;code&gt;mentionable&lt;/code&gt; are specific to the current repo. The &lt;code&gt;assignable&lt;/code&gt; option is more restrictive than &lt;code&gt;mentionable&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📋 PR reviews&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enter review mode for the current branch with &lt;code&gt;Octo review&lt;/code&gt;. Alternatively open the PR (e.g. &lt;code&gt;Octo &amp;lt;PR url&amp;gt;&lt;/code&gt; or &lt;code&gt;Octo pr list&lt;/code&gt; or &lt;code&gt;Octo pr edit &amp;lt;PR number&amp;gt;&lt;/code&gt;) then use &lt;code&gt;Octo review&lt;/code&gt; in the PR buffer to enter review mode for a specific PR.&lt;/li&gt; 
 &lt;li&gt;A new tab will show a panel with changed files and two windows showing the diff on any of them.&lt;/li&gt; 
 &lt;li&gt;Change panel entries with &lt;code&gt;]q&lt;/code&gt; and &lt;code&gt;[q&lt;/code&gt; or by selecting an entry in the window&lt;/li&gt; 
 &lt;li&gt;Add comments with &lt;code&gt;&amp;lt;localleader&amp;gt;ca&lt;/code&gt; or suggestions with &lt;code&gt;&amp;lt;localleader&amp;gt;sa&lt;/code&gt; on single or multiple visual-selected lines 
  &lt;ul&gt; 
   &lt;li&gt;A new buffer will appear in the alternate diff window. The cursor will be positioned in the new buffer&lt;/li&gt; 
   &lt;li&gt;When ready, save the buffer to commit changes to GitHub&lt;/li&gt; 
   &lt;li&gt;Move back to the diff window and move the cursor, the thread buffer will hide&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Hold the cursor on a line with a comment to show a thread buffer with all the thread comments 
  &lt;ul&gt; 
   &lt;li&gt;To modify, delete, react or reply to a comment, move to the window containing the thread buffer&lt;/li&gt; 
   &lt;li&gt;Perform any operations as if you were in a regular issue buffer&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Review pending comments with &lt;code&gt;Octo review comments&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Use 
    &lt;cr&gt;
      to jump to the selected pending comment
    &lt;/cr&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;If you want to review a specific commit, use &lt;code&gt;Octo review commit&lt;/code&gt; to pick a commit. The file panel will get filtered to show only files changed by that commit. Any comments placed on these files will be applied at that specific commit level and will be added to the pending review.&lt;/li&gt; 
 &lt;li&gt;When ready, submit the review with &lt;code&gt;Octo review submit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A new float window will pop up. Enter the top level review comment and exit to normal mode. Then press &lt;code&gt;&amp;lt;C-m&amp;gt;&lt;/code&gt; to submit a comment, &lt;code&gt;&amp;lt;C-a&amp;gt;&lt;/code&gt; to approve it or &lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt; to request changes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🍞 Completion&lt;/h2&gt; 
&lt;p&gt;Octo provides a built-in omnifunc completion for issues, PRs and users that you can trigger using &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&lt;/code&gt;. Alternately, if you use &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;&lt;code&gt;nvim-cmp&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;&lt;code&gt;blink.cmp&lt;/code&gt;&lt;/a&gt; for completion, you can use the &lt;a href=&quot;https://github.com/petertriho/cmp-git/&quot;&gt;&lt;code&gt;cmp-git&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/Kaiser-Yang/blink-cmp-git&quot;&gt;&lt;code&gt;blink-cmp-git&lt;/code&gt;&lt;/a&gt; source to provide issues, PRs, commits and users completion.&lt;/p&gt; 
&lt;p&gt;Also, you can use &lt;a href=&quot;https://github.com/hrsh7th/cmp-emoji&quot;&gt;&lt;code&gt;cmp-emoji&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/moyiz/blink-emoji.nvim&quot;&gt;&lt;code&gt;blink-emoji.nvim&lt;/code&gt;&lt;/a&gt; to get markdown emoji completion.&lt;/p&gt; 
&lt;h2&gt;🎨 Colors&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Linked To&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoNormal&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoCursorLine&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;CursorLine&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoWinSeparator&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;WinSeparator&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoSignColumn&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusColumn&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;SignColumn&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusLine&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;StatusLine&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusLineNC&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;StatusLineNC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoEndOfBuffer&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;EndOfBuffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoFilePanelFileName&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;NormalFloat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoFilePanelSelectedFile&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Type&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoFilePanelPath&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Comment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusAdded&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusUntracked&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusModified&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBlue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusRenamed&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBlue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusCopied&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBlue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusTypeChange&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBlue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusUnmerged&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBlue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusUnknown&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoYellow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusDeleted&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatusBroken&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoDirty&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoIssueId&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;NormalFloat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoIssueTitle&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;PreProc&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoFloat&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;NormalFloat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoTimelineItemHeading&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Comment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoTimelineMarker&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Identifier&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoSymbol&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Comment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoDate&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Comment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoDetailsLabel&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Title&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoDetailsValue&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Identifier&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoMissingDetails&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Comment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoEmpty&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;NormalFloat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;NormalFloat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoUser&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubble&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoUserViewer&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoViewer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoReaction&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubble&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoReactionViewer&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoViewer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoPassingTest&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoFailingTest&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoPullAdditions&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoPullDeletions&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoPullModifications&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGrey&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateOpen&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateClosed&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateCompleted&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoPurple&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateNotPlanned&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGrey&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateDraft&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGrey&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateMerge&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoPurple&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatePending&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoYellow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateApproved&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateChangesRequested&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateDismissed&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateCommented&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBlue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateSubmitted&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateOpenBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubbleGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateClosedBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubbleRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateMergedBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubblePurple&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStatePendingBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubbleYellow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateApprovedBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubbleGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateChangesRequestedBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubbleRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateDismissedBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubbleRed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateCommentedBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubbleBlue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateSubmittedBubble&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoBubbleGreen&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateOpenFloat&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreenFloat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateClosedFloat&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoRedFloat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateMergedFloat&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoPurpleFloat&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;OctoStateDraftFloat&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;OctoGreyFloat&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The term &lt;code&gt;GitHub color&lt;/code&gt; refers to the colors used in the WebUI. The (addition) &lt;code&gt;viewer&lt;/code&gt; means the user of the plugin or more precisely the user authenticated via the &lt;code&gt;gh&lt;/code&gt; CLI tool used to retrieve the data from GitHub.&lt;/p&gt; 
&lt;h2&gt;📺 Demos&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/125701/124568675-76130600-de45-11eb-9944-2607c5863f37.gif&quot; alt=&quot;issues&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/125701/124568138-e8cfb180-de44-11eb-994a-0791d8be63ad.gif&quot; alt=&quot;prs&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;🙋 FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;I get a warning saying &lt;code&gt;Cannot request projects v2, missing scope &#39;read:project&#39;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;That&#39;s expected. The new support for projects v2 support requires the &lt;code&gt;read:project&lt;/code&gt; scope on your GitHub token.&lt;/p&gt; 
&lt;p&gt;You add the scope by using &lt;code&gt;gh auth refresh -s read:project&lt;/code&gt; or you can suppress this warning by setting the following in your config&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
  suppress_missing_scope = {
    projects_v2 = true,
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;How can I disable bubbles for XYZ?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Each text-object that makes use of a bubble (except labels) do use their own highlight group that links per default to the main bubble highlight group. To disable most bubbles at once you can simply link &lt;code&gt;OctoBubble&lt;/code&gt; to &lt;code&gt;Normal&lt;/code&gt;. To only disable them for a certain plain do the same for the specific sub-group (e.g. &lt;code&gt;OctoUser&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Why do my issue titles or markdown syntax do not get highlighted properly?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The title, body and comments of an issue or PR are special as they get special highlighting applied and is an editable section. Due to the latter property it gets the &lt;code&gt;OctoEditable&lt;/code&gt; highlighting via a special signs &lt;code&gt;linehl&lt;/code&gt; setting. This takes precedence over the buffer internal highlights. To only get the background highlighted by the editable section, set &lt;code&gt;OctoEditable&lt;/code&gt; to a highlight with a background color definition only.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Why am I getting authentication error from gh?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This means that are either using a GITHUB_TOKEN to authenticate or &lt;code&gt;gh&lt;/code&gt; is not authenticated.&lt;/p&gt; 
&lt;p&gt;In case of the former, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GITHUB_TOKEN= gh auth login
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... and choose a method to authorise access for &lt;code&gt;gh&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;gh&lt;/code&gt; must store the credentials so it can work in a subshell.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Why am I getting authentication error from gh? Part 2&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is possible that Octo is trying to authenticate against the origin listed in your repository&#39;s config (.git/config) which &lt;em&gt;could be&lt;/em&gt; an &lt;em&gt;ssh alias&lt;/em&gt; to &lt;em&gt;github.com&lt;/em&gt;. To properly let octo.nvim know about the ssh alias, you need to list it in the config per above. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;octo&#39;).setup({
  ssh_aliases = {[&quot;&amp;lt;THE ALIAS YOU HAVE LISTED IN ~/.ssh/config&amp;gt;&quot;] = &quot;github.com&quot;}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Can I use treesitter markdown parser with octo buffers?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Just add the following lines to your TreeSitter config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.treesitter.language.register(&#39;markdown&#39;, &#39;octo&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;How can I filter PRs by filter keys that aren&#39;t available?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can use the search command &lt;code&gt;:Octo search [query]&lt;/code&gt;. The &lt;a href=&quot;https://docs.github.com/en/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax&quot;&gt;search syntax&lt;/a&gt; and available search terms are available in &lt;a href=&quot;https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests#search-by-author&quot;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example to search for PRs with author you can use this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:Octo search is:pr author:pwntester repo:github/codeql
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: You need to provide the &lt;code&gt;repo&lt;/code&gt;, otherwise it will search for every PR by that user.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;How to enable autocompletion for issues/prs (&lt;code&gt;#&lt;/code&gt;) and users (&lt;code&gt;@&lt;/code&gt;)?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Add the following mappings for &lt;code&gt;octo&lt;/code&gt; file type:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;vim.keymap.set(&quot;i&quot;, &quot;@&quot;, &quot;@&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&quot;, { silent = true, buffer = true })&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vim.keymap.set(&quot;i&quot;, &quot;#&quot;, &quot;#&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&quot;, { silent = true, buffer = true })&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;How can I disable default key mappings?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Set &lt;code&gt;mappings_disable_default = true&lt;/code&gt; in user config.&lt;/p&gt; 
&lt;h2&gt;🙌 Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are always welcome!&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/CONTRIBUTING.md&quot;&gt;&lt;code&gt;CONTRIBUTING&lt;/code&gt;&lt;/a&gt; for ways to get started.&lt;/p&gt; 
&lt;p&gt;Please adhere to this project&#39;s &lt;a href=&quot;https://raw.githubusercontent.com/pwntester/octo.nvim/master/CODE_OF_CONDUCT.md&quot;&gt;&lt;code&gt;CODE_OF_CONDUCT&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You are welcome to join the &lt;a href=&quot;https://matrix.to/#/#octo.nvim:matrix.org&quot;&gt;#octo.nvim:matrix.org&lt;/a&gt; chatroom if you need help on anything.&lt;/p&gt; 
&lt;h2&gt;🌟 Credits&lt;/h2&gt; 
&lt;p&gt;The PR review panel is heavily inspired in &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🙏 Say Thanks&lt;/h2&gt; 
&lt;p&gt;If you like this plugin and would like to buy me a coffee, you can!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/pwntester&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-violet.png&quot; alt=&quot;BuyMeACoffee&quot; width=&quot;140&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/pwntester&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/pwntester?style=social&quot; alt=&quot;GitHub Sponsors&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📜 License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://choosealicense.com/licenses/mit/&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
