<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Emacs Lisp Weekly Trending</title>
    <description>Weekly Trending of Emacs Lisp in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:42:29 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>emacs-mirror/emacs</title>
      <link>https://github.com/emacs-mirror/emacs</link>
      <description>&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2025 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; 
&lt;p&gt;This directory tree holds version 31.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; 
&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; 
&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; 
&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; 
&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; 
&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&quot;mailto:bug-gnu-emacs@gnu.org&quot;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; 
&lt;p&gt;See the &quot;Bugs&quot; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&quot;https://savannah.gnu.org/mail/?group=emacs&quot;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&quot;https://lists.gnu.org/&quot;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; 
&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; 
&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; 
&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; 
&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; 
&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; 
&lt;p&gt;There are several subdirectories:&lt;/p&gt; 
&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script. &#39;java&#39; holds the Java code for the Emacs port to Android. &#39;cross&#39; holds Makefiles and an additional copy of gnulib used to build Emacs for Android devices. &#39;exec&#39; holds the source code to several helper executables used to run user-installed programs on Android.&lt;/p&gt; 
&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; 
&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; 
&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; 
&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; 
&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&quot;https://www.gnu.org/licenses/&quot;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jdtsmith/emacs-mac</title>
      <link>https://github.com/jdtsmith/emacs-mac</link>
      <description>&lt;p&gt;Experimental build of emacs-mac for v&gt;=30.1&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;emacs-mac&lt;/h1&gt; 
&lt;p&gt;This is an experimental build of the &lt;a href=&quot;https://bitbucket.org/mituharu/emacs-mac&quot;&gt;emacs-mac&lt;/a&gt; (aka Carbon[^1] Emacs) port of emacs, updated for Emacs v30.2, and Emacs master.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] This is an experimental build of &lt;code&gt;emacs-mac&lt;/code&gt;; there will certainly be bugs. We are looking for feedback and testing from experienced users. If you are familiar with or willing to learn about running new builds of Emacs, including under a debugger, perfect. If you are a Mac developer familiar with ObjC or Mac Window frameworks, even better (get in touch)! Other users should stick to the official NS build or recent v29.4 emacs-mac release for now.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Branch organization and naming are subject to change.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Known working systems:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MacOS 26&lt;/li&gt; 
 &lt;li&gt;MacOS 15 (Sequoia) on ARM64 (M1, M2, M3, M4), X86_64 (Intel)&lt;/li&gt; 
 &lt;li&gt;MacOS 14 (Sonoma) on ARM64 (M1, M3)&lt;/li&gt; 
 &lt;li&gt;MacOS 12 (Monterey) on X86_64 (Intel)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/discussions/categories/show-and-tell&quot;&gt;discussion&lt;/a&gt; for advice on build configurations for your system.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Please start a &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/discussions/categories/show-and-tell&quot;&gt;discussion&lt;/a&gt; to report your build experiences, even if you encounter no problems. Mention your OS version, CPU, which branch you built, and any other relevant details, including the build/configure flags you used.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This build is kept current with the &lt;a href=&quot;https://github.com/emacs-mirror/emacs/tree/emacs-30&quot;&gt;&lt;code&gt;emacs-30&lt;/code&gt;&lt;/a&gt; release branch.&lt;/p&gt; 
&lt;p&gt;For an experimental build synced with Emacs master, see &lt;a href=&quot;https://github.com/jdtsmith/emacs-mac/tree/emacs-mac-gnu_master_exp&quot;&gt;this branch&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Install &amp;amp; Config&lt;/h2&gt; 
&lt;p&gt;See the &lt;code&gt;emacs-mac-30_1_exp&lt;/code&gt; or &lt;code&gt;emacs-mac-gnu_master_exp&lt;/code&gt; branch and the file &lt;code&gt;README-mac&lt;/code&gt; for additional compile instructions.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] On MacOS, &lt;code&gt;gcc&lt;/code&gt; is aliased to the &lt;code&gt;clang&lt;/code&gt; compiler, which is required to build &lt;code&gt;emacs-mac&lt;/code&gt;. Recent &lt;code&gt;gcc&lt;/code&gt; versions either cannot build for the architecture (e.g. Apple Silicon) and/or do not support &lt;a href=&quot;https://en.wikipedia.org/wiki/Blocks_(C_language_extension)&quot;&gt;blocks&lt;/a&gt;, which this build uses heavily.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Briefly:&lt;/p&gt; 
&lt;h3&gt;Install build tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install pkgconf texinfo
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install (optional) libraries&lt;/h3&gt; 
&lt;p&gt;If you&#39;d like to build with tree-sitter support, native-compilation, and RSVG (all recommended), first install the necessary libraries, here demonstrated using HomeBrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install tree-sitter libgccjit librsvg
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configure&lt;/h3&gt; 
&lt;p&gt;You can configure the app either as self-contained (all resources live within the app), or non-self-contained (the default). A self-contained app is recommended. The recommended configuration options are given below; see the file &lt;code&gt;README-mac&lt;/code&gt; for others.&lt;/p&gt; 
&lt;h4&gt;Self-contained&lt;/h4&gt; 
&lt;p&gt;A &lt;em&gt;self-contained&lt;/em&gt; app by default will go into &lt;code&gt;/Applications/Emacs.app&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./autogen.sh
CFLAGS=&quot;-O2 -mcpu=native&quot; ./configure --with-native-compilation --with-tree-sitter --enable-mac-app=yes --enable-mac-self-contained
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can specify another build directory for the self-contained app using &lt;code&gt;--enable-mac-app=/path/to/dir&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Please note the &lt;code&gt;yes&lt;/code&gt; argument to &lt;code&gt;--enable-mac-app=yes&lt;/code&gt;, which is required to build a self-contained app under &lt;code&gt;/Applications&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Non self-contained&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./autogen.sh
CFLAGS=&quot;-O2 -mcpu=native&quot; ./configure --with-native-compilation --with-tree-sitter  
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make -j6 # or however many CPU cores you want to use
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ll find the staging build of the app under &lt;code&gt;mac/&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;p&gt;This step compresses EL files and fully populates the app.&lt;/p&gt; 
&lt;h4&gt;Self-contained&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make install # Installs all resources under /Applications/Emacs.app (or wherever your self-contained build is going)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Non self-contained&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo make install  # installs resources in, e.g., /usr/local/share/emacs/30.2.50
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;No install, e.g. for debug&lt;/h4&gt; 
&lt;p&gt;If you choose not to &lt;code&gt;make install&lt;/code&gt;, but instead want to run the application directly from the &lt;code&gt;mac/&lt;/code&gt; sub-directory, you may need to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;% cd mac/Emacs.app/Contents
% ln -s ../../../native-lisp .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to associate the native lisp files. This is useful for debugging, to quickly rebuild and test, for example (saving the install step). But a &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/emacs-mac/emacs-mac-30_1_exp/#Self-contained&quot;&gt;self-contained app&lt;/a&gt; build is easier, and recommended for most uses.&lt;/p&gt; 
&lt;h2&gt;Tips&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The new builtin &lt;code&gt;pixel-scroll-precision-mode&lt;/code&gt; does not work with &lt;code&gt;emacs-mac&lt;/code&gt;, which has its own flavor of scroll event. Instead, check out &lt;a href=&quot;https://github.com/jdtsmith/ultra-scroll&quot;&gt;&lt;code&gt;ultra-scroll&lt;/code&gt;&lt;/a&gt;, which was designed for &lt;code&gt;emacs-mac&lt;/code&gt; originally.&lt;/li&gt; 
 &lt;li&gt;Some tools want a proper &lt;code&gt;emacs&lt;/code&gt; command. If you build self-contained, you can link &lt;code&gt;/usr/local/bin/emacs&lt;/code&gt; -&amp;gt; &lt;code&gt;/Applications/Emacs.app/Contents/MacOS/Emacs&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Additions&lt;/h2&gt; 
&lt;p&gt;Several additional features and fixes have been added on top of upstream &lt;code&gt;emacs-mac&lt;/code&gt; and Emacs proper.&lt;/p&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &lt;code&gt;New Frame&lt;/code&gt; Dock Menu entry.&lt;/li&gt; 
 &lt;li&gt;Support compiling with non-system versions of CLANG.&lt;/li&gt; 
 &lt;li&gt;New custom variable &lt;code&gt;mac-underwave-thickness&lt;/code&gt; to customize the thickness of squiggly underlines (e.g., as drawn by linters or spell-checkers).&lt;/li&gt; 
 &lt;li&gt;A new &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/pull/21&quot;&gt;full-featured &lt;code&gt;Window&lt;/code&gt; menu&lt;/a&gt; (including tab and tiling support, with default system shortcuts, e.g. &lt;code&gt;C-Fn-left/right/up/down&lt;/code&gt;). Thanks to @rymndhng!&lt;/li&gt; 
 &lt;li&gt;Add a new &lt;code&gt;mac-raise-all-frames&lt;/code&gt; command, also found in the &lt;code&gt;Window&lt;/code&gt; menu (&quot;Bring All to Front&quot;).&lt;/li&gt; 
 &lt;li&gt;A new &lt;code&gt;mac-toggle-frame-full-screen&lt;/code&gt; command for toggling &quot;real&quot; full-screen window display.&lt;/li&gt; 
 &lt;li&gt;Automatically enable Retina 2x support for known high-DPI images.&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/pull/91&quot;&gt;&quot;transparent&quot; title bar&lt;/a&gt;. Thanks to @pkryger!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bug fixes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Avoid crashes when selecting certain fonts from the system font panel.&lt;/li&gt; 
 &lt;li&gt;Guard against using native image API when unavailable.&lt;/li&gt; 
 &lt;li&gt;Prevent zombie &quot;Emacs Web Content&quot; processes &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/issues/9&quot;&gt;on SVG load&lt;/a&gt;, &lt;del&gt;restoring normal WebView SVG rendering for MacOS v14+&lt;/del&gt;. Update: &lt;code&gt;WebView&lt;/code&gt; is deprecated, so this has been reverted and another workaround installed. It&#39;s recommended to build with RSVG (it is enabled by default if the &lt;code&gt;librsvg2&lt;/code&gt; library is found during build).&lt;/li&gt; 
 &lt;li&gt;Fix &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/pull/20&quot;&gt;occasional hangs&lt;/a&gt; when callbacks are invoked on dying threads.&lt;/li&gt; 
 &lt;li&gt;Fix &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/pull/86&quot;&gt;rare occasional hangs&lt;/a&gt; upon waking from sleep with multiple monitors.&lt;/li&gt; 
 &lt;li&gt;Normalized the use of &lt;code&gt;CF|NS_NOESCAPE&lt;/code&gt; to prevent compilation issues and hangs when built with non-system CLANG. See &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/pull/76&quot;&gt;this PR&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Handle cropped PDF images correctly.&lt;/li&gt; 
 &lt;li&gt;Correctly handle pixel-doubled images during allocation (fix regression from FSF upstream).&lt;/li&gt; 
 &lt;li&gt;Fix various compiler warnings related to type casting.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;p&gt;If you get crashes or just want to help with debugging, it would be very useful to run emacs-mac under &lt;code&gt;lldb&lt;/code&gt;, the clang debugger. Here&#39;s how:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Build emacs-mac with debug flags: &lt;pre&gt;&lt;code&gt; CFLAGS=&quot;-O0 -g3&quot; ./configure --with-native-compilation --with-tree-sitter --enable-mac-app=yes
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Link in the &lt;a href=&quot;https://raw.githubusercontent.com/jdtsmith/emacs-mac/emacs-mac-30_1_exp/#no-install-eg-for-debug&quot;&gt;native-lisp directory&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;In an &lt;code&gt;~/.lldbinit&lt;/code&gt; file, add &lt;code&gt;settings set target.load-cwd-lldbinit true&lt;/code&gt;, so Emacs can read the custom lldb commands it has defined.&lt;/li&gt; 
 &lt;li&gt;Start the emacs binary from the &lt;code&gt;src/&lt;/code&gt; directory, like: &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;%lldb ../mac/Emacs.app
&lt;/code&gt;&lt;/pre&gt; Then &lt;code&gt;run&lt;/code&gt; (or better, &lt;code&gt;run -Q&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;Now cause your crash to occur, go &lt;code&gt;up&lt;/code&gt; to the frame of interest, and use &lt;code&gt;xprint&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, etc. on the potentially problematic variables.&lt;/li&gt; 
 &lt;li&gt;You can also try &lt;code&gt;gui&lt;/code&gt; which is a little curses-based terminal GUI inside lldb (slow for me though), or &lt;a href=&quot;https://github.com/realgud/realgud-lldb&quot;&gt;&lt;code&gt;realgud-lldb&lt;/code&gt;&lt;/a&gt; which isn&#39;t very complete but can do some things.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;We are very happy to accept contributions, especially bug fixes and other improvements. Note that, to preserve options for upstreaming, any contributor of substantial code must have valid copyright assignment paperwork with the FSF, and be willing to assign copyright, should that option be taken in the future.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;p&gt;You can read about the issues encountered during the merge of Emacs v30 in the &lt;a href=&quot;https://github.com/jdtsmith/emacs-mac/raw/emacs-mac-30_1_exp/devel_update_notes.org&quot;&gt;debugging notes&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[^1]: Calling this the &quot;Carbon&quot; port is a vestigial nod to its origins back in the pre-OSX days. It is also what &lt;code&gt;M-x emacs-version&lt;/code&gt; says. But &quot;Carbon&quot; is a misnomer now. The ancient Carbon API never supported 64bit applications, and was deprecated and removed by Apple in 2019. A few convenience functions do remain (e.g. &lt;code&gt;Carbon.h&lt;/code&gt;), and these are used by the NS build as well. &lt;strong&gt;Both NS and emacs-mac are Cocoa applications&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dgutov/diff-hl</title>
      <link>https://github.com/dgutov/diff-hl</link>
      <description>&lt;p&gt;Emacs package for highlighting uncommitted changes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About &lt;a href=&quot;https://github.com/dgutov/diff-hl/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/dgutov/diff-hl/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;diff-hl-mode&lt;/code&gt; highlights uncommitted changes on the side of the window, allows you to jump between and revert them selectively.&lt;/p&gt; 
&lt;p&gt;This feature is also known as &quot;source control gutter indicators&quot;.&lt;/p&gt; 
&lt;p&gt;In buffers controlled by Git, you can stage and unstage the changes.&lt;/p&gt; 
&lt;p&gt;For the usage instructions and the list of commands, see the Commentary section inside the file.&lt;/p&gt; 
&lt;p&gt;Tested with Git, Mercurial, Bazaar and SVN. May work with other VC backends, too.&lt;/p&gt; 
&lt;p&gt;The package also contains auxiliary modes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;diff-hl-dired-mode&lt;/code&gt; provides similar functionality in Dired.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;diff-hl-margin-mode&lt;/code&gt; changes the highlighting function to use the margin instead of the fringe.&lt;/li&gt; 
 &lt;li&gt;But if you use a non-graphical terminal, the package will fall back to using the margins anyway, as long as &lt;code&gt;diff-hl-fallback-to-margin&lt;/code&gt; is non-nil and the margin width is non-zero.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;diff-hl-amend-mode&lt;/code&gt; sets the reference revision to the one before recent one. Also, you could use &lt;code&gt;diff-hl-set-reference-rev&lt;/code&gt; to set it to any revision, see its docstring for details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt; implements highlighting changes on the fly.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;diff-hl-show-hunk-mouse-mode&lt;/code&gt; makes fringe and margin react to mouse clicks to show the corresponding hunk. That&#39;s the alternative to using &lt;code&gt;diff-hl-show-hunk&lt;/code&gt; and friends.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;Put this into your init script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(global-diff-hl-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You must also ensure that VC is enabled (e.g. &lt;code&gt;vc-handled-backends&lt;/code&gt; is not nil).&lt;/p&gt; 
&lt;p&gt;Check out the Commentary section in each file for more detailed usage instructions.&lt;/p&gt; 
&lt;h1&gt;Screenshots&lt;/h1&gt; 
&lt;h2&gt;diff-hl-mode&lt;/h2&gt; 
&lt;p&gt;Top window: a buffer in this minor mode, bottom window: the corresponding diff.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot.png&quot; alt=&quot;screenie&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;diff-hl-dired-mode&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot-dired.png&quot; alt=&quot;screenie&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;diff-hl-margin-mode&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot-margin.png&quot; alt=&quot;screenie&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Requirements&lt;/h1&gt; 
&lt;p&gt;Emacs 26.1+.&lt;/p&gt; 
&lt;h1&gt;Notes&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;By default &lt;code&gt;diff-hl-mode&lt;/code&gt; only updates the display when the buffer is in saved state. For a different tradeoff, also enable &lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt;, which makes the updates happen on a timer.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To use an &lt;a href=&quot;http://stackoverflow.com/questions/32365271/whats-the-difference-between-git-diff-patience-and-git-diff-histogram&quot;&gt;alternative diff algorithm&lt;/a&gt; with Git, add a corresponding argument to &lt;code&gt;vc-git-diff-switches&lt;/code&gt;, e.g. &lt;code&gt;(setq vc-git-diff-switches &#39;(&quot;--histogram&quot;))&lt;/code&gt;. Using the &lt;code&gt;diff.algorithm&lt;/code&gt; option doesn&#39;t work &lt;a href=&quot;http://article.gmane.org/gmane.comp.version-control.git/294622&quot;&gt;because&lt;/a&gt; &lt;code&gt;vc-git-diff&lt;/code&gt; calls &lt;code&gt;git diff-index&lt;/code&gt;. &lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt; does not support alternative algorithms, because it uses the external &lt;code&gt;diff&lt;/code&gt; program.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We conflict with other modes when they put indicators on the fringe, such as &lt;a href=&quot;https://github.com/flycheck/flycheck&quot;&gt;Flycheck&lt;/a&gt;. This is rarely a significant problem, since if you&#39;re using such a mode, you&#39;d usually want to fix all errors and warnings before continuing, and then the conflicting indicators go away.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;There&#39;s no fringe when Emacs is running in the console, but the navigation and revert commands still work. Consider turning &lt;code&gt;diff-hl-margin-mode&lt;/code&gt; on, to show the indicators in the margin instead. It also helps avoid the conflict with Flycheck/Flymake even on graphical frames.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Frame-local and buffer-local values of &lt;code&gt;line-spacing&lt;/code&gt; are not supported.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Fringe width up to 16 works best (because we can&#39;t define a bitmap with width above that number).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Integration&lt;/h1&gt; 
&lt;p&gt;If you&#39;re using some package other than &lt;code&gt;vc&lt;/code&gt; to commit changes, it might not run &lt;code&gt;vc-checkin-hook&lt;/code&gt; after commits. In that case, you&#39;ll need to either add &lt;code&gt;diff-hl-update&lt;/code&gt; to the hook it does run, or advise some function that&#39;s called in the buffer after its state has changed.&lt;/p&gt; 
&lt;h2&gt;psvn&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(advice-add &#39;svn-status-update-modeline :after #&#39;diff-hl-update)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Magit&lt;/h2&gt; 
&lt;p&gt;If you&#39;re using a version before 2.4.0, it defines &lt;code&gt;magit-revert-buffer-hook&lt;/code&gt; (or &lt;code&gt;magit-not-reverted-hook&lt;/code&gt;), which we use.&lt;/p&gt; 
&lt;p&gt;When using Magit 2.4 or newer, add this to your init script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(add-hook &#39;magit-post-refresh-hook &#39;diff-hl-magit-post-refresh)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tramp&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;diff-hl&lt;/code&gt; should just work with Tramp. But slow or high latency connections can cause performance problems. If you experience such issues, customize &lt;code&gt;diff-hl-disable-on-remote&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. This will change the behavior of both &lt;code&gt;turn-on-diff-hl-mode&lt;/code&gt; and &lt;code&gt;global-diff-hl-mode&lt;/code&gt; (whichever you prefer to use).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs-evil/evil-collection</title>
      <link>https://github.com/emacs-evil/evil-collection</link>
      <description>&lt;p&gt;A set of keybindings for evil-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Evil Collection #+STARTUP: noindent&lt;/p&gt; 
&lt;p&gt;[[https://github.com/emacs-evil/evil-collection/actions][file:https://github.com/emacs-evil/evil-collection/workflows/CI/badge.svg?branch=master]] [[https://melpa.org/#/evil-collection][file:https://melpa.org/packages/evil-collection-badge.svg]] [[https://stable.melpa.org/#/evil-collection][file:https://stable.melpa.org/packages/evil-collection-badge.svg]]&lt;/p&gt; 
&lt;p&gt;This is a collection of [[https://github.com/emacs-evil/evil][Evil]] bindings for /the parts of Emacs/ that Evil does not cover properly by default, such as &lt;del&gt;help-mode&lt;/del&gt;, &lt;del&gt;M-x calendar&lt;/del&gt;, Eshell and more.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Warning:&lt;/em&gt; Expect some default bindings to change in the future.&lt;/p&gt; 
&lt;p&gt;** Preliminaries&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;del&gt;evil-overriding-maps&lt;/del&gt; is assumed as &lt;del&gt;nil&lt;/del&gt; to reduce redundant &lt;del&gt;w/W/l/f/t&lt;/del&gt; etc evil bindings. See [[https://github.com/emacs-evil/evil-collection/pull/501][Fixup Info-mode]] for example.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;** Goals&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Reduce context switching: As soon as &quot;moving around&quot; gets hardwired to &lt;del&gt;
    &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;, it becomes frustratingly inefficient not to have it everywhere.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Community work: setting up bindings is tremendous work and joining force can only save hours for all of Evil users out there. While not everyone may agree on the chosen bindings, it helps to have something to start with rather than nothing at all. In the end, users are free to override a subset of the proposed bindings to best fit their needs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Consistency: Having all bindings defined in one place allows for enforcing consistency across special modes and coordinating the community work to define a reference implementation.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;** Installation&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Get the package, either from MELPA:&lt;/p&gt; &lt;p&gt;: M-x package-install RET evil-collection RET&lt;/p&gt; &lt;p&gt;Or clone / download this repository and modify your &lt;del&gt;load-path&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (add-to-list &#39;load-path (expand-file-name &quot;/path/to/evil-collection/&quot; user-emacs-directory))&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Register the bindings, either all at once with&lt;/p&gt; &lt;p&gt;: (evil-collection-init)&lt;/p&gt; &lt;p&gt;or mode-by-mode, for instance:&lt;/p&gt; &lt;p&gt;: (with-eval-after-load &#39;calendar (evil-collection-calendar-setup))&lt;/p&gt; &lt;p&gt;or by providing an argument to &lt;del&gt;evil-collection-init&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (evil-collection-init &#39;calendar)&lt;/p&gt; &lt;p&gt;a list can also be provided to &lt;del&gt;evil-collection-init&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (evil-collection-init &#39;(calendar dired calc ediff))&lt;/p&gt; &lt;p&gt;The list of supported modes is configured by &lt;del&gt;evil-collection-mode-list&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;del&gt;evil-collection&lt;/del&gt; assumes &lt;del&gt;evil-want-keybinding&lt;/del&gt; is set to &lt;del&gt;nil&lt;/del&gt; and &lt;del&gt;evil-want-integration&lt;/del&gt; is set to &lt;del&gt;t&lt;/del&gt; before loading &lt;del&gt;evil&lt;/del&gt; and &lt;del&gt;evil-collection&lt;/del&gt;. Note some other packages may load evil (e.g. evil-leader) so bear that in mind when determining when to set the variables.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/emacs-evil/evil-collection/issues/60&quot;&gt;https://github.com/emacs-evil/evil-collection/issues/60&lt;/a&gt; and &lt;a href=&quot;https://github.com/emacs-evil/evil/pull/1087&quot;&gt;https://github.com/emacs-evil/evil/pull/1087&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq evil-want-integration t) ;; This is optional since it&#39;s already set to t by default. (setq evil-want-keybinding nil) (require &#39;evil) (when (require &#39;evil-collection nil t) (evil-collection-init)) #+end_src&lt;/p&gt; 
&lt;p&gt;Here&#39;s another full TLDR &lt;del&gt;use-package&lt;/del&gt; example.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package evil :ensure t :init (setq evil-want-integration t) ;; This is optional since it&#39;s already set to t by default. (setq evil-want-keybinding nil) :config (evil-mode 1))&lt;/p&gt; 
&lt;p&gt;(use-package evil-collection :after evil :ensure t :config (evil-collection-init)) #+end_src&lt;/p&gt; 
&lt;p&gt;NOTE: If you don&#39;t like surprises but still want to use &lt;del&gt;evil-collection-init&lt;/del&gt;, setting &lt;del&gt;evil-collection-mode-list&lt;/del&gt; to nil and adding each mode manually might be a better option.&lt;/p&gt; 
&lt;p&gt;** Configuration Modify &lt;del&gt;evil-collection-mode-list&lt;/del&gt; to disable or add any modes that should be evilified by &lt;del&gt;evil-collection&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;| Variable | Default | Description | |--------------------------------------------+---------+-------------------------------------------------------------------| | evil-collection-calendar-want-org-bindings | nil | Set up Org functions in calendar keymap. | | evil-collection-outline-bind-tab-p | nil | Enable 
 &lt;tab&gt;
  -based bindings in Outline mode. | | evil-collection-term-sync-state-and-mode-p | t | Synchronize insert/normal state with char/line-mode in term-mode. | | evil-collection-setup-minibuffer | nil | Set up Vim style bindings in the minibuffer. | | evil-collection-setup-debugger-keys | t | Set up debugger keys for certain modes. | | evil-collection-want-unimpaired-p | t | Set up unimpaired bindings globally. | | evil-collection-want-find-usages-bindings | t | Bind -find references-, etc to various modes. | | evil-collection-config | * | List of mode specific configurations. | | evil-collection-key-whitelist | nil | List of keys Evil Collection is allowed to bind to. | | evil-collection-key-blacklist | nil | List of keys Evil Collection is not allowed to bind to. | | evil-collection-state-passlist | nil | List of Evil States Evil Collection is allowed to bind to. | | evil-collection-state-denylist | nil | List of Evil States Evil Collection is not allowed to bind to. |
 &lt;/tab&gt;&lt;/p&gt; 
&lt;p&gt;For example, if you want to enable Evil in the minibuffer, you&#39;ll have to turn it on explicitly by customizing &lt;del&gt;evil-collection-setup-minibuffer&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;. Some minibuffer-related packages such as Helm rely on this option.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;use-package&lt;/del&gt; example:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package evil-collection :custom (evil-collection-setup-minibuffer t) :init (evil-collection-init)) #+end_src&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;evil-collection-config&lt;/del&gt; can also be modified to configure specific modes. At the moment, it can be used to defer binding keys to those specific modes in order to improve startup time.&lt;/p&gt; 
&lt;p&gt;** Guidelines&lt;/p&gt; 
&lt;p&gt;The following rules serve as guiding principles to define the set of standard Evil bindings for various modes. Since special modes are by definition structurally incomparable, those rules cannot be expected to be applied universally.&lt;/p&gt; 
&lt;p&gt;The rules are more-or-less sorted by priority.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Don&#39;t bind anything to &lt;del&gt;:&lt;/del&gt; nor &lt;del&gt;
    &lt;escape&gt;&lt;/escape&gt;&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the movement keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;h&lt;/del&gt;, &lt;del&gt;j&lt;/del&gt;, &lt;del&gt;k&lt;/del&gt;, &lt;del&gt;l&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;w&lt;/del&gt;, &lt;del&gt;W&lt;/del&gt;, &lt;del&gt;b&lt;/del&gt;, &lt;del&gt;B&lt;/del&gt;, &lt;del&gt;e&lt;/del&gt;, &lt;del&gt;E&lt;/del&gt;, &lt;del&gt;ge&lt;/del&gt;, &lt;del&gt;gE&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;f&lt;/del&gt;, &lt;del&gt;F&lt;/del&gt;, &lt;del&gt;t&lt;/del&gt;, &lt;del&gt;T&lt;/del&gt;, &lt;del&gt;;&lt;/del&gt;, =,=&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;gg&lt;/del&gt;, &lt;del&gt;G&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;|&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;%&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;+&lt;/del&gt;, &lt;del&gt;-&lt;/del&gt;, &lt;del&gt;0&lt;/del&gt;, &lt;del&gt;^&lt;/del&gt;, &lt;del&gt;$&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-i&lt;/del&gt;, &lt;del&gt;C-o&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the yanking and register keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;y&lt;/del&gt;, &lt;del&gt;Y&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;=&quot;=&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the search keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;/&lt;/del&gt;, &lt;del&gt;?&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;#&lt;/del&gt;, &lt;del&gt;*&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the mark keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;m&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;=&#39;=, =~=&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keep the windowing keys when possible and sensible.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;H&lt;/del&gt;, &lt;del&gt;L&lt;/del&gt;, &lt;del&gt;M&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-e&lt;/del&gt;, &lt;del&gt;C-y&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-f&lt;/del&gt;, &lt;del&gt;C-b&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-d&lt;/del&gt;, &lt;del&gt;C-u&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;C-w&lt;/del&gt;-prefixed bindings.&lt;/li&gt; 
   &lt;li&gt;Some &lt;del&gt;z&lt;/del&gt;-prefixed bindings (see below).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The following keys are free when insert state does not make sense in the current mode:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;a&lt;/del&gt;, &lt;del&gt;A&lt;/del&gt;, &lt;del&gt;i&lt;/del&gt;, &lt;del&gt;I&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;c&lt;/del&gt;, &lt;del&gt;C&lt;/del&gt;, &lt;del&gt;r&lt;/del&gt;, &lt;del&gt;R&lt;/del&gt;, &lt;del&gt;s&lt;/del&gt;, &lt;del&gt;S&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;d&lt;/del&gt;, &lt;del&gt;D&lt;/del&gt;, &lt;del&gt;x&lt;/del&gt;, &lt;del&gt;X&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;o&lt;/del&gt;, &lt;del&gt;O&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;p&lt;/del&gt;, &lt;del&gt;P&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;=&lt;/del&gt;, &lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;J&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;=~=&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Any of those keys can be set to be a prefix key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Prefix keys: &lt;del&gt;g&lt;/del&gt; and &lt;del&gt;z&lt;/del&gt; are the ubiquitous prefix keys.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;g&lt;/del&gt; generally stands for &quot;go&quot; and is best used for movements.&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;z&lt;/del&gt; is used for scrolling, folding, spell-checking and more.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Macro and action keys&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;@&lt;/del&gt;, &lt;del&gt;q&lt;/del&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;.&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure terminal compatibility without sacrificing GUI key bindings.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Tab key 
    &lt;ul&gt; 
     &lt;li&gt;Tab key is recognized as &lt;del&gt;
       &lt;tab&gt;&lt;/tab&gt;&lt;/del&gt; in GUI and &lt;del&gt;TAB&lt;/del&gt; in terminal. &lt;del&gt;TAB&lt;/del&gt; equals &lt;del&gt;C-i&lt;/del&gt;.&lt;/li&gt; 
     &lt;li&gt;&lt;del&gt;C-i&lt;/del&gt; is bound to jumping forward for vim compatibility. If Shift+Tab is not relevant, just bind &lt;del&gt;g TAB&lt;/del&gt; to the function that Tab is bound to. If Shift+Tab is relevant, bind &lt;del&gt;g]&lt;/del&gt; and &lt;del&gt;g TAB&lt;/del&gt; to the function that Tab is bound to, and bind &lt;del&gt;g[&lt;/del&gt; to the function that Shift+Tab is bound to for terminal compatibility.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Enter key 
    &lt;ul&gt; 
     &lt;li&gt;Enter key is recognized as &lt;del&gt;
       &lt;return&gt;&lt;/return&gt;&lt;/del&gt; in GUI and &lt;del&gt;RET&lt;/del&gt; in terminal. &lt;del&gt;RET&lt;/del&gt; equals &lt;del&gt;Ctrl+m&lt;/del&gt;.&lt;/li&gt; 
     &lt;li&gt;Bind only &lt;del&gt;RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt;. Or, bind &lt;del&gt;RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; to the same functions &lt;del&gt;
       &lt;return&gt;&lt;/return&gt;&lt;/del&gt; and &lt;del&gt;
       &lt;m-return&gt;&lt;/m-return&gt;&lt;/del&gt; are bound to.&lt;/li&gt; 
     &lt;li&gt;&lt;del&gt;S-RET&lt;/del&gt; is impossible on terminal. Bind &lt;del&gt;
       &lt;s-return&gt;&lt;/s-return&gt;&lt;/del&gt; and a vacant key to the same function for terminal compatibility.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;** Rationale&lt;/p&gt; 
&lt;p&gt;Many special modes share the same set of similar actions. Those actions should share the same bindings across all modes whenever feasible.&lt;/p&gt; 
&lt;p&gt;*** Motion (&lt;del&gt;[&lt;/del&gt;, &lt;del&gt;]&lt;/del&gt;, &lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;, &lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;, &lt;del&gt;gj&lt;/del&gt;, &lt;del&gt;gk&lt;/del&gt;, &lt;del&gt;C-j&lt;/del&gt;, &lt;del&gt;C-k&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;: Use &lt;del&gt;[-&lt;/del&gt; and &lt;del&gt;]-&lt;/del&gt; prefixed keys for navigation between sections.&lt;/p&gt; &lt;p&gt;If the mode makes no difference between the end of a section and the beginning of the next, use &lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;gj&lt;/del&gt; and &lt;del&gt;gk&lt;/del&gt;: synonym for &lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;. That&#39;s what [[evilmagit][evil-magit]] does.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Question:&lt;/em&gt; Should &lt;del&gt;gj&lt;/del&gt; / &lt;del&gt;gk&lt;/del&gt; rather be synonyms for &lt;del&gt;C-j&lt;/del&gt; / &lt;del&gt;C-k&lt;/del&gt;? They cannot emulate the behaviour of &lt;del&gt;[]&lt;/del&gt; or &lt;del&gt;][&lt;/del&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-j&lt;/del&gt;, &lt;del&gt;C-k&lt;/del&gt;: If there is granularity, i.e. subsections, use &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; to browse them. This reflects [[evilmagit][evil-magit]] and [[evilmu4e][evil-mu4e]] default bindings.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;: If there is no paragraph structure, &lt;del&gt;{&lt;/del&gt; and &lt;del&gt;}&lt;/del&gt; can be used for sub-sectioning.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;: If there is no sentence structure, &lt;del&gt;(&lt;/del&gt; and &lt;del&gt;)&lt;/del&gt; can be used for sub-sectioning.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;HJKL&lt;/del&gt;: &lt;del&gt;hjkl&lt;/del&gt; can be used for atomic movements, but &lt;del&gt;HJKL&lt;/del&gt; can usually not be used because &lt;del&gt;H&lt;/del&gt;, &lt;del&gt;K&lt;/del&gt; and &lt;del&gt;L&lt;/del&gt; are all universal (&lt;del&gt;J&lt;/del&gt; is &lt;del&gt;evil-join&lt;/del&gt; and usually does not make sense in special modes).&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-h&lt;/del&gt; should not be remapped: Since we have &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; for vertical motion, it would make sense to use &lt;del&gt;C-h&lt;/del&gt; and &lt;del&gt;C-l&lt;/del&gt; for horizontal motion. There are some shortcomings though:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;In Vim, &lt;del&gt;C-h&lt;/del&gt; works as backspace, but Evil does not follow that behaviour.&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;In Emacs, it is a prefix key for all help-related commands, and so is &lt;del&gt;
        &lt;f1&gt;&lt;/f1&gt;&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Most importantly, &lt;del&gt;C-h&lt;/del&gt; is too widespread and ubiquitous to be replaced. So we don&#39;t.&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-l&lt;/del&gt;: As a consequence of the former point, &lt;del&gt;C-l&lt;/del&gt; is available.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;M-
      &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;: Those keys are usually free in Evil but still bound to their Emacs default (e.g. &lt;del&gt;M-l&lt;/del&gt; is &lt;del&gt;downcase-word&lt;/del&gt;). Besides, if &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; are already used, having &lt;del&gt;M-j&lt;/del&gt; and &lt;del&gt;M-k&lt;/del&gt; might add up to the confusion.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Quitting (&lt;del&gt;q&lt;/del&gt;, &lt;del&gt;ZQ&lt;/del&gt;, &lt;del&gt;ZZ&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;In Vim, &lt;del&gt;q&lt;/del&gt; is for recording macros. Vim quits with &lt;del&gt;ZZ&lt;/del&gt; or &lt;del&gt;ZQ&lt;/del&gt;. In most Emacs special modes, it stands for quitting while macros are recorded/played with &lt;del&gt;
  &lt;f3&gt;&lt;/f3&gt;&lt;/del&gt; and &lt;del&gt;
  &lt;f4&gt;&lt;/f4&gt;&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;A good rule of thumb would be:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Always bind &lt;del&gt;q&lt;/del&gt;, &lt;del&gt;ZZ&lt;/del&gt; and &lt;del&gt;ZQ&lt;/del&gt; to the mode specific quitting functions. If there is none,&lt;/li&gt; 
 &lt;li&gt;Bind &lt;del&gt;q&lt;/del&gt; and &lt;del&gt;ZZ&lt;/del&gt; to &lt;del&gt;quit-window&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;Bind &lt;del&gt;ZQ&lt;/del&gt; to &lt;del&gt;evil-quit&lt;/del&gt;&lt;/li&gt; 
 &lt;li&gt;If macros don&#39;t make sense in current mode, then &lt;del&gt;@&lt;/del&gt; is available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Refreshing / Reverting (&lt;del&gt;gr&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;gr&lt;/del&gt; is used for refreshing in [[evilmagit][evil-magit]], [[evilmu4e][evil-mu4e]], and some Spacemacs configurations (org-agenda and neotree among others).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;C-l&lt;/del&gt; is traditionally used to refresh the terminal screen. Since there does not seem to be any existing use of it, we leave the binding free for other uses.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Marking&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;m&lt;/del&gt; defaults to &lt;del&gt;evil-set-marker&lt;/del&gt; which might not be very useful in special modes. =&#39;= can still be used as it can jump to other buffers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;m&lt;/del&gt;: Mark or toggle mark, depending on what the mode offers. In visual mode, always mark. With a numeric argument, toggle mark on that many following lines.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;u&lt;/del&gt;: Unmark current selection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;U&lt;/del&gt;: Unmark all.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=&lt;del&gt;=: Toggle all marks. This mirrors the &quot;invert-char&quot; Vim command bound to =&lt;/del&gt;= by default.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;M&lt;/del&gt;: Mark all, if available. Otherwise use =U~=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;*&lt;/del&gt;: Mark-prefix or mark all if current mode has no prefix. &lt;del&gt;*&lt;/del&gt; is traditionally a wildcard.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;%&lt;/del&gt;: Mark regexp.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;x&lt;/del&gt;: Execute action on marks. This mirrors Dired&#39;s binding of &lt;del&gt;x&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If &lt;del&gt;*&lt;/del&gt; is used for marking, then &lt;del&gt;#&lt;/del&gt; is free.&lt;/p&gt; 
&lt;p&gt;Also note that Emacs inconsistently uses &lt;del&gt;u&lt;/del&gt; and &lt;del&gt;U&lt;/del&gt; to unmark.&lt;/p&gt; 
&lt;p&gt;*** Selecting / Filtering / Narrowing / Searching&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;s&lt;/del&gt; and &lt;del&gt;S&lt;/del&gt; seem to be used in some places like [[mu4e][mu4e]].&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;s&lt;/del&gt;: [s]elect/[s]earch/filter candidates according to a pattern.&lt;/li&gt; 
   &lt;li&gt;&lt;del&gt;S&lt;/del&gt;: Remove filter and select all.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;=&lt;/del&gt; is usually free and its significance is obvious. It&#39;s taken for zooming though.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;|&lt;/del&gt; is not free but the pipe symbolic is very tantalizing.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Sorting&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;o&lt;/del&gt;: Change the sort [o]rder.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;O&lt;/del&gt;: Sort in reverse order.&lt;/p&gt; &lt;p&gt;There is no real consensus around which key to bind to sorting. What others do by default:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;package-menu&lt;/del&gt; uses &lt;del&gt;S&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;M-x proced&lt;/del&gt; and Dired use &lt;del&gt;s&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;del&gt;profiler&lt;/del&gt; uses &lt;del&gt;A&lt;/del&gt; and &lt;del&gt;D&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;[[mu4e][mu4e]] uses &lt;del&gt;O&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;[[http://www.nongnu.org/ranger/][ranger]] uses &lt;del&gt;o&lt;/del&gt;, inspired from [[http://mutt.org][Mutt]].&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Go to definition (&lt;del&gt;gd&lt;/del&gt;, &lt;del&gt;gD&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;gd&lt;/del&gt;: [g]o to [d]efinition. This is mostly for programming modes. If there&#39;s a corresponding &#39;pop&#39; action, use &lt;del&gt;C-t&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Go to references, etc (&lt;del&gt;gr&lt;/del&gt;, &lt;del&gt;gA&lt;/del&gt;) When &lt;del&gt;evil-collection-want-find-usages-bindings&lt;/del&gt; is set to t:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;gr&lt;/del&gt;: [g] to [r]eferences. This binding is also used for refresh/reverting modes in non programming modes but is usually empty for programming modes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;gA&lt;/del&gt;: [g]o to [A]ssignments.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Additional bindings: There may be additional binds under this category. Please file a Pull Request if so.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Go to current entity&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;.&lt;/del&gt;: go to current entity (day for calendar, playing track for [[EMMS][EMMS]]). Bind only if more relevant than &lt;del&gt;evil-repeat&lt;/del&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Open thing at point (&lt;del&gt;RET&lt;/del&gt;, &lt;del&gt;S-RET&lt;/del&gt;, &lt;del&gt;M-RET&lt;/del&gt;, &lt;del&gt;go&lt;/del&gt;, &lt;del&gt;gO&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;RET&lt;/del&gt;, &lt;del&gt;S-RET&lt;/del&gt;, &lt;del&gt;M-RET&lt;/del&gt;: Open thing at point in current window, open in other window and display in other window respectively. The latter is like the former with the focus remaining on the current window.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;go&lt;/del&gt;, &lt;del&gt;gO&lt;/del&gt;: When available, same as &lt;del&gt;S-RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; respectively. This is useful in terminals where &lt;del&gt;S-RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; might not work.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Emacs-style jumping (&lt;del&gt;J&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;del&gt;J&lt;/del&gt;: [[mu4e][mu4e]] has &lt;del&gt;j&lt;/del&gt; and [[evil-mu4e][evil-mu4e]] uses &lt;del&gt;J&lt;/del&gt;, so we use &lt;del&gt;J&lt;/del&gt; too.&lt;/p&gt; &lt;p&gt;Some special modes like [[mu4e][mu4e]] and ibuffer offer to &quot;jump&quot; to a different buffer. This sometimes depends on the thing at point.&lt;/p&gt; &lt;p&gt;This is not related to Evil jumps like &lt;del&gt;C-i&lt;/del&gt; and &lt;del&gt;C-o&lt;/del&gt;, nor to &quot;go to definition&quot;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Browse URL (&lt;del&gt;gx&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;gx&lt;/del&gt;: go to URL. This is a default Vim binding.&lt;/p&gt; 
&lt;p&gt;*** Help (&lt;del&gt;?&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;g?&lt;/del&gt; : is the standard key for help related commands.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;?&lt;/del&gt; in places where backward search is not very useful.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** History browsing (&lt;del&gt;C-n&lt;/del&gt;, &lt;del&gt;C-p&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;C-n&lt;/del&gt; and &lt;del&gt;C-p&lt;/del&gt; are standard bindings to browse the history elements.&lt;/p&gt; 
&lt;p&gt;*** Bookmarking&lt;/p&gt; 
&lt;p&gt;?&lt;/p&gt; 
&lt;p&gt;*** REPL (&lt;del&gt;gz&lt;/del&gt;)&lt;/p&gt; 
&lt;p&gt;If the mode has a Go To REPL-type command, set it to &lt;del&gt;gz&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;*** Zooming (&lt;del&gt;+&lt;/del&gt;, &lt;del&gt;-&lt;/del&gt;, &lt;del&gt;=&lt;/del&gt;, &lt;del&gt;0&lt;/del&gt;)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; have obvious meanings.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;0&lt;/del&gt; has a somewhat intuitive meaning, plus it is next to &lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; on QWERTY.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;=&lt;/del&gt; is useful as a synonym for &lt;del&gt;+&lt;/del&gt; because it is the unshifted key of &lt;del&gt;+&lt;/del&gt; on QWERTY.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Debugging&lt;/p&gt; 
&lt;p&gt;When debugging is on, debugger keys takes the most precedence.&lt;/p&gt; 
&lt;p&gt;These keys will be set when there&#39;s an available command for them.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;n&lt;/del&gt; : Step Over&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;i&lt;/del&gt; : Step Into&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;o&lt;/del&gt; : Step Out&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;c&lt;/del&gt; : Continue/Resume Execution&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;L&lt;/del&gt; : Locals&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;t&lt;/del&gt; : Tracing&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;q&lt;/del&gt; : Quit Debugging&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;H&lt;/del&gt; : Continue until Point&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;e&lt;/del&gt; : Evaluate Expression&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;b&lt;/del&gt; : Set Breakpoint&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;u&lt;/del&gt; : Unset Breakpoint&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;&amp;gt;&lt;/del&gt; : Navigate to Next Frame&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;&amp;lt;&lt;/del&gt; : Navigate to Previous Frame&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;g?&lt;/del&gt; : Help&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;J&lt;/del&gt; : Jump to debugger location&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;R&lt;/del&gt; : Restart&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For debugging outside of debugger being on (e.g. setting initial breakpoints), we use similar keys to [[https://github.com/realgud/realgud][realgud]].&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;del&gt;f5&lt;/del&gt; Start/Continue/Resume Execution&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;S-f5&lt;/del&gt; Continue Execution&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Mouse-1&lt;/del&gt; Toggle Breakpoint&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f9&lt;/del&gt; Toggle Breakpoint&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f10&lt;/del&gt; Step Over&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;f11&lt;/del&gt; Step Into&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;S-f11&lt;/del&gt; Step Out&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Editable Buffers&lt;/p&gt; 
&lt;p&gt;For buffers where insert-state doesn&#39;t make sense but buffer can be edited, (e.g. wdired or wgrep), pressing &lt;del&gt;i&lt;/del&gt; will change into editable state.&lt;/p&gt; 
&lt;p&gt;When this editable state is turned on,&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;ZQ&lt;/del&gt; will abort and clear any changes. &lt;del&gt;ZZ&lt;/del&gt; will finish and save any changes. &lt;del&gt;ESC&lt;/del&gt; will exit editable state.&lt;/p&gt; 
&lt;p&gt;*** :q/:wq/etc&lt;/p&gt; 
&lt;p&gt;Modes with commands that can be bound to :q/:wq/etc will have those keys remapped.&lt;/p&gt; 
&lt;p&gt;** Key Translation&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;evil-collection-translate-key&lt;/del&gt; allows binding a key to the definition of another key in the same keymap (comparable to how Vim&#39;s keybindings work). Its arguments are the &lt;del&gt;states&lt;/del&gt; and &lt;del&gt;keymaps&lt;/del&gt; to bind/look up the key(s) in followed optionally by keyword arguments (currently only &lt;del&gt;:destructive&lt;/del&gt;) and key/replacement pairs. &lt;del&gt;states&lt;/del&gt; should be nil for non-evil keymaps, and both &lt;del&gt;states&lt;/del&gt; and &lt;del&gt;keymaps&lt;/del&gt; can be a single symbol or a list of symbols.&lt;/p&gt; 
&lt;p&gt;This function can be useful for making key swaps/cycles en masse. For example, someone who uses an alternate keyboard layout may want to retain the &lt;del&gt;hjkl&lt;/del&gt; positions for directional movement in dired, the calendar, etc.&lt;/p&gt; 
&lt;p&gt;Here&#39;s an example for Colemak of making swaps in a single keymap:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (evil-collection-translate-key nil &#39;evil-motion-state-map ;; colemak hnei is qwerty hjkl &quot;n&quot; &quot;j&quot; &quot;e&quot; &quot;k&quot; &quot;i&quot; &quot;l&quot; ;; add back nei &quot;j&quot; &quot;e&quot; &quot;k&quot; &quot;n&quot; &quot;l&quot; &quot;i&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;Here&#39;s an example of using &lt;del&gt;evil-collection-setup-hook&lt;/del&gt; to cycle the keys for all modes in &lt;del&gt;evil-collection-mode-list&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun my-hjkl-rotation (_mode mode-keymaps &amp;amp;rest _rest) (evil-collection-translate-key &#39;normal mode-keymaps &quot;n&quot; &quot;j&quot; &quot;e&quot; &quot;k&quot; &quot;i&quot; &quot;l&quot; &quot;j&quot; &quot;e&quot; &quot;k&quot; &quot;n&quot; &quot;l&quot; &quot;i&quot;))&lt;/p&gt; 
&lt;p&gt;;; called after evil-collection makes its keybindings (add-hook &#39;evil-collection-setup-hook #&#39;my-hjkl-rotation)&lt;/p&gt; 
&lt;p&gt;(evil-collection-init) #+end_src&lt;/p&gt; 
&lt;p&gt;A more common use case of &lt;del&gt;evil-collection-translate-key&lt;/del&gt; would be for keeping the functionality of some keys that users may bind globally. For example, &lt;del&gt;SPC&lt;/del&gt;, &lt;del&gt;[&lt;/del&gt;, and &lt;del&gt;]&lt;/del&gt; are bound in some modes. If you use these keys as global prefix keys that you never want to be overridden, you&#39;ll want to give them higher priority than other evil keybindings (e.g. those made by &lt;del&gt;(evil-define-key &#39;normal some-map ...)&lt;/del&gt;). To do this, you can create an &quot;intercept&quot; map and bind your prefix keys in it instead of in &lt;del&gt;evil-normal-state-map&lt;/del&gt;:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defvar my-intercept-mode-map (make-sparse-keymap) &quot;High precedence keymap.&quot;)&lt;/p&gt; 
&lt;p&gt;(define-minor-mode my-intercept-mode &quot;Global minor mode for higher precedence evil keybindings.&quot; :global t)&lt;/p&gt; 
&lt;p&gt;(my-intercept-mode)&lt;/p&gt; 
&lt;p&gt;(dolist (state &#39;(normal visual insert)) (evil-make-intercept-map ;; NOTE: This requires an evil version from 2018-03-20 or later (evil-get-auxiliary-keymap my-intercept-mode-map state t t) state))&lt;/p&gt; 
&lt;p&gt;(evil-define-key &#39;normal my-intercept-mode-map (kbd &quot;SPC f&quot;) &#39;find-file) ;; ... #+end_src&lt;/p&gt; 
&lt;p&gt;You can then define replacement keys:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (defun my-prefix-translations (_mode mode-keymaps &amp;amp;rest _rest) (evil-collection-translate-key &#39;normal mode-keymaps &quot;C-SPC&quot; &quot;SPC&quot; ;; these need to be unbound first; this needs to be in same statement &quot;[&quot; nil &quot;]&quot; nil &quot;[[&quot; &quot;[&quot; &quot;]]&quot; &quot;]&quot;))&lt;/p&gt; 
&lt;p&gt;(add-hook &#39;evil-collection-setup-hook #&#39;my-prefix-translations)&lt;/p&gt; 
&lt;p&gt;(evil-collection-init) #+end_src&lt;/p&gt; 
&lt;p&gt;By default, the first invocation of &lt;del&gt;evil-collection-translate-key&lt;/del&gt; will make a backup of the keymap. Each subsequent invocation will look up keys in the backup instead of the original. This means that a call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt; will always have the same behavior even if evaluated multiple times. When &lt;del&gt;:destructive t&lt;/del&gt; is specified, keys are looked up in the keymap as it is currently. This means that a call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt; that swapped two keys would continue to swap/unswap them with each call. Therefore when &lt;del&gt;:destructive t&lt;/del&gt; is used, all cycles/swaps must be done within a single call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt;. To make a comparison to Vim keybindings, &lt;del&gt;:destructive t&lt;/del&gt; is comparable to Vim&#39;s &lt;del&gt;map&lt;/del&gt;, and &lt;del&gt;:destructive nil&lt;/del&gt; is comparable to Vim&#39;s &lt;del&gt;noremap&lt;/del&gt; (where the &quot;original&quot; keybindings are those that existed in the keymap when &lt;del&gt;evil-collection-translate-key&lt;/del&gt; was first called). You&#39;ll almost always want to use the default behavior (especially in your init file). The limitation of &lt;del&gt;:destructive nil&lt;/del&gt; is that you can&#39;t translate a key to another key that was defined after the first &lt;del&gt;evil-collection-translate-key&lt;/del&gt;, so &lt;del&gt;:destructive t&lt;/del&gt; may be useful for interactive experimentation.&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;evil-collection-swap-key&lt;/del&gt; is also provided as a wrapper around &lt;del&gt;evil-collection-translate-key&lt;/del&gt; that allows swapping keys:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (evil-collection-swap-key nil &#39;evil-motion-state-map &quot;;&quot; &quot;:&quot;) ;; is equivalent to (evil-collection-translate-key nil &#39;evil-motion-state-map &quot;;&quot; &quot;:&quot; &quot;:&quot; &quot;;&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;In some cases, keys are bound through &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt; and may need to be translated using &lt;del&gt;evil-collection-translate-minor-mode-key&lt;/del&gt; and/or &lt;del&gt;evil-collection-swap-minor-mode-key&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (evil-collection-swap-minor-mode-key &#39;(normal motion) &#39;(evil-snipe-local-mode evil-snipe-override-local-mode) &quot;k&quot; &quot;s&quot; ;; Set this to t to make this swap the keys everytime ;; this expression is evaluated. :destructive nil)&lt;/p&gt; 
&lt;p&gt;(evil-collection-translate-minor-mode-key &#39;(normal motion) &#39;(evil-snipe-local-mode evil-snipe-override-local-mode) &quot;k&quot; &quot;s&quot; &quot;s&quot; &quot;k&quot; ;; Set this to t to make this swap the keys everytime ;; this expression is evaluated. :destructive nil) #+end_src&lt;/p&gt; 
&lt;p&gt;** Third-party packages&lt;/p&gt; 
&lt;p&gt;Third-party packages are provided by several parties:&lt;/p&gt; 
&lt;p&gt;| Major mode | Evil bindings | |------------+--------------------------| | ledger | [[https://github.com/atheriel/evil-ledger][evil-ledger]] | | lispy | [[https://github.com/noctuid/lispyville][lispyville]] or [[https://github.com/sp3ctum/evil-lispy][evil-lispy]] | | org | [[https://github.com/GuiltyDolphin/org-evil][org-evil]] or [[https://github.com/Somelauw/evil-org-mode][evil-org]] | | markdown | [[https://github.com/Somelauw/evil-markdown][evil-markdown]] |&lt;/p&gt; 
&lt;p&gt;Also &lt;del&gt;evil-collection&lt;/del&gt; has minimal support (&lt;del&gt;TAB&lt;/del&gt;, &lt;del&gt;S-TAB&lt;/del&gt; and sentence/paragraph forwarding) for &lt;del&gt;markdown&lt;/del&gt; and &lt;del&gt;org&lt;/del&gt; if you prefer less packages installed.&lt;/p&gt; 
&lt;p&gt;Should you know any suitable package not mentioned in this list, let us know and file an issue.&lt;/p&gt; 
&lt;p&gt;Other references:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/syl20bnr/spacemacs/blob/master/doc/CONVENTIONS.org#key-bindings-conventions][Spacemacs]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/doomemacs/doomemacs/tree/master/modules/editor/evil][Doom Emacs]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** FAQ&lt;/p&gt; 
&lt;p&gt;*** Making SPC work similarly to [[https://github.com/syl20bnr/spacemacs][spacemacs]].&lt;/p&gt; 
&lt;p&gt;&lt;del&gt;evil-collection&lt;/del&gt; binds over SPC in many packages. To use SPC as a leader key with the [[https://github.com/noctuid/general.el][general]] library:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package general :ensure t :init (setq general-override-states &#39;(insert emacs hybrid normal visual motion operator replace)) :config (general-define-key :states &#39;(normal visual motion) :keymaps &#39;override &quot;SPC&quot; &#39;hydra-space/body)) ;; Replace &#39;hydra-space/body with your leader function. #+end_src&lt;/p&gt; 
&lt;p&gt;See [[https://github.com/noctuid/evil-guide][noctuid&#39;s evil guide]] for other approaches.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unintialized mode maps in &lt;del&gt;evil-collection-setup-hook&lt;/del&gt;. &lt;del&gt;evil-collection-setup-hook&lt;/del&gt; is ran with a list of keymaps passed into it. Some misconfigured modes may not have yet initialized their keymap at this time so the value of the variable may be nil. In that case, an alternative is to use a mode-hook to do any custom settings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (add-hook &#39;evil-collection-setup-hook (lambda (_mode keymaps) (add-hook &#39;ediff-mode-hook (lambda () (... keymaps ...))))) #+end_src&lt;/p&gt; 
&lt;p&gt;View [[https://github.com/emacs-evil/evil-collection/issues/196][196]] for more info. *** Don&#39;t allow Evil-Collection to bind some keys. Look into &lt;del&gt;evil-collection-key-whitelist&lt;/del&gt; and &lt;del&gt;evil-collection-key-blacklist&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes ;; Don&#39;t allow Evil Collection to bind to gfu and gfp. (setq evil-collection-key-blacklist &#39;(&quot;gfu&quot; &quot;gfp&quot;)) #+end_src *** Modes left behind&lt;/p&gt; 
&lt;p&gt;Some modes might still remain unsupported by this package. Should you be missing your &lt;del&gt;
  &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;, please feel free to do a pull request.&lt;/p&gt; 
&lt;p&gt;*** Writing a new binding&lt;/p&gt; 
&lt;p&gt;This [[template][yasnippet template]] can be used to bootstrap a new binding.&lt;/p&gt; 
&lt;p&gt;For example, if we were to want to add &lt;del&gt;evil-collection&lt;/del&gt; support to &lt;del&gt;eldoc&lt;/del&gt;. (e.g.) There is a package that contains:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (provide &#39;eldoc) #+end_src&lt;/p&gt; 
&lt;p&gt;Create a directory named eldoc under [[modes-directory][modes/]]. Create a file named evil-collection-eldoc.el under the newly created eldoc directory. Then use the above template as an example or, using [[yasnippet][yasnippet]], &lt;del&gt;yas-expand&lt;/del&gt; the above template which will result in something like below:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes ;;; evil-collection-eldoc.el --- Bindings for `eldoc&#39; -&lt;em&gt;- lexical-binding: t -&lt;/em&gt;-&lt;/p&gt; 
&lt;p&gt;;; Copyright (C) 2022 James Nguyen&lt;/p&gt; 
&lt;p&gt;;; Author: James Nguyen &lt;a href=&quot;mailto:james@jojojames.com&quot;&gt;james@jojojames.com&lt;/a&gt; ;; Maintainer: James Nguyen &lt;a href=&quot;mailto:james@jojojames.com&quot;&gt;james@jojojames.com&lt;/a&gt; ;; URL: &lt;a href=&quot;https://github.com/emacs-evil/evil-collection&quot;&gt;https://github.com/emacs-evil/evil-collection&lt;/a&gt; ;; Version: 0.0.2 ;; Package-Requires: ((emacs &quot;27.1&quot;)) ;; Keywords: evil, emacs, convenience, tools&lt;/p&gt; 
&lt;p&gt;;; This program is free software; you can redistribute it and/or modify ;; it under the terms of the GNU General Public License as published by ;; the Free Software Foundation, either version 3 of the License, or ;; (at your option) any later version.&lt;/p&gt; 
&lt;p&gt;;; This program is distributed in the hope that it will be useful, ;; but WITHOUT ANY WARRANTY; without even the implied warranty of ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ;; GNU General Public License for more details.&lt;/p&gt; 
&lt;p&gt;;; You should have received a copy of the GNU General Public License ;; along with this program. If not, see &lt;a href=&quot;http://www.gnu.org/licenses/&quot;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;;;; Commentary: ;;; Bindings for eldoc.&lt;/p&gt; 
&lt;p&gt;;;; Code: (require &#39;evil-collection) (require &#39;eldoc nil t)&lt;/p&gt; 
&lt;p&gt;(defvar eldoc-mode-map) (defconst evil-collection-eldoc-maps &#39;(eldoc-mode-map))&lt;/p&gt; 
&lt;p&gt;(defun evil-collection-eldoc-setup () &quot;Set up `evil&#39; bindings for eldoc.&quot; (evil-collection-define-key &#39;normal &#39;eldoc-mode-map ))&lt;/p&gt; 
&lt;p&gt;(provide &#39;evil-collection-eldoc) ;;; evil-collection-eldoc.el ends here #+end_src&lt;/p&gt; 
&lt;p&gt;Finally, add &lt;del&gt;eldoc&lt;/del&gt; to &lt;del&gt;evil-collection--supported-modes&lt;/del&gt;.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (defvar evil-collection--supported-modes &lt;code&gt;( ;; ... eldoc ;; ... ) &quot;List of modes supported by evil-collection. Elements are either target mode symbols or lists which &lt;/code&gt;car&#39; is the mode symbol and `cdr&#39; the packages to register.&quot;) #+end_src ** Submitting Issues&lt;/p&gt; 
&lt;p&gt;When reproducing issues, you can use this emacs -Q recipe.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq user-emacs-directory &quot;~/.emacs.1.d&quot;) (setq package-user-dir (format &quot;%s/elpa/%s/&quot; user-emacs-directory emacs-major-version))&lt;/p&gt; 
&lt;p&gt;(setq package-enable-at-startup nil package-archives &#39;((&quot;melpa&quot; . &quot;&lt;a href=&quot;https://melpa.org/packages/&quot;&gt;https://melpa.org/packages/&lt;/a&gt;&quot;) (&quot;gnu&quot; . &quot;&lt;a href=&quot;http://elpa.gnu.org/packages/&quot;&gt;http://elpa.gnu.org/packages/&lt;/a&gt;&quot;)))&lt;/p&gt; 
&lt;p&gt;(require &#39;package) (package-initialize) (unless (package-installed-p &#39;use-package) (package-refresh-contents) (package-install &#39;use-package)) (require &#39;use-package) (setq use-package-always-ensure t)&lt;/p&gt; 
&lt;p&gt;(use-package evil :ensure t :init (setq evil-want-keybinding nil) :config (evil-mode 1))&lt;/p&gt; 
&lt;p&gt;(use-package evil-collection :after evil :ensure t :config (evil-collection-init)) #+end_src&lt;/p&gt; 
&lt;p&gt;** Contributing We welcome any additional modes that are not already supported.&lt;/p&gt; 
&lt;p&gt;All bindings in &lt;del&gt;evil-collection&lt;/del&gt; are open to change so if there&#39;s a better or more consistent binding, please [[https://github.com/emacs-evil/evil-collection/issues][open an issue]] or [[https://github.com/emacs-evil/evil-collection/pulls][submit a pull request]].&lt;/p&gt; 
&lt;p&gt;Follow [[https://github.com/bbatsov/emacs-lisp-style-guide/][The Emacs Lisp Style Guide]] for coding conventions.&lt;/p&gt; 
&lt;p&gt;[[https://github.com/erlang/otp/wiki/writing-good-commit-messages][Erlang/OTP]] has a good read for helpful commit messages.&lt;/p&gt; 
&lt;p&gt;#+LINK: EMMS &lt;a href=&quot;https://www.gnu.org/software/emms/&quot;&gt;https://www.gnu.org/software/emms/&lt;/a&gt; #+LINK: evilmagit &lt;a href=&quot;https://github.com/emacs-evil/evil-magit&quot;&gt;https://github.com/emacs-evil/evil-magit&lt;/a&gt; #+LINK: evilmu4e &lt;a href=&quot;https://github.com/JorisE/evil-mu4e&quot;&gt;https://github.com/JorisE/evil-mu4e&lt;/a&gt; #+LINK: mu4e &lt;a href=&quot;https://www.djcbsoftware.nl/code/mu/mu4e.html&quot;&gt;https://www.djcbsoftware.nl/code/mu/mu4e.html&lt;/a&gt; #+LINK: yasnippet &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot;&gt;https://github.com/joaotavora/yasnippet&lt;/a&gt; #+LINK: template &lt;a href=&quot;https://github.com/emacs-evil/evil-collection/raw/master/yasnippet_evil-collection&quot;&gt;https://github.com/emacs-evil/evil-collection/blob/master/yasnippet_evil-collection&lt;/a&gt; #+LINK: modes-directory &lt;a href=&quot;https://github.com/emacs-evil/evil-collection/tree/master/modes&quot;&gt;https://github.com/emacs-evil/evil-collection/tree/master/modes&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>syl20bnr/spacemacs</title>
      <link>https://github.com/syl20bnr/spacemacs</link>
      <description>&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&quot;top&quot; id=&quot;fork-destination-box&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Made with Spacemacs&quot; height=&quot;20&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/assets/gplv3.png&quot; alt=&quot;GPLv3 Software&quot; align=&quot;right&quot; height=&quot;20&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.twitter.com/spacemacs&quot;&gt;&lt;img src=&quot;https://i.imgur.com/tXSoThF.png&quot; alt=&quot;Twitter&quot; align=&quot;right&quot; height=&quot;20&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- logo and links --&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&quot; alt=&quot;Spacemacs&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#core-pillars&quot;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&quot;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#screenshots&quot;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION.html&quot;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/DOCUMENTATION#achievements&quot;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://spacemacs.org/doc/FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; 
&lt;!-- badges --&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join Chat.svg&quot; alt=&quot;Gitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/p4MddFu6Ag&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&quot; alt=&quot;Discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&quot;&gt;&lt;img src=&quot;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&quot; alt=&quot;elisp state&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&quot; alt=&quot;Donate&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&quot; alt=&quot;Merchandise&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&quot; alt=&quot;Recommend it&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you &lt;em&gt;don&#39;t&lt;/em&gt; have an existing Emacs setup and want to run Spacemacs as your configuration, and if you have all &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&quot;&gt;prerequisites&lt;/a&gt; installed, you can install Spacemacs with one line:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If &lt;code&gt;HOME&lt;/code&gt; is not set in environment or in registry:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $env:APPDATA/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you do have an existing Emacs configuration, look at the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&quot;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on &lt;em&gt;ergonomics&lt;/em&gt;, &lt;em&gt;mnemonics&lt;/em&gt; and &lt;em&gt;consistency&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; 
&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; 
&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&quot; alt=&quot;spacemacs_python&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;SPC&lt;/kbd&gt; or &lt;kbd&gt;Alt-m&lt;/kbd&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organized in configuration layers following a set of &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions &lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; 
&lt;p&gt;You can also check the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/FAQ.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting Help&lt;/h1&gt; 
&lt;p&gt;If you need help, ask your questions in the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; 
&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&quot;https://irc.gitter.im/&quot;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; 
&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jack of Some&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&quot;&gt;Spacemacs tutorial videos&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;GDQuest&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&quot;&gt;Game Design oriented tutorials &lt;/a&gt; to Spacemacs.&lt;/li&gt; 
 &lt;li&gt;Practicalli&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=jMJ58Gcc1RI&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&quot;&gt;Clojure tutorials based on Spacemacs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Eivind Fonn&#39;s classic &lt;a href=&quot;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&quot;&gt;Spacemacs ABC&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;A package manager if the OS doesn&#39;t have one already.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs is an extension of a popular text editor called &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;. So you&#39;ll need Emacs installed first.&lt;/p&gt; &lt;p&gt;Spacemacs requires Emacs 28.2 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;git&lt;/a&gt; is required to download and update Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Tar, in particular &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt;, is required to install and update Emacs packages used by Spacemacs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; The default font used by Spacemacs is &lt;a href=&quot;https://adobe-fonts.github.io/source-code-pro/&quot;&gt;Source Code Pro&lt;/a&gt;. You may customize your own font settings and choose another font. If you want to use this default font, it must be installed.&lt;/p&gt; &lt;p&gt;Spacemacs also uses fallback fonts to ensure certain Unicode symbols it uses symbols appear correctly. The fonts used are determined by the OS:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Linux: &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;Nanum Gothic&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;macOS: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/arial-unicode-ms&quot;&gt;Arial Unicode MS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Windows: &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/ms-gothic&quot;&gt;MS Gothic&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/typography/font-list/lucida-sans-unicode&quot;&gt;Lucida Sans Unicode&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If the mode-line doesn&#39;t look similar to the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&quot;&gt;picture at the top of this page&lt;/a&gt;, make sure you have the correct fallback font installed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Various commands in Spacemacs needs one of the following line searching program:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep (rg)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;The silver searcher (ag)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beyondgrep/ack3&quot;&gt;ack&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/&quot;&gt;GNU Grep&lt;/a&gt; or &lt;a href=&quot;https://man.openbsd.org/grep&quot;&gt;BSD Grep&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Grep is very slow but it&#39;s widely available on most systems and is used as an fallback option.&lt;/p&gt; &lt;p&gt;We strongly recommend &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; over other line searching programs, for its blazing fast speed. The following subsections helps you to install it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Most Linux distribution ships a package manager already and if this is the case you are all set for this step.&lt;/p&gt; &lt;p&gt;If it doesn&#39;t, you may need to build the softwares mentioned below from their sources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In most distributions, Emacs is installed via an &lt;code&gt;emacs&lt;/code&gt; package from the package manager.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; DO not install &lt;a href=&quot;https://www.xemacs.org&quot;&gt;XEmacs&lt;/a&gt; because it&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs with various &lt;a href=&quot;https://www.emacswiki.org/emacs/EmacsAndXEmacs&quot;&gt;subtle differences&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Some Linux distributions support only Emacs versions older than 28.2. In this case you should &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&quot;&gt;build it from source&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Git is already installed on your system. Otherwise, you should be able to install &lt;code&gt;git&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Very likely Tar is already installed on your system. Otherwise, you should be able to install &lt;code&gt;tar&lt;/code&gt; from your system&#39;s package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If Nerd Fonts and Nanum Gothic are available from your distribution&#39;s package manager, you should install it there.&lt;/p&gt; &lt;p&gt;Otherwise, the generic way to install it is:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Download the latest pre-built &lt;code&gt;TTF&lt;/code&gt; font from &lt;a href=&quot;https://github.com/adobe-fonts/source-code-pro/releases/latest&quot;&gt;https://github.com/adobe-fonts/source-code-pro/releases/latest&lt;/a&gt; and &lt;a href=&quot;https://fonts.google.com/specimen/Nanum+Gothic&quot;&gt;https://fonts.google.com/specimen/Nanum+Gothic&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Extract the archive and move the font files to &lt;code&gt;~/.fonts&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Refresh font cache with:&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;fc-cache -fv
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; If your distribution is listed &lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation=&quot;&gt;here&lt;/a&gt;, follow the instructions. Otherwise, you can download its pre-built binary or build it from source.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The most popular package manager on macOS is &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;, to install it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Several options exist for installing Emacs on macOS:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus&quot;&gt;Emacs Plus&lt;/a&gt; features &lt;a href=&quot;https://github.com/d12frosted/homebrew-emacs-plus#features-explained&quot;&gt;additional functionalities&lt;/a&gt; over base Emacs.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap d12frosted/emacs-plus

# install latest stable release, with Spacemacs icon and native compilation
brew install emacs-plus --with-spacemacs-icon --with-native-comp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will require the latest version of Xcode Command Line tools, which can be downloaded from the &lt;a href=&quot;https://developer.apple.com/download/all/&quot;&gt;Apple Developer Portal&lt;/a&gt; or by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;softwareupdate --all --install --force
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/railwaycat/homebrew-emacsmacport&quot;&gt;Emacs Mac Port&lt;/a&gt; adds native GUI support to Emacs 28. And the full list of features is available &lt;a href=&quot;https://bitbucket.org/mituharu/emacs-mac/src/master/README-mac&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap railwaycat/emacsmacport
brew install emacs-mac
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://emacsformacosx.com/&quot;&gt;Emacs for Mac OS X&lt;/a&gt; is the binary build of GNU Emacs, &lt;em&gt;without&lt;/em&gt; any extra feature.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;macOS ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but there are reports of weird issues so we require &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install gnu-tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; To install Source Code Pro Font:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew tap homebrew/cask-fonts
brew install --cask font-source-code-pro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Arial Unicode MS is shipped with macOS v10.5 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; via &lt;code&gt;Homebrew&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;We recommend using wsl2 with wslg support especially with a pgtk build of emacs and wayland. For the installation please refer to the linux installation section. When running emacs within your wsl2 environment emacs will be handled like any other windows application.&lt;/p&gt; 
&lt;p&gt;If this is not possible you can fallback to a native windows installation, however note that this will create a lot of subtle bugs especially with tls which we will most likely not be able to help with.&lt;/p&gt; 
&lt;p&gt;If you need to follow that path we recommend to at least use a package manager like &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; to install the needed packages.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You can install &lt;a href=&quot;https://scoop.sh&quot;&gt;Scoop&lt;/a&gt; via PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
irm get.scoop.sh | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Emacs can be installed in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add extras
scoop install emacs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install &lt;code&gt;git&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows 10 build 17063 and later ships with &lt;a href=&quot;https://man.openbsd.org/tar&quot;&gt;BSD Tar&lt;/a&gt;, but it&#39;s required to install &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;GNU Tar&lt;/a&gt; instead to avoid possible issues. Alternatively, if you are running an earlier version of Windows, Tar isn&#39;t installed. In either case, you can install GNU Tar via:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install tar
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install Source Code Pro Font in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add KnotUntied_scoop-fonts https://github.com/KnotUntied/scoop-fonts
scoop install sourcecodepro
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;MS Gothic and Lucida Sans Unicode are shipped with Windows 2003 and later so you don&#39;t need to install it manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; You can install &lt;code&gt;ripgrep&lt;/code&gt; in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add main
scoop install ripgrep
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;h2&gt;Default Install&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The default installation downloads Spacemacs to the &lt;code&gt;.emacs.d&lt;/code&gt; directory in your &lt;code&gt;HOME&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;But in the case of Windows, &lt;code&gt;HOME&lt;/code&gt; is not set out-of-box. We recommend you to set it as an environment variable, with the same value as environment variable &lt;code&gt;HOMEPATH&lt;/code&gt;, which usually looks like &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Since Spacemacs will now be downloaded at &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;, if it already exists it&#39;ll be overridden.&lt;/p&gt; &lt;p&gt;Also, if you have either &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; or &lt;code&gt;$HOME/.emacs&lt;/code&gt;, they will appear before Spacemacs in Emacs&#39;s initialization steps. Thus they must be renamed in order for Spacemacs to load correctly.&lt;/p&gt; &lt;p&gt;To backup/rename the aforementioned files/directory, in shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[ -d $HOME/.emacs.d ] &amp;amp;&amp;amp; mv $HOME/.emacs.d $HOME/.emacs.d.bak
[ -f $HOME/.emacs.el ] &amp;amp;&amp;amp; mv $HOME/.emacs.el .emacs.el.bak
[ -f $HOME/.emacs ] &amp;amp;&amp;amp; mv $HOME/.emacs $HOME/.emacs.bak
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or in PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;if( Test-Path -Path $HOME/.emacs.d )
{
    Rename-Item $HOME/.emacs.d $HOME/.emacs.d.bak
}
if( Test-Path -Path $HOME/.emacs.el )
{
    Rename-Item $HOME/.emacs.el $HOME/.emacs.el.bak
}
if( Test-Path -Path $HOME/.emacs )
{
    Rename-Item $HOME/.emacs $HOME/.emacs.bak
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now clone this repository with Git. The following work for both shell and PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/syl20bnr/spacemacs $HOME/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you have a limited internet connection or limited speed:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you can launch Emacs and Spacemacs will be loaded.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Alternative Install Location&lt;/h2&gt; 
&lt;p&gt;To install Spacemacs in a different location, we first need to introduce how Spacemacs is loaded:&lt;/p&gt; 
&lt;p&gt;When Emacs is started, it looks for the init file &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;in a deterministic way&lt;/a&gt;. The &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-install&quot;&gt;default installation&lt;/a&gt; exploits it by occupying &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt; and let Emacs use it as its init file.&lt;/p&gt; 
&lt;p&gt;In other word, in default installation, Emacs find and load &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt;, which is then responsible to load other files in &lt;code&gt;$HOME/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to install Spacemacs to a different location, you need to make sure it&#39;s loaded by Emacs in one of its &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html&quot;&gt;init file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, if you&#39;ve cloned Spacemacs to &lt;code&gt;$HOME/Spacemacs&lt;/code&gt;, and if you use &lt;code&gt;$HOME/.emacs.el&lt;/code&gt; as Emacs init file, then the following lines in &lt;code&gt;$HOME/.emacs.el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; load Spacemacs&#39;s initialization file, &quot;~&quot; is equivalent to &quot;$HOME&quot;
(load-file &quot;~/Spacemacs/init.el&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;First Launch and Configuration&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;After cloning Spacemacs, the first time when you launch Emacs, Spacemacs will automatically install the essential packages it requires. This step is the bootstrap.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once the bootstrap packages are installed, Spacemacs checks whether you have an customization file &lt;code&gt;$HOME/.spacemacs&lt;/code&gt;, known as &lt;code&gt;dotspacemacs&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If it already exists, Spacemacs loads it as the configuration.&lt;/li&gt; 
   &lt;li&gt;Otherwise, you need to answer a few questions and Spacemacs will generate the &lt;code&gt;dotspacemacs&lt;/code&gt; file for you.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If you are new to Emacs and/or Spacemacs, it&#39;s fine to just accept the default choices. They can be changed in the &lt;code&gt;dotspacemacs&lt;/code&gt; file later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spacemacs will download and install remaining packages it will require, according to your &lt;code&gt;dotspacemacs&lt;/code&gt;. When the all the packages have been installed, restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dotspacemacs&lt;/code&gt; is the configuration file for Spacemacs, it&#39;s self explanatory and is written in Emacs Lisp. Read &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/DOCUMENTATION.org&quot;&gt;general documentation&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/QUICK_START.org&quot;&gt;quick start guide&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In case you want to store your &lt;code&gt;dotspacemacs&lt;/code&gt; at another location, say under &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;First set the environment variable &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Move &lt;code&gt;$HOME/.spacemacs&lt;/code&gt; to &lt;code&gt;$HOME/.spacemacs.d/init.el&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;In other word, set &lt;code&gt;SPACEMACSDIR&lt;/code&gt; to the parent directory of your &lt;code&gt;dotspacemacs&lt;/code&gt;, and move &lt;code&gt;dotspacemacs&lt;/code&gt; to the said directory.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Spacemacs logo&lt;/h2&gt; 
&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&quot;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&quot;&gt;this .desktop file&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, by default &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For macOS users, you need to &lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;download the .icns version of the logo&lt;/a&gt; and simply &lt;a href=&quot;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&quot;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS, securely installing Emacs packages may fail. If this happens to you please update your OS and Emacs. If you are behind a company proxy please trust the company firewall cert. We do not longer support disabling https due to security reasons.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows)&lt;/em&gt; If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;From Properties select the Tab “Security”,&lt;/li&gt; 
   &lt;li&gt;Select the button “Advanced”,&lt;/li&gt; 
   &lt;li&gt;Select the Tab “Owner”&lt;/li&gt; 
   &lt;li&gt;Change the owner to your account name&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(&lt;em&gt;Windows&lt;/em&gt;) The period (dot) before a file or folder name means that it&#39;s a hidden file or folder. To show hidden files and folders:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Press the Windows key&lt;/li&gt; 
   &lt;li&gt;Type &lt;code&gt;File explorer options&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; 
   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Update&lt;/h1&gt; 
&lt;p&gt;Spacemacs relies solely on a rolling update scheme based on the latest changes available. To update Spacemacs, simply pull the latest changes from the &lt;code&gt;develop&lt;/code&gt; branch:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git pull --rebase
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;After updating Spacemacs, you should also check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button, or use the convenient keybinding &lt;kbd&gt;SPC f e U&lt;/kbd&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Upgrading from the deprecated &lt;code&gt;master&lt;/code&gt; branch&lt;/h2&gt; 
&lt;p&gt;If you are still on the old &lt;code&gt;master&lt;/code&gt; branch (i.e., if &lt;code&gt;git branch --show-current&lt;/code&gt; shows &lt;code&gt;master&lt;/code&gt; instead of &lt;code&gt;develop&lt;/code&gt;), you need to &lt;a href=&quot;https://practical.li/spacemacs/reference/switch-to-develop/&quot;&gt;upgrade to &lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; first.&lt;/p&gt; 
&lt;h1&gt;Quotes&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/ashnur&quot;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis
on the deck as a freerider.»
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&quot;&gt;Quote&lt;/a&gt; by &lt;a href=&quot;https://github.com/deuill&quot;&gt;deuill&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT

 That is all»
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Contributions&lt;/h1&gt; 
&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; 
&lt;p&gt;Before contributing, be sure to consult the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&quot;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/CONVENTIONS.org&quot;&gt;conventions&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Communities&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emacs.stackexchange.com/questions/tagged/spacemacs&quot;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/spacemacs&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; 
&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/intellimacs&quot;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoIeni/spaceclipse&quot;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SpaceVim/SpaceVim&quot;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/VSpaceCode/VSpaceCode&quot;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the initialization and core files&lt;/li&gt; 
 &lt;li&gt;all the layer files&lt;/li&gt; 
 &lt;li&gt;the documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nashamri/spacemacs-logo&quot;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&quot;https://github.com/nashamri&quot;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; 
&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&quot;https://gitter.im/syl20bnr/spacemacs&quot;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; 
&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&quot;https://shop.spreadshirt.com/spacemacs-shop&quot;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&quot;https://salt.bountysource.com/teams/spacemacs&quot;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&quot;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&quot;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you used Spacemacs in a project, and you want to show that fact, you can use the Spacemacs badge: &lt;a href=&quot;https://spacemacs.org&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&quot; alt=&quot;Built with Spacemacs&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://spacemacs.org)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;https://spacemacs.org&quot;&amp;gt;&amp;lt;img alt=&quot;Built with Spacemacs&quot; src=&quot;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-org&quot;&gt;[[https://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>doomemacs/doomemacs</title>
      <link>https://github.com/doomemacs/doomemacs</link>
      <description>&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Doom Emacs&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; • &lt;a href=&quot;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&quot;&gt;Screenshots&lt;/a&gt; • &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&quot; alt=&quot;Made with Doom Emacs&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Supports-Emacs_27.1%E2%80%9330.2-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&quot; alt=&quot;Supports Emacs 27.1–30.2&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/last-commit/doomemacs/doomemacs?style=flat-square&quot; alt=&quot;Latest commit&quot; /&gt;&lt;/p&gt; 
 &lt;!-- ![Build status: master](https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square) --&gt; 
 &lt;p&gt;&lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&quot; alt=&quot;Discord Server&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://doomemacs.org/discuss&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/doomemacs/community?label=Discussions&amp;amp;logo=github&amp;amp;style=flat-square&quot; alt=&quot;Discussions board&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&quot; alt=&quot;Doom Emacs Screenshot&quot; /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&quot;&gt;Getting help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;a href=&quot;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&quot; align=&quot;right&quot; /&gt; &lt;/a&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Doom is a configuration framework for &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; 
&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; 
 &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; 
 &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; 
 &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; 
 &lt;li&gt;A declarative &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&quot;https://github.com/radian-software/straight.el&quot;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; 
 &lt;li&gt;Optional vim emulation powered by &lt;a href=&quot;https://github.com/emacs-evil/evil&quot;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&quot;https://github.com/easymotion/vim-easymotion&quot;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&quot;https://github.com/tpope/vim-unimpaired&quot;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&quot;&gt;more&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode&quot;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&quot;https://github.com/joaotavora/eglot&quot;&gt;eglot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; 
 &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; 
 &lt;li&gt;A Spacemacs-esque &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&quot;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; 
 &lt;li&gt;A rule-based &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&quot;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; 
 &lt;li&gt;Per-file indentation style detection and &lt;a href=&quot;http://editorconfig.org/&quot;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; 
 &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; and &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;ivy&lt;/a&gt; or &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; 
 &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; 
 &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Prerequisites&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Required:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;GNU Emacs 27.1–30.2 
    &lt;ul&gt; 
     &lt;li&gt;30.2 is recommended (fastest and most stable)&lt;/li&gt; 
     &lt;li&gt;Doom&#39;s modules require &amp;gt;=28.1 
      &lt;ul&gt; 
       &lt;li&gt;Tree-sitter support requires &amp;gt;= 29.1&lt;/li&gt; 
       &lt;li&gt;JS(X)/TS(X) support is far better on &amp;gt;= 30.1 (w/ tree-sitter)&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;Doom&#39;s core requires &amp;gt;=27.1&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Git &amp;gt;= 2.23&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; &amp;gt;= 11.0&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optional, but recommended:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; 7.3.0+ (used to improve file indexing performance)&lt;/li&gt; 
   &lt;li&gt;GNU variants of &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, and &lt;code&gt;tar&lt;/code&gt; (on MacOS and BSD *nix)&lt;/li&gt; 
   &lt;li&gt;Symbola font (Emacs&#39; fallback font for glyphs it can&#39;t display)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Unstable and pre-release builds of Emacs -- which end in &lt;code&gt;.50&lt;/code&gt;, &lt;code&gt;.60&lt;/code&gt;, or &lt;code&gt;.9X&lt;/code&gt; (e.g. &lt;code&gt;28.1.91&lt;/code&gt;) -- &lt;strong&gt;are not officially supported&lt;/strong&gt;. There &lt;em&gt;is&lt;/em&gt; some effort to support Emacs HEAD, however. &lt;a href=&quot;https://discourse.doomemacs.org/t/3241&quot;&gt;Follow this Discourse post&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Doom is comprised of &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&quot;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Install&lt;/h1&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&quot;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; 
&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.config/emacs/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Roadmap&lt;/h1&gt; 
&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doomemacs.org/roadmap&quot;&gt;Development Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://doomemacs.org/packages-under-review&quot;&gt;Packages under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orgs/doomemacs/projects/7&quot;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; 
 &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&quot;&gt;Our documentation&lt;/a&gt; covers many use cases. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&quot;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&quot;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&quot;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&quot;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&quot;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&quot;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; 
   &lt;li&gt;Your issue may be documented in the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: 
  &lt;ul&gt; 
   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; 
   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href=&quot;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&quot;&gt;FAQ&lt;/a&gt; or &lt;a href=&quot;https://github.com/doomemacs/community?tab=readme-ov-file#frequently-asked-questions&quot;&gt;Community FAQs&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; 
 &lt;li&gt;Search &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues&quot;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contribute&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bbatsov/emacs-lisp-style-guide&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&quot; alt=&quot;Elisp styleguide&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&quot; alt=&quot;Donate on liberapay&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/hlissner/10&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&quot; alt=&quot;Donate on paypal&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&quot;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&quot;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; 
 &lt;li&gt;Don&#39;t hesitate to &lt;a href=&quot;https://github.com/doomemacs/doomemacs/issues/new/choose&quot;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; 
 &lt;li&gt;Hop on &lt;a href=&quot;https://doomemacs.org/discord&quot;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&quot;https://liberapay.com/hlissner/donate&quot;&gt;liberapay&lt;/a&gt; or &lt;a href=&quot;https://paypal.me/hlissner/10&quot;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>mhayashi1120/Emacs-wgrep</title>
      <link>https://github.com/mhayashi1120/Emacs-wgrep</link>
      <description>&lt;p&gt;Writable grep buffer and apply the changes to files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wgrep.el&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/mhayashi1120/Emacs-wgrep/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/mhayashi1120/Emacs-wgrep/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Summary:&lt;/h2&gt; 
&lt;p&gt;wgrep allows you to edit a grep buffer and apply those changes to the file buffer like &lt;code&gt;sed&lt;/code&gt; interactively. No need to learn sed script, just learn Emacs.&lt;/p&gt; 
&lt;h2&gt;Install:&lt;/h2&gt; 
&lt;p&gt;Put this file into load-path&#39;ed directory, and byte compile it if desired. And put the following expression into your ~/.emacs.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(require &#39;wgrep)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage:&lt;/h2&gt; 
&lt;p&gt;You can edit the text in the &lt;em&gt;grep&lt;/em&gt; buffer after typing &lt;code&gt;C-c C-p&lt;/code&gt; . After that the changed text is highlighted. The following keybindings are defined:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-e&lt;/code&gt;: Apply the changes to file buffers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-u&lt;/code&gt;: All changes are unmarked and ignored.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-d&lt;/code&gt;: Mark as delete to current line (including newline).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-r&lt;/code&gt;: Remove the changes in the region (these changes are not applied to the files. Of course, the remaining changes can still be applied to the files.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: Toggle read-only area.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-k&lt;/code&gt;: Discard all changes and exit.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;C-x C-q&lt;/code&gt;: Exit wgrep mode.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To save all buffers that wgrep has changed, run&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;M-x wgrep-save-all-buffers
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;To save buffer automatically when &lt;code&gt;wgrep-finish-edit&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;(setq wgrep-auto-save-buffer t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can change the default key binding to switch to wgrep.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;(setq wgrep-enable-key &quot;r&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;To apply all changes regardless of whether or not buffer is read-only.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;(setq wgrep-change-readonly-file t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Trivial features:&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;wdired.el like interface.&lt;/li&gt; 
 &lt;li&gt;Support GNU grep &lt;code&gt;--context&lt;/code&gt; (&lt;code&gt;-A&lt;/code&gt; &lt;code&gt;-B&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt;) option.&lt;/li&gt; 
 &lt;li&gt;Can handle too many files.&lt;/li&gt; 
 &lt;li&gt;Can handle newline insertion in &lt;em&gt;grep&lt;/em&gt; buffer.&lt;/li&gt; 
 &lt;li&gt;Delete whole line include newline.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Similar software:&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/sed/&quot;&gt;GNU sed&lt;/a&gt; &lt;a href=&quot;https://github.com/syohex/emacs-helm-ag&quot;&gt;helm-ag&lt;/a&gt; has a similar feature.&lt;/p&gt; 
&lt;h2&gt;History:&lt;/h2&gt; 
&lt;p&gt;This program was forked from Matsushita Akihisa&#39;s &lt;a href=&quot;http://www.bookshelf.jp/elc/grep-edit.el&quot;&gt;grep-edit.el v2.11&lt;/a&gt;. As this website is now inaccessible, &lt;a href=&quot;https://www.emacswiki.org/emacs/grep-edit.el&quot;&gt;emacswiki.org&#39;s&lt;/a&gt; copy may be consulted.&lt;/p&gt; 
&lt;p&gt;Imported version can be downloaded from this orphan commit: &lt;a href=&quot;https://github.com/mhayashi1120/Emacs-wgrep/tree/import-original-author/&quot;&gt;https://github.com/mhayashi1120/Emacs-wgrep/tree/import-original-author/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Following added implementations and differences.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support GNU grep context option -A -B and -C&lt;/li&gt; 
 &lt;li&gt;Some bugfix. (wrong coloring text etc..)&lt;/li&gt; 
 &lt;li&gt;wdired.el like interface.&lt;/li&gt; 
 &lt;li&gt;Remove all advice.&lt;/li&gt; 
 &lt;li&gt;Bind to local variables. (grep-a-lot.el works well)&lt;/li&gt; 
 &lt;li&gt;After save buffer, colored face will be removed.&lt;/li&gt; 
 &lt;li&gt;Change face easy to see.&lt;/li&gt; 
 &lt;li&gt;Reinforce checking error.&lt;/li&gt; 
 &lt;li&gt;Support removing whole line include new-line.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>magit/magit</title>
      <link>https://github.com/magit/magit</link>
      <description>&lt;p&gt;It&#39;s Magit! A Git Porcelain inside Emacs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt;
 &lt;img src=&quot;https://magit.vc/assets/magit-168x200px.png&quot; /&gt;
&lt;/div&gt; 
&lt;h2 align=&quot;center&quot;&gt;A Git Porcelain inside Emacs&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://magit.vc&quot;&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://magit.vc/manual&quot;&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://magit.vc/manual/magit/FAQ.html&quot;&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/magit/magit/wiki&quot;&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://emacs.ch/@tarsius&quot;&gt;&lt;b&gt;mastodon&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align=&quot;justify&quot;&gt; Magit is an interface to the version control system &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt;, implemented as an &lt;a href=&quot;https://www.gnu.org/software/emacs&quot;&gt;Emacs&lt;/a&gt; package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. &lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align=&quot;center&quot;&gt;
  Keeping its users 
 &lt;a href=&quot;https://magit.vc/quotes/&quot;&gt;this excited&lt;/a&gt; is 
 &lt;a href=&quot;https://magit.vc/stats/magit/authors.html#cumulated_added_lines_of_code_per_author&quot;&gt; a lot of work &lt;/a&gt;. If Magit makes you 
 &lt;br /&gt; more productive too, then 
 &lt;b&gt;please consider making a donation&lt;/b&gt;. 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/sponsors/tarsius/&quot;&gt; &lt;img title=&quot;Sponsor my work using Github Sponsors&quot; alt=&quot;Sponsor my work using Github Sponsors&quot; src=&quot;https://magit.vc/assets/donate/github-sponsors-50px.png&quot; /&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; 
 &lt;a href=&quot;https://liberapay.com/magit/&quot;&gt; &lt;img title=&quot;Sponsor my work using Liberapay&quot; alt=&quot;Sponsor my work using Liberapay&quot; src=&quot;https://magit.vc/assets/donate/liberapay-50px.png&quot; /&gt;&lt;/a&gt; 
 &lt;br /&gt; 
 &lt;a href=&quot;https://opencollective.com/magit/&quot;&gt; &lt;img title=&quot;Sponsor my work using Opencollective&quot; alt=&quot;Sponsor my work using Opencollective&quot; src=&quot;https://magit.vc/assets/donate/opencollective-50px.png&quot; /&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; 
 &lt;a href=&quot;https://magit.vc/donate/paypal.html&quot;&gt; &lt;img title=&quot;Sponsor my work using PayPal&quot; alt=&quot;Sponsor my work using PayPal&quot; src=&quot;https://magit.vc/assets/donate/paypal-50px.png&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align=&quot;center&quot;&gt;
  Some alternative donation methods are 
 &lt;a href=&quot;https://magit.vc/donate/&quot;&gt;available&lt;/a&gt;. 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;If you are new to Magit, then either one of the following two articles should help understanding how it differs from other Git clients.&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://emacsair.me/2017/09/01/magit-walk-through&quot;&gt;Visual Magit walk-through&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;If you are completely new to Magit, then this article is a good visual introduction.&lt;/p&gt; 
&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing some key, but that&#39;s not obvious from just seeing how Magit looks. The screenshots and accompanying text of this article explain how to perform a variety of actions on Magit&#39;s output.&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://emacsair.me/2017/09/01/the-magical-git-interface&quot;&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Magit differs significantly from other Git interfaces, and its advantages are not immediately obvious simply from looking at a few screenshots as presented in the preceding article.&lt;/p&gt; 
&lt;p&gt;This article discusses Magit&#39;s properties in somewhat more abstract terms.&lt;/p&gt; 
&lt;h4&gt;Video introductions&lt;/h4&gt; 
&lt;p&gt;If you prefer &lt;a href=&quot;https://magit.vc/screencasts/&quot;&gt;video&lt;/a&gt; introductions, head over to that page, where find a collection of such introductions and other videos about Magit, by various creators.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Support and Contributing&lt;/h3&gt; 
&lt;p&gt;Magit has many users and very few maintainers, so we kindly ask to read the appropriate guidelines before getting in contact. — Thanks!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🆘 &lt;a href=&quot;https://github.com/magit/magit/discussions/4630&quot;&gt;How to ask for help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🪳 &lt;a href=&quot;https://github.com/magit/magit/wiki/How-to-report-a-bug&quot;&gt;How to report a bug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💡 &lt;a href=&quot;https://github.com/magit/magit/discussions/4631&quot;&gt;How to suggest a feature&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🏗️ &lt;a href=&quot;https://github.com/magit/magit/wiki/Pull-request-guidelines&quot;&gt;Pull request guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ℹ️ &lt;a href=&quot;https://magit.vc/manual/magit/FAQ.html&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ℹ️ &lt;a href=&quot;https://magit.vc/manual/magit&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;TL;DR We now use discussions for feature requests (not issues) and prefer if you ask the community for support instead of the overworked maintainers.&lt;/p&gt; 
&lt;p&gt;Please also consider to contribute by supporting other users or by making a &lt;a href=&quot;https://magit.vc/donate&quot;&gt;monetary donation&lt;/a&gt;. — Thanks!&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Acknowledgments&lt;/h3&gt; 
&lt;p&gt;Magit was started by &lt;a href=&quot;https://github.com/mvollmer&quot;&gt;Marius Vollmer&lt;/a&gt;, and is now maintained by &lt;a href=&quot;https://emacsair.me&quot;&gt;Jonas Bernoulli&lt;/a&gt; and &lt;a href=&quot;https://kyleam.com&quot;&gt;Kyle Meyer&lt;/a&gt;. Former maintainers are &lt;a href=&quot;http://dudebout.com&quot;&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href=&quot;https://github.com/npostavs&quot;&gt;Noam Postavsky&lt;/a&gt;, &lt;a href=&quot;https://github.com/pjweisberg&quot;&gt;Peter J. Weisberg&lt;/a&gt;, &lt;a href=&quot;https://github.com/philjackson&quot;&gt;Phil Jackson&lt;/a&gt;, &lt;a href=&quot;https://github.com/vanicat&quot;&gt;Rémi Vanicat&lt;/a&gt; and &lt;a href=&quot;https://yann.hodique.info&quot;&gt;Yann Hodique&lt;/a&gt;. Many more people have &lt;a href=&quot;https://magit.vc/stats/magit/authors.html&quot;&gt;contributed code&lt;/a&gt;, suggested features or made monetary contributions.&lt;/p&gt; 
&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/magit/magit/actions/workflows/compile.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/compile.yml/badge.svg?sanitize=true&quot; alt=&quot;Compile&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/magit/magit/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/magit/magit/actions/workflows/manual.yml&quot;&gt;&lt;img src=&quot;https://github.com/magit/magit/actions/workflows/manual.yml/badge.svg?sanitize=true&quot; alt=&quot;Manual&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.nongnu.org/nongnu/magit.html&quot;&gt;&lt;img src=&quot;https://emacsair.me/assets/badges/nongnu-elpa.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/magit&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/magit-badge.svg?sanitize=true&quot; alt=&quot;Melpa&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/magit&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/magit-badge.svg?sanitize=true&quot; alt=&quot;Melpa Stable&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://repology.org/project/emacs%3Amagit/versions&quot;&gt;&lt;img src=&quot;https://repology.org/badge/vertical-allrepos/emacs%3Amagit.svg?header=&amp;amp;columns=4&amp;amp;minversion=4&amp;amp;exclude_unsupported=1&quot; alt=&quot;Packaging status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>purcell/exec-path-from-shell</title>
      <link>https://github.com/purcell/exec-path-from-shell</link>
      <description>&lt;p&gt;Make Emacs use the $PATH set up by the user&#39;s shell&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://melpa.org/#/exec-path-from-shell&quot;&gt;&lt;img src=&quot;http://melpa.org/packages/exec-path-from-shell-badge.svg?sanitize=true&quot; alt=&quot;Melpa Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://stable.melpa.org/#/exec-path-from-shell&quot;&gt;&lt;img src=&quot;http://stable.melpa.org/packages/exec-path-from-shell-badge.svg?sanitize=true&quot; alt=&quot;Melpa Stable Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://elpa.nongnu.org/nongnu/exec-path-from-shell.html&quot;&gt;&lt;img src=&quot;https://elpa.nongnu.org/nongnu/exec-path-from-shell.svg?sanitize=true&quot; alt=&quot;NonGNU ELPA Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/purcell/exec-path-from-shell/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/purcell/exec-path-from-shell/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.patreon.com/sanityinc&quot;&gt;&lt;img alt=&quot;Support me&quot; src=&quot;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;exec-path-from-shell&lt;/h1&gt; 
&lt;p&gt;A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user&#39;s shell.&lt;/p&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;Ever find that a command works in your shell, but not in Emacs?&lt;/p&gt; 
&lt;p&gt;This happens a lot on OS X, where an Emacs instance launched as a GUI app inherits a default minimal set of environment variables that are probably not the ones you see in a terminal window. Similarly, if you start Emacs as a daemon from &lt;code&gt;systemd&lt;/code&gt; or &lt;code&gt;launchd&lt;/code&gt;, it will run with a default set of environment variables.&lt;/p&gt; 
&lt;p&gt;This library solves this problem by copying important environment variables from the user&#39;s shell: it works by asking your shell to print out the variables of interest, then copying them into the Emacs environment.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;Supported shells:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;zsh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bash&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tcsh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nu&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that shell variables which have not been exported as environment variables (e.g. using the &quot;export&quot; keyword) may not be visible to &lt;code&gt;exec-path-from-shell&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you experience issues, enable the variable &lt;code&gt;exec-path-from-shell-debug&lt;/code&gt; before runnin functions from the package: this will produce detailed logging in &lt;code&gt;*Messages*&lt;/code&gt; about the shell command line and output.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Installable packages are available via MELPA: do &lt;code&gt;M-x package-install RET exec-path-from-shell RET&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, &lt;a href=&quot;https://github.com/purcell/exec-path-from-shell/tags&quot;&gt;download&lt;/a&gt; the latest release or clone the repository, and install &lt;code&gt;exec-path-from-shell.el&lt;/code&gt; with &lt;code&gt;M-x package-install-file&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Add the following to your &lt;code&gt;init.el&lt;/code&gt; (after calling &lt;code&gt;package-initialize&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(when (memq window-system &#39;(mac ns x))
  (exec-path-from-shell-initialize))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This sets &lt;code&gt;$MANPATH&lt;/code&gt;, &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;exec-path&lt;/code&gt; from your shell, but only when executed in a GUI frame on OS X and Linux.&lt;/p&gt; 
&lt;p&gt;If you launch Emacs as a daemon from &lt;code&gt;systemd&lt;/code&gt; or similar, you might like to use the following snippet:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(when (daemonp)
  (exec-path-from-shell-initialize))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can copy values of other environment variables by customizing &lt;code&gt;exec-path-from-shell-variables&lt;/code&gt; before invoking &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt;, or by calling &lt;code&gt;exec-path-from-shell-copy-env&lt;/code&gt;, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(exec-path-from-shell-copy-env &quot;PYTHONPATH&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This function may also be called interactively.&lt;/p&gt; 
&lt;p&gt;The author uses the following configuration snippet before calling &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(require &#39;exec-path-from-shell)
(dolist (var &#39;(&quot;SSH_AUTH_SOCK&quot; &quot;SSH_AGENT_PID&quot; &quot;GPG_AGENT_INFO&quot; &quot;LANG&quot; &quot;LC_CTYPE&quot; &quot;NIX_SSL_CERT_FILE&quot; &quot;NIX_PATH&quot;))
  (add-to-list &#39;exec-path-from-shell-variables var))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Setting up your shell startup files correctly&lt;/h3&gt; 
&lt;p&gt;Note that your shell will inherit Emacs&#39;s environment variables when it is run by &lt;code&gt;exec-path-from-shell&lt;/code&gt; -- to avoid surprises your config files should therefore set the environment variables to their exact desired final values, i.e. don&#39;t do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export PATH=/usr/local/bin:$PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;but instead do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export PATH=/usr/local/bin:/usr/bin:/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To be safe, &lt;code&gt;exec-path-from-shell&lt;/code&gt; starts an interactive (and login) shell by default, but this can be much slower than necessary. Interactive shells often have fancy features enabled that are only helpful when one interacts directly with the shell, and this can frequently cause startup time to exceed 750ms. This can be avoided:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow best practice by setting your environment variables so that they are available to both interactive and non-interactive shells. In practical terms, for most people this means setting them in &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshenv&lt;/code&gt; instead of &lt;code&gt;~/.bashrc&lt;/code&gt; and &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Once a non-interactive shell sets your environment variables correctly, adjust &lt;code&gt;exec-path-from-shell-arguments&lt;/code&gt; appropriately (often to &lt;code&gt;nil&lt;/code&gt;) before calling &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt; so that it will start a non-interactive shell.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more about how popular shells load start-up files, read &lt;a href=&quot;https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html&quot;&gt;this helpful article&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Making &lt;code&gt;exec-path-from-shell&lt;/code&gt; faster&lt;/h2&gt; 
&lt;p&gt;If evaluation takes more than &lt;code&gt;exec-path-from-shell-warn-duration-millis&lt;/code&gt; (500ms by default) then &lt;code&gt;exec-path-from-shell&lt;/code&gt; will print a warning.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Non-interactive shells start up faster. Follow the steps in the section above so that you can run your shell without &lt;code&gt;-i&lt;/code&gt; and still get the right environment variable settings. When &lt;code&gt;&quot;-i&quot;&lt;/code&gt; is then removed from &lt;code&gt;exec-path-from-shell-arguments&lt;/code&gt;, this package becomes more efficient.&lt;/li&gt; 
 &lt;li&gt;Invoking the shell has a non-trivial overhead in any case. Don&#39;t call &lt;code&gt;exec-path-from-shell-copy-env&lt;/code&gt; repeatedly, since each invocation starts a shell. Instead, set &lt;code&gt;exec-path-from-shell-variables&lt;/code&gt; to the full list of vars you want, and call &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt; once.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Further help&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;C-h f exec-path-from-shell-initialize&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;C-h f exec-path-from-shell-copy-env&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.patreon.com/sanityinc&quot;&gt;💝 Support this project and my other Open Source work via Patreon&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://uk.linkedin.com/in/stevepurcell&quot;&gt;💼 LinkedIn profile&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.sanityinc.com/&quot;&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>domtronn/all-the-icons.el</title>
      <link>https://github.com/domtronn/all-the-icons.el</link>
      <description>&lt;p&gt;A utility package to collect various Icon Fonts and propertize them within Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/logo.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#resource-fonts&quot;&gt;Fonts&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://melpa.org/#/all-the-icons&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/all-the-icons-badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/all-the-icons&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/all-the-icons-badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/domtronn/all-the-icons.el/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/tag/domtronn/all-the-icons.el.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/domtronn/all-the-icons.el&quot;&gt;&lt;img src=&quot;https://travis-ci.org/domtronn/all-the-icons.el.svg?branch=master&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/domtronn/all-the-icons.el/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;You should be able to install this package in the standard way, add it to the load path and then calling&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(when (display-graphic-p)
  (require &#39;all-the-icons))
;; or
(use-package all-the-icons
  :if (display-graphic-p))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installing Fonts&lt;/h3&gt; 
&lt;p&gt;In order for the icons to work it is &lt;strong&gt;very important&lt;/strong&gt; that you install the Resource Fonts included in this package, they are available in the &lt;a href=&quot;file:///fonts&quot;&gt; &lt;code&gt;fonts&lt;/code&gt; &lt;/a&gt; directory. You can also install the &lt;em&gt;latest&lt;/em&gt; fonts for this package in the &lt;em&gt;(guessed?)&lt;/em&gt; based on the OS by calling the following function;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;M-x all-the-icons-install-fonts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Bear in mind, this will also run &lt;code&gt;fc-cache -f -v&lt;/code&gt; on &lt;strong&gt;MacOS&lt;/strong&gt; and &lt;strong&gt;Linux&lt;/strong&gt; which &lt;em&gt;can take some time&lt;/em&gt; to complete. For &lt;strong&gt;Windows&lt;/strong&gt;, this function will prompt for a &lt;em&gt;download&lt;/em&gt; directory for you to install them manually.&lt;/p&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;The simplest usage for this package is to use the following functions;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-buffer&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-dir&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-file&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-mode&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-url&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Which can be used to get a formatted icon which you can insert into buffers, &lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(insert (all-the-icons-icon-for-file &quot;foo.js&quot;))
    ;; Inserts a javascript icon
    ;; #(&quot;js-icon&quot; 0 1 (display (raise -0.24) face (:family &quot;alltheicon&quot; :height 1.08 :foreground &quot;#FFD446&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Inserting Icons Directly&lt;/h2&gt; 
&lt;p&gt;The above is fine if you want this package to automatically decide on the icon you want for files and things, however, to insert the icons directly you will want to use these icons functions;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-alltheicon&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-faicon&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-fileicon&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-octicon&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-wicon&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can then call these functions with the icon you want to insert, &lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(all-the-icons-octicon &quot;file-binary&quot;)  ;; GitHub Octicon for Binary File
(all-the-icons-faicon  &quot;cogs&quot;)         ;; FontAwesome icon for cogs
(all-the-icons-wicon   &quot;tornado&quot;)      ;; Weather Icon for tornado
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A list of all the icon names for a font family can be found in the &lt;code&gt;data&lt;/code&gt; directory, or by inspecting the alist variables.&lt;/p&gt; 
&lt;p&gt;The alist variables are all prefixed with&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;all-the-icons-data/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example &lt;code&gt;C-h v all-the-icons-data/ &amp;lt;TAB&amp;gt;&lt;/code&gt; will give a list of all the data alist you can describe &lt;em&gt;(and the icon fonts they&#39;re associated with)&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Inserting icons with properties&lt;/h2&gt; 
&lt;p&gt;Each of the above icon functions can also be given different properties to slightly adjust the way they&#39;re formatted, these are&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:height&lt;/code&gt; - The height of the icon&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:v-adjust&lt;/code&gt; - Vertical adjust (&lt;em&gt;positive is up, negative is down&lt;/em&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:face&lt;/code&gt; - The face to apply to the icon, defaults to &lt;code&gt;\&#39;default&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So you would call, for example&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(all-the-icons-wicon &quot;tornado&quot; :face &#39;all-the-icons-blue)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These properties can also be used on the &lt;code&gt;all-the-icons-icon-for-file&lt;/code&gt; and &lt;code&gt;all-the-icons-icon-for-mode&lt;/code&gt; functions as well, &lt;em&gt;i.e.&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(insert (all-the-icons-icon-for-file &quot;foo.js&quot; :height 2 :face &#39;all-the-icons-lred))
    ;; Inserts a RED Javascript icon with height 2
    ;; #(&quot;js-icon&quot; 0 1 (display (raise -0.24) face (:family &quot;alltheicon&quot; :height 2.0 :foreground &quot;red&quot;)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The default icon &lt;code&gt;:height&lt;/code&gt; and &lt;code&gt;:v-adjust&lt;/code&gt; properties can be set with the &lt;code&gt;all-the-icons-scale-factor&lt;/code&gt; and &lt;code&gt;all-the-icons-default-adjust&lt;/code&gt; variables. Additional adjustments can be made per font family via the &lt;code&gt;all-the-icons-{familyname}-scale-factor&lt;/code&gt; and &lt;code&gt;all-the-icons-default-{familyname}-adjust&lt;/code&gt; variables, where &lt;code&gt;{familyname}&lt;/code&gt; is any member of &lt;code&gt;all-the-icons-font-families&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Propertizing icons yourself&lt;/h2&gt; 
&lt;p&gt;However, sometimes when propertizing these icons &lt;em&gt;(for example if you were customising your mode line)&lt;/em&gt; you &lt;em&gt;may&lt;/em&gt; sometimes have to know the font family to add in to override the current font family being used, &lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(propertize (all-the-icons-octicon &quot;package&quot;)
            &#39;face `(:family ,(all-the-icons-octicon-family) :height 1.2)
            &#39;display &#39;(raise -0.1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;If you see placeholders (AKA tofus) being rendered, or the wrong icons being displayed, the underlying cause generally falls into one of three categories:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Font installation failed due to networking issues. Check your OS&#39; and Emacs&#39; networking (&lt;code&gt;M-x customize-group RET gnutls/nsm/url/network RET&lt;/code&gt;) and security settings (i.e. proxy, firewall, antivirus software...)&lt;/li&gt; 
 &lt;li&gt;On *nix systems, make sure the font cache has been updated. &lt;code&gt;all-the-icons-install-fonts&lt;/code&gt; should do this for you automatically, but sometimes it may fail due to misconfiguration.&lt;/li&gt; 
 &lt;li&gt;You&#39;ve misconfigured your font settings in Emacs.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To check if you&#39;ve misconfigured your Emacs font settings, you can try the following steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Print out all of the icons in an icon set and their corresponding id/name.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;
;; Valid font families are &#39;material &#39;wicon &#39;octicon &#39;faicon &#39;fileicon and &#39;alltheicon

(all-the-icons-insert-icons-for &#39;alltheicon)   ;; Prints all the icons for `alltheicon&#39; font set

(all-the-icons-insert-icons-for &#39;octicon 10)   ;; Prints all the icons for the `octicon&#39; family
                                               ;; and makes the icons height 10

(all-the-icons-insert-icons-for &#39;faicon 1 0.5) ;; Prints all the icons for the `faicon&#39; family
                                               ;; and also waits 0.5s between printing each one
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;Now that you are certain which icon set is not displaying properly, check the fontset currently in effect.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Look up the hex code of the icon from the &lt;code&gt;data/data-[font-family].el&lt;/code&gt; file. Write it down.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;M-x describe-fontset RET RET&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Now you are looking at the fontset for the current frame, search for the hex range for that icon. Usually it&#39;s &lt;code&gt;#xE000&lt;/code&gt;, or &lt;code&gt;#xF0&lt;/code&gt; &lt;code&gt;#xF2&lt;/code&gt;, but there are a few outside of these offsets.&lt;/li&gt; 
 &lt;li&gt;If you don&#39;t see the font family in question in the list of fontspecs (i.e. &lt;code&gt;[-*-file-icons-...]&lt;/code&gt;) below the range, or some other fontspecs in front of the one in question, you will have to add the families back to the fontset (scroll to the top to see which one is in effect), or arrange the fontspec order. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-elisp&quot;&gt;;; Use &#39;prepend for the NS and Mac ports or Emacs will crash.
(set-fontset-font t &#39;unicode (font-spec :family &quot;all-the-icons&quot;) nil &#39;append)
(set-fontset-font t &#39;unicode (font-spec :family &quot;file-icons&quot;) nil &#39;append)
(set-fontset-font t &#39;unicode (font-spec :family &quot;Material Icons&quot;) nil &#39;append)
(set-fontset-font t &#39;unicode (font-spec :family &quot;github-octicons&quot;) nil &#39;append)
(set-fontset-font t &#39;unicode (font-spec :family &quot;FontAwesome&quot;) nil &#39;append)
(set-fontset-font t &#39;unicode (font-spec :family &quot;Weather Icons&quot;) nil &#39;append)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Resource Fonts&lt;/h1&gt; 
&lt;p&gt;All of the fonts provided in this packages as resources come with either the SIL Open Font License &lt;em&gt;(OFL)&lt;/em&gt; or an MIT License, below I will link to each of the fonts Sources and their Licenses.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Font Name&lt;/th&gt; 
   &lt;th&gt;Font&lt;/th&gt; 
   &lt;th&gt;License&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;file-icons.ttf&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://atom.io/packages/file-icons&quot;&gt;Atom File Icons Plugin&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/DanBrooker/file-icons/raw/master/LICENSE.md&quot;&gt;MIT LICENSE&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;fontawesome.ttf&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;http://fontawesome.io/&quot;&gt;FontAwesome Icons&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/FortAwesome/Font-Awesome#license&quot;&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ocitcons.ttf&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;http://octicons.github.com&quot;&gt;GitHub OctIcons&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/primer/octicons/raw/master/LICENSE&quot;&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;weathericons.ttf&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://erikflowers.github.io/weather-icons/&quot;&gt;Weather Icons&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/primer/octicons/raw/master/LICENSE&quot;&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;material-design-icons.ttf&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;http://google.github.io/material-design-icons/&quot;&gt;Material Icons&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0.txt&quot;&gt;APACHE LICENSE v2.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;all-the-icons.ttf&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Custom Made Font&lt;/td&gt; 
   &lt;td&gt;MIT LICENSE&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The fonts provided with this packages are locked down to a version for unicode character mapping values. In the future, these may be automatically generated.&lt;/p&gt; 
&lt;p&gt;I would like to thank all the authors for the creation and use of these fantastic fonts.&lt;/p&gt; 
&lt;h1&gt;Wiki&lt;/h1&gt; 
&lt;p&gt;Lastly, there is a &lt;a href=&quot;https://github.com/domtronn/all-the-icons.el/wiki&quot;&gt;Wiki Page&lt;/a&gt; which should give you some ideas of ways to use this library to spruce up other Emacs packages.&lt;/p&gt; 
&lt;h3&gt;Slow Rendering&lt;/h3&gt; 
&lt;p&gt;If you experience a slow down in performance when rendering multiple icons simultaneously, you can try setting the following variable&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-el&quot;&gt;(setq inhibit-compacting-font-caches t)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some people have found that this &lt;a href=&quot;https://github.com/domtronn/all-the-icons.el/issues/28&quot;&gt;fixes the problem&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#readme&quot;&gt;▲ back to top&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>seagle0128/doom-modeline</title>
      <link>https://github.com/seagle0128/doom-modeline</link>
      <description>&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;doom-modeline&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/seagle0128/doom-modeline/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/seagle0128/doom-modeline/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/release&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/tag/seagle0128/doom-modeline.svg?label=Release&quot; alt=&quot;Release Tag&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/License&quot;&gt;&lt;img src=&quot;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://melpa.org/#/doom-modeline&quot;&gt;&lt;img src=&quot;https://melpa.org/packages/doom-modeline-badge.svg?sanitize=true&quot; alt=&quot;MELPA&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://stable.melpa.org/#/doom-modeline&quot;&gt;&lt;img src=&quot;https://stable.melpa.org/packages/doom-modeline-badge.svg?sanitize=true&quot; alt=&quot;MELPA Stable&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#feature&quot;&gt;Feature&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#screenshots&quot;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#install&quot;&gt;Install&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#manual&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#use-package&quot;&gt;Use-package&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#customize&quot;&gt;Customize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#donate&quot;&gt;Donate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- markdown-toc end --&gt; 
&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt; 
&lt;p&gt;It&#39;s integrated into &lt;a href=&quot;https://github.com/seagle0128/.emacs.d&quot;&gt;Centaur Emacs&lt;/a&gt;, &lt;a href=&quot;https://github.com/hlissner/doom-emacs&quot;&gt;Doom Emacs&lt;/a&gt; and &lt;a href=&quot;https://github.com/syl20bnr/spacemacs&quot;&gt;Spacemacs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feature&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;doom-modeline&lt;/code&gt; was designed for minimalism, and offers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A match count panel (for &lt;code&gt;anzu&lt;/code&gt;, &lt;code&gt;visual-replace&lt;/code&gt;, &lt;code&gt;iedit&lt;/code&gt;, &lt;code&gt;multiple-cursors&lt;/code&gt;, &lt;code&gt;symbol-overlay&lt;/code&gt;, and &lt;code&gt;evil-search&lt;/code&gt;, etc.)&lt;/li&gt; 
 &lt;li&gt;An indicator for recording a macro&lt;/li&gt; 
 &lt;li&gt;Current environment version (e.g. &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, etc.) in the major-mode&lt;/li&gt; 
 &lt;li&gt;A customizable mode-line height (see &lt;code&gt;doom-modeline-height&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;A minor modes segment which is compatible with &lt;code&gt;minions&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An error/warning count segment for &lt;code&gt;flymake&lt;/code&gt;/&lt;code&gt;flycheck&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A workspace number/name segment for &lt;code&gt;eyebrowse&lt;/code&gt; or &lt;code&gt;tab-bar-mode&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A perspective name segment for &lt;code&gt;persp-mode&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;A window number segment for &lt;code&gt;ace-window&lt;/code&gt;, &lt;code&gt;winum&lt;/code&gt; and &lt;code&gt;window-numbering&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for modal editing state, including &lt;code&gt;evil&lt;/code&gt;, &lt;code&gt;overwrite&lt;/code&gt;, &lt;code&gt;god&lt;/code&gt;, &lt;code&gt;ryo&lt;/code&gt; and &lt;code&gt;xah-fly-keys&lt;/code&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;An indicator for &lt;code&gt;battery&lt;/code&gt; status&lt;/li&gt; 
 &lt;li&gt;An indicator for current input method&lt;/li&gt; 
 &lt;li&gt;An indicator for debug state&lt;/li&gt; 
 &lt;li&gt;An indicator for remote host&lt;/li&gt; 
 &lt;li&gt;An indicator for Kubernetes state with &lt;a href=&quot;https://github.com/jinnovation/kele.el&quot;&gt;&lt;code&gt;kele.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for LSP state with &lt;code&gt;lsp-mode&lt;/code&gt; or &lt;code&gt;eglot&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for GitHub notifications&lt;/li&gt; 
 &lt;li&gt;An indicator for unread emails with &lt;code&gt;mu4e-alert&lt;/code&gt; and &lt;code&gt;gnus&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for IRC notifications with &lt;code&gt;circe&lt;/code&gt;, &lt;code&gt;rcirc&lt;/code&gt; or &lt;code&gt;erc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for buffer position which is compatible with &lt;code&gt;nyan-mode&lt;/code&gt; or &lt;code&gt;poke-line&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for party &lt;code&gt;parrot&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for PDF page number with &lt;code&gt;pdf-tools&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;An indicator for markdown/org preview with &lt;code&gt;grip&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Truncated file name, file icon, buffer state and project name in buffer information segment, which is compatible with &lt;code&gt;project&lt;/code&gt;, &lt;code&gt;projectile&lt;/code&gt; and &lt;code&gt;find-file-in-project&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;New mode-line for &lt;code&gt;Info-mode&lt;/code&gt; buffers&lt;/li&gt; 
 &lt;li&gt;New package mode-line for &lt;code&gt;paradox&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;New mode-line for &lt;code&gt;helm&lt;/code&gt; buffers&lt;/li&gt; 
 &lt;li&gt;New mode-line for &lt;code&gt;git-timemachine&lt;/code&gt; buffers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694177-10dcd280-fbc0-11e8-8d21-971ede6afdb5.png&quot; alt=&quot;modeline&quot; title=&quot;Mode-line&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694189-6913d480-fbc0-11e8-93ae-9578455dcd2c.png&quot; alt=&quot;search_replace&quot; title=&quot;Search and Replace&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/162925065-0ffe40fd-1efd-469b-bf09-c62fe2d22fd2.png&quot; alt=&quot;evil_search&quot; title=&quot;Evil Search&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694199-cc056b80-fbc0-11e8-9bb1-533b1e64da66.png&quot; alt=&quot;macro&quot; title=&quot;Macro&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/51301117-0805d900-1a69-11e9-957d-b4c7a70a1cf8.png&quot; alt=&quot;no_icons&quot; title=&quot;No Icons&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50414928-3c63ec00-0853-11e9-9b26-6a1df278d332.png&quot; alt=&quot;color_icon_cpp&quot; title=&quot;Color C++ icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50415081-1428bd00-0854-11e9-9ae5-91805290c524.png&quot; alt=&quot;color_icon_java&quot; title=&quot;Color Java icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50415381-9f568280-0855-11e9-9478-34a6dd614d96.png&quot; alt=&quot;color_icon_elisp&quot; title=&quot;Color Elisp icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/68990534-332aa600-088f-11ea-920f-20c9527a6466.png&quot; alt=&quot;evil_normal_state_icon&quot; title=&quot;Evil Normal State icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/68990540-4dfd1a80-088f-11ea-8e53-ab77af4c58c2.png&quot; alt=&quot;evil_insert_state_icon&quot; title=&quot;Evil Insert State icon&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694476-b8103880-fbc5-11e8-9c18-91f5e9258333.png&quot; alt=&quot;evil_normal_state&quot; title=&quot;Evil Normal State&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694461-8b5c2100-fbc5-11e8-993e-d97baa9f01af.png&quot; alt=&quot;evil_insert_state&quot; title=&quot;Evil Insert State&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/53592864-c751c180-3bc9-11e9-9914-493007c013d5.png&quot; alt=&quot;lsp_version&quot; title=&quot;Perspective, LSP, Version, VCS and Flycheck&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/49694481-e0983280-fbc5-11e8-8cb2-c8d2e782bcdb.png&quot; alt=&quot;perspective&quot; title=&quot;Perspective, LSP, Version and VCS&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/53592683-64602a80-3bc9-11e9-8054-91f79aa930b9.png&quot; alt=&quot;notifications&quot; title=&quot;Notifications&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50301291-de857c00-04c1-11e9-84c5-bfbc8de8295f.png&quot; alt=&quot;minions&quot; title=&quot;Minions and minor modes&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/50302008-c57dca80-04c3-11e9-8578-50154ef4f9f0.png&quot; alt=&quot;debug&quot; title=&quot;Debug state&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/51301061-da209480-1a68-11e9-9f64-905d889df9d6.png&quot; alt=&quot;nyan_parrot&quot; title=&quot;Nyan and Parrot&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/69004814-20c67000-0954-11ea-8489-f5a527a80574.png&quot; alt=&quot;irc&quot; title=&quot;IRC Notifications&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/53593622-ba35d200-3bcb-11e9-85b3-38d64d05c127.png&quot; alt=&quot;battery&quot; title=&quot;Battery&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/57503916-e769d380-7324-11e9-906d-44c79f7408a3.png&quot; alt=&quot;package&quot; title=&quot;Package&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/57506248-d96c8080-732d-11e9-8167-644c8fc4e0db.png&quot; alt=&quot;info&quot; title=&quot;Info&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/57506112-6531dd00-732d-11e9-8a5e-22166f42dd4c.png&quot; alt=&quot;helm&quot; title=&quot;Helm&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;From melpa, &lt;code&gt;M-x package-install RET doom-modeline RET&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In &lt;code&gt;init.el&lt;/code&gt;,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(require &#39;doom-modeline)
(doom-modeline-mode 1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-hook &#39;after-init-hook #&#39;doom-modeline-mode)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Use-package&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This package is able to display icons if &lt;code&gt;nerd-icons&lt;/code&gt; package and required fonts are installed. Run &lt;code&gt;M-x nerd-icons-install-fonts&lt;/code&gt; to install the necessary fonts. Please refer to the &lt;a href=&quot;https://github.com/rainstormstudio/nerd-icons.el#installing-fonts&quot;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Strongly recommend to use &lt;a href=&quot;https://github.com/hlissner/emacs-doom-themes&quot;&gt;doom-themes&lt;/a&gt; at the same time.&lt;/p&gt; 
&lt;h2&gt;Customize&lt;/h2&gt; 
&lt;p&gt;Run &lt;code&gt;M-x customize-group RET doom-modeline RET&lt;/code&gt; or set the variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; If non-nil, cause imenu to see `doom-modeline&#39; declarations.
;; This is done by adjusting `lisp-imenu-generic-expression&#39; to
;; include support for finding `doom-modeline-def-*&#39; forms.
;; Must be set before loading doom-modeline.
(setq doom-modeline-support-imenu t)

;; How tall the mode-line should be. It&#39;s only respected in GUI.
;; If the actual char height is larger, it respects the actual height.
(setq doom-modeline-height 25)

;; How wide the mode-line bar should be. It&#39;s only respected in GUI.
(setq doom-modeline-bar-width 4)

;; Whether to use hud instead of default bar. It&#39;s only respected in GUI.
(setq doom-modeline-hud nil)

;; The limit of the window width.
;; If `window-width&#39; is smaller than the limit, some information won&#39;t be
;; displayed. It can be an integer or a float number. `nil&#39; means no limit.&quot;
(setq doom-modeline-window-width-limit 85)

;; Override attributes of the face used for padding.
;; If the space character is very thin in the modeline, for example if a
;; variable pitch font is used there, then segments may appear unusually close.
;; To use the space character from the `fixed-pitch&#39; font family instead, set
;; this variable to `(list :family (face-attribute &#39;fixed-pitch :family))&#39;.
(setq doom-modeline-spc-face-overrides nil)

;; How to detect the project root.
;; nil means to use `default-directory&#39;.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile&#39; doesn&#39;t handle symlink folders well, while `project&#39; is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
(setq doom-modeline-project-detection &#39;auto)

;; Determines the style used by `doom-modeline-buffer-file-name&#39;.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   auto =&amp;gt; emacs/l/comint.el (in a project) or comint.el
;;   truncate-upto-project =&amp;gt; ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project =&amp;gt; ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project =&amp;gt; emacs/l/comint.el
;;   truncate-except-project =&amp;gt; ~/P/F/emacs/l/comint.el
;;   truncate-upto-root =&amp;gt; ~/P/F/e/lisp/comint.el
;;   truncate-all =&amp;gt; ~/P/F/e/l/comint.el
;;   truncate-nil =&amp;gt; ~/Projects/FOSS/emacs/lisp/comint.el
;;   relative-from-project =&amp;gt; emacs/lisp/comint.el
;;   relative-to-project =&amp;gt; lisp/comint.el
;;   file-name =&amp;gt; comint.el
;;   file-name-with-project =&amp;gt; FOSS|comint.el
;;   buffer-name =&amp;gt; comint.el&amp;lt;2&amp;gt; (uniquify buffer name)
;;
;; If you are experiencing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name&#39; style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
(setq doom-modeline-buffer-file-name-style &#39;auto)

;; Whether display icons in the mode-line.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon t)

;; Whether display the icon for `major-mode&#39;. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode&#39;.
;; It respects `nerd-icons-color-icons&#39;.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects option `doom-modeline-icon&#39; and option `doom-modeline-buffer-state-icon&#39;.
(setq doom-modeline-buffer-modification-icon t)

;; Whether display the lsp icon. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-lsp-icon t)

;; Whether display the time icon. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-time-icon t)

;; Whether display the live icons of time.
;; It respects option `doom-modeline-icon&#39; and option `doom-modeline-time-icon&#39;.
(setq doom-modeline-time-live-icon t)

;; Whether to use an analogue clock svg as the live time icon.
;; It respects options `doom-modeline-icon&#39;, `doom-modeline-time-icon&#39;, and `doom-modeline-time-live-icon&#39;.
(setq doom-modeline-time-analogue-clock t)

;; The scaling factor used when drawing the analogue clock.
(setq doom-modeline-time-clock-size 0.7)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
(setq doom-modeline-unicode-fallback nil)

;; Whether display the buffer name.
(setq doom-modeline-buffer-name t)

;; Whether highlight the modified buffer name.
(setq doom-modeline-highlight-modified-buffer-name t)

;; When non-nil, mode line displays column numbers zero-based.
;; See `column-number-indicator-zero-based&#39;.
(setq doom-modeline-column-zero-based t)

;; Specification of \&quot;percentage offset\&quot; of window through buffer.
;; See `mode-line-percent-position&#39;.
(setq doom-modeline-percent-position &#39;(-3 &quot;%p&quot;))

;; Format used to display line numbers in the mode line.
;; See `mode-line-position-line-format&#39;.
(setq doom-modeline-position-line-format &#39;(&quot;L%l&quot;))

;; Format used to display column numbers in the mode line.
;; See `mode-line-position-column-format&#39;.
(setq doom-modeline-position-column-format &#39;(&quot;C%c&quot;))

;; Format used to display combined line/column numbers in the mode line. See `mode-line-position-column-line-format&#39;.
(setq doom-modeline-position-column-line-format &#39;(&quot;%l:%c&quot;))

;; Whether display the minor modes in the mode-line.
(setq doom-modeline-minor-modes nil)

;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count nil)

;; Major modes in which to display word count continuously.
;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count&#39;.
;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count&#39; or
;; remove the modes from `doom-modeline-continuous-word-count-modes&#39;.
(setq doom-modeline-continuous-word-count-modes &#39;(markdown-mode gfm-mode org-mode))

;; Whether display the buffer encoding.
(setq doom-modeline-buffer-encoding t)

;; Whether display the indentation information.
(setq doom-modeline-indent-info nil)

;; Whether display the total line number。
(setq doom-modeline-total-line-number nil)

;; Whether display the icon of vcs segment. It respects option `doom-modeline-icon&#39;.&quot;
(setq doom-modeline-vcs-icon t)

;; The maximum displayed length of the branch name of version control.
(setq doom-modeline-vcs-max-length 15)

;; The function to display the branch name.
(setq doom-modeline-vcs-display-function #&#39;doom-modeline-vcs-name)

;; Alist mapping VCS states to their corresponding faces.
;; See `vc-state&#39; for possible values of the state.
;; For states not explicitly listed, the `doom-modeline-vcs-default&#39; face is used.
(setq doom-modeline-vcs-state-faces-alist
      &#39;((needs-update . (doom-modeline-warning bold))
        (removed . (doom-modeline-urgent bold))
        (conflict . (doom-modeline-urgent bold))
        (unregistered . (doom-modeline-urgent bold))))

;; Whether display the icon of check segment. It respects option `doom-modeline-icon&#39;.
(setq doom-modeline-check-icon t)

;; If non-nil, only display one number for check information if applicable.
(setq doom-modeline-check-simple-format nil)

;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)

;; Whether display the project name. Non-nil to display in the mode-line.
(setq doom-modeline-project-name t)

;; Whether display the workspace name. Non-nil to display in the mode-line.
(setq doom-modeline-workspace-name t)

;; Whether display the perspective name. Non-nil to display in the mode-line.
(setq doom-modeline-persp-name t)

;; If non nil the default perspective name is displayed in the mode-line.
(setq doom-modeline-display-default-persp-name nil)

;; If non nil the perspective name is displayed alongside a folder icon.
(setq doom-modeline-persp-icon t)

;; Whether display the `lsp&#39; state. Non-nil to display in the mode-line.
(setq doom-modeline-lsp t)

;; Whether display the GitHub notifications. It requires `ghub&#39; package.
(setq doom-modeline-github nil)

;; The interval of checking GitHub.
(setq doom-modeline-github-interval (* 30 60))

;; Whether display the modal state.
;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.
(setq doom-modeline-modal t)

;; Whether display the modal state icon.
;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.
(setq doom-modeline-modal-icon t)

;; Whether display the modern icons for modals.
(setq doom-modeline-modal-modern-icon t)

;; When non-nil, always show the register name when recording an evil macro.
(setq doom-modeline-always-show-macro-register nil)

;; Whether display the mu4e notifications. It requires `mu4e-alert&#39; package.
(setq doom-modeline-mu4e nil)
;; also enable the start of mu4e-alert
(mu4e-alert-enable-mode-line-display)

;; Whether display the gnus notifications.
(setq doom-modeline-gnus t)

;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
(setq doom-modeline-gnus-timer 2)

;; Wheter groups should be excludede when gnus automatically being updated.
(setq doom-modeline-gnus-excluded-groups &#39;(&quot;dummy.group&quot;))

;; Whether display the IRC notifications. It requires `circe&#39; or `erc&#39; package.
(setq doom-modeline-irc t)

;; Function to stylize the irc buffer names.
(setq doom-modeline-irc-stylize &#39;identity)

;; Whether display the battery status. It respects `display-battery-mode&#39;.
(setq doom-modeline-battery t)

;; Whether display the time. It respects `display-time-mode&#39;.
(setq doom-modeline-time t)

;; Whether display the misc segment on all mode lines.
;; If nil, display only if the mode line is active.
(setq doom-modeline-display-misc-in-all-mode-lines t)

;; The function to handle `buffer-file-name&#39;.
(setq doom-modeline-buffer-file-name-function #&#39;identity)

;; The function to handle `buffer-file-truename&#39;.
(setq doom-modeline-buffer-file-truename-function #&#39;identity)

;; Whether display the environment version.
(setq doom-modeline-env-version t)
;; Or for individual languages
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable &quot;python&quot;) ; or `python-shell-interpreter&#39;
(setq doom-modeline-env-ruby-executable &quot;ruby&quot;)
(setq doom-modeline-env-perl-executable &quot;perl&quot;)
(setq doom-modeline-env-go-executable &quot;go&quot;)
(setq doom-modeline-env-elixir-executable &quot;iex&quot;)
(setq doom-modeline-env-rust-executable &quot;rustc&quot;)

;; What to display as the version while a new one is being loaded
(setq doom-modeline-env-load-string &quot;...&quot;)

;; By default, almost all segments are displayed only in the active window. To
;; display such segments in all windows, specify e.g.
(setq doom-modeline-always-visible-segments &#39;(mu4e irc))

;; Hooks that run before/after the modeline version string is updated
(setq doom-modeline-before-update-env-hook nil)
(setq doom-modeline-after-update-env-hook nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;How to display icons correctly?&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/rainstormstudio/nerd-icons.el&quot;&gt;nerd-icons&lt;/a&gt; are necessary. Then run &lt;code&gt;M-x nerd-icons-install-fonts&lt;/code&gt; to install the resource fonts. On Windows, the fonts should be installed manually. &lt;code&gt;nerd-icons&lt;/code&gt; supports both GUI and TUI.&lt;/p&gt; &lt;p&gt;If you don&#39;t like color icons, &lt;code&gt;(setq nerd-icons-color-icons nil)&lt;/code&gt; to disable it. Please refer to &lt;a href=&quot;https://github.com/rainstormstudio/nerd-icons.el&quot;&gt;nerd-icons.el&lt;/a&gt; for details.&lt;/p&gt; &lt;p&gt;If you prefer &lt;a href=&quot;https://github.com/domtronn/all-the-icons.el&quot;&gt;all-the-icons&lt;/a&gt;, please use release &lt;code&gt;3.4.0&lt;/code&gt;. It hasn&#39;t been supported since &lt;code&gt;4.0.0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;I am experiencing the laggy issue, how to resolve it?&lt;/p&gt; &lt;p&gt;Add this configuration into your init file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; Don’t compact font caches during GC.
(setq inhibit-compacting-font-caches t)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A ridiculous path is displayed on the mode-line while visiting a symbolink.&lt;/p&gt; &lt;p&gt;It&#39;s the default behaviors of Vanilla Emacs. If you want to display the real names, please put this into your init file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq find-file-visit-truename t)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the file is controlled by vc, refer to the documentation of &lt;code&gt;vc-follow-symlinks&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Why doesn&#39;t change of branch reflect in modeline?&lt;/p&gt; &lt;p&gt;Actually it&#39;s related to &lt;code&gt;magit&lt;/code&gt; and &lt;code&gt;vc-mode&lt;/code&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Workaround: 
    &lt;ul&gt; 
     &lt;li&gt;Revert the buffers manually.&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;(setq auto-revert-check-vc-info t)&lt;/code&gt; brings the performance issue.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Refer to: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html&quot;&gt;The mode-line information isn’t always up-to-date&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/magit/magit/issues/2687&quot;&gt;Maybe provide an alternative to VC&#39;s mode-line information&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Can I add my mode-line segments myself? How to do that? How can I define my own mode-line?&lt;/p&gt; &lt;p&gt;There are two methods.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;If the information is simple, just add to &lt;code&gt;mode-line-misc-info&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Use &lt;code&gt;doom-modeline-def-modeline&lt;/code&gt; to define your own mode-line and set it as default.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; Define your custom doom-modeline
(doom-modeline-def-modeline &#39;my-simple-line
  &#39;(bar matches buffer-info remote-host buffer-position parrot selection-info)
  &#39;(misc-info minor-modes input-method buffer-encoding major-mode process vcs check))

;; Set default mode-line
(add-hook &#39;doom-modeline-mode-hook
          (lambda ()
            (doom-modeline-set-modeline &#39;my-simple-line &#39;default)))

;; Configure other mode-lines based on major modes
(add-to-list &#39;doom-modeline-mode-alist &#39;(my-mode . my-simple-line))

;; Or disable other mode-lines
(setq &#39;doom-modeline-mode-alist nil)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to specify font family and size in modeline?&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq doom-modeline-height 1) ; optional
(if (facep &#39;mode-line-active)
    (set-face-attribute &#39;mode-line-active nil :family &quot;Noto Sans&quot; :height 100) ; For 29+
  (set-face-attribute &#39;mode-line nil :family &quot;Noto Sans&quot; :height 100))
(set-face-attribute &#39;mode-line-inactive nil :family &quot;Noto Sans&quot; :height 100)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(setq doom-modeline-height 1) ; optional
(custom-set-faces
  &#39;(mode-line ((t (:family &quot;Noto Sans&quot; :height 0.9))))
  &#39;(mode-line-active ((t (:family &quot;Noto Sans&quot; :height 0.9)))) ; For 29+
  &#39;(mode-line-inactive ((t (:family &quot;Noto Sans&quot; :height 0.9)))))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/189&quot;&gt;#189&lt;/a&gt; and &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/301&quot;&gt;#301&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The right side of the modeline is cut off. How to fix it?&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Tweak &lt;code&gt;nerd-icons-scale-factor&lt;/code&gt;. e.g. &lt;code&gt;(setq nerd-icons-scale-factor 1.1)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Use another font family or size. See above.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to disable symbolic links expanding in mode-line?&lt;/p&gt; &lt;p&gt;If you encounter the issue like this&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9449246/62822565-c3f93380-bb74-11e9-95f6-f9c24a6cbd14.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt; &lt;p&gt;please try this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;;; built-in `project&#39; on 26+
(setq doom-modeline-project-detection &#39;project)
;; or `find-in-project&#39; if it&#39;s installed
(setq doom-modeline-project-detection &#39;ffip)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more details, refer to &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/209&quot;&gt;#209&lt;/a&gt; and &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/224&quot;&gt;#224&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Is &lt;code&gt;doom-modeline&lt;/code&gt; able to show match count while search with &lt;code&gt;evil-search&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Yes. For better experience, should enable &lt;code&gt;anzu-mode&lt;/code&gt; and load &lt;code&gt;evil-anzu&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to show that the R is running in inferior ess R mode?&lt;/p&gt; &lt;p&gt;The ess R mode modifies &lt;code&gt;mode-line-buffer-identification&lt;/code&gt; directly to display the status. To display the status in &lt;code&gt;doom-modeline&lt;/code&gt;, you can add the status to &lt;code&gt;mode-line-process&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt; as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(add-hook &#39;inferior-ess-mode-hook
      (lambda ()
        (add-to-list &#39;mode-line-process &#39;(:eval (nth ess--busy-count ess-busy-strings)))))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to display company mode-line information?&lt;/p&gt; &lt;p&gt;Enable &lt;code&gt;doom-modeline-minor-modes&lt;/code&gt; or &lt;code&gt;(add-to-list &#39;global-mode-string company-lighter)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to display LaTeX compilation information in the mode line?&lt;/p&gt; &lt;p&gt;Use &lt;a href=&quot;https://github.com/haji-ali/procress&quot;&gt;process&lt;/a&gt; package. Please refer to &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/387&quot;&gt;#387&lt;/a&gt; for more details.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-emacs-lisp&quot;&gt;(require &#39;procress)
(procress-load-default-svg-images)
(add-hook &#39;LaTeX-mode-hook #&#39;procress-auctex-mode)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to prevent mode-line aligning with fill column in &lt;code&gt;visual-fill-column-mode&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;(setq mode-line-right-align-edge &#39;right-fringe)&lt;/code&gt;. Please refer to &lt;a href=&quot;https://github.com/seagle0128/doom-modeline/issues/672&quot;&gt;#672&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;How to display match counts in &lt;code&gt;visual-replace&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;It respects &lt;code&gt;visual-replace-display-total&lt;/code&gt;, so you should use &lt;code&gt;(setq visual-replace-display-total t)&lt;/code&gt; to display.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Why am I unable to get the GitHub notifications even thogh I enable &lt;code&gt;doom-modeline-github&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;The functionality requires the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;ghub&lt;/code&gt; packages, and make sure the token has permission to access the Github repositories.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you think it&#39;s helpful for you, please consider paying a cup of coffee for me. Thank you! &lt;span&gt;😄&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/140797/65818854-44204900-e248-11e9-9cc5-3e6339587cd8.png&quot; alt=&quot;Alipay&quot; width=&quot;120&quot; /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&quot;https://user-images.githubusercontent.com/140797/65818844-366ac380-e248-11e9-931c-4bd872d0566b.png&quot; alt=&quot;Wechat Pay&quot; width=&quot;120&quot; /&gt;&lt;/p&gt; 
&lt;a href=&quot;https://paypal.me/seagle0128&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://www.paypalobjects.com/digitalassets/c/website/marketing/apac/C2/logos-buttons/optimize/44_Grey_PayPal_Pill_Button.png&quot; alt=&quot;PayPal&quot; width=&quot;120&quot; /&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;https://www.buymeacoffee.com/s9giES1&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; width=&quot;160&quot; /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>manzaltu/claude-code-ide.el</title>
      <link>https://github.com/manzaltu/claude-code-ide.el</link>
      <description>&lt;p&gt;Claude Code IDE integration for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Claude Code IDE for Emacs #+AUTHOR: Yoav Orot #+EMAIL: &lt;a href=&quot;mailto:orot.yoav@gmail.com&quot;&gt;orot.yoav@gmail.com&lt;/a&gt; #+DESCRIPTION: Claude Code integration for Emacs #+KEYWORDS: emacs, claude, ai, code-assistant #+OPTIONS: toc:t num:nil&lt;/p&gt; 
&lt;p&gt;[[https://github.com/manzaltu/claude-code-ide.el/actions/workflows/test.yml][file:https://github.com/manzaltu/claude-code-ide.el/workflows/CI/badge.svg]] [[https://www.gnu.org/software/emacs/][file:https://img.shields.io/badge/GNU%20Emacs-28--30-blueviolet.svg]] [[https://www.gnu.org/licenses/gpl-3.0][file:https://img.shields.io/badge/License-GPL%20v3-blue.svg]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Overview&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Claude Code IDE for Emacs provides native integration with Claude Code CLI through the Model Context Protocol (MCP). Unlike simple terminal wrappers, this package creates a bidirectional bridge between Claude and Emacs, enabling Claude to understand and leverage Emacs&#39; powerful features—from LSP and project management to custom Elisp functions. This transforms Claude into a true Emacs-aware AI assistant that works within your existing workflow and can interact with your entire Emacs ecosystem.&lt;/p&gt; 
&lt;p&gt;** Features&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Automatic project detection and session management&lt;/li&gt; 
 &lt;li&gt;Terminal integration with full color support using =vterm= or =eat=&lt;/li&gt; 
 &lt;li&gt;MCP protocol implementation for IDE integration&lt;/li&gt; 
 &lt;li&gt;Tool support for file operations, editor state, and workspace info&lt;/li&gt; 
 &lt;li&gt;Extensible MCP tools server for accessing Emacs commands (xrefs, tree-sitter, project info, e.g.)&lt;/li&gt; 
 &lt;li&gt;Diagnostic integration with Flycheck and Flymake&lt;/li&gt; 
 &lt;li&gt;Advanced diff view with ediff integration (modify suggestions before applying)&lt;/li&gt; 
 &lt;li&gt;Tab-bar support for proper context switching&lt;/li&gt; 
 &lt;li&gt;Selection and buffer tracking for better context awareness&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Emacs Tool Integration&lt;/p&gt; 
&lt;p&gt;This package enables Claude Code to leverage the full power of Emacs through MCP tools integration. Claude can directly access and utilize Emacs capabilities including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Language Server Protocol (LSP)&lt;/em&gt; integration through xref commands for intelligent code navigation (eglot, lsp-mode and others)&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Tree-sitter&lt;/em&gt; for syntax tree analysis and understanding code structure at the AST level&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Imenu&lt;/em&gt; for structured symbol listing and navigation within files&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Project&lt;/em&gt; integration for project-aware operations&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Any Emacs command or function&lt;/em&gt; can be exposed as an MCP tool, allowing Claude to: 
  &lt;ul&gt; 
   &lt;li&gt;Perform project-wide searches and refactoring&lt;/li&gt; 
   &lt;li&gt;Access specialized modes and their features&lt;/li&gt; 
   &lt;li&gt;Execute custom Elisp functions tailored to your workflow&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This deep integration means Claude Code understands your project context and can leverage Emacs&#39; extensive ecosystem to provide more intelligent and context-aware assistance.&lt;/p&gt; 
&lt;p&gt;** Screenshots&lt;/p&gt; 
&lt;p&gt;*** Active File Awareness #+CAPTION: Claude Code automatically knows which file you&#39;re currently viewing in Emacs #+html: &lt;img src=&quot;https://github.com/manzaltu/claude-code-ide.el/raw/25053b5f1b8123eed5c3f00e8b3e9687ee33391d/screenshots/file.png&quot; /&gt; #+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Claude Code automatically knows which file you&#39;re currently viewing in Emacs&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;*** Code Selection Context #+CAPTION: Claude Code can access and work with selected text in your buffers #+html: &lt;img src=&quot;https://github.com/manzaltu/claude-code-ide.el/raw/25053b5f1b8123eed5c3f00e8b3e9687ee33391d/screenshots/selection.png&quot; /&gt; #+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Claude Code can access and work with selected text in your buffers&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;*** Advanced Diff View with Diagnostics #+CAPTION: Integrated ediff view for code changes, with Claude Code able to directly access diagnostic data (errors, warnings, etc.) from opened files #+html: &lt;img src=&quot;https://github.com/manzaltu/claude-code-ide.el/raw/25053b5f1b8123eed5c3f00e8b3e9687ee33391d/screenshots/ediff_diag.png&quot; /&gt; #+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Integrated ediff view for code changes, with Claude Code able to directly access diagnostic data (errors, warnings, etc.) from opened files&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;*** Automatic Text Mentions #+CAPTION: Automatically mention and reference selected text in Claude conversations #+html: &lt;img src=&quot;https://github.com/manzaltu/claude-code-ide.el/raw/25053b5f1b8123eed5c3f00e8b3e9687ee33391d/screenshots/mentions.png&quot; /&gt; #+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Automatically mention and reference selected text in Claude conversations&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;*** Session Restoration #+CAPTION: Resume previous Claude Code conversations with the --resume flag #+html: &lt;img src=&quot;https://github.com/manzaltu/claude-code-ide.el/raw/25053b5f1b8123eed5c3f00e8b3e9687ee33391d/screenshots/restore.png&quot; /&gt; #+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Resume previous Claude Code conversations with the --resume flag&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Prerequisites&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Emacs 28.1 or higher&lt;/li&gt; 
 &lt;li&gt;Claude Code CLI installed and available in PATH&lt;/li&gt; 
 &lt;li&gt;=vterm= or =eat= package (for terminal support)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Installing Claude Code CLI&lt;/p&gt; 
&lt;p&gt;Follow the installation instructions at [[https://docs.anthropic.com/en/docs/claude-code][Claude Code Documentation]].&lt;/p&gt; 
&lt;p&gt;** Installing the Emacs Package&lt;/p&gt; 
&lt;p&gt;Currently, this package is in early development.&lt;/p&gt; 
&lt;p&gt;To install using =emacs-version= &amp;gt;= 30 and =use-package= with the =vc= binding:&lt;/p&gt; 
&lt;p&gt;#+begin_src elisp (use-package claude-code-ide :vc (:url &quot;&lt;a href=&quot;https://github.com/manzaltu/claude-code-ide.el&quot;&gt;https://github.com/manzaltu/claude-code-ide.el&lt;/a&gt;&quot; :rev :newest) :bind (&quot;C-c C-&#39;&quot; . claude-code-ide-menu) ; Set your favorite keybinding :config (claude-code-ide-emacs-tools-setup)) ; Optionally enable Emacs MCP tools #+end_src&lt;/p&gt; 
&lt;p&gt;To install using =use-package= and [[https://github.com/raxod502/straight.el][straight.el]]:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (use-package claude-code-ide :straight (:type git :host github :repo &quot;manzaltu/claude-code-ide.el&quot;) :bind (&quot;C-c C-&#39;&quot; . claude-code-ide-menu) ; Set your favorite keybinding :config (claude-code-ide-emacs-tools-setup)) ; Optionally enable Emacs MCP tools #+end_src&lt;/p&gt; 
&lt;p&gt;*** Doom Emacs&lt;/p&gt; 
&lt;p&gt;In =packages.el=:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (package! claude-code-ide :recipe (:host github :repo &quot;manzaltu/claude-code-ide.el&quot;)) #+end_src&lt;/p&gt; 
&lt;p&gt;In =config.el=: #+begin_src emacs-lisp (use-package! claude-code-ide :bind (&quot;C-c C-&#39;&quot; . claude-code-ide-menu) ; Set your favorite keybinding :config (claude-code-ide-emacs-tools-setup)) ; Optionally enable Emacs MCP tools #+end_src&lt;/p&gt; 
&lt;p&gt;After saving the above, run: =doom sync= in the terminal.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Basic Commands&lt;/p&gt; 
&lt;p&gt;The easiest way to interact with Claude Code IDE is through the transient menu interface, which provides visual access to all available commands. Simply run =M-x claude-code-ide-menu= to open the interactive menu.&lt;/p&gt; 
&lt;p&gt;| Command | Description | |-----------------------------------------+---------------------------------------------------| | =M-x claude-code-ide-menu= | Open transient menu with all Claude Code commands | | =M-x claude-code-ide-emacs-tools-setup= | Set up built-in MCP tools (e.g. xref, project) | | =M-x claude-code-ide= | Start Claude Code for the current project | | =M-x claude-code-ide-send-prompt= | Send prompt to Claude from minibuffer input | | =M-x claude-code-ide-continue= | Continue most recent conversation in directory | | =M-x claude-code-ide-resume= | Resume Claude Code with previous conversation | | =M-x claude-code-ide-stop= | Stop Claude Code for the current project | | =M-x claude-code-ide-switch-to-buffer= | Switch to project&#39;s Claude buffer | | =M-x claude-code-ide-list-sessions= | List all active Claude Code sessions and switch | | =M-x claude-code-ide-check-status= | Check if Claude Code CLI is installed and working | | =M-x claude-code-ide-insert-at-mentioned= | Send selected text to Claude prompt | | =M-x claude-code-ide-send-escape= | Send escape key to Claude terminal | | =M-x claude-code-ide-insert-newline= | Insert newline in Claude prompt (sends \ + Enter) | | =M-x claude-code-ide-toggle= | Toggle visibility of Claude Code window | | =M-x claude-code-ide-toggle-recent= | Toggle most recent Claude window globally | | =M-x claude-code-ide-show-debug= | Show the debug buffer with WebSocket messages | | =M-x claude-code-ide-clear-debug= | Clear the debug buffer |&lt;/p&gt; 
&lt;p&gt;** Multi-Project Support&lt;/p&gt; 
&lt;p&gt;Claude Code IDE automatically detects your project using Emacs&#39; built-in =project.el=. Each project gets its own Claude Code instance with a unique buffer name like =&lt;em&gt;claude-code[project-name]&lt;/em&gt;=.&lt;/p&gt; 
&lt;p&gt;You can run multiple Claude Code instances simultaneously for different projects. Use =claude-code-ide-list-sessions= to see all active sessions and switch between them.&lt;/p&gt; 
&lt;p&gt;** Window Management&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Running =claude-code-ide= when a session is already active will toggle the window visibility&lt;/li&gt; 
 &lt;li&gt;The window can be closed with standard Emacs window commands (=C-x 0=) without stopping Claude&lt;/li&gt; 
 &lt;li&gt;Use =claude-code-ide-toggle-recent= to toggle the most recent Claude window from anywhere, regardless of your current project context. This is useful when you&#39;re outside a project directory but want to quickly hide/show Claude&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Diff Viewing with Ediff&lt;/p&gt; 
&lt;p&gt;When =claude-code-ide-use-ide-diff= is enabled (default), Claude&#39;s code suggestions are displayed using Emacs&#39; powerful =ediff= interface. This provides two key advantages:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;em&gt;Visual diff comparison&lt;/em&gt; - See exactly what Claude wants to change with side-by-side or unified diff views&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Interactive editing&lt;/em&gt; - You can modify Claude&#39;s suggestions before applying them&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;*** How to use ediff:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;When Claude suggests code changes, =ediff= opens automatically&lt;/li&gt; 
 &lt;li&gt;The ediff control buffer becomes active (a small window with ediff commands)&lt;/li&gt; 
 &lt;li&gt;Buffer A shows the current code, Buffer B shows Claude&#39;s suggestion&lt;/li&gt; 
 &lt;li&gt;You can modify Buffer B to refine Claude&#39;s proposed changes&lt;/li&gt; 
 &lt;li&gt;Press =q= in the ediff control buffer to quit&lt;/li&gt; 
 &lt;li&gt;When prompted, choose whether to accept the changes (=y= or =n=)&lt;/li&gt; 
 &lt;li&gt;If you accept (=y=), any changes from Buffer B will be sent back to Claude to be applied on the original file&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This allows you to refine Claude&#39;s suggestions before they&#39;re applied, ensuring the final code meets your exact requirements.&lt;/p&gt; 
&lt;p&gt;** Configuration&lt;/p&gt; 
&lt;p&gt;*** Configuration Variables&lt;/p&gt; 
&lt;p&gt;| Variable | Description | Default | |-----------------------------------------------+---------------------------------------------+--------------------------------------| | &lt;del&gt;claude-code-ide-cli-path&lt;/del&gt; | Path to Claude Code CLI | &lt;del&gt;&quot;claude&quot;&lt;/del&gt; | | &lt;del&gt;claude-code-ide-buffer-name-function&lt;/del&gt; | Function for buffer naming | &lt;del&gt;claude-code-ide--default-buffer-name&lt;/del&gt; | | &lt;del&gt;claude-code-ide-cli-debug&lt;/del&gt; | Enable CLI debug mode (-d flag) | &lt;del&gt;nil&lt;/del&gt; | | &lt;del&gt;claude-code-ide-cli-extra-flags&lt;/del&gt; | Additional CLI flags (e.g. &quot;--model&quot;) | &lt;del&gt;&quot;&quot;&lt;/del&gt; | | &lt;del&gt;claude-code-ide-debug&lt;/del&gt; | Enable debug logging | &lt;del&gt;nil&lt;/del&gt; | | &lt;del&gt;claude-code-ide-terminal-backend&lt;/del&gt; | Terminal backend (vterm or eat) | &lt;del&gt;&#39;vterm&lt;/del&gt; | | &lt;del&gt;claude-code-ide-vterm-anti-flicker&lt;/del&gt; | Enable vterm flicker reduction | &lt;del&gt;t&lt;/del&gt; | | &lt;del&gt;claude-code-ide-vterm-render-delay&lt;/del&gt; | vterm render batching delay (seconds) | &lt;del&gt;0.005&lt;/del&gt; | | &lt;del&gt;claude-code-ide-terminal-initialization-delay&lt;/del&gt; | Initialization delay for terminals | &lt;del&gt;0.1&lt;/del&gt; | | &lt;del&gt;claude-code-ide-log-with-context&lt;/del&gt; | Include session context in log messages | &lt;del&gt;t&lt;/del&gt; | | &lt;del&gt;claude-code-ide-debug-buffer&lt;/del&gt; | Buffer name for debug output | &lt;del&gt;&quot;&lt;em&gt;claude-code-ide-debug&lt;/em&gt;&quot;&lt;/del&gt; | | &lt;del&gt;claude-code-ide-use-side-window&lt;/del&gt; | Use side window vs regular buffer | &lt;del&gt;t&lt;/del&gt; | | &lt;del&gt;claude-code-ide-window-side&lt;/del&gt; | Side for Claude window | &lt;del&gt;&#39;right&lt;/del&gt; | | &lt;del&gt;claude-code-ide-window-width&lt;/del&gt; | Width for side windows (left/right) | &lt;del&gt;90&lt;/del&gt; | | &lt;del&gt;claude-code-ide-window-height&lt;/del&gt; | Height for side windows (top/bottom) | &lt;del&gt;20&lt;/del&gt; | | &lt;del&gt;claude-code-ide-focus-on-open&lt;/del&gt; | Focus Claude window when opened | &lt;del&gt;t&lt;/del&gt; | | &lt;del&gt;claude-code-ide-focus-claude-after-ediff&lt;/del&gt; | Focus Claude window after opening ediff | &lt;del&gt;t&lt;/del&gt; | | &lt;del&gt;claude-code-ide-show-claude-window-in-ediff&lt;/del&gt; | Show Claude window during ediff | &lt;del&gt;t&lt;/del&gt; | | &lt;del&gt;claude-code-ide-use-ide-diff&lt;/del&gt; | Use IDE diff viewer instead of terminal | &lt;del&gt;t&lt;/del&gt; | | &lt;del&gt;claude-code-ide-switch-tab-on-ediff&lt;/del&gt; | Switch to Claude&#39;s tab when opening ediff | &lt;del&gt;t&lt;/del&gt; | | &lt;del&gt;claude-code-ide-system-prompt&lt;/del&gt; | Custom system prompt to append | &lt;del&gt;nil&lt;/del&gt; | | &lt;del&gt;claude-code-ide-enable-mcp-server&lt;/del&gt; | Enable MCP tools server | &lt;del&gt;nil&lt;/del&gt; | | &lt;del&gt;claude-code-ide-mcp-server-port&lt;/del&gt; | Port for MCP tools server | &lt;del&gt;nil&lt;/del&gt; (auto-select) | | &lt;del&gt;claude-code-ide-mcp-server-tools&lt;/del&gt; | Alist of exposed Emacs functions | &lt;del&gt;nil&lt;/del&gt; | | &lt;del&gt;claude-code-ide-diagnostics-backend&lt;/del&gt; | Diagnostics backend (auto/flycheck/flymake) | &lt;del&gt;&#39;auto&lt;/del&gt; | | &lt;del&gt;claude-code-ide-prevent-reflow-glitch&lt;/del&gt; | Prevent terminal reflow glitch (bug #1422) | &lt;del&gt;t&lt;/del&gt; |&lt;/p&gt; 
&lt;p&gt;*** Side Window Configuration&lt;/p&gt; 
&lt;p&gt;Claude Code buffers open in a side window by default. You can customize the placement:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Open Claude on the left side (setq claude-code-ide-window-side &#39;left)&lt;/p&gt; 
&lt;p&gt;;; Open Claude at the bottom with custom height (setq claude-code-ide-window-side &#39;bottom claude-code-ide-window-height 30)&lt;/p&gt; 
&lt;p&gt;;; Open Claude on the right with custom width (setq claude-code-ide-window-side &#39;right claude-code-ide-window-width 100)&lt;/p&gt; 
&lt;p&gt;;; Don&#39;t automatically focus the Claude window (setq claude-code-ide-focus-on-open nil)&lt;/p&gt; 
&lt;p&gt;;; Keep focus on ediff control window when opening diffs (setq claude-code-ide-focus-claude-after-ediff nil)&lt;/p&gt; 
&lt;p&gt;;; Hide Claude window during ediff for more screen space (setq claude-code-ide-show-claude-window-in-ediff nil)&lt;/p&gt; 
&lt;p&gt;;; Disable IDE diff viewer to show diffs in terminal instead (setq claude-code-ide-use-ide-diff nil) #+end_src&lt;/p&gt; 
&lt;p&gt;Or, if you&#39;d prefer to use a regular window:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Use regular window instead of side window (setq claude-code-ide-use-side-window nil) #+end_src&lt;/p&gt; 
&lt;p&gt;*** Terminal Backend Configuration&lt;/p&gt; 
&lt;p&gt;Claude Code IDE supports both =vterm= and =eat= as terminal backends. By default, it uses =vterm=, but you can switch to =eat= if preferred:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Use eat instead of vterm (setq claude-code-ide-terminal-backend &#39;eat)&lt;/p&gt; 
&lt;p&gt;;; Or switch back to vterm (default) (setq claude-code-ide-terminal-backend &#39;vterm) #+end_src&lt;/p&gt; 
&lt;p&gt;The =eat= backend is a pure Elisp terminal emulator that may work better in some environments where =vterm= compilation is problematic. Both backends provide full terminal functionality including color support and special key handling.&lt;/p&gt; 
&lt;p&gt;**** vterm Rendering Optimization&lt;/p&gt; 
&lt;p&gt;Claude Code IDE includes intelligent flicker reduction for vterm terminals to provide smoother visual output:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Enable/disable vterm anti-flicker optimization (enabled by default) (setq claude-code-ide-vterm-anti-flicker t)&lt;/p&gt; 
&lt;p&gt;;; Adjust the render delay for batching updates (default is 0.005 seconds) (setq claude-code-ide-vterm-render-delay 0.01) ; Increase for smoother but less responsive #+end_src&lt;/p&gt; 
&lt;p&gt;This optimization detects rapid terminal redraw sequences (like when Claude expands text areas) and batches them for smoother rendering. The 5ms default delay provides optimal visual quality with imperceptible latency.&lt;/p&gt; 
&lt;p&gt;**** Terminal Initialization Delay&lt;/p&gt; 
&lt;p&gt;Claude Code IDE includes a brief initialization delay when launching terminals to ensure proper layout rendering:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Adjust the terminal initialization delay (default is 0.1 seconds) (setq claude-code-ide-terminal-initialization-delay 0.15)&lt;/p&gt; 
&lt;p&gt;;; Or disable it entirely (may cause visual glitches) (setq claude-code-ide-terminal-initialization-delay 0) #+end_src&lt;/p&gt; 
&lt;p&gt;This delay prevents display artifacts such as misaligned prompts and incorrect cursor positioning that can occur when terminal emulation is initializing. The default 100ms delay is imperceptible but ensures reliable terminal startup.&lt;/p&gt; 
&lt;p&gt;**** Terminal Keybindings&lt;/p&gt; 
&lt;p&gt;Claude Code IDE adds custom keybindings to the terminal for easier interaction:&lt;/p&gt; 
&lt;p&gt;| Keybinding | Command | Description | |------------+--------------------------------+--------------------------------------| | =M-RET= | =claude-code-ide-insert-newline= | Insert a newline in the prompt | | =C-
 &lt;escape&gt;
  = | =claude-code-ide-send-escape= | Send escape key to cancel operations |
 &lt;/escape&gt;&lt;/p&gt; 
&lt;p&gt;These keybindings are automatically set up for both =vterm= and =eat= backends and only apply within Claude Code terminal buffers.&lt;/p&gt; 
&lt;p&gt;**** Terminal Reflow Glitch Prevention (Temporary)&lt;/p&gt; 
&lt;p&gt;Claude Code IDE includes a temporary workaround for a known Claude Code bug ([[https://github.com/anthropics/claude-code/issues/1422][#1422]]) where terminal reflows during window resizes can cause uncontrollable scrolling. This workaround is enabled by default but can be disabled if needed:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Disable the terminal reflow glitch prevention (not recommended until bug is fixed) (setq claude-code-ide-prevent-reflow-glitch nil) #+end_src&lt;/p&gt; 
&lt;p&gt;The workaround will be removed once the upstream bug is fixed.&lt;/p&gt; 
&lt;p&gt;*** Diagnostics Configuration&lt;/p&gt; 
&lt;p&gt;Claude Code IDE supports both Flycheck and Flymake for code diagnostics. By default, it will automatically detect which one is active:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Let Claude Code automatically detect the active diagnostics backend (setq claude-code-ide-diagnostics-backend &#39;auto) ; default&lt;/p&gt; 
&lt;p&gt;;; Or force a specific backend (setq claude-code-ide-diagnostics-backend &#39;flycheck) (setq claude-code-ide-diagnostics-backend &#39;flymake) #+end_src&lt;/p&gt; 
&lt;p&gt;*** Custom Buffer Naming&lt;/p&gt; 
&lt;p&gt;You can customize how Claude Code buffers are named:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq claude-code-ide-buffer-name-function (lambda (directory) (if directory (format &quot;&lt;em&gt;Claude:%s&lt;/em&gt;&quot; (file-name-nondirectory (directory-file-name directory))) &quot;&lt;em&gt;Claude:Global&lt;/em&gt;&quot;))) #+end_src&lt;/p&gt; 
&lt;p&gt;*** Custom CLI Flags&lt;/p&gt; 
&lt;p&gt;You can pass additional flags to the Claude Code CLI:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Use a specific model (setq claude-code-ide-cli-extra-flags &quot;--model opus&quot;)&lt;/p&gt; 
&lt;p&gt;;; Pass multiple flags (setq claude-code-ide-cli-extra-flags &quot;--model opus --no-cache&quot;)&lt;/p&gt; 
&lt;p&gt;;; Flags are added to all Claude Code sessions #+end_src&lt;/p&gt; 
&lt;p&gt;Note: These flags are appended to the Claude command after any built-in flags like =-d= (debug) or =-r= (resume).&lt;/p&gt; 
&lt;p&gt;*** Custom System Prompt&lt;/p&gt; 
&lt;p&gt;You can append a custom system prompt to Claude&#39;s default prompt, allowing you to customize Claude&#39;s behavior for specific projects or contexts:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Set a custom system prompt (setq claude-code-ide-system-prompt &quot;You are an expert in Elisp and Emacs development.&quot;)&lt;/p&gt; 
&lt;p&gt;;; Or configure it per-project using dir-locals.el ;; In .dir-locals.el: ((nil . ((claude-code-ide-system-prompt . &quot;Focus on functional programming patterns and avoid mutations.&quot;))))&lt;/p&gt; 
&lt;p&gt;;; Set via the transient menu: M-x claude-code-ide-menu → Configuration → Set system prompt #+end_src&lt;/p&gt; 
&lt;p&gt;When set, this adds the =--append-system-prompt= flag to the Claude command. Set to =nil= to disable (default).&lt;/p&gt; 
&lt;p&gt;*** Debugging&lt;/p&gt; 
&lt;p&gt;**** Claude CLI Debug Mode&lt;/p&gt; 
&lt;p&gt;To enable debug mode for Claude Code CLI (passes the =-d= flag):&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq claude-code-ide-cli-debug t) #+end_src&lt;/p&gt; 
&lt;p&gt;**** Emacs Debug Logging&lt;/p&gt; 
&lt;p&gt;To enable debug logging within Emacs (logs WebSocket messages and JSON-RPC communication):&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setq claude-code-ide-debug t) #+end_src&lt;/p&gt; 
&lt;p&gt;Then view debug logs with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=M-x claude-code-ide-show-debug= - Show the debug buffer&lt;/li&gt; 
 &lt;li&gt;=M-x claude-code-ide-clear-debug= - Clear the debug buffer&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The debug buffer shows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;WebSocket connection events&lt;/li&gt; 
 &lt;li&gt;All JSON-RPC messages (requests/responses)&lt;/li&gt; 
 &lt;li&gt;Error messages and diagnostics&lt;/li&gt; 
 &lt;li&gt;General debug information with session context&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Multiple Claude Code Instances on One Project&lt;/p&gt; 
&lt;p&gt;Using git worktrees is the recommended way for running multiple Claude Code instances on different branches of the same project. This allows you to develop features or fix bugs in parallel:&lt;/p&gt; 
&lt;p&gt;#+begin_src bash&lt;/p&gt; 
&lt;h1&gt;Create a new worktree for a feature branch&lt;/h1&gt; 
&lt;p&gt;git worktree add ../myproject-worktree feature-branch #+end_src&lt;/p&gt; 
&lt;p&gt;#+begin_src elisp ;; Start Claude Code in the main project find-file /path/to/myproject M-x claude-code-ide&lt;/p&gt; 
&lt;p&gt;;; Start another Claude Code instance in the worktree find-file /path/to/myproject-worktree M-x claude-code-ide #+end_src&lt;/p&gt; 
&lt;p&gt;Each worktree is treated as a separate project by =project.el=, allowing you to have independent Claude Code sessions with their own buffers (e.g., =&lt;em&gt;claude-code[myproject]&lt;/em&gt;= and =&lt;em&gt;claude-code[myproject-worktree]&lt;/em&gt;=).&lt;/p&gt; 
&lt;p&gt;** Emacs MCP Tools&lt;/p&gt; 
&lt;p&gt;Claude Code IDE includes built-in MCP tools that expose Emacs functionality to Claude, enabling powerful code navigation and analysis capabilities:&lt;/p&gt; 
&lt;p&gt;*** Built-in Tools&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;=xref-find-references= - Find all references to a symbol throughout the project&lt;/li&gt; 
 &lt;li&gt;=xref-find-apropos= - Find symbols matching a pattern across the entire project&lt;/li&gt; 
 &lt;li&gt;=treesit-info= - Get tree-sitter syntax tree information for deep code structure analysis&lt;/li&gt; 
 &lt;li&gt;=imenu-list-symbols= - List all symbols (functions, classes, variables) in a file using imenu&lt;/li&gt; 
 &lt;li&gt;=project-info= - Get information about the current project (directory, files, etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Enabling MCP Tools&lt;/p&gt; 
&lt;p&gt;To enable these tools, add to your configuration:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Set up the built-in Emacs tools (claude-code-ide-emacs-tools-setup) #+end_src&lt;/p&gt; 
&lt;p&gt;Once enabled, Claude can use these tools to navigate your codebase. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&quot;Find the definition of function foo&quot;&lt;/li&gt; 
 &lt;li&gt;&quot;Show me all places where this variable is used&quot;&lt;/li&gt; 
 &lt;li&gt;&quot;What type of AST node is under the cursor?&quot;&lt;/li&gt; 
 &lt;li&gt;&quot;Analyze the parse tree of this entire file&quot;&lt;/li&gt; 
 &lt;li&gt;&quot;List all functions and variables in this file&quot;&lt;/li&gt; 
 &lt;li&gt;&quot;How many files are in this project?&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Creating Custom MCP Tools&lt;/p&gt; 
&lt;p&gt;You can expose your own Emacs functions to Claude through the MCP tools system. This allows Claude to interact with specialized Emacs features, custom commands, or domain-specific functionality.&lt;/p&gt; 
&lt;p&gt;*** Tool Definition Format&lt;/p&gt; 
&lt;p&gt;Define tools using the =claude-code-ide-make-tool= function:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (claude-code-ide-make-tool :function #&#39;function-name ; The Emacs function to call :name &quot;tool_name&quot; ; Name for Claude to use (snake_case recommended) :description &quot;...&quot; ; Human-readable description :args &#39;((:name &quot;param1&quot; ; List of argument specifications :type string ; Type: string, number, integer, boolean, etc. :description &quot;...&quot; ; What this parameter does :optional t))) ; Optional parameters marked with :optional t #+end_src&lt;/p&gt; 
&lt;p&gt;Available argument types: =string=, =number=, =integer=, =boolean=, =array=, =object=, =null=&lt;/p&gt; 
&lt;p&gt;*** Context-Aware Tool Example&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp ;; Define a context-aware function that operates in the session&#39;s project (defun my-project-grep (pattern) &quot;Search for PATTERN in the current session&#39;s project.&quot; (claude-code-ide-mcp-server-with-session-context nil ;; This executes with the session&#39;s project directory as default-directory (let* ((project-dir default-directory) (results (shell-command-to-string (format &quot;rg -n &#39;%s&#39; %s&quot; pattern project-dir)))) results)))&lt;/p&gt; 
&lt;p&gt;;; Define and register the tool (automatically added to claude-code-ide-mcp-server-tools) (claude-code-ide-make-tool :function #&#39;my-project-grep :name &quot;my_project_grep&quot; :description &quot;Search for pattern in project files&quot; :args &#39;((:name &quot;pattern&quot; :type string :description &quot;Pattern to search for&quot;)))&lt;/p&gt; 
&lt;p&gt;;; Enable Emacs tool MCP server (claude-code-ide-emacs-tools-setup) #+end_src&lt;/p&gt; 
&lt;p&gt;The =claude-code-ide-mcp-server-with-session-context= macro ensures your tool executes in the correct project context.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;License&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This project is licensed under the GNU General Public License v3.0 or later. See the LICENSE file for details.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Trademark Notice&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Claude® is a registered trademark of Anthropic, PBC. Claude Code is an application developed by Anthropic, PBC.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Related Projects&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://docs.anthropic.com/en/docs/claude-code][Claude Code CLI]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/anthropics/claude-code][Claude Code VS Code Extension]]&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/coder/claudecode.nvim][claudecode.nvim]] - Neovim integration&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>lizqwerscott/mcp.el</title>
      <link>https://github.com/lizqwerscott/mcp.el</link>
      <description>&lt;p&gt;An Mcp client inside Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: MCP.el - Model Context Protocol for Emacs&lt;/p&gt; 
&lt;p&gt;[[https://melpa.org/#/mcp][file:https://melpa.org/packages/mcp-badge.svg]] [[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPLv3-blue.svg]]&lt;/p&gt; 
&lt;p&gt;This is an Emacs client for interfacing with [[https://modelcontextprotocol.io/introduction][MCP]], supporting connections to MCP servers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Structured communication with MCP servers&lt;/li&gt; 
 &lt;li&gt;Support for filesystem and generic MCP servers&lt;/li&gt; 
 &lt;li&gt;Extensible tool and prompt system&lt;/li&gt; 
 &lt;li&gt;Asynchronous and synchronous operations&lt;/li&gt; 
 &lt;li&gt;Resource management capabilities&lt;/li&gt; 
 &lt;li&gt;Intuitive interface for managing server lifecycle (start/stop/restart)&lt;/li&gt; 
 &lt;li&gt;Integration with popular Emacs packages (e.g., gptel, llm)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installation Need Emacs 30 or higher version #+begin_src elisp (use-package mcp :ensure t :after gptel :custom (mcp-hub-servers `((&quot;filesystem&quot; . (:command &quot;npx&quot; :args (&quot;-y&quot; &quot;@modelcontextprotocol/server-filesystem&quot; &quot;/home/lizqwer/MyProject/&quot;))) (&quot;fetch&quot; . (:command &quot;uvx&quot; :args (&quot;mcp-server-fetch&quot;))) (&quot;qdrant&quot; . (:url &quot;&lt;a href=&quot;http://localhost:8000/sse&quot;&gt;http://localhost:8000/sse&lt;/a&gt;&quot;)) (&quot;graphlit&quot; . ( :command &quot;npx&quot; :args (&quot;-y&quot; &quot;graphlit-mcp-server&quot;) :env ( :GRAPHLIT_ORGANIZATION_ID &quot;your-organization-id&quot; :GRAPHLIT_ENVIRONMENT_ID &quot;your-environment-id&quot; :GRAPHLIT_JWT_SECRET &quot;your-jwt-secret&quot;))))) :config (require &#39;mcp-hub) :hook (after-init . mcp-hub-start-all-server)) #+end_src&lt;/li&gt; 
 &lt;li&gt;Usage ** Mcp hub *** Configuring MCP Servers #+begin_src elisp (setq mcp-hub-servers &#39;((&quot;filesystem&quot; . (:command &quot;npx&quot; :args (&quot;-y&quot; &quot;@modelcontextprotocol/server-filesystem&quot; &quot;/home/lizqwer/MyProject/&quot;))) (&quot;fetch&quot; . (:command &quot;uvx&quot; :args (&quot;mcp-server-fetch&quot;))) (&quot;qdrant&quot; . (:url &quot;&lt;a href=&quot;http://localhost:8000/sse&quot;&gt;http://localhost:8000/sse&lt;/a&gt;&quot;)) (&quot;graphlit&quot; . ( :command &quot;npx&quot; :args (&quot;-y&quot; &quot;graphlit-mcp-server&quot;) :env ( :GRAPHLIT_ORGANIZATION_ID &quot;your-organization-id&quot; :GRAPHLIT_ENVIRONMENT_ID &quot;your-environment-id&quot; :GRAPHLIT_JWT_SECRET &quot;your-jwt-secret&quot;))))) #+end_src You can use =mcp-hub-start-all-server= to start all MCP servers, such as launching all MCP servers after starting Emacs. #+begin_src elisp (add-hook &#39;after-init-hook #&#39;mcp-hub-start-all-server) #+end_src *** Managing MCP Servers Use =mcp-hub= to launch the server management interface, which will automatically start all configured MCP servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/31877c0b-d71a-491d-9830-2afed8d6218a&quot; alt=&quot;mcp-hub&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;*** Keymap | key | function | description | |-----+----------------------------+-----------------------------------------| | l | mcp-hub-view-log | View server logs | | s | mcp-hub-start-server | Start server under cursor | | k | mcp-hub-close-server | Stop server under cursor | | r | mcp-hub-restart-server | Restart server under cursor | | S | mcp-hub-start-all-server | Start all configured servers | | R | mcp-hub-restart-all-server | Restart all configured servers | | K | mcp-hub-close-all-server | Stop all running servers | *** use with [[https://github.com/karthink/gptel][gptel]]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For =gptel= integration, See the [[https://github.com/karthink/gptel?tab=readme-ov-file#model-context-protocol-mcp-integration][gptel mcp]] for details.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/lizqwerscott/gptel-mcp.el][gptel-mcp.el]] is interface integration for gptel.el and mcp.el ** Example [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] server. *** Establish the connection first. #+begin_src elisp (mcp-connect-server &quot;filesystem&quot; :command &quot;npx&quot; :args &#39;(&quot;-y&quot; &quot;@modelcontextprotocol/server-filesystem&quot; &quot;~/Downloads/&quot;) :initial-callback #&#39;(lambda (connection) (message &quot;%s connection&quot; (jsonrpc-name connection))) :tools-callback #&#39;(lambda (connection tools) (message &quot;%s tools: %s&quot; (jsonrpc-name connection) tools)) :prompts-callback #&#39;(lambda (connection prompts) (message &quot;%s prompts: %s&quot; (jsonrpc-name connection) prompts)) :resources-callback #&#39;(lambda (connection resources) (message &quot;%s resources: %s&quot; (jsonrpc-name connection) resources))) #+end_src *** Define the use of tools. The current text is being tested using the [[https://github.com/karthink/gptel/issues/514][gptel tool]] branch.Use =mcp-make-text-tool= to create standard tool call data ([[https://github.com/ahyatt/llm/discussions/124][Discussions]]).It is recommended to create tools within the tools-callback or wait for the mcp connect server to complete. #+begin_src elisp (mcp-make-text-tool &quot;filesystem&quot; &quot;write_file&quot;) #+end_src This will generate a data structure where the function is an auto-generated synchronous or asynchronous lambda function for accessing the MCP server. #+begin_src elisp (list :function #&#39;(lambda (&amp;amp;rest args) ;; Synchronous or asynchronous access to the MCP server&#39;s Lambda function. ) :name &quot;write_file&quot; :async nil :description &quot;Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.&quot; :args ((:type &quot;string&quot; :name &quot;path&quot; :description &quot;path&quot;) (:type &quot;string&quot; :name &quot;content&quot; :description &quot;content&quot;)) :category &quot;files&quot;) #+end_src *** Disconnect from the server. #+begin_src elisp (mcp-stop-server &quot;filesystem&quot;) #+end_src *** Manual function call **** Synchronize #+begin_src elisp (let ((connection (gethash &quot;filesystem&quot; mcp-server-connections))) (mcp-call-tool connection &quot;write_file&quot; &#39;(:path &quot;filename or file path&quot; :content &quot;the file content&quot;))) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &quot;filesystem&quot; mcp-server-connections))) (mcp-async-call-tool connection &quot;write_file&quot; &#39;(:path &quot;filename or file path&quot; :content &quot;the file content&quot;) #&#39;(lambda (res) ;; handle res (mcp--parse-tool-call-result res)) #&#39;(lambda (code message) ;; handle error (format &quot;call %s tool error with %s: %s&quot; tool-name code message)))) #+end_src *** Manual get prompt Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks prompts, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. **** Synchronize #+begin_src elisp (let ((connection (gethash &quot;everything&quot; mcp-server-connections))) (mcp-get-prompt connection &quot;complex_prompt&quot; &#39;(:temperature &quot;1.0&quot;))) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &quot;everything&quot; mcp-server-connections))) (mcp-async-get-prompt connection &quot;complex_prompt&quot; &#39;(:temperature &quot;1.0&quot;) #&#39;(lambda (res) (message &quot;prompt: %s&quot; res)) #&#39;(lambda (code message) (message &quot;error call: %s, %s&quot; code message)))) #+end_src *** Manual get resources Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks resources, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. **** Synchronize #+begin_src elisp (let ((connection (gethash &quot;everything&quot; mcp-server-connections))) (mcp-read-resource connection &quot;test://static/resource/1&quot;)) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &quot;everything&quot; mcp-server-connections))) (mcp-async-read-resource connection &quot;test://static/resource/1&quot; #&#39;(lambda (resource) (message &quot;res: %s&quot; resource)))) #+end_src *** Get resource templates Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks resources, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. #+begin_src elisp (let ((connection (gethash &quot;everything&quot; mcp-server-connections))) (mcp-async-list-resource-templates connection #&#39;(lambda (connection templates) (message &quot;%s&quot; templates)))) #+end_src&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Roadmap&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; HTTP SSE based MCP server connections&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; mcp marketplace (browser and auto install mcp server)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Simplified integration with other Emacs AI clients&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Expanded documentation&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Full MCP protocol client implementation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;License This project is licensed under the GNU General Public License v3.0 - see the [[file:LICENSE][LICENSE]] file for details.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>karthink/gptel</title>
      <link>https://github.com/karthink/gptel</link>
      <description>&lt;p&gt;A simple LLM client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: gptel: A simple LLM client for Emacs&lt;/p&gt; 
&lt;p&gt;[[https://elpa.nongnu.org/nongnu/gptel.html][file:https://elpa.nongnu.org/nongnu/gptel.svg]] [[https://elpa.nongnu.org/nongnu-devel/gptel.html][file:https://elpa.nongnu.org/nongnu-devel/gptel.svg]] [[https://stable.melpa.org/#/gptel][file:https://stable.melpa.org/packages/gptel-badge.svg]] [[https://melpa.org/#/gptel][file:https://melpa.org/packages/gptel-badge.svg]]&lt;/p&gt; 
&lt;p&gt;gptel is a simple Large Language Model chat client for Emacs, with support for multiple models and backends. It works in the spirit of Emacs, available at any time and uniformly in any buffer.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;General usage&lt;/em&gt;: ([[https://www.youtube.com/watch?v=bsRnh_brggM][YouTube Demo]])&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/8607532/230516812-86510a09-a2fb-4cbd-b53f-cc2522d05a13.mp4&quot;&gt;https://user-images.githubusercontent.com/8607532/230516812-86510a09-a2fb-4cbd-b53f-cc2522d05a13.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/8607532/230516816-ae4a613a-4d01-4073-ad3f-b66fa73c6e45.mp4&quot;&gt;https://user-images.githubusercontent.com/8607532/230516816-ae4a613a-4d01-4073-ad3f-b66fa73c6e45.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;In-place usage&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/cec11aec-52f6-412e-9e7a-9358e8b9b1bf&quot;&gt;https://github.com/user-attachments/assets/cec11aec-52f6-412e-9e7a-9358e8b9b1bf&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Tool use&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/5f993659-4cfd-49fa-b5cd-19c55766b9b2&quot;&gt;https://github.com/user-attachments/assets/5f993659-4cfd-49fa-b5cd-19c55766b9b2&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/8f57c20b-e1b0-4d86-b972-f46fb90ae1e7&quot;&gt;https://github.com/user-attachments/assets/8f57c20b-e1b0-4d86-b972-f46fb90ae1e7&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;See also [[https://youtu.be/g1VMGhC5gRU][this youtube demo (2 minutes)]] by Armin Darvish.&lt;/p&gt; 
&lt;h1&gt;&lt;em&gt;Media support&lt;/em&gt;&lt;/h1&gt; 
&lt;h1&gt;#+html: &lt;p align=&quot;center&quot;&gt;&lt;/p&gt;&lt;/h1&gt; 
&lt;h1&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/1fd947e1-226b-4be2-bc68-7b22b2e3215f&quot;&gt;https://github.com/user-attachments/assets/1fd947e1-226b-4be2-bc68-7b22b2e3215f&lt;/a&gt;&lt;/h1&gt; 
&lt;h1&gt;#+html: &lt;p&gt;&lt;/p&gt;&lt;/h1&gt; 
&lt;h1&gt;&lt;em&gt;Multi-LLM support demo&lt;/em&gt;:&lt;/h1&gt; 
&lt;h1&gt;&lt;a href=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/8607532/278854024-ae1336c4-5b87-41f2-83e9-e415349d6a43.mp4&quot;&gt;https://github-production-user-asset-6210df.s3.amazonaws.com/8607532/278854024-ae1336c4-5b87-41f2-83e9-e415349d6a43.mp4&lt;/a&gt;&lt;/h1&gt; 
&lt;hr /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Interact with LLMs from anywhere in Emacs (any buffer, shell, minibuffer, wherever).&lt;/li&gt; 
 &lt;li&gt;LLM responses are in Markdown or Org markup.&lt;/li&gt; 
 &lt;li&gt;Supports multiple independent conversations, one-off ad hoc interactions and anything in between.&lt;/li&gt; 
 &lt;li&gt;Supports tool-use to equip LLMs with agentic capabilities.&lt;/li&gt; 
 &lt;li&gt;Supports Model Context Protocol (MCP) integration using [[https://github.com/lizqwerscott/mcp.el][mcp.el]].&lt;/li&gt; 
 &lt;li&gt;Supports multi-modal input (include images, documents).&lt;/li&gt; 
 &lt;li&gt;Supports &quot;reasoning&quot; content in LLM responses.&lt;/li&gt; 
 &lt;li&gt;Save chats as regular Markdown/Org/Text files and resume them later.&lt;/li&gt; 
 &lt;li&gt;Edit your previous prompts or LLM responses when continuing a conversation. These will be fed back to the model.&lt;/li&gt; 
 &lt;li&gt;Supports introspection, so you can see /exactly/ what will be sent. Inspect and modify queries before sending them.&lt;/li&gt; 
 &lt;li&gt;Pause multi-stage requests at an intermediate stage and resume them later.&lt;/li&gt; 
 &lt;li&gt;Don&#39;t like gptel&#39;s workflow? Use it to create your own for any supported model/backend with a [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][simple API]].&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;gptel uses Curl if available, but falls back to the built-in url-retrieve to work without external dependencies.&lt;/p&gt; 
&lt;p&gt;** Contents :toc:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[#installation][Installation]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#straight][Straight]]&lt;/li&gt; 
   &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; 
   &lt;li&gt;[[#doom-emacs][Doom Emacs]]&lt;/li&gt; 
   &lt;li&gt;[[#spacemacs][Spacemacs]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#setup][Setup]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#chatgpt][ChatGPT]]&lt;/li&gt; 
   &lt;li&gt;[[#other-llm-backends][Other LLM backends]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#optional-securing-api-keys-with-authinfo][(Optional) Securing API keys with =authinfo=]]&lt;/li&gt; 
     &lt;li&gt;[[#azure][Azure]]&lt;/li&gt; 
     &lt;li&gt;[[#gpt4all][GPT4All]]&lt;/li&gt; 
     &lt;li&gt;[[#ollama][Ollama]]&lt;/li&gt; 
     &lt;li&gt;[[#open-webui][Open WebUI]]&lt;/li&gt; 
     &lt;li&gt;[[#gemini][Gemini]]&lt;/li&gt; 
     &lt;li&gt;[[#llamacpp-or-llamafile][Llama.cpp or Llamafile]]&lt;/li&gt; 
     &lt;li&gt;[[#kagi-fastgpt--summarizer][Kagi (FastGPT &amp;amp; Summarizer)]]&lt;/li&gt; 
     &lt;li&gt;[[#togetherai][together.ai]]&lt;/li&gt; 
     &lt;li&gt;[[#anyscale][Anyscale]]&lt;/li&gt; 
     &lt;li&gt;[[#perplexity][Perplexity]]&lt;/li&gt; 
     &lt;li&gt;[[#anthropic-claude][Anthropic (Claude)]]&lt;/li&gt; 
     &lt;li&gt;[[#groq][Groq]]&lt;/li&gt; 
     &lt;li&gt;[[#mistral-le-chat][Mistral Le Chat]]&lt;/li&gt; 
     &lt;li&gt;[[#openrouter][OpenRouter]]&lt;/li&gt; 
     &lt;li&gt;[[#privategpt][PrivateGPT]]&lt;/li&gt; 
     &lt;li&gt;[[#deepseek][DeepSeek]]&lt;/li&gt; 
     &lt;li&gt;[[#sambanova-deepseek][Sambanova (Deepseek)]]&lt;/li&gt; 
     &lt;li&gt;[[#cerebras][Cerebras]]&lt;/li&gt; 
     &lt;li&gt;[[#github-models][Github Models]]&lt;/li&gt; 
     &lt;li&gt;[[#novita-ai][Novita AI]]&lt;/li&gt; 
     &lt;li&gt;[[#xai][xAI]]&lt;/li&gt; 
     &lt;li&gt;[[#aiml-api][AI/ML API]]&lt;/li&gt; 
     &lt;li&gt;[[#github-copilotchat][GitHub CopilotChat]]&lt;/li&gt; 
     &lt;li&gt;[[#aws-bedrock][AWS Bedrock]]&lt;/li&gt; 
     &lt;li&gt;[[#moonshot-kimi][Moonshot (Kimi)]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#usage][Usage]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#in-any-buffer][In any buffer:]]&lt;/li&gt; 
   &lt;li&gt;[[#in-a-dedicated-chat-buffer][In a dedicated chat buffer:]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#including-media-images-documents-or-plain-text-files-with-requests][Including media (images, documents or plain-text files) with requests]]&lt;/li&gt; 
     &lt;li&gt;[[#save-and-restore-your-chat-sessions][Save and restore your chat sessions]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#setting-options-backend-model-request-parameters-system-prompts-and-more][Setting options (backend, model, request parameters, system prompts and more)]]&lt;/li&gt; 
   &lt;li&gt;[[#include-more-context-with-requests][Include more context with requests]]&lt;/li&gt; 
   &lt;li&gt;[[#handle-reasoning-content][Handle &quot;reasoning&quot; content]]&lt;/li&gt; 
   &lt;li&gt;[[#tool-use][Tool use]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#defining-gptel-tools][Defining gptel tools]]&lt;/li&gt; 
     &lt;li&gt;[[#selecting-tools][Selecting tools]]&lt;/li&gt; 
     &lt;li&gt;[[#model-context-protocol-mcp-integration][Model Context Protocol (MCP) integration]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#rewrite-refactor-or-fill-in-a-region][Rewrite, refactor or fill in a region]]&lt;/li&gt; 
   &lt;li&gt;[[#extra-org-mode-conveniences][Extra Org mode conveniences]]&lt;/li&gt; 
   &lt;li&gt;[[#introspection-examine-debug-or-modify-requests][Introspection (examine, debug or modify requests)]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#faq][FAQ]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#chat-buffer-ui][Chat buffer UI]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-the-window-to-scroll-automatically-as-the-response-is-inserted][I want the window to scroll automatically as the response is inserted]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-the-cursor-to-move-to-the-next-prompt-after-the-response-is-inserted][I want the cursor to move to the next prompt after the response is inserted]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-to-change-the-formatting-of-the-prompt-and-llm-response][I want to change the formatting of the prompt and LLM response]]&lt;/li&gt; 
     &lt;li&gt;[[#how-does-gptel-distinguish-between-user-prompts-and-llm-responses][How does gptel distinguish between user prompts and LLM responses?]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#transient-menu-behavior][Transient menu behavior]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-to-set-gptel-options-but-only-for-this-buffer][I want to set gptel options but only for this buffer]]&lt;/li&gt; 
     &lt;li&gt;[[#i-want-the-transient-menu-options-to-be-saved-so-i-only-need-to-set-them-once][I want the transient menu options to be saved so I only need to set them once]]&lt;/li&gt; 
     &lt;li&gt;[[#using-the-transient-menu-leaves-behind-extra-windows][Using the transient menu leaves behind extra windows]]&lt;/li&gt; 
     &lt;li&gt;[[#can-i-change-the-transient-menu-key-bindings][Can I change the transient menu key bindings?]]&lt;/li&gt; 
     &lt;li&gt;[[#doom-emacs-sending-a-query-from-the-gptel-menu-fails-because-of-a-key-conflict-with-org-mode][(Doom Emacs) Sending a query from the gptel menu fails because of a key conflict with Org mode]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;[[#miscellaneous][Miscellaneous]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#i-want-to-use-gptel-in-a-way-thats-not-supported-by-gptel-send-or-the-options-menu][I want to use gptel in a way that&#39;s not supported by =gptel-send= or the options menu]]&lt;/li&gt; 
     &lt;li&gt;[[#chatgpt-i-get-the-error-http2-429-you-exceeded-your-current-quota][(ChatGPT) I get the error &quot;(HTTP/2 429) You exceeded your current quota&quot;]]&lt;/li&gt; 
     &lt;li&gt;[[#why-another-llm-client][Why another LLM client?]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#additional-configuration][Additional Configuration]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#option-presets][Option presets]] 
    &lt;ul&gt; 
     &lt;li&gt;[[#applying-presets-to-requests-automatically][Applying presets to requests automatically]]&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#alternatives][Alternatives]] 
  &lt;ul&gt; 
   &lt;li&gt;[[#packages-using-gptel][Packages using gptel]]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;[[#acknowledgments][Acknowledgments]]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Installation&lt;/p&gt; 
&lt;p&gt;Note: gptel requires Transient 0.7.4 or higher. Transient is a built-in package and Emacs does not update it by default. Ensure that =package-install-upgrade-built-in= is true, or update Transient manually.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Release version&lt;/em&gt;: =M-x package-install= ⏎ =gptel= in Emacs.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Development snapshot&lt;/em&gt;: Add MELPA or NonGNU-devel ELPA to your list of package sources, then install with =M-x package-install= ⏎ =gptel=.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Optional:&lt;/em&gt; Install =markdown-mode=.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; *** Straight #+html: &lt;/summary&gt; #+begin_src emacs-lisp (straight-use-package &#39;gptel) #+end_src #+html: 
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; *** Manual #+html: &lt;/summary&gt; Note: gptel requires Transient 0.7.4 or higher. Transient is a built-in package and Emacs does not update it by default. Ensure that =package-install-upgrade-built-in= is true, or update Transient manually.
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Clone or download this repository and run =M-x package-install-file⏎= on the repository directory. #+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; *** Doom Emacs #+html: &lt;/summary&gt; In =packages.el=
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (package! gptel :recipe (:nonrecursive t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;In =config.el=&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (use-package! gptel :config (setq! gptel-api-key &quot;your key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;&quot;your key&quot; can be the API key itself, or (safer) a function that returns the key. Setting =gptel-api-key= is optional, you will be asked for a key if it&#39;s not found.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; *** Spacemacs #+html: &lt;/summary&gt; In your =.spacemacs= file, add =llm-client= to =dotspacemacs-configuration-layers=.
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (llm-client :variables llm-client-enable-gptel t) #+end_src #+html: &lt;/p&gt;
&lt;/details&gt; ** Setup
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;gptel supports a number of LLM providers:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
  | LLM Backend | Requires | |----------------------+----------------------------| | ChatGPT | [[https://platform.openai.com/account/api-keys][API key]] | | Anthropic (Claude) | [[https://www.anthropic.com/api][API key]] | | Gemini | [[https://makersuite.google.com/app/apikey][API key]] | | Ollama | [[https://ollama.ai/][Ollama running locally]] | | Open WebUI | [[https://openwebui.com/][Open WebUI running locally]] | | Llama.cpp | [[https://github.com/ggml-org/llama.cpp/tree/master/tools/server#quick-start][Llama.cpp running locally]] | | Llamafile | [[https://github.com/Mozilla-Ocho/llamafile#quickstart][Local Llamafile server]] | | GPT4All | [[https://gpt4all.io/index.html][GPT4All running locally]] | | Kagi FastGPT | [[https://kagi.com/settings?p=api][API key]] | | Kagi Summarizer | [[https://kagi.com/settings?p=api][API key]] | | Azure | Deployment and API key | | Groq | [[https://console.groq.com/keys][API key]] | | Mistral Le Chat | [[https://console.mistral.ai/api-keys][API key]] | | Perplexity | [[https://docs.perplexity.ai/docs/getting-started][API key]] | | OpenRouter | [[https://openrouter.ai/keys][API key]] | | AI/ML API | [[https://aimlapi.com/app/?utm_source=gptel&amp;amp;utm_medium=github&amp;amp;utm_campaign=integration][API key]] | | together.ai | [[https://api.together.xyz/settings/api-keys][API key]] | | Anyscale | [[https://docs.endpoints.anyscale.com/][API key]] | | PrivateGPT | [[https://github.com/zylon-ai/private-gpt#-documentation][PrivateGPT running locally]] | | DeepSeek | [[https://platform.deepseek.com/api_keys][API key]] | | Sambanova (Deepseek) | [[https://cloud.sambanova.ai/apis][API key]] | | Cerebras | [[https://cloud.cerebras.ai/][API key]] | | Github Models | [[https://github.com/settings/tokens][Token]] | | Novita AI | [[https://novita.ai/model-api/product/llm-api?utm_source=github_gptel&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=link][Token]] | | xAI | [[https://console.x.ai?utm_source=github_gptel&amp;amp;utm_medium=github_readme&amp;amp;utm_campaign=link][API key]] | | GitHub CopilotChat | GitHub account | | Bedrock | AWS credentials | | Moonshot (Kimi) | API key ([[https://platform.moonshot.cn/console][CN]] or [[https://platform.moonshot.ai/console][Global]]) | #+html: 
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;*** ChatGPT Procure an [[https://platform.openai.com/account/api-keys][OpenAI API key]].&lt;/p&gt; 
&lt;p&gt;Optional: Set =gptel-api-key= to the key. Alternatively, you may choose a more secure method such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Setting it to a custom function that returns the key.&lt;/li&gt; 
 &lt;li&gt;Leaving it set to the default =gptel-api-key-from-auth-source= function which reads keys from =~/.authinfo=. (See [[#optional-securing-api-keys-with-authinfo][authinfo details]])&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*** Other LLM backends&lt;/p&gt; 
&lt;p&gt;ChatGPT is configured out of the box. If you want to use other LLM backends (like Ollama, Claude/Anthropic or Gemini) you need to register and configure them first.&lt;/p&gt; 
&lt;p&gt;As an example, registering a backend typically looks like the following:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude&quot; :stream t :key gptel-api-key) #+end_src&lt;/p&gt; 
&lt;p&gt;Once this backend is registered, you&#39;ll see model names prefixed by &quot;Claude:&quot; appear in gptel&#39;s menu.&lt;/p&gt; 
&lt;p&gt;See below for details on your preferred LLM provider, including local LLMs.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** (Optional) Securing API keys with =authinfo= #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;You can use Emacs&#39; built-in support for =authinfo= to store API keys required by gptel. Add your API keys to =~/.authinfo=, and leave =gptel-api-key= set to its default. By default, the API endpoint DNS name (e.g. &quot;api.openai.com&quot;) is used as HOST and &quot;apikey&quot; as USER.&lt;/p&gt; 
 &lt;p&gt;#+begin_src authinfo machine api.openai.com login apikey password sk-secret-openai-api-key-goes-here machine api.anthropic.com login apikey password sk-secret-anthropic-api-key-goes-here #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Azure #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-azure &quot;Azure-1&quot; ;Name, whatever you&#39;d like :protocol &quot;https&quot; ;Optional -- https is the default :host &quot;YOUR_RESOURCE_NAME.openai.azure.com&quot; :endpoint &quot;/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&quot; ;or equivalent :stream t ;Enable streaming responses :key #&#39;gptel-api-key :models &#39;(gpt-3.5-turbo gpt-4)) #+end_src&lt;/p&gt; 
 &lt;p&gt;Refer to the documentation of =gptel-make-azure= to set more parameters.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel. (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-3.5-turbo gptel-backend (gptel-make-azure &quot;Azure-1&quot; :protocol &quot;https&quot; :host &quot;YOUR_RESOURCE_NAME.openai.azure.com&quot; :endpoint &quot;/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2023-05-15&quot; :stream t :key #&#39;gptel-api-key :models &#39;(gpt-3.5-turbo gpt-4))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** GPT4All #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-gpt4all &quot;GPT4All&quot; ;Name of your choosing :protocol &quot;http&quot; :host &quot;localhost:4891&quot; ;Where it&#39;s running :models &#39;(mistral-7b-openorca.Q4_0.gguf)) ;Available models #+end_src&lt;/p&gt; 
 &lt;p&gt;These are the required parameters, refer to the documentation of =gptel-make-gpt4all= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above. Additionally you may want to increase the response token size since GPT4All uses very short (often truncated) responses by default.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-max-tokens 500 gptel-model &#39;mistral-7b-openorca.Q4_0.gguf gptel-backend (gptel-make-gpt4all &quot;GPT4All&quot; :protocol &quot;http&quot; :host &quot;localhost:4891&quot; :models &#39;(mistral-7b-openorca.Q4_0.gguf))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Ollama #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with #+begin_src emacs-lisp (gptel-make-ollama &quot;Ollama&quot; ;Any name of your choosing :host &quot;localhost:11434&quot; ;Where it&#39;s running :stream t ;Stream responses :models &#39;(mistral:latest)) ;List of models #+end_src&lt;/p&gt; 
 &lt;p&gt;These are the required parameters, refer to the documentation of =gptel-make-ollama= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistral:latest gptel-backend (gptel-make-ollama &quot;Ollama&quot; :host &quot;localhost:11434&quot; :stream t :models &#39;(mistral:latest))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Open WebUI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;[[https://openwebui.com/][Open WebUI]] is an open source, self-hosted system which provides a multi-user web chat interface and an API endpoint for accessing LLMs, especially LLMs running locally on inference servers like Ollama.&lt;/p&gt; 
 &lt;p&gt;Because it presents an OpenAI-compatible endpoint, you use &lt;del&gt;gptel-make-openai&lt;/del&gt; to register it as a backend.&lt;/p&gt; 
 &lt;p&gt;For instance, you can use this form to register a backend for a local instance of Open Web UI served via http on port 3000:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;OpenWebUI&quot; :host &quot;localhost:3000&quot; :protocol &quot;http&quot; :key &quot;KEY_FOR_ACCESSING_OPENWEBUI&quot; :endpoint &quot;/api/chat/completions&quot; :stream t :models &#39;(&quot;gemma3n:latest&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;Or if you are running Open Web UI on another host on your local network (&lt;del&gt;box.local&lt;/del&gt;), serving via https with self-signed certificates, this will work:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;OpenWebUI&quot; :host &quot;box.local&quot; :curl-args &#39;(&quot;--insecure&quot;) ; needed for self-signed certs :key &quot;KEY_FOR_ACCESSING_OPENWEBUI&quot; :endpoint &quot;/api/chat/completions&quot; :stream t :models &#39;(&quot;gemma3n:latest&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;To find your API key in Open WebUI, click the user name in the bottom left, Settings, Account, and then Show by API Keys section.&lt;/p&gt; 
 &lt;p&gt;Refer to the documentation of =gptel-make-openai= for more configuration options.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &quot;gemma3n:latest&quot; gptel-backend (gptel-make-openai &quot;OpenWebUI&quot; :host &quot;localhost:3000&quot; :protocol &quot;http&quot; :key &quot;KEY_FOR_ACCESSING_OPENWEBUI&quot; :endpoint &quot;/api/chat/completions&quot; :stream t :models &#39;(&quot;gemma3n:latest&quot;))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Gemini #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; :key can be a function that returns the API key. (gptel-make-gemini &quot;Gemini&quot; :key &quot;YOUR_GEMINI_API_KEY&quot; :stream t) #+end_src&lt;/p&gt; 
 &lt;p&gt;These are the required parameters, refer to the documentation of =gptel-make-gemini= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gemini-2.5-pro-exp-03-25 gptel-backend (gptel-make-gemini &quot;Gemini&quot; :key &quot;YOUR_GEMINI_API_KEY&quot; :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
  #+html: 
 &lt;summary&gt; **** Llama.cpp or Llamafile #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;(If using a llamafile, run a [[https://github.com/Mozilla-Ocho/llamafile#other-example-llamafiles][server llamafile]] instead of a &quot;command-line llamafile&quot;, and a model that supports text generation.)&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Llama.cpp offers an OpenAI compatible API (gptel-make-openai &quot;llama-cpp&quot; ;Any name :stream t ;Stream responses :protocol &quot;http&quot; :host &quot;localhost:8000&quot; ;Llama.cpp server location :models &#39;(test)) ;Any names, doesn&#39;t matter for Llama #+end_src&lt;/p&gt; 
 &lt;p&gt;These are the required parameters, refer to the documentation of =gptel-make-openai= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;test gptel-backend (gptel-make-openai &quot;llama-cpp&quot; :stream t :protocol &quot;http&quot; :host &quot;localhost:8000&quot; :models &#39;(test))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Kagi (FastGPT &amp;amp; Summarizer) #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Kagi&#39;s FastGPT model and the Universal Summarizer are both supported. A couple of notes:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Universal Summarizer: If there is a URL at point, the summarizer will summarize the contents of the URL. Otherwise the context sent to the model is the same as always: the buffer text upto point, or the contents of the region if the region is active.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Kagi models do not support multi-turn conversations, interactions are &quot;one-shot&quot;. They also do not support streaming responses.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-kagi &quot;Kagi&quot; ;any name :key &quot;YOUR_KAGI_API_KEY&quot;) ;can be a function that returns the key #+end_src&lt;/p&gt; 
 &lt;p&gt;These are the required parameters, refer to the documentation of =gptel-make-kagi= for more.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend and the model (fastgpt/summarizer) from the transient menu when using gptel.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;fastgpt gptel-backend (gptel-make-kagi &quot;Kagi&quot; :key &quot;YOUR_KAGI_API_KEY&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;The alternatives to =fastgpt= include =summarize:cecil=, =summarize:agnes=, =summarize:daphne= and =summarize:muriel=. The difference between the summarizer engines is [[https://help.kagi.com/kagi/api/summarizer.html#summarization-engines][documented here]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** together.ai #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Together.ai offers an OpenAI compatible API (gptel-make-openai &quot;TogetherAI&quot; ;Any name you want :host &quot;api.together.xyz&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t :models &#39;(;; has many more, check together.ai mistralai/Mixtral-8x7B-Instruct-v0.1 codellama/CodeLlama-13b-Instruct-hf codellama/CodeLlama-34b-Instruct-hf)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistralai/Mixtral-8x7B-Instruct-v0.1 gptel-backend (gptel-make-openai &quot;TogetherAI&quot;&lt;br /&gt; :host &quot;api.together.xyz&quot; :key &quot;your-api-key&quot;&lt;br /&gt; :stream t :models &#39;(;; has many more, check together.ai mistralai/Mixtral-8x7B-Instruct-v0.1 codellama/CodeLlama-13b-Instruct-hf codellama/CodeLlama-34b-Instruct-hf))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Anyscale #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Anyscale offers an OpenAI compatible API (gptel-make-openai &quot;Anyscale&quot; ;Any name you want :host &quot;api.endpoints.anyscale.com&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(;; has many more, check anyscale mistralai/Mixtral-8x7B-Instruct-v0.1)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistralai/Mixtral-8x7B-Instruct-v0.1 gptel-backend (gptel-make-openai &quot;Anyscale&quot; :host &quot;api.endpoints.anyscale.com&quot; :key &quot;your-api-key&quot; :models &#39;(;; has many more, check anyscale mistralai/Mixtral-8x7B-Instruct-v0.1))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Perplexity #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-perplexity &quot;Perplexity&quot; ;Any name you want :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t) ;If you want responses to be streamed #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;sonar gptel-backend (gptel-make-perplexity &quot;Perplexity&quot; :key &quot;your-api-key&quot; :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Anthropic (Claude) #+html: &lt;/summary&gt; Register a backend with
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude&quot; ;Any name you want :stream t ;Streaming responses :key &quot;your-api-key&quot;) #+end_src The =:key= can be a function that returns the key (more secure).&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;claude-3-sonnet-20240229 ; &quot;claude-3-opus-20240229&quot; also available gptel-backend (gptel-make-anthropic &quot;Claude&quot; :stream t :key &quot;your-api-key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Interim support for Claude 3.7 Sonnet&lt;/p&gt; 
 &lt;p&gt;To use Claude 3.7 Sonnet model in its &quot;thinking&quot; mode, you can define a second Claude backend and select it via the UI or elisp:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-anthropic &quot;Claude-thinking&quot; ;Any name you want :key &quot;your-API-key&quot; :stream t :models &#39;(claude-sonnet-4-20250514 claude-3-7-sonnet-20250219) :request-params &#39;(:thinking (:type &quot;enabled&quot; :budget_tokens 2048) :max_tokens 4096)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can set the reasoning budget tokens and max tokens for this usage via the =:budget_tokens= and =:max_tokens= keys here, respectively.&lt;/p&gt; 
 &lt;p&gt;You can control whether/how the reasoning output is shown via gptel&#39;s menu or =gptel-include-reasoning=, see [[#handle-reasoning-content][handling reasoning content]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Groq #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Groq offers an OpenAI compatible API (gptel-make-openai &quot;Groq&quot; ;Any name you want :host &quot;api.groq.com&quot; :endpoint &quot;/openai/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(llama-3.1-70b-versatile llama-3.1-8b-instant llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 gemma-7b-it)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]). Note that Groq is fast enough that you could easily set =:stream nil= and still get near-instant responses.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mixtral-8x7b-32768 gptel-backend (gptel-make-openai &quot;Groq&quot; :host &quot;api.groq.com&quot; :endpoint &quot;/openai/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; :models &#39;(llama-3.1-70b-versatile llama-3.1-8b-instant llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 gemma-7b-it))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Mistral Le Chat #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Mistral offers an OpenAI compatible API (gptel-make-openai &quot;MistralLeChat&quot; ;Any name you want :host &quot;api.mistral.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :protocol &quot;https&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(&quot;mistral-small&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mistral-small gptel-backend (gptel-make-openai &quot;MistralLeChat&quot; ;Any name you want :host &quot;api.mistral.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :protocol &quot;https&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(&quot;mistral-small&quot;))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;**** OpenRouter #+html: &lt;/p&gt;&lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OpenRouter offers an OpenAI compatible API (gptel-make-openai &quot;OpenRouter&quot; ;Any name you want :host &quot;openrouter.ai&quot; :endpoint &quot;/api/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(openai/gpt-3.5-turbo mistralai/mixtral-8x7b-instruct meta-llama/codellama-34b-instruct codellama/codellama-70b-instruct google/palm-2-codechat-bison-32k google/gemini-pro))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;mixtral-8x7b-32768 gptel-backend (gptel-make-openai &quot;OpenRouter&quot; ;Any name you want :host &quot;openrouter.ai&quot; :endpoint &quot;/api/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(openai/gpt-3.5-turbo mistralai/mixtral-8x7b-instruct meta-llama/codellama-34b-instruct codellama/codellama-70b-instruct google/palm-2-codechat-bison-32k google/gemini-pro)))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** PrivateGPT #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-privategpt &quot;privateGPT&quot; ;Any name you want :protocol &quot;http&quot; :host &quot;localhost:8001&quot; :stream t :context t ;Use context provided by embeddings :sources t ;Return information about source documents :models &#39;(private-gpt))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;private-gpt gptel-backend (gptel-make-privategpt &quot;privateGPT&quot; ;Any name you want :protocol &quot;http&quot; :host &quot;localhost:8001&quot; :stream t :context t ;Use context provided by embeddings :sources t ;Return information about source documents :models &#39;(private-gpt)))&lt;/p&gt; 
 &lt;p&gt;#+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** DeepSeek #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-deepseek &quot;DeepSeek&quot; ;Any name you want :stream t ;for streaming responses :key &quot;your-api-key&quot;) ;can be a function that returns the key #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;deepseek-reasoner gptel-backend (gptel-make-deepseek &quot;DeepSeek&quot; :stream t :key &quot;your-api-key&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;**** Sambanova (Deepseek) #+html: &lt;/p&gt;&lt;/summary&gt; Sambanova offers various LLMs through their Samba Nova Cloud offering, with Deepseek-R1 being one of them. The token speed for Deepseek R1 via Sambanova is about 6 times faster than when accessed through deepseek.com
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;Sambanova&quot; ;Any name you want :host &quot;api.sambanova.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t ;for streaming responses :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(DeepSeek-R1)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend The code aboves makes the backend available for selection. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Add these two lines to your configuration:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;DeepSeek-R1) (setq gptel-backend (gptel-get-backend &quot;Sambanova&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;**** Cerebras #+html: &lt;/p&gt;&lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Cerebras offers an instant OpenAI compatible API (gptel-make-openai &quot;Cerebras&quot; :host &quot;api.cerebras.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t ;optionally nil as Cerebras is instant AI :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(llama3.1-70b llama3.1-8b)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;llama3.1-8b gptel-backend (gptel-make-openai &quot;Cerebras&quot; :host &quot;api.cerebras.ai&quot; :endpoint &quot;/v1/chat/completions&quot; :stream nil :key &quot;your-api-key&quot; :models &#39;(llama3.1-70b llama3.1-8b))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Github Models #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;NOTE: [[https://docs.github.com/en/github-models/about-github-models][GitHub Models]] is /not/ GitHub Copilot! If you want to use GitHub Copilot chat via gptel, look at the instructions for GitHub CopilotChat below instead.&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Github Models offers an OpenAI compatible API (gptel-make-openai &quot;Github Models&quot; ;Any name you want :host &quot;models.inference.ai.azure.com&quot; :endpoint &quot;/chat/completions?api-version=2024-05-01-preview&quot; :stream t :key &quot;your-github-token&quot; :models &#39;(gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You will need to create a github [[https://github.com/settings/personal-access-tokens][token]].&lt;/p&gt; 
 &lt;p&gt;For all the available models, check the [[https://github.com/marketplace/models][marketplace]].&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-4o gptel-backend (gptel-make-openai &quot;Github Models&quot; ;Any name you want :host &quot;models.inference.ai.azure.com&quot; :endpoint &quot;/chat/completions?api-version=2024-05-01-preview&quot; :stream t :key &quot;your-github-token&quot; :models &#39;(gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Novita AI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Novita AI offers an OpenAI compatible API (gptel-make-openai &quot;NovitaAI&quot; ;Any name you want :host &quot;api.novita.ai&quot; :endpoint &quot;/v3/openai&quot; :key &quot;your-api-key&quot; ;can be a function that returns the key :stream t :models &#39;(;; has many more, check &lt;a href=&quot;https://novita.ai/llm-api&quot;&gt;https://novita.ai/llm-api&lt;/a&gt; gryphe/mythomax-l2-13b meta-llama/llama-3-70b-instruct meta-llama/llama-3.1-70b-instruct)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gryphe/mythomax-l2-13b gptel-backend (gptel-make-openai &quot;NovitaAI&quot;&lt;br /&gt; :host &quot;api.novita.ai&quot; :endpoint &quot;/v3/openai&quot; :key &quot;your-api-key&quot;&lt;br /&gt; :stream t :models &#39;(;; has many more, check &lt;a href=&quot;https://novita.ai/llm-api&quot;&gt;https://novita.ai/llm-api&lt;/a&gt; mistralai/Mixtral-8x7B-Instruct-v0.1 meta-llama/llama-3-70b-instruct meta-llama/llama-3.1-70b-instruct))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** xAI #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-xai &quot;xAI&quot; ; Any name you want :stream t :key &quot;your-api-key&quot;) ; can be a function that returns the key #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]])&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (setq gptel-model &#39;grok-3-latest gptel-backend (gptel-make-xai &quot;xAI&quot; ; Any name you want :key &quot;your-api-key&quot; ; can be a function that returns the key :stream t)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** AI/ML API #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;AI/ML API provides 300+ AI models including Deepseek, Gemini, ChatGPT. The models run at enterprise-grade rate limits and uptimes.&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; AI/ML API offers an OpenAI compatible API (gptel-make-openai &quot;AI/ML API&quot; ;Any name you want :host &quot;api.aimlapi.com&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; ;can be a function that returns the key :models &#39;(deepseek-chat gemini-pro gpt-4o)) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;gpt-4o gptel-backend (gptel-make-openai &quot;AI/ML API&quot; :host &quot;api.aimlapi.com&quot; :endpoint &quot;/v1/chat/completions&quot; :stream t :key &quot;your-api-key&quot; :models &#39;(deepseek-chat gemini-pro gpt-4o))) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** GitHub CopilotChat #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-gh-copilot &quot;Copilot&quot;) #+end_src&lt;/p&gt; 
 &lt;p&gt;You will be informed to login into =GitHub= as required. You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;claude-3.7-sonnet gptel-backend (gptel-make-gh-copilot &quot;Copilot&quot;)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** AWS Bedrock #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-bedrock &quot;AWS&quot; ;; optionally enable streaming :stream t :region &quot;ap-northeast-1&quot; ;; subset of gptel--bedrock-models :models &#39;(claude-sonnet-4-20250514) ;; Model region for cross-region inference profiles. Required for models such ;; as Claude without on-demand throughput support. One of &#39;apac, &#39;eu or &#39;us. ;; &lt;a href=&quot;https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html&quot;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html&lt;/a&gt; :model-region &#39;apac) #+end_src&lt;/p&gt; 
 &lt;p&gt;The Bedrock backend gets your AWS credentials from the environment variables. It expects to find either &lt;del&gt;AWS_ACCESS_KEY_ID&lt;/del&gt;, &lt;del&gt;AWS_SECRET_ACCESS_KEY&lt;/del&gt;, &lt;del&gt;AWS_SESSION_TOKEN&lt;/del&gt; (optional), or if present, can use &lt;del&gt;AWS_PROFILE&lt;/del&gt; to get these directly from the &lt;del&gt;aws&lt;/del&gt; cli.&lt;/p&gt; 
 &lt;p&gt;NOTE: The Bedrock backend needs curl &amp;gt;= 8.5 in order for the sigv4 signing to work properly, &lt;a href=&quot;https://github.com/curl/curl/issues/11794&quot;&gt;https://github.com/curl/curl/issues/11794&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;An error will be signalled if &lt;del&gt;gptel-curl&lt;/del&gt; is &lt;del&gt;NIL&lt;/del&gt;.&lt;/p&gt; 
 &lt;p&gt;You can pick this backend from the menu when using gptel (see [[#usage][Usage]]).&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Set as the default gptel backend&lt;/p&gt; 
 &lt;p&gt;The above code makes the backend available to select. If you want it to be the default backend for gptel, you can set this as the value of =gptel-backend=. Use this instead of the above.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; OPTIONAL configuration (setq gptel-model &#39;claude-sonnet-4-20250514 gptel-backend (gptel-make-bedrock &quot;AWS&quot; ;; optionally enable streaming :stream t :region &quot;ap-northeast-1&quot; ;; subset of gptel--bedrock-models :models &#39;(claude-sonnet-4-20250514) ;; Model region for cross-region inference profiles. Required for models such ;; as Claude without on-demand throughput support. One of &#39;apac, &#39;eu or &#39;us. ;; &lt;a href=&quot;https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html&quot;&gt;https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html&lt;/a&gt; :model-region &#39;apac)) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Moonshot (Kimi) #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Register a backend with&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;Moonshot&quot; :host &quot;api.moonshot.cn&quot; ;; or &quot;api.moonshot.ai&quot; for the global site :key &quot;your-api-key&quot; :stream t ;; optionally enable streaming :models &#39;(kimi-latest kimi-k2-0711-preview)) #+end_src&lt;/p&gt; 
 &lt;p&gt;See [[https://platform.moonshot.ai/docs/pricing/chat][Moonshot.ai document]] for a complete list of models.&lt;/p&gt; 
 &lt;p&gt;***** (Optional) Use the builtin search tool&lt;/p&gt; 
 &lt;p&gt;Moonshot supports a builtin search tool that does not requires the user to provide the tool implementation. To use that, you first need to define the tool and add to =gptel-tools= (while it does not requires the client to provide the search implementation, it does expects the client to reply a tool call message with its given argument, to be consistent with other tool calls):&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (setq gptel-tools (list (gptel-make-tool :name &quot;$web_search&quot; :function (lambda (&amp;amp;optional search_result) (json-serialize `(:search_result ,search_result))) :description &quot;Moonshot builtin web search. Only usable by moonshot model (kimi), ignore this if you are not.&quot; :args &#39;((:name &quot;search_result&quot; :type object :optional t)) :category &quot;web&quot;))) #+end_src&lt;/p&gt; 
 &lt;p&gt;Then you also need to add the tool declaration via =:request-params= because it needs a special =builtin_function= type:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-openai &quot;Moonshot&quot; :host &quot;api.moonshot.cn&quot; ;; or &quot;api.moonshot.ai&quot; for the global site :key &quot;your-api-key&quot; :stream t ;; optionally enable streaming :models &#39;(kimi-latest kimi-k2-0711-preview) :request-params &#39;(:tools [(:type &quot;builtin_function&quot; :function (:name &quot;$web_search&quot;))])) #+end_src&lt;/p&gt; 
 &lt;p&gt;Now the chat should be able to automatically use search. Try &quot;what&#39;s new today&quot; and you should expect the up-to-date news in response.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; ** Usage
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;gptel provides a few powerful, general purpose and flexible commands. You can dynamically tweak their behavior to the needs of your task with /directives/, redirection options and more. There is a [[https://www.youtube.com/watch?v=bsRnh_brggM][video demo]] showing various uses of gptel -- but =gptel-send= might be all you need.&lt;/p&gt; 
&lt;p&gt;|-------------------+---------------------------------------------------------------------------------------------------| | &lt;em&gt;To send queries&lt;/em&gt; | Description | |-------------------+---------------------------------------------------------------------------------------------------| | =gptel-send= | Send all text up to =(point)=, or the selection if region is active. Works anywhere in Emacs. | | =gptel= | Create a new dedicated chat buffer. Not required to use gptel. | | =gptel-rewrite= | Rewrite, refactor or change the selected region. Can diff/ediff changes before merging/applying. | |-------------------+---------------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|---------------------+---------------------------------------------------------------| | &lt;em&gt;To tweak behavior&lt;/em&gt; | | |---------------------+---------------------------------------------------------------| | =C-u= =gptel-send= | Transient menu for preferences, input/output redirection etc. | | =gptel-menu= | /(Same)/ | |---------------------+---------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|------------------+--------------------------------------------------------------------------------------------------------| | &lt;em&gt;To add context&lt;/em&gt; | | |------------------+--------------------------------------------------------------------------------------------------------| | =gptel-add= | Add/remove a region or buffer to gptel&#39;s context. In Dired, add/remove marked files. | | =gptel-add-file= | Add a file (text or supported media type) to gptel&#39;s context. Also available from the transient menu. | |------------------+--------------------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|----------------------------+-----------------------------------------------------------------------------------------| | &lt;em&gt;Org mode bonuses&lt;/em&gt; | | |----------------------------+-----------------------------------------------------------------------------------------| | =gptel-org-set-topic= | Limit conversation context to an Org heading. (For branching conversations see below.) | | =gptel-org-set-properties= | Write gptel configuration as Org properties, for per-heading chat configuration. | |----------------------------+-----------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|------------------+-------------------------------------------------------------------------------------------| | &lt;em&gt;GitHub Copilot&lt;/em&gt; | | |------------------+-------------------------------------------------------------------------------------------| | =gptel-gh-login= | Authenticate with GitHub Copilot. (Automatically handled, but can be forced if required.) | |------------------+-------------------------------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;*** In any buffer:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Call =M-x gptel-send= to send the text up to the cursor. The response will be inserted below. Continue the conversation by typing below the response.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a region is selected, the conversation will be limited to its contents.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Call =M-x gptel-send= with a prefix argument (&lt;del&gt;C-u&lt;/del&gt;)&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;to set chat parameters (model, backend, system message etc) for this buffer,&lt;/li&gt; 
   &lt;li&gt;include quick instructions for the next request only,&lt;/li&gt; 
   &lt;li&gt;to add additional context -- regions, buffers or files -- to gptel,&lt;/li&gt; 
   &lt;li&gt;to read the prompt from or redirect the response elsewhere,&lt;/li&gt; 
   &lt;li&gt;or to replace the prompt with the response.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/3562a6e2-7a5c-4f7e-8e57-bf3c11589c73&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with some of the available query options.&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can also define a &quot;preset&quot; bundle of options that are applied together, see [[#option-presets][Option presets]] below.&lt;/p&gt; 
&lt;p&gt;*** In a dedicated chat buffer:&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: gptel works anywhere in Emacs. The dedicated chat buffer only adds some conveniences.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Run =M-x gptel= to start or switch to the chat buffer. It will ask you for the key if you skipped the previous step. Run it with a prefix-arg (=C-u M-x gptel=) to start a new session.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the gptel buffer, send your prompt with =M-x gptel-send=, bound to =C-c RET=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set chat parameters (LLM provider, model, directives etc) for the session by calling =gptel-send= with a prefix argument (=C-u C-c RET=):&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/eb4867e5-30ac-455f-999f-e17123afb810&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with some of the available query options.&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;That&#39;s it. You can go back and edit previous prompts and responses if you want.&lt;/p&gt; 
&lt;p&gt;The default mode is =markdown-mode= if available, else =text-mode=. You can set =gptel-default-mode= to =org-mode= if desired.&lt;/p&gt; 
&lt;p&gt;You can also define a &quot;preset&quot; bundle of options that are applied together, see [[#option-presets][Option presets]] below.&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Including media (images, documents or plain-text files) with requests #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel supports sending media in Markdown and Org chat buffers, but this feature is disabled by default.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can enable it globally, for all models that support it, by setting =gptel-track-media=.&lt;/li&gt; 
  &lt;li&gt;Or you can set it locally, just for the chat buffer, via the header line:&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/91f6aaab-2ea4-4806-9cc9-39b4b46a8e6c&quot; align=&quot;center&quot; alt=&quot;Image showing a gptel chat buffer&#39;s header line with the button to toggle media support&quot; /&gt;&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;There are two ways to include media or plain-text files with requests:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Adding media files to the context with =gptel-add-file=, described further below.&lt;/li&gt; 
  &lt;li&gt;Including links to media in chat buffers, described here:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;To include plain-text files, images or other supported document types with requests in chat buffers, you can include links to them in the chat buffer. Such a link must be &quot;standalone&quot;, i.e. on a line by itself surrounded by whitespace.&lt;/p&gt; 
 &lt;p&gt;In Org mode, for example, the following are all &lt;em&gt;valid&lt;/em&gt; ways of including an image with the request:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot; file links: #+begin_src In this yaml file, I have some key-remapping configuration:&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;[[file:/path/to/remap.yaml]]&lt;/p&gt; 
 &lt;p&gt;Could you explain what it does, and which program might be using it? #+end_src&lt;/p&gt; 
 &lt;p&gt;#+begin_src Describe this picture&lt;/p&gt; 
 &lt;p&gt;[[file:/path/to/screenshot.png]]&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot; file link with description: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;[[file:/path/to/screenshot.png][some picture]]&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&quot;Standalone&quot;, angle file link: #+begin_src Describe this picture&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;a href=&quot;file:/path/to/screenshot.png&quot;&gt;file:/path/to/screenshot.png&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;p&gt;The following links are &lt;em&gt;not valid&lt;/em&gt;, and the text of the link will be sent instead of the file contents:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Inline link: #+begin_src Describe this [[file:/path/to/screenshot.png][picture]].&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Focus specifically on the text content. #+end_src&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Link not &quot;standalone&quot;: #+begin_src Describe this picture: [[file:/path/to/screenshot.png]] Focus specifically on the text content. #+end_src&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Not a valid Org link: #+begin_src Describe the picture&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;file:/path/to/screenshot.png #+end_src&lt;/p&gt; 
 &lt;p&gt;Similar criteria apply to Markdown chat buffers.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Save and restore your chat sessions #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Saving the file will save the state of the conversation as well. To resume the chat, open the file and turn on =gptel-mode= before editing the buffer.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Setting options (backend, model, request parameters, system prompts and more)
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Most gptel options can be set from gptel&#39;s transient menu, available by calling =gptel-send= with a prefix-argument, or via =gptel-menu=. To change their default values in your configuration, see [[#additional-configuration][Additional Configuration]]. Chat buffer-specific options are also available via the header-line in chat buffers.&lt;/p&gt; 
&lt;h1&gt;TODO Remove this when writing the manual.&lt;/h1&gt; 
&lt;p&gt;Selecting a model and backend can be done interactively via the =-m= command of =gptel-menu=. Available registered models are prefixed by the name of their backend with a string like =ChatGPT:gpt-4o-mini=, where =ChatGPT= is the backend name you used to register it and =gpt-4o-mini= is the name of the model.&lt;/p&gt; 
&lt;p&gt;*** Include more context with requests :PROPERTIES: :CUSTOM_ID: include-context :END:&lt;/p&gt; 
&lt;p&gt;By default, gptel will query the LLM with the active region or the buffer contents up to the cursor. Often it can be helpful to provide the LLM with additional context from outside the current buffer. For example, when you&#39;re in a chat buffer but want to ask questions about a (possibly changing) code buffer and auxiliary project files.&lt;/p&gt; 
&lt;p&gt;You can include additional text regions, buffers or files with gptel&#39;s queries in two ways. The first is via links in chat buffers, as described above (see &quot;Including media with requests&quot;).&lt;/p&gt; 
&lt;p&gt;The second is globally via dedicated context commands: you can add a selected region, buffer or file to gptel&#39;s context from the menu, or call =gptel-add=. To add a file use =gptel-add= in Dired, or use the dedicated =gptel-add-file= command. Directories will have their files added recursively after prompting for confirmation.&lt;/p&gt; 
&lt;p&gt;This additional context is &quot;live&quot; and not a snapshot. Once added, the regions, buffers or files are scanned and included at the time of each query. When using multi-modal models, added files can be of any supported type -- typically images.&lt;/p&gt; 
&lt;p&gt;You can examine the active context from the menu: #+html: &amp;lt;img src=&quot;&lt;a href=&quot;https://github.com/karthink/gptel/assets/8607532/63cd7fc8-6b3e-42ae-b6ca-06ff935bae9c&quot;&gt;https://github.com/karthink/gptel/assets/8607532/63cd7fc8-6b3e-42ae-b6ca-06ff935bae9c&lt;/a&gt;&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s menu with the &quot;inspect context&quot; command.&quot;&amp;gt;&lt;/p&gt; 
&lt;p&gt;And then browse through or remove context from the context buffer: #+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/79a5ffe8-3d63-4bf7-9bf6-0457ab61bf2a&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s context buffer.&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;By default, files in a version control system that are not project files (&quot;gitignored&quot; files) will not be added to the context. To be able to add these files, set =gptel-context-restrict-to-project-files= to =nil=. Note that remote files are always included, regardless of the value of =gptel-context-restrict-to-project-files=.&lt;/p&gt; 
&lt;p&gt;*** Handle &quot;reasoning&quot; content&lt;/p&gt; 
&lt;p&gt;Some LLMs include in their response a &quot;thinking&quot; or &quot;reasoning&quot; block. This text improves the quality of the LLM’s final output, but may not be interesting to you by itself. You can decide how you would like this &quot;reasoning&quot; content to be handled by gptel by setting the user option =gptel-include-reasoning=. You can include it in the LLM response (the default), omit it entirely, include it in the buffer but ignore it on subsequent conversation turns, or redirect it to another buffer. As with most options, you can specify this behvaior from gptel&#39;s transient menu globally, buffer-locally or for the next request only.&lt;/p&gt; 
&lt;p&gt;When included with the response, reasoning content will be delimited by Org blocks or markdown backticks.&lt;/p&gt; 
&lt;p&gt;*** Tool use&lt;/p&gt; 
&lt;p&gt;gptel can provide the LLM with client-side elisp &quot;tools&quot;, or function specifications, along with the request. If the LLM decides to run the tool, it supplies the tool call arguments, which gptel uses to run the tool in your Emacs session. The result is optionally returned to the LLM to complete the task.&lt;/p&gt; 
&lt;p&gt;This exchange can be used to equip the LLM with capabilities or knowledge beyond what is available out of the box -- for instance, you can get the LLM to control your Emacs frame, create or modify files and directories, or look up information relevant to your request via web search or in a local database. Here is a very simple example:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/d1f8e2ac-62bb-49bc-850d-0a67aa0cd4c3&quot;&gt;https://github.com/user-attachments/assets/d1f8e2ac-62bb-49bc-850d-0a67aa0cd4c3&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To use tools in gptel, you need&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a model that supports this usage. All the flagship models support tool use, as do many of the smaller open models.&lt;/li&gt; 
 &lt;li&gt;Tool specifications that gptel understands. gptel does not currently include any tools out of the box.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** Defining gptel tools #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Defining a gptel tool requires an elisp function and associated metadata. Here are two simple tool definitions:&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;To read the contents of an Emacs buffer&lt;/em&gt;:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-tool :name &quot;read_buffer&quot; ; javascript-style snake_case name :function (lambda (buffer) ; the function that will run (unless (buffer-live-p (get-buffer buffer)) (error &quot;error: buffer %s is not live.&quot; buffer)) (with-current-buffer buffer (buffer-substring-no-properties (point-min) (point-max)))) :description &quot;return the contents of an emacs buffer&quot; :args (list &#39;(:name &quot;buffer&quot; :type string ; :type value must be a symbol :description &quot;the name of the buffer whose contents are to be retrieved&quot;)) :category &quot;emacs&quot;) ; An arbitrary label for grouping #+end_src&lt;/p&gt; 
 &lt;p&gt;Besides the function itself, which can be named or anonymous (as above), the tool specification requires a =:name=, =:description= and a list of argument specifications in =:args=. Each argument specification is a plist with atleast the keys =:name=, =:type= and =:description=.&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;To create a text file&lt;/em&gt;:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (gptel-make-tool :name &quot;create_file&quot; ; javascript-style snake_case name :function (lambda (path filename content) ; the function that runs (let ((full-path (expand-file-name filename path))) (with-temp-buffer (insert content) (write-file full-path)) (format &quot;Created file %s in %s&quot; filename path))) :description &quot;Create a new file with the specified content&quot; :args (list &#39;(:name &quot;path&quot; ; a list of argument specifications :type string :description &quot;The directory where to create the file&quot;) &#39;(:name &quot;filename&quot; :type string :description &quot;The name of the file to create&quot;) &#39;(:name &quot;content&quot; :type string :description &quot;The content to write to the file&quot;)) :category &quot;filesystem&quot;) ; An arbitrary label for grouping #+end_src&lt;/p&gt; 
 &lt;p&gt;With some prompting, you can get an LLM to write these tools for you.&lt;/p&gt; 
 &lt;p&gt;Tools can also be asynchronous, use optional arguments and arguments with more structure (enums, arrays, objects etc). See =gptel-make-tool= for details.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Selecting tools #+html: &lt;/summary&gt; Once defined, tools can be selected (globally, buffer-locally or for the next request only) from gptel&#39;s transient menu:
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/fd878596-b313-4385-b675-3d6546909d8b&quot; align=&quot;center&quot; alt=&quot;Image showing gptel&#39;s tool selection menu.&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;From here you can also require confirmation for all tool calls, and decide if tool call results should be included in the LLM response. See [[#additional-configuration][Additional Configuration]] for doing these things via elisp.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Model Context Protocol (MCP) integration #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;The [[https://modelcontextprotocol.io/introduction][Model Context Protocol]] (MCP) is a protocol for providing resources and tools to LLMs, and [[https://github.com/appcypher/awesome-mcp-servers][many MCP servers exist]] that provide LLM tools for file access, database connections, API integrations etc. The [[mcp.el]] package for Emacs can act as an MCP client and manage these tool calls for gptel.&lt;/p&gt; 
 &lt;p&gt;To use MCP servers with gptel, you thus need three pieces:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;The [[https://github.com/lizqwerscott/mcp.el][mcp.el]] package for Emacs, [[https://melpa.org/#/mcp][available on MELPA]].&lt;/li&gt; 
  &lt;li&gt;MCP servers configured for and running via mcp.el.&lt;/li&gt; 
  &lt;li&gt;gptel and access to an LLM&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;gptel includes =gptel-integrations=, a small library to make this more convenient. This library is not automatically loaded by gptel, so if you would like to use it you have to require it:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (require &#39;gptel-integrations) #+end_src&lt;/p&gt; 
 &lt;p&gt;Once loaded, you can run the =gptel-mcp-connect= and =gptel-mcp-disconnect= commands to register and unregister MCP-provided tools in gptel. These will also show up in the tools menu in gptel, accessed via =M-x gptel-menu= or =M-x gptel-tools=:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/2cbbf8a0-49c7-49a5-ba24-514ad7e08799&quot; align=&quot;center&quot; alt=&quot;Image showing MCP tool registration commands in gptel&#39;s tool selection menu.&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;MCP-provided tools can be used as normal with gptel. Here is a screencast of the process. (In this example the &quot;github&quot; MCP server is installed separately using npm.)&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
 &lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/f3ea7ac0-a322-4a59-b5b2-b3f592554f8a&quot;&gt;https://github.com/user-attachments/assets/f3ea7ac0-a322-4a59-b5b2-b3f592554f8a&lt;/a&gt; #+html: &lt;/p&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Here&#39;s an example of using these tools:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
 &lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/b48a6a24-a130-4da7-a2ee-6ea568e10c85&quot;&gt;https://github.com/user-attachments/assets/b48a6a24-a130-4da7-a2ee-6ea568e10c85&lt;/a&gt; #+html: &lt;/p&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;*** Rewrite, refactor or fill in a region&lt;/p&gt; 
&lt;p&gt;In any buffer: with a region selected, you can modify text, rewrite prose or refactor code with =gptel-rewrite=. Example with prose:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/e3b436b3-9bde-4c1f-b2ce-3f7df1984933&quot;&gt;https://github.com/user-attachments/assets/e3b436b3-9bde-4c1f-b2ce-3f7df1984933&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;The result is previewed over the original text. By default, the buffer is not modified.&lt;/p&gt; 
&lt;p&gt;Pressing =RET= or clicking in the rewritten region should give you a list of options: you can &lt;em&gt;iterate&lt;/em&gt; on, &lt;em&gt;diff&lt;/em&gt;, &lt;em&gt;ediff&lt;/em&gt;, &lt;em&gt;merge&lt;/em&gt; or &lt;em&gt;accept&lt;/em&gt; the replacement. Example with code:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/user-attachments/assets/4067fdb8-85d3-4264-9b64-d727353f68f9&quot;&gt;https://github.com/user-attachments/assets/4067fdb8-85d3-4264-9b64-d727353f68f9&lt;/a&gt; #+html: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Acting on the LLM response&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;If you would like one of these things to happen automatically, you can customize =gptel-rewrite-default-action=.&lt;/p&gt; 
&lt;p&gt;These options are also available from =gptel-rewrite=:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/589785b9-aa3f-414a-98dd-d26b7509de08&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;And you can call them directly when the cursor is in the rewritten region:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/f5b3ca47-e146-45fe-8584-f11035fa4dbc&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;*** Extra Org mode conveniences&lt;/p&gt; 
&lt;p&gt;gptel offers a few extra conveniences in Org mode.&lt;/p&gt; 
&lt;p&gt;***** Limit conversation context to an Org heading&lt;/p&gt; 
&lt;p&gt;You can limit the conversation context to an Org heading with the command =gptel-org-set-topic=.&lt;/p&gt; 
&lt;p&gt;(This sets an Org property (=GPTEL_TOPIC=) under the heading. You can also add this property manually instead.)&lt;/p&gt; 
&lt;p&gt;***** Use branching context in Org mode (tree of conversations)&lt;/p&gt; 
&lt;p&gt;You can have branching conversations in Org mode, where each hierarchical outline path through the document is a separate conversation branch. This is also useful for limiting the context size of each query. See the variable =gptel-org-branching-context=.&lt;/p&gt; 
&lt;p&gt;If this variable is non-nil, you should probably edit =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist= so that the prefix strings for org-mode are not Org headings, e.g.&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (setf (alist-get &#39;org-mode gptel-prompt-prefix-alist) &quot;@user\n&quot;) (setf (alist-get &#39;org-mode gptel-response-prefix-alist) &quot;@assistant\n&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;Otherwise, the default prompt prefix will make successive prompts sibling headings, and therefore on different conversation branches, which probably isn&#39;t what you want.&lt;/p&gt; 
&lt;p&gt;Note: using this option requires Org 9.7 or higher to be available. The [[https://github.com/ultronozm/ai-org-chat.el][ai-org-chat]] package uses gptel to provide this branching conversation behavior for older versions of Org.&lt;/p&gt; 
&lt;p&gt;***** Save gptel parameters to Org headings (reproducible chats)&lt;/p&gt; 
&lt;p&gt;You can declare the gptel model, backend, temperature, system message and other parameters as Org properties with the command =gptel-org-set-properties=. gptel queries under the corresponding heading will always use these settings, allowing you to create mostly reproducible LLM chat notebooks, and to have simultaneous chats with different models, model settings and directives under different Org headings.&lt;/p&gt; 
&lt;p&gt;*** Introspection (examine, debug or modify requests)&lt;/p&gt; 
&lt;p&gt;Set =gptel-expert-commands= to =t= to display additional options in gptel&#39;s transient menu. #+html: &lt;img width=&quot;800&quot; height=&quot;403&quot; alt=&quot;Image&quot; src=&quot;https://github.com/user-attachments/assets/636ff77c-73d9-449b-9d49-bb792d8abd45&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Examining prompts&lt;/em&gt;: you can examine and edit gptel request payloads before sending them.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pick one of the &quot;dry run&quot; options in the menu to produce a buffer containing the request payload.&lt;/li&gt; 
 &lt;li&gt;You can edit this buffer as you would like and send the request.&lt;/li&gt; 
 &lt;li&gt;You can also copy a Curl command corresponding to the request and invoke it from the shell.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Examining responses&lt;/em&gt;: You can turn on logging to examine the full response from an LLM.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set =gptel-log-level= to =info= or =debug=.&lt;/li&gt; 
 &lt;li&gt;Send a request.&lt;/li&gt; 
 &lt;li&gt;Open the log buffer from gptel&#39;s transient menu, or switch to the =&lt;em&gt;gptel-log&lt;/em&gt;= buffer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** FAQ *** Chat buffer UI #+html: &lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt; **** I want the window to scroll automatically as the response is inserted #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;To be minimally annoying, gptel does not move the cursor by default. Add the following to your configuration to enable auto-scrolling.&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;gptel-post-stream-hook &#39;gptel-auto-scroll) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want the cursor to move to the next prompt after the response is inserted #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;To be minimally annoying, gptel does not move the cursor by default. Add the following to your configuration to move the cursor:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;gptel-post-response-functions &#39;gptel-end-of-response) #+end_src&lt;/p&gt; 
 &lt;p&gt;You can also call =gptel-end-of-response= as a command at any time.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to change the formatting of the prompt and LLM response #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;For dedicated chat buffers: customize =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist=. You can set a different pair for each major-mode.&lt;/p&gt; 
 &lt;p&gt;Anywhere in Emacs: Use =gptel-pre-response-hook= and =gptel-post-response-functions=, which see.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** How does gptel distinguish between user prompts and LLM responses? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel uses [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html][text-properties]] to watermark LLM responses. Thus this text is interpreted as a response even if you copy it into another buffer. In regular buffers (buffers without =gptel-mode= enabled), you can turn off this tracking by unsetting =gptel-track-response=.&lt;/p&gt; 
 &lt;p&gt;When restoring a chat state from a file on disk, gptel will apply these properties from saved metadata in the file when you turn on =gptel-mode=.&lt;/p&gt; 
 &lt;p&gt;gptel does /not/ use any prefix or semantic/syntax element in the buffer (such as headings) to separate prompts and responses. The reason for this is that gptel aims to integrate as seamlessly as possible into your regular Emacs usage: LLM interaction is not the objective, it&#39;s just another tool at your disposal. So requiring a bunch of &quot;user&quot; and &quot;assistant&quot; tags in the buffer is noisy and restrictive. If you want these demarcations, you can customize =gptel-prompt-prefix-alist= and =gptel-response-prefix-alist=. Note that these prefixes are for your readability only and purely cosmetic.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Transient menu behavior #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to set gptel options but only for this buffer :PROPERTIES: :ID: 748cbc00-0c92-4705-8839-619b2c80e566 :END: #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;In every menu used to set options, gptel provides a &quot;scope&quot; option, bound to the &lt;del&gt;=&lt;/del&gt; key:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/f9904134-2905-4b1d-ad37-b64c777af8ac&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/c0950035-bf65-43ae-b649-8e3b651ce3f1&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/fa3b1246-e00f-4c5e-88c7-46557b3507ef&quot; align=&quot;center&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;You can flip this switch before setting the option to =buffer= or =oneshot=. You only need to flip this switch once, it&#39;s a persistent setting. =buffer= sets the option buffer-locally, =oneshot= will set it for the next gptel request only. The default scope is global.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want the transient menu options to be saved so I only need to set them once #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Any model options you set are saved according to the scope (see previous question). But the redirection options in the menu are set for the next query only:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/2ecc6be9-aa52-4287-a739-ba06e1369ec2&quot; alt=&quot;https://github.com/karthink/gptel/assets/8607532/2ecc6be9-aa52-4287-a739-ba06e1369ec2&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;You can make them persistent across this Emacs session by pressing &lt;del&gt;C-x C-s&lt;/del&gt;:&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;img src=&quot;https://github.com/karthink/gptel/assets/8607532/b8bcb6ad-c974-41e1-9336-fdba0098a2fe&quot; alt=&quot;https://github.com/karthink/gptel/assets/8607532/b8bcb6ad-c974-41e1-9336-fdba0098a2fe&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;(You can also cycle through presets you&#39;ve saved with &lt;del&gt;C-x p&lt;/del&gt; and &lt;del&gt;C-x n&lt;/del&gt;.)&lt;/p&gt; 
 &lt;p&gt;Now these will be enabled whenever you send a query from the transient menu. If you want to use these saved options without invoking the transient menu, you can use a keyboard macro:&lt;/p&gt; 
 &lt;p&gt;#+begin_src emacs-lisp ;; Replace with your key to invoke the transient menu: (keymap-global-set &quot;
  &lt;f6&gt;
   &quot; &quot;C-u C-c 
   &lt;return&gt; 
    &lt;return&gt;
     &quot;) #+end_src
    &lt;/return&gt;
   &lt;/return&gt;
  &lt;/f6&gt;&lt;/p&gt; 
 &lt;p&gt;Or see this [[https://github.com/karthink/gptel/wiki/Commonly-requested-features#save-transient-flags][wiki entry]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Using the transient menu leaves behind extra windows #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;If using gptel&#39;s transient menus causes new/extra window splits to be created, check your value of =transient-display-buffer-action=. [[https://github.com/magit/transient/discussions/358][See this discussion]] for more context.&lt;/p&gt; 
 &lt;p&gt;If you are using Helm, see [[https://github.com/magit/transient/discussions/361][Transient#361]].&lt;/p&gt; 
 &lt;p&gt;In general, do not customize this Transient option unless you know what you&#39;re doing!&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Can I change the transient menu key bindings? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Yes, see =transient-suffix-put=. This changes the key to select a backend/model from &quot;-m&quot; to &quot;M&quot; in gptel&#39;s menu: #+begin_src emacs-lisp (transient-suffix-put &#39;gptel-menu (kbd &quot;-m&quot;) :key &quot;M&quot;) #+end_src&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** (Doom Emacs) Sending a query from the gptel menu fails because of a key conflict with Org mode #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Doom binds &lt;del&gt;RET&lt;/del&gt; in Org mode to =+org/dwim-at-point=, which appears to conflict with gptel&#39;s transient menu bindings for some reason.&lt;/p&gt; 
 &lt;p&gt;Two solutions:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Press &lt;del&gt;C-m&lt;/del&gt; instead of the return key.&lt;/li&gt; 
  &lt;li&gt;Change the send key from return to a key of your choice: #+begin_src emacs-lisp (transient-suffix-put &#39;gptel-menu (kbd &quot;RET&quot;) :key &quot;
   &lt;f8&gt;
    &quot;) #+end_src
   &lt;/f8&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; *** Miscellaneous #+html: 
&lt;details&gt;
 &lt;summary&gt; **** I want to use gptel in a way that&#39;s not supported by =gptel-send= or the options menu #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;gptel&#39;s default usage pattern is simple, and will stay this way: Read input in any buffer and insert the response below it. Some custom behavior is possible with the transient menu (=C-u M-x gptel-send=).&lt;/p&gt; 
 &lt;p&gt;For more programmable usage, gptel provides a general =gptel-request= function that accepts a custom prompt and a callback to act on the response. You can use this to build custom workflows not supported by =gptel-send=. See the documentation of =gptel-request=, and the [[https://github.com/karthink/gptel/wiki/Defining-custom-gptel-commands][wiki]] for examples.&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** (ChatGPT) I get the error &quot;(HTTP/2 429) You exceeded your current quota&quot; #+html:&lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;#+begin_quote (HTTP/2 429) You exceeded your current quota, please check your plan and billing details. #+end_quote&lt;/p&gt; 
 &lt;p&gt;Using the ChatGPT (or any OpenAI) API requires [[https://platform.openai.com/account/billing/overview][adding credit to your account]].&lt;/p&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt; #+html: 
&lt;details&gt;
 &lt;summary&gt; **** Why another LLM client? #+html: &lt;/summary&gt;
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Other Emacs clients for LLMs prescribe the format of the interaction (a comint shell, org-babel blocks, etc). I wanted:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Something that is as free-form as possible: query the model using any text in any buffer, and redirect the response as required. Using a dedicated =gptel= buffer just adds some visual flair to the interaction.&lt;/li&gt; 
  &lt;li&gt;Integration with org-mode, not using a walled-off org-babel block, but as regular text. This way the model can generate code blocks that I can run.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;#+html: &lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;** Additional Configuration :PROPERTIES: :ID: f885adac-58a3-4eba-a6b7-91e9e7a17829 :END: #+html: &lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp :exports none :results list (let ((all)) (mapatoms (lambda (sym) (when (and (string-match-p &quot;^gptel-[^-]&quot; (symbol-name sym)) (get sym &#39;variable-documentation)) (push sym all)))) all) #+end_src&lt;/p&gt; 
&lt;p&gt;|-------------------------+--------------------------------------------------------------------| | &lt;em&gt;Connection options&lt;/em&gt; | | |-------------------------+--------------------------------------------------------------------| | =gptel-use-curl= | Use Curl? (default), fallback to Emacs&#39; built-in =url=. | | | You can also specify the Curl path here. | | =gptel-proxy= | Proxy server for requests, passed to curl via =--proxy=. | | =gptel-curl-extra-args= | Extra arguments passed to Curl. | | =gptel-api-key= | Variable/function that returns the API key for the active backend. | |-------------------------+--------------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-----------------------+---------------------------------------------------------| | &lt;em&gt;LLM request options&lt;/em&gt; | /(Note: not supported uniformly across LLMs)/ | |-----------------------+---------------------------------------------------------| | =gptel-backend= | Default LLM Backend. | | =gptel-model= | Default model to use, depends on the backend. | | =gptel-stream= | Enable streaming responses, if the backend supports it. | | =gptel-directives= | Alist of system directives, can switch on the fly. | | =gptel-max-tokens= | Maximum token count (in query + response). | | =gptel-temperature= | Randomness in response text, 0 to 2. | | =gptel-cache= | Cache prompts, system message or tools (Anthropic only) | | =gptel-use-context= | How/whether to include additional context | | =gptel-use-tools= | Disable, allow or force LLM tool-use | | =gptel-tools= | List of tools to include with requests | |-----------------------+---------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-------------------------------+----------------------------------------------------------------| | &lt;em&gt;Chat UI options&lt;/em&gt; | | |-------------------------------+----------------------------------------------------------------| | =gptel-default-mode= | Major mode for dedicated chat buffers. | | =gptel-prompt-prefix-alist= | Text inserted before queries. | | =gptel-response-prefix-alist= | Text inserted before responses. | | =gptel-track-response= | Distinguish between user messages and LLM responses? | | =gptel-track-media= | Send text, images or other media from links? | | =gptel-confirm-tool-calls= | Confirm all tool calls? | | =gptel-include-tool-results= | Include tool results in the LLM response? | | =gptel-use-header-line= | Display status messages in header-line (default) or minibuffer | | =gptel-display-buffer-action= | Placement of the gptel chat buffer. | |-------------------------------+----------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|-------------------------------+-------------------------------------------------------| | &lt;em&gt;Org mode UI options&lt;/em&gt; | | |-------------------------------+-------------------------------------------------------| | =gptel-org-branching-context= | Make each outline path a separate conversation branch | | =gptel-org-ignore-elements= | Ignore parts of the buffer when sending a query | |-------------------------------+-------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;|------------------------------------+-------------------------------------------------------------| | &lt;em&gt;Hooks for customization&lt;/em&gt; | | |------------------------------------+-------------------------------------------------------------| | =gptel-save-state-hook= | Runs before saving the chat state to a file on disk | | =gptel-prompt-transform-functions= | Runs in a temp buffer to transform text before sending | | =gptel-post-request-hook= | Runs immediately after dispatching a =gptel-request=. | | =gptel-pre-response-hook= | Runs before inserting the LLM response into the buffer | | =gptel-post-response-functions= | Runs after inserting the full LLM response into the buffer | | =gptel-post-stream-hook= | Runs after each streaming insertion | | =gptel-context-wrap-function= | To include additional context formatted your way | | =gptel-rewrite-default-action= | Automatically diff, ediff, merge or replace refactored text | | =gptel-post-rewrite-functions= | Runs after a =gptel-rewrite= request succeeds | |------------------------------------+-------------------------------------------------------------|&lt;/p&gt; 
&lt;p&gt;#+html: &lt;/p&gt; 
&lt;p&gt;*** Option presets&lt;/p&gt; 
&lt;p&gt;If you use several LLMs for different tasks with accompanying system prompts (instructions) and tool configurations, manually adjusting =gptel= settings each time can become tedious. Presets are a bundle of gptel settings -- such as the model, backend, system message, and enabled tools -- that you can switch to at once.&lt;/p&gt; 
&lt;p&gt;Once defined, presets can be applied from gptel&#39;s transient menu:&lt;/p&gt; 
&lt;p&gt;#+html: &lt;img src=&quot;https://github.com/user-attachments/assets/e0cf6a32-d999-4138-8369-23512f5e9311&quot; align=&quot;center&quot; /&gt; #+html: &lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;To define a preset, use the =gptel-make-preset= function, which takes a name and keyword-value pairs of settings.&lt;/p&gt; 
&lt;p&gt;Presets can be used to set individual options. Here is an example of a preset to set the system message (and do nothing else): #+begin_src emacs-lisp (gptel-make-preset &#39;explain :system &quot;Explain what this code does to a novice programmer.&quot;) #+end_src&lt;/p&gt; 
&lt;p&gt;More generally, you can specify a bundle of options: #+begin_src emacs-lisp (gptel-make-preset &#39;gpt4coding ;preset name, a symbol :description &quot;A preset optimized for coding tasks&quot; ;for your reference :backend &quot;Claude&quot; ;gptel backend or backend name :model &#39;claude-3-7-sonnet-20250219.1 :system &quot;You are an expert coding assistant. Your role is to provide high-quality code solutions, refactorings, and explanations.&quot; :tools &#39;(&quot;read_buffer&quot; &quot;modify_buffer&quot;)) ;gptel tools or tool names #+end_src&lt;/p&gt; 
&lt;p&gt;Besides a couple of special keys (=:description=, =:parents= to inherit other presets), there is no predefined list of keys. Instead, the key =:foo= corresponds to setting =gptel-foo= (preferred) or =gptel--foo=. So the preset can include the value of any gptel option. For example, the following preset sets =gptel-temperature= and =gptel-use-context=:&lt;/p&gt; 
&lt;p&gt;#+begin_src emacs-lisp (gptel-make-preset &#39;proofreader :description &quot;Preset for proofreading tasks&quot; :backend &quot;ChatGPT&quot; :model &#39;gpt-4.1-mini :tools &#39;(&quot;read_buffer&quot; &quot;spell_check&quot; &quot;grammar_check&quot;) :temperature 0.7 ;sets gptel-temperature :use-context &#39;system) ;sets gptel-use-context #+end_src&lt;/p&gt; 
&lt;p&gt;Switching to a preset applies the specified settings without affecting other settings. Depending on the scope option (&lt;del&gt;=&lt;/del&gt; in gptel&#39;s transient menu), presets can be applied globally, buffer-locally or for the next request only.&lt;/p&gt; 
&lt;p&gt;**** Applying presets to requests automatically&lt;/p&gt; 
&lt;p&gt;You can apply a preset to a /single/ query by including =@preset-name= in the prompt, where =preset-name= is the name of the preset. (The =oneshot= scope option in gptel&#39;s transient menus is another way to do this, [[id:748cbc00-0c92-4705-8839-619b2c80e566][see the FAQ.]])&lt;/p&gt; 
&lt;p&gt;For example, if you have a preset named =websearch= defined which includes tools for web access and search: #+begin_src emacs-lisp (gptel-make-preset &#39;websearch :description &quot;Haiku with basic web search capability.&quot; :backend &quot;Claude&quot; :model &#39;claude-3-5-haiku-20241022 :tools &#39;(&quot;search_web&quot; &quot;read_url&quot; &quot;get_youtube_meta&quot;)) #+end_src&lt;/p&gt; 
&lt;p&gt;The following query is sent with this preset applied:&lt;/p&gt; 
&lt;p&gt;#+begin_quote @websearch Are there any 13&quot; e-ink monitors on the market? Create a table comparing them, sourcing specs and reviews from online sources. Also do the same for &quot;transreflective-LCD&quot; displays -- I&#39;m not sure what exactly they&#39;re called but they&#39;re comparable to e-ink. #+end_quote&lt;/p&gt; 
&lt;p&gt;This =@preset-name= cookie only applies to the final user turn of the coversation that is sent. So the presence of the cookie in past messages/turns is not significant.&lt;/p&gt; 
&lt;p&gt;The =@preset-name= cookie can be anywhere in the prompt. For example: #+begin_quote 
 &lt;long piece of text&gt;&lt;/long&gt;&lt;/p&gt; 
&lt;p&gt;What do you make of the above description, @proofreader? #+end_quote&lt;/p&gt; 
&lt;p&gt;In chat buffers this prefix will be offered as a completion and fontified, making it easy to use and spot.&lt;/p&gt; 
&lt;p&gt;** Alternatives&lt;/p&gt; 
&lt;p&gt;Other Emacs clients for LLMs include&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/ahyatt/llm][llm]]: llm provides a uniform API across language model providers for building LLM clients in Emacs, and is intended as a library for use by package authors. For similar scripting purposes, gptel provides the command =gptel-request=, which see.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/s-kostyaev/ellama][Ellama]]: A full-fledged LLM client built on llm, that supports many LLM providers (Ollama, Open AI, Vertex, GPT4All and more). Its usage differs from gptel in that it provides separate commands for dozens of common tasks, like general chat, summarizing code/text, refactoring code, improving grammar, translation and so on.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: comint-shell based interaction with ChatGPT. Also supports DALL-E, executable code blocks in the responses, and more.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/rksm/org-ai][org-ai]]: Interaction through special =#+begin_ai ... #+end_ai= Org-mode blocks. Also supports DALL-E, querying ChatGPT with the contents of project files, and more.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/milanglacier/minuet-ai.el][Minuet]]: Code-completion using LLM. Supports fill-in-the-middle (FIM) completion for compatible models such as DeepSeek and Codestral.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are several more: [[https://github.com/iwahbe/chat.el][chat.el]], [[https://github.com/stuhlmueller/gpt.el][gpt.el]], [[https://github.com/AnselmC/le-gpt.el][le-gpt]], [[https://github.com/stevemolitor/robby][robby]].&lt;/p&gt; 
&lt;p&gt;*** Packages using gptel&lt;/p&gt; 
&lt;p&gt;gptel is a general-purpose package for chat and ad-hoc LLM interaction. The following packages use gptel to provide additional or specialized functionality:&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Lookup helpers&lt;/em&gt;: Calling gptel quickly for one-off interactions&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/karthink/gptel-quick][gptel-quick]]: Quickly look up the region or text at point.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Task-driven workflows&lt;/em&gt;: Different interfaces to specify tasks for LLMs.&lt;/p&gt; 
&lt;p&gt;These differ from full &quot;agentic&quot; use in that the interactions are &quot;one-shot&quot;, not chained.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/dolmens/gptel-aibo/][gptel-aibo]]: A writing assistant system built on top of gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/daedsidog/evedel][Evedel]]: Instructed LLM Programmer/Assistant.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/lanceberge/elysium][Elysium]]: Request AI-generated changes as you code.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/ISouthRain/gptel-watch][gptel-watch]]: Automatically call gptel when typing lines that indicate intent.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Agentic use&lt;/em&gt;: Use LLMs as agents, with tool-use&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/kmontag/macher][Macher]]: Project-aware multi-file LLM editing for Emacs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Text completion&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/JDNdeveloper/gptel-autocomplete][gptel-autocomplete]]: Inline completions using gptel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Integration with major-modes&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/jwiegley/ob-gptel][ob-gptel]]: Org-babel backend for running gptel queries.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/kamushadenes/ai-blog.el][ai-blog.el]]: Streamline generation of blog posts in Hugo.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/lakkiy/gptel-commit][gptel-commit]]: Generate commit messages using gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/douo/magit-gptcommit][magit-gptcommit]]: Generate commit messages within magit-status Buffer using gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/ragnard/gptel-magit/][gptel-magit]]: Generate commit messages for magit using gptel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Chat interface addons&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/rob137/Corsair][Corsair]]: Helps gather text to populate LLM prompts for gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/ultronozm/ai-org-chat.el][ai-org-chat]]: Provides branching conversations in Org buffers using gptel. (Note that gptel includes this feature as well (see =gptel-org-branching-context=), but requires a recent version of Org mode 9.7 or later to be installed.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Integration with other packages&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/armindarvish/consult-omni][consult-omni]]: Versatile multi-source search package. It includes gptel as one of its many sources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;gptel configuration management&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/jwiegley/gptel-prompts][gptel-prompts]]: System prompt manager for gptel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** COMMENT Older Breaking Changes&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;=gptel-post-response-hook= has been renamed to =gptel-post-response-functions=, and functions in this hook are now called with two arguments: the start and end buffer positions of the response. This should make it easy to act on the response text without having to locate it first.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Possible breakage, see #120: If streaming responses stop working for you after upgrading to v0.5, try reinstalling gptel and deleting its native comp eln cache in =native-comp-eln-load-path=.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The user option =gptel-host= is deprecated. If the defaults don&#39;t work for you, use =gptel-make-openai= (which see) to customize server settings.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;=gptel-api-key-from-auth-source= now searches for the API key using the host address for the active LLM backend, /i.e./ &quot;api.openai.com&quot; when using ChatGPT. You may need to update your =~/.authinfo=.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;** Acknowledgments&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[[https://github.com/felipeochoa][Felipe Ochoa]] and [[https://github.com/akssri][akssri]] for adding AWS Bedrock support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jwiegley][John Wiegley]] for the design of gptel&#39;s presets and gptel-request&#39;s async pipeline, but also for loads of general feedback and advice.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/pabl0][Henrik Ahlgren]] for a keen eye to detail and polish applied to gptel&#39;s UI.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/psionic-k][psionic-k]] for extensive testing of the tool use feature and the design of gptel&#39;s in-buffer tool use records.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/jdtsmith][JD Smith]] for feedback and code assistance with gptel-menu&#39;s redesign&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/meain][Abin Simon]] for extensive feedback on improving gptel&#39;s directives and UI.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/algal][Alexis Gallagher]] and [[https://github.com/d1egoaz][Diego Alvarez]] for fixing a nasty multi-byte bug with =url-retrieve=.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/tarsius][Jonas Bernoulli]] for the Transient library.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/daedsidog][daedsidog]] for adding context support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/Aquan1412][Aquan1412]] for adding PrivateGPT support to gptel.&lt;/li&gt; 
 &lt;li&gt;[[https://github.com/r0man][r0man]] for improving gptel&#39;s Curl integration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Local Variables:&lt;/h1&gt; 
&lt;h1&gt;toc-org-max-depth: 4&lt;/h1&gt; 
&lt;h1&gt;eval: (and (fboundp &#39;toc-org-mode) (toc-org-mode 1))&lt;/h1&gt; 
&lt;h1&gt;End:&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>qjcg/awesome-typst</title>
      <link>https://github.com/qjcg/awesome-typst</link>
      <description>&lt;p&gt;Awesome Typst Links&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/README.md&quot; hreflang=&quot;en&quot; lang=&quot;en&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/README_ZH.md&quot; hreflang=&quot;zh&quot; lang=&quot;zh&quot;&gt;简体中文&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Awesome Typst&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus/awesome#readme&quot;&gt;&lt;img src=&quot;https://awesome.re/badge.svg?sanitize=true&quot; alt=&quot;Awesome&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Curated collection of useful links for &lt;a href=&quot;https://github.com/typst/typst&quot;&gt;Typst&lt;/a&gt; users.&lt;/p&gt; 
&lt;p&gt;PRs welcomed!&lt;/p&gt; 
&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#official-project-links&quot;&gt;Official Project Links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#unofficial-project-links&quot;&gt;Unofficial Project Links&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#integrations--tools&quot;&gt;Integrations &amp;amp; Tools&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#browser-extensions&quot;&gt;Browser Extensions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#chatbots&quot;&gt;Chatbots&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cicd&quot;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cli-tools&quot;&gt;CLI Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#editors&quot;&gt;Editors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#editor-integrations&quot;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#online-tools&quot;&gt;Online Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#programming&quot;&gt;Programming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#typst-as-a-service&quot;&gt;Typst As A Service&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#templates--libraries&quot;&gt;Templates &amp;amp; Libraries&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#official&quot;&gt;Official&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#general&quot;&gt;General&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#assignments&quot;&gt;Assignments&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#cv&quot;&gt;CV&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#templates&quot;&gt;Templates&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#calendar--timetable&quot;&gt;Calendar / Timetable&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#footnotes--endnotes&quot;&gt;Footnotes &amp;amp; Endnotes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#graphics&quot;&gt;Graphics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#letters&quot;&gt;Letters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#linguistics&quot;&gt;Linguistics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#mathematics&quot;&gt;Mathematics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#music&quot;&gt;Music&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#physics&quot;&gt;Physics&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#conferences&quot;&gt;Conferences&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#journals&quot;&gt;Journals&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#grantsproposals&quot;&gt;Grants/Proposals&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#engineering&quot;&gt;Engineering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#plotting&quot;&gt;Plotting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#posters&quot;&gt;Posters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#scripting&quot;&gt;Scripting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/qjcg/awesome-typst/main/#slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- markdown-toc end --&gt; 
&lt;h2&gt;Official Project Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app&quot;&gt;typst.app&lt;/a&gt; - The Typst web app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app/docs&quot;&gt;Typst Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst/typst&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://typst.app/blog/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Social - &lt;a href=&quot;https://discord.com/invite/2uDybryKPe&quot;&gt;Discord&lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/typstapp/&quot;&gt;Instagram&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/company/typst/&quot;&gt;LinkedIn&lt;/a&gt; &lt;a href=&quot;https://mastodon.social/@typst&quot;&gt;Mastodon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/typstapp/&quot;&gt;X&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Unofficial Project Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/typst_ru&quot;&gt;Typst-telegram-russian-chat&lt;/a&gt; - chat about Typst in Telegram in russian&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://matrix.to/#/%23typst:matrix.org&quot;&gt;#typst:matrix.org&lt;/a&gt; - matrix room for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sitandr.github.io/typst-examples-book/book/&quot;&gt;Typst Examples Book&lt;/a&gt; - An online book with Typst snippets, including extended tutorial and useful hacks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integrations &amp;amp; Tools&lt;/h2&gt; 
&lt;h3&gt;Browser Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(FireFox) &lt;a href=&quot;https://github.com/MordragT/bib_kit&quot;&gt;bib-kit&lt;/a&gt; - Retrieve website information to create citations in the hayagriva format&lt;/li&gt; 
 &lt;li&gt;(FireFox) &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/yank/&quot;&gt;yank&lt;/a&gt; - Yank URL and title of current tab, format to a chosen markup language, and copy to clipboard (supports typst link format)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Chatbots&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mattfbacon/typst-bot&quot;&gt;typst-bot&lt;/a&gt; - A discord bot to render Typst code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/ru_rend_bot&quot;&gt;typst-bot-telegram&lt;/a&gt; - A telegram bot to render Typst code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-telegram-bot&quot;&gt;typst-telegram-bot&lt;/a&gt; - A &lt;a href=&quot;https://t.me/TypstBot&quot;&gt;telegram bot&lt;/a&gt; with focus in rendering math expression in Typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CI/CD&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/IvanSanchez/gitlab-ci-typst&quot;&gt;gitlab-ci-typst&lt;/a&gt; - Build Typst documents using GitLab CI pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst-community/setup-typst&quot;&gt;setup-typst&lt;/a&gt; - 📑 Install Typst for use in GitHub Actions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/typst-action&quot;&gt;typst-action&lt;/a&gt; - Build Typst documents using GitHub actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CLI Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Enter-tainer/typstyle&quot;&gt;typstyle&lt;/a&gt; - Opinionated typst code formatter focusing on aesthetic, convergence and correctness.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ItsEthra/typst-live&quot;&gt;typst-live&lt;/a&gt; - Hot reloading of pdf in web browser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/typst-pandoc&quot;&gt;typst-pandoc&lt;/a&gt; - Typst custom reader and writer for Pandoc&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst-community/utpm&quot;&gt;utpm&lt;/a&gt; - &lt;em&gt;Package manager&lt;/em&gt; for &lt;strong&gt;&lt;a href=&quot;https://github.com/typst/packages#local-packages&quot;&gt;local&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/typst/packages&quot;&gt;remote&lt;/a&gt;&lt;/strong&gt; Typst packages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mkpoli/tyler&quot;&gt;Tyler&lt;/a&gt; - Package compiler for the ease of packaging and publishing Typst libraries and templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/textlint/textlint-plugin-typst&quot;&gt;textlint-plugin-typst&lt;/a&gt; - &lt;a href=&quot;https://textlint.github.io/&quot;&gt;textlint&lt;/a&gt; plugin to lint Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Editors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Cubxity/typstudio&quot;&gt;typstudio&lt;/a&gt; - An in development desktop editor built using Tauri.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IgKh/katvan&quot;&gt;Katvan&lt;/a&gt; - A bare-bones editor for Typst files, with a bias for Right-to-Left editing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bzero/typstwriter&quot;&gt;Typstwriter&lt;/a&gt; - An integrated desktop editor for typst projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/soupslurpr/BeauTyXT&quot;&gt;BeauTyXT&lt;/a&gt; - A private, secure, minimalistic Text, Markdown, and Typst editor for Android&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Academic-ID/sapienAI&quot;&gt;AcademicID&lt;/a&gt; - A self-hosted academic-focused AI chatbot and research workspace with a Typst, Markdown, and Text editor.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Editor Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/tree-sitter-typst&quot;&gt;SeniorMars/tree-sitter-typst&lt;/a&gt; - A TreeSitter parser for the Typst File Format&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=myriad-dreamin.tinymist&quot;&gt;Tinymist VS Code Extension&lt;/a&gt; - A vscode extension for Tinymist integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Myriad-Dreamin/tinymist&quot;&gt;Tinymist&lt;/a&gt; - A language server for typst with integrations for Emacs, Helix, NeoVim, Sublime Text, VsCode/VsCodium, and Zed&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/vscode-typst-sync&quot;&gt;Typst Sync&lt;/a&gt; - A vscode extension for Typst local packages management and synchronization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/frozolotl/tree-sitter-typst&quot;&gt;frozolotl/tree-sitter-typst&lt;/a&gt; - A tree-sitter grammar with a focus on correctness.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/herlev/inktyp&quot;&gt;inktyp&lt;/a&gt; - An Inkscape plugin to insert and edit Typst equations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/obsidian-typst&quot;&gt;obsidian-typst&lt;/a&gt; - Renders typst code blocks in Obsidian into images using Typst through the power of WASM!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/remimimimimi/org-typst-preview.el&quot;&gt;org-typst-preview&lt;/a&gt; - Typst preview in org-mode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arne314/typstar&quot;&gt;typstar&lt;/a&gt; - Neovim plugin providing autosnippets, excalidraw integration and [standalone] Anki flashcard export&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MrPicklePinosaur/typst-conceal.vim&quot;&gt;typst-conceal.vim&lt;/a&gt; - Vim/Nvim plugin for replacing long typst symbol names with unicode characters&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=surv.typst-math&quot;&gt;typst-math&lt;/a&gt; - A VS Code extension to simplify math writing in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/vscode-typst-sympy-calculator&quot;&gt;typst-sympy-calculator&lt;/a&gt; - VS Code extension for Typst math calculating, includes Arithmetic, Calculus, Matrix, Custom Variances and Functions by yourself&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~meow_king/typst-ts-mode&quot;&gt;typst-ts-mode&lt;/a&gt; - Typst tree sitter major mode for Emacs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/typst.nvim&quot;&gt;typst.nvim&lt;/a&gt; - WIP. Goals: Treesitter highlighting, snippets, and a smooth integration with neovim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kaarmu/typst.vim&quot;&gt;typst.vim&lt;/a&gt; - Vim plugin for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typstd&quot;&gt;typstd&lt;/a&gt; - Yet another Typst language server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/uben0/tree-sitter-typst&quot;&gt;uben0/tree-sitter-typst&lt;/a&gt; - A TreeSitter grammar for the Typst language, used by Helix&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Online Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/QuarticCat/detypify&quot;&gt;Detypify&lt;/a&gt; - Typst symbol classifier&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hongjr03/excel-to-typst&quot;&gt;excel-to-typst&lt;/a&gt; - A tool that convert Excel tables to Typst table, can work in uploading .xlsx file or pasting.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Programming&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lucifer1004/leetcode.typ&quot;&gt;leetcode.typ&lt;/a&gt; - Solving Leetcode problems in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/loqusion/typix&quot;&gt;Typix&lt;/a&gt; - Deterministic Typst compilation with Nix&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/messense/typst-py&quot;&gt;typst-py&lt;/a&gt; - Python binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/actsasflinn/typst-rb&quot;&gt;typst-rb&lt;/a&gt; - Ruby binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Myriad-Dreamin/typst.ts&quot;&gt;typst.ts&lt;/a&gt; - JavaScript binding to typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jakobjpeters/Typstry.jl&quot;&gt;Typstry.jl&lt;/a&gt; - The Julia to Typst interface&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/mpl-typst&quot;&gt;mpl-typst&lt;/a&gt; - A Typst backend for Matplotlib.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Typst As A Service&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/slashformotion/typst-http-api&quot;&gt;typst-http-api&lt;/a&gt; - An simple docker containing an API to compile typst markup&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-telegram-bot&quot;&gt;typst-telegram-bot&lt;/a&gt; - A plain and simple HTTP API for rendering math with Typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Templates &amp;amp; Libraries&lt;/h2&gt; 
&lt;h3&gt;Official&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typst/templates&quot;&gt;typst/templates&lt;/a&gt; - The templates that ship with the Typst web app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;General&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onefact/datathinking.org-report-template&quot;&gt;Data Thinking Report Template&lt;/a&gt; - a template for artificial intelligence whitepapers with collaborative bibliographies using Zotero&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mst2k/HSOS-PTP-Typst-Template&quot;&gt;HSOS-PTP-Typst-Template&lt;/a&gt; - A German template for writing papers, overfitted for the Osnabrück University of Applied Scien&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SkytAsul/INSA-Typst-Template&quot;&gt;INSA Typst Template&lt;/a&gt; - A template for INSA (Institut National des Sciences Appliquées), a french public engineering school.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LaPreprint/typst&quot;&gt;LaPreprint&lt;/a&gt; - Beautiful preprints for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-mantys&quot;&gt;Mantys&lt;/a&gt; - A template for writing manuals for Typst packages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aurghya-0/Project-Report-Typst&quot;&gt;Project-Report-Typst&lt;/a&gt; - A simple template for college or university level project report.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jinhao-huang/SimplePaper&quot;&gt;SimplePaper&lt;/a&gt; - A Chinese template for writing simple paper&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jxpeng98/Typst-Paper-Template&quot;&gt;Typst-Paper-Template&lt;/a&gt; - Typst template for Working Paper&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/waterlubber/aiaa-typst-template&quot;&gt;aiaa-typst-template&lt;/a&gt; - A template for AIAA (American Institute of Aeronautics and Astronautics) papers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hzkonor/bubble-template&quot;&gt;bubble-template&lt;/a&gt; - A simple and colorful template for reports&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/coco33920/typst-association-statuts&quot;&gt;french-association-status&lt;/a&gt; - A Template to write status for french associations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RolfBremer/gloss-awe&quot;&gt;gloss-awe&lt;/a&gt; - Automatically Generated Glossary Page (renamed from typst-glossary)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RolfBremer/in-dexter&quot;&gt;in-dexter&lt;/a&gt; - Automatically Generated Index Page (renamed from typst-index)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/mcm-icm-typst-template&quot;&gt;mcm-icm-typst-template&lt;/a&gt; - A template for Mathematical Contest in Modeling (MCM) and the Interdisciplinary Contest in Modeling(ICM).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zagoli/simple-typst-thesis&quot;&gt;simple-typst-thesis&lt;/a&gt; - A template useful for writing simple thesis in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ls1intum/thesis-template-typst&quot;&gt;thesis-template-typst&lt;/a&gt; - Technical University of Munich thesis Template with cover, titlepage, tables, figures, appendix, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fredguth/tufte-typst&quot;&gt;tufte-typst&lt;/a&gt; - A Tufte-inspired template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nogula/tufte-memo&quot;&gt;tufte-memo&lt;/a&gt; - A memo document template inspired by the design of Edward Tufte&#39;s books.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lkndl/typst-bioinfo-thesis&quot;&gt;typst-bioinfo-thesis&lt;/a&gt; - Flexible section headers and page numbers; pretty outlines and a &lt;code&gt;wrapfig&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/erictapen/typst-invoice&quot;&gt;typst-invoice&lt;/a&gt; - Generate invoices from TOML files&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wychwitch/typst-mla9-template&quot;&gt;typst-mla9-template&lt;/a&gt; - An MLA 9th edition template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/flavio20002/typst-orange-template&quot;&gt;typst-orange-template&lt;/a&gt; - A Typst book template inspired by The Legrand Orange Book&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kaarmu/splash&quot;&gt;typst-palettes&lt;/a&gt; - A library of color palettes for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daskol/typst-templates&quot;&gt;typst-templates&lt;/a&gt; - A templates collection for major venues in machine learning and AI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eigenein/typst-templates&quot;&gt;typst-templates&lt;/a&gt; - Templates for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/haxibami/haxipst&quot;&gt;typst-templates&lt;/a&gt; - My typst templates&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yangwenbo99/typst-uwthesis&quot;&gt;typst-uwthesis&lt;/a&gt; - A typst template for writing thesis, featuring a working abbreviation lists.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qjcg/typstry&quot;&gt;typstry&lt;/a&gt; - A Tapestry of Typst Templates &amp;amp; Examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LLBlumire/writable-gm-screen-inserts&quot;&gt;writable-gm-screen-inserts&lt;/a&gt; - Writable Game Master Screen Insertsces&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Assignments&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/diquah/OpenBoard&quot;&gt;OpenBoard&lt;/a&gt; - Easily build clean assessments in the style of the College Board.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/AntoniosBarotsis/typst-assignment-template&quot;&gt;assignment-template&lt;/a&gt; - A simple assignment template&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/astrale-sharp/typst-assignement-template&quot;&gt;typst-assignment-template&lt;/a&gt; - Yet another simple assignment template&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/gRox167/typst-assignment-template&quot;&gt;typst-assignment-template&lt;/a&gt; - Yet another simple assignment template with a cover and several useful math symbols.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/OriginCode/typst-homework-template&quot;&gt;typst-homework-template&lt;/a&gt; - A simple homework template inspired by the LaTeX homework template by Adam Blank&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/jomaway/typst-teacher-templates&quot;&gt;typst-teacher-template&lt;/a&gt; - A collection of typst templates. Mainly used to create worksheets and exams for my classes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/sylvanfranklin/tinyset&quot;&gt;tinyset&lt;/a&gt; - A lightweight and opinionated problem set package designed with pure math proofs in mind.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CV&lt;/h3&gt; 
&lt;h4&gt;Examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/caffeinatedgaze/bare-bones-cv&quot;&gt;bare-bones-cv&lt;/a&gt; –&amp;nbsp;A single-page minimalistic CV comprising essentials only.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jskherman/imprecv&quot;&gt;cv.typ&lt;/a&gt; - A no-frills curriculum vitae (CV) template for Typst that uses a YAML file for data input in order to version control CV data easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyzh/chicv&quot;&gt;chicv&lt;/a&gt; - A minimal and fully-customizable CV template.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Templates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tzx/NNJR&quot;&gt;NNJR&lt;/a&gt; - A resume template inspired by &lt;code&gt;Jake&#39;s Resume&lt;/code&gt; LaTeX template. Uses Typst and YAML.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GeorgeHoneywood/alta-typst&quot;&gt;alta-typst&lt;/a&gt; - A simple Typst CV template, inspired by AltaCV by LianTze Lim&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Harkunwar/attractive-typst-resume&quot;&gt;attractive-typst-resume&lt;/a&gt; - A modern looking, attractive CV/Resume template by Harkunwar Kochar&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gvariable/billryan-typst&quot;&gt;billryan-typst&lt;/a&gt; - A simple and minimalist resume template, inspired by Resume by Billryan.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mintyfrankie/brilliant-CV&quot;&gt;brilliant-CV&lt;/a&gt; - Another CV template for your job application, yet powered by Typst and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cu1ch3n/caidan&quot;&gt;caidan&lt;/a&gt; - A clean and minimal food menu template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jskherman/imprecv&quot;&gt;cv.typ&lt;/a&gt; - A no-frills curriculum vitae (CV) template using Typst and YAML to version control CV data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/olligobber/friggeri-cv&quot;&gt;friggeri-cv&lt;/a&gt; - A slightly modified version of the Friggeri CV, originally created by Adrien Friggeri in LaTeX, ported to Typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterpf/modern-typst-resume&quot;&gt;modern-cv&lt;/a&gt; - A modern resume and coverletter template based on &lt;code&gt;Awesome CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/peterpf/modern-typst-resume&quot;&gt;modern-typst-template&lt;/a&gt; - A modern resume/CV template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/giovanniberti/moderncv.typst&quot;&gt;moderncv.typst&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;moderncv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wusyong/resume.typ&quot;&gt;resume.typ&lt;/a&gt; - Simple and ergonomic template to generate resume and CV&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LaurenzV/simplecv&quot;&gt;simplecv&lt;/a&gt; - SimpleCV is a simple and elegant CV template written in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/typst-academic-cv&quot;&gt;typst-academic-cv&lt;/a&gt; - Typst Template for Academic CV&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cammellos/typst-blue-header-cv&quot;&gt;typst-blue-header-cv&lt;/a&gt; - Customizable Typst two-columns CV template with a top header.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ice-kylin/typst-cv-miku&quot;&gt;typst-cv-miku&lt;/a&gt; - A simple, elegant, academic style CV template for typst. Support for English and Chinese (and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jxpeng98/Typst-CV-Resume&quot;&gt;typst-cv-resume&lt;/a&gt; - A CV template with Sans font inspired by LaTeX &lt;code&gt;Deedy-Resume&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vaibhavjhawar/typst-cv-template1&quot;&gt;typst-cv-template1&lt;/a&gt; - A CV template inspired by Alessandro Plasmati&#39;s Graduate CV LaTex template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JCGoran/typst-cv-template&quot;&gt;typst-cv-template&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;Awesome CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skyzh/chicv&quot;&gt;typst-cv-template&lt;/a&gt; - Chi CV Template (For Typst)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/titaneric/typst-mixed-resume&quot;&gt;typst-mixed-resume&lt;/a&gt; - A casual and elegant resume template inspired by multiple templates.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UntimelyCreation/typst-neat-cv&quot;&gt;typst-neat-cv&lt;/a&gt; - A Typst template for modern, minimal and elegant CVs, inspired by mintyfrankie&#39;s &lt;code&gt;Brilliant CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mizlan/typst-resume-sans&quot;&gt;typst-resume-sans&lt;/a&gt; - A sleek and unadorned sans-serif resume template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bamboovir/typst-resume-template&quot;&gt;typst-resume-template&lt;/a&gt; - Aesthetic style inspired by the Awesome-CV project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hexWars/resume&quot;&gt;typst-resume-template&lt;/a&gt; - A pretty resume template designed using typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tomowang/typst-twentysecondcv&quot;&gt;typst-twentysecondcv&lt;/a&gt; - A CV template inspired by LaTeX&#39;s &lt;code&gt;Twenty Seconds Resume/CV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/daxartio/cv&quot;&gt;typst-yaml-cv&lt;/a&gt; - A simple cv template designed using typst and yaml.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/elegaanz/vercanard&quot;&gt;vercanard&lt;/a&gt; - A colorful resume template for Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Calendar / Timetable&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ludwig-austermann/typst-timetable&quot;&gt;typst-timetable&lt;/a&gt; - A template for timetables&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/extua/october&quot;&gt;october&lt;/a&gt; - A simple printable month calendar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Footnotes &amp;amp; Endnotes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tudborg/notes.typ&quot;&gt;notes.typ&lt;/a&gt; - A library for notes with deduplication and customizability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Formatting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/metro&quot;&gt;metro&lt;/a&gt; - A typst package to add typsetting to units!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rinmyo/ruby-typ&quot;&gt;ruby-typ&lt;/a&gt; - A library to add ruby text&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pablo-Gonzalez-Calderon/showybox-package&quot;&gt;showybox&lt;/a&gt; - A Typst package for creating colorful and customizable boxes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asibahi/simple-poem-typst&quot;&gt;simple-poem-typst&lt;/a&gt; - An application of the &lt;code&gt;measure&lt;/code&gt; function to set Arabic poetry.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RubixDev/syntastica-typst/&quot;&gt;syntastica-typst&lt;/a&gt; - Tree-sitter syntax highlighting for code blocks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qo/term&quot;&gt;term&lt;/a&gt; - A Typst package for creating figures that emulate terminal screenshots.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/8LWXpg/typst-ansi-render&quot;&gt;typst-ansi_render&lt;/a&gt; - A library to render text with ANSI escape sequences&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lkoehl/typst-boxes&quot;&gt;typst-boxes&lt;/a&gt; - A library to draw colorful boxes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-codelst&quot;&gt;typst-codelst&lt;/a&gt; - A Typst package to render source code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-diagbox&quot;&gt;typst-diagbox&lt;/a&gt; - A library for diagonal line dividers in Typst tables&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jomaway/typst-gentle-clues&quot;&gt;typst-gentle-clues&lt;/a&gt; - A typst package to simply add admonitions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/typst-tablem&quot;&gt;typst-tablem&lt;/a&gt; - Write markdown-like tables easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-tablex&quot;&gt;typst-tablex&lt;/a&gt; - More powerful and customizable tables in Typst!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Graphics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cetz-package/cetz&quot;&gt;CeTZ&lt;/a&gt; - CeTZ (CeTZ, ein Typst Zeichenpacket) is a library for drawing with &lt;a href=&quot;https://typst.app&quot;&gt;Typst&lt;/a&gt; with an API inspired by TikZ and &lt;a href=&quot;https://processing.org/&quot;&gt;Processing&lt;/a&gt;. It comes with modules for drawing plots, graphs and charts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SeniorMars/typst-raytracer&quot;&gt;typst-raytracer&lt;/a&gt; - raytracer in typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Letters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Sematre/typst-letter-pro&quot;&gt;typst-letter-pro&lt;/a&gt; - DIN 5008 letter template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dvdvgt/typst-letter&quot;&gt;typst-letter&lt;/a&gt; - A typst letter template inspired by the DIN 5008 norm&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pascal-huber/typst-letter-template&quot;&gt;typst-letter-template&lt;/a&gt; - A customizable typst letter template with different presets (DIN 5008, Swiss C5)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linguistics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitea.everydayimshuflin.com/greg/typst-lepizig-glossing&quot;&gt;leipzig-gloss&lt;/a&gt; - A library that provides primitives for creating glossing rules according to Leipzig.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/imatpot/typst-ascii-ipa&quot;&gt;typst-ipa&lt;/a&gt; - 🔄 ASCII / IPA conversion for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://kianting.info/wiki/w/Tan_Kian-ting%E7%9A%84%E7%B6%AD%E5%9F%BA:Typst-dictionary-template&quot;&gt;typst-dictionary-template&lt;/a&gt; - 📕 a template for lexical dictionary/glossary in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lynn/typst-syntree&quot;&gt;typst-syntree&lt;/a&gt; - Syntax trees for typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mathematics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/giacomogallina/commute&quot;&gt;commute&lt;/a&gt; - A library for creating commutative diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/platformer/typst-algorithms&quot;&gt;typst-algorithms&lt;/a&gt; - A library for writing algorithms&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/EvanLuo42/typst-himcm-template&quot;&gt;typst-himcm-template&lt;/a&gt; - An HiMCM template for Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/matthiasGmayer/typst-math-template&quot;&gt;typst-math-template&lt;/a&gt; - A simple math template that allows for numbered, referenceable theorems and compilation of subfiles that use references.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/maxwell-thum/typst-pf3&quot;&gt;typst-pf3&lt;/a&gt; - A small package for creating &quot;structured proofs.&quot; Essentially a port of Leslie Lamport&#39;s &lt;a href=&quot;https://web.archive.org/web/20240419130400/https://lamport.azurewebsites.net/latex/pf2.sty&quot;&gt;&lt;code&gt;pf2.sty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sahasatvik/typst-theorems&quot;&gt;typst-theorems&lt;/a&gt; - A library for creating numbered theorem environments&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johanvx/typst-undergradmath&quot;&gt;typst-undergradmath&lt;/a&gt; - A Typst port of &lt;a href=&quot;https://gitlab.com/jim.hefferon/undergradmath&quot;&gt;undergradmath&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Music&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sitandr/conchord&quot;&gt;conchord&lt;/a&gt; - Typst package to easily write lyrics with chords and generate colorful fretboard diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ljgago/typst-chords&quot;&gt;typst-chords&lt;/a&gt; - A library to write song lyrics with chord diagrams in Typst&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Physics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Leedehai/typst-physics&quot;&gt;physica&lt;/a&gt; - A library for usual physics notations, e.g. vectors and vector fields, matrices, differentials, derivatives, Dirac brackets, tensors, isotopes, and digital signal sequences.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Conferences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isaacew/aiaa-typst&quot;&gt;aiaa-typst&lt;/a&gt; - A template for creating conference papers in the style of the American Institute of Aeronautics and Astronautics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DawnEver/ieee-conference-typst-template&quot;&gt;ieee-conference-typst-template&lt;/a&gt; A template to write IEEE Conference in Typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bsp0109/ieee-typst-template&quot;&gt;ieee-typst-template&lt;/a&gt; - A template to write IEEE Papers in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/avonmoll/ifacconf-typst&quot;&gt;ifacconf-typst&lt;/a&gt; - A template for creating conference papers in the style of the International Federation of Automatic Control&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Journals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/p4perf4ce/typst-ieee-trans-template&quot;&gt;ieee-trans-typst&lt;/a&gt; - A template that mimic LaTeX IEEE Transaction template (&lt;code&gt;ieee-trans.cls&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Grants/Proposals&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ntjess/typst-nsf-templates&quot;&gt;typst-nsf-templates&lt;/a&gt; - National Science Foundation (NSF) general template and outlines for popular proposal types.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Engineering&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fenjalien/cirCeTZ&quot;&gt;circuitypst&lt;/a&gt; - A library for drawing electronic circuit schematics&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jomaway/typst-bytefield&quot;&gt;typst-bytefield&lt;/a&gt; - A library for drawing (network) protocol headers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/oldrev/tids&quot;&gt;tids&lt;/a&gt; - A TI-style datasheet template for electronic component&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Plotting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitlab.com/giacomogallina/commute&quot;&gt;typst-cd&lt;/a&gt; - Proof of Concept for tikz-like commutative diagrams&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johannes-wolf/typst-plot&quot;&gt;typst-plot&lt;/a&gt; - A library for plotting line charts (deprecated in favor of CeTZ)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pegacraft/typst-plotting&quot;&gt;typst-plotting&lt;/a&gt; - A library for drawing a variety of charts and plots like line charts, histograms, and pie charts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Posters&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pncnmnp/typst-poster&quot;&gt;typst-poster&lt;/a&gt; - An academic poster template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jonaspleyer/peace-of-posters&quot;&gt;peace-of-posters&lt;/a&gt; - A package for creating academic posters in block style&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scripting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PgBiel/typst-oxifmt&quot;&gt;typst-oxifmt&lt;/a&gt; - Convenient Rust-like string formatting in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jneug/typst-tools4typst&quot;&gt;typst-tools4typst&lt;/a&gt; - Tools for package and template authors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Slides&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvignoli/diapo&quot;&gt;diapo&lt;/a&gt; - A minimal and simplistic presentation template.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andreasKroepelin/polylux&quot;&gt;polylux&lt;/a&gt; - Create presentation slides in Typst&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marcothms/clean-polylux-typst&quot;&gt;clean-polylux-typst&lt;/a&gt; - A clean and dynamic polylux presentation slide template&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OrangeX4/typst-pinit&quot;&gt;pinit&lt;/a&gt; - Pin things as you like, especially useful for creating slides in typst.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/touying-typ/touying&quot;&gt;touying&lt;/a&gt; - A powerful package for creating presentation slides in Typst&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
