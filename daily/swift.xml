<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Swift Daily Trending</title>
    <description>Daily Trending of Swift in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:39:11 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>utmapp/UTM</title>
      <link>https://github.com/utmapp/UTM</link>
      <description>&lt;p&gt;Virtual machines for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UTM&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/utmapp/UTM/actions?query=event%3Arelease+workflow%3ABuild&quot;&gt;&lt;img src=&quot;https://github.com/utmapp/UTM/workflows/Build/badge.svg?branch=main&amp;amp;event=push&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is possible to invent a single machine which can be used to compute any computable sequence.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;-- &lt;cite&gt;Alan Turing, 1936&lt;/cite&gt;&lt;/p&gt; 
&lt;p&gt;UTM is a full featured system emulator and virtual machine host for iOS and macOS. It is based off of QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. More information at &lt;a href=&quot;https://getutm.app/&quot;&gt;https://getutm.app/&lt;/a&gt; and &lt;a href=&quot;https://mac.getutm.app/&quot;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;450px&quot; alt=&quot;UTM running on an iPhone&quot; src=&quot;https://raw.githubusercontent.com/utmapp/UTM/main/screen.png&quot; /&gt; &lt;br /&gt; &lt;img width=&quot;450px&quot; alt=&quot;UTM running on a MacBook&quot; src=&quot;https://raw.githubusercontent.com/utmapp/UTM/main/screenmac.png&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full system emulation (MMU, devices, etc) using QEMU&lt;/li&gt; 
 &lt;li&gt;30+ processors supported including x86_64, ARM64, and RISC-V&lt;/li&gt; 
 &lt;li&gt;VGA graphics mode using SPICE and QXL&lt;/li&gt; 
 &lt;li&gt;Text terminal mode&lt;/li&gt; 
 &lt;li&gt;USB devices&lt;/li&gt; 
 &lt;li&gt;JIT based acceleration using QEMU TCG&lt;/li&gt; 
 &lt;li&gt;Frontend designed from scratch for macOS 11 and iOS 11+ using the latest and greatest APIs&lt;/li&gt; 
 &lt;li&gt;Create, manage, run VMs directly from your device&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Additional macOS Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hardware accelerated virtualization using Hypervisor.framework and QEMU&lt;/li&gt; 
 &lt;li&gt;Boot macOS guests with Virtualization.framework on macOS 12+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;UTM SE&lt;/h2&gt; 
&lt;p&gt;UTM/QEMU requires dynamic code generation (JIT) for maximum performance. JIT on iOS devices require either a jailbroken device, or one of the various workarounds found for specific versions of iOS (see &quot;Install&quot; for more details).&lt;/p&gt; 
&lt;p&gt;UTM SE (&quot;slow edition&quot;) uses a &lt;a href=&quot;https://github.com/ktemkin/qemu/raw/with_tcti/tcg/aarch64-tcti/README.md&quot;&gt;threaded interpreter&lt;/a&gt; which performs better than a traditional interpreter but still slower than JIT. This technique is similar to what &lt;a href=&quot;https://github.com/ish-app/ish&quot;&gt;iSH&lt;/a&gt; does for dynamic execution. As a result, UTM SE does not require jailbreaking or any JIT workarounds and can be sideloaded as a regular app.&lt;/p&gt; 
&lt;p&gt;To optimize for size and build times, only the following architectures are included in UTM SE: ARM, PPC, RISC-V, and x86 (all with both 32-bit and 64-bit variants).&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;UTM (SE) for iOS: &lt;a href=&quot;https://getutm.app/install/&quot;&gt;https://getutm.app/install/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;UTM is also available for macOS: &lt;a href=&quot;https://mac.getutm.app/&quot;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/utmapp/UTM/main/Documentation/MacDevelopment.md&quot;&gt;macOS Development&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/utmapp/UTM/main/Documentation/iOSDevelopment.md&quot;&gt;iOS Development&lt;/a&gt;&lt;/h3&gt; 
&lt;h2&gt;Related&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ish-app/ish&quot;&gt;iSH&lt;/a&gt;: emulates a usermode Linux terminal interface for running x86 Linux applications on iOS&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/holzschu/a-shell&quot;&gt;a-shell&lt;/a&gt;: packages common Unix commands and utilities built natively for iOS and accessible through a terminal interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;UTM is distributed under the permissive Apache 2.0 license. However, it uses several (L)GPL components. Most are dynamically linked but the gstreamer plugins are statically linked and parts of the code are taken from qemu. Please be aware of this if you intend on redistributing this application.&lt;/p&gt; 
&lt;p&gt;Some icons made by &lt;a href=&quot;https://www.freepik.com&quot;&gt;Freepik&lt;/a&gt; from &lt;a href=&quot;https://www.flaticon.com/&quot;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, UTM frontend depends on the following MIT/BSD License components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hackiftekhar/IQKeyboardManager&quot;&gt;IQKeyboardManager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/migueldeicaza/SwiftTerm&quot;&gt;SwiftTerm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/weichsel/ZIPFoundation&quot;&gt;ZIP Foundation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/futuretap/InAppSettingsKit&quot;&gt;InAppSettingsKit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Continuous integration hosting is provided by &lt;a href=&quot;https://www.macstadium.com/opensource&quot;&gt;MacStadium&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.macstadium.com&quot;&gt;&lt;img src=&quot;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&quot; alt=&quot;MacStadium logo&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gonzalezreal/swift-markdown-ui</title>
      <link>https://github.com/gonzalezreal/swift-markdown-ui</link>
      <description>&lt;p&gt;Display and customize Markdown text in SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MarkdownUI&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/gonzalezreal/MarkdownUI/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/gonzalezreal/MarkdownUI/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/gonzalezreal/swift-markdown-ui&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fgonzalezreal%2Fswift-markdown-ui%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/gonzalezreal/swift-markdown-ui&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fgonzalezreal%2Fswift-markdown-ui%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Display and customize Markdown text in SwiftUI.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#minimum-requirements&quot;&gt;Minimum requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#getting-started&quot;&gt;Getting started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#creating-a-markdown-view&quot;&gt;Creating a Markdown view&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#styling-markdown&quot;&gt;Styling Markdown&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#documentation&quot;&gt;Documentation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#related-content&quot;&gt;Related content&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#demo&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;MarkdownUI is a powerful library for displaying and customizing Markdown text in SwiftUI. It is compatible with the &lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;GitHub Flavored Markdown Spec&lt;/a&gt; and can display images, headings, lists (including task lists), blockquotes, code blocks, tables, and thematic breaks, besides styled text and links.&lt;/p&gt; 
&lt;p&gt;MarkdownUI offers comprehensible theming features to customize how it displays Markdown text. You can use the built-in themes, create your own or override specific text and block styles.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/MarkdownUI@2x.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/MarkdownUI~dark@2x.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Minimum requirements&lt;/h2&gt; 
&lt;p&gt;You can use MarkdownUI on the following platforms:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 12.0+&lt;/li&gt; 
 &lt;li&gt;iOS 15.0+&lt;/li&gt; 
 &lt;li&gt;tvOS 15.0+&lt;/li&gt; 
 &lt;li&gt;watchOS 8.0+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some features, like displaying tables or multi-image paragraphs, require macOS 13.0+, iOS 16.0+, tvOS 16.0+, and watchOS 9.0+.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;h3&gt;Creating a Markdown view&lt;/h3&gt; 
&lt;p&gt;A &lt;code&gt;Markdown&lt;/code&gt; view displays rich structured text using the Markdown syntax. It can display images, headings, lists (including task lists), blockquotes, code blocks, tables, and thematic breaks, besides styled text and links.&lt;/p&gt; 
&lt;p&gt;The simplest way of creating a &lt;code&gt;Markdown&lt;/code&gt; view is to pass a Markdown string to the &lt;code&gt;init(_:baseURL:imageBaseURL:)&lt;/code&gt; initializer.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let markdownString = &quot;&quot;&quot;
  ## Try MarkdownUI

  **MarkdownUI** is a native Markdown renderer for SwiftUI
  compatible with the
  [GitHub Flavored Markdown Spec](https://github.github.com/gfm/).
  &quot;&quot;&quot;

var body: some View {
  Markdown(markdownString)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/MarkdownString@2x.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/MarkdownString~dark@2x.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;A more convenient way to create a &lt;code&gt;Markdown&lt;/code&gt; view is by using the &lt;code&gt;init(baseURL:imageBaseURL:content:)&lt;/code&gt; initializer, which takes a Markdown content builder in which you can compose the view content, either by providing Markdown strings or by using an expressive domain-specific language.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var body: some View {
  Markdown {
    &quot;&quot;&quot;
    ## Using a Markdown Content Builder
    Use Markdown strings or an expressive domain-specific language
    to build the content.
    &quot;&quot;&quot;
    Heading(.level2) {
      &quot;Try MarkdownUI&quot;
    }
    Paragraph {
      Strong(&quot;MarkdownUI&quot;)
      &quot; is a native Markdown renderer for SwiftUI&quot;
      &quot; compatible with the &quot;
      InlineLink(
        &quot;GitHub Flavored Markdown Spec&quot;,
        destination: URL(string: &quot;https://github.github.com/gfm/&quot;)!
      )
      &quot;.&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/MarkdownContentBuilder@2x.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/MarkdownContentBuilder~dark@2x.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can also create a &lt;code&gt;MarkdownContent&lt;/code&gt; value in your model layer and later create a &lt;code&gt;Markdown&lt;/code&gt; view by passing the content value to the &lt;code&gt;init(_:baseURL:imageBaseURL:)&lt;/code&gt; initializer. The &lt;code&gt;MarkdownContent&lt;/code&gt; value pre-parses the Markdown string preventing the view from doing this step.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Somewhere in the model layer
let content = MarkdownContent(&quot;You can try **CommonMark** [here](https://spec.commonmark.org/dingus/).&quot;)

// Later in the view layer
var body: some View {
  Markdown(self.model.content)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Styling Markdown&lt;/h3&gt; 
&lt;p&gt;Markdown views use a basic default theme to display the contents. For more information, read about the &lt;code&gt;basic&lt;/code&gt; theme.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Markdown {
  &quot;&quot;&quot;
  You can quote text with a `&amp;gt;`.

  &amp;gt; Outside of a dog, a book is man&#39;s best friend. Inside of a
  &amp;gt; dog it&#39;s too dark to read.

  – Groucho Marx
  &quot;&quot;&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/BlockquoteContent@2x.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/BlockquoteContent~dark@2x.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can customize the appearance of Markdown content by applying different themes using the &lt;code&gt;markdownTheme(_:)&lt;/code&gt; modifier. For example, you can apply one of the built-in themes, like &lt;code&gt;gitHub&lt;/code&gt;, to either a Markdown view or a view hierarchy that contains Markdown views.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Markdown {
  &quot;&quot;&quot;
  You can quote text with a `&amp;gt;`.

  &amp;gt; Outside of a dog, a book is man&#39;s best friend. Inside of a
  &amp;gt; dog it&#39;s too dark to read.

  – Groucho Marx
  &quot;&quot;&quot;
}
.markdownTheme(.gitHub)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/GitHubBlockquote@2x.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/GitHubBlockquote~dark@2x.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;To override a specific text style from the current theme, use the &lt;code&gt;markdownTextStyle(_:textStyle:)&lt;/code&gt; modifier. The following example shows how to override the &lt;code&gt;code&lt;/code&gt; text style.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Markdown {
  &quot;&quot;&quot;
  Use `git status` to list all new or modified files
  that haven&#39;t yet been committed.
  &quot;&quot;&quot;
}
.markdownTextStyle(\.code) {
  FontFamilyVariant(.monospaced)
  FontSize(.em(0.85))
  ForegroundColor(.purple)
  BackgroundColor(.purple.opacity(0.25))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/CustomInlineCode@2x.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/CustomInlineCode~dark@2x.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;You can also use the &lt;code&gt;markdownBlockStyle(_:body:)&lt;/code&gt; modifier to override a specific block style. For example, you can override only the &lt;code&gt;blockquote&lt;/code&gt; block style, leaving other block styles untouched.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;Markdown {
  &quot;&quot;&quot;
  You can quote text with a `&amp;gt;`.

  &amp;gt; Outside of a dog, a book is man&#39;s best friend. Inside of a
  &amp;gt; dog it&#39;s too dark to read.

  – Groucho Marx
  &quot;&quot;&quot;
}
.markdownBlockStyle(\.blockquote) { configuration in
  configuration.label
    .padding()
    .markdownTextStyle {
      FontCapsVariant(.lowercaseSmallCaps)
      FontWeight(.semibold)
      BackgroundColor(nil)
    }
    .overlay(alignment: .leading) {
      Rectangle()
        .fill(Color.teal)
        .frame(width: 4)
    }
    .background(Color.teal.opacity(0.5))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/CustomBlockquote@2x.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Sources/MarkdownUI/Documentation.docc/Resources/CustomBlockquote~dark@2x.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Another way to customize the appearance of Markdown content is to create your own theme. To create a theme, start by instantiating an empty &lt;code&gt;Theme&lt;/code&gt; and chain together the different text and block styles in a single expression.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Theme {
  static let fancy = Theme()
    .code {
      FontFamilyVariant(.monospaced)
      FontSize(.em(0.85))
    }
    .link {
      ForegroundColor(.purple)
    }
    // More text styles...
    .paragraph { configuration in
      configuration.label
        .relativeLineSpacing(.em(0.25))
        .markdownMargin(top: 0, bottom: 16)
    }
    .listItem { configuration in
      configuration.label
        .markdownMargin(top: .em(0.25))
    }
    // More block styles...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com&quot;&gt;Swift Package Index&lt;/a&gt; kindly hosts the online documentation for all versions, available here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/gonzalezreal/swift-markdown-ui/main/documentation/markdownui&quot;&gt;main&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/gonzalezreal/swift-markdown-ui/2.1.0/documentation/markdownui&quot;&gt;2.1.0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/gonzalezreal/swift-markdown-ui/2.0.2/documentation/markdownui&quot;&gt;2.0.2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Related content&lt;/h3&gt; 
&lt;p&gt;You can learn more about MarkdownUI by referring to the following articles and third-party resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gonzalezreal.github.io/2023/02/18/better-markdown-rendering-in-swiftui.html&quot;&gt;Better Markdown Rendering in SwiftUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/gVy06iJQFWQ&quot;&gt;Unlock the Power of Markdown in SwiftUI with THIS Hack!&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/Rebeloper&quot;&gt;@Rebeloper&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;MarkdownUI comes with a few more tricks on the sleeve. You can explore the &lt;a href=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Examples/Demo/&quot;&gt;companion demo project&lt;/a&gt; and discover its complete set of capabilities.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Examples/Demo/Screenshot.png#gh-light-mode-only&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/gonzalezreal/swift-markdown-ui/main/Examples/Demo/Screenshot~dark.png#gh-dark-mode-only&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Adding MarkdownUI to a Swift package&lt;/h3&gt; 
&lt;p&gt;To use MarkdownUI in a Swift Package Manager project, add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/gonzalezreal/swift-markdown-ui&quot;, from: &quot;2.0.2&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Include &lt;code&gt;&quot;MarkdownUI&quot;&lt;/code&gt; as a dependency for your executable target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.target(name: &quot;&amp;lt;target&amp;gt;&quot;, dependencies: [
  .product(name: &quot;MarkdownUI&quot;, package: &quot;swift-markdown-ui&quot;)
]),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, add &lt;code&gt;import MarkdownUI&lt;/code&gt; to your source code.&lt;/p&gt; 
&lt;h3&gt;Adding MarkdownUI to an Xcode project&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Add Packages…&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Enter &lt;code&gt;https://github.com/gonzalezreal/swift-markdown-ui&lt;/code&gt; into the &lt;em&gt;Search or Enter Package URL&lt;/em&gt; search field&lt;/li&gt; 
 &lt;li&gt;Link &lt;strong&gt;MarkdownUI&lt;/strong&gt; to your application target&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Moya/Moya</title>
      <link>https://github.com/Moya/Moya</link>
      <description>&lt;p&gt;Network abstraction layer written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img height=&quot;160&quot; src=&quot;https://raw.githubusercontent.com/Moya/Moya/master/web/logo_github.png&quot; /&gt; &lt;/p&gt; 
&lt;h1&gt;Moya 15.0.0&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://circleci.com/gh/Moya/Moya/tree/master&quot;&gt;&lt;img src=&quot;https://img.shields.io/circleci/project/github/Moya/Moya/master.svg?sanitize=true&quot; alt=&quot;CircleCI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/github/Moya/Moya?branch=master&quot;&gt;&lt;img src=&quot;https://codecov.io/github/Moya/Moya/coverage.svg?branch=master&quot; alt=&quot;codecov.io&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/JamitLabs/Accio&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&quot; alt=&quot;Accio supported&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/Moya&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Moya.svg?sanitize=true&quot; alt=&quot;CocoaPods compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&quot; alt=&quot;Swift Package Manager compatible&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;A Chinese version of this document can be found &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/Readme_CN.md&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You&#39;re a smart developer. You probably use &lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;Alamofire&lt;/a&gt; to abstract away access to &lt;code&gt;URLSession&lt;/code&gt; and all those nasty details you don&#39;t really care about. But then, like lots of smart developers, you write ad hoc network abstraction layers. They are probably called &quot;APIManager&quot; or &quot;NetworkModel&quot;, and they always end in tears.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Moya/Moya/master/web/diagram.png&quot; alt=&quot;Moya Overview&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Ad hoc network layers are common in iOS apps. They&#39;re bad for a few reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Makes it hard to write new apps (&quot;where do I begin?&quot;)&lt;/li&gt; 
 &lt;li&gt;Makes it hard to maintain existing apps (&quot;oh my god, this mess...&quot;)&lt;/li&gt; 
 &lt;li&gt;Makes it hard to write unit tests (&quot;how do I do this again?&quot;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So the basic idea of Moya is that we want some network abstraction layer that sufficiently encapsulates actually calling Alamofire directly. It should be simple enough that common things are easy, but comprehensive enough that complicated things are also easy.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you use Alamofire to abstract away &lt;code&gt;URLSession&lt;/code&gt;, why not use something to abstract away the nitty gritty of URLs, parameters, etc?&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Some awesome features of Moya:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compile-time checking for correct API endpoint accesses.&lt;/li&gt; 
 &lt;li&gt;Lets you define a clear usage of different endpoints with associated enum values.&lt;/li&gt; 
 &lt;li&gt;Treats test stubs as first-class citizens so unit testing is super-easy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can check out more about the project direction in the &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/Vision.md&quot;&gt;vision document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sample Projects&lt;/h2&gt; 
&lt;p&gt;We have provided two sample projects in the repository. To use it download the repo, run &lt;code&gt;carthage update&lt;/code&gt; to download the required libraries and open &lt;a href=&quot;https://github.com/Moya/Moya/tree/master/Moya.xcodeproj&quot;&gt;Moya.xcodeproj&lt;/a&gt;. You&#39;ll see two schemes: &lt;code&gt;Basic&lt;/code&gt; and &lt;code&gt;Multi-Target&lt;/code&gt; - select one and then build &amp;amp; run! Source files for these are in the &lt;code&gt;Examples&lt;/code&gt; directory in project navigator. Have fun!&lt;/p&gt; 
&lt;h2&gt;Project Status&lt;/h2&gt; 
&lt;p&gt;This project is actively under development, and is being used in &lt;a href=&quot;https://github.com/Artsy/eidolon&quot;&gt;Artsy&#39;s auction app&lt;/a&gt;. We consider it ready for production use.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Moya version vs Swift version.&lt;/h3&gt; 
&lt;p&gt;Below is a table that shows which version of Moya you should use for your Swift version.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Swift&lt;/th&gt; 
   &lt;th&gt;Moya&lt;/th&gt; 
   &lt;th&gt;RxMoya&lt;/th&gt; 
   &lt;th&gt;ReactiveMoya&lt;/th&gt; 
   &lt;th&gt;RxSwift&lt;/th&gt; 
   &lt;th&gt;ReactiveSwift&lt;/th&gt; 
   &lt;th&gt;Alamofire&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;gt;= 5.2&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 15.0.0&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 15.0.0&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 15.0.0&lt;/td&gt; 
   &lt;td&gt;6.X&lt;/td&gt; 
   &lt;td&gt;6.X&lt;/td&gt; 
   &lt;td&gt;5.X&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5.X&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 14.0.0&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 14.0.0&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 14.0.0&lt;/td&gt; 
   &lt;td&gt;5.X&lt;/td&gt; 
   &lt;td&gt;6.X&lt;/td&gt; 
   &lt;td&gt;5.X&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5.X&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; 
   &lt;td&gt;4.X&lt;/td&gt; 
   &lt;td&gt;5.X&lt;/td&gt; 
   &lt;td&gt;&amp;gt;= 4.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.X&lt;/td&gt; 
   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; 
   &lt;td&gt;10.0.0 - 12.0.1&lt;/td&gt; 
   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; 
   &lt;td&gt;4.X(&amp;gt;= 10.0.0)&lt;/td&gt; 
   &lt;td&gt;4.X(&amp;gt;= 12.0.0)&lt;/td&gt; 
   &lt;td&gt;4.1(&amp;gt;= 11.0.0)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;3.X&lt;/td&gt; 
   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; 
   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; 
   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2.3&lt;/td&gt; 
   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; 
   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; 
   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2.2&lt;/td&gt; 
   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; 
   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; 
   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;em&gt;Note: If you are using Swift 4.2 in your project, but you are using Xcode 10.2, Moya 13 should work correctly even though we use Swift 5.0.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Upgrading to a new major version of Moya? Check out our &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/docs/MigrationGuides&quot;&gt;migration guides&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Note: Instructions below are for using &lt;strong&gt;SwiftPM&lt;/strong&gt; without the Xcode UI. It&#39;s the easiest to go to your Project Settings -&amp;gt; Swift Packages and add Moya from there.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;To integrate using Apple&#39;s Swift package manager, without Xcode integration, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/Moya/Moya.git&quot;, .upToNextMajor(from: &quot;15.0.0&quot;))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then specify &lt;code&gt;&quot;Moya&quot;&lt;/code&gt; as a dependency of the Target in which you wish to use Moya. If you want to use reactive extensions, add also &lt;code&gt;&quot;ReactiveMoya&quot;&lt;/code&gt;, &lt;code&gt;&quot;RxMoya&quot;&lt;/code&gt; or &lt;code&gt;&quot;CombineMoya&quot;&lt;/code&gt; as your target dependency respectively. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version:5.3
import PackageDescription

let package = Package(
    name: &quot;MyPackage&quot;,
    products: [
        .library(
            name: &quot;MyPackage&quot;,
            targets: [&quot;MyPackage&quot;]),
    ],
    dependencies: [
        .package(url: &quot;https://github.com/Moya/Moya.git&quot;, .upToNextMajor(from: &quot;15.0.0&quot;))
    ],
    targets: [
        .target(
            name: &quot;MyPackage&quot;,
            dependencies: [&quot;ReactiveMoya&quot;])
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Combine note: if you&#39;re using &lt;strong&gt;CombineMoya&lt;/strong&gt;, make sure that you use Xcode 11.5.0 or later. With earlier versions of Xcode you will have to manually add Combine as a weakly linked framework to your application target.&lt;/p&gt; 
&lt;h3&gt;Accio&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/JamitLabs/Accio&quot;&gt;Accio&lt;/a&gt; is a dependency manager based on SwiftPM which can build frameworks for iOS/macOS/tvOS/watchOS. Therefore the integration steps of Moya are exactly the same as described above. Once your &lt;code&gt;Package.swift&lt;/code&gt; file is configured, run &lt;code&gt;accio update&lt;/code&gt; instead of &lt;code&gt;swift package update&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;For Moya, use the following entry in your Podfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-rb&quot;&gt;pod &#39;Moya&#39;, &#39;~&amp;gt; 15.0&#39;

# or 

pod &#39;Moya/RxSwift&#39;, &#39;~&amp;gt; 15.0&#39;

# or

pod &#39;Moya/ReactiveSwift&#39;, &#39;~&amp;gt; 15.0&#39;

# or

pod &#39;Moya/Combine&#39;, &#39;~&amp;gt; 15.0&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In any file you&#39;d like to use Moya in, don&#39;t forget to import the framework with &lt;code&gt;import Moya&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like, &lt;code&gt;Moya&lt;/code&gt;, &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;ReactiveMoya&lt;/code&gt;, or &lt;code&gt;CombineMoya&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Make the following entry in your Cartfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;Moya/Moya&quot; ~&amp;gt; 15.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&quot;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&quot;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;NOTE: At this time, Carthage does not provide a way to build only specific repository submodules. All submodules and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;ReactiveSwift&lt;/code&gt;, feel free to delete that framework along with &lt;code&gt;ReactiveMoya&lt;/code&gt; from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes. Or if you are using &lt;code&gt;ReactiveSwift&lt;/code&gt; but not &lt;code&gt;RxSwift&lt;/code&gt; or &lt;code&gt;Combine&lt;/code&gt;, then &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;RxTest&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt;, &lt;code&gt;CombineMoya&lt;/code&gt; etc. can safely be deleted.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Manually&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &lt;em&gt;if&lt;/em&gt; your project is not initialized as a git repository:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add Alamofire &amp;amp; Moya as a git &lt;a href=&quot;http://git-scm.com/docs/git-submodule&quot;&gt;submodule&lt;/a&gt; by running the following commands:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git
$ git submodule add https://github.com/Moya/Moya.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project. Do the same with the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; in the &lt;code&gt;Moya&lt;/code&gt; folder.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;They should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Verify that the deployment targets of the &lt;code&gt;xcodeproj&lt;/code&gt;s match that of your application target in the Project Navigator.&lt;/li&gt; 
 &lt;li&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &quot;Targets&quot; heading in the sidebar.&lt;/li&gt; 
 &lt;li&gt;In the tab bar at the top of that window, open the &quot;General&quot; panel.&lt;/li&gt; 
 &lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &quot;Embedded Binaries&quot; section.&lt;/li&gt; 
 &lt;li&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as either &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt; or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under &quot;Embedded Binaries&quot; again and add the correct build target for &lt;code&gt;Moya&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The three frameworks are automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;After &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/docs/Examples/Basic.md&quot;&gt;some setup&lt;/a&gt;, using Moya is really simple. You can access an API like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()
provider.request(.zen) { result in
    switch result {
    case let .success(moyaResponse):
        let data = moyaResponse.data
        let statusCode = moyaResponse.statusCode
        // do something with the response data or statusCode
    case let .failure(error):
        // this means there was a network failure - either the request
        // wasn&#39;t sent (connectivity), or no response was received (server
        // timed out).  If the server responds with a 4xx or 5xx error, that
        // will be sent as a &quot;.success&quot;-ful response.
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s a basic example. Many API requests need parameters. Moya encodes these into the enum you use to access the endpoint, like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()
provider.request(.userProfile(&quot;ashfurrow&quot;)) { result in
    // do something with the result
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;No more typos in URLs. No more missing parameter values. No more messing with parameter encoding.&lt;/p&gt; 
&lt;p&gt;For more examples, see the &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/docs/Examples&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Reactive Extensions&lt;/h2&gt; 
&lt;p&gt;Even cooler are the reactive extensions. Moya provides reactive extensions for &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveSwift&quot;&gt;ReactiveSwift&lt;/a&gt;, &lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot;&gt;RxSwift&lt;/a&gt;, and &lt;a href=&quot;https://developer.apple.com/documentation/combine&quot;&gt;Combine&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;ReactiveSwift&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Moya/Moya/raw/master/docs/ReactiveSwift.md&quot;&gt;&lt;code&gt;ReactiveSwift&lt;/code&gt; extension&lt;/a&gt; provides both &lt;code&gt;reactive.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;reactive.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods that immediately return &lt;code&gt;SignalProducer&lt;/code&gt;s that you can start, bind, map, or whatever you want to do. To handle errors, for instance, we could do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()
provider.reactive.request(.userProfile(&quot;ashfurrow&quot;)).start { event in
    switch event {
    case let .value(response):
        image = UIImage(data: response.data)
    case let .failed(error):
        print(error)
    default:
        break
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RxSwift&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Moya/Moya/raw/master/docs/RxSwift.md&quot;&gt;&lt;code&gt;RxSwift&lt;/code&gt; extension&lt;/a&gt; also provide both &lt;code&gt;rx.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods, but return type is different for both. In case of a normal &lt;code&gt;rx.request(:callbackQueue)&lt;/code&gt;, the return type is &lt;code&gt;Single&amp;lt;Response&amp;gt;&lt;/code&gt; which emits either single element or an error. In case of a &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt;, the return type is &lt;code&gt;Observable&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;, since we may get multiple events from progress and one last event which is a response.&lt;/p&gt; 
&lt;p&gt;To handle errors, for instance, we could do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()
provider.rx.request(.userProfile(&quot;ashfurrow&quot;)).subscribe { event in
    switch event {
    case let .success(response):
        image = UIImage(data: response.data)
    case let .error(error):
        print(error)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition to the option of using signals instead of callback blocks, there are also a series of signal operators for RxSwift and ReactiveSwift that will attempt to map the data received from the network response into either an image, some JSON, or a string, with &lt;code&gt;mapImage()&lt;/code&gt;, &lt;code&gt;mapJSON()&lt;/code&gt;, and &lt;code&gt;mapString()&lt;/code&gt;, respectively. If the mapping is unsuccessful, you&#39;ll get an error on the signal. You also get handy methods for filtering out certain status codes. This means that you can place your code for handling API errors like 400&#39;s in the same places as code for handling invalid responses.&lt;/p&gt; 
&lt;h3&gt;Combine&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;Combine&lt;/code&gt; extension provides &lt;code&gt;requestPublisher(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;requestWithProgressPublisher(:callbackQueue)&lt;/code&gt; returning &lt;code&gt;AnyPublisher&amp;lt;Response, MoyaError&amp;gt;&lt;/code&gt; and &lt;code&gt;AnyPublisher&amp;lt;ProgressResponse, MoyaError&amp;gt;&lt;/code&gt; respectively.&lt;/p&gt; 
&lt;p&gt;Here&#39;s an example of &lt;code&gt;requestPublisher&lt;/code&gt; usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()
let cancellable = provider.requestPublisher(.userProfile(&quot;ashfurrow&quot;))
    .sink(receiveCompletion: { completion in
        guard case let .failure(error) = completion else { return }

        print(error)
    }, receiveValue: { response in
        image = UIImage(data: response.data)
    })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Community Projects&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Moya/Moya/raw/master/docs/CommunityProjects.md&quot;&gt;Moya has a great community around it and some people have created some very helpful extensions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Hey! Do you like Moya? Awesome! We could actually really use your help!&lt;/p&gt; 
&lt;p&gt;Open source isn&#39;t just writing code. Moya could use your help with any of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Finding (and reporting!) bugs.&lt;/li&gt; 
 &lt;li&gt;New feature suggestions.&lt;/li&gt; 
 &lt;li&gt;Answering questions on issues.&lt;/li&gt; 
 &lt;li&gt;Documentation improvements.&lt;/li&gt; 
 &lt;li&gt;Reviewing pull requests.&lt;/li&gt; 
 &lt;li&gt;Helping to manage issue priorities.&lt;/li&gt; 
 &lt;li&gt;Fixing bugs/new features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If any of that sounds cool to you, send a pull request! After your first contribution, we will add you as a member to the repo so you can merge pull requests and help steer the ship &lt;span&gt;🚢&lt;/span&gt; You can read more details about that &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/Contributing.md&quot;&gt;in our contributor guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Moya&#39;s community has a tremendous positive energy, and the maintainers are committed to keeping things awesome. Like &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/wiki/Communication-&amp;amp;-Design-Rules&quot;&gt;in the CocoaPods community&lt;/a&gt;, always assume positive intent. Even if a comment sounds mean-spirited, give the person the benefit of the doubt.&lt;/p&gt; 
&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/Code%20of%20Conduct.md&quot;&gt;its terms&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Adding new source files&lt;/h3&gt; 
&lt;p&gt;If you add or remove a source file from Moya, a corresponding change needs to be made to the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; project at the root of this repository. This project is used for Carthage. Don&#39;t worry, you&#39;ll get an automated warning when submitting a pull request if you forget.&lt;/p&gt; 
&lt;h3&gt;Help us improve Moya documentation&lt;/h3&gt; 
&lt;p&gt;Whether you’re a core member or a user trying it out for the first time, you can make a valuable contribution to Moya by improving the documentation. Help us by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending us feedback about something you thought was confusing or simply missing.&lt;/li&gt; 
 &lt;li&gt;Suggesting better wording or ways of explaining certain topics.&lt;/li&gt; 
 &lt;li&gt;Sending us a pull request via GitHub.&lt;/li&gt; 
 &lt;li&gt;Improving the &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/Readme_CN.md&quot;&gt;Chinese documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Moya is released under an MIT license. See &lt;a href=&quot;https://github.com/Moya/Moya/raw/master/License.md&quot;&gt;License.md&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/CopilotForXcode</title>
      <link>https://github.com/github/CopilotForXcode</link>
      <description>&lt;p&gt;Xcode extension for GitHub Copilot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img align=&quot;center&quot; height=&quot;70&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/AppIcon.png&quot; /&gt; GitHub Copilot for Xcode&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; is an AI pair programmer tool that helps you write code faster and smarter. Copilot for Xcode is an Xcode extension that provides inline coding suggestions as you type and a chat assistant to answer your coding questions.&lt;/p&gt; 
&lt;h2&gt;Chat&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Chat provides suggestions to your specific coding tasks via chat. &lt;img alt=&quot;Chat of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/chat_dark.gif&quot; width=&quot;800&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Agent Mode&lt;/h2&gt; 
&lt;p&gt;GitHub Copilot Agent Mode provides AI-powered assistance that can understand and modify your codebase directly. With Agent Mode, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get intelligent code edits applied directly to your files&lt;/li&gt; 
 &lt;li&gt;Run terminal commands and view their output without leaving the interface&lt;/li&gt; 
 &lt;li&gt;Search through your codebase to find relevant files and code snippets&lt;/li&gt; 
 &lt;li&gt;Create new files and directories as needed for your project&lt;/li&gt; 
 &lt;li&gt;Get assistance with enhanced context awareness across multiple files and folders&lt;/li&gt; 
 &lt;li&gt;Run Model Context Protocol (MCP) tools you configured to extend the capabilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Agent Mode integrates with Xcode&#39;s environment, creating a seamless development experience where Copilot can help implement features, fix bugs, and refactor code with comprehensive understanding of your project.&lt;/p&gt; 
&lt;h2&gt;Code Completion&lt;/h2&gt; 
&lt;p&gt;You can receive auto-complete type suggestions from GitHub Copilot either by starting to write the code you want to use, or by writing a natural language comment describing what you want the code to do. &lt;img alt=&quot;Code Completion of GitHub Copilot for Xcode&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/demo.gif&quot; width=&quot;800&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 12+&lt;/li&gt; 
 &lt;li&gt;Xcode 8+&lt;/li&gt; 
 &lt;li&gt;A GitHub Copilot subscription. To learn more, visit &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;https://github.com/features/copilot&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install via &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;brew install --cask github-copilot-for-xcode
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or download the &lt;code&gt;dmg&lt;/code&gt; from &lt;a href=&quot;https://github.com/github/CopilotForXcode/releases/latest/download/GitHubCopilotForXcode.dmg&quot;&gt;the latest release&lt;/a&gt;. Drag &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; into the &lt;code&gt;Applications&lt;/code&gt; folder:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of opened dmg&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/dmg-open.png&quot; width=&quot;512&quot; /&gt; &lt;/p&gt; &lt;p&gt;Updates can be downloaded and installed by the app.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application (from the &lt;code&gt;Applications&lt;/code&gt; folder). Accept the security warning.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of MacOS download permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/macos-download-open-confirm.png&quot; width=&quot;350&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A background item will be added to enable the GitHub Copilot for Xcode extension app to connect to the host app. This permission is usually automatically added when first launching the app.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of background item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/background-item.png&quot; width=&quot;370&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Three permissions are required for GitHub Copilot for Xcode to function properly: &lt;code&gt;Background&lt;/code&gt;, &lt;code&gt;Accessibility&lt;/code&gt;, and &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt;. For more details on why these permissions are required see &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/TROUBLESHOOTING.md&quot;&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The first time the application is run the &lt;code&gt;Accessibility&lt;/code&gt; permission should be requested:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of accessibility permission request&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/accessibility-permission-request.png&quot; width=&quot;529&quot; /&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;Xcode Source Editor Extension&lt;/code&gt; permission needs to be enabled manually. Click &lt;code&gt;Extension Permission&lt;/code&gt; from the &lt;code&gt;GitHub Copilot for Xcode&lt;/code&gt; application settings to open the System Preferences to the &lt;code&gt;Extensions&lt;/code&gt; panel. Select &lt;code&gt;Xcode Source Editor&lt;/code&gt; and enable &lt;code&gt;GitHub Copilot&lt;/code&gt;:&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of extension permission&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/extension-permission.png&quot; width=&quot;582&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;After granting the extension permission, open Xcode. Verify that the &lt;code&gt;Github Copilot&lt;/code&gt; menu is available and enabled under the Xcode &lt;code&gt;Editor&lt;/code&gt; menu. &lt;br /&gt;&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/xcode-menu.png&quot; width=&quot;648&quot; /&gt; &lt;/p&gt; &lt;p&gt;Keyboard shortcuts can be set for all menu items in the &lt;code&gt;Key Bindings&lt;/code&gt; section of Xcode preferences.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To sign into GitHub Copilot, click the &lt;code&gt;Sign in&lt;/code&gt; button in the settings application. This will open a browser window and copy a code to the clipboard. Paste the code into the GitHub login page and authorize the application.&lt;/p&gt; &lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of sign-in popup&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/device-code.png&quot; width=&quot;372&quot; /&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To install updates, click &lt;code&gt;Check for Updates&lt;/code&gt; from the menu item or in the settings application.&lt;/p&gt; &lt;p&gt;After installing a new version, Xcode must be restarted to use the new version correctly.&lt;/p&gt; &lt;p&gt;New versions can also be installed from &lt;code&gt;dmg&lt;/code&gt; files downloaded from the releases page. When installing a new version via &lt;code&gt;dmg&lt;/code&gt;, the application must be run manually the first time to accept the downloaded from the internet warning.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To avoid confusion, we recommend disabling &lt;code&gt;Predictive code completion&lt;/code&gt; under &lt;code&gt;Xcode&lt;/code&gt; &amp;gt; &lt;code&gt;Preferences&lt;/code&gt; &amp;gt; &lt;code&gt;Text Editing&lt;/code&gt; &amp;gt; &lt;code&gt;Editing&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to use Chat&lt;/h2&gt; 
&lt;p&gt;Open Copilot Chat in GitHub Copilot.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via the Xcode menu &lt;code&gt;Xcode -&amp;gt; Editor -&amp;gt; GitHub Copilot -&amp;gt; Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of Xcode Editor GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/xcode-menu_dark.png&quot; width=&quot;648&quot; /&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open via GitHub Copilot app menu &lt;code&gt;Open Chat&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Screenshot of GitHub Copilot menu item&quot; src=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Docs/Images/copilot-menu_dark.png&quot; width=&quot;244&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;How to use Code Completion&lt;/h2&gt; 
&lt;p&gt;Press &lt;code&gt;tab&lt;/code&gt; to accept the first line of a suggestion, hold &lt;code&gt;option&lt;/code&gt; to view the full suggestion, and press &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; to accept the full suggestion.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; for the full terms.&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;We follow responsible practices in accordance with our &lt;a href=&quot;https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement&quot;&gt;Privacy Statement&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To get the latest security fixes, please use the latest version of the GitHub Copilot for Xcode.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;We’d love to get your help in making GitHub Copilot better! If you have feedback or encounter any problems, please reach out on our &lt;a href=&quot;https://github.com/orgs/community/discussions/categories/copilot&quot;&gt;Feedback forum&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Thank you to @intitni for creating the original project that this is based on.&lt;/p&gt; 
&lt;p&gt;Attributions can be found under About when running the app or in &lt;a href=&quot;https://raw.githubusercontent.com/github/CopilotForXcode/main/Copilot%20for%20Xcode/Credits.rtf&quot;&gt;Credits.rtf&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>onevcat/Kingfisher</title>
      <link>https://github.com/onevcat/Kingfisher</link>
      <description>&lt;p&gt;A lightweight, pure-Swift library for downloading and caching images from the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png&quot; alt=&quot;Kingfisher&quot; title=&quot;Kingfisher&quot; width=&quot;557&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/onevcat/Kingfisher/actions?query=workflow%3Abuild&quot;&gt;&lt;img src=&quot;https://github.com/onevcat/kingfisher/workflows/build/badge.svg?branch=master&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/onevcat/Kingfisher/master/documentation/kingfisher&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-Doc-DE5C43.svg?style=flat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/Kingfisher&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/tag/onevcat/Kingfisher.svg?color=blue&amp;amp;include_prereleases=&amp;amp;sort=semver&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-black&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Kingfisher is a powerful, pure-Swift library for downloading and caching images from the web. It provides you a chance to use a pure-Swift way to work with remote images in your next app.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Asynchronous image downloading and caching.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Loading image from either &lt;code&gt;URLSession&lt;/code&gt;-based networking or local provided data.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Useful image processors and filters provided.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Multiple-layer hybrid cache for both memory and disk.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Fine control on cache behavior. Customizable expiration date and size limit.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Cancelable downloading and auto-reusing previous downloaded content to improve performance.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Independent components. Use the downloader, caching system, and image processors separately as you need.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Prefetching images and showing them from the cache to boost your app.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Extensions for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;NSImageView&lt;/code&gt;, &lt;code&gt;NSButton&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;NSTextAttachment&lt;/code&gt;, &lt;code&gt;WKInterfaceImage&lt;/code&gt;, &lt;code&gt;TVMonogramView&lt;/code&gt; and &lt;code&gt;CPListItem&lt;/code&gt; to directly set an image from a URL.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Built-in transition animation when setting images.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Customizable placeholder and indicator while loading images.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Extensible image processing and image format easily.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Low Data Mode support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; SwiftUI support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Swift 6 &amp;amp; Swift Concurrency (strict mode) prepared.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Load &amp;amp; cache for Live Photo.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Kingfisher 101&lt;/h3&gt; 
&lt;p&gt;The simplest use-case is setting an image to an image view with the &lt;code&gt;UIImageView&lt;/code&gt; extension:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Kingfisher

let url = URL(string: &quot;https://example.com/image.png&quot;)
imageView.kf.setImage(with: url)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Kingfisher will download the image from &lt;code&gt;url&lt;/code&gt;, send it to both memory cache and disk cache, and display it in &lt;code&gt;imageView&lt;/code&gt;. When you set it with the same URL later, the image will be retrieved from the cache and shown immediately.&lt;/p&gt; 
&lt;p&gt;It also works if you use SwiftUI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var body: some View {
    KFImage(URL(string: &quot;https://example.com/image.png&quot;)!)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;A More Advanced Example&lt;/h3&gt; 
&lt;p&gt;With the powerful options, you can do hard tasks with Kingfisher in a simple way. For example, the code below:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Downloads a high-resolution image.&lt;/li&gt; 
 &lt;li&gt;Downsamples it to match the image view size.&lt;/li&gt; 
 &lt;li&gt;Makes it round cornered with a given radius.&lt;/li&gt; 
 &lt;li&gt;Shows a system indicator and a placeholder image while downloading.&lt;/li&gt; 
 &lt;li&gt;When prepared, it animates the small thumbnail image with a &quot;fade in&quot; effect.&lt;/li&gt; 
 &lt;li&gt;The original large image is also cached to disk for later use, to get rid of downloading it again in a detail view.&lt;/li&gt; 
 &lt;li&gt;A console log is printed when the task finishes, either for success or failure.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let url = URL(string: &quot;https://example.com/high_resolution_image.png&quot;)
let processor = DownsamplingImageProcessor(size: imageView.bounds.size)
             |&amp;gt; RoundCornerImageProcessor(cornerRadius: 20)
imageView.kf.indicatorType = .activity
imageView.kf.setImage(
    with: url,
    placeholder: UIImage(named: &quot;placeholderImage&quot;),
    options: [
        .processor(processor),
        .scaleFactor(UIScreen.main.scale),
        .transition(.fade(1)),
        .cacheOriginalImage
    ])
{
    result in
    switch result {
    case .success(let value):
        print(&quot;Task done for: \(value.source.url?.absoluteString ?? &quot;&quot;)&quot;)
    case .failure(let error):
        print(&quot;Job failed: \(error.localizedDescription)&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is a common situation I can meet in my daily work. Think about how many lines you need to write without Kingfisher!&lt;/p&gt; 
&lt;h3&gt;Method Chaining&lt;/h3&gt; 
&lt;p&gt;If you are not a fan of the &lt;code&gt;kf&lt;/code&gt; extension, you can also prefer to use the &lt;code&gt;KF&lt;/code&gt; builder and chained the method invocations. The code below is doing the same thing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Use `kf` extension
imageView.kf.setImage(
    with: url,
    placeholder: placeholderImage,
    options: [
        .processor(processor),
        .loadDiskFileSynchronously,
        .cacheOriginalImage,
        .transition(.fade(0.25)),
        .lowDataMode(.network(lowResolutionURL))
    ],
    progressBlock: { receivedSize, totalSize in
        // Progress updated
    },
    completionHandler: { result in
        // Done
    }
)

// Use `KF` builder
KF.url(url)
  .placeholder(placeholderImage)
  .setProcessor(processor)
  .loadDiskFileSynchronously()
  .cacheMemoryOnly()
  .fade(duration: 0.25)
  .lowDataModeSource(.network(lowResolutionURL))
  .onProgress { receivedSize, totalSize in  }
  .onSuccess { result in  }
  .onFailure { error in }
  .set(to: imageView)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And even better, if later you want to switch to SwiftUI, just change the &lt;code&gt;KF&lt;/code&gt; above to &lt;code&gt;KFImage&lt;/code&gt;, and you&#39;ve done:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView: View {
    var body: some View {
        KFImage.url(url)
          .placeholder(placeholderImage)
          .setProcessor(processor)
          .loadDiskFileSynchronously()
          .cacheMemoryOnly()
          .fade(duration: 0.25)
          .lowDataModeSource(.network(lowResolutionURL))
          .onProgress { receivedSize, totalSize in  }
          .onSuccess { result in  }
          .onFailure { error in }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;h3&gt;Kingfisher 8.0&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(UIKit/AppKit) iOS 13.0+ / macOS 10.15+ / tvOS 13.0+ / watchOS 6.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;(SwiftUI) iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;Swift 5.9+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Kingfisher 7.0&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;(UIKit/AppKit) iOS 12.0+ / macOS 10.14+ / tvOS 12.0+ / watchOS 5.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;(SwiftUI) iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ / visionOS 1.0+&lt;/li&gt; 
 &lt;li&gt;Swift 5.0+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Refer to one of the following tutorials to install and use the framework:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstarteduikit&quot;&gt;UIKit Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstartedswiftui&quot;&gt;SwiftUI Tutorial&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatively, you can follow either of the methods below.&lt;/p&gt; 
&lt;h4&gt;Swift Package Manager&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;https://github.com/onevcat/Kingfisher.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Select &quot;Up to Next Major&quot; with &quot;8.0.0&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;CocoaPods&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;
platform :ios, &#39;13.0&#39;
use_frameworks!

target &#39;MyApp&#39; do
  pod &#39;Kingfisher&#39;, &#39;~&amp;gt; 8.0&#39;
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Pre-built Framework&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the release page, download the latest version of Kingfisher from the assets section.&lt;/li&gt; 
 &lt;li&gt;Drag the &lt;code&gt;Kingfisher.xcframework&lt;/code&gt; into your project and add it to the target (usually the app target).&lt;/li&gt; 
 &lt;li&gt;Select your target, in the &quot;General&quot; Tab, find the &quot;Frameworks, Libraries, and Embedded Content&quot; section, set the &lt;code&gt;Embed Without Signing&lt;/code&gt; to Kingfisher.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Check the documentation and tutorials:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher&quot;&gt;Documentation Home&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/gettingstarted&quot;&gt;Getting Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstarteduikit&quot;&gt;UIKit Tutorial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/tutorials/kingfisher/gettingstartedswiftui&quot;&gt;SwiftUI Tutorial&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks&quot;&gt;Common Tasks - General&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_cache&quot;&gt;Common Tasks - Cache&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_downloader&quot;&gt;Common Tasks - Downloader&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/commontasks_processor&quot;&gt;Common tasks - Processor&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Migrating&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiftpackageindex.com/onevcat/kingfisher/master/documentation/kingfisher/migration-to-8&quot;&gt;Kingfisher 8.0 Migration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&quot;&gt;Kingfisher 7.0 Migration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using an even earlier version, see the guides below to know the steps for migrating.&lt;/p&gt; 
&lt;h2&gt;Other&lt;/h2&gt; 
&lt;h3&gt;Future of Kingfisher&lt;/h3&gt; 
&lt;p&gt;I want to keep Kingfisher lightweight. This framework focuses on providing a simple solution for downloading and caching images. This doesn’t mean the framework can’t be improved. Kingfisher is far from perfect, so necessary and useful updates will be made to make it better.&lt;/p&gt; 
&lt;h3&gt;Developments and Tests&lt;/h3&gt; 
&lt;p&gt;Any contributing and pull requests are warmly welcome. However, before you plan to implement some features or try to fix an uncertain issue, it is recommended to open a discussion first. It would be appreciated if your pull requests could build with all tests green. :)&lt;/p&gt; 
&lt;h3&gt;About the logo&lt;/h3&gt; 
&lt;p&gt;The logo of Kingfisher is inspired by &lt;a href=&quot;http://en.wikipedia.org/wiki/Tangram&quot;&gt;Tangram (七巧板)&lt;/a&gt;, a dissection puzzle consisting of seven flat shapes from China. I believe she&#39;s a kingfisher bird instead of a swift, but someone insists that she is a pigeon. I guess I should give her a name. Hi, guys, do you have any suggestions?&lt;/p&gt; 
&lt;h3&gt;Contact&lt;/h3&gt; 
&lt;p&gt;Follow and contact me on &lt;a href=&quot;http://twitter.com/onevcat&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;http://weibo.com/onevcat&quot;&gt;Sina Weibo&lt;/a&gt;. If you find an issue, &lt;a href=&quot;https://github.com/onevcat/Kingfisher/issues/new&quot;&gt;open a ticket&lt;/a&gt;. Pull requests are warmly welcome as well.&lt;/p&gt; 
&lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; 
&lt;p&gt;Open-source projects cannot live long without your help. If you find Kingfisher to be useful, please consider supporting this project by becoming a sponsor. Your user icon or company logo shows up &lt;a href=&quot;https://onevcat.com/tabs/about/&quot;&gt;on my blog&lt;/a&gt; with a link to your home page.&lt;/p&gt; 
&lt;p&gt;Become a sponsor through &lt;a href=&quot;https://github.com/sponsors/onevcat&quot;&gt;GitHub Sponsors&lt;/a&gt;. &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;Special thanks to:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://img.ly/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png&quot; alt=&quot;imgly&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.emergetools.com&quot;&gt;&lt;img src=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/1019875/254794187-d44f6f50-993f-42e3-b79c-960f69c4adc1.png&quot; alt=&quot;emergetools&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;Kingfisher is released under the MIT license. See LICENSE for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swinject/Swinject</title>
      <link>https://github.com/Swinject/Swinject</link>
      <description>&lt;p&gt;Dependency injection framework for Swift with iOS/macOS/Linux&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://avatars0.githubusercontent.com/u/13637225?v=3&amp;amp;s=600&quot; width=&quot;33%&quot; /&gt; &lt;/p&gt; 
&lt;h1&gt;Swinject&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/1ucas/Swinject/actions/workflows/Project%20Testing.yml/badge.svg?branch=master&quot; alt=&quot;Github Actions&quot; /&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoapods.org/pods/Swinject&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Swinject.svg?style=flat&quot; alt=&quot;CocoaPods Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoapods.org/pods/Swinject&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/Swinject.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoapods.org/pods/Swinject&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg?sanitize=true&quot; alt=&quot;Platforms&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/swift&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-4.2--5.4-F16D39.svg?style=flat&quot; alt=&quot;Swift Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://houndci.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&quot; alt=&quot;Reviewed by Hound&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Swinject is a lightweight &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; framework for Swift.&lt;/p&gt; 
&lt;p&gt;Dependency injection (DI) is a software design pattern that implements Inversion of Control (IoC) for resolving dependencies. In the pattern, Swinject helps your app split into loosely-coupled components, which can be developed, tested and maintained more easily. Swinject is powered by the Swift generic type system and first class functions to define dependencies of your app simply and fluently.&lt;/p&gt; 
&lt;p&gt;Swinject is maintained by the &lt;a href=&quot;https://github.com/Faire?view_as=public&quot;&gt;Faire Wholesale Inc.&lt;/a&gt; mobile platform team.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/README.md#user-content-pure-swift-type-support&quot;&gt;Pure Swift Type Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/DIContainer.md#registration-with-arguments-to-di-container&quot;&gt;Injection with Arguments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/InjectionPatterns.md&quot;&gt;Initializer/Property/Method Injections&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/InjectionPatterns.md#user-content-initialization-callback&quot;&gt;Initialization Callback&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/CircularDependencies.md&quot;&gt;Circular Dependency Injection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ObjectScopes.md&quot;&gt;Object Scopes as None (Transient), Graph, Container (Singleton) and Hierarchy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support of both Reference and &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Misc.md#value-types&quot;&gt;Value Types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Misc.md#self-registration-self-binding&quot;&gt;Self-registration (Self-binding)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ContainerHierarchy.md&quot;&gt;Container Hierarchy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ThreadSafety.md&quot;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Assembler.md&quot;&gt;Modular Components&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Extensions&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Swinject/SwinjectPropertyLoader&quot;&gt;SwinjectPropertyLoader&lt;/a&gt;&lt;/strong&gt;: Loading property values from resources.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Swinject/SwinjectStoryboard&quot;&gt;SwinjectStoryboard&lt;/a&gt;&lt;/strong&gt;: Automatic dependency injection via Storyboard.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Swinject/Swinject-CodeGen&quot;&gt;Swinject-CodeGen&lt;/a&gt;&lt;/strong&gt;: Type-safe code generation of &lt;code&gt;Container&lt;/code&gt; from a CSV/YAML file defining dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Swinject/SwinjectAutoregistration&quot;&gt;SwinjectAutoregistration&lt;/a&gt;&lt;/strong&gt;: Automatic registration of services by leveraging the Swift Generics.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 11.0+ / Mac OS X 10.13+ / watchOS 4.0+ / tvOS 11.0+&lt;/li&gt; 
 &lt;li&gt;Xcode 14.3+&lt;/li&gt; 
 &lt;li&gt;Swift 4.2+&lt;/li&gt; 
 &lt;li&gt;Carthage 0.18+ (if you use)&lt;/li&gt; 
 &lt;li&gt;CocoaPods 1.1.1+ (if you use)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Swinject is available through &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt;, &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;, or &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;To install Swinject with Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;github &quot;Swinject/Swinject&quot;

# Uncomment if you use SwinjectStoryboard
# github &quot;Swinject/SwinjectStoryboard&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run &lt;code&gt;carthage update --no-use-binaries&lt;/code&gt; command or just &lt;code&gt;carthage update&lt;/code&gt;. For details of the installation and usage of Carthage, visit &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;its project page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;To install Swinject with CocoaPods, add the following lines to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;
platform :ios, &#39;11.0&#39; # or platform :osx, &#39;10.13&#39; if your target is OS X.
use_frameworks!

pod &#39;Swinject&#39;

# Uncomment if you use SwinjectStoryboard
# pod &#39;SwinjectStoryboard&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt; command. For details of the installation and usage of CocoaPods, visit &lt;a href=&quot;https://cocoapods.org&quot;&gt;its official website&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;in &lt;code&gt;Package.swift&lt;/code&gt; add the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    // Dependencies declare other packages that this package depends on.
    // .package(url: /* package url */, from: &quot;1.0.0&quot;),
    .package(url: &quot;https://github.com/Swinject/Swinject.git&quot;, from: &quot;2.8.0&quot;)
],
targets: [
    .target(
        name: &quot;MyProject&quot;,
        dependencies: [..., &quot;Swinject&quot;]
    )
    ...
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation&quot;&gt;Technical documents&lt;/a&gt; including patterns of dependency injection and examples.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://cocoadocs.org/docsets/Swinject/&quot;&gt;API reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;p&gt;First, register a service and component pair to a &lt;code&gt;Container&lt;/code&gt;, where the component is created by the registered closure as a factory. In this example, &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;PetOwner&lt;/code&gt; are component classes implementing &lt;code&gt;Animal&lt;/code&gt; and &lt;code&gt;Person&lt;/code&gt; service protocols, respectively.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let container = Container()
container.register(Animal.self) { _ in Cat(name: &quot;Mimi&quot;) }
container.register(Person.self) { r in
    PetOwner(pet: r.resolve(Animal.self)!)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then get an instance of a service from the container. The person is resolved to a pet owner, and playing with the cat named Mimi!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let person = container.resolve(Person.self)!
person.play() // prints &quot;I&#39;m playing with Mimi.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where definitions of the protocols and classes are&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol Animal {
    var name: String? { get }
}

class Cat: Animal {
    let name: String?

    init(name: String?) {
        self.name = name
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;protocol Person {
    func play()
}

class PetOwner: Person {
    let pet: Animal

    init(pet: Animal) {
        self.pet = pet
    }

    func play() {
        let name = pet.name ?? &quot;someone&quot;
        print(&quot;I&#39;m playing with \(name).&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that the &lt;code&gt;pet&lt;/code&gt; of &lt;code&gt;PetOwner&lt;/code&gt; is automatically set as the instance of &lt;code&gt;Cat&lt;/code&gt; when &lt;code&gt;Person&lt;/code&gt; is resolved to the instance of &lt;code&gt;PetOwner&lt;/code&gt;. If a container already set up is given, you do not have to care what are the actual types of the services and how they are created with their dependency.&lt;/p&gt; 
&lt;h2&gt;Where to Register Services&lt;/h2&gt; 
&lt;p&gt;Services must be registered to a container before they are used. The typical registration approach will differ depending upon whether you are using &lt;code&gt;SwinjectStoryboard&lt;/code&gt; or not.&lt;/p&gt; 
&lt;p&gt;The following view controller class is used in addition to the protocols and classes above in the examples below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class PersonViewController: UIViewController {
    var person: Person?
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;With SwinjectStoryboard&lt;/h3&gt; 
&lt;p&gt;Import SwinjectStoryboard at the top of your swift source file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import SwinjectStoryboard
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Services should be registered in an extension of &lt;code&gt;SwinjectStoryboard&lt;/code&gt; if you use &lt;code&gt;SwinjectStoryboard&lt;/code&gt;. Refer to &lt;a href=&quot;https://github.com/Swinject/SwinjectStoryboard&quot;&gt;the project page of SwinjectStoryboard&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension SwinjectStoryboard {
    @objc class func setup() {
        defaultContainer.register(Animal.self) { _ in Cat(name: &quot;Mimi&quot;) }
        defaultContainer.register(Person.self) { r in
            PetOwner(pet: r.resolve(Animal.self)!)
        }
        defaultContainer.register(PersonViewController.self) { r in
            let controller = PersonViewController()
            controller.person = r.resolve(Person.self)
            return controller
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Without SwinjectStoryboard&lt;/h3&gt; 
&lt;p&gt;If you do not use &lt;code&gt;SwinjectStoryboard&lt;/code&gt; to instantiate view controllers, services should be registered to a container in your application&#39;s &lt;code&gt;AppDelegate&lt;/code&gt;. Registering before exiting &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; will ensure that the services are setup appropriately before they are used.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    let container: Container = {
        let container = Container()
        container.register(Animal.self) { _ in Cat(name: &quot;Mimi&quot;) }
        container.register(Person.self) { r in
            PetOwner(pet: r.resolve(Animal.self)!)
        }
        container.register(PersonViewController.self) { r in
            let controller = PersonViewController()
            controller.person = r.resolve(Person.self)
            return controller
        }
        return container
    }()

    func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {

        // Instantiate a window.
        let window = UIWindow(frame: UIScreen.main.bounds)
        window.makeKeyAndVisible()
        self.window = window

        // Instantiate the root view controller with dependencies injected by the container.
        window.rootViewController = container.resolve(PersonViewController.self)

        return true
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that the example uses a convenience initializer taking a closure to register services to the new instance of &lt;code&gt;Container&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Play in Playground!&lt;/h2&gt; 
&lt;p&gt;The project contains &lt;code&gt;Sample-iOS.playground&lt;/code&gt; to demonstrate the features of Swinject. Download or clone the project, run the playground, modify it, and play with it to learn Swinject.&lt;/p&gt; 
&lt;p&gt;To run the playground in the project, first build the project, then select &lt;code&gt;Editor &amp;gt; Execute Playground&lt;/code&gt; menu in Xcode.&lt;/p&gt; 
&lt;h2&gt;Example Apps&lt;/h2&gt; 
&lt;p&gt;Some example apps using Swinject can be found on &lt;a href=&quot;https://github.com/search?o=desc&amp;amp;q=swinject&amp;amp;s=updated&amp;amp;type=Repositories&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Blog Posts&lt;/h2&gt; 
&lt;p&gt;The following blog posts introduce the concept of dependency injection and Swinject.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.raywenderlich.com/14223279-dependency-injection-tutorial-for-ios-getting-started&quot;&gt;Dependency Injection Tutorial for iOS: Getting Started&lt;/a&gt; &lt;em&gt;by &lt;a href=&quot;https://www.raywenderlich.com/u/galata&quot;&gt;Irina Galata&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.raywenderlich.com/17-swinject-tutorial-for-ios-getting-started&quot;&gt;Swinject Tutorial for iOS: Getting Started&lt;/a&gt; &lt;em&gt;by &lt;a href=&quot;https://www.raywenderlich.com/u/gemmakbarlow&quot;&gt;Gemma Barlow&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/flawless-app-stories/ios-dependency-injection-using-swinject-9c4ceff99e41&quot;&gt;iOS Dependency Injection Using Swinject&lt;/a&gt; &lt;em&gt;by &lt;a href=&quot;https://ali-akhtar.medium.com&quot;&gt;Ali Akhtar&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/its-tinkoff/di-in-ios-complete-guide-cd76a079d2d&quot;&gt;DI in iOS: Complete guide&lt;/a&gt; &lt;em&gt;by &lt;a href=&quot;https://medium.com/@batrakov.vitaly&quot;&gt;Vitaly Batrakov&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thanks the authors!&lt;/p&gt; 
&lt;h2&gt;Contribution Guide&lt;/h2&gt; 
&lt;p&gt;A guide to &lt;a href=&quot;https://github.com/Swinject/Swinject/issues&quot;&gt;submit issues&lt;/a&gt;, to ask general questions, or to &lt;a href=&quot;https://github.com/Swinject/Swinject/pulls&quot;&gt;open pull requests&lt;/a&gt; is &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/CONTRIBUTING.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Question?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/tagged/swinject&quot;&gt;Stack Overflow&lt;/a&gt; we are trying to monitor questions tagged &lt;code&gt;swinject&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;The DI container features of Swinject are inspired by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://ninject.org&quot;&gt;Ninject&lt;/a&gt; - &lt;a href=&quot;https://github.com/enkari&quot;&gt;Enkari, Ltd&lt;/a&gt; and &lt;a href=&quot;https://github.com/ninject/Ninject/graphs/contributors&quot;&gt;the Ninject project contributors&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://autofac.org&quot;&gt;Autofac&lt;/a&gt; - &lt;a href=&quot;https://github.com/autofac/Autofac&quot;&gt;Autofac Project&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;and highly inspired by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kzu/funq&quot;&gt;Funq&lt;/a&gt; - &lt;a href=&quot;https://github.com/kzu&quot;&gt;Daniel Cazzulino&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT license. See the &lt;a href=&quot;https://raw.githubusercontent.com/Swinject/Swinject/master/LICENSE&quot;&gt;LICENSE file&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Alamofire/Alamofire</title>
      <link>https://github.com/Alamofire/Alamofire</link>
      <description>&lt;p&gt;Elegant HTTP Networking in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/AlamofireLogo.png&quot; alt=&quot;Alamofire: Elegant Networking in Swift&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://img.shields.io/badge/Swift-5.9_5.10_6.0-Orange?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-5.9_5.10_6.0-orange?style=flat-square&quot; alt=&quot;Swift&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_vision_OS_Linux_Windows_Android-Green?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_visionOS_Linux_Windows_Android-yellowgreen?style=flat-square&quot; alt=&quot;Platforms&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/cocoapods/v/Alamofire.svg&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat-square&quot; alt=&quot;CocoaPods Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat-square&quot; alt=&quot;Carthage Compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&quot; alt=&quot;Swift Package Manager&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire/37&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift_Forums-Alamofire-orange?style=flat-square&quot; alt=&quot;Swift Forums&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Alamofire is an HTTP networking library written in Swift.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#component-libraries&quot;&gt;Component Libraries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#migration-guides&quot;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#communication&quot;&gt;Communication&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#using-alamofire&quot;&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#introduction&quot;&gt;&lt;strong&gt;Introduction -&lt;/strong&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#making-requests&quot;&gt;Making Requests&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-handling&quot;&gt;Response Handling&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-validation&quot;&gt;Response Validation&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-caching&quot;&gt;Response Caching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;HTTP -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-methods&quot;&gt;HTTP Methods&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md##request-parameters-and-parameter-encoders&quot;&gt;Parameters and Parameter Encoder&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-headers&quot;&gt;HTTP Headers&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#authentication&quot;&gt;Authentication&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Large Data -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#downloading-data-to-a-file&quot;&gt;Downloading Data to a File&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#uploading-data-to-a-server&quot;&gt;Uploading Data to a Server&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Tools -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#statistical-metrics&quot;&gt;Statistical Metrics&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#curl-command-output&quot;&gt;cURL Command Output&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md&quot;&gt;Advanced Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;URL Session -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#session&quot;&gt;Session Manager&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#sessiondelegate&quot;&gt;Session Delegate&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#request&quot;&gt;Request&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Routing -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#routing-requests&quot;&gt;Routing Requests&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#adapting-and-retrying-requests-with-requestinterceptor&quot;&gt;Adapting and Retrying Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Model Objects -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#customizing-response-handlers&quot;&gt;Custom Response Handlers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Advanced Concurrency -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-swift-concurrency&quot;&gt;Swift Concurrency&lt;/a&gt; and &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-combine&quot;&gt;Combine&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Connection -&lt;/strong&gt; &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#security&quot;&gt;Security&lt;/a&gt;, &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#network-reachability&quot;&gt;Network Reachability&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#open-radars&quot;&gt;Open Radars&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#donations&quot;&gt;Donations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Chainable Request / Response Methods&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Swift Concurrency Support Back to iOS 13, macOS 10.15, tvOS 13, and watchOS 6.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Combine Support&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; URL / JSON Parameter Encoding&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Upload File / Data / Stream / MultipartFormData&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Download File using Request or Resume Data&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Authentication with &lt;code&gt;URLCredential&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; HTTP Response Validation&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Upload and Download Progress Closures with Progress&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; cURL Command Output&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Dynamically Adapt and Retry Requests&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; TLS Certificate and Public Key Pinning&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Network Reachability&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Comprehensive Unit and Integration Test Coverage&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; &lt;a href=&quot;https://alamofire.github.io/Alamofire&quot;&gt;Complete Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Write Requests Fast!&lt;/h2&gt; 
&lt;p&gt;Alamofire&#39;s compact syntax and extensive feature set allow requests with powerful features like automatic retry to be written in just a few lines of code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Automatic String to URL conversion, Swift concurrency support, and automatic retry.
let response = await AF.request(&quot;https://httpbin.org/get&quot;, interceptor: .retryPolicy)
                       // Automatic HTTP Basic Auth.
                       .authenticate(username: &quot;user&quot;, password: &quot;pass&quot;)
                       // Caching customization.
                       .cacheResponse(using: .cache)
                       // Redirect customization.
                       .redirect(using: .follow)
                       // Validate response code and Content-Type.
                       .validate()
                       // Produce a cURL command for the request.
                       .cURLDescription { description in
                         print(description)
                       }
                       // Automatic Decodable support with background parsing.
                       .serializingDecodable(DecodableType.self)
                       // Await the full response with metrics and a parsed body.
                       .response
// Detailed response description for easy debugging.
debugPrint(response)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Component Libraries&lt;/h2&gt; 
&lt;p&gt;In order to keep Alamofire focused specifically on core networking implementations, additional component libraries have been created by the &lt;a href=&quot;https://github.com/Alamofire/Foundation&quot;&gt;Alamofire Software Foundation&lt;/a&gt; to bring additional functionality to the Alamofire ecosystem.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/AlamofireImage&quot;&gt;AlamofireImage&lt;/a&gt; - An image library including image response serializers, &lt;code&gt;UIImage&lt;/code&gt; and &lt;code&gt;UIImageView&lt;/code&gt; extensions, custom image filters, an auto-purging in-memory cache, and a priority-based image downloading system.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/AlamofireNetworkActivityIndicator&quot;&gt;AlamofireNetworkActivityIndicator&lt;/a&gt; - Controls the visibility of the network activity indicator on iOS using Alamofire. It contains configurable delay timers to help mitigate flicker and can support &lt;code&gt;URLSession&lt;/code&gt; instances not managed by Alamofire.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Minimum Swift Version&lt;/th&gt; 
   &lt;th&gt;Installation&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS 10.0+ / macOS 10.12+ / tvOS 10.0+ / watchOS 3.0+&lt;/td&gt; 
   &lt;td&gt;5.9 / Xcode 15.0&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#cocoapods&quot;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#carthage&quot;&gt;Carthage&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#manually&quot;&gt;Manual&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Fully Tested&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;Latest Only&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Building But Unsupported&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Known Issues on Linux and Windows&lt;/h4&gt; 
&lt;p&gt;Alamofire builds on Linux, Windows, and Android but there are missing features and many issues in the underlying &lt;code&gt;swift-corelibs-foundation&lt;/code&gt; that prevent full functionality and may cause crashes. These include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ServerTrustManager&lt;/code&gt; and associated certificate functionality is unavailable, so there is no certificate pinning and no client certificate support.&lt;/li&gt; 
 &lt;li&gt;Various methods of HTTP authentication may crash, including HTTP Basic and HTTP Digest. Crashes may occur if responses contain server challenges.&lt;/li&gt; 
 &lt;li&gt;Cache control through &lt;code&gt;CachedResponseHandler&lt;/code&gt; and associated APIs is unavailable, as the underlying delegate methods aren&#39;t called.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; are never gathered.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;WebSocketRequest&lt;/code&gt; is not available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Due to these issues, Alamofire is unsupported on Linux, Windows, and Android. Please report any crashes to the &lt;a href=&quot;https://bugs.swift.org&quot;&gt;Swift bug reporter&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Migration Guides&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%205.0%20Migration%20Guide.md&quot;&gt;Alamofire 5.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%204.0%20Migration%20Guide.md&quot;&gt;Alamofire 4.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%203.0%20Migration%20Guide.md&quot;&gt;Alamofire 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%202.0%20Migration%20Guide.md&quot;&gt;Alamofire 2.0 Migration Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you &lt;strong&gt;need help with making network requests&lt;/strong&gt; using Alamofire, use &lt;a href=&quot;https://stackoverflow.com/questions/tagged/alamofire&quot;&gt;Stack Overflow&lt;/a&gt; and tag &lt;code&gt;alamofire&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;If you need to &lt;strong&gt;find or understand an API&lt;/strong&gt;, check &lt;a href=&quot;http://alamofire.github.io/Alamofire/&quot;&gt;our documentation&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url_loading_system&quot;&gt;Apple&#39;s documentation for &lt;code&gt;URLSession&lt;/code&gt;&lt;/a&gt;, on top of which Alamofire is built.&lt;/li&gt; 
 &lt;li&gt;If you need &lt;strong&gt;help with an Alamofire feature&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss Alamofire best practices&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss a feature request&lt;/strong&gt;, use &lt;a href=&quot;https://forums.swift.org/c/related-projects/alamofire&quot;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue here on GitHub and follow the guide. The more detail the better!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; 
&lt;p&gt;Once you have your Swift package set up, adding Alamofire as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt; or the Package list in Xcode.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/Alamofire/Alamofire.git&quot;, .upToNextMajor(from: &quot;5.10.0&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Normally you&#39;ll want to depend on the &lt;code&gt;Alamofire&lt;/code&gt; target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.product(name: &quot;Alamofire&quot;, package: &quot;Alamofire&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But if you want to force Alamofire to be dynamically linked (do not do this unless you&#39;re sure you need it), you can depend on the &lt;code&gt;AlamofireDynamic&lt;/code&gt; target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.product(name: &quot;AlamofireDynamic&quot;, package: &quot;Alamofire&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CocoaPods&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate Alamofire into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;Alamofire&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Carthage&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate Alamofire into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ogdl&quot;&gt;github &quot;Alamofire/Alamofire&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manually&lt;/h3&gt; 
&lt;p&gt;If you prefer not to use any of the aforementioned dependency managers, you can integrate Alamofire into your project manually.&lt;/p&gt; 
&lt;h4&gt;Embedded Framework&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &quot;if&quot; your project is not initialized as a git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add Alamofire as a git &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;submodule&lt;/a&gt; by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;It should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; in the Project Navigator and verify the deployment target matches that of your application target.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &quot;Targets&quot; heading in the sidebar.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In the tab bar at the top of that window, open the &quot;General&quot; panel.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &quot;Embedded Binaries&quot; section.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt;, or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;The &lt;code&gt;Alamofire.framework&lt;/code&gt; is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before contributing to Alamofire, please read the instructions detailed in our &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Open Radars&lt;/h2&gt; 
&lt;p&gt;The following radars have some effect on the current implementation of Alamofire.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.openradar.me/radar?id=5517037090635776&quot;&gt;&lt;code&gt;rdar://21349340&lt;/code&gt;&lt;/a&gt; - Compiler throwing warning due to toll-free bridging issue in the test case&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdar://26870455&lt;/code&gt; - Background URL Session Configurations do not work in the simulator&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rdar://26849668&lt;/code&gt; - Some URLProtocol APIs do not properly handle &lt;code&gt;URLRequest&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resolved Radars&lt;/h2&gt; 
&lt;p&gt;The following radars have been resolved over time after being filed against the Alamofire project.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.openradar.me/radar?id=5010235949318144&quot;&gt;&lt;code&gt;rdar://26761490&lt;/code&gt;&lt;/a&gt; - Swift string interpolation causing memory leak with common usage. 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): 9/1/17 in Xcode 9 beta 6.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://openradar.appspot.com/radar?id=4942308441063424&quot;&gt;&lt;code&gt;rdar://36082113&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; failing to link on watchOS 3.0+ 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): Just add &lt;code&gt;CFNetwork&lt;/code&gt; to your linked frameworks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FB7624529&lt;/code&gt; - &lt;code&gt;urlSession(_:task:didFinishCollecting:)&lt;/code&gt; never called on watchOS 
  &lt;ul&gt; 
   &lt;li&gt;(Resolved): Metrics now collected on watchOS 7+.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;What&#39;s the origin of the name Alamofire?&lt;/h3&gt; 
&lt;p&gt;Alamofire is named after the &lt;a href=&quot;https://aggie-horticulture.tamu.edu/wildseed/alamofire.html&quot;&gt;Alamo Fire flower&lt;/a&gt;, a hybrid variant of the Bluebonnet, the official state flower of Texas.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Alamofire is owned and maintained by the &lt;a href=&quot;http://alamofire.org&quot;&gt;Alamofire Software Foundation&lt;/a&gt;. You can follow them on Twitter at &lt;a href=&quot;https://twitter.com/AlamofireSF&quot;&gt;@AlamofireSF&lt;/a&gt; for project updates and releases.&lt;/p&gt; 
&lt;h3&gt;Security Disclosure&lt;/h3&gt; 
&lt;p&gt;If you believe you have identified a security vulnerability with Alamofire, you should report it as soon as possible via email to &lt;a href=&quot;mailto:security@alamofire.org&quot;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/Alamofire/Foundation#members&quot;&gt;ASF&lt;/a&gt; is looking to raise money to officially stay registered as a federal non-profit organization. Registering will allow Foundation members to gain some legal protections and also allow us to put donations to use, tax-free. Sponsoring the ASF will enable us to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pay our yearly legal fees to keep the non-profit in good status&lt;/li&gt; 
 &lt;li&gt;Pay for our mail servers to help us stay on top of all questions and security issues&lt;/li&gt; 
 &lt;li&gt;Potentially fund test servers to make it easier for us to test the edge cases&lt;/li&gt; 
 &lt;li&gt;Potentially fund developers to work on one of our projects full-time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The community adoption of the ASF libraries has been amazing. We are greatly humbled by your enthusiasm around the projects and want to continue to do everything we can to move the needle forward. With your continued support, the ASF will be able to improve its reach and also provide better legal safety for the core members. If you use any of our libraries for work, see if your employers would be interested in donating. Any amount you can donate, whether once or monthly, to help us reach our goal would be greatly appreciated.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/Alamofire&quot;&gt;Sponsor Alamofire&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Supporters&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://macstadium.com&quot;&gt;MacStadium&lt;/a&gt; provides Alamofire with a free, hosted Mac mini.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/MacStadiumLogo.png&quot; alt=&quot;Powered by MacStadium&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Alamofire is released under the MIT license. &lt;a href=&quot;https://github.com/Alamofire/Alamofire/raw/master/LICENSE&quot;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beingpax/VoiceInk</title>
      <link>https://github.com/Beingpax/VoiceInk</link>
      <description>&lt;p&gt;Voice-to-text app for macOS to transcribe what you say to text almost instantly&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/VoiceInk/Assets.xcassets/AppIcon.appiconset/256-mac.png&quot; width=&quot;180&quot; height=&quot;180&quot; /&gt; 
 &lt;h1&gt;VoiceInk&lt;/h1&gt; 
 &lt;p&gt;Voice to text app for macOS to transcribe what you say to text almost instantly&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/platform-macOS%2014.0%2B-brightgreen&quot; alt=&quot;Platform&quot; /&gt; &lt;a href=&quot;https://github.com/Beingpax/VoiceInk/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/Beingpax/VoiceInk&quot; alt=&quot;GitHub release (latest by date)&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/Beingpax/VoiceInk/total&quot; alt=&quot;GitHub all releases&quot; /&gt; &lt;img src=&quot;https://img.shields.io/github/stars/Beingpax/VoiceInk?style=social&quot; alt=&quot;GitHub stars&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;Website&lt;/a&gt; • &lt;a href=&quot;https://www.youtube.com/@tryvoiceink&quot;&gt;YouTube&lt;/a&gt; &lt;/p&gt; 
 &lt;a href=&quot;https://tryvoiceink.com&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Download%20Now-Latest%20Version-blue?style=for-the-badge&amp;amp;logo=apple&quot; alt=&quot;Download VoiceInk&quot; width=&quot;250&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;VoiceInk is a native macOS application that transcribes what you say to text almost instantly. You can find all the information and download the app from &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/12367379-83e7-48a6-b52c-4488a6a04bba&quot; alt=&quot;VoiceInk Mac App&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;After dedicating the past 5 months to developing this app, I&#39;ve decided to open source it for the greater good.&lt;/p&gt; 
&lt;p&gt;My goal is to make it &lt;strong&gt;the most efficient and privacy-focused voice-to-text solution for macOS&lt;/strong&gt; that is a joy to use. While the source code is now open for experienced developers to build and contribute, purchasing a license helps support continued development and gives you access to automatic updates, priority support, and upcoming features.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎙️ &lt;strong&gt;Accurate Transcription&lt;/strong&gt;: Local AI models that transcribe your voice to text with 99% accuracy, almost instantly&lt;/li&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Privacy First&lt;/strong&gt;: 100% offline processing ensures your data never leaves your device&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Power Mode&lt;/strong&gt;: Intelligent app detection automatically applies your perfect pre-configured settings based on the app/ URL you&#39;re on&lt;/li&gt; 
 &lt;li&gt;🧠 &lt;strong&gt;Context Aware&lt;/strong&gt;: Smart AI that understands your screen content and adapts to the context&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Global Shortcuts&lt;/strong&gt;: Configurable keyboard shortcuts for quick recording and push-to-talk functionality&lt;/li&gt; 
 &lt;li&gt;📝 &lt;strong&gt;Personal Dictionary&lt;/strong&gt;: Train the AI to understand your unique terminology with custom words, industry terms, and smart text replacements&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Smart Modes&lt;/strong&gt;: Instantly switch between AI-powered modes optimized for different writing styles and contexts&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;strong&gt;AI Assistant&lt;/strong&gt;: Built-in voice assistant mode for a quick chatGPT like conversational assistant&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;h3&gt;Download&lt;/h3&gt; 
&lt;p&gt;Get the latest version with a free trial from &lt;a href=&quot;https://tryvoiceink.com&quot;&gt;tryvoiceink.com&lt;/a&gt;. Your purchase helps me work on VoiceInk full-time and continuously improve it with new features and updates.&lt;/p&gt; 
&lt;h4&gt;Homebrew&lt;/h4&gt; 
&lt;p&gt;Alternatively, you can install VoiceInk via &lt;code&gt;brew&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;brew install --cask voiceink
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build from Source&lt;/h3&gt; 
&lt;p&gt;As an open-source project, you can build VoiceInk yourself by following the instructions in &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;BUILDING.md&lt;/a&gt;. However, the compiled version includes additional benefits like automatic updates, priority support via Discord and email, and helps fund ongoing development.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS 14.0 or later&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;Building from Source&lt;/a&gt; - Detailed instructions for building the project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CONTRIBUTING.md&quot;&gt;Contributing Guidelines&lt;/a&gt; - How to contribute to VoiceInk&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; - Our community standards&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! However, please note that all contributions should align with the project&#39;s goals and vision. Before starting work on any feature or fix:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read our &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/CONTRIBUTING.md&quot;&gt;Contributing Guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open an issue to discuss your proposed changes&lt;/li&gt; 
 &lt;li&gt;Wait for maintainer feedback&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For build instructions, see our &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/BUILDING.md&quot;&gt;Building Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the GNU General Public License v3.0 - see the &lt;a href=&quot;https://raw.githubusercontent.com/Beingpax/VoiceInk/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you encounter any issues or have questions, please:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check the existing issues in the GitHub repository&lt;/li&gt; 
 &lt;li&gt;Create a new issue if your problem isn&#39;t already reported&lt;/li&gt; 
 &lt;li&gt;Provide as much detail as possible about your environment and the problem&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;h3&gt;Core Technology&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggerganov/whisper.cpp&quot;&gt;whisper.cpp&lt;/a&gt; - High-performance inference of OpenAI&#39;s Whisper model&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FluidInference/FluidAudio&quot;&gt;FluidAudio&lt;/a&gt; - Used for Parakeet model implementation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Essential Dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sparkle-project/Sparkle&quot;&gt;Sparkle&lt;/a&gt; - Keeping VoiceInk up to date&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/KeyboardShortcuts&quot;&gt;KeyboardShortcuts&lt;/a&gt; - User-customizable keyboard shortcuts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/LaunchAtLogin&quot;&gt;LaunchAtLogin&lt;/a&gt; - Launch at login functionality&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ejbills/mediaremote-adapter&quot;&gt;MediaRemoteAdapter&lt;/a&gt; - Media playback control during recording&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marmelroy/Zip&quot;&gt;Zip&lt;/a&gt; - File compression and decompression utilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ❤️ by Pax&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ChartsOrg/Charts</title>
      <link>https://github.com/ChartsOrg/Charts</link>
      <description>&lt;p&gt;Beautiful charts for iOS/tvOS/OSX! The Apple side of the crossplatform MPAndroidChart.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Version 4.0.0&lt;/strong&gt;, synced to &lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart/commit/f6a398b&quot;&gt;MPAndroidChart #f6a398b&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/danielgindi/Charts/master/Assets/feature_graphic.png&quot; alt=&quot;alt tag&quot; /&gt; &lt;img src=&quot;https://img.shields.io/cocoapods/p/Charts.svg?sanitize=true&quot; alt=&quot;Supported Platforms&quot; /&gt; &lt;a href=&quot;https://github.com/danielgindi/Charts/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/danielgindi/Charts.svg?sanitize=true&quot; alt=&quot;Releases&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://cocoapods.org/pods/charts&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Charts.svg?sanitize=true&quot; alt=&quot;Latest pod release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/danielgindi/Charts&quot;&gt;&lt;img src=&quot;https://travis-ci.org/danielgindi/Charts.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/danielgindi/Charts&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/danielgindi/Charts/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/danielgindi/Charts?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/danielgindi/Charts.svg?sanitize=true&quot; alt=&quot;Join the chat at https://gitter.im/danielgindi/Charts&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Just a heads up: Charts 5.0 has some breaking changes. Charts has now been renamed DGCharts to prevent conflicts with Apple&#39;s new Swift Charts. Please read &lt;a href=&quot;https://github.com/danielgindi/Charts/releases/tag/5.0.0&quot;&gt;the release/migration notes&lt;/a&gt;.&lt;/h3&gt; 
&lt;h3&gt;One more heads up: As Swift evolves, if you are not using the latest Swift compiler, you shouldn&#39;t check out the master branch. Instead, you should go to the release page and pick up whatever suits you.&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode 14 / Swift 5.7 (master branch)&lt;/li&gt; 
 &lt;li&gt;iOS &amp;gt;= 12.0 (Use as an &lt;strong&gt;Embedded&lt;/strong&gt; Framework)&lt;/li&gt; 
 &lt;li&gt;tvOS &amp;gt;= 12.0&lt;/li&gt; 
 &lt;li&gt;macOS &amp;gt;= 10.13&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Okay so there&#39;s this beautiful library called &lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart&quot;&gt;MPAndroidChart&lt;/a&gt; by &lt;a href=&quot;https://www.linkedin.com/in/philippjahoda&quot;&gt;Philipp Jahoda&lt;/a&gt; which has become very popular amongst Android developers, but there was no decent solution to create charts for iOS.&lt;/p&gt; 
&lt;p&gt;I&#39;ve chosen to write it in &lt;code&gt;Swift&lt;/code&gt; as it can be highly optimized by the compiler, and can be used in both &lt;code&gt;Swift&lt;/code&gt; and &lt;code&gt;ObjC&lt;/code&gt; project. The demo project is written in &lt;code&gt;ObjC&lt;/code&gt; to demonstrate how it works.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;An amazing feature&lt;/strong&gt; of this library now, for Android, iOS, tvOS and macOS, is the time it saves you when developing for both platforms, as the learning curve is singleton- it happens only once, and the code stays very similar so developers don&#39;t have to go around and re-invent the app to produce the same output with a different library. (And that&#39;s not even considering the fact that there&#39;s not really another good choice out there currently...)&lt;/p&gt; 
&lt;h2&gt;Having trouble running the demo?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ChartsDemo/ChartsDemo.xcodeproj&lt;/code&gt; is the demo project for iOS/tvOS&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ChartsDemo-OSX/ChartsDemo-OSX.xcodeproj&lt;/code&gt; is the demo project for macOS&lt;/li&gt; 
 &lt;li&gt;Make sure you are running a supported version of Xcode. 
  &lt;ul&gt; 
   &lt;li&gt;Usually it is specified here a few lines above.&lt;/li&gt; 
   &lt;li&gt;In most cases it will be the latest Xcode version.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Make sure that your project supports Swift 5.0&lt;/li&gt; 
 &lt;li&gt;Optional: Run &lt;code&gt;carthage checkout&lt;/code&gt; in the project folder, to fetch dependencies (i.e testing dependencies). 
  &lt;ul&gt; 
   &lt;li&gt;If you don&#39;t have Carthage - you can get it &lt;a href=&quot;https://github.com/Carthage/Carthage/releases&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;In order to correctly compile:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Drag the &lt;code&gt;DGCharts.xcodeproj&lt;/code&gt; to your project&lt;/li&gt; 
 &lt;li&gt;Go to your target&#39;s settings, hit the &quot;+&quot; under the &quot;Frameworks, Libraries, and Embedded Content&quot; section, and select the DGCharts.framework&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@import DGCharts&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;When using Swift in an ObjC project:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need to import your Bridging Header. Usually it is &quot;&lt;em&gt;YourProject-Swift.h&lt;/em&gt;&quot;, so in ChartsDemo it&#39;s &quot;&lt;em&gt;ChartsDemo-Swift.h&lt;/em&gt;&quot;. Do not try to actually include &quot;&lt;em&gt;ChartsDemo-Swift.h&lt;/em&gt;&quot; in your project :-)&lt;/li&gt; 
 &lt;li&gt;(Xcode 8.1 and earlier) Under &quot;Build Options&quot;, mark &quot;Embedded Content Contains Swift Code&quot;&lt;/li&gt; 
 &lt;li&gt;(Xcode 8.2+) Under &quot;Build Options&quot;, mark &quot;Always Embed Swift Standard Libraries&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;When using &lt;a href=&quot;https://realm.io/&quot;&gt;Realm.io&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Note that the Realm framework is not linked with Charts - it is only there for &lt;em&gt;optional&lt;/em&gt; bindings. Which means that you need to have the framework in your project, and in a compatible version to whatever is compiled with DGCharts. We will do our best to always compile against the latest version.&lt;/li&gt; 
   &lt;li&gt;You&#39;ll need to add &lt;code&gt;ChartsRealm&lt;/code&gt; as a dependency too.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;3rd party tutorials&lt;/h2&gt; 
&lt;h4&gt;Video tutorials&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mWhwe_tLNE8&amp;amp;list=PL_csAAO9PQ8bjzg-wxEff1Fr0Y5W1hrum&amp;amp;index=5&quot;&gt;Chart in Swift - Setting Up a Basic Line Chart Using iOS Charts(Alex Nagy)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/csd7pyfEXgw&quot;&gt;Charts Framework in SwiftUI - Bar Chart (Stewart Lynch)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Blog posts&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@skoli/using-realm-and-charts-with-swift-3-in-ios-10-40c42e3838c0#.2gyymwfh8&quot;&gt;Using Realm and Charts with Swift 3 in iOS 10 (Sami Korpela)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@OsianSmith/creating-a-line-chart-in-swift-3-and-ios-10-2f647c95392e&quot;&gt;Creating a Line Chart in Swift 3 and iOS 10 (Osian Smith)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/annalizhaz/ChartsForSwiftBasic&quot;&gt;Beginning Set-up and Example Using Charts with Swift 3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@HeyDaveTheDev/creating-a-radar-chart-in-swift-5791afcf92f0&quot;&gt;Creating a Radar Chart in Swift (David Piper)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@zzzzbh/plotting-in-ios-using-charts-framework-with-swiftui-222034a2bea6&quot;&gt;Plotting in IOS using Charts framework with SwiftUI (Evgeny Basisty)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@penny-huang/swift-setting-up-a-basic-bar-chart-using-ios-charts-afd6aad96ac&quot;&gt;Set Up a Basic Bar Chart Using iOS-Charts (Penny Huang)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@penny-huang/swift-ios-charts-tutorial-highlight-selected-value-with-a-custom-marker-30ccbf92aa1b&quot;&gt;iOS-Charts Tutorial: Highlight Selected Value With a Custom Marker (Penny Huang)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/better-programming/drawing-charts-in-ios-before-swiftui-9f95b8612607&quot;&gt;Drawing Charts in iOS Before SwiftUI (Gennady Stepanov)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want your tutorial to show here? Create a PR!&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;h4&gt;Can&#39;t compile?&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please note the difference between installing a compiled framework from CocoaPods or Carthage, and copying the source code.&lt;/li&gt; 
 &lt;li&gt;Please read the &lt;strong&gt;Usage&lt;/strong&gt; section again.&lt;/li&gt; 
 &lt;li&gt;Search in the issues&lt;/li&gt; 
 &lt;li&gt;Try to politely ask in the issues section&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Other problems / feature requests&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search in the issues&lt;/li&gt; 
 &lt;li&gt;Try to politely ask in the issues section&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;CocoaPods Install&lt;/h2&gt; 
&lt;p&gt;Add &lt;code&gt;pod &#39;DGCharts&#39;&lt;/code&gt; to your Podfile. &quot;DGCharts&quot; is the name of the library.&lt;br /&gt; For &lt;a href=&quot;https://realm.io/&quot;&gt;Realm&lt;/a&gt; support, please add &lt;code&gt;pod &#39;ChartsRealm&#39;&lt;/code&gt; too.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;del&gt;&lt;code&gt;pod &#39;ios-charts&#39;&lt;/code&gt;&lt;/del&gt; is not the correct library, and refers to a different project by someone else.&lt;/p&gt; 
&lt;h2&gt;Carthage Install&lt;/h2&gt; 
&lt;p&gt;DGCharts now include Carthage prebuilt binaries.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-carthage&quot;&gt;github &quot;danielgindi/Charts&quot; == 5.1.0
github &quot;danielgindi/Charts&quot; ~&amp;gt; 5.1.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to build the binaries for a new release, use &lt;code&gt;carthage build --no-skip-current &amp;amp;&amp;amp; carthage archive Charts&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Swift Package Manager Install&lt;/h2&gt; 
&lt;p&gt;Swift Package Manager&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/danielgindi/Charts.git&quot;, .upToNextMajor(from: &quot;5.1.0&quot;))
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3rd party bindings&lt;/h2&gt; 
&lt;p&gt;Xamarin (by @Flash3001): &lt;em&gt;iOS&lt;/em&gt; - &lt;a href=&quot;https://github.com/Flash3001/iOSCharts.Xamarin&quot;&gt;GitHub&lt;/a&gt;/&lt;a href=&quot;https://www.nuget.org/packages/iOSCharts/&quot;&gt;NuGet&lt;/a&gt;. &lt;em&gt;Android&lt;/em&gt; - &lt;a href=&quot;https://github.com/Flash3001/MPAndroidChart.Xamarin&quot;&gt;GitHub&lt;/a&gt;/&lt;a href=&quot;https://www.nuget.org/packages/MPAndroidChart/&quot;&gt;NuGet&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Help&lt;/h2&gt; 
&lt;p&gt;If you like what you see here, and want to support the work being done in this repository, you could:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Contribute code, issues and pull requests&lt;/li&gt; 
 &lt;li&gt;Let people know this library exists (&lt;span&gt;🔥&lt;/span&gt; spread the word &lt;span&gt;🔥&lt;/span&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=68UL6Y8KUPS96&quot;&gt;&lt;img src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&quot; alt=&quot;Donate&quot; /&gt;&lt;/a&gt; (You can buy me a beer, or you can buy me dinner :-)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The author of &lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart&quot;&gt;MPAndroidChart&lt;/a&gt; is the reason that this library exists, and is accepting &lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart#donations&quot;&gt;donations&lt;/a&gt; on his page. He deserves them!&lt;/p&gt; 
&lt;h2&gt;Questions &amp;amp; Issues&lt;/h2&gt; 
&lt;p&gt;If you are having questions or problems, you should:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure you are using the latest version of the library. Check the &lt;a href=&quot;https://github.com/danielgindi/Charts/releases&quot;&gt;&lt;strong&gt;release-section&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Study the Android version&#39;s &lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart/wiki&quot;&gt;&lt;strong&gt;Documentation-Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Search or open questions on &lt;a href=&quot;http://stackoverflow.com/questions/tagged/ios-charts&quot;&gt;&lt;strong&gt;stackoverflow&lt;/strong&gt;&lt;/a&gt; with the &lt;code&gt;ios-charts&lt;/code&gt; tag&lt;/li&gt; 
 &lt;li&gt;Search &lt;a href=&quot;https://github.com/danielgindi/Charts/issues&quot;&gt;&lt;strong&gt;known issues&lt;/strong&gt;&lt;/a&gt; for your problem (open and closed)&lt;/li&gt; 
 &lt;li&gt;Create new issues (please &lt;span&gt;🔥&lt;/span&gt; &lt;strong&gt;search known issues before&lt;/strong&gt; &lt;span&gt;🔥&lt;/span&gt;, do not create duplicate issues)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Core features:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;8 different chart types&lt;/li&gt; 
 &lt;li&gt;Scaling on both axes (with touch-gesture, axes separately or pinch-zoom)&lt;/li&gt; 
 &lt;li&gt;Dragging / Panning (with touch-gesture)&lt;/li&gt; 
 &lt;li&gt;Combined-Charts (line-, bar-, scatter-, candle-stick-, bubble-)&lt;/li&gt; 
 &lt;li&gt;Dual (separate) Axes&lt;/li&gt; 
 &lt;li&gt;Customizable Axes (both x- and y-axis)&lt;/li&gt; 
 &lt;li&gt;Highlighting values (with customizable popup-views)&lt;/li&gt; 
 &lt;li&gt;Save chart to camera-roll / export to PNG/JPEG&lt;/li&gt; 
 &lt;li&gt;Predefined color templates&lt;/li&gt; 
 &lt;li&gt;Legends (generated automatically, customizable)&lt;/li&gt; 
 &lt;li&gt;Animations (build up animations, on both x- and y-axis)&lt;/li&gt; 
 &lt;li&gt;Limit lines (providing additional information, maximums, ...)&lt;/li&gt; 
 &lt;li&gt;Fully customizable (paints, typefaces, legends, colors, background, gestures, dashed lines, ...)&lt;/li&gt; 
 &lt;li&gt;Plotting data directly from &lt;a href=&quot;https://realm.io&quot;&gt;&lt;strong&gt;Realm.io&lt;/strong&gt;&lt;/a&gt; mobile database (&lt;a href=&quot;https://github.com/danielgindi/ChartsRealm&quot;&gt;here&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Chart types:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Screenshots are currently taken from the original repository, as they render exactly the same :-)&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (with legend, simple design)&lt;/strong&gt; &lt;img src=&quot;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_linechart4.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (with legend, simple design)&lt;/strong&gt; &lt;img src=&quot;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_linechart3.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (cubic lines)&lt;/strong&gt; &lt;img src=&quot;https://raw.github.com/PhilJay/MPChart/master/screenshots/cubiclinechart.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (gradient fill)&lt;/strong&gt; &lt;img src=&quot;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/line_chart_gradient.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Combined-Chart (bar- and linechart in this case)&lt;/strong&gt; &lt;img src=&quot;https://raw.github.com/PhilJay/MPChart/master/screenshots/combined_chart.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;BarChart (with legend, simple design)&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_barchart3.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;BarChart (grouped DataSets)&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/PhilJay/MPChart/master/screenshots/groupedbarchart.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Horizontal-BarChart&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/PhilJay/MPChart/master/screenshots/horizontal_barchart.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;PieChart (with selection, ...)&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/simpledesign_piechart1.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ScatterChart&lt;/strong&gt; (with squares, triangles, circles, ... and more)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/scatterchart.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;CandleStickChart&lt;/strong&gt; (for financial data)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/candlestickchart.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;BubbleChart&lt;/strong&gt; (area covered by bubbles indicates the value)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/bubblechart.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;RadarChart&lt;/strong&gt; (spider web chart)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/radarchart.png&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Currently there&#39;s no need for documentation for the iOS/tvOS/macOS version, as the API is &lt;strong&gt;95% the same&lt;/strong&gt; as on Android.&lt;br /&gt; You can read the official &lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart&quot;&gt;MPAndroidChart&lt;/a&gt; documentation here: &lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart/wiki&quot;&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or you can see the Charts Demo project in both Objective-C and Swift (&lt;a href=&quot;https://github.com/danielgindi/Charts/tree/master/ChartsDemo-iOS&quot;&gt;&lt;strong&gt;ChartsDemo-iOS&lt;/strong&gt;&lt;/a&gt;, as well as macOS &lt;a href=&quot;https://github.com/danielgindi/Charts/tree/master/ChartsDemo-macOS&quot;&gt;&lt;strong&gt;ChartsDemo-macOS&lt;/strong&gt;&lt;/a&gt;) and learn the how-tos from it.&lt;/p&gt; 
&lt;h1&gt;Special Thanks&lt;/h1&gt; 
&lt;p&gt;Goes to &lt;a href=&quot;https://github.com/liuxuan30&quot;&gt;@liuxuan30&lt;/a&gt;, &lt;a href=&quot;https://github.com/petester42&quot;&gt;@petester42&lt;/a&gt; and &lt;a href=&quot;https://github.com/AlBirdie&quot;&gt;@AlBirdie&lt;/a&gt; for new features, bugfixes, and lots and lots of involvement in our open-sourced community! You guys are a huge help to all of those coming here with questions and issues, and I couldn&#39;t respond to all of those without you.&lt;/p&gt; 
&lt;h3&gt;Our amazing sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://debricked.com/&quot;&gt;Debricked&lt;/a&gt;: Use open source securely&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://debricked.com/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4375169/73585544-25bfa800-44dd-11ea-9661-82519a125302.jpg&quot; alt=&quot;debricked&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Copyright 2016 Daniel Cohen Gindi &amp;amp; Philipp Jahoda&lt;/p&gt; 
&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nicklockwood/SwiftFormat</title>
      <link>https://github.com/nicklockwood/SwiftFormat</link>
      <description>&lt;p&gt;A command-line tool and Xcode Extension for formatting Swift code&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/EditorExtension/Application/Assets.xcassets/AppIcon.appiconset/icon_256x256.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=9ZGWNK5FEZFF6&amp;amp;source=url&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/paypal-donate-blue.svg?sanitize=true&quot; alt=&quot;PayPal&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/nicklockwood/SwiftFormat/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/nicklockwood/SwiftFormat&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/nicklockwood/SwiftFormat/graphs/badge.svg?sanitize=true&quot; alt=&quot;Codecov&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/nicklockwood/swiftformat&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fnicklockwood%2FSwiftFormat%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-lightgrey.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://mastodon.social/@nicklockwood&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/mastodon-@nicklockwood@mastodon.social-636dff.svg?sanitize=true&quot; alt=&quot;Mastodon&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#what-is-this&quot;&gt;What?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#why-would-i-want-to-do-that&quot;&gt;Why?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#how-do-i-install-it&quot;&gt;How?&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#command-line-tool&quot;&gt;Command-line tool&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-source-editor-extension&quot;&gt;Xcode source editor extension&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-build-phase&quot;&gt;Xcode build phase&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#swift-package-manager-plugin&quot;&gt;Swift Package Manager plugin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#via-applescript&quot;&gt;Via Applescript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#vscode-plugin&quot;&gt;VSCode plugin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#sublime-text-plugin&quot;&gt;Sublime Text plugin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/nova-plugin&quot;&gt;Nova plugin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#git-pre-commit-hook&quot;&gt;Git pre-commit hook&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#github-actions&quot;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#on-ci-using-danger&quot;&gt;On CI using Danger&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#bazel-build&quot;&gt;Bazel build&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#docker&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#prerelease-builds&quot;&gt;Prerelease Builds&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#configuration&quot;&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#options&quot;&gt;Options&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#rules&quot;&gt;Rules&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#swift-version&quot;&gt;Swift version&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#config-file&quot;&gt;Config file&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#globs&quot;&gt;Globs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#linting&quot;&gt;Linting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#error-codes&quot;&gt;Error codes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#cache&quot;&gt;Cache&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#file-headers&quot;&gt;File headers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#markdown-formatting&quot;&gt;Markdown formatting&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#known-issues&quot;&gt;Known issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#tip-jar&quot;&gt;Tip Jar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is this?&lt;/h2&gt; 
&lt;p&gt;SwiftFormat is a code library and command-line tool for reformatting Swift code on macOS, Linux or Windows.&lt;/p&gt; 
&lt;p&gt;SwiftFormat goes above and beyond what you might expect from a code formatter. In addition to adjusting white space it can insert or remove implicit &lt;code&gt;self&lt;/code&gt;, remove redundant parentheses, and correct many other deviations from the standard Swift idioms.&lt;/p&gt; 
&lt;h2&gt;Why would I want to do that?&lt;/h2&gt; 
&lt;p&gt;Many programmers have a preferred style for formatting their code, and others seem entirely blind to the existing formatting conventions of a project (to the enragement of their colleagues).&lt;/p&gt; 
&lt;p&gt;When collaborating on a project, it can be helpful to agree on a common coding style, but enforcing that manually is tedious and error-prone, and can lead to arguments if some participants take it more seriously than others.&lt;/p&gt; 
&lt;p&gt;Having a tool to automatically enforce a common style eliminates those issues, and lets you focus on the behavior of the code, not its presentation.&lt;/p&gt; 
&lt;h2&gt;How do I install it?&lt;/h2&gt; 
&lt;p&gt;That depends - There are several ways you can use SwiftFormat:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;As a command-line tool that you run manually, or as part of some other toolchain&lt;/li&gt; 
 &lt;li&gt;As a Source Editor Extension that you can invoke via the Editor &amp;gt; SwiftFormat menu within Xcode&lt;/li&gt; 
 &lt;li&gt;As a build phase in your Xcode project, so that it runs every time you press Cmd-R or Cmd-B, or&lt;/li&gt; 
 &lt;li&gt;As a Git pre-commit hook, so that it runs on any files you&#39;ve changed before you check them in&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Command-line tool&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can install the &lt;code&gt;swiftformat&lt;/code&gt; command-line tool on macOS or Linux using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;. Assuming you already have Homebrew installed, just type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To update to the latest version once installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew upgrade swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can install the tool on macOS or Linux by using &lt;a href=&quot;https://github.com/yonaskolb/Mint&quot;&gt;Mint&lt;/a&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mint install nicklockwood/SwiftFormat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or if you prefer, you can check out and build SwiftFormat manually on macOS, Linux or Windows as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git clone https://github.com/nicklockwood/SwiftFormat
$ cd SwiftFormat
$ swift build -c release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are installing SwiftFormat into your project directory, you can use &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt; on macOS to automatically install the swiftformat binary along with your other pods - see the Xcode build phase instructions below for details.&lt;/p&gt; 
&lt;p&gt;Another option is to include the binary artifactbundle in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.binaryTarget(
    name: &quot;swiftformat&quot;,
    url: &quot;https://github.com/nicklockwood/SwiftFormat/releases/download/0.55.0/swiftformat-macos.artifactbundle.zip&quot;,
    checksum: &quot;CHECKSUM&quot;
),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would prefer not to use a package manager, you can build the command-line app manually:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;open &lt;code&gt;SwiftFormat.xcodeproj&lt;/code&gt; and build the &lt;code&gt;SwiftFormat (Application)&lt;/code&gt; scheme.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drag the &lt;code&gt;swiftformat&lt;/code&gt; binary into &lt;code&gt;/usr/local/bin/&lt;/code&gt; (this is a hidden folder, but you can use the Finder&#39;s &lt;code&gt;Go &amp;gt; Go to Folder...&lt;/code&gt; menu to open it).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open &lt;code&gt;~/.bash_profile&lt;/code&gt; in your favorite text editor (this is a hidden file, but you can type &lt;code&gt;open ~/.bash_profile&lt;/code&gt; in the terminal to open it).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the following line to the file: &lt;code&gt;alias swiftformat=&quot;/usr/local/bin/swiftformat --indent 4&quot;&lt;/code&gt; (you can omit the &lt;code&gt;--indent 4&lt;/code&gt;, or replace it with something else. Run &lt;code&gt;swiftformat --help&lt;/code&gt; to see the available options).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Save the &lt;code&gt;.bash_profile&lt;/code&gt; file and run the command &lt;code&gt;source ~/.bash_profile&lt;/code&gt; for the changes to take effect.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you followed the installation instructions above, you can now just type&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swiftformat .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(that&#39;s a space and then a period after the command) in the terminal to format any Swift files in the current directory. In place of the &lt;code&gt;.&lt;/code&gt;, you can instead type an absolute or relative path to the file or directory that you want to format.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; &lt;code&gt;swiftformat .&lt;/code&gt; will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive.&lt;/p&gt; 
&lt;p&gt;To use it safely, do the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Choose a file or directory that you want to apply the changes to.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Make sure that you have committed all your changes to that code safely in git (or whatever source control system you use).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(Optional) In Terminal, type &lt;code&gt;swiftformat --infer-options &quot;/path/to/your/code/&quot;&lt;/code&gt;. This will suggest a set of formatting options to use that match your existing project style (but you are free to ignore these and use the defaults, or your own settings if you prefer).&lt;/p&gt; &lt;p&gt;The path can point to either a single Swift file or a directory of files. It can be either be absolute, or relative to the current directory. The &lt;code&gt;&quot;&quot;&lt;/code&gt; quotes around the path are optional, but if the path contains spaces then you either need to use quotes, or escape each space with &lt;code&gt;\&lt;/code&gt;. You may include multiple paths separated by spaces.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In Terminal, type &lt;code&gt;swiftformat &quot;/path/to/your/code/&quot;&lt;/code&gt;. The same rules apply as above with respect to paths, and multiple space-delimited paths are allowed.&lt;/p&gt; &lt;p&gt;If you used &lt;code&gt;--infer-options&lt;/code&gt; to generate a suggested set of options in step 3, you should copy and paste them into the command, either before or after the path(s) to your source files.&lt;/p&gt; &lt;p&gt;If you have created a &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#config-file&quot;&gt;config file&lt;/a&gt;, you can specify its path using &lt;code&gt;--config &quot;/path/to/your/config-file/&quot;&lt;/code&gt;. Alternatively, if you name the file &lt;code&gt;.swiftformat&lt;/code&gt; and place it inside the project you are formatting, it will be picked up automatically.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Press enter to begin formatting. Once the formatting is complete, use your source control system to check the changes, and verify that no undesirable changes have been introduced. If they have, revert the changes, tweak the options and try again.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(Optional) commit the changes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Following these instructions &lt;em&gt;should&lt;/em&gt; ensure that you avoid catastrophic data loss, but in the unlikely event that it wipes your hard drive, &lt;strong&gt;please note that I accept no responsibility&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using Standard Input/Output:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you prefer, you can use unix pipes to include SwiftFormat as part of a command chain. For example, this is an alternative way to format a file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat --output /path/to/file.swift
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Omitting the &lt;code&gt;--output /path/to/file.swift&lt;/code&gt; will print the formatted file to Standard Output (stdout). You can also pass &quot;stdout&quot; explicitly as the output path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat --output stdout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use &lt;code&gt;&amp;gt;&lt;/code&gt; to specify the output path as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat &amp;gt; /path/to/file.swift
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not supply an input file, SwiftFormat will automatically take its input from Standard Input (stdin), but will time-out if no input is received immediately and display the help screen. To make it explicit, pass &quot;stdin&quot; as the input path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat stdin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using stdin, SwiftFormat does not have access to the file path of the input, so features that rely on the file location (such as inserting the creation date into header comments, or detecting &lt;code&gt;.swiftformat&lt;/code&gt; configuration files in the file path) will not work. To solve this, you can provide the file path using the &lt;code&gt;--stdin-path&lt;/code&gt; argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat /path/to/file.swift | swiftformat stdin --stdinpath /path/to/file.swift
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Xcode source editor extension&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Like the command-line tool, you can install the SwiftFormat for Xcode extension application via &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;. Assuming you already have Homebrew installed, type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install --cask swiftformat-for-xcode
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will install SwiftFormat for Xcode in your Applications folder. Double-click the app to launch it, and then follow the on-screen instructions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The app should be correctly signed, but if you get a Gatekeeper warning when trying to open it you can bypass this by right-clicking (or control-clicking) the app and selecting &lt;code&gt;Open&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To update to the latest version once installed use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew upgrade --cask swiftformat-for-xcode
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if you prefer not to use Homebrew, you&#39;ll find the latest version of the SwiftFormat for Xcode application on the &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/releases&quot;&gt;GitHub Releases&lt;/a&gt; page. Download and unpack the zip archive, then drag &lt;code&gt;SwiftFormat for Xcode.app&lt;/code&gt; into your &lt;code&gt;Applications&lt;/code&gt; folder.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Once you have launched the app and restarted Xcode, you&#39;ll find a SwiftFormat option under Xcode&#39;s Editor menu. If the SwiftFormat menu does not appear &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/issues/494&quot;&gt;this thread&lt;/a&gt; may help.&lt;/p&gt; 
&lt;p&gt;You can configure the formatting &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#rules&quot;&gt;rules&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#options&quot;&gt;options&lt;/a&gt; using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however, you can import and export different configurations using the File menu. You will need to do this again each time you switch projects.&lt;/p&gt; 
&lt;p&gt;The format of the configuration file is described in the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#config-file&quot;&gt;Config section&lt;/a&gt; below.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the &lt;code&gt;.swiftformat&lt;/code&gt; file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration.&lt;/p&gt; 
&lt;h2&gt;Xcode build phase&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app.&lt;/p&gt; 
&lt;p&gt;Alternatively, you might want to consider running SwiftFormat in &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#linting&quot;&gt;lint&lt;/a&gt; mode as part of your normal build, and then running a formatting pass manually, or as part of a less-frequent build target (such as the tests).&lt;/p&gt; 
&lt;h3&gt;Using Swift Package Manager&lt;/h3&gt; 
&lt;p&gt;To set up SwiftFormat as an Xcode build phase, do the following:&lt;/p&gt; 
&lt;h4&gt;1) Create a BuildTools folder and Package.swift&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a folder called &lt;code&gt;BuildTools&lt;/code&gt; in the same folder as your xcodeproj file&lt;/li&gt; 
 &lt;li&gt;In this folder, create a file called &lt;code&gt;Package.swift&lt;/code&gt;, with the following contents:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swift-tools-version:5.1
import PackageDescription

let package = Package(
    name: &quot;BuildTools&quot;,
    platforms: [.macOS(.v10_11)],
    dependencies: [
        .package(url: &quot;https://github.com/nicklockwood/SwiftFormat&quot;, from: &quot;0.55.0&quot;),
    ],
    targets: [.target(name: &quot;BuildTools&quot;, path: &quot;&quot;)]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;If you are running Xcode 11.4 or later, in the &lt;code&gt;BuildTools&lt;/code&gt; folder create a file called &lt;code&gt;Empty.swift&lt;/code&gt; with nothing in it. This is to satisfy a change in Swift Package Manager.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;2) Add a Build phase to your app target&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Uncheck the &lt;code&gt;Based on dependency analysis&lt;/code&gt; checkbox&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd BuildTools
SDKROOT=(xcrun --sdk macosx --show-sdk-path)
#swift package update #Uncomment this line temporarily to update the version used to the latest matching your BuildTools/Package.swift file
swift run -c release swiftformat &quot;$SRCROOT&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can also use &lt;code&gt;swift run -c release --package-path BuildTools swiftformat &quot;$SRCROOT&quot;&lt;/code&gt; if you need a more complex script and &lt;code&gt;cd BuildTools&lt;/code&gt; breaks stuff.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may wish to check BuildTools/Package.swift into your source control so that the version used by your run-script phase is kept in version control. It is recommended to add the following to your .gitignore file: &lt;code&gt;BuildTools/.build&lt;/code&gt; and &lt;code&gt;BuildTools/.swiftpm&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE (2):&lt;/strong&gt; If you are using Xcode 15 or later, make sure that the &lt;code&gt;ENABLE_USER_SCRIPT_SANDBOXING&lt;/code&gt; (aka &quot;User Script Sandboxing&quot;) option is set to NO, otherwise SwiftFormat won&#39;t be able to run correctly.&lt;/p&gt; 
&lt;h3&gt;Using CocoaPods&lt;/h3&gt; 
&lt;h4&gt;1) Add the SwiftFormat CLI to your Podfile&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;swiftformat&lt;/code&gt; binary to your project directory via &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;, by adding the following line to your Podfile then running &lt;code&gt;pod install&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SwiftFormat/CLI&#39;, &#39;~&amp;gt; 0.55&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This will only install the pre-built command-line app, not the source code for the SwiftFormat framework.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE (2):&lt;/strong&gt; When installing this way, GateKeeper may block swiftformat from running until you open it manually the first time by right-clicking in the Finder and selecting &quot;Open&quot;.&lt;/p&gt; 
&lt;h4&gt;2) Add a Build phase to your app target&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Uncheck the &lt;code&gt;Based on dependency analysis&lt;/code&gt; checkbox&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&quot;${PODS_ROOT}/SwiftFormat/CommandLineTool/swiftformat&quot; &quot;$SRCROOT&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Alternative: Locally installed SwiftFormat&lt;/h3&gt; 
&lt;p&gt;Alternatively, you could use a locally installed swiftformat command-line tool instead by putting the following in your Run Script build phase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if which swiftformat &amp;gt;/dev/null; then
  swiftformat .
else
  echo &quot;warning: SwiftFormat not installed, download from https://github.com/nicklockwood/SwiftFormat&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is not recommended for shared projects however, as different team members using different versions of SwiftFormat may result in noise in the commit history as code gets reformatted inconsistently.&lt;/p&gt; 
&lt;p&gt;If you installed SwiftFormat via Homebrew on Apple Silicon, you might experience this warning:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;warning: SwiftFormat not installed, download from &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;https://github.com/nicklockwood/SwiftFormat&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;That is because Homebrew on Apple Silicon installs the binaries into the &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; folder by default. To instruct Xcode where to find SwiftFormat, you can either add &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; environment variable in your build phase&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [[ &quot;$(uname -m)&quot; == arm64 ]]; then
    export PATH=&quot;/opt/homebrew/bin:$PATH&quot;
fi

if which swiftformat &amp;gt; /dev/null; then
  swiftformat .
else
  echo &quot;warning: SwiftFormat not installed, download from https://github.com/nicklockwood/SwiftFormat&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or you can create a symbolic link in &lt;code&gt;/usr/local/bin&lt;/code&gt; pointing to the actual binary:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ln -s /opt/homebrew/bin/swiftformat /usr/local/bin/swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Swift Package Manager plugin&lt;/h2&gt; 
&lt;p&gt;You can use &lt;code&gt;SwiftFormat&lt;/code&gt; as a SwiftPM command plugin.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Swift 5.6 or higher is required. Add the package to your dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    // ...
    .package(url: &quot;https://github.com/nicklockwood/SwiftFormat&quot;, from: &quot;0.55.0&quot;),
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The plugin will find an existing &lt;code&gt;.swiftformat&lt;/code&gt; in your package root folder and honor it automatically.&lt;/p&gt; 
&lt;h3&gt;Trigger Plugin From Command-Line&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;swift package plugin --allow-writing-to-package-directory swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can limit the formatting to a particular target with &lt;code&gt;--target&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;You can also specify &lt;code&gt;SwiftFormat&lt;/code&gt; arguments, e.g. &lt;code&gt;--swift-version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Example&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;swift package plugin --allow-writing-to-package-directory swiftformat --target MyLibrary --swift-version 5.6 --verbose
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Trigger Plugin From Xcode&lt;/h3&gt; 
&lt;p&gt;In Xcode 14 you can trigger the command plugin execution for a Swift package or an Xcode project.&lt;/p&gt; 
&lt;p&gt;For an Xcode project the project&#39;s main directory will be processed and the &lt;code&gt;--target&lt;/code&gt; option will be ignored.&lt;/p&gt; 
&lt;p&gt;You can also specify &lt;code&gt;SwiftFormat&lt;/code&gt; arguments, e.g. &lt;code&gt;--swift-version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4176826/179352584-db7f7f42-452c-4a42-a329-01b115a237a7.gif&quot; alt=&quot;Run plugin in Xcode 14&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Via AppleScript&lt;/h2&gt; 
&lt;p&gt;To run SwiftFormat on the frontmost Xcode document (project or workspace) you can use the following AppleScript:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-applescript&quot;&gt;tell application &quot;Xcode&quot;
    set frontWindow to the first window
    set myPath to path of document of frontWindow
    do shell script &quot;cd &quot; &amp;amp; myPath &amp;amp; &quot;;cd ..; /usr/local/bin/swiftformat .&quot;
end tell
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some Apps you can trigger this from are &lt;a href=&quot;https://folivora.ai&quot;&gt;BetterTouchTool&lt;/a&gt;, &lt;a href=&quot;https://www.alfredapp.com&quot;&gt;Alfred&lt;/a&gt; or &lt;a href=&quot;https://www.keyboardmaestro.com/main/&quot;&gt;Keyboard Maestro&lt;/a&gt;. Another option is to define a QuickAction for Xcode via Automator and then assign a keyboard shortcut for it in the System Preferences.&lt;/p&gt; 
&lt;h2&gt;VSCode plugin&lt;/h2&gt; 
&lt;p&gt;If you prefer to use Microsoft&#39;s &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;VSCode&lt;/a&gt; editor for writing Swift, &lt;a href=&quot;https://github.com/vknabel&quot;&gt;Valentin Knabel&lt;/a&gt; has created a &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftformat&quot;&gt;VSCode plugin&lt;/a&gt; for SwiftFormat.&lt;/p&gt; 
&lt;h2&gt;Sublime Text plugin&lt;/h2&gt; 
&lt;p&gt;If you prefer to use the &lt;a href=&quot;https://www.sublimetext.com&quot;&gt;Sublime Text&lt;/a&gt; editor, try the &lt;a href=&quot;https://github.com/aerobounce/Sublime-Swift-Format&quot;&gt;Sublime-Swift-Format plugin&lt;/a&gt; by &lt;a href=&quot;https://github.com/aerobounce&quot;&gt;Aerobounce&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Nova plugin&lt;/h2&gt; 
&lt;p&gt;If you prefer to use the &lt;a href=&quot;https://panic.com/nova&quot;&gt;Nova&lt;/a&gt; editor, try the &lt;a href=&quot;https://extensions.panic.com/extensions/org.padraig/org.padraig.SwiftFormat/&quot;&gt;SwiftFormat extension&lt;/a&gt; by &lt;a href=&quot;https://mastodon.social/@PadraigOCinneide&quot;&gt;Pádraig Ó Cinnéide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Git pre-commit hook&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Follow the instructions for installing the SwiftFormat command-line tool.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href=&quot;https://github.com/hallettj/git-format-staged&quot;&gt;git-format-staged&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Edit or create a &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; file in your project folder. The .git folder is hidden but should already exist if you are using Git with your project, so open it with the terminal, or the Finder&#39;s &lt;code&gt;Go &amp;gt; Go to Folder...&lt;/code&gt; menu.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the following line in the pre-commit file. The &lt;code&gt;{}&lt;/code&gt; will be replaced automatically by the path to the Swift file being formatted:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
git-format-staged --formatter &quot;swiftformat stdin --stdin-path &#39;{}&#39;&quot; &quot;*.swift&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Note that this example uses your locally installed version of SwiftFormat, not a separate copy in your project repository. You can replace &lt;code&gt;swiftformat&lt;/code&gt; with the path to a copy inside your project if you prefer.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;enable the hook by typing &lt;code&gt;chmod +x .git/hooks/pre-commit&lt;/code&gt; in the terminal.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The pre-commit hook will now run whenever you run &lt;code&gt;git commit&lt;/code&gt;. Running &lt;code&gt;git commit --no-verify&lt;/code&gt; will skip the pre-commit hook.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you are using Git via a GUI client such as &lt;a href=&quot;https://www.git-tower.com&quot;&gt;Tower&lt;/a&gt;, &lt;a href=&quot;https://www.git-tower.com/help/mac/faq-and-tips/faq/hook-scripts&quot;&gt;additional steps&lt;/a&gt; may be needed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE (2):&lt;/strong&gt; Unlike the Xcode build phase approach, git pre-commit hook won&#39;t be checked in to source control, and there&#39;s no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a &lt;em&gt;post&lt;/em&gt;-commit hook instead, which would run on your continuous integration server.&lt;/p&gt; 
&lt;h2&gt;GitHub Actions&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;SwiftFormat comes preinstalled on all macOS GitHub-hosted runners. If you are self hosting you will need to ensure SwiftFormat is installed on your runner.&lt;/li&gt; 
 &lt;li&gt;Create a GitHub Actions workflow using SwiftFormat, passing the &lt;code&gt;--reporter github-actions-log&lt;/code&gt; command line option. The following example action lints pull requests using SwiftFormat, reporting warnings using the GitHub Actions log.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Lint.yml
name: Lint
on: pull_request

jobs:
  Lint:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: SwiftFormat
        run: swiftformat --lint . --reporter github-actions-log
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;On CI using Danger&lt;/h2&gt; 
&lt;p&gt;To setup SwiftFormat to be used by your continuous integration system using &lt;a href=&quot;http://danger.systems/ruby/&quot;&gt;Danger&lt;/a&gt;, do the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Follow the &lt;a href=&quot;http://danger.systems/guides/getting_started.html&quot;&gt;&lt;code&gt;instructions&lt;/code&gt;&lt;/a&gt; to setup Danger.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the &lt;a href=&quot;https://github.com/garriguv/danger-ruby-swiftformat&quot;&gt;&lt;code&gt;danger-swiftformat&lt;/code&gt;&lt;/a&gt; plugin to your &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;Dangerfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;swiftformat.binary_path = &quot;/path/to/swiftformat&quot; # optional
swiftformat.additional_args = &quot;--indent tab --self insert&quot; # optional
swiftformat.check_format(fail_on_error: true)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is recommended to add the &lt;code&gt;swiftformat&lt;/code&gt; binary to your project directory to ensure the same version is used each time (see the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-build-phase&quot;&gt;Xcode build phase&lt;/a&gt; instructions above).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bazel Build&lt;/h2&gt; 
&lt;p&gt;If you use &lt;a href=&quot;https://bazel.build/&quot;&gt;Bazel&lt;/a&gt; to build your Swift projects and want to ensure that only properly formatted code is merged to your main branch, try &lt;a href=&quot;https://github.com/cgrindel/rules_swiftformat&quot;&gt;rules_swiftformat&lt;/a&gt;. The repository contains Bazel rules and macros that format Swift source files using SwiftFormat, test that the formatted files exist in the workspace directory, and copy the formatted files to the workspace directory.&lt;/p&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;p&gt;SwiftFormat publishes releases into &lt;a href=&quot;https://github.com/features/packages&quot;&gt;GitHub Packages&lt;/a&gt; Docker registry. To pull the image call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker pull ghcr.io/nicklockwood/swiftformat:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, the container runs &lt;code&gt;swiftformat .&lt;/code&gt; Therefore, you need to provide a path either via an argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -v /local/source/path:/work ghcr.io/nicklockwood/swiftformat:latest /work
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or by changing the working dir:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -v /local/source/path:/work -w /work ghcr.io/nicklockwood/swiftformat:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To check the installed SwiftFormat version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm ghcr.io/nicklockwood/swiftformat:latest --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Linting example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -v /local/source/path:/work ghcr.io/nicklockwood/swiftformat:latest /work --lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Prerelease Builds&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Prerelease builds are subject to breaking changes.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;New rules, options, and fixes are merged to the &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/commits/develop/&quot;&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/a&gt; branch before being incorporated into an official release. You may want to use a prerelease version of SwiftFormat that includes the latest unreleased changes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Homebrew:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; &lt;code&gt;--HEAD&lt;/code&gt; option downloads, builds, and installs the latest changes from the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt; 
&lt;p&gt;You can install a prerelease build via Homebrew by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install swiftformat --HEAD
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Nightly Builds:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nightly builds of the &lt;code&gt;develop&lt;/code&gt; branch are available in the &lt;a href=&quot;https://github.com/calda/SwiftFormat-nightly&quot;&gt;calda/SwiftFormat-nightly&lt;/a&gt; repo. A new release is published every day, unless there have been no changes to &lt;code&gt;develop&lt;/code&gt; since the last release. You can download executables for the latest nightly release &lt;a href=&quot;https://github.com/calda/SwiftFormat-nightly/releases/latest&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Commit SHAs on &lt;code&gt;develop&lt;/code&gt; are unstable since that branch is occasionally rebased, but artifact URLs and tags in &lt;a href=&quot;https://github.com/calda/SwiftFormat-nightly&quot;&gt;calda/SwiftFormat-nightly&lt;/a&gt; are stable references that can be used from other repos or tools.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;SwiftFormat&#39;s configuration is split between &lt;strong&gt;rules&lt;/strong&gt; and &lt;strong&gt;options&lt;/strong&gt;. Rules are functions in the SwiftFormat library that apply changes to the code. Options are settings that control the behavior of the rules.&lt;/p&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;p&gt;The options available in SwiftFormat can be displayed using the &lt;code&gt;--options&lt;/code&gt; command-line argument. The default value for each option is indicated in the help text.&lt;/p&gt; 
&lt;p&gt;Rules are configured by adding &lt;code&gt;--[option_name] [value]&lt;/code&gt; to your command-line arguments, or by creating a &lt;code&gt;.swiftformat&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#config-file&quot;&gt;config file&lt;/a&gt; and placing it in your project directory.&lt;/p&gt; 
&lt;p&gt;A given option may affect multiple rules. Use &lt;code&gt;--rule-info [rule_name]&lt;/code&gt; command for details about which options affect a given rule, or see the &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/raw/main/Rules.md&quot;&gt;Rules.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;You can configure options for specific files or code ranges by using &lt;code&gt;swiftformat:options&lt;/code&gt; directive in comments inside your Swift file. To temporarily set one or more options inside a source file, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:options --indent 2 --allman true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To apply an options override only to a particular line, use the &lt;code&gt;:this&lt;/code&gt;, &lt;code&gt;:next&lt;/code&gt; or &lt;code&gt;:previous&lt;/code&gt; modifiers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let indexUrl: URL // swiftformat:options:this --preserve-acronyms url 

// swiftformat:options:next --semicolons inline
doTheThing(); print(&quot;Did the thing&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Rules&lt;/h2&gt; 
&lt;p&gt;SwiftFormat includes over 50 rules, and new ones are added all the time. An up-to-date list can be found in &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/raw/main/Rules.md&quot;&gt;Rules.md&lt;/a&gt; along with documentation for how they are used.&lt;/p&gt; 
&lt;p&gt;The list of available rules can be displayed within the command-line app using the &lt;code&gt;--rules&lt;/code&gt; argument. Rules can be either enabled or disabled. Most are enabled by default. Disabled rules are marked with &quot;(disabled)&quot; when displayed using &lt;code&gt;--rules&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;--rule-info [rule_name]&lt;/code&gt; command to get information about a specific rule. Pass a comma-delimited list of rule names to get information for multiple rules at once, or use &lt;code&gt;--rule-info&lt;/code&gt; with no argument for info on all rules.&lt;/p&gt; 
&lt;p&gt;You can disable rules individually using &lt;code&gt;--disable&lt;/code&gt; followed by a list of one or more comma-delimited rule names, or enable opt-in rules using &lt;code&gt;--enable&lt;/code&gt; followed by the rule names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--disable redundantSelf,trailingClosures
--enable isEmpty
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you prefer, you can use multiple &lt;code&gt;--enable&lt;/code&gt;/&lt;code&gt;--disable&lt;/code&gt; arguments instead of using commas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--disable indent
--disable linebreaks
--disable redundantSelf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can use the line continuation character &lt;code&gt;\&lt;/code&gt; to wrap a single argument over multiple line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--disable          \
    indent,        \
    linebreaks,    \
    redundantSelf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To avoid automatically opting-in to new rules when SwiftFormat is updated, you can disable all rules using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--disable all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then individually enable just the rules you want. Alternatively, use the&lt;code&gt;--rules&lt;/code&gt; argument to &lt;em&gt;only&lt;/em&gt; enable the rules you specify:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--rules indent,linebreaks
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As above, you may include multiple &lt;code&gt;--rules&lt;/code&gt; arguments, or use the line continuation character &lt;code&gt;\&lt;/code&gt; to wrap the rules onto separate lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--rules redundantSelf
--rules         \
    indent,     \
    linebreaks
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see exactly which rules were applied to a given file, you can use the &lt;code&gt;--verbose&lt;/code&gt; command-line option to force SwiftFormat to print a more detailed log as it applies the formatting. &lt;strong&gt;NOTE:&lt;/strong&gt; running in verbose mode is slower than the default mode.&lt;/p&gt; 
&lt;p&gt;You can disable rules for specific files or code ranges by using &lt;code&gt;swiftformat:&lt;/code&gt; directives in comments inside your Swift file. To temporarily disable one or more rules inside a source file, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:disable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable the rule(s) again, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:enable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To disable all rules use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:disable all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And to enable them all again, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:enable all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To temporarily prevent one or more rules being applied to just the next line, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftformat:disable:next &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]
let foo = bar // rule(s) will be disabled for this line
let bar = baz // rule(s) will be re-enabled for this line
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;previous&lt;/code&gt; to enable or disable rules for the current or previous line. There is no need to manually re-enable a rule after using the &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;previous&lt;/code&gt; directives.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;swiftformat:enable&lt;/code&gt; directive only serves to counter a previous &lt;code&gt;swiftformat:disable&lt;/code&gt; directive in the same file. It is not possible to use &lt;code&gt;swiftformat:enable&lt;/code&gt; to enable a rule that was not already enabled when formatting started.&lt;/p&gt; 
&lt;h2&gt;Swift version&lt;/h2&gt; 
&lt;p&gt;Most SwiftFormat rules are version-agnostic, but some are applicable only to newer Swift versions. These rules will be disabled automatically if the Swift version is not specified, so to make sure that the full functionality is available you should specify the version of Swift that is used by your project.&lt;/p&gt; 
&lt;p&gt;You can specify the Swift compiler version in one of two ways:&lt;/p&gt; 
&lt;p&gt;You can specify your project&#39;s Swift compiler version using the &lt;code&gt;--swift-version&lt;/code&gt; command line argument. You can also add the &lt;code&gt;--swift-version&lt;/code&gt; option to your &lt;code&gt;.swiftformat&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;Another option is to add a &lt;code&gt;.swift-version&lt;/code&gt; file to your project directory. This is a text file that should contain the minimum Swift version supported by your project, and is also supported by some other tools. The &lt;code&gt;--swift-version&lt;/code&gt; argument takes precedence over any &lt;code&gt;.swift-version&lt;/code&gt; files.&lt;/p&gt; 
&lt;p&gt;Both the &lt;code&gt;.swift-version&lt;/code&gt; file and the &lt;code&gt;--swift-version&lt;/code&gt; option in a &lt;code&gt;.swiftformat&lt;/code&gt; file are applied hierarchically; If you have submodules in your project that use a different Swift version, you can add separate swift version configurations for those directories.&lt;/p&gt; 
&lt;h2&gt;Swift language mode&lt;/h2&gt; 
&lt;p&gt;SwiftFormat also allows you to specify the Swift &lt;em&gt;language mode&lt;/em&gt; used by your project. This is distinct from the Swift compiler version. For example, you can use the Swift 6.0 compiler with either the Swift 5 language mode or the Swift 6 language mode. Some SwiftFormat rules will behave differently under different Swift language modes.&lt;/p&gt; 
&lt;p&gt;You can specify your project&#39;s Swift language mode using the &lt;code&gt;--language-mode&lt;/code&gt; command line argument. You can also add the &lt;code&gt;--language-mode&lt;/code&gt; option to your &lt;code&gt;.swiftformat&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;If not specified, SwiftFormat uses the default language mode of the specified Swift compiler version. The default language mode in Swift 5.x and Swift 6.x is the Swift 5 language mode. If your project uses the Swift 6 language mode, you should specify &lt;code&gt;--language-mode 6&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Config file&lt;/h2&gt; 
&lt;p&gt;Although it is possible to configure SwiftFormat directly by using the command-line &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#options&quot;&gt;options&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#rules&quot;&gt;rules&lt;/a&gt; detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers.&lt;/p&gt; 
&lt;p&gt;A SwiftFormat configuration file consists of one or more command-line options, split onto separate lines, e.g:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--allman true
--indent tab
--disable elseOnSameLine,semicolons
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While formatting, SwiftFormat will automatically check inside each subdirectory for the presence of a &lt;code&gt;.swiftformat&lt;/code&gt; file and will apply any options that it finds there to the files in that directory.&lt;/p&gt; 
&lt;p&gt;This allows you to override certain rules or formatting options just for a particular directory of files. You can also specify excluded files relative to that directory using &lt;code&gt;--exclude&lt;/code&gt;, which may be more convenient than specifying them at the top-level:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--exclude Pods,Generated
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--exclude&lt;/code&gt; option takes a comma-delimited list of file or directory paths to exclude from formatting. Excluded paths are relative to the config file containing the &lt;code&gt;--exclude&lt;/code&gt; command. The excluded paths can include wildcards, specified using Unix &quot;Glob&quot; syntax, as &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#globs&quot;&gt;documented below&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Config files named &quot;.swiftformat&quot; will be processed automatically, however, you can select an additional configuration file to use for formatting using the &lt;code&gt;--config &quot;path/to/config/file&quot;&lt;/code&gt; command-line argument. A configuration file selected using &lt;code&gt;--config&lt;/code&gt; does not need to be named &quot;.swiftformat&quot;, and can be located outside of the project directory.&lt;/p&gt; 
&lt;p&gt;The config file format is designed to be edited by hand. You may include blank lines for readability, and can also add comments using a hash prefix (#), e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# format options
--allman true
--indent tab # tabs FTW!

# file options
--exclude Pods

# rules
--disable elseOnSameLine,semicolons
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can create multiple configuration sections within a single &lt;code&gt;.swiftformat&lt;/code&gt; file to apply different formatting options to different parts of your project. Each section should specify a &lt;code&gt;--filter&lt;/code&gt; glob pattern to determine which files the configuration applies to. Options in that section are used when formatting files that match &lt;code&gt;--filter&lt;/code&gt; glob, in addition to the base options in the file.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--enable indent
--indent 4

[Tests]
--filter **/Tests/**
--enable noForceUnwrapInTests
--enable noForceTryInTests
--indent 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would prefer not to edit the configuration file by hand, you can use the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-source-editor-extension&quot;&gt;SwiftFormat for Xcode&lt;/a&gt; app to edit the configuration and export a configuration file. You can also use the swiftformat command-line-tool&#39;s &lt;code&gt;--inferoptions&lt;/code&gt; command to generate a config file from your existing project, like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd /path/to/project
$ swiftformat --infer-options . --output .swiftformat
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Globs&lt;/h2&gt; 
&lt;p&gt;When excluding files from formatting using the &lt;code&gt;--exclude&lt;/code&gt; option, you may wish to make use of wildcard paths (aka &quot;Globs&quot;) to match all files that match a particular naming convention without having to manually list them all.&lt;/p&gt; 
&lt;p&gt;SwiftFormat&#39;s glob syntax is based on Ruby&#39;s implementation, which varies slightly from the Unix standard. The following patterns are supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt; - A single star matches zero or more characters in a filename, but &lt;em&gt;not&lt;/em&gt; a &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**&lt;/code&gt; - A double star will match anything, including one or more &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;?&lt;/code&gt; - A question mark will match any single character except &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;[abc]&lt;/code&gt; - Matches any single character inside the brackets.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;[a-z]&lt;/code&gt; - Matches a single character in the specified range in the brackets.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;{foo,bar}&lt;/code&gt; - Matches any one of the comma-delimited strings inside the braces.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;foo.swift&lt;/code&gt; - Matches the file &quot;foo.swift&quot; in the same directory as the config file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;*.swift&lt;/code&gt; - Matches any Swift file in the same directory as the config file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;foo/bar.swift&lt;/code&gt; - Matches the file &quot;bar.swift&quot; in the directory &quot;foo&quot;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**/foo.swift&lt;/code&gt; - Matches any file named &quot;foo.swift&quot; in the project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**/*.swift&lt;/code&gt; - Matches any Swift file in the project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**/Generated&lt;/code&gt; - Matches any folder called &lt;code&gt;Generated&lt;/code&gt; in the project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;**/*_generated.swift&lt;/code&gt; - Matches any Swift file with the suffix &quot;_generated&quot; in the project.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Linting&lt;/h2&gt; 
&lt;p&gt;SwiftFormat is primarily designed as a formatter rather than a linter, i.e. it is designed to fix your code rather than tell you what&#39;s wrong with it. However, sometimes it can be useful to verify that code has been formatted in a context where it is not desirable to actually change it.&lt;/p&gt; 
&lt;p&gt;A typical example would be as part of a CI (Continuous Integration) process, where you may wish to have an automated script that checks committed code for style violations. While you can use a separate tool such as &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; for this, it makes sense to be able to validate the formatting against the exact same rules as you are using to apply it.&lt;/p&gt; 
&lt;p&gt;In order to run SwiftFormat as a linter, you can use the &lt;code&gt;--lint&lt;/code&gt; command-line option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swiftformat --lint path/to/project
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This runs the same rules as format mode, and all the same configuration options apply, however, no files will be modified. Instead, SwiftFormat will format each file in memory and then compare the result against the input and report the lines that required changes.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;--lint&lt;/code&gt; option is similar to &lt;code&gt;--dry-run&lt;/code&gt;, but &lt;code&gt;--lint&lt;/code&gt; returns warnings for every line that required changes, and will return a nonzero error code (see &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#error-codes&quot;&gt;Error codes&lt;/a&gt; below) if any changes are detected, which is useful if you want it to fail a build step on your CI server.&lt;/p&gt; 
&lt;p&gt;If you would prefer &lt;code&gt;--lint&lt;/code&gt; not to fail your build, you can use the &lt;code&gt;--lenient&lt;/code&gt; option to force SwiftFormat to return success in &lt;code&gt;--lint&lt;/code&gt; mode even when formatting issues were detected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swiftformat --lint --lenient path/to/project
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, &lt;code&gt;--lint&lt;/code&gt; will only report lines that require formatting, but you can use the additional &lt;code&gt;--verbose&lt;/code&gt; flag to display additional info about which files were checked, even if there were no changes needed.&lt;/p&gt; 
&lt;p&gt;If you would prefer not to see a warning for each and every formatting change, you can use the &lt;code&gt;--quiet&lt;/code&gt; flag to suppress all output except errors.&lt;/p&gt; 
&lt;p&gt;Sometimes you may wish to autoformat some rules, but only lint others. To do that, use the &lt;code&gt;--lintonly&lt;/code&gt; option in your config file to specify rules that should only be applied in &lt;code&gt;--lint&lt;/code&gt; mode:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--rules braces,indent
--lint-only trailingClosures,unusedArguments
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Error codes&lt;/h2&gt; 
&lt;p&gt;The swiftformat command-line tool will always exit with one of the following codes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;0 - Success. This code will be returned in the event of a successful formatting run or if &lt;code&gt;--lint&lt;/code&gt; detects no violations.&lt;/li&gt; 
 &lt;li&gt;1 - Lint failure. This code will be returned when running in &lt;code&gt;--lint&lt;/code&gt; mode, or when autocorrecting in &lt;code&gt;--strict&lt;/code&gt; mode, if the input requires formatting.&lt;/li&gt; 
 &lt;li&gt;70 - Program error. This code will be returned if there is a problem with the input or configuration arguments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Cache&lt;/h2&gt; 
&lt;p&gt;SwiftFormat uses a cache file to avoid reformatting files that haven&#39;t changed. For a large project, this can significantly reduce processing time.&lt;/p&gt; 
&lt;p&gt;By default, the cache is stored in &lt;code&gt;~/Library/Caches/com.charcoaldesign.swiftformat&lt;/code&gt; on macOS, or &lt;code&gt;/var/tmp/com.charcoaldesign.swiftformat&lt;/code&gt; on Linux. Use the command-line option &lt;code&gt;--cache ignore&lt;/code&gt; to ignore the cached version and re-apply formatting to all files. Alternatively, you can use &lt;code&gt;--cache clear&lt;/code&gt; to delete the cache (or you can just manually delete the cache file).&lt;/p&gt; 
&lt;p&gt;The cache is shared between all projects. The file is fairly small, as it only stores the path and size for each file, not the contents. If you do start experiencing slowdown due to the cache growing too large, you might want to consider using a separate cache file for each project.&lt;/p&gt; 
&lt;p&gt;You can specify a custom cache file location by passing a path as the &lt;code&gt;--cache&lt;/code&gt; option value. For example, you might want to store the cache file inside your project directory. It is fine to check in the cache file if you want to share it between different users of your project, as the paths stored in the cache are relative to the location of the formatted files.&lt;/p&gt; 
&lt;h2&gt;File headers&lt;/h2&gt; 
&lt;p&gt;SwiftFormat can be configured to strip or replace the header comments in every file with a template. The &quot;header comment&quot; is defined as a comment block that begins on the first nonblank line in the file, and is followed by at least one blank line. This may consist of a single comment body, or multiple comments on consecutive lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// This is a header comment
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// This is a regular comment
func foo(bar: Int) -&amp;gt; Void { ... }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The header template is a string that you provide using the &lt;code&gt;--header&lt;/code&gt; command-line option. Passing a value of &lt;code&gt;ignore&lt;/code&gt; (the default) will leave the header comments unmodified. Passing &lt;code&gt;strip&lt;/code&gt; or an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt; will remove them. If you wish to provide a custom header template, the format is as follows:&lt;/p&gt; 
&lt;p&gt;For a single-line template: &lt;code&gt;--header &quot;Copyright (c) 2017 Foobar Industries&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For a multiline comment, mark linebreaks with &lt;code&gt;\n&lt;/code&gt;: &lt;code&gt;--header &quot;First line\nSecond line&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can optionally include Swift comment markup in the template if you wish: &lt;code&gt;--header &quot;/*--- Header comment ---*/&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;If you do not include comment markup, each line in the template will be prepended with &lt;code&gt;//&lt;/code&gt; and a single space.&lt;/p&gt; 
&lt;p&gt;It is common practice to include the file name, creation date and/or the current year in a comment header copyright notice. To do that, you can use the following placeholders:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;{file}&lt;/code&gt; - the name of the file&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{year}&lt;/code&gt; - the current year&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{created}&lt;/code&gt; - the date on which the file was created&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{created.year}&lt;/code&gt; - the year in which the file was created&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{author.name}&lt;/code&gt; - the name of the user who first committed the file&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{author.email}&lt;/code&gt; - the email of the user who first committed the file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, a header template of:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;--header &quot;{file}\nCopyright (c) {year} Foobar Industries\nCreated by John Smith on {created}.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will be formatted as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// SomeFile.swift
// Copyright (c) 2019 Foobar Industries
// Created by John Smith on 01/02/2016.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the &lt;code&gt;{year}&lt;/code&gt; value and &lt;code&gt;{created}&lt;/code&gt; date format are determined from the current locale and timezone of the machine running the script. &lt;code&gt;{author.name}&lt;/code&gt; and &lt;code&gt;{author.email}&lt;/code&gt; requires the project to be version controlled by git.&lt;/p&gt; 
&lt;h2&gt;Markdown formatting&lt;/h2&gt; 
&lt;p&gt;SwiftFormat can format Swift code blocks inside Markdown files (&lt;code&gt;.md&lt;/code&gt;). This is useful for keeping code examples in documentation, README files, and other markdown content properly formatted.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;  ### Sample README
  
  This is a nice project with lots of cool APIs to know about, including:
  
  ```swift
  func foo(
- bar: Bar,
- baaz: Baaz
+     bar: Bar,
+     baaz: Baaz
  ) -&amp;gt; Foo { ... }
  ```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To format Swift code blocks in markdown files, use the &lt;code&gt;--markdown-files&lt;/code&gt; option with either &lt;code&gt;strict&lt;/code&gt; or &lt;code&gt;lenient&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ swiftformat . --markdown-files strict
$ swiftformat . --markdown-files lenient
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or add it to your &lt;code&gt;.swiftformat&lt;/code&gt; config file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--markdown-files strict
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Formatting modes:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;SwiftFormat supports two modes for handling markdown files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lenient&lt;/code&gt; (default): Ignores parsing errors in code blocks and continues formatting&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;strict&lt;/code&gt;: Fails if any code blocks contain parsing errors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;SwiftFormat&#39;s tokenizer is more permissive than the Swift compiler and typically only emits errors when encountering unbalanced scope tokens like &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Code block options:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can specify options for options for individual code blocks by adding them after the opening delimiter. For example, you can use &lt;code&gt;no-format&lt;/code&gt; to prevent a code block from being parsed or formatted:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;```swift no-format
func example()
{
    doSomething()
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also specify SwiftFormat command line options to configure the behavior of individual rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;```swift --indent 2
func example() {
  doSomething()
}
```

```swift --disable redundantSelf
func example() {
    self.doSomething()
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Q. How is this different from SwiftLint?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. SwiftLint is primarily designed to find and report code smells and style violations in your code. SwiftFormat is designed to fix them. While SwiftLint can autocorrect some issues, and SwiftFormat has some support for &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#linting&quot;&gt;linting&lt;/a&gt;, their primary functions are different.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. Can SwiftFormat and SwiftLint be used together?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. Absolutely! The style rules encouraged by both tools are quite similar, and SwiftFormat even fixes some style violations that SwiftLint warns about but can&#39;t currently autocorrect.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. What platforms does SwiftFormat support?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. SwiftFormat works on macOS 10.13 (High Sierra) and above, and also runs on Ubuntu Linux and Windows.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. What versions of Swift are supported?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. The SwiftFormat framework and command-line tool can be compiled using Swift 5.3 and above, and can format programs written in Swift 4.x or 5. Swift 3.x is no longer actively supported. If you are still using Swift 3.x or earlier and find that SwiftFormat breaks your code, the best solution is probably to revert to an earlier SwiftFormat release, or enable only a small subset of rules. Use the &lt;code&gt;--swift-version&lt;/code&gt; argument to enable additional rules specific to later Swift versions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. SwiftFormat made changes I didn&#39;t want it to. How can I find out which rules to disable?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. If you run SwiftFormat using the &lt;code&gt;--verbose&lt;/code&gt; option, it will tell you which rules were applied to each file. You can then selectively disable certain rules using the &lt;code&gt;--disable&lt;/code&gt; argument (see below).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;*Q. People on my team have different SwiftFormat versions installed. How can we ensure consistent formatting?&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. You can specify a &lt;code&gt;--min-version&lt;/code&gt; argument in your project&#39;s .swiftformat` file to fail the build if developers attempt to use an older SwiftFormat version.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. How can I modify the formatting rules?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. Many configuration options are exposed in the command-line interface or &lt;code&gt;.swiftformat&lt;/code&gt; configuration file. You can either set these manually, or use the &lt;code&gt;--infer-options&lt;/code&gt; argument to automatically generate the configuration from your existing project.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If there is a rule that you don&#39;t like, and which cannot be configured to your liking via the command-line options, you can disable one or more rules by using the &lt;code&gt;--disable&lt;/code&gt; argument, followed by the name of the rules, separated by commas. You can display a list of all supported rules using the &lt;code&gt;--rules&lt;/code&gt; argument, and their behaviors are documented above this section in the README.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you are using the Xcode source editor extension, rules and options can be configured using the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-source-editor-extension&quot;&gt;SwiftFormat for Xcode&lt;/a&gt; host application. Unfortunately, due to limitation of the Extensions API, there is no way to configure these on a per-project basis.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If the options you want aren&#39;t exposed, and disabling the rule doesn&#39;t solve the problem, the rules are implemented in the file &lt;code&gt;Rules.swift&lt;/code&gt;, so you can modify them and build a new version of the command-line tool. If you think your changes might be generally useful, make a pull request.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Q. I don&#39;t want to be surprised by new rules added when I upgrade SwiftFormat. How can I prevent this?&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. You can use the &lt;code&gt;--rules&lt;/code&gt; argument to specify an exclusive list of rules to run. If new rules are added, they won&#39;t be enabled if you have specified a &lt;code&gt;--rules&lt;/code&gt; list in your SwiftFormat configuration.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. Why can&#39;t I set the indent width or choose between tabs/spaces in the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#xcode-source-editor-extension&quot;&gt;SwiftFormat for Xcode&lt;/a&gt; options?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Indent width and tabs/spaces can be configured in Xcode on a per project-basis. You&#39;ll find the option under &quot;Text Settings&quot; in the Files inspector of the right-hand sidebar.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. After applying SwiftFormat, my code won&#39;t compile. Is that a bug?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. SwiftFormat should ideally never break your code. Check the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#known-issues&quot;&gt;known issues&lt;/a&gt;, and if it&#39;s not already listed there, or the suggested workaround doesn&#39;t solve your problem, please &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/issues&quot;&gt;open an issue on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. Can I use SwiftFormat to lint my code without changing it?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. Yes, see the &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#linting&quot;&gt;linting&lt;/a&gt; section above for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. Can I use the &lt;code&gt;SwiftFormat.framework&lt;/code&gt; inside another app?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. Yes, the SwiftFormat framework can be included in an app or test target, and used for many kinds of parsing and processing of Swift source code besides formatting. The SwiftFormat framework is available as a &lt;a href=&quot;https://cocoapods.org/pods/SwiftFormat&quot;&gt;CocoaPod&lt;/a&gt; for easy integration.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. How to create own rule?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. 1) Open &lt;code&gt;SwiftFormat.xcodeproj&lt;/code&gt;; 2) Add a rule in &lt;code&gt;Sources/Rules/..&lt;/code&gt;; 3) Add a test in &lt;code&gt;Tests/Rules/..&lt;/code&gt;; 4) Add an example in &lt;code&gt;Sources/Examples.swift&lt;/code&gt;; 5) Run all tests.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Q. How do I run and debug the command line tool in Xcode while developing a new rule?&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A. You can run the &lt;code&gt;swiftformat&lt;/code&gt; command line tool via the &lt;code&gt;Swift Format (Command Line Tool)&lt;/code&gt; scheme, and you can pass in arguments like &lt;code&gt;/path/to/my/code --config /path/to/my/config&lt;/code&gt; as the &lt;code&gt;Arguments Passed On Launch&lt;/code&gt; in Xcode&#39;s scheme editor. More instructions are available &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/pull/1804#issuecomment-2263079432&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Known issues&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When using the Xcode Source Editor Extension, the SwiftFormat menu sometimes disappears from Xcode. If this happens, try moving or renaming Xcode temporarily and then changing it back. Failing that, the suggestions in &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/issues/494&quot;&gt;this thread&lt;/a&gt; may help.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;enumNamespaces&lt;/code&gt; rule replaces classes that have only static members with an &lt;code&gt;enum&lt;/code&gt;. If the class is subclassed, or if there is code that depends on the class exposing certain runtime behaviors, this may break the program. To solve this you can either fix it on a per-case basis by adding a &lt;code&gt;// swiftformat:disable:next enumNamespaces&lt;/code&gt; comment directive above the class declaration, or you can add &lt;code&gt;--enum-namespaces structs-only&lt;/code&gt; to prevent the rule being applied to classes, or you can just disable the &lt;code&gt;enumNamespaces&lt;/code&gt; rule completely.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;redundantVoidReturnType&lt;/code&gt; rule can inadvertently alter the type signature for closures, for example in cases where the closure calls a &lt;code&gt;@discardableResult&lt;/code&gt; function. To solve this you can either fix it on a per-case basis by adding a &lt;code&gt;// swiftformat:disable:next redundantVoidReturnType&lt;/code&gt; comment directive to disable the rule for a specific call site, or you can add &lt;code&gt;--closure-void preserve&lt;/code&gt; to your &lt;a href=&quot;https://raw.githubusercontent.com/nicklockwood/SwiftFormat/main/#configuration&quot;&gt;configuration&lt;/a&gt; to disable the rule completely for closures (regular functions or methods aren&#39;t affected).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;redundantType&lt;/code&gt; rule can introduce ambiguous code in certain cases when using the default mode of &lt;code&gt;--redundant-type inferred&lt;/code&gt;. This can be worked around by by using &lt;code&gt;--redundant-type explicit&lt;/code&gt;, or by manually removing the redundant type reference on the affected line, or by using the &lt;code&gt;// swiftformat:disable:next redundantType&lt;/code&gt; comment directive to disable the rule at the call site (or just disable the &lt;code&gt;redundantType&lt;/code&gt; rule completely).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a type initializer or factory method returns an implicitly unwrapped optional value then the &lt;code&gt;redundantType&lt;/code&gt; rule may remove the explicit type in a situation where it&#39;s actually required. To work around this you can either use &lt;code&gt;--redundant-type explicit&lt;/code&gt;, or use the &lt;code&gt;// swiftformat:disable:next redundantType&lt;/code&gt; comment directive to disable the rule at the call site (or just disable the &lt;code&gt;redundantType&lt;/code&gt; rule completely).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;initCoderUnavailable&lt;/code&gt; rule, if an &lt;code&gt;init&lt;/code&gt; that is marked as unavailable is overridden elsewhere in the program then it will cause a compilation error. The recommended workaround is to remove the override (which shouldn&#39;t affect the program behavior if the init was really unused) or use the &lt;code&gt;// swiftformat:disable:next initCoderUnavailable&lt;/code&gt; comment directive to disable the rule for the overridden init (or just disable the &lt;code&gt;initCoderUnavailable&lt;/code&gt; rule completely).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;extensionAccessControl&lt;/code&gt; rule with the &lt;code&gt;--extension-acl on-extension&lt;/code&gt; option, if you have public methods defined on an internal type defined in another file, the resultant public extension will no longer compile. The recommended solution is to manually remove the &lt;code&gt;public&lt;/code&gt; modifier (this won&#39;t change the program behavior) or disable the &lt;code&gt;extensionAccessControl&lt;/code&gt; rule.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;preferKeyPath&lt;/code&gt; rule, conversion of &lt;code&gt;compactMap { $0.foo }&lt;/code&gt; to &lt;code&gt;compactMap(\.foo)&lt;/code&gt; or &lt;code&gt;flatMap { $0.foo }&lt;/code&gt; to &lt;code&gt;flatMap(\.foo)&lt;/code&gt; will result in code that fails to compile if &lt;code&gt;foo&lt;/code&gt; is not an &lt;code&gt;Optional&lt;/code&gt; property. This is due to a difference in the way that Swift handles type inference for closures vs keyPaths, as discussed &lt;a href=&quot;https://bugs.swift.org/browse/SR-13347&quot;&gt;here&lt;/a&gt;. The recommended workaround is to replace &lt;code&gt;compactMap()&lt;/code&gt; or &lt;code&gt;flatMap()&lt;/code&gt; with &lt;code&gt;map()&lt;/code&gt; in these cases, which will not change the behavior of the code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;--self remove&lt;/code&gt; option, the &lt;code&gt;redundantSelf&lt;/code&gt; rule will remove references to &lt;code&gt;self&lt;/code&gt; in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the &lt;code&gt;--self-required&lt;/code&gt; option to provide a comma-delimited list of methods to be excluded from the rule. The &lt;code&gt;expect()&lt;/code&gt; function from the popular &lt;a href=&quot;https://github.com/Quick/Nimble&quot;&gt;Nimble&lt;/a&gt; unit testing framework is already excluded by default. If you are using the &lt;code&gt;--self insert&lt;/code&gt; option then this is not an issue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you assign &lt;code&gt;SomeClass.self&lt;/code&gt; to a variable and then instantiate an instance of the class using that variable, Swift requires that you use an explicit &lt;code&gt;.init()&lt;/code&gt;, however, the &lt;code&gt;redundantInit&lt;/code&gt; rule is not currently capable of detecting this situation in all cases, and may remove the &lt;code&gt;.init&lt;/code&gt;. To work around this issue, use the &lt;code&gt;// swiftformat:disable:next redundantInit&lt;/code&gt; comment directive to disable the rule for any affected lines of code (or just disable the &lt;code&gt;redundantInit&lt;/code&gt; rule completely).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;--self insert&lt;/code&gt; option can only recognize locally declared member variables, not ones inherited from superclasses or extensions in other files, so it cannot insert missing &lt;code&gt;self&lt;/code&gt; references for those. Note that the reverse is not true: &lt;code&gt;--self remove&lt;/code&gt; should remove &lt;em&gt;all&lt;/em&gt; redundant &lt;code&gt;self&lt;/code&gt; references.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;trailingClosures&lt;/code&gt; rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default. You can use the &lt;code&gt;--trailing-closures&lt;/code&gt; and &lt;code&gt;--never-trailing&lt;/code&gt; arguments to explicitly opt in or out of trailing closure support for specific functions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;isEmpty&lt;/code&gt; rule will convert &lt;code&gt;count == 0&lt;/code&gt; to &lt;code&gt;isEmpty&lt;/code&gt; even for types that do not have an &lt;code&gt;isEmpty&lt;/code&gt; method, such as &lt;code&gt;NSArray&lt;/code&gt;/&lt;code&gt;NSDictionary&lt;/code&gt;/etc. Use of Foundation collections in Swift code is pretty rare, but just in case, the rule is disabled by default.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;preferForLoop&lt;/code&gt; rule will convert &lt;code&gt;foo.forEach&lt;/code&gt; to &lt;code&gt;for item in foo&lt;/code&gt; even for types that do not conform to the &lt;code&gt;Sequence&lt;/code&gt; protocol and cannot be used with a &lt;code&gt;for ... in&lt;/code&gt; loop. There are no such types built in, but custom types may have this issue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If a file begins with a comment, the &lt;code&gt;stripHeaders&lt;/code&gt; rule will remove it if it is followed by a blank line. To avoid this, make sure that the first comment is directly followed by a line of code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error &quot;dyld: Library not loaded: @rpath/libswiftCore.dylib&quot;. To fix this, you need to install the &lt;a href=&quot;https://support.apple.com/kb/DL1998&quot;&gt;Swift 5 Runtime Support for Command Line Tools&lt;/a&gt;. These tools are included by default in macOS 10.14.4 and later.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you have a generic typealias that defines a closure (e.g. &lt;code&gt;typealias ResultCompletion&amp;lt;T&amp;gt; = (Result&amp;lt;T, Error&amp;gt;) -&amp;gt; Void&lt;/code&gt;) and use this closure as an argument in a generic function (e.g. &lt;code&gt;func handle&amp;lt;T: Decodable&amp;gt;(_ completion: ResultCompletion&amp;lt;T&amp;gt;)&lt;/code&gt;), the &lt;code&gt;opaqueGenericParameters&lt;/code&gt; rule may update the function definition to use &lt;code&gt;some&lt;/code&gt; syntax (e.g. &lt;code&gt;func handle(_ completion: ResultCompletion&amp;lt;some Decodable&amp;gt;)&lt;/code&gt;). &lt;code&gt;some&lt;/code&gt; syntax is not permitted in closure parameters, so this will no longer compile. Workarounds include spelling out the closure explicitly in the generic function (instead of using a &lt;code&gt;typealias&lt;/code&gt;) or disabling the &lt;code&gt;opaqueGenericParameters&lt;/code&gt; rule (e.g. with &lt;code&gt;// swiftformat:disable:next opaqueGenericParameters&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If compiling for macOS with Xcode 14.0 and configuring SwiftFormat with &lt;code&gt;--swift-version 5.7&lt;/code&gt;, the &lt;code&gt;genericExtensions&lt;/code&gt; rule may cause a build failure by updating extensions of the format &lt;code&gt;extension Collection where Element == Foo&lt;/code&gt; to &lt;code&gt;extension Collection&amp;lt;Foo&amp;gt;&lt;/code&gt;. This fails to compile for macOS in Xcode 14.0, because the macOS SDK in that version of Xcode &lt;a href=&quot;https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171&quot;&gt;does not include&lt;/a&gt; the Swift 5.7 standard library. Workarounds include using &lt;code&gt;--swift-version 5.6&lt;/code&gt; instead, updating to Xcode 14.1+, or disabling the &lt;code&gt;genericExtensions&lt;/code&gt; rule (e.g. with &lt;code&gt;// swiftformat:disable:next genericExtensions&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;propertyTypes&lt;/code&gt; rule can cause a build failure in cases where there are multiple static overloads with the same name but different return types. As a workaround you can rename the overloads to no longer conflict, or exclude the property name with &lt;code&gt;--preserve-symbols propertyName,otherPropertyName,etc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;propertyTypes&lt;/code&gt; rule can cause a build failure in cases where the property&#39;s type is a protocol / existential like &lt;code&gt;let shapeStyle: ShapeStyle = .myShapeStyle&lt;/code&gt;, and the value used on the right-hand side is defined in an extension like &lt;code&gt;extension ShapeStyle where Self == MyShapeStyle { static var myShapeStyle: MyShapeStyle { ... } }&lt;/code&gt;. As a workaround you can use the existential &lt;code&gt;any&lt;/code&gt; syntax (&lt;code&gt;let shapeStyle: any ShapeStyle = .myShapeStyle&lt;/code&gt;), which the rule will preserve as-is, or exclude the type name and/or property name with &lt;code&gt;--preserve-symbols ShapeStyle,myShapeStyle,etc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;propertyTypes&lt;/code&gt; rule can cause a build failure in cases like &lt;code&gt;let foo = Foo.bar&lt;/code&gt; where the value is a static member that doesn&#39;t return the same time. For example, &lt;code&gt;let foo: Foo = .bar&lt;/code&gt; would be invalid if the &lt;code&gt;bar&lt;/code&gt; property was defined as &lt;code&gt;static var bar: Bar&lt;/code&gt;. As a workaround you can write the name of the type explicitly, like &lt;code&gt;let foo: Bar = Foo.bar&lt;/code&gt;, or exclude the type name and/or property name with &lt;code&gt;--preserve-symbols Bar,bar,etc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tip Jar&lt;/h2&gt; 
&lt;p&gt;SwiftFormat is not a commercially-funded product, it&#39;s a labor of love given freely to the community. If you find it useful, please consider making a donation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=9ZGWNK5FEZFF6&amp;amp;source=url&quot;&gt;&lt;img src=&quot;https://www.paypalobjects.com/en_GB/i/btn/btn_donate_LG.gif&quot; alt=&quot;Donate via PayPal&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/calda&quot;&gt;Cal Stephens&lt;/a&gt; - Numerous new formatting rules, options and bug fixes&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tonyarnold&quot;&gt;Tony Arnold&lt;/a&gt; - SwiftFormat for Xcode&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vinceburn&quot;&gt;Vincent Bernier&lt;/a&gt; - SwiftFormat for Xcode settings UI&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/markiv&quot;&gt;Vikram Kriplaney&lt;/a&gt; - SwiftFormat for Xcode icon and search feature&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hyperphonic0&quot;&gt;Hyperphonic&lt;/a&gt; - Xcode 12 compatibility for SwiftFormat&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bourvill&quot;&gt;Maxime Marinel&lt;/a&gt; - Git pre-commit hook script&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/palleas&quot;&gt;Romain Pouclet&lt;/a&gt; - Homebrew formula&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aerobounce&quot;&gt;Aerobounce&lt;/a&gt; - Homebrew cask and Sublime Text plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facumenzella&quot;&gt;Facundo Menzella&lt;/a&gt; - Several new formatting rules and options&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aliak00&quot;&gt;Ali Akhtarzada&lt;/a&gt; - Several path-related CLI enhancements&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yonaskolb&quot;&gt;Yonas Kolb&lt;/a&gt; - Swift Package Manager integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Lutzifer&quot;&gt;Wolfgang Lutz&lt;/a&gt; - AppleScript integration instructions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/balitm&quot;&gt;Balázs Kilvády&lt;/a&gt; - Xcode lint warning integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AnthonyMDev&quot;&gt;Anthony Miller&lt;/a&gt; - Improvements to wrap/indent logic&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zizi4n5&quot;&gt;Shingo Takagi&lt;/a&gt; - Several brace-related bug fixes&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cyberbeni&quot;&gt;Benedek Kozma&lt;/a&gt; - Lint-only rules option&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/juri&quot;&gt;Juri Pakaste&lt;/a&gt; - Filelist feature&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/puls&quot;&gt;Jim Puls&lt;/a&gt; - Big Sur icon update&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danyf90&quot;&gt;Daniele Formichelli&lt;/a&gt; - JSON reporter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bobergj&quot;&gt;Jonas Boberg&lt;/a&gt; - Github actions log reporter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/inket&quot;&gt;Mahdi Bchatnia&lt;/a&gt; - Linux build workflow&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/compnerd&quot;&gt;Saleem Abdulrasool&lt;/a&gt; - Windows build workflow&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vox-humana&quot;&gt;Arthur Semenyutin&lt;/a&gt; - Docker image&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MarcoEidinger&quot;&gt;Marco Eidinger&lt;/a&gt; - Swift Package Manager plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hampustagerud&quot;&gt;Hampus Tågerud&lt;/a&gt; - Git integration for fileHeader rule&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nicklockwood&quot;&gt;Nick Lockwood&lt;/a&gt; - Everything else&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(&lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/graphs/contributors&quot;&gt;Full list of contributors&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hmlongco/Factory</title>
      <link>https://github.com/hmlongco/Factory</link>
      <description>&lt;p&gt;A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/hmlongco/Factory&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fhmlongco%2FFactory%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/hmlongco/Factory&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fhmlongco%2FFactory%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/hmlongco/Factory/raw/main/Logo.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.&lt;/p&gt; 
&lt;h2&gt;Factory Version 2.5.3&lt;/h2&gt; 
&lt;p&gt;Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for that environment. Factory is...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Adaptable&lt;/strong&gt;: Factory doesn&#39;t tie you down to a single dependency injection strategy or technique.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful&lt;/strong&gt;: Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performant&lt;/strong&gt;: Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Safe&lt;/strong&gt;: Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Concise&lt;/strong&gt;: Defining a registration usually takes just a single line of code. Same for resolution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Documented&lt;/strong&gt;: Factory has extensive DocC documentation and examples covering its classes, methods, and use cases.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: With all of that Factory is slim and trim, under 1,000 lines of executable code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tested&lt;/strong&gt;: Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Testable&lt;/strong&gt;: Factory ensures your application&#39;s views and services are easily previewable and testable.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free&lt;/strong&gt;: Factory is free and open source under the MIT License.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sound too good to be true? Let&#39;s take a look.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;But before we do, I want to express my thanks to Mercedes-Benz, Süddeutsche Zeitung, and everyone else who&#39;s sponsored my open source work! &lt;a href=&quot;https://github.com/sponsors/hmlongco&quot;&gt;You folks help make this possible.&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;A Simple Factory&lt;/h2&gt; 
&lt;p&gt;Most container-based dependency injection systems require you to define in some way that a given service type is available for injection, and many require some sort of factory or mechanism that will provide a new instance of the service when needed.&lt;/p&gt; 
&lt;p&gt;Factory is no exception. Here&#39;s a simple dependency registration that returns a service that conforms to &lt;code&gt;MyServiceType&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    var myService: Factory&amp;lt;MyServiceType&amp;gt; { 
        Factory(self) { MyService() }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike frameworks that require registering every single type up front, or SwiftUI, where defining a new environment variable requires creating a new EnvironmentKey and adding additional getters and setters, here we simply add a new &lt;code&gt;Factory&lt;/code&gt; computed variable to the default container. When it&#39;s called our Factory is created, its closure is evaluated, and we get an instance of our dependency when we need it.&lt;/p&gt; 
&lt;p&gt;Injecting an instance of our service is equally straightforward. Here&#39;s just one of the many ways Factory can be used.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ContentViewModel: ObservableObject {
    @Injected(\.myService) private var myService
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This particular view model uses one of Factory&#39;s &lt;code&gt;@Injected&lt;/code&gt; property wrappers to request the desired dependency. Similar to &lt;code&gt;@Environment&lt;/code&gt; in SwiftUI, we provide the property wrapper with a keyPath to a factory of the desired type and it resolves that type the moment &lt;code&gt;ContentViewModel&lt;/code&gt; is created.&lt;/p&gt; 
&lt;p&gt;And that&#39;s the core mechanism. In order to use the property wrapper you &lt;em&gt;must&lt;/em&gt; define a factory within the specified container. That factory &lt;em&gt;must&lt;/em&gt; return the desired type when asked. Fail to do either one and the code will simply not compile. As such, Factory is compile-time safe.&lt;/p&gt; 
&lt;p&gt;By the way, if you&#39;re concerned about building Factory&#39;s on the fly, don&#39;t be. Like SwiftUI Views, Factory structs and modifiers are lightweight and transitory value types. They&#39;re created inside computed variables &lt;strong&gt;only&lt;/strong&gt; when they&#39;re needed and then immediately discarded once their purpose has been served.&lt;/p&gt; 
&lt;p&gt;For more examples of Factory definitions that define scopes, use constructor injection, and do parameter passing, see the &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit/registrations&quot;&gt;Registrations&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;Other Factory Resolution Methods&lt;/h2&gt; 
&lt;p&gt;Earlier we demonstrated how to use the &lt;code&gt;Injected&lt;/code&gt; property wrapper. But it&#39;s also possible to bypass the property wrapper and talk to the factory yourself.&lt;/p&gt; 
&lt;p&gt;You can use the shared container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ContentViewModel: ObservableObject {
    private let myService = Container.shared.myService()
    private let eventLogger = Container.shared.eventLogger()
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Just call the desired factory as a function and you&#39;ll get an instance of its managed dependency. It&#39;s that simple.&lt;/p&gt; 
&lt;p&gt;If you&#39;re into container-based dependency injection, note that you can also pass an instance of a container to a view model and obtain an instance of your service directly from that container.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ContentViewModel: ObservableObject {
    let service: MyServiceType
    init(container: Container) {
        service = container.service()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or if you want to use a Composition Root structure, just use the container to provide the required dependencies to a constructor.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    var myRepository: Factory&amp;lt;MyRepositoryType&amp;gt; {
        Factory(self) { MyRepository(service: self.networkService()) }
    }
    var networkService: Factory&amp;lt;Networking&amp;gt; {
        Factory(self) { MyNetworkService() }
    }
}

@main
struct FactoryDemoApp: App {
    let viewModel = MyViewModel(repository: Container.shared.myRepository())
    var body: some Scene {
        WindowGroup {
            NavigationView {
                ContentView(viewModel: viewModel)
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Factory is flexible, and it doesn&#39;t tie you down to a specific dependency injection pattern or technique.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit/resolutions&quot;&gt;Resolutions&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h2&gt;Mocking&lt;/h2&gt; 
&lt;p&gt;If we go back and look at our original view model code one might wonder why we&#39;ve gone to all of this trouble? Why not simply say &lt;code&gt;let myService = MyService()&lt;/code&gt; and be done with it?&lt;/p&gt; 
&lt;p&gt;Or keep the container idea, but write something similar to this…&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    static var myService: MyServiceType { MyService() }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Well, the primary benefit one gains from using a container-based dependency injection system is that we&#39;re able to change the behavior of the system as needed. Consider the following code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct ContentView: View {
    @StateObject var model = ContentViewModel()
    var body: some View {
        Text(model.text())
            .padding()
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Our ContentView uses our view model, which is assigned to a StateObject. Great. But now we want to preview our code. How do we change the behavior of &lt;code&gt;ContentViewModel&lt;/code&gt; so that its &lt;code&gt;MyService&lt;/code&gt; dependency isn&#39;t making live API calls during development?&lt;/p&gt; 
&lt;p&gt;It&#39;s easy. Just replace &lt;code&gt;MyService&lt;/code&gt; with a mock that also conforms to &lt;code&gt;MyServiceType&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;#Preview {
    let _ = Container.shared.myService.register { MockService2() }
    ContentView()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note the line in our preview code where we’re gone back to our container and registered a new closure on our factory. This function overrides the default factory closure.&lt;/p&gt; 
&lt;p&gt;Now when our preview is displayed &lt;code&gt;ContentView&lt;/code&gt; creates a &lt;code&gt;ContentViewModel&lt;/code&gt; which in turn has a dependency on &lt;code&gt;myService&lt;/code&gt; using the &lt;code&gt;Injected&lt;/code&gt; property wrapper. And when the wrapper asks the factory for an instance of &lt;code&gt;MyServiceType&lt;/code&gt; it now gets a &lt;code&gt;MockService2&lt;/code&gt; instead of the &lt;code&gt;MyService&lt;/code&gt; type originally defined.&lt;/p&gt; 
&lt;p&gt;This is a powerful concept that lets us reach deep into a chain of dependencies and alter the behavior of a system as needed.&lt;/p&gt; 
&lt;p&gt;Note that Factory 2.5.1 made it even cleaner.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;#Preview {
    Container.shared.myService.preview { MockService2() }
    ContentView()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit/previews&quot;&gt;Previews&lt;/a&gt; documentation for more.&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;The same concept can be used when writing unit tests. Consider the following.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;final class FactoryCoreTests: XCTestCase {

    override func setUp() {
        super.setUp()
        Container.shared.reset()
    }
    
    func testLoaded() throws {
        Container.shared.accountProvider.register { MockProvider(accounts: .sampleAccounts) }
        let model = Container.shared.someViewModel()
        model.load()
        XCTAssertTrue(model.isLoaded)
    }

    func testEmpty() throws {
        Container.shared.accountProvider.register { MockProvider(accounts: []) }
        let model = Container.shared.someViewModel()
        model.load()
        XCTAssertTrue(model.isEmpty)
    }

    func testErrors() throws {
        Container.shared.accountProvider.register { MockProvider(error: .notFoundError) }
        let model = Container.shared.someViewModel()
        model.load()
        XCTAssertTrue(model.errorMessage == &quot;Some Error&quot;)
    }
    
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Again, Factory makes it easy to reach into a chain of dependencies and make specific changes to the system as needed. This makes testing loading states, empty states, and error conditions simple.&lt;/p&gt; 
&lt;h2&gt;Xcode 16 Testing&lt;/h2&gt; 
&lt;p&gt;Factory also works with Apple&#39;s new Testing framework, and with Xcode 16.3&#39;s new test trait support it&#39;s now also possible to run tests in parallel!&lt;/p&gt; 
&lt;p&gt;Here&#39;s the same set of tests updated for the new framework. The &lt;code&gt;.container&lt;/code&gt; trait provides a new, fresh instance of the main shared container to each one of the tests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Suite(.container) // added container trait
struct FactoryTests {

    @Test func testLoaded() async {
        Container.shared.accountProvider.register { MockProvider(accounts: .sampleAccounts) }
        let model = Container.shared.someViewModel()
        model.load()
        #expect(model.isLoaded)
    }

    @Test func testEmpty() async {
        Container.shared.accountProvider.register { MockProvider(accounts: []) }
        let model = Container.shared.someViewModel()
        model.load()
        #expect(model.isEmpty)
    }

    @Test func testErrors() async {
        Container.shared.accountProvider.register { MockProvider(error: .notFoundError) }
        let model = Container.shared.someViewModel()
        model.load()
        #expect(model.errorMessage == &quot;Some Error&quot;)
    }
    
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use container traits, just add the FactoryTesting library or dependency to your test target.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit/testing&quot;&gt;Testing&lt;/a&gt; for more.&lt;/p&gt; 
&lt;p&gt;But we&#39;re not done yet.&lt;/p&gt; 
&lt;p&gt;Factory has quite a few more tricks up its sleeve...&lt;/p&gt; 
&lt;h2&gt;Scope&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve used Resolver or some other dependency injection system before then you&#39;ve probably experienced the benefits and power of scopes.&lt;/p&gt; 
&lt;p&gt;And if not, the concept is easy to understand: Just how long should an instance of an object live?&lt;/p&gt; 
&lt;p&gt;You&#39;ve no doubt stuffed an instance of a class into a variable and created a singleton at some point in your career. This is an example of a scope. A single instance is created and then used and shared by all of the methods and functions in the app.&lt;/p&gt; 
&lt;p&gt;This can be done in Factory just by adding a scope modifier.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    var networkService: Factory&amp;lt;NetworkProviding&amp;gt; { 
        self { NetworkProvider() }
            .singleton
    }
    var myService: Factory&amp;lt;MyServiceType&amp;gt; { 
        self { MyService() }
            .scope(.session)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now whenever someone requests an instance of &lt;code&gt;networkService&lt;/code&gt; they&#39;ll get the same instance of the object as everyone else.&lt;/p&gt; 
&lt;p&gt;Note that the client neither knows nor cares about the scope. Nor should it. The client is simply given what it needs when it needs it.&lt;/p&gt; 
&lt;p&gt;If no scope is specified the default scope is unique. A new instance of the service will be instantiated and returned every time one is requested from the factory.&lt;/p&gt; 
&lt;p&gt;Other common scopes are &lt;code&gt;cached&lt;/code&gt; and &lt;code&gt;shared&lt;/code&gt;. Cached items are persisted until the cache is reset, while shared items exist just as long as someone holds a strong reference to them. When the last reference goes away, the weakly held shared reference also goes away.&lt;/p&gt; 
&lt;p&gt;Factory has other scope types, plus the ability to add more of your own. See &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit/scopes&quot;&gt;Scopes&lt;/a&gt; for additional examples.&lt;/p&gt; 
&lt;p&gt;Scopes and scope management are powerful tools to have in your dependency injection arsenal.&lt;/p&gt; 
&lt;h2&gt;Simplified Syntax&lt;/h2&gt; 
&lt;p&gt;You may have noticed in the previous example that Factory also provides a bit of syntactical sugar that lets us make our definitions more concise. We simply ask the enclosing container to make a properly bound Factory for us using &lt;code&gt;self.callAsFunction { ... }&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension Container {
    var sugared: Factory&amp;lt;MyServiceType&amp;gt; { 
        self { MyService() }
    }
    var formal: Factory&amp;lt;MyServiceType&amp;gt; { 
        Factory(self) { MyService() }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Both definitions provide the same exact result. The sugared function is even inlined, so there&#39;s not even a performance difference between the two versions.&lt;/p&gt; 
&lt;h2&gt;Contexts&lt;/h2&gt; 
&lt;p&gt;One powerful new feature in Factory 2.1 is contexts. Let&#39;s say that for logistical reasons whenever your application runs in debug mode you &lt;em&gt;never&lt;/em&gt; want it to make calls to your application&#39;s analytics engine.&lt;/p&gt; 
&lt;p&gt;Easy. Just register an override for that particular context.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;container.analytics.onDebug { 
    StubAnalyticsEngine()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are other contexts for unit testing, for SwiftUI previews, and even when running UITests both in the simulator or when running an app on services like BrowserStack. See the documentation for more.&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;p&gt;Factory can also help you debug your code. When running in DEBUG mode Factory allows you to trace the injection process and see every object instantiated or returned from a cache during a given resolution cycle.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;0: Factory.Container.cycleDemo&amp;lt;CycleDemo&amp;gt; = N:105553131389696
1:     Factory.Container.aService&amp;lt;AServiceType&amp;gt; = N:105553119821680
2:         Factory.Container.implementsAB&amp;lt;AServiceType &amp;amp; BServiceType&amp;gt; = N:105553119821680
3:             Factory.Container.networkService&amp;lt;NetworkService&amp;gt; = N:105553119770688
1:     Factory.Container.bService&amp;lt;BServiceType&amp;gt; = N:105553119821680
2:         Factory.Container.implementsAB&amp;lt;AServiceType &amp;amp; BServiceType&amp;gt; = C:105553119821680
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can make it a lot easier to see the entire dependency tree for a given object or service.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit/debugging&quot;&gt;Debugging&lt;/a&gt; for more on this and other features.&lt;/p&gt; 
&lt;h2&gt;Observation / @MainActor&lt;/h2&gt; 
&lt;p&gt;Factory also works with Observation, &lt;code&gt;@MainActor&lt;/code&gt; and actor isolation in Swift concurrency. Just annotate the Factory as needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Observable view model isolated to @MainActor
@MainActor
@Observable
class ContentViewModel {
    @ObservationIgnored @Injected(\.myService) private var service
    ...
}

// Factory isolated to @MainActor
extension Container {
    @MainActor
    var contentViewModel: Factory&amp;lt;ContentViewModel&amp;gt; {
        self { @MainActor in ContentViewModel() }
    }
}

// View with injected view model
struct ContentView: View {
    @InjectedObservable(\.contentViewModel) var viewModel
    var body: some View {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;InjectedObservable&lt;/code&gt; was another new addition added to Factory 2.4.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit/swiftui&quot;&gt;SwiftUI&lt;/a&gt; for more discussion.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;A single README file barely scratches the surface. Fortunately, Factory is thoroughly documented.&lt;/p&gt; 
&lt;p&gt;Current DocC documentation can be found in the project as well as online on &lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Factory supports the Swift Package Manager and has legacy support for CocoaPods.&lt;/p&gt; 
&lt;p&gt;Factory&#39;s primary import library is named &lt;code&gt;FactoryKit&lt;/code&gt;. This is done in order to avoid SPM import conflicts between the library itself and the &lt;code&gt;Factory&lt;/code&gt; object defined within the library.&lt;/p&gt; 
&lt;p&gt;Just add the Factory package to your project, select the &lt;code&gt;FactoryKit&lt;/code&gt; library when asked, and then import &lt;code&gt;FactoryKit&lt;/code&gt; in your Swift files where needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import FactoryKit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While the original &lt;code&gt;Factory&lt;/code&gt; library import still exists, it will be deprecated in the future.&lt;/p&gt; 
&lt;p&gt;If you&#39;re using Swift Testing you&#39;ll probably also want to also import the &lt;code&gt;FactoryTesting&lt;/code&gt; library and add it to your test target. (Do &lt;strong&gt;not&lt;/strong&gt; add it to your app target or other targets.)&lt;/p&gt; 
&lt;p&gt;Similarly, don&#39;t import &lt;code&gt;FactoryKit&lt;/code&gt; into the Test target. That can lead to duplicate factories and indeterminate behavior.&lt;/p&gt; 
&lt;p&gt;Note that the current version of Factory requires Swift 5.10 minimum and that the minimum version of iOS currently supported with this release is iOS 13.&lt;/p&gt; 
&lt;h2&gt;FactoryKit Migration&lt;/h2&gt; 
&lt;p&gt;Factory 2.5.0 works with SPM, Xcode 16 under Strict Concurrency guidelines, and with Swift Testing.&lt;/p&gt; 
&lt;p&gt;If you&#39;re a current Factory user it&#39;s recommended that you switch from importing &lt;code&gt;Factory&lt;/code&gt; to &lt;code&gt;FactoryKit&lt;/code&gt;. This avoids SPM naming conflicts between the import library name and the primary &lt;code&gt;Factory&lt;/code&gt; object.&lt;/p&gt; 
&lt;p&gt;To do so, open your project in Xcode and...&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Select &lt;code&gt;File &amp;gt; Packages &amp;gt; Update to Latest Package Versions&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Select &lt;code&gt;File &amp;gt; Packages &amp;gt; Reset Package Caches&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Go to your application target, remove the &lt;code&gt;Factory&lt;/code&gt; library, and add the &lt;code&gt;FactoryKit&lt;/code&gt; library&lt;/li&gt; 
 &lt;li&gt;Go a global search and replace, renaming &lt;code&gt;import Factory&lt;/code&gt; to &lt;code&gt;import FactoryKit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Clean and build your project.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You may need to do the same for any other targets or modules that imported Factory.&lt;/p&gt; 
&lt;h2&gt;Discussion Forum&lt;/h2&gt; 
&lt;p&gt;Discussion and comments on Factory and Factory 2.0 can be found in &lt;a href=&quot;https://github.com/hmlongco/Factory/discussions&quot;&gt;Discussions&lt;/a&gt;. Go there if you have something to say or if you want to stay up to date.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Factory is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; 
&lt;h2&gt;Sponsor Factory!&lt;/h2&gt; 
&lt;p&gt;If you want to support my work on Factory and Resolver, consider a &lt;a href=&quot;https://github.com/sponsors/hmlongco&quot;&gt;GitHub Sponsorship&lt;/a&gt;! Many levels exist for increased support and even for mentorship and company training.&lt;/p&gt; 
&lt;p&gt;Or you can just buy me a cup of coffee!&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;Factory is designed, implemented, documented, and maintained by &lt;a href=&quot;https://www.linkedin.com/in/hmlong/&quot;&gt;Michael Long&lt;/a&gt;, a Lead iOS Software Engineer and a Top 1,000 Technology Writer on Medium.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;LinkedIn: &lt;a href=&quot;https://www.linkedin.com/in/hmlong/&quot;&gt;@hmlong&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Medium: &lt;a href=&quot;https://medium.com/@michaellong&quot;&gt;@michaellong&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;BlueSky: &lt;a href=&quot;https://bsky.app/profile/hmlongco.bsky.social&quot;&gt;@hmlongco&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Michael was also one of Google&#39;s &lt;a href=&quot;https://opensource.googleblog.com/2021/09/announcing-latest-open-source-peer-bonus-winners.html&quot;&gt;Open Source Peer Reward&lt;/a&gt; winners in 2021 for his work on Resolver.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Special thanks to Ákos Grabecz (agrabz) and Mahmood Tahir (tahirmt) for their recent contributions that ensure Factory works hand-in-hand with Swift Testing.&lt;/p&gt; 
&lt;h2&gt;Additional Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hmlongco.github.io/Factory/documentation/factorykit&quot;&gt;Factory Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05&quot;&gt;Factory 1.0 and Functional Dependency Injection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://betterprogramming.pub/factory-multiple-module-registration-f9d19721a31d?sk=a03d78484d8c351762306ff00a8be67c&quot;&gt;Factory 1.0: Multiple Module Registration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hmlongco/Resolver&quot;&gt;Resolver: A Swift Dependency Injection System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of Control Design Pattern ~ Wikipedia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control Containers and the Dependency Injection pattern ~ Martin Fowler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cocoacasts.com/nuts-and-bolts-of-dependency-injection-in-swift/&quot;&gt;Nuts and Bolts of Dependency Injection in Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cocoacasts.com/dependency-injection-in-swift&quot;&gt;Dependency Injection in Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/better-programming/taking-swift-dependency-injection-to-the-next-level-b71114c6a9c6&quot;&gt;Swift 5.1 Takes Dependency Injection to the Next Level&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hmlongco/Builder&quot;&gt;Builder: A Declarative UIKit Library (Uses Factory in Demo)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Stengo/DeskPad</title>
      <link>https://github.com/Stengo/DeskPad</link>
      <description>&lt;p&gt;A virtual monitor for screen sharing&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/Stengo/DeskPad/raw/main/DeskPad/Assets.xcassets/AppIcon.appiconset/Icon-256.png&quot;&gt; &lt;img src=&quot;https://github.com/Stengo/DeskPad/raw/main/DeskPad/Assets.xcassets/AppIcon.appiconset/Icon-256.png?raw=true&quot; alt=&quot;DeskPad Icon&quot; width=&quot;128&quot; /&gt; &lt;/a&gt; &lt;/h3&gt; 
&lt;h1&gt;DeskPad&lt;/h1&gt; 
&lt;p&gt;A virtual monitor for screen sharing&lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/Stengo/DeskPad/raw/main/screenshot.jpg&quot;&gt; &lt;img src=&quot;https://github.com/Stengo/DeskPad/raw/main/screenshot.jpg?raw=true&quot; alt=&quot;DeskPad Screenshot&quot; /&gt; &lt;/a&gt; &lt;/h3&gt; 
&lt;p&gt;Certain workflows require sharing the entire screen (usually due to switching through multiple applications), but if the presenter has a much larger display than the audience it can be hard to see what is happening.&lt;/p&gt; 
&lt;p&gt;DeskPad creates a virtual display that is mirrored within its application window so that you can create a dedicated, easily shareable workspace.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;You can either download the &lt;a href=&quot;https://github.com/Stengo/DeskPad/releases&quot;&gt;latest release binary&lt;/a&gt; or install via &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt; by calling &lt;code&gt;brew install deskpad&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;DeskPad behaves like any other display. Launching the app is equivalent to plugging in a monitor, so macOS will take care of properly arranging your windows to their previous configuration.&lt;/p&gt; 
&lt;p&gt;You can change the display resolution through the system preferences and the application window will adjust accordingly.&lt;/p&gt; 
&lt;p&gt;Whenever you move your mouse cursor to the virtual display, DeskPad will highlight its title bar in blue and move the application window to the front to let you know where you are.&lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/Stengo/DeskPad/raw/main/demonstration.gif&quot;&gt; &lt;img src=&quot;https://github.com/Stengo/DeskPad/raw/main/demonstration.gif?raw=true&quot; alt=&quot;DeskPad Demonstration&quot; /&gt; &lt;/a&gt; &lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>getsentry/sentry-cocoa</title>
      <link>https://github.com/getsentry/sentry-cocoa</link>
      <description>&lt;p&gt;The official Sentry SDK for iOS, tvOS, macOS, watchOS.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://sentry.io/?utm_source=github&amp;amp;utm_medium=logo&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://sentry-brand.storage.googleapis.com/github-banners/github-sdk-cocoa.jpg&quot; alt=&quot;Sentry for Apple&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;Bad software is everywhere, and we&#39;re tired of it. Sentry is on a mission to help developers write better software faster, so we can get back to enjoying technology. If you want to join us &lt;a href=&quot;https://sentry.io/careers/&quot;&gt;&lt;kbd&gt;&lt;strong&gt;Check out our open positions&lt;/strong&gt;&lt;/kbd&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;Official Sentry SDK for iOS / tvOS / macOS / watchOS &lt;sup&gt;(1)&lt;/sup&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/getsentry/sentry-cocoa/actions/workflows/build.yml?query=branch%3Amain&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/getsentry/sentry-cocoa/build.yml?branch=main&quot; alt=&quot;Build&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/getsentry/sentry-cocoa&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/getsentry/sentry-cocoa/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov.io&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/Sentry&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/Sentry.svg?sanitize=true&quot; alt=&quot;CocoaPods compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swift.org/package-manager&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/spm-compatible-brightgreen.svg?style=flat&quot; alt=&quot;SwiftPM compatible&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/cocoapods/p/Sentry.svg?style=flat&quot; alt=&quot;platforms&quot; /&gt; &lt;a href=&quot;https://swiftpackageindex.com/getsentry/sentry-cocoa&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fgetsentry%2Fsentry-cocoa%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Swift Package Index&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.com/invite/sentry&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/621778831602221064?logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&quot; alt=&quot;Discord Chat&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;SPM is the recommended way to include Sentry into your project, but we also support &lt;a href=&quot;https://cocoapods.org/pods/Sentry&quot;&gt;CocoaPods&lt;/a&gt; and Carthage, and provide pre-built XCFrameworks on &lt;a href=&quot;https://github.com/getsentry/sentry-cocoa/releases&quot;&gt;our GitHub Releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Initialization&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Remember to call this as early in your application life cycle as possible&lt;/em&gt; Ideally in &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt; in &lt;code&gt;AppDelegate&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Sentry

// ....

SentrySDK.start { options in
    options.dsn = &quot;___PUBLIC_DSN___&quot;
    options.debug = true // Helpful to see what&#39;s going on
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;@import Sentry;

// ....

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @&quot;___PUBLIC_DSN___&quot;;
    options.debug = @YES; // Helpful to see what&#39;s going on
}];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information checkout the &lt;a href=&quot;https://docs.sentry.io/platforms/apple&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;sup&gt;(1)&lt;/sup&gt;limited symbolication support and no crash handling.&lt;/p&gt; 
&lt;h1&gt;Blog posts&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2021/08/23/mobile-vitals-four-metrics-every-mobile-developer-should-care-about/&quot;&gt;Mobile Vitals - Four Metrics Every Mobile Developer Should Care About&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2021/02/03/how-to-use-sentry-attachments-with-mobile-applications/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&quot;&gt;How to use Sentry Attachments with Mobile Applications&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2021/02/16/close-the-loop-with-user-feedback/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&quot;&gt;Close the Loop with User Feedback&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2021/03/30/a-sanity-listicle-for-mobile-developers/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=sentry-cocoa&quot;&gt;A Sanity Listicle for Mobile Developers&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.sentry.io/platforms/apple/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-sentry.io-green.svg?sanitize=true&quot; alt=&quot;Documentation&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/getsentry/sentry-cocoa/discussions&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/getsentry/sentry-cocoa.svg?sanitize=true&quot; alt=&quot;Discussions&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.com/invite/sentry&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/621778831602221064?logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&quot; alt=&quot;Discord Chat&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/sentry&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/stack%20overflow-sentry-green.svg?sanitize=true&quot; alt=&quot;Stack Overflow&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/getsentry/.github/raw/master/CODE_OF_CONDUCT.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20of%20conduct-sentry-green.svg?sanitize=true&quot; alt=&quot;Code of Conduct&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=getsentry&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/getsentry?label=getsentry&amp;amp;style=social&quot; alt=&quot;Twitter Follow&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>vapor/vapor</title>
      <link>https://github.com/vapor/vapor</link>
      <description>&lt;p&gt;💧 A server-side Swift HTTP web framework.&lt;/p&gt;&lt;hr&gt;&lt;a href=&quot;https://discord.gg/vapor&quot;&gt; &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1342803/75634175-4876d680-5bd9-11ea-90d6-12c7b6a9ee3f.png&quot; alt=&quot;Vapor&quot; /&gt;&lt;/p&gt; &lt;/a&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://docs.vapor.codes/4.0/&quot;&gt; &lt;img src=&quot;https://design.vapor.codes/images/readthedocs.svg?sanitize=true&quot; alt=&quot;Documentation&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://discord.gg/vapor&quot;&gt; &lt;img src=&quot;https://design.vapor.codes/images/discordchat.svg?sanitize=true&quot; alt=&quot;Team Chat&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/vapor/vapor/main/LICENSE&quot;&gt; &lt;img src=&quot;https://design.vapor.codes/images/mitlicense.svg?sanitize=true&quot; alt=&quot;MIT License&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/vapor/vapor/actions/workflows/test.yml&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/vapor/vapor/test.yml?event=push&amp;amp;style=plastic&amp;amp;logo=github&amp;amp;label=tests&amp;amp;logoColor=%23ccc&quot; alt=&quot;Continuous Integration&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/vapor/vapor&quot;&gt; &lt;img src=&quot;https://img.shields.io/codecov/c/github/vapor/vapor?style=plastic&amp;amp;logo=codecov&amp;amp;label=codecov&quot; alt=&quot;Code Coverage&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://swift.org&quot;&gt; &lt;img src=&quot;https://design.vapor.codes/images/swift57up.svg?sanitize=true&quot; alt=&quot;Swift 5.7+&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://hachyderm.io/@codevapor&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%20-@codevapor-6364f6.svg?style=plastic&amp;amp;logo=mastodon&amp;amp;labelColor=gray&amp;amp;logoColor=%239394ff&quot; alt=&quot;Mastodon&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Vapor is an HTTP web framework for Swift. It provides a beautifully expressive and easy-to-use foundation for your next website, API, or cloud project.&lt;/p&gt; 
&lt;p&gt;Take a look at some of the &lt;a href=&quot;https://github.com/vapor-community/awesome-vapor&quot;&gt;awesome stuff&lt;/a&gt; created with Vapor.&lt;/p&gt; 
&lt;h3&gt;💧 Community&lt;/h3&gt; 
&lt;p&gt;Join the welcoming community of fellow Vapor developers on &lt;a href=&quot;https://vapor.team&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;🚀 Contributing&lt;/h3&gt; 
&lt;p&gt;To contribute a &lt;strong&gt;feature or idea&lt;/strong&gt; to Vapor, &lt;a href=&quot;https://github.com/vapor/vapor/issues/new&quot;&gt;create an issue&lt;/a&gt; explaining your idea or bring it up on &lt;a href=&quot;https://vapor.team&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you find a &lt;strong&gt;bug&lt;/strong&gt;, please &lt;a href=&quot;https://github.com/vapor/vapor/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you find a &lt;strong&gt;security vulnerability&lt;/strong&gt;, please contact &lt;a href=&quot;mailto:security@vapor.codes&quot;&gt;security@vapor.codes&lt;/a&gt; as soon as possible.&lt;/p&gt; 
&lt;h3&gt;💛 Sponsors&lt;/h3&gt; 
&lt;p&gt;Support Vapor&#39;s development by &lt;a href=&quot;https://github.com/sponsors/vapor&quot;&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; 
&lt;a href=&quot;https://www.brokenhands.io&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/9938337/137103192-21f99099-6aaa-4cc1-a1a7-21ee767a72d1.png&quot; height=&quot;100px&quot; alt=&quot;Broken Hands&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://www.emergetools.com&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/9938337/265658253-cb37d2fa-3251-497f-8eeb-ba7c95af373b.svg?sanitize=true&quot; height=&quot;100px&quot; alt=&quot;Emerge Tools&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://github.com/MrLotU&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/1342803/79599312-426a8580-80b3-11ea-89b3-8b2722485e37.png&quot; height=&quot;100px&quot; alt=&quot;Jari&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://github.com/DonutDane&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/9938337/265657642-6b6b1705-9611-4547-8e2f-a3773fda87c6.png&quot; height=&quot;100px&quot; alt=&quot;Donut Dane&quot; /&gt; &lt;/a&gt; 
&lt;a href=&quot;https://macstadium.com&quot;&gt; &lt;img src=&quot;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&quot; height=&quot;100px&quot; alt=&quot;MacStadium&quot; /&gt; &lt;/a&gt; 
&lt;h3&gt;💚 Backers&lt;/h3&gt; 
&lt;p&gt;Support Vapor&#39;s development by &lt;a href=&quot;https://github.com/sponsors/vapor&quot;&gt;becoming a backer&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- backers --&gt;
&lt;a href=&quot;https://github.com/slashmo&quot;&gt;&lt;img src=&quot;https://github.com/slashmo.png&quot; width=&quot;60px&quot; alt=&quot;Moritz Lang&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/maartene&quot;&gt;&lt;img src=&quot;https://github.com/maartene.png&quot; width=&quot;60px&quot; alt=&quot;Maarten Engels&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/tkrajacic&quot;&gt;&lt;img src=&quot;https://github.com/tkrajacic.png&quot; width=&quot;60px&quot; alt=&quot;Thomas Krajacic&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/jessetipton&quot;&gt;&lt;img src=&quot;https://github.com/jessetipton.png&quot; width=&quot;60px&quot; alt=&quot;Jesse Tipton&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/steve-h&quot;&gt;&lt;img src=&quot;https://github.com/steve-h.png&quot; width=&quot;60px&quot; alt=&quot;Steve Hume&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/mikkelu&quot;&gt;&lt;img src=&quot;https://github.com/mikkelu.png&quot; width=&quot;60px&quot; alt=&quot;Mikkel Ulstrup&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/g-Off&quot;&gt;&lt;img src=&quot;https://github.com/g-Off.png&quot; width=&quot;60px&quot; alt=&quot;Geoffrey Foster&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/PSchmiedmayer&quot;&gt;&lt;img src=&quot;https://github.com/PSchmiedmayer.png&quot; width=&quot;60px&quot; alt=&quot;Paul Schmiedmayer&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/ScottRobbins&quot;&gt;&lt;img src=&quot;https://github.com/ScottRobbins.png&quot; width=&quot;60px&quot; alt=&quot;Scott Robbins&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/finestructure&quot;&gt;&lt;img src=&quot;https://github.com/finestructure.png&quot; width=&quot;60px&quot; alt=&quot;Sven A. Schmidt&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/SpencerCurtis&quot;&gt;&lt;img src=&quot;https://github.com/SpencerCurtis.png&quot; width=&quot;60px&quot; alt=&quot;Spencer Curtis&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/rausnitz&quot;&gt;&lt;img src=&quot;https://github.com/rausnitz.png&quot; width=&quot;60px&quot; alt=&quot;Zach Rausnitz&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/masterofinsanity&quot;&gt;&lt;img src=&quot;https://github.com/masterofinsanity.png&quot; width=&quot;60px&quot; alt=&quot;Tim „Timinator“ Kretzschmar&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/klaas&quot;&gt;&lt;img src=&quot;https://github.com/klaas.png&quot; width=&quot;60px&quot; alt=&quot;Klaas&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/Andrewangeta&quot;&gt;&lt;img src=&quot;https://github.com/Andrewangeta.png&quot; width=&quot;60px&quot; alt=&quot;Andrew Edwards&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/addli&quot;&gt;&lt;img src=&quot;https://github.com/addli.png&quot; width=&quot;60px&quot; alt=&quot;+Li, Inc.&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/doozMen&quot;&gt;&lt;img src=&quot;https://github.com/doozMen.png&quot; width=&quot;60px&quot; alt=&quot;Stijn Willems&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/bitwit&quot;&gt;&lt;img src=&quot;https://github.com/bitwit.png&quot; width=&quot;60px&quot; alt=&quot;Kyle Newsome&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/viaaurelia&quot;&gt;&lt;img src=&quot;https://github.com/viaaurelia.png&quot; width=&quot;60px&quot; alt=&quot;Via Aurelia Solutions&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/kkiermasz&quot;&gt;&lt;img src=&quot;https://github.com/kkiermasz.png&quot; width=&quot;60px&quot; alt=&quot;Jakub Kiermasz&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/bdrelling&quot;&gt;&lt;img src=&quot;https://github.com/bdrelling.png&quot; width=&quot;60px&quot; alt=&quot;Brian Drelling&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/mayondigital&quot;&gt;&lt;img src=&quot;https://github.com/mayondigital.png&quot; width=&quot;60px&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/mattesmohr&quot;&gt;&lt;img src=&quot;https://github.com/mattesmohr.png&quot; width=&quot;60px&quot; alt=&quot;Mattes Mohr&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/scibidoo&quot;&gt;&lt;img src=&quot;https://github.com/scibidoo.png&quot; width=&quot;60px&quot; alt=&quot;Jamie&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/GalenRhodes&quot;&gt;&lt;img src=&quot;https://github.com/GalenRhodes.png&quot; width=&quot;60px&quot; alt=&quot;Galen Rhodes&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/litmaps&quot;&gt;&lt;img src=&quot;https://github.com/litmaps.png&quot; width=&quot;60px&quot; alt=&quot;Litmaps&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/davdroman&quot;&gt;&lt;img src=&quot;https://github.com/davdroman.png&quot; width=&quot;60px&quot; alt=&quot;David Roman&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/Strobocop&quot;&gt;&lt;img src=&quot;https://github.com/Strobocop.png&quot; width=&quot;60px&quot; alt=&quot;Brian Strobach&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/kishikawakatsumi&quot;&gt;&lt;img src=&quot;https://github.com/kishikawakatsumi.png&quot; width=&quot;60px&quot; alt=&quot;Kishikawa Katsumi&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/mkll&quot;&gt;&lt;img src=&quot;https://github.com/mkll.png&quot; width=&quot;60px&quot; alt=&quot;Alex Sherbakov&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/getsidetrack&quot;&gt;&lt;img src=&quot;https://github.com/getsidetrack.png&quot; width=&quot;60px&quot; alt=&quot;Sidetrack&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/GregKarpati&quot;&gt;&lt;img src=&quot;https://github.com/GregKarpati.png&quot; width=&quot;60px&quot; alt=&quot;Greg Karpati&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/fananek&quot;&gt;&lt;img src=&quot;https://github.com/fananek.png&quot; width=&quot;60px&quot; alt=&quot;František Mikš&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/jagreenwood&quot;&gt;&lt;img src=&quot;https://github.com/jagreenwood.png&quot; width=&quot;60px&quot; alt=&quot;Jeremy Greenwood&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/rayfix&quot;&gt;&lt;img src=&quot;https://github.com/rayfix.png&quot; width=&quot;60px&quot; alt=&quot;Ray Fix&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/micomiloloza&quot;&gt;&lt;img src=&quot;https://github.com/micomiloloza.png&quot; width=&quot;60px&quot; alt=&quot;Mićo Miloloža&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/awamser&quot;&gt;&lt;img src=&quot;https://github.com/awamser.png&quot; width=&quot;60px&quot; alt=&quot;Alan&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/Suboptimierer&quot;&gt;&lt;img src=&quot;https://github.com/Suboptimierer.png&quot; width=&quot;60px&quot; alt=&quot;Jonas Sannewald&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/TapEnvy-us-LLC&quot;&gt;&lt;img src=&quot;https://github.com/TapEnvy-us-LLC.png&quot; width=&quot;60px&quot; alt=&quot;TapEnvy.us, LLC&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/JawadHF&quot;&gt;&lt;img src=&quot;https://github.com/JawadHF.png&quot; width=&quot;60px&quot; alt=&quot;Jawad&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/PARAIPAN9&quot;&gt;&lt;img src=&quot;https://github.com/PARAIPAN9.png&quot; width=&quot;60px&quot; alt=&quot;PARAIPAN SORIN&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/KalynDavis&quot;&gt;&lt;img src=&quot;https://github.com/KalynDavis.png&quot; width=&quot;60px&quot; alt=&quot;Kalyn Davis&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/stevapple&quot;&gt;&lt;img src=&quot;https://github.com/stevapple.png&quot; width=&quot;60px&quot; alt=&quot;YR Chen&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/roncuevas&quot;&gt;&lt;img src=&quot;https://github.com/roncuevas.png&quot; width=&quot;60px&quot; alt=&quot;Aarón Martínez Cuevas&quot; /&gt;&lt;/a&gt;
&lt;!-- backers --&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/vapor/backer/0/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/0/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/1/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/1/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/2/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/2/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/3/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/3/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/4/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/4/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/5/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/5/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/6/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/6/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/7/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/7/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/8/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/8/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/9/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/9/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/10/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/10/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/11/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/11/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/12/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/12/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/13/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/13/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/14/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/14/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/15/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/15/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/16/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/16/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/17/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/17/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/18/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/18/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/19/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/19/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/20/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/20/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/21/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/21/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/22/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/22/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/23/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/23/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/24/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/24/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/25/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/25/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/26/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/26/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/27/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/27/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/28/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/28/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/29/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/29/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/30/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/30/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/31/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/31/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/32/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/32/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/33/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/33/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/34/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/34/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/35/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/35/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/36/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/36/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/37/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/37/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/38/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/38/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/39/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/39/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/40/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/40/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/41/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/41/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/42/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/42/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/43/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/43/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/44/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/44/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/45/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/45/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/46/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/46/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/47/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/47/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/vapor/backer/48/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/vapor/backer/48/avatar.svg?sanitize=true&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RevenueCat/purchases-ios</title>
      <link>https://github.com/RevenueCat/purchases-ios</link>
      <description>&lt;p&gt;In-app purchases and subscriptions made easy. Support for iOS, watchOS, tvOS, macOS, and visionOS.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt;😻 In-App Subscriptions Made Easy 😻&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/pods/RevenueCat&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/l/RevenueCat.svg?style=flat&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cocoapods.org/pods/RevenueCat&quot;&gt;&lt;img src=&quot;https://img.shields.io/cocoapods/v/RevenueCat.svg?style=flat&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.revenuecat.com/docs/ios#section-install-via-carthage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&quot; alt=&quot;Carthage compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.revenuecat.com/docs/ios#section-install-via-swift-package-manager&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/SwiftPM-compatible-orange.svg?sanitize=true&quot; alt=&quot;SwiftPM compatible&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/RevenueCat/purchases-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FRevenueCat%2Fpurchases-ios%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/RevenueCat/purchases-ios&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FRevenueCat%2Fpurchases-ios%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;RevenueCat is a powerful, reliable, and free to use in-app purchase server with cross-platform support. Our open-source framework provides a backend and a wrapper around StoreKit and Google Play Billing to make implementing in-app purchases and subscriptions easy.&lt;/p&gt; 
&lt;p&gt;Whether you are building a new app or already have millions of customers, you can use RevenueCat to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fetch products, make purchases, and check subscription status with our &lt;a href=&quot;https://docs.revenuecat.com/docs/installation&quot;&gt;native SDKs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Host and &lt;a href=&quot;https://docs.revenuecat.com/docs/entitlements&quot;&gt;configure products&lt;/a&gt; remotely from our dashboard.&lt;/li&gt; 
 &lt;li&gt;Analyze the most important metrics for your app business &lt;a href=&quot;https://docs.revenuecat.com/docs/charts&quot;&gt;in one place&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;See customer transaction histories, chart lifetime value, and &lt;a href=&quot;https://www.revenuecat.com/docs/dashboard-and-metrics/customer-history/promotionals&quot;&gt;grant promotional subscriptions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Get notified of real-time events through &lt;a href=&quot;https://docs.revenuecat.com/docs/webhooks&quot;&gt;webhooks&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Send enriched purchase events to analytics and attribution tools with our easy integrations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sign up to &lt;a href=&quot;https://app.revenuecat.com/signup&quot;&gt;get started for free&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;RevenueCat.framework&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;RevenueCat&lt;/em&gt; is the client for the &lt;a href=&quot;https://www.revenuecat.com/&quot;&gt;RevenueCat&lt;/a&gt; subscription and purchase tracking system. It&#39;s 100% &lt;code&gt;Swift&lt;/code&gt; and compatible with &lt;code&gt;Objective-C&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Migrating from Purchases v4 to v5&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See our &lt;a href=&quot;https://revenuecat.github.io/purchases-ios-docs/v5_api_migration_guide.html&quot;&gt;Migration guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migrating from Purchases v3 to v4&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See our &lt;a href=&quot;https://revenuecat.github.io/purchases-ios-docs/v4_api_migration_guide.html&quot;&gt;Migration guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RevenueCat SDK Features&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;RevenueCat&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;Server-side receipt validation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;➡️&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://docs.revenuecat.com/docs/webhooks&quot;&gt;Webhooks&lt;/a&gt; - enhanced server-to-server communication with events for purchases, renewals, cancellations, and more&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;🖥&lt;/td&gt; 
   &lt;td&gt;iOS, tvOS, macOS, watchOS, Mac Catalyst, and visionOS support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;🎯&lt;/td&gt; 
   &lt;td&gt;Subscription status tracking - know whether a user is subscribed whether they&#39;re on iOS, Android or web&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;📊&lt;/td&gt; 
   &lt;td&gt;Analytics - automatic calculation of metrics like conversion, mrr, and churn&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;📝&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://docs.revenuecat.com/docs&quot;&gt;Online documentation&lt;/a&gt; and &lt;a href=&quot;http://revenuecat.github.io/purchases-ios-docs/&quot;&gt;SDK Reference&lt;/a&gt; up to date&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;🔀&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.revenuecat.com/integrations&quot;&gt;Integrations&lt;/a&gt; - over a dozen integrations to easily send purchase data where you need it&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;💯&lt;/td&gt; 
   &lt;td&gt;Well maintained - &lt;a href=&quot;https://github.com/RevenueCat/purchases-ios/releases&quot;&gt;frequent releases&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;📮&lt;/td&gt; 
   &lt;td&gt;Great support - &lt;a href=&quot;https://revenuecat.com/support&quot;&gt;Contact us&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;For more detailed information, you can view our complete documentation at &lt;a href=&quot;https://docs.revenuecat.com/docs&quot;&gt;docs.revenuecat.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please follow the &lt;a href=&quot;https://docs.revenuecat.com/docs/&quot;&gt;Quickstart Guide&lt;/a&gt; for more information on how to install the SDK.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] When integrating with SPM, it is recommended to add the SPM mirror repository for faster download/integration times: &lt;a href=&quot;https://github.com/RevenueCat/purchases-ios-spm&quot;&gt;https://github.com/RevenueCat/purchases-ios-spm&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Or view our iOS sample apps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Examples/MagicWeather&quot;&gt;MagicWeather&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Examples/MagicWeatherSwiftUI&quot;&gt;MagicWeather SwiftUI&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Xcode 15.0+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Minimum target&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;13.0+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tvOS&lt;/td&gt; 
   &lt;td&gt;13.0+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;10.15+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;watchOS&lt;/td&gt; 
   &lt;td&gt;6.2+&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;visionOS&lt;/td&gt; 
   &lt;td&gt;1.0+&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;SDK Reference&lt;/h2&gt; 
&lt;p&gt;Our full SDK reference &lt;a href=&quot;https://revenuecat.github.io/purchases-ios-docs&quot;&gt;can be found here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are always welcome! To learn how you can contribute, please see the &lt;a href=&quot;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Contributing/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>open-meteo/open-meteo</title>
      <link>https://github.com/open-meteo/open-meteo</link>
      <description>&lt;p&gt;Free Weather Forecast API for non-commercial use&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌤 Open-Meteo Weather API&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/open-meteo/open-meteo/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/open-meteo/open-meteo/actions/workflows/test.yml/badge.svg?branch=main&quot; alt=&quot;Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/open-meteo/open-meteo/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/open-meteo/open-meteo&quot; alt=&quot;GitHub license&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-CC%20BY%204.0-lightgrey.svg?sanitize=true&quot; alt=&quot;license: CC BY 4.0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/open_meteo&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/follow-%40open_meteo-1DA1F2?logo=twitter&amp;amp;style=social&quot; alt=&quot;Twitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://fosstodon.org/@openmeteo&quot;&gt;&lt;img src=&quot;https://img.shields.io/mastodon/follow/109320332765909743?domain=https%3A%2F%2Ffosstodon.org&quot; alt=&quot;Mastodon&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://doi.org/10.5281/zenodo.7970649&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.7970649.svg?sanitize=true&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Open-Meteo is an open-source weather API and offers free access for non-commercial use. No API key is required. You can use it immediately!&lt;/p&gt; 
&lt;p&gt;Head over to &lt;a href=&quot;https://open-meteo.com&quot;&gt;https://open-meteo.com&lt;/a&gt;! Stay up to date with our blog at &lt;a href=&quot;https://openmeteo.substack.com&quot;&gt;https://openmeteo.substack.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://open-meteo.com/en/docs&quot;&gt;Hourly weather forecast&lt;/a&gt; for up to 16 days&lt;/li&gt; 
 &lt;li&gt;Global weather models with 11 km and regional models up to 1.5 km resolution&lt;/li&gt; 
 &lt;li&gt;Weather model updates every hour for Europe and North America&lt;/li&gt; 
 &lt;li&gt;80 years &lt;a href=&quot;https://open-meteo.com/en/docs/historical-weather-api&quot;&gt;Historical Weather API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Based on the best weather models: &lt;a href=&quot;https://open-meteo.com/en/docs/gfs-api&quot;&gt;NOAA GFS with HRRR&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/dwd-api&quot;&gt;DWD ICON&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/meteofrance-api&quot;&gt;MeteoFrance Arome&amp;amp;Arpege&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/ecmwf-api&quot;&gt;ECMWF IFS&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/jma-api&quot;&gt;JMA&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/gem-api&quot;&gt;GEM HRDPS&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/metno-api&quot;&gt;MET Norway&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://open-meteo.com/en/docs/marine-weather-api&quot;&gt;Marine Forecast API&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/air-quality-api&quot;&gt;Air Quality API&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/geocoding-api&quot;&gt;Geocoding API&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/elevation-api&quot;&gt;Elevation API&lt;/a&gt;, &lt;a href=&quot;https://open-meteo.com/en/docs/flood-api&quot;&gt;Flood API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lightning fast APIs with response times below 10 ms&lt;/li&gt; 
 &lt;li&gt;Servers located in Europe and North America with GeoDNS for best latency and high-availability&lt;/li&gt; 
 &lt;li&gt;No API key required, CORS supported, no ads, no tracking, not even cookies&lt;/li&gt; 
 &lt;li&gt;Free for non-commercial use with data under Attribution 4.0 International (CC BY 4.0)&lt;/li&gt; 
 &lt;li&gt;Source code available under AGPLv3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How does Open-Meteo work?&lt;/h2&gt; 
&lt;p&gt;Open-Meteo utilizes open-data weather forecasts provided by national weather services. These services offer numerical weather predictions that are free to download. However, working with these models can be challenging, as it requires expertise in binary file formats, grid-systems, projections, and the fundamentals of weather predictions.&lt;/p&gt; 
&lt;p&gt;Like many other weather APIs, Open-Meteo integrates high-resolution local and global weather models. Over 2 TB of data are downloaded and processed daily from multiple national weather services. The collected data is then stored in local files using a customized file format and compression technique to enhance access to time-series data such as a 14-day temperature forecast.&lt;/p&gt; 
&lt;p&gt;In contrast to other weather APIs, Open-Meteo provides complete access to its source code, and all data sources are openly listed, crediting the national weather services for their work. With Docker or prebuilt Ubuntu packages, it is possible to launch your own weather API within minutes. By providing the source code, users can conduct detailed verifications of the weather data processing and even make modifications themselves. Contributions are highly encouraged and welcomed.&lt;/p&gt; 
&lt;p&gt;The API is available for non-commercial use at no cost. Despite being free of charge, the forecast accuracy is top-notch. The API utilizes a vast array of local weather models with rapid updates, ensuring that the most precise forecast is generated for any location globally.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;All API documentation can be found on &lt;a href=&quot;https://open-meteo.com&quot;&gt;https://open-meteo.com&lt;/a&gt;. The source code for the website, documentation and API generator is available here: &lt;a href=&quot;https://github.com/open-meteo/open-meteo-website&quot;&gt;https://github.com/open-meteo/open-meteo-website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The free non-commerical API is hosted at &lt;a href=&quot;https://api.open-meteo.com/v1/forecast?latitude=52.52&amp;amp;longitude=13.41&amp;amp;hourly=temperature_2m&quot;&gt;https://api.open-meteo.com&lt;/a&gt; using to GeoDNS to servers in Europe and North America (HTTPS is optional). The API source code is in this current repository.&lt;/li&gt; 
 &lt;li&gt;The geocoding API source code is available in a separate repository &lt;a href=&quot;https://github.com/open-meteo/geocoding-api&quot;&gt;https://github.com/open-meteo/geocoding-api&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Larger changes are announced in the &lt;a href=&quot;https://openmeteo.substack.com&quot;&gt;Open-Meteo Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/open-meteo/open-data&quot;&gt;Open-Meteo weather database&lt;/a&gt; is redistributed as part of an AWS Open-Data Sponsorship&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who is using Open-Meteo?&lt;/h2&gt; 
&lt;p&gt;Apps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/open_meteo/&quot;&gt;Home Assistant&lt;/a&gt; A popular open source smart home platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weather.roessner.tech&quot;&gt;Weather.io&lt;/a&gt; A simple Progressive Web App (PWA) for checking the weather.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weathergraph.app&quot;&gt;WeatherGraph&lt;/a&gt; Apple Watch App&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://slideshow.digital/&quot;&gt;Slideshow&lt;/a&gt; Digital Signage app for Android&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/roe-dl/weewx-DWD&quot;&gt;weewx-DWD&lt;/a&gt; Weather forecasts etc. for WeeWX&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/woheller69/omweather&quot;&gt;Cirrus&lt;/a&gt; Android Weather App&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/woheller69/solxpect&quot;&gt;solXpect&lt;/a&gt; Android app which forecasts the output of your solar power plant&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/metalfoxdev/Raindrop&quot;&gt;Raindrop&lt;/a&gt; Simple and intuitive weather app for the linux terminal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weatherian.com/&quot;&gt;Weatherian&lt;/a&gt; Multi-model meteogram (multi-platform)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.kingfu.weatherai&quot;&gt;WeatherAI&lt;/a&gt; WeatherAI offers an intuitive user experience that makes checking the weather a breeze.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GustavLindberg99/AndroidWeather&quot;&gt;Weather&lt;/a&gt; Free, open source, simple and complete weather app for Android&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=xyz.droneweather.app&quot;&gt;DroneWeather&lt;/a&gt; Weather forecasts, satellite count, and KP index for drone pilots.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://f-droid.org/packages/co.prestosole.clima/&quot;&gt;Clima&lt;/a&gt; Beautiful, minimal, and fast weather app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cakephone/skymuse&quot;&gt;SkyMuse&lt;/a&gt; Minimal, privacy-respecting weather app. Built with web technologies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ggaidelevicius/weather-please/&quot;&gt;Weather Please&lt;/a&gt; Clean and minimal new tab replacement for browsers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TylerWilliamson/QuickWeather&quot;&gt;QuickWeather&lt;/a&gt; Fast, free, and open source Android app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DarkMooNight/Rain&quot;&gt;Rain&lt;/a&gt; Free, open source, beautiful, minimal and fast weather app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Isma1306/wetbulb-forecast&quot;&gt;WetBulb&lt;/a&gt; A simple app that shows you the wetbulb temp 24h forecast and tells you if it is dangerous.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Akylas/oss-weather&quot;&gt;OSS Weather&lt;/a&gt; - Multi-model/multi-provider Open Source Android/iOS Weather app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weather.jamesdinovo.com&quot;&gt;The Weather&lt;/a&gt; A detailed, installable, progressive web application&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.rocksdanister.com/weather&quot;&gt;Lively Weather&lt;/a&gt; Windows native weather app powered by DirectX12 animations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hh.guidocioni.it/pointwx/&quot;&gt;PointWx&lt;/a&gt; Dash application with interactive plots (from beginner-friendly to weather-enthusiast level) easily deployable&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yotka.org/meteo-hist&quot;&gt;MeteoHist&lt;/a&gt; A web app to create interactive temperature and precipitation graphs for places around the world&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://emojiton.com/weather&quot;&gt;Emojiton Weather&lt;/a&gt; Get the local weather forecast for your location with fun emoji representations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.alpineconditions.com&quot;&gt;Alpine Conditions&lt;/a&gt; Allows a user to compare multiple models at once &amp;amp; create ensemble forecasts for any location&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://SwampCooler.app&quot;&gt;Evaporative Cooler Forecaster&lt;/a&gt; Swamp cooler effectiveness forecast with cost &amp;amp; energy savings, Android/iOS app&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.lunalink.de&quot;&gt;LunaLink&lt;/a&gt; A site for hunters, fishermen and nature observers: It provides sun and moon values ​​(including moon brightness) as well as the weather for individual locations in Central Europe.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.truthclimate.com&quot;&gt;truthclimate&lt;/a&gt; Discover how weather and climate changed all around the world.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://meteo-fly.com&quot;&gt;Meteo-Fly&lt;/a&gt; Free flight-weather charts for paraglider &amp;amp; hang-glider pilots.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Repositories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cburton-godaddy/captain-cold&quot;&gt;Captain Cold&lt;/a&gt; Simple Open-Meteo -&amp;gt; Discord integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tobealive/wthrr-the-weathercrab&quot;&gt;wthrr-the-weathercrab&lt;/a&gt; Weather companion for the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Rayrsn/Weather-Cli&quot;&gt;Weather-Cli&lt;/a&gt; A CLI program written in golang that allows you to get weather information from the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/benphelps/homepage/&quot;&gt;Homepage&lt;/a&gt; A highly customizable homepage (or startpage / application dashboard) with Docker and service API integrations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.spots.guru&quot;&gt;Spots Guru&lt;/a&gt; Weather forecast for lazy, the best wind &amp;amp; wave spots around you.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vnegi10/WeatherReport.jl&quot;&gt;WeatherReport.jl&lt;/a&gt; A simple weather app for the Julia REPL&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AlexeyMal/esp8266-weather-station&quot;&gt;DIY Arduino esp8266 weather station&lt;/a&gt; esp8266 weather station using Open-Meteo API, an embedded C++ implementation example&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SqrtMinusOne/biome&quot;&gt;biome&lt;/a&gt; Bountiful Interface to Open Meteo for Emacs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Other:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.raycast.com/koinzhang/menubar-weather&quot;&gt;Menubar Weather&lt;/a&gt; A Raycast extension that displays live weather information in your menu bar&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.minipavi.fr/emulminitel/&quot;&gt;MiniPavi&lt;/a&gt; Vintage French Minitel (a kind of BBS) weather forecast service (type &quot;METEO&quot; keyword on welcome Minitel screen)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpenKNX/OFM-InternetWeatherModule&quot;&gt;OFM-InternetWeatherModule&lt;/a&gt; An OpenKNX module to provide data of weather services on KNX-bus (configurable via ETS)&lt;/li&gt; 
 &lt;li&gt;Contributions welcome!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Do you use Open-Meteo? Please open a pull request and add your repository or app to the list!&lt;/p&gt; 
&lt;h2&gt;Client SDKs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go &lt;a href=&quot;https://github.com/HectorMalot/omgo&quot;&gt;https://github.com/HectorMalot/omgo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Python &lt;a href=&quot;https://github.com/m0rp43us/openmeteopy&quot;&gt;https://github.com/m0rp43us/openmeteopy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kotlin &lt;a href=&quot;https://github.com/open-meteo/open-meteo-api-kotlin&quot;&gt;https://github.com/open-meteo/open-meteo-api-kotlin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;.Net / C# &lt;a href=&quot;https://github.com/AlienDwarf/open-meteo-dotnet&quot;&gt;https://github.com/AlienDwarf/open-meteo-dotnet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;dotnet 8 / C# &lt;a href=&quot;https://github.com/colinnuk/open-meteo-dotnet-client-sdk&quot;&gt;https://github.com/colinnuk/open-meteo-dotnet-client-sdk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP Laravel &lt;a href=&quot;https://github.com/michaelnabil230/laravel-weather&quot;&gt;https://github.com/michaelnabil230/laravel-weather&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;R &lt;a href=&quot;https://github.com/tpisel/openmeteo&quot;&gt;https://github.com/tpisel/openmeteo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP Symfony 6.2 &lt;a href=&quot;https://gitlab.com/flibidi67/open-meteo&quot;&gt;https://gitlab.com/flibidi67/open-meteo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PHP for Geocoding API: &lt;a href=&quot;https://gitlab.com/flibidi67/open-meteo-geocoding&quot;&gt;https://gitlab.com/flibidi67/open-meteo-geocoding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Android library for Geocoding API: &lt;a href=&quot;https://github.com/woheller69/OmGeoDialog&quot;&gt;https://github.com/woheller69/OmGeoDialog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dart / Flutter: &lt;a href=&quot;https://github.com/neursh/open-meteo-dart&quot;&gt;https://github.com/neursh/open-meteo-dart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rust: &lt;a href=&quot;https://github.com/angelodlfrtr/open-meteo-rs&quot;&gt;https://github.com/angelodlfrtr/open-meteo-rs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Contributions welcome! Writing a SDK for Open-Meteo is more than welcome and a great way to help users.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you encounter bugs while using Open-Meteo APIs, please file a new issue ticket. For general ideas or Q&amp;amp;A please use the &lt;a href=&quot;https://github.com/open-meteo/open-meteo/discussions&quot;&gt;Discussion&lt;/a&gt; section on Github. Thanks!&lt;/p&gt; 
&lt;p&gt;For other enquiries please contact &lt;a href=&quot;mailto:info@open-meteo.com&quot;&gt;info@open-meteo.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Run your own API&lt;/h2&gt; 
&lt;p&gt;Instructions to use Docker to run your own weather API are available in the &lt;a href=&quot;https://raw.githubusercontent.com/open-meteo/open-meteo/main/docs/getting-started.md&quot;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Terms &amp;amp; Privacy&lt;/h2&gt; 
&lt;p&gt;Open-Meteo APIs are free for open-source developer and non-commercial use. We do not restrict access, but ask for fair use.&lt;/p&gt; 
&lt;p&gt;If your application exceeds 10&#39;000 requests per day, please contact us. We reserve the right to block applications and IP addresses that misuse our service.&lt;/p&gt; 
&lt;p&gt;For commercial use of Open-Meteo APIs, please contact us.&lt;/p&gt; 
&lt;p&gt;All data is provided as is without any warranty.&lt;/p&gt; 
&lt;p&gt;We do not collect any personal data. We do not share any personal information. We do not integrate any third party analytics, ads, beacons or plugins.&lt;/p&gt; 
&lt;h2&gt;Data License&lt;/h2&gt; 
&lt;p&gt;API data are offered under Attribution 4.0 International (CC BY 4.0)&lt;/p&gt; 
&lt;p&gt;You are free to share: copy and redistribute the material in any medium or format and adapt: remix, transform, and build upon the material.&lt;/p&gt; 
&lt;p&gt;Attribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.&lt;/p&gt; 
&lt;p&gt;You must include a link next to any location, Open-Meteo data are displayed like:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://open-meteo.com/&quot;&gt;Weather data by Open-Meteo.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Source Code License&lt;/h2&gt; 
&lt;p&gt;Open-Meteo is open-source under the GNU Affero General Public License Version 3 (AGPLv3) or any later version. You can &lt;a href=&quot;https://raw.githubusercontent.com/open-meteo/open-meteo/main/LICENSE&quot;&gt;find the license here&lt;/a&gt;. Exceptions are third party source-code with individual licensing in each file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mozilla-mobile/firefox-ios</title>
      <link>https://github.com/mozilla-mobile/firefox-ios</link>
      <description>&lt;p&gt;Firefox for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Firefox for iOS and Focus iOS&lt;/h1&gt; 
&lt;p&gt;Download &lt;a href=&quot;https://apps.apple.com/app/firefox-web-browser/id989804926&quot;&gt;Firefox iOS&lt;/a&gt; and &lt;a href=&quot;https://itunes.apple.com/app/id1055677337&quot;&gt;Focus iOS&lt;/a&gt; on the App Store.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th style=&quot;border: none;&quot;&gt;&lt;strong&gt;Firefox iOS&lt;/strong&gt;&lt;/th&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Xcode-26.0-blue?logo=Xcode&amp;amp;logoColor=white&quot; alt=&quot;Firefox-iOS&quot; /&gt;&lt;/td&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-5.10-red?logo=Swift&amp;amp;logoColor=white&quot; alt=&quot;Firefox-iOS&quot; /&gt;&lt;/td&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/iOS-15.0+-green?logo=apple&amp;amp;logoColor=white&quot; alt=&quot;Firefox-iOS&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th style=&quot;border: none;&quot;&gt;&lt;strong&gt;Focus iOS&lt;/strong&gt;&lt;/th&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Xcode-26.0-blue?logo=Xcode&amp;amp;logoColor=white&quot; alt=&quot;Focus-iOS&quot; /&gt;&lt;/td&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Swift-5.10-red?logo=Swift&amp;amp;logoColor=white&quot; alt=&quot;Focus-iOS&quot; /&gt;&lt;/td&gt; 
   &lt;td style=&quot;border: none;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/iOS-15.0+-green?logo=apple&amp;amp;logoColor=white&quot; alt=&quot;Focus-iOS&quot; /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Building the code&lt;/h2&gt; 
&lt;p&gt;This is a mono repository containing both Firefox and Focus iOS projects. For their related build instructions, please follow the project readme:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mozilla-mobile/firefox-ios/main/firefox-ios/README.md&quot;&gt;Firefox for iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mozilla-mobile/firefox-ios/main/focus-ios/README.md&quot;&gt;Focus iOS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting involved&lt;/h2&gt; 
&lt;p&gt;We encourage you to participate in those open source projects. We love Pull Requests, Issue Reports, Feature Requests or any kind of positive contribution. Please read the &lt;a href=&quot;https://www.mozilla.org/en-US/about/governance/policies/participation/&quot;&gt;Mozilla Community Participation Guidelines&lt;/a&gt; and our &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/raw/main/CONTRIBUTING.md&quot;&gt;Contributing guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/issues/new/choose&quot;&gt;file a new issue&lt;/a&gt; or research &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/issues&quot;&gt;existing bugs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If more information is required or you have any questions then we suggest reaching out to us via:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Chat on Element channel &lt;a href=&quot;https://chat.mozilla.org/#/room/#fx-ios:mozilla.org&quot;&gt;#fx-ios&lt;/a&gt; and &lt;a href=&quot;https://chat.mozilla.org/#/room/#focus-ios:mozilla.org&quot;&gt;#focus-ios&lt;/a&gt; for general discussion, or write DMs to specific teammates for questions.&lt;/li&gt; 
 &lt;li&gt;Open a &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/discussions&quot;&gt;Github discussion&lt;/a&gt; which can be used for general questions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want to contribute on the codebase but don&#39;t know where to start? Here is a list of &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/labels/Contributor%20OK&quot;&gt;issues that are contributor friendly&lt;/a&gt;, but make sure to read the &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/raw/main/CONTRIBUTING.md&quot;&gt;Contributing guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at https://mozilla.org/MPL/2.0/
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>apple/swift-protobuf</title>
      <link>https://github.com/apple/swift-protobuf</link>
      <description>&lt;p&gt;Plugin and runtime library for using protobuf with Swift&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://swift.org/assets/images/swift.svg?sanitize=true&quot; alt=&quot;Swift logo&quot; height=&quot;70&quot; /&gt; 
&lt;h1&gt;Swift Protobuf&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Welcome to Swift Protobuf!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swift.org/&quot;&gt;Apple&#39;s Swift programming language&lt;/a&gt; is a perfect complement to &lt;a href=&quot;https://protobuf.dev/&quot;&gt;Google&#39;s Protocol Buffer&lt;/a&gt; (&quot;protobuf&quot;) serialization technology. They both emphasize high performance and programmer safety.&lt;/p&gt; 
&lt;p&gt;This project provides both the command-line program that adds Swift code generation to Google&#39;s &lt;code&gt;protoc&lt;/code&gt; and the runtime library that is necessary for using the generated code. After using the protoc plugin to generate Swift code from your .proto files, you will need to add this library to your project.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Build+and+Test%22&quot;&gt;&lt;img src=&quot;https://github.com/apple/swift-protobuf/workflows/Build%20and%20Test/badge.svg?sanitize=true&quot; alt=&quot;Build and Test&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Check+Upstream+Proto+Files%22&quot;&gt;&lt;img src=&quot;https://github.com/apple/swift-protobuf/workflows/Check%20Upstream%20Proto%20Files/badge.svg?sanitize=true&quot; alt=&quot;Check Upstream Protos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Run+Conformance+Tests%22&quot;&gt;&lt;img src=&quot;https://github.com/apple/swift-protobuf/workflows/Run%20Conformance%20Tests/badge.svg?sanitize=true&quot; alt=&quot;Run Conformance Tests&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features of SwiftProtobuf&lt;/h1&gt; 
&lt;p&gt;SwiftProtobuf offers many advantages over alternative serialization systems:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Safety: The protobuf code-generation system avoids the errors that are common with hand-built serialization code.&lt;/li&gt; 
 &lt;li&gt;Correctness: SwiftProtobuf passes both its own extensive test suite and Google&#39;s full conformance test for protobuf correctness.&lt;/li&gt; 
 &lt;li&gt;Schema-driven: Defining your data structures in a separate &lt;code&gt;.proto&lt;/code&gt; schema file clearly documents your communications conventions.&lt;/li&gt; 
 &lt;li&gt;Idiomatic: SwiftProtobuf takes full advantage of the Swift language. In particular, all generated types provide full Swift copy-on-write value semantics.&lt;/li&gt; 
 &lt;li&gt;Efficient binary serialization: The &lt;code&gt;.serializedBytes()&lt;/code&gt; method returns a bag of bytes with a compact binary form of your data. You can deserialize the data using the &lt;code&gt;init(contiguousBytes:)&lt;/code&gt; initializer.&lt;/li&gt; 
 &lt;li&gt;Standard JSON serialization: The &lt;code&gt;.jsonUTF8Bytes()&lt;/code&gt; method returns a JSON form of your data that can be parsed with the &lt;code&gt;init(jsonUTF8Bytes:)&lt;/code&gt; initializer.&lt;/li&gt; 
 &lt;li&gt;Hashable, Equatable: The generated struct can be put into a &lt;code&gt;Set&amp;lt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Dictionary&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Performant: The binary and JSON serializers have been extensively optimized.&lt;/li&gt; 
 &lt;li&gt;Extensible: You can add your own Swift extensions to any of the generated types.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Best of all, you can take the same &lt;code&gt;.proto&lt;/code&gt; file and generate Java, C++, Python, or Objective-C for use on other platforms. The generated code for those languages will use the exact same serialization and deserialization conventions as SwiftProtobuf, making it easy to exchange serialized data in binary or JSON forms, with no additional effort on your part.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;More information is available in the associated documentation:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://protobuf.dev/&quot;&gt;Google&#39;s protobuf documentation&lt;/a&gt; provides general information about protocol buffers, the protoc compiler, and how to use protocol buffers with C++, Java, and other languages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/PLUGIN.md&quot;&gt;PLUGIN.md&lt;/a&gt; documents the &lt;code&gt;protoc-gen-swift&lt;/code&gt; plugin that adds Swift support to the &lt;code&gt;protoc&lt;/code&gt; program&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/API.md&quot;&gt;API.md&lt;/a&gt; documents how to use the generated code. This is recommended reading for anyone using SwiftProtobuf in their project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/INTERNALS.md&quot;&gt;INTERNALS.md&lt;/a&gt; documents the internal structure of the generated code and the library. This should only be needed by folks interested in working on SwiftProtobuf itself.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/STYLE_GUIDELINES.md&quot;&gt;STYLE_GUIDELINES.md&lt;/a&gt; documents the style guidelines we have adopted in our codebase if you are interested in contributing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;p&gt;If you&#39;ve worked with Protocol Buffers before, adding Swift support is very simple: you just need to build the &lt;code&gt;protoc-gen-swift&lt;/code&gt; program and copy it into your PATH. The &lt;code&gt;protoc&lt;/code&gt; program will find and use it automatically, allowing you to build Swift sources for your proto files. You will also, of course, need to add the SwiftProtobuf runtime library to your project as explained below.&lt;/p&gt; 
&lt;h2&gt;System Requirements&lt;/h2&gt; 
&lt;p&gt;To use Swift with Protocol buffers, you&#39;ll need:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;A Swift 5.10 or later compiler (or, if building with Xcode, Xcode 15.3 or later as required by the App Store). The Swift protobuf project is being developed and tested against the latest release version of Swift available from &lt;a href=&quot;https://swift.org&quot;&gt;Swift.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Google&#39;s protoc compiler. The Swift protoc plugin is being actively developed and tested against the latest protobuf sources. The SwiftProtobuf tests need a version of protoc which supports the &lt;code&gt;swift_prefix&lt;/code&gt; option (introduced in protoc 3.2.0). It may work with earlier versions of protoc. You can get recent versions from &lt;a href=&quot;https://github.com/protocolbuffers/protobuf&quot;&gt;Google&#39;s github repository&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building and Installing the Code Generator Plugin&lt;/h2&gt; 
&lt;p&gt;To translate &lt;code&gt;.proto&lt;/code&gt; files into Swift, you will need both Google&#39;s protoc compiler and the SwiftProtobuf code generator plugin.&lt;/p&gt; 
&lt;p&gt;Building the plugin should be simple on any supported Swift platform:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/apple/swift-protobuf.git
cd swift-protobuf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Pick what released version of SwiftProtobuf you are going to use. You can get a list of tags with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag -l
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once you pick the version you will use, set your local state to match, and build the protoc plugin:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout tags/[tag_name]
swift build -c release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a binary called &lt;code&gt;protoc-gen-swift&lt;/code&gt; in the &lt;code&gt;.build/release&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;To install, just copy this one executable into a directory that is part of your &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;p&gt;NOTE: The Swift runtime support is now included with macOS. If you are using old Xcode versions or are on older system versions, you might need to use also use &lt;code&gt;--static-swift-stdlib&lt;/code&gt; with &lt;code&gt;swift build&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Alternatively install via Homebrew&lt;/h3&gt; 
&lt;p&gt;If you prefer using &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install swift-protobuf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will install &lt;code&gt;protoc&lt;/code&gt; compiler and Swift code generator plugin.&lt;/p&gt; 
&lt;h2&gt;Converting .proto files into Swift&lt;/h2&gt; 
&lt;p&gt;To generate Swift output for your .proto files, you run the &lt;code&gt;protoc&lt;/code&gt; command as usual, using the &lt;code&gt;--swift_out=&amp;lt;directory&amp;gt;&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;protoc --swift_out=. my.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;protoc&lt;/code&gt; program will automatically look for &lt;code&gt;protoc-gen-swift&lt;/code&gt; in your &lt;code&gt;PATH&lt;/code&gt; and use it.&lt;/p&gt; 
&lt;p&gt;Each &lt;code&gt;.proto&lt;/code&gt; input file will get translated to a corresponding &lt;code&gt;.pb.swift&lt;/code&gt; file in the output directory.&lt;/p&gt; 
&lt;p&gt;More information about building and using &lt;code&gt;protoc-gen-swift&lt;/code&gt; can be found in the &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/PLUGIN.md&quot;&gt;detailed Plugin documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adding the SwiftProtobuf library to your project...&lt;/h2&gt; 
&lt;p&gt;To use the generated code, you need to include the &lt;code&gt;SwiftProtobuf&lt;/code&gt; library module in your project. How you do this will vary depending on how you&#39;re building your project. Note that in all cases, we strongly recommend that you use the version of the SwiftProtobuf library that corresponds to the version of &lt;code&gt;protoc-gen-swift&lt;/code&gt; you used to generate the code.&lt;/p&gt; 
&lt;h3&gt;...using &lt;code&gt;swift build&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;After copying the &lt;code&gt;.pb.swift&lt;/code&gt; files into your project, you will need to add the &lt;a href=&quot;https://github.com/apple/swift-protobuf&quot;&gt;SwiftProtobuf library&lt;/a&gt; to your project to support the generated code. If you are using the Swift Package Manager, add a dependency to your &lt;code&gt;Package.swift&lt;/code&gt; file and import the &lt;code&gt;SwiftProtobuf&lt;/code&gt; library into the desired targets. Adjust the &lt;code&gt;&quot;1.27.0&quot;&lt;/code&gt; here to match the &lt;code&gt;[tag_name]&lt;/code&gt; you used to build the plugin above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(url: &quot;https://github.com/apple/swift-protobuf.git&quot;, from: &quot;1.27.0&quot;),
],
targets: [
    .target(
      name: &quot;MyTarget&quot;,
      dependencies: [.product(name: &quot;SwiftProtobuf&quot;, package: &quot;swift-protobuf&quot;)]
    ),
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;...using Xcode&lt;/h3&gt; 
&lt;p&gt;If you are using Xcode, then you should:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add the &lt;code&gt;.pb.swift&lt;/code&gt; source files generated from your protos directly to your project&lt;/li&gt; 
 &lt;li&gt;Add this SwiftPM package as dependency of your xcode project: &lt;a href=&quot;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&quot;&gt;Apple Docs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;...using CocoaPods&lt;/h3&gt; 
&lt;p&gt;If you&#39;re using CocoaPods, add this to your &lt;code&gt;Podfile&lt;/code&gt; adjusting the &lt;code&gt;:tag&lt;/code&gt; to match the &lt;code&gt;[tag_name]&lt;/code&gt; you used to build the plugin above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SwiftProtobuf&#39;, &#39;~&amp;gt; 1.0&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;NOTE: CocoaPods 1.7 or newer is required.&lt;/p&gt; 
&lt;h1&gt;Quick Start&lt;/h1&gt; 
&lt;p&gt;Once you have installed the code generator, used it to generate Swift code from your &lt;code&gt;.proto&lt;/code&gt; file, and added the SwiftProtobuf library to your project, you can just use the generated types as you would any other Swift struct.&lt;/p&gt; 
&lt;p&gt;For example, you might start with the following very simple proto file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-protobuf&quot;&gt;syntax = &quot;proto3&quot;;

message BookInfo {
   int64 id = 1;
   string title = 2;
   string author = 3;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then generate Swift code using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;protoc --swift_out=. DataModel.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The generated code will expose a Swift property for each of the proto fields as well as a selection of serialization and deserialization capabilities:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Create a BookInfo object and populate it:
var info = BookInfo()
info.id = 1734
info.title = &quot;Really Interesting Book&quot;
info.author = &quot;Jane Smith&quot;

// As above, but generating a read-only value:
let info2 = BookInfo.with {
    $0.id = 1735
    $0.title = &quot;Even More Interesting&quot;
    $0.author = &quot;Jane Q. Smith&quot;
  }

// Serialize to binary protobuf format: you can choose to serialize into
// any type conforming to `SwiftProtobufContiguousBytes`. For example:
// Resolve the `SwiftProtobufContiguousBytes` return value to `Data`
let binaryData: Data = try info.serializedBytes()
// Resolve the `SwiftProtobufContiguousBytes` return value to `[UInt8]`
let binaryDataAsBytes: [UInt8] = try info.serializedBytes()

// Note that while the `serializedBytes()` spelling is generally preferred,
// you may also use `serializedData()` to get the bytes as an instance of 
// `Data` where required.
// This means that the following two statements are equivalent:
// let binaryData: Data = try info.serializedBytes()
// let binaryData: Data = try info.serializedData()

// Deserialize a received Data object from `binaryData`
let decodedInfo = try BookInfo(serializedData: binaryData)

// Deserialize a received [UInt8] object from `binaryDataAsBytes`
let decodedInfo = try BookInfo(serializedBytes: binaryDataAsBytes)

// Serialize to JSON format as a Data object, or as any other type conforming to
// SwiftProtobufContiguousBytes. For example:
let jsonData: Data = try info.jsonUTF8Data()
let jsonBytes: [UInt8] = try info.jsonUTF8Bytes()

// Deserialize from JSON format from `jsonBytes`
let receivedFromJSON = try BookInfo(jsonUTF8Bytes: jsonBytes)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find more information in the detailed &lt;a href=&quot;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/API.md&quot;&gt;API Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Report any issues&lt;/h2&gt; 
&lt;p&gt;If you run into problems, please send us a detailed report. At a minimum, please include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The specific operating system and version (for example, &quot;macOS 10.12.1&quot; or &quot;Ubuntu 16.10&quot;)&lt;/li&gt; 
 &lt;li&gt;The version of Swift you have installed (from &lt;code&gt;swift --version&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;The version of the protoc compiler you are working with from &lt;code&gt;protoc --version&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;The specific version of this source code (you can use &lt;code&gt;git log -1&lt;/code&gt; to get the latest commit ID)&lt;/li&gt; 
 &lt;li&gt;Any local changes you may have&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>apollographql/apollo-ios</title>
      <link>https://github.com/apollographql/apollo-ios</link>
      <description>&lt;p&gt;📱  A strongly-typed, caching GraphQL client for iOS, written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;header&gt; 
 &lt;div align=&quot;center&quot;&gt; 
  &lt;a href=&quot;https://www.apollographql.com?utm_medium=github&amp;amp;utm_source=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apollographql/apollo-client-devtools/main/assets/apollo-wordmark.svg?sanitize=true&quot; height=&quot;100&quot; alt=&quot;Apollo Logo&quot; /&gt;&lt;/a&gt; 
 &lt;/div&gt; 
 &lt;h1 align=&quot;center&quot;&gt;Apollo iOS&lt;/h1&gt; 
 &lt;p&gt;&lt;strong&gt;The industry-leading GraphQL client in Swift for iOS, macOS, watchOS, tvOS, and more.&lt;/strong&gt; Apollo iOS delivers powerful caching, robust code generation, and intuitive APIs to accelerate your app development.&lt;/p&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://www.apollographql.com/docs/ios/get-started?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;Get Started with Apollo iOS →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;div align=&quot;center&quot;&gt; 
  &lt;br /&gt;
  &lt;br /&gt; 
  &lt;a href=&quot;https://github.com/apollographql/apollo-ios-dev/actions/workflows/ci-tests.yml&quot;&gt; &lt;img src=&quot;https://github.com/apollographql/apollo-ios-dev/actions/workflows/ci-tests.yml/badge.svg?branch=main&quot; alt=&quot;GitHub Action Status&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://raw.githubusercontent.com/apollographql/apollo-ios/main/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/license-MIT-lightgrey.svg?maxAge=2592000&quot; alt=&quot;MIT license&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://raw.githubusercontent.com/apollographql/apollo-ios/main/Platforms&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-333333.svg?sanitize=true&quot; alt=&quot;Supported Platforms: iOS, macOS, tvOS, watchOS&quot; /&gt; &lt;/a&gt;
  &lt;br /&gt;
  &lt;br /&gt; 
  &lt;a href=&quot;https://github.com/apple/swift&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Swift-5.7-orange.svg?sanitize=true&quot; alt=&quot;Swift 5.7 supported&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&quot; alt=&quot;Swift Package Manager compatible&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://cocoapods.org/pods/Apollo&quot;&gt; &lt;img src=&quot;https://img.shields.io/cocoapods/v/Apollo.svg?sanitize=true&quot; alt=&quot;CocoaPods compatible&quot; /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
&lt;/header&gt; 
&lt;h2&gt;❓ Why Choose Apollo iOS?&lt;/h2&gt; 
&lt;p&gt;✅ Intuitive caching - Intelligent in-memory or SQLite out of the box&lt;br /&gt; ✅ Highly configurable code generation - The days of hand-writing models for network responses are over!&lt;br /&gt; ✅ Opinionated - Leads users down the &quot;pit of success&quot; and encourages good practices by default&lt;br /&gt; ✅ Production-tested - Powers countless apps worldwide that serve millions of end users&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; 
&lt;h3&gt;Add Apollo iOS to your dependencies list&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;dependencies: [
    .package(
        url: &quot;https://github.com/apollographql/apollo-ios.git&quot;,
        .upToNextMajor(from: &quot;1.0.0&quot;)
    ),
],
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Link the Apollo product to your package target&lt;/h3&gt; 
&lt;p&gt;Any targets in your application that will use &lt;code&gt;ApolloClient&lt;/code&gt; need to have a dependency on the &lt;code&gt;Apollo&lt;/code&gt; product.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.target(
    name: &quot;MyApp&quot;,
    dependencies: [
        .product(name: &quot;Apollo&quot;, package: &quot;apollo-ios&quot;),
    ]
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Targets that only use Apollo&#39;s generated models don&#39;t need to be linked to the &lt;code&gt;Apollo&lt;/code&gt; product.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;💡 Resources&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Resource&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Link&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Getting Started Guide&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Complete setup and first query&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.apollographql.com/docs/ios/get-started?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;Start Here →&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Full Documentation&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Comprehensive guides and examples&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.apollographql.com/docs/ios?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;Read Docs →&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;API Reference&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Complete API documentation&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/api/apollo-client?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;Browse API →&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;VS Code Extension&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Enhanced development experience&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=apollographql.vscode-apollo&quot;&gt;Install Extension →&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;DevTools&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Debug your GraphQL apps&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/apollo-client-devtools/jdkknkkbebbapilgoeccciglkfbmbnfm&quot;&gt;Chrome&lt;/a&gt; | &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/&quot;&gt;Firefox&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Free Course&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Apollo iOS and Swift: Codegen and Queries&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.apollographql.com/tutorials/apollo-ios-swift-part1?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;Take Course →&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;💬 Get Support&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Need help?&lt;/strong&gt; We&#39;re here for you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://community.apollographql.com?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;Community Forum&lt;/strong&gt;&lt;/a&gt; - Q&amp;amp;A and discussions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.graphql.org&quot;&gt;&lt;strong&gt;GraphQL Discord&lt;/strong&gt;&lt;/a&gt; - Real-time chat with the community&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🧑‍🚀 About Apollo&lt;/h2&gt; 
&lt;p&gt;Deliver tomorrow&#39;s roadmap today with our comprehensive suite of API orchestration tools:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;Apollo Client&lt;/strong&gt;&lt;/a&gt; - Type-safe apps with GraphQL-powered on-device caching (&lt;a href=&quot;https://www.apollographql.com/docs/react?utm_medium=github&amp;amp;utm_source=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://www.apollographql.com/docs/ios?utm_medium=github&amp;amp;utm_source=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;https://www.apollographql.com/docs/kotlin?utm_medium=github&amp;amp;utm_source=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;Kotlin&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/graphos/apollo-connectors?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;Apollo Connectors&lt;/strong&gt;&lt;/a&gt; - Compose all your GraphQL and REST APIs into one GraphQL endpoint&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/apollo-mcp-server?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;Apollo MCP Server&lt;/strong&gt;&lt;/a&gt; - AI needs APIs. The fastest way to ship reliable AI experiences&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/router?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;Apollo Router&lt;/strong&gt;&lt;/a&gt; - Scale your APIs seamlessly with GraphQL Federation, Security, Auth, and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/graphos?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;GraphOS&lt;/strong&gt;&lt;/a&gt; - Deploy, manage, govern, and explore your APIs (&lt;a href=&quot;https://www.apollographql.com/pricing?utm_medium=github&amp;amp;utm_source=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;start for free, no credit card needed&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.apollographql.com/?utm_source=github&amp;amp;utm_medium=apollographql-_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;Explore the Complete Apollo Platform →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🛠️ Maintained by&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Username&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Anthony Miller&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/anthonymdev&quot;&gt;@anthonymdev&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Calvin Cestari&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/calvincestari&quot;&gt;@calvincestari&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Jeff Auriemma&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bignimbus&quot;&gt;@bignimbus&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Zach FettersMoore&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bobafetters&quot;&gt;@bobafetters&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;🗺️ Roadmap&lt;/h2&gt; 
&lt;p&gt;We regularly update our &lt;a href=&quot;https://github.com/apollographql/apollo-ios/raw/main/ROADMAP.md&quot;&gt;public roadmap&lt;/a&gt; with the status of our work-in-progress and upcoming features.&lt;/p&gt; 
&lt;h2&gt;📣 Tell us what you think&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;☑️ Apollo iOS User Survey&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;What do you like best about Apollo iOS? What needs to be improved? Please tell us by taking a &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSczNDXfJne3ZUOXjk9Ursm9JYvhTh1_nFTDfdq3XBAFWCzplQ/viewform?usp=pp_url&amp;amp;entry.1170701325=Apollo+iOS&amp;amp;entry.204965213=Readme&quot;&gt;one-minute survey&lt;/a&gt;. Your responses will help us understand Apollo iOS usage and allow us to serve you better.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;🗓️ Events&lt;/h2&gt; 
&lt;p&gt;Join these live events to meet other GraphQL users and learn more:&lt;/p&gt; 
&lt;p&gt;🎪 &lt;a href=&quot;https://summit.graphql.com?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;GraphQL Summit 2025&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt; Oct 6-8, 2025 • San Francisco&lt;br /&gt; &lt;em&gt;1000+ engineers, talks, workshops, and office hours&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;🌟 &lt;a href=&quot;https://graphql.org/conf/2025&quot;&gt;&lt;strong&gt;GraphQLConf 2025&lt;/strong&gt;&lt;/a&gt; Sep 8-10, 2025 • Amsterdam&lt;br /&gt; &lt;em&gt;Celebrating 10 Years of GraphQL&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.apollographql.com/events?utm_source=github&amp;amp;utm_medium=apollographql_apollo-client&amp;amp;utm_campaign=readme&quot;&gt;&lt;strong&gt;View All Events →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🏆 Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you for your interest in submitting a Pull Request to Apollo iOS! Read our &lt;a href=&quot;https://github.com/apollographql/apollo-ios-dev/raw/main/CONTRIBUTING.md&quot;&gt;guidelines&lt;/a&gt; first, and don&#39;t hesitate to get in touch.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;New to open source?&lt;/strong&gt; Check out our &lt;a href=&quot;https://github.com/apollographql/apollo-ios/labels/good%20first%20issue&quot;&gt;&lt;strong&gt;Good First Issues&lt;/strong&gt;&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;🤝 Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href=&quot;https://community.apollographql.com/faq&quot;&gt;Code of Conduct&lt;/a&gt;. This applies to any space run by Apollo, including our GitHub repositories and the Community Forum. The Code of Conduct reflects our commitment to making the Apollo Community a welcoming and safe space in which individuals can interact.&lt;/p&gt; 
&lt;h2&gt;🪪 License&lt;/h2&gt; 
&lt;p&gt;Source code in this repository is available under the terms of the MIT License. Read the full text &lt;a href=&quot;https://github.com/apollographql/apollo-ios/raw/main/LICENSE&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>andreamazz/AMPopTip</title>
      <link>https://github.com/andreamazz/AMPopTip</link>
      <description>&lt;p&gt;An animated popover that pops out a given frame, great for subtle UI tips and onboarding.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;420&quot; src=&quot;https://raw.githubusercontent.com/andreamazz/AMPopTip/main/assets/logo.png&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/andreamazz/AMPopTip/workflows/Test%20suite/badge.svg?sanitize=true&quot; alt=&quot;Test suite&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Animated popover that pops out of a frame. You can specify the direction of the popover and the arrow that points to its origin. Color, border radius and font can be easily customized. This popover can be used to leave subtle hints about your UI and provide fun looking onboarding popups.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://appetize.io/app/g7x2pwb9jtxdpz9yjb2p5wzk6g&quot; alt=&quot;Live demo&quot;&gt; &lt;img width=&quot;150&quot; height=&quot;75&quot; src=&quot;https://raw.githubusercontent.com/andreamazz/AMPopTip/main/assets/demo-button.png&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Screenshot&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/AMPopTip/master/assets/screenshot.gif&quot; alt=&quot;AMPopTip&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Versioning notes&lt;/h3&gt; 
&lt;p&gt;With version &lt;code&gt;2.0.0&lt;/code&gt; the library was re-written in Swift, and the API was slightly updated. Checkout version &lt;code&gt;1.5.x&lt;/code&gt; for the previous Objective-C implementation.&lt;/p&gt; 
&lt;p&gt;Version &lt;code&gt;3.0.0&lt;/code&gt; introduces Swift 4 support, &lt;code&gt;3.5.0&lt;/code&gt; Swift 4.2.&lt;/p&gt; 
&lt;h1&gt;Setup with CocoaPods&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add &lt;code&gt;pod &#39;AMPopTip&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;open App.xcworkspace&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Setup with Carthage&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add &lt;code&gt;github &quot;andreamazz/AMPopTip&quot;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;carthage update&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;AMPopTip.framework&lt;/code&gt; in your project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can then import the framework in your project&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import AMPopTip
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;The API is fairly straight forward, you can show and hide the popover at any time.&lt;/p&gt; 
&lt;h2&gt;Showing the popover&lt;/h2&gt; 
&lt;p&gt;You must specify the text that you want to display alongside the popover direction, its max width, the view that will contain it and the frame of the view that the popover&#39;s arrow will point to.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let popTip = PopTip()
popTip.show(text: &quot;Hey! Listen!&quot;, direction: .up, maxWidth: 200, in: view, from: someView.frame)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also display the popover in the center, with no arrow, in this case the &lt;code&gt;from&lt;/code&gt; can be the whole view:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.show(text: &quot;Hey! Listen!&quot;, direction: .none, maxWidth: 200, in: view, from: view.frame)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Coordinate system&lt;/h2&gt; 
&lt;p&gt;Please note that the frame you are intended to provide needs to refer to the absolute coordinate system of the view you are presenting the popover in. This means that if you are presenting the popover in a view, pointing to a nested subview, you&#39;ll need to convert its frame using UIKit&#39;s &lt;code&gt;convertRect(_:toView:)&lt;/code&gt;. Read the reference &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/occ/instm/UIView/convertRect:toView:&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Direction&lt;/h2&gt; 
&lt;p&gt;You can specify the direction that the tip will occupy, or you can let the library decide by using &lt;code&gt;auto&lt;/code&gt; (all axis), &lt;code&gt;autoHorizontal&lt;/code&gt; (only &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;) or &lt;code&gt;autoVertical&lt;/code&gt; (only &lt;code&gt;up&lt;/code&gt; or &lt;code&gt;down&lt;/code&gt;). Once the popup is visible, the &lt;code&gt;direction&lt;/code&gt; property will hold the direction that was decided.&lt;/p&gt; 
&lt;h2&gt;Showing a custom view&lt;/h2&gt; 
&lt;p&gt;You can provide a custom view that will be wrapped in the PopTip and presented.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let customView = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))
// Configure your view
popTip.show(customView: customView, direction: .down, in: view, from: someView.frame)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Showing a custom SwiftUI view&lt;/h2&gt; 
&lt;p&gt;You can provide a custom SwiftUI view that will be embed in a &lt;code&gt;UIHostingController&lt;/code&gt;, added to a parent controller and then wrapped in the PopTip and presented.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let customSwiftUIView = MySwiftUIView()
// Configure your view
popTip.show(rootView: customSwiftUIView, direction: .down, in: view, from: someView.frame, parent: someParentViewController)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dismissing the popover&lt;/h2&gt; 
&lt;p&gt;You can hide the popover by calling:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.hide()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can specify the duration of the popover:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.show(text: &quot;Hey! Listen!&quot;, direction: .up, maxWidth: 200, in: view, from: someView.frame, duration: 3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also let the user dismiss the popover by tapping on it (default &lt;code&gt;true&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.shouldDismissOnTap = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also let the user tap outside the popover dismiss the PopTip (default &lt;code&gt;true&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.shouldDismissOnTapOutside = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also consider the origin frame as part of the popTip, i.e. treat the origin frame the same as tapping the popover (default &lt;code&gt;false&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.shouldConsiderOriginatingFrameAsPopTip = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also consider the cutout as a separate tap area that will call a different callback (default &lt;code&gt;false&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.shouldConsiderCutoutTapSeparately = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also allow the user to dismiss via swiping outside the PopTip (default &lt;code&gt;false&lt;/code&gt;) (direction is controlled via &lt;code&gt;popTip.swipeRemoveGestureDirection&lt;/code&gt; with &lt;code&gt;UISwipeGestureRecognizer.Direction&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.shouldDismissOnSwipeOutside = false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can add a block that will be fired when the user taps the PopTip...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.tapHandler = { popTip in
  print(&quot;\(popTip) tapped&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... when the cutout is tapped...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.tapCutoutHandler = { popTip in
  print(&quot;\(popTip) cutout tapped&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... when the popover is shown...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.appearHandler = { popTip in
  print(&quot;\(popTip) appeared&quot;)
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... or when the popover is dismissed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.dismissHandler = { popTip in
  print(&quot;\(popTip) dismissed&quot;)
}

popTip.tapOutsideHandler = { _ in
  print(&quot;tap outside&quot;)
}

popTip.swipeOutsideHandler = { _ in
  print(&quot;swipe outside&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Forwarding tap gesture on dismiss&lt;/h1&gt; 
&lt;p&gt;By default the &quot;tap to dismiss&quot; gesture recognizer cancels the taps in the view, you can enable this behaviour manually if needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.tapToRemoveGestureRecognizer?.cancelsTouchesInView = false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Updating the PopTip&lt;/h1&gt; 
&lt;p&gt;You can update the text, attributed text, or custom view to a PopTip already visible:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.update(text: &quot;New string&quot;)
popTip.update(attributedText: someAttributedString)
popTip.update(customView: someView)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The position can also be changed by updating the &lt;code&gt;from&lt;/code&gt; property:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let here = CGRect(x: 100, 100, 10, 10)
let there = CGRect(x: 400, 400, 10, 10)

popTip.show(text: &quot;Hey! Listen!&quot;, direction: .up, maxWidth: 200, in: view, from: here)
DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
  popTip.from = there
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Custom entrance animation&lt;/h1&gt; 
&lt;p&gt;You can choose which animation should be performed when the popTip is displayed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.entranceAnimation = .scale;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Available animations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;PopTipEntranceAnimation.scale,
PopTipEntranceAnimation.transition,
PopTipEntranceAnimation.none,
PopTipEntranceAnimation.custom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;PopTipEntranceAnimation.custom&lt;/h2&gt; 
&lt;p&gt;You can provide your own animation block when using &lt;code&gt;PopTipEntranceAnimation.custom&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.entranceAnimationHandler = { [weak self] completion in
  guard let `self` = self else { return }
  self.popTip.transform = CGAffineTransform(rotationAngle: 0.3)
  UIView.animate(withDuration: 0.5, animations: {
    self.popTip.transform = .identity
  }, completion: { (_) in
    completion()
  })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This sample makes the PopTip rotate on entrance. Make sure to call the completion block when the animation is done. Also note that the animation is fired as soon as the PopTip is added as subview.&lt;/p&gt; 
&lt;h1&gt;Action animations&lt;/h1&gt; 
&lt;p&gt;Action animations are subtle animations that can be performed to get the user&#39;s attention. Set your preferred animation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.actionAnimation = .bounce()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Available animations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;PopTipActionAnimation.bounce,
PopTipActionAnimation.float,
PopTipActionAnimation.pulse,
PopTipActionAnimation.none
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The animation is fired as soon as the popover enters the scene and completes its entrance animation, if &lt;code&gt;startActionAnimationOnShow&lt;/code&gt; is set to true.&lt;/p&gt; 
&lt;h2&gt;Customize the animations&lt;/h2&gt; 
&lt;p&gt;You can pass a custom value as an associated value to customize the action animation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.actionAnimation = .bounce(16) // This will bounce for 16px instead of the default value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/andreamazz/AMPopTip/main/assets/bounce_effect.gif&quot; alt=&quot;AMPopTip bounce&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Customizing the arrow position&lt;/h1&gt; 
&lt;p&gt;The arrow is centered by default, and moves to avoid the edge of the screen. You can manually change the offset from the center using the &lt;code&gt;bubbleOffset&lt;/code&gt; property.&lt;/p&gt; 
&lt;h1&gt;A note about subviews&lt;/h1&gt; 
&lt;p&gt;The popover is presented inside the view provided in the &lt;code&gt;in&lt;/code&gt; parameter. If this view is smaller than the resulting popover, to prevent clipping set &lt;code&gt;clipsToBounds = false&lt;/code&gt; on the presenting view, and set &lt;code&gt;constrainInContainerView = false&lt;/code&gt; to the pop tip instance. See #175 for more context.&lt;/p&gt; 
&lt;h1&gt;Customization&lt;/h1&gt; 
&lt;p&gt;Use the appearance proxy to customize the popover before creating the instance, or just use its public properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;textColor = &amp;lt;#UIColor#&amp;gt;;
textAlignment = &amp;lt;#NSTextAlignment#&amp;gt;
bubbleColor = &amp;lt;#UIColor#&amp;gt;
bubbleLayerGenerator = &amp;lt;#(PopTip)-&amp;gt;Void#&amp;gt;
borderColor = &amp;lt;#UIColor#&amp;gt;
borderWidth = &amp;lt;#CGFloat#&amp;gt;
cornerRadius = &amp;lt;#CGFloat#&amp;gt; // Popover&#39;s border radius
isRounded = &amp;lt;#Bool#&amp;gt; // If set to YES the radius will equal frame.height / 2
offset = &amp;lt;#CGFloat#&amp;gt; // Offset between the popover and the origin
font = &amp;lt;#UIFont#&amp;gt;
padding = &amp;lt;#CGFloat#&amp;gt;
edgeInsets = &amp;lt;#UIEdgeInsets#&amp;gt;
arrowSize = &amp;lt;#CGSize#&amp;gt;
animationIn = &amp;lt;#TimeInterval#&amp;gt;
animationOut = &amp;lt;#TimeInterval#&amp;gt;
delayIn = &amp;lt;#TimeInterval#&amp;gt;
delayOut = &amp;lt;#TimeInterval#&amp;gt;
entranceAnimation = &amp;lt;#PopTipEntranceAnimation#&amp;gt;
exitAnimation = &amp;lt;#PopTipExitAnimation#&amp;gt;
actionAnimation = &amp;lt;#PopTipActionAnimation#&amp;gt;
actionAnimationIn = &amp;lt;#TimeInterval#&amp;gt;
actionAnimationOut = &amp;lt;#TimeInterval#&amp;gt;
actionDelayIn = &amp;lt;#TimeInterval#&amp;gt;
actionDelayOut = &amp;lt;#TimeInterval#&amp;gt;
edgeMargin = &amp;lt;#CGFloat#&amp;gt;
bubbleOffset = &amp;lt;#CGFloat#&amp;gt; // Offset between the bubble and the origin
arrowOffset = &amp;lt;#CGFloat#&amp;gt; // Offset between the bubble center and the arrow
arrowRadius = &amp;lt;#CGFloat#&amp;gt;
shadowOpacity = &amp;lt;#Float#&amp;gt;
shadowRadius = &amp;lt;#Float#&amp;gt;
shadowOffset = &amp;lt;#CGSize#&amp;gt;
shadowColor = &amp;lt;#UIColor#&amp;gt;
maskColor = &amp;lt;#UIColor#&amp;gt;
shouldShowMask = &amp;lt;#Bool#&amp;gt;
shouldCutoutMask = &amp;lt;#Bool#&amp;gt;
cutoutPathGenerator = &amp;lt;#(CGRect)-&amp;gt;UIBezierPath#&amp;gt;
constrainInContainerView = &amp;lt;#Bool#&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Background mask&lt;/h2&gt; 
&lt;p&gt;A background mask can be applied to dim the background when the PopTip is active, this can be enabeld by setting the public property to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.shouldShowMask = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The color is set by the &lt;code&gt;maskColor&lt;/code&gt; property (default is &lt;code&gt;UIColor(red: 0, green: 0, blue: 0, alpha: 0.6)&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.maskColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Adding a cutout&lt;/h3&gt; 
&lt;p&gt;A cutout can be applied to the background mask to allow the &lt;code&gt;from&lt;/code&gt; view to be visible through the dimmed background. &lt;code&gt;shouldShowMask&lt;/code&gt; must be &lt;code&gt;true&lt;/code&gt; as well as &lt;code&gt;shouldCutoutMask&lt;/code&gt; for this to work. The cutout path is supplied via a closure with a signature of &lt;code&gt;(_ from: CGRect) -&amp;gt; UIBezierPath&lt;/code&gt; stored against public property &lt;code&gt;cutoutPathGenerator&lt;/code&gt;. The closure will provide an argument which is the &lt;code&gt;CGRect&lt;/code&gt; frame supplied to &lt;code&gt;popTip.show(...)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The default generator add an &lt;code&gt;8&lt;/code&gt; rounded rectangle around the &lt;code&gt;from&lt;/code&gt; frame area which has &lt;code&gt;8&lt;/code&gt; padding in the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; directions, it is as follows but can be changed to whatever is desired:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.cutoutPathGenerator = { from in
  UIBezierPath(roundedRect: from.insetBy(dx: -8, dy: -8), byRoundingCorners: .allCorners, cornerRadii: CGSize(width: 8, height: 8))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A seperate callback closure can be called on tapping the area defined by the &lt;code&gt;cutoutPathGenerator&lt;/code&gt; provided both &lt;code&gt;shouldShowMask&lt;/code&gt; and &lt;code&gt;shouldCutoutMask&lt;/code&gt; are &lt;code&gt;true&lt;/code&gt;, the closure is as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.tapCutoutHandler = { popTip in
  print(&quot;\(popTip) cutout tapped&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Custom bubble background&lt;/h2&gt; 
&lt;p&gt;A custom &lt;code&gt;CALayer&lt;/code&gt; can be used as the background for the PopTip bubble, this is supplied via a closure with a signauture of &lt;code&gt;((_ path: UIBezierPath) -&amp;gt; CALayer?)?&lt;/code&gt; stored against public property &lt;code&gt;bubbleLayerGenerator&lt;/code&gt;. The closure will provide an argument which is the &lt;code&gt;UIBezierPath&lt;/code&gt; that represents the draw path for the PopTip bubble and arrow.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;bubbleLayerGenerator&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, then the &lt;code&gt;bubbleColor&lt;/code&gt; will be used instead for a solid background fill. If &lt;code&gt;bubbleLayerGenerator&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;, then it will be used, providing it provides a valid &lt;code&gt;CALayer&lt;/code&gt;, otherwise &lt;code&gt;bubbleColor&lt;/code&gt; will be used as a solid color fallback. Example below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;popTip.bubbleLayerGenerator = { path in
  
  let gradient = CAGradientLayer()
  gradient.frame = path.bounds
  gradient.colors = [UIColor.black.withAlphaComponent(0.4).cgColor, UIColor.black.withAlphaComponent(0.3)]
  gradient.locations = [0, 1]
  gradient.startPoint = CGPoint(x: 0.5, y: 0.0)
  gradient.endPoint = CGPoint(x: 0.5, y: 1.0)
    
  let shapeMask = CAShapeLayer()
  shapeMask.path = path.cgPath
  gradient.mask = shapeMask
  
  return gradient
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Author&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/theandreamazz&quot;&gt;Andrea Mazzini&lt;/a&gt;. I&#39;m available for freelance work, feel free to contact me.&lt;/p&gt; 
&lt;p&gt;Want to support the development of &lt;a href=&quot;https://cocoapods.org/owners/734&quot;&gt;these free libraries&lt;/a&gt;? Buy me a coffee ☕️ via &lt;a href=&quot;https://www.paypal.me/andreamazzini&quot;&gt;Paypal&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/andreamazz/AMPopTip/graphs/contributors&quot;&gt;everyone&lt;/a&gt; kind enough to submit a pull request.&lt;/p&gt; 
&lt;h1&gt;MIT License&lt;/h1&gt; 
&lt;pre&gt;&lt;code&gt;Copyright (c) 2017 Andrea Mazzini. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the &quot;Software&quot;),
to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>realm/SwiftLint</title>
      <link>https://github.com/realm/SwiftLint</link>
      <description>&lt;p&gt;A tool to enforce Swift style and conventions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftLint&lt;/h1&gt; 
&lt;p&gt;A tool to enforce Swift style and conventions, loosely based on the now archived &lt;a href=&quot;https://github.com/github/swift-style-guide&quot;&gt;GitHub Swift Style Guide&lt;/a&gt;. SwiftLint enforces the style guide rules that are generally accepted by the Swift community. These rules are well described in popular style guides like &lt;a href=&quot;https://github.com/kodecocodes/swift-style-guide&quot;&gt;Kodeco&#39;s Swift Style Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;SwiftLint hooks into &lt;a href=&quot;http://clang.llvm.org&quot;&gt;Clang&lt;/a&gt; and &lt;a href=&quot;http://www.jpsim.com/uncovering-sourcekit&quot;&gt;SourceKit&lt;/a&gt; to use the &lt;a href=&quot;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&quot;&gt;AST&lt;/a&gt; representation of your source files for more accurate results.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://swiftpackageindex.com/realm/SwiftLint&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Frealm%2FSwiftLint%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;Supported Swift Versions&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/realm/SwiftLint&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Frealm%2FSwiftLint%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;Supported Platforms&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/jpsim/SwiftLint/_build/latest?definitionId=4?branchName=main&quot;&gt;&lt;img src=&quot;https://dev.azure.com/jpsim/SwiftLint/_apis/build/status/realm.SwiftLint?branchName=main&quot; alt=&quot;Azure Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://buildkite.com/swiftlint/swiftlint&quot;&gt;&lt;img src=&quot;https://badge.buildkite.com/e2a5bc32c347e76e2793e4c5764a5f42bcd42bbe32f79c3a53.svg?branch=main&quot; alt=&quot;Buildkite Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/screenshot.png&quot; alt=&quot;SwiftLint violations highlighted in the Xcode editor&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This project adheres to the &lt;a href=&quot;https://realm.io/conduct&quot;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Switch Language: &lt;a href=&quot;https://github.com/realm/SwiftLint/raw/main/README_CN.md&quot;&gt;中文&lt;/a&gt; &lt;a href=&quot;https://github.com/realm/SwiftLint/raw/main/README_KR.md&quot;&gt;한국어&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Video Introduction&lt;/h2&gt; 
&lt;p&gt;To get a high-level overview of SwiftLint, we encourage you to watch this presentation recorded January 9th, 2017 by JP Simard (transcript provided):&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/9Z1nTMTejqU&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/presentation.svg?sanitize=true&quot; alt=&quot;Presentation&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;SwiftLint can be used as a &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#swift-package-command-plugin&quot;&gt;command plugin&lt;/a&gt; or a &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#build-tool-plugins&quot;&gt;build tool plugin&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Add&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/SimplyDanny/SwiftLintPlugins&quot;, from: &quot;&amp;lt;version&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to your &lt;code&gt;Package.swift&lt;/code&gt; file to consume the latest release of SwiftLint automatically or pin the dependency to a specific version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/SimplyDanny/SwiftLintPlugins&quot;, exact: &quot;&amp;lt;version&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Therein, replace &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; with the desired minimum or exact version.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Consuming the plugins directly from the SwiftLint repository comes with several drawbacks. To avoid them and reduce the overhead imposed, it&#39;s highly recommended to consume the plugins from the dedicated &lt;a href=&quot;https://github.com/SimplyDanny/SwiftLintPlugins&quot;&gt;SwiftLintPlugins repository&lt;/a&gt;, even though plugins from the SwiftLint repository are also absolutely functional. If the plugins from SwiftLint are preferred, just use the URL &lt;code&gt;https://github.com/realm/SwiftLint&lt;/code&gt; in the package declarations above.&lt;/p&gt; 
 &lt;p&gt;However, &lt;a href=&quot;https://github.com/SimplyDanny/SwiftLintPlugins&quot;&gt;SwiftLintPlugins&lt;/a&gt; facilitates plugin adoption massively. It lists some of the reasons that drive the plugins as provided by SwiftLint itself very troublesome. Since the plugin code and the releases are kept in sync, there is no difference in functionality between the two, but you spare yourself a lot of time and trouble using the dedicated plugins repository.&lt;/p&gt; 
 &lt;p&gt;This document assumes you&#39;re relying on SwiftLintPlugins.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a href=&quot;https://developer.apple.com/documentation/xcode/adding-package-dependencies-to-your-app&quot;&gt;Xcode Package Dependency&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Use the following link to add SwiftLint as a Package Dependency to an Xcode project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;https://github.com/SimplyDanny/SwiftLintPlugins
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Add the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;pod &#39;SwiftLint&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will download the SwiftLint binaries and dependencies in &lt;code&gt;Pods/&lt;/code&gt; during your next &lt;code&gt;pod install&lt;/code&gt; execution and will allow you to invoke it via &lt;code&gt;${PODS_ROOT}/SwiftLint/swiftlint&lt;/code&gt; in your Script Build Phases.&lt;/p&gt; 
&lt;p&gt;Installing via Cocoapods also enables pinning to a specific version of SwiftLint rather than simply the latest (which is the case with &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#homebrew&quot;&gt;Homebrew&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Note that this will add the SwiftLint binaries, its dependencies&#39; binaries, and the Swift binary library distribution to the &lt;code&gt;Pods/&lt;/code&gt; directory, so checking in this directory to SCM such as Git is discouraged.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/yonaskolb/mint&quot;&gt;Mint&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mint install realm/SwiftLint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://bazel.build&quot;&gt;Bazel&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Put this in your &lt;code&gt;MODULE.bazel&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bzl&quot;&gt;bazel_dep(name = &quot;swiftlint&quot;, version = &quot;0.52.4&quot;, repo_name = &quot;SwiftLint&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or put this in your &lt;code&gt;WORKSPACE&lt;/code&gt;:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;WORKSPACE&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bzl&quot;&gt;load(&quot;@bazel_tools//tools/build_defs/repo:http.bzl&quot;, &quot;http_archive&quot;)

http_archive(
    name = &quot;build_bazel_rules_apple&quot;,
    sha256 = &quot;390841dd5f8a85fc25776684f4793d56e21b098dfd7243cd145b9831e6ef8be6&quot;,
    url = &quot;https://github.com/bazelbuild/rules_apple/releases/download/2.4.1/rules_apple.2.4.1.tar.gz&quot;,
)

load(
    &quot;@build_bazel_rules_apple//apple:repositories.bzl&quot;,
    &quot;apple_rules_dependencies&quot;,
)

apple_rules_dependencies()

load(
    &quot;@build_bazel_rules_swift//swift:repositories.bzl&quot;,
    &quot;swift_rules_dependencies&quot;,
)

swift_rules_dependencies()

load(
    &quot;@build_bazel_rules_swift//swift:extras.bzl&quot;,
    &quot;swift_rules_extra_dependencies&quot;,
)

swift_rules_extra_dependencies()

http_archive(
    name = &quot;SwiftLint&quot;,
    sha256 = &quot;c6ea58b9c72082cdc1ada4a2d48273ecc355896ed72204cedcc586b6ccb8aca6&quot;,
    url = &quot;https://github.com/realm/SwiftLint/releases/download/0.52.4/bazel.tar.gz&quot;,
)

load(&quot;@SwiftLint//bazel:repos.bzl&quot;, &quot;swiftlint_repos&quot;)

swiftlint_repos()

load(&quot;@SwiftLint//bazel:deps.bzl&quot;, &quot;swiftlint_deps&quot;)

swiftlint_deps()
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Then you can run SwiftLint in the current directory with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;bazel run -c opt @SwiftLint//:swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pre-Built Package&lt;/h3&gt; 
&lt;p&gt;Download &lt;code&gt;SwiftLint.pkg&lt;/code&gt; from the &lt;a href=&quot;https://github.com/realm/SwiftLint/releases/latest&quot;&gt;latest GitHub release&lt;/a&gt; and run it.&lt;/p&gt; 
&lt;h3&gt;From Source&lt;/h3&gt; 
&lt;p&gt;Make sure the build tool &lt;a href=&quot;https://bazel.build&quot;&gt;Bazel&lt;/a&gt; and a recent &lt;a href=&quot;https://www.swift.org/download/&quot;&gt;Swift toolchain&lt;/a&gt; are installed and all tools are discoverable in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To build SwiftLint, clone this repository and run &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] While it may seem intuitive to run SwiftLint before compiling Swift source files to exit a build early when there are lint violations, it is important to understand that SwiftLint is designed to analyze valid source code that is compilable. Non-compiling code can very easily lead to unexpected and confusing results, especially when executing with &lt;code&gt;--fix&lt;/code&gt;/&lt;code&gt;--autocorrect&lt;/code&gt; command line arguments.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Build Tool Plugins&lt;/h3&gt; 
&lt;p&gt;SwiftLint can be used as a build tool plugin for both &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#swift-package-projects&quot;&gt;Swift Package projects&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#xcode-projects&quot;&gt;Xcode projects&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The build tool plugin determines the SwiftLint working directory by locating the topmost config file within the package/project directory. If a config file is not found therein, the package/project directory is used as the working directory.&lt;/p&gt; 
&lt;p&gt;The plugin throws an error when it is unable to resolve the SwiftLint working directory. For example, this will occur in Xcode projects where the target&#39;s Swift files are not located within the project directory.&lt;/p&gt; 
&lt;p&gt;To maximize compatibility with the plugin, avoid project structures that require the use of the &lt;code&gt;--config&lt;/code&gt; option.&lt;/p&gt; 
&lt;h3&gt;Swift Package Projects&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Requires installing via &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Build tool plugins run when building each target. When a project has multiple targets, the plugin must be added to the desired targets individually.&lt;/p&gt; 
&lt;p&gt;To do this, add the plugin to the target(s) to be linted as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.target(
    ...
    plugins: [.plugin(name: &quot;SwiftLintBuildToolPlugin&quot;, package: &quot;SwiftLintPlugins&quot;)]
),
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Swift Package Command Plugin&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Requires installing via &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The command plugin enables running SwiftLint from the command line as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;swift package plugin swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Xcode Projects&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Requires installing via &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#xcode-package-dependency&quot;&gt;Xcode Package Dependency&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Build tool plugins run as a build phase of each target. When a project has multiple targets, the plugin must be added to the desired targets individually.&lt;/p&gt; 
&lt;p&gt;To do this, add the &lt;code&gt;SwiftLintBuildToolPlugin&lt;/code&gt; to the &lt;code&gt;Run Build Tool Plug-ins&lt;/code&gt; phase of the &lt;code&gt;Build Phases&lt;/code&gt; for the target(s) to be linted.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] When using the plugin for the first time, be sure to trust and enable it when prompted. If a macros build warning exists, select it to trust and enable the macros as well.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For unattended use (e.g. on CI), package plugin and macro validations can be disabled with either of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Using &lt;code&gt;xcodebuild&lt;/code&gt; options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;-skipPackagePluginValidation
-skipMacroValidation
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Setting Xcode defaults:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidatation -bool YES
defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The unattended use options bypass Xcode&#39;s validation dialogs and implicitly trust all plugins and macros, which has security implications.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Unexpected Xcode Project Structures&lt;/h4&gt; 
&lt;p&gt;Project structures where SwiftLint&#39;s configuration file is located outside of the package/project directory are not directly supported by the build tool plugin. This is because it isn&#39;t possible to pass arguments to build tool plugins (e.g., passing the config file path).&lt;/p&gt; 
&lt;p&gt;If your project structure doesn&#39;t work directly with the build tool plugin, please consider one of the following options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To use a config file located outside the package/project directory, a config file may be added to that directory specifying a parent config path to the other config file, e.g., &lt;code&gt;parent_config: path/to/.swiftlint.yml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;You can also consider the use of a &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#xcode-run-script-build-phase&quot;&gt;Run Script Build Phase&lt;/a&gt; in place of the build tool plugin.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Xcode Run Script Build Phase&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Based upon the installation method used, the shell command syntax in the Run Script Build Phase may be different or additional configuration could be required. Refer to the &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#installation&quot;&gt;installation&lt;/a&gt; instructions for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If the build tool plugin does not work for your project setup or when additional custom setup is required, SwiftLint can be added as a Run Script Build Phase. This is useful when a project setup relies on the &lt;code&gt;--config&lt;/code&gt; SwiftLint option; or to lint all targets together in a single &lt;code&gt;swiftlint&lt;/code&gt; invocation. File inclusions and exclusions can be configured in the &lt;a href=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/#configuration&quot;&gt;&lt;code&gt;.swiftlint.yml&lt;/code&gt; configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To do this, add a custom script to a &lt;code&gt;Run Script&lt;/code&gt; phase of the &lt;code&gt;Build Phases&lt;/code&gt; of the primary app target, after the &lt;code&gt;Compile Sources&lt;/code&gt; phase. Use the following script implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if command -v swiftlint &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
then
    swiftlint
else
    echo &quot;warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#installation for installation instructions.&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re using the SwiftLintPlugin in a Swift package, you may refer to the &lt;code&gt;swiftlint&lt;/code&gt; executable in the following way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;SWIFT_PACKAGE_DIR=&quot;${BUILD_DIR%Build/*}SourcePackages/artifacts&quot;
SWIFTLINT_CMD=&quot;$SWIFT_PACKAGE_DIR/swiftlintplugins/SwiftLintBinary/SwiftLintBinary.artifactbundle/macos/swiftlint&quot;

if test -f &quot;$SWIFTLINT_CMD&quot; 2&amp;gt;&amp;amp;1
then
    &quot;$SWIFTLINT_CMD&quot;
else
    echo &quot;warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#xcode-run-script-build-phase for installation instructions.&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The &lt;code&gt;SWIFTLINT_CMD&lt;/code&gt; path uses the default Xcode configuration and has been tested on Xcode 15/16. In case of another configuration (e.g. a custom Swift package path), please adapt the values accordingly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- markdownlint-disable MD028 --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Uncheck &lt;code&gt;Based on dependency analysis&lt;/code&gt; to run &lt;code&gt;swiftlint&lt;/code&gt; on all incremental builds, suppressing the unspecified outputs warning.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Consideration for Xcode 15.0&lt;/h4&gt; 
&lt;p&gt;Xcode 15 made a significant change by setting the default value of the &lt;code&gt;ENABLE_USER_SCRIPT_SANDBOXING&lt;/code&gt; build setting from &lt;code&gt;NO&lt;/code&gt; to &lt;code&gt;YES&lt;/code&gt;. As a result, SwiftLint encounters an error related to missing file permissions, which typically manifests as &lt;code&gt;error: Sandbox: swiftlint(19427) deny(1) file-read-data.&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To resolve this issue, it is necessary to manually set the &lt;code&gt;ENABLE_USER_SCRIPT_SANDBOXING&lt;/code&gt; setting to &lt;code&gt;NO&lt;/code&gt; for the specific target that SwiftLint is being configured for.&lt;/p&gt; 
&lt;h4&gt;Consideration for Apple Silicon&lt;/h4&gt; 
&lt;p&gt;If you installed SwiftLint via Homebrew on Apple Silicon, you might experience this warning:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is because Homebrew on Apple Silicon installs the binaries into the &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; folder by default. To instruct Xcode where to find SwiftLint, you can either add &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; environment variable in your build phase:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [[ &quot;$(uname -m)&quot; == arm64 ]]
then
    export PATH=&quot;/opt/homebrew/bin:$PATH&quot;
fi

if command -v swiftlint &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
then
    swiftlint
else
    echo &quot;warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#installation for installation instructions.&quot;
fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or you can create a symbolic link in &lt;code&gt;/usr/local/bin&lt;/code&gt; pointing to the actual binary:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ln -s /opt/homebrew/bin/swiftlint /usr/local/bin/swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Additional Considerations&lt;/h4&gt; 
&lt;p&gt;If you wish to fix violations as well, your script could run &lt;code&gt;swiftlint --fix &amp;amp;&amp;amp; swiftlint&lt;/code&gt; instead of just &lt;code&gt;swiftlint&lt;/code&gt;. This will mean that all correctable violations are fixed while ensuring warnings show up in your project for remaining violations.&lt;/p&gt; 
&lt;p&gt;If you&#39;ve installed SwiftLint via CocoaPods the script should look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&quot;${PODS_ROOT}/SwiftLint/swiftlint&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Visual Studio Code&lt;/h3&gt; 
&lt;p&gt;To integrate SwiftLint with &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt;, install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftlint&quot;&gt;&lt;code&gt;vscode-swiftlint&lt;/code&gt;&lt;/a&gt; extension from the marketplace.&lt;/p&gt; 
&lt;h3&gt;Fastlane&lt;/h3&gt; 
&lt;p&gt;You can use the official &lt;a href=&quot;https://docs.fastlane.tools/actions/swiftlint&quot;&gt;&lt;code&gt;swiftlint&lt;/code&gt; fastlane action&lt;/a&gt; to run SwiftLint as part of your fastlane process.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;swiftlint(
    mode: :lint,                            # SwiftLint mode: :lint (default) or :autocorrect
    executable: &quot;Pods/SwiftLint/swiftlint&quot;, # The SwiftLint binary path (optional). Important if you&#39;ve installed it via CocoaPods
    path: &quot;/path/to/lint&quot;,                  # Specify path to lint (optional)
    output_file: &quot;swiftlint.result.json&quot;,   # The path of the output file (optional)
    reporter: &quot;json&quot;,                       # The custom reporter to use (optional)
    config_file: &quot;.swiftlint-ci.yml&quot;,       # The path of the configuration file (optional)
    files: [                                # List of files to process (optional)
        &quot;AppDelegate.swift&quot;,
        &quot;path/to/project/Model.swift&quot;
    ],
    ignore_exit_status: true,               # Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)
    quiet: true,                            # Don&#39;t print status logs like &#39;Linting &#39; &amp;amp; &#39;Done linting&#39; (Default: false)
    strict: true                            # Fail on warnings? (Default: false)
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;SwiftLint is also available as a &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; image using &lt;code&gt;Ubuntu&lt;/code&gt;. So just the first time you need to pull the docker image using the next command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull ghcr.io/realm/swiftlint:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then following times, you just run &lt;code&gt;swiftlint&lt;/code&gt; inside of the docker like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will execute &lt;code&gt;swiftlint&lt;/code&gt; in the folder where you are right now (&lt;code&gt;pwd&lt;/code&gt;), showing an output like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest
Linting Swift files in current working directory
Linting &#39;RuleDocumentation.swift&#39; (1/490)
...
Linting &#39;YamlSwiftLintTests.swift&#39; (490/490)
Done linting! Found 0 violations, 0 serious in 490 files.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here you have more documentation about the usage of &lt;a href=&quot;https://docs.docker.com/&quot;&gt;Docker Images&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Command Line Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;$ swiftlint help
OVERVIEW: A tool to enforce Swift style and conventions.

USAGE: swiftlint &amp;lt;subcommand&amp;gt;

OPTIONS:
  --version               Show the version.
  -h, --help              Show help information.

SUBCOMMANDS:
  analyze                 Run analysis rules
  docs                    Open SwiftLint documentation website in the default web browser
  generate-docs           Generates markdown documentation for selected group of rules
  lint (default)          Print lint warnings and errors
  baseline                Operations on existing baselines
  reporters               Display the list of reporters and their identifiers
  rules                   Display the list of rules and their identifiers
  version                 Display the current version of SwiftLint

  See &#39;swiftlint help &amp;lt;subcommand&amp;gt;&#39; for detailed help.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run &lt;code&gt;swiftlint&lt;/code&gt; in the directory containing the Swift files to lint. Directories will be searched recursively.&lt;/p&gt; 
&lt;p&gt;To specify a list of files when using &lt;code&gt;lint&lt;/code&gt; or &lt;code&gt;analyze&lt;/code&gt; (like the list of files modified by Xcode specified by the &lt;a href=&quot;https://github.com/norio-nomura/ExtraBuildPhase&quot;&gt;&lt;code&gt;ExtraBuildPhase&lt;/code&gt;&lt;/a&gt; Xcode plugin, or modified files in the working tree based on &lt;code&gt;git ls-files -m&lt;/code&gt;), you can do so by passing the option &lt;code&gt;--use-script-input-files&lt;/code&gt; and setting the following instance variables: &lt;code&gt;SCRIPT_INPUT_FILE_COUNT&lt;/code&gt; and &lt;code&gt;SCRIPT_INPUT_FILE_0&lt;/code&gt;, &lt;code&gt;SCRIPT_INPUT_FILE_1&lt;/code&gt;, ..., &lt;code&gt;SCRIPT_INPUT_FILE_{SCRIPT_INPUT_FILE_COUNT - 1}&lt;/code&gt;. Similarly, files can be read from file lists by passing the option &lt;code&gt;--use-script-input-file-lists&lt;/code&gt; and setting the following instance variables: &lt;code&gt;SCRIPT_INPUT_FILE_LIST_COUNT&lt;/code&gt; and &lt;code&gt;SCRIPT_INPUT_FILE_LIST_0&lt;/code&gt;, &lt;code&gt;SCRIPT_INPUT_FILE_LIST_1&lt;/code&gt;, ..., &lt;code&gt;SCRIPT_INPUT_FILE_LIST_{SCRIPT_INPUT_FILE_LIST_COUNT - 1}&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;These are same environment variables set for input files to &lt;a href=&quot;http://indiestack.com/2014/12/speeding-up-custom-script-phases/&quot;&gt;custom Xcode script phases&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Working With Multiple Swift Versions&lt;/h2&gt; 
&lt;p&gt;SwiftLint hooks into SourceKit so it continues working even as Swift evolves!&lt;/p&gt; 
&lt;p&gt;This also keeps SwiftLint lean, as it doesn&#39;t need to ship with a full Swift compiler, it just communicates with the official one you already have installed on your machine.&lt;/p&gt; 
&lt;p&gt;You should always run SwiftLint with the same toolchain you use to compile your code.&lt;/p&gt; 
&lt;p&gt;You may want to override SwiftLint&#39;s default Swift toolchain if you have multiple toolchains or Xcodes installed.&lt;/p&gt; 
&lt;p&gt;Here&#39;s the order in which SwiftLint determines which Swift toolchain to use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$TOOLCHAIN_DIR&lt;/code&gt; or &lt;code&gt;$TOOLCHAINS&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;xcrun -find swift&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;sourcekitd.framework&lt;/code&gt; is expected to be found in the &lt;code&gt;usr/lib/&lt;/code&gt; subdirectory of the value passed in the paths above.&lt;/p&gt; 
&lt;p&gt;You may also set the &lt;code&gt;TOOLCHAINS&lt;/code&gt; environment variable to the reverse-DNS notation that identifies a Swift toolchain version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 swiftlint --fix
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Linux, SourceKit is expected to be located in &lt;code&gt;/usr/lib/libsourcekitdInProc.so&lt;/code&gt; or specified by the &lt;code&gt;LINUX_SOURCEKIT_LIB_PATH&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h2&gt;Git &lt;code&gt;pre-commit&lt;/code&gt; Hook&lt;/h2&gt; 
&lt;p&gt;SwiftLint can be run as a &lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt; hook. Once &lt;a href=&quot;https://pre-commit.com/#install&quot;&gt;installed&lt;/a&gt;, add this to the &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; in the root of your repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;repos:
  - repo: https://github.com/realm/SwiftLint
    rev: 0.57.1
    hooks:
      - id: swiftlint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Adjust &lt;code&gt;rev&lt;/code&gt; to the SwiftLint version of your choice. &lt;code&gt;pre-commit autoupdate&lt;/code&gt; can be used to update to the current version.&lt;/p&gt; 
&lt;p&gt;SwiftLint can be configured using &lt;code&gt;entry&lt;/code&gt; to apply fixes and fail on errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;-   repo: https://github.com/realm/SwiftLint
    rev: 0.57.1
    hooks:
    -   id: swiftlint
        entry: swiftlint --fix --strict
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Rules&lt;/h2&gt; 
&lt;p&gt;Over 200 rules are included in SwiftLint and the Swift community (that&#39;s you!) continues to contribute more over time. &lt;a href=&quot;https://github.com/realm/SwiftLint/raw/main/CONTRIBUTING.md&quot;&gt;Pull requests&lt;/a&gt; are encouraged.&lt;/p&gt; 
&lt;p&gt;You can find an updated list of rules and more information about them in the &lt;a href=&quot;https://realm.github.io/SwiftLint/rule-directory.html&quot;&gt;Rule Directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also check the &lt;a href=&quot;https://github.com/realm/SwiftLint/tree/main/Source/SwiftLintBuiltInRules/Rules&quot;&gt;Source/SwiftLintBuiltInRules/Rules&lt;/a&gt; directory to see their implementation.&lt;/p&gt; 
&lt;h3&gt;Opt-In Rules&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;opt_in_rules&lt;/code&gt; are disabled by default (i.e., you have to explicitly enable them in your configuration file).&lt;/p&gt; 
&lt;p&gt;Guidelines on when to mark a rule as opt-in:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A rule that can have many false positives (e.g. &lt;code&gt;empty_count&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;A rule that is too slow&lt;/li&gt; 
 &lt;li&gt;A rule that is not general consensus or is only useful in some cases (e.g. &lt;code&gt;force_unwrapping&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Disable rules in code&lt;/h3&gt; 
&lt;p&gt;Rules can be disabled with a comment inside a source file with the following format:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;// swiftlint:disable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The rules will be disabled until the end of the file or until the linter sees a matching enable comment:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;// swiftlint:enable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftlint:disable colon
let noWarning :String = &quot;&quot; // No warning about colons immediately after variable names!
// swiftlint:enable colon
let hasWarning :String = &quot;&quot; // Warning generated about colons immediately after variable names
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Including the &lt;code&gt;all&lt;/code&gt; keyword will disable all rules until the linter sees a matching enable comment:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;// swiftlint:disable all&lt;/code&gt; &lt;code&gt;// swiftlint:enable all&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftlint:disable all
let noWarning :String = &quot;&quot; // No warning about colons immediately after variable names!
let i = &quot;&quot; // Also no warning about short identifier names
// swiftlint:enable all
let hasWarning :String = &quot;&quot; // Warning generated about colons immediately after variable names
let y = &quot;&quot; // Warning generated about short identifier names
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s also possible to modify a &lt;code&gt;disable&lt;/code&gt; or &lt;code&gt;enable&lt;/code&gt; command by appending &lt;code&gt;:previous&lt;/code&gt;, &lt;code&gt;:this&lt;/code&gt; or &lt;code&gt;:next&lt;/code&gt; for only applying the command to the previous, this (current) or next line respectively.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// swiftlint:disable:next force_cast
let noWarning = NSNumber() as! Int
let hasWarning = NSNumber() as! Int
let noWarning2 = NSNumber() as! Int // swiftlint:disable:this force_cast
let noWarning3 = NSNumber() as! Int
// swiftlint:disable:previous force_cast
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run &lt;code&gt;swiftlint rules&lt;/code&gt; to print a list of all available rules and their identifiers.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Configure SwiftLint by adding a &lt;code&gt;.swiftlint.yml&lt;/code&gt; file from the directory you&#39;ll run SwiftLint from. The following parameters can be configured:&lt;/p&gt; 
&lt;p&gt;Rule inclusion:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;disabled_rules&lt;/code&gt;: Disable rules from the default enabled set.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;opt_in_rules&lt;/code&gt;: Enable rules that are not part of the default set. The special &lt;code&gt;all&lt;/code&gt; identifier will enable all opt in linter rules, except the ones listed in &lt;code&gt;disabled_rules&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;only_rules&lt;/code&gt;: Only the rules specified in this list will be enabled. Cannot be specified alongside &lt;code&gt;disabled_rules&lt;/code&gt; or &lt;code&gt;opt_in_rules&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;analyzer_rules&lt;/code&gt;: This is an entirely separate list of rules that are only run by the &lt;code&gt;analyze&lt;/code&gt; command. All analyzer rules are opt-in, so this is the only configurable rule list, there are no equivalents for &lt;code&gt;disabled_rules&lt;/code&gt; and &lt;code&gt;only_rules&lt;/code&gt;. The special &lt;code&gt;all&lt;/code&gt; identifier can also be used here to enable all analyzer rules, except the ones listed in &lt;code&gt;disabled_rules&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# By default, SwiftLint uses a set of sensible default rules you can adjust:
disabled_rules: # rule identifiers turned on by default to exclude from running
  - colon
  - comma
  - control_statement
opt_in_rules: # some rules are turned off by default, so you need to opt-in
  - empty_count # find all the available rules by running: `swiftlint rules`

# Alternatively, specify all rules explicitly by uncommenting this option:
# only_rules: # delete `disabled_rules` &amp;amp; `opt_in_rules` if using this
#   - empty_parameters
#   - vertical_whitespace

analyzer_rules: # rules run by `swiftlint analyze`
  - explicit_self

# Case-sensitive paths to include during linting. Directory paths supplied on the
# command line will be ignored.
included: 
  - Sources
excluded: # case-sensitive paths to ignore during linting. Takes precedence over `included`
  - Carthage
  - Pods
  - Sources/ExcludedFolder
  - Sources/ExcludedFile.swift
  - Sources/*/ExcludedFile.swift # exclude files with a wildcard

# If true, SwiftLint will not fail if no lintable files are found.
allow_zero_lintable_files: false

# If true, SwiftLint will treat all warnings as errors.
strict: false

# If true, SwiftLint will treat all errors as warnings.
lenient: false

# The path to a baseline file, which will be used to filter out detected violations.
baseline: Baseline.json

# The path to save detected violations to as a new baseline.
write_baseline: Baseline.json

# If true, SwiftLint will check for updates after linting or analyzing.
check_for_updates: true

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 110
# they can set both implicitly with an array
type_body_length:
  - 300 # warning
  - 400 # error
# or they can set both explicitly
file_length:
  warning: 500
  error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 40
    error: 50
  excluded: iPhone # excluded via string
  allowed_symbols: [&quot;_&quot;] # these are allowed in type names
identifier_name:
  min_length: # only min_length
    error: 4 # only error
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey
reporter: &quot;xcode&quot; # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging, summary)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use environment variables in your configuration file, by using &lt;code&gt;${SOME_VARIABLE}&lt;/code&gt; in a string.&lt;/p&gt; 
&lt;h3&gt;Defining Custom Rules&lt;/h3&gt; 
&lt;p&gt;In addition to the rules that the main SwiftLint project ships with, SwiftLint can also run two types of custom rules that you can define yourself in your own projects:&lt;/p&gt; 
&lt;h4&gt;1. Swift Custom Rules&lt;/h4&gt; 
&lt;p&gt;These rules are written the same way as the Swift-based rules that ship with SwiftLint so they&#39;re fast, accurate, can leverage SwiftSyntax, can be unit tested, and more.&lt;/p&gt; 
&lt;p&gt;Using these requires building SwiftLint with Bazel as described in &lt;a href=&quot;https://vimeo.com/820572803&quot;&gt;this video&lt;/a&gt; or its associated code in &lt;a href=&quot;https://github.com/jpsim/swiftlint-bazel-example&quot;&gt;github.com/jpsim/swiftlint-bazel-example&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;2. Regex Custom Rules&lt;/h4&gt; 
&lt;p&gt;You can define custom regex-based rules in your configuration file using the following syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;custom_rules:
  pirates_beat_ninjas: # rule identifier
    included:
      - &quot;.*\\.swift&quot; # regex that defines paths to include during linting. optional.
    excluded:
      - &quot;.*Test\\.swift&quot; # regex that defines paths to exclude during linting. optional
    name: &quot;Pirates Beat Ninjas&quot; # rule name. optional.
    regex: &quot;([nN]inja)&quot; # matching pattern
    capture_group: 0 # number of regex capture group to highlight the rule violation at. optional.
    match_kinds: # SyntaxKinds to match. optional.
      - comment
      - identifier
    message: &quot;Pirates are better than ninjas.&quot; # violation message. optional.
    severity: error # violation severity. optional.
  no_hiding_in_strings:
    regex: &quot;([nN]inja)&quot;
    match_kinds: string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is what the output would look like:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/custom-rule.png&quot; alt=&quot;Custom violations highlighted in the Xcode editor&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;It is important to note that the regular expression pattern is used with the flags &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; enabled, that is &lt;code&gt;.&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsregularexpression/options/1412529-dotmatcheslineseparators&quot;&gt;matches newlines&lt;/a&gt; and &lt;code&gt;^&lt;/code&gt;/&lt;code&gt;$&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsregularexpression/options/1408263-anchorsmatchlines&quot;&gt;match the start and end of lines&lt;/a&gt;, respectively. If you do not want to have &lt;code&gt;.&lt;/code&gt; match newlines, for example, the regex can be prepended by &lt;code&gt;(?-s)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can filter the matches by providing one or more &lt;code&gt;match_kinds&lt;/code&gt;, which will reject matches that include syntax kinds that are not present in this list. Here are all the possible syntax kinds:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;attribute.builtin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;attribute.id&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;buildconfig.id&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;buildconfig.keyword&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;comment.mark&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;comment.url&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doccomment&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;doccomment.field&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;identifier&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;keyword&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;number&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;objectliteral&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parameter&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;placeholder&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;string_interpolation_anchor&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;typeidentifier&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All syntax kinds used in a snippet of Swift code can be extracted asking &lt;a href=&quot;https://github.com/jpsim/SourceKitten&quot;&gt;SourceKitten&lt;/a&gt;. For example, &lt;code&gt;sourcekitten syntax --text &quot;struct S {}&quot;&lt;/code&gt; delivers&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;source.lang.swift.syntaxtype.keyword&lt;/code&gt; for the &lt;code&gt;struct&lt;/code&gt; keyword and&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;source.lang.swift.syntaxtype.identifier&lt;/code&gt; for its name &lt;code&gt;S&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;which match to &lt;code&gt;keyword&lt;/code&gt; and &lt;code&gt;identifier&lt;/code&gt; in the above list.&lt;/p&gt; 
&lt;p&gt;If using custom rules in combination with &lt;code&gt;only_rules&lt;/code&gt;, you must include the literal string &lt;code&gt;custom_rules&lt;/code&gt; in the &lt;code&gt;only_rules&lt;/code&gt; list:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;only_rules:
  - custom_rules

custom_rules:
  no_hiding_in_strings:
    regex: &quot;([nN]inja)&quot;
    match_kinds: string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike Swift custom rules, you can use official SwiftLint builds (e.g. from Homebrew) to run regex custom rules.&lt;/p&gt; 
&lt;h3&gt;Auto-correct&lt;/h3&gt; 
&lt;p&gt;SwiftLint can automatically correct certain violations. Files on disk are overwritten with a corrected version.&lt;/p&gt; 
&lt;p&gt;Please make sure to have backups of these files before running &lt;code&gt;swiftlint --fix&lt;/code&gt;, otherwise important data may be lost.&lt;/p&gt; 
&lt;p&gt;Standard linting is disabled while correcting because of the high likelihood of violations (or their offsets) being incorrect after modifying a file while applying corrections.&lt;/p&gt; 
&lt;h3&gt;Analyze&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;swiftlint analyze&lt;/code&gt; command can lint Swift files using the full type-checked AST. The compiler log path containing the clean &lt;code&gt;swiftc&lt;/code&gt; build command invocation (incremental builds will fail) must be passed to &lt;code&gt;analyze&lt;/code&gt; via the &lt;code&gt;--compiler-log-path&lt;/code&gt; flag. e.g. &lt;code&gt;--compiler-log-path /path/to/xcodebuild.log&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This can be obtained by&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Cleaning DerivedData (incremental builds won&#39;t work with analyze)&lt;/li&gt; 
 &lt;li&gt;Running &lt;code&gt;xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} &amp;gt; xcodebuild.log&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Running &lt;code&gt;swiftlint analyze --compiler-log-path xcodebuild.log&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Analyzer rules tend to be considerably slower than lint rules.&lt;/p&gt; 
&lt;h2&gt;Using Multiple Configuration Files&lt;/h2&gt; 
&lt;p&gt;SwiftLint offers a variety of ways to include multiple configuration files. Multiple configuration files get merged into one single configuration that is then applied just as a single configuration file would get applied.&lt;/p&gt; 
&lt;p&gt;There are quite a lot of use cases where using multiple configuration files could be helpful:&lt;/p&gt; 
&lt;p&gt;For instance, one could use a team-wide shared SwiftLint configuration while allowing overrides in each project via a child configuration file.&lt;/p&gt; 
&lt;p&gt;Team-Wide Configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;disabled_rules:
- force_cast
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Project-Specific Configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;opt_in_rules:
- force_cast
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Child/Parent Configs (Locally)&lt;/h3&gt; 
&lt;p&gt;You can specify a &lt;code&gt;child_config&lt;/code&gt; and/or a &lt;code&gt;parent_config&lt;/code&gt; reference within a configuration file. These references should be local paths relative to the folder of the configuration file they are specified in. This even works recursively, as long as there are no cycles and no ambiguities.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A child config is treated as a refinement and thus has a higher priority&lt;/strong&gt;, while a parent config is considered a base with lower priority in case of conflicts.&lt;/p&gt; 
&lt;p&gt;Here&#39;s an example, assuming you have the following file structure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;ProjectRoot
    |_ .swiftlint.yml
    |_ .swiftlint_refinement.yml
    |_ Base
        |_ .swiftlint_base.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To include both the refinement and the base file, your &lt;code&gt;.swiftlint.yml&lt;/code&gt; should look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;child_config: .swiftlint_refinement.yml
parent_config: Base/.swiftlint_base.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When merging parent and child configs, &lt;code&gt;included&lt;/code&gt; and &lt;code&gt;excluded&lt;/code&gt; configurations are processed carefully to account for differences in the directory location of the containing configuration files.&lt;/p&gt; 
&lt;h3&gt;Child/Parent Configs (Remote)&lt;/h3&gt; 
&lt;p&gt;Just as you can provide local &lt;code&gt;child_config&lt;/code&gt;/&lt;code&gt;parent_config&lt;/code&gt; references, instead of referencing local paths, you can just put urls that lead to configuration files. In order for SwiftLint to detect these remote references, they must start with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The referenced remote configuration files may even recursively reference other remote configuration files, but aren&#39;t allowed to include local references.&lt;/p&gt; 
&lt;p&gt;Using a remote reference, your &lt;code&gt;.swiftlint.yml&lt;/code&gt; could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;parent_config: https://myteamserver.com/our-base-swiftlint-config.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every time you run SwiftLint and have an Internet connection, SwiftLint tries to get a new version of every remote configuration that is referenced. If this request times out, a cached version is used if available. If there is no cached version available, SwiftLint fails – but no worries, a cached version should be there once SwiftLint has run successfully at least once.&lt;/p&gt; 
&lt;p&gt;If needed, the timeouts for the remote configuration fetching can be specified manually via the configuration file(s) using the &lt;code&gt;remote_timeout&lt;/code&gt;/&lt;code&gt;remote_timeout_if_cached&lt;/code&gt; specifiers. These values default to 2 seconds or 1 second, respectively.&lt;/p&gt; 
&lt;h3&gt;Command Line&lt;/h3&gt; 
&lt;p&gt;Instead of just providing one configuration file when running SwiftLint via the command line, you can also pass a hierarchy, where the first configuration is treated as a parent, while the last one is treated as the highest-priority child.&lt;/p&gt; 
&lt;p&gt;A simple example including just two configuration files looks like this:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;swiftlint --config .swiftlint.yml --config .swiftlint_child.yml&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Nested Configurations&lt;/h3&gt; 
&lt;p&gt;In addition to a main configuration (the &lt;code&gt;.swiftlint.yml&lt;/code&gt; file in the root folder), you can put other configuration files named &lt;code&gt;.swiftlint.yml&lt;/code&gt; into the directory structure that then get merged as a child config, but only with an effect for those files that are within the same directory as the config or in a deeper directory where there isn&#39;t another configuration file. In other words: Nested configurations don&#39;t work recursively – there&#39;s a maximum number of one nested configuration per file that may be applied in addition to the main configuration.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;.swiftlint.yml&lt;/code&gt; files are only considered as a nested configuration if they have not been used to build the main configuration already (e. g. by having been referenced via something like &lt;code&gt;child_config: Folder/.swiftlint.yml&lt;/code&gt;). Also, &lt;code&gt;parent_config&lt;/code&gt;/&lt;code&gt;child_config&lt;/code&gt; specifications of nested configurations are getting ignored because there&#39;s no sense to that.&lt;/p&gt; 
&lt;p&gt;If one (or more) SwiftLint file(s) are explicitly specified via the &lt;code&gt;--config&lt;/code&gt; parameter, that configuration will be treated as an override, no matter whether there exist other &lt;code&gt;.swiftlint.yml&lt;/code&gt; files somewhere within the directory. &lt;strong&gt;So if you want to use nested configurations, you can&#39;t use the &lt;code&gt;--config&lt;/code&gt; parameter.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint/raw/main/LICENSE&quot;&gt;MIT licensed.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;SwiftLint is utterly maintained by volunteers contributing to its success entirely in their free time. As such, SwiftLint isn&#39;t a commercial product in any way.&lt;/p&gt; 
&lt;p&gt;Be kind to the people maintaining SwiftLint as a hobby and accept that their time is limited. Support them by contributing to the project, reporting issues, and helping others in the community.&lt;/p&gt; 
&lt;p&gt;Special thanks go to &lt;a href=&quot;https://www.macstadium.com&quot;&gt;MacStadium&lt;/a&gt; for providing physical Mac mini machines to run our performance tests.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/macstadium.png&quot; alt=&quot;MacStadium&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;We also thank Realm (now MongoDB) for their initial contributions and setup of the project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pointfreeco/swift-composable-architecture</title>
      <link>https://github.com/pointfreeco/swift-composable-architecture</link>
      <description>&lt;p&gt;A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Composable Architecture&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/pointfreeco/swift-composable-architecture/actions/workflows/ci.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.pointfree.co/slack-invite&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/slack-chat-informational.svg?label=Slack&amp;amp;logo=slack&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dswift-versions&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dplatforms&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, iPadOS, visionOS, tvOS, and watchOS).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#what-is-the-composable-architecture&quot;&gt;What is the Composable Architecture?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#learn-more&quot;&gt;Learn more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#basic-usage&quot;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#translations&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is the Composable Architecture?&lt;/h2&gt; 
&lt;p&gt;This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;State management&lt;/strong&gt; &lt;br /&gt; How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt; &lt;br /&gt; How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Side effects&lt;/strong&gt; &lt;br /&gt; How to let certain parts of the application talk to the outside world in the most testable and understandable way possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; &lt;br /&gt; How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ergonomics&lt;/strong&gt; &lt;br /&gt; How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was designed over the course of many episodes on &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt;, a video series exploring advanced programming topics in the Swift language, hosted by &lt;a href=&quot;https://twitter.com/mbrandonw&quot;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/stephencelis&quot;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can watch all of the episodes &lt;a href=&quot;https://www.pointfree.co/collections/composable-architecture&quot;&gt;here&lt;/a&gt;, as well as a dedicated, &lt;a href=&quot;https://www.pointfree.co/collections/tours/composable-architecture-1-0&quot;&gt;multipart tour&lt;/a&gt; of the architecture from scratch.&lt;/p&gt; 
&lt;a href=&quot;https://www.pointfree.co/collections/tours/composable-architecture-1-0&quot;&gt; &lt;img alt=&quot;video poster image&quot; src=&quot;https://d3rccdn33rt8ze.cloudfront.net/episodes/0243.jpeg&quot; width=&quot;600&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;&lt;img src=&quot;https://d3rccdn33rt8ze.cloudfront.net/composable-architecture/demos.png&quot; alt=&quot;Screen shots of example applications&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo comes with &lt;em&gt;lots&lt;/em&gt; of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;this&lt;/a&gt; directory to see them all, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/CaseStudies&quot;&gt;Case Studies&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Getting started&lt;/li&gt; 
   &lt;li&gt;Effects&lt;/li&gt; 
   &lt;li&gt;Navigation&lt;/li&gt; 
   &lt;li&gt;Higher-order reducers&lt;/li&gt; 
   &lt;li&gt;Reusable components&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/composable-core-location/tree/main/Examples/LocationManager&quot;&gt;Location manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/composable-core-motion/tree/main/Examples/MotionManager&quot;&gt;Motion manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Search&quot;&gt;Search&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SpeechRecognition&quot;&gt;Speech Recognition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SyncUps&quot;&gt;SyncUps app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&quot;&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Todos&quot;&gt;Todos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/VoiceMemos&quot;&gt;Voice memos&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Looking for something more substantial? Check out the source code for &lt;a href=&quot;https://github.com/pointfreeco/isowords&quot;&gt;isowords&lt;/a&gt;, an iOS word search game built in SwiftUI and the Composable Architecture.&lt;/p&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For a step-by-step interactive tutorial, be sure to check out &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/tutorials/meetcomposablearchitecture&quot;&gt;Meet the Composable Architecture&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To build a feature using the Composable Architecture you define some types and values that model your domain:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: A type that describes the data your feature needs to perform its logic and render its UI.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an &lt;code&gt;Effect&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The benefits of doing this are that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.&lt;/p&gt; 
&lt;p&gt;As a basic example, consider a UI that shows a number along with &quot;+&quot; and &quot;−&quot; buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and displays it in the view.&lt;/p&gt; 
&lt;p&gt;To implement this feature we create a new type that will house the domain and behavior of the feature, and it will be annotated with the &lt;code&gt;@Reducer&lt;/code&gt; macro:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import ComposableArchitecture

@Reducer
struct Feature {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In here we need to define a type for the feature&#39;s state, which consists of an integer for the current count, as well as an optional string that represents the fact being presented:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable {
    var count = 0
    var numberFact: String?
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] We&#39;ve applied the &lt;code&gt;@ObservableState&lt;/code&gt; macro to &lt;code&gt;State&lt;/code&gt; in order to take advantage of the observation tools in the library.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We also need to define a type for the feature&#39;s actions. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action that occurs when we receive a response from the fact API request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action {
    case decrementButtonTapped
    case incrementButtonTapped
    case numberFactButtonTapped
    case numberFactResponse(String)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we implement the &lt;code&gt;body&lt;/code&gt; property, which is responsible for composing the actual logic and behavior for the feature. In it we can use the &lt;code&gt;Reduce&lt;/code&gt; reducer to describe how to change the current state to the next state, and what effects need to be executed. Some actions don&#39;t need to execute effects, and they can return &lt;code&gt;.none&lt;/code&gt; to represent that:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action { /* ... */ }

  var body: some Reducer&amp;lt;State, Action&amp;gt; {
    Reduce { state, action in
      switch action {
      case .decrementButtonTapped:
        state.count -= 1
        return .none

      case .incrementButtonTapped:
        state.count += 1
        return .none

      case .numberFactButtonTapped:
        return .run { [count = state.count] send in
          let (data, _) = try await URLSession.shared.data(
            from: URL(string: &quot;http://numbersapi.com/\(count)/trivia&quot;)!
          )
          await send(
            .numberFactResponse(String(decoding: data, as: UTF8.self))
          )
        }

      case let .numberFactResponse(fact):
        state.numberFact = fact
        return .none
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then finally we define the view that displays the feature. It holds onto a &lt;code&gt;StoreOf&amp;lt;Feature&amp;gt;&lt;/code&gt; so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct FeatureView: View {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  var body: some View {
    Form {
      Section {
        Text(&quot;\(store.count)&quot;)
        Button(&quot;Decrement&quot;) { store.send(.decrementButtonTapped) }
        Button(&quot;Increment&quot;) { store.send(.incrementButtonTapped) }
      }

      Section {
        Button(&quot;Number fact&quot;) { store.send(.numberFactButtonTapped) }
      }
      
      if let fact = store.numberFact {
        Text(fact)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also straightforward to have a UIKit controller driven off of this store. You can observe state changes in the store in &lt;code&gt;viewDidLoad&lt;/code&gt;, and then populate the UI components with data from the store. The code is a bit longer than the SwiftUI version, so we have collapsed it here:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand!&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class FeatureViewController: UIViewController {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  init(store: StoreOf&amp;lt;Feature&amp;gt;) {
    self.store = store
    super.init(nibName: nil, bundle: nil)
  }

  required init?(coder: NSCoder) {
    fatalError(&quot;init(coder:) has not been implemented&quot;)
  }

  override func viewDidLoad() {
    super.viewDidLoad()

    let countLabel = UILabel()
    let decrementButton = UIButton()
    let incrementButton = UIButton()
    let factLabel = UILabel()
    
    // Omitted: Add subviews and set up constraints...
    
    observe { [weak self] in
      guard let self 
      else { return }
      
      countLabel.text = &quot;\(self.store.count)&quot;
      factLabel.text = self.store.numberFact
    }
  }

  @objc private func incrementButtonTapped() {
    self.store.send(.incrementButtonTapped)
  }
  @objc private func decrementButtonTapped() {
    self.store.send(.decrementButtonTapped)
  }
  @objc private func factButtonTapped() {
    self.store.send(.numberFactButtonTapped)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Once we are ready to display this view, for example in the app&#39;s entry point, we can construct a store. This can be done by specifying the initial state to start the application in, as well as the reducer that will power the application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import ComposableArchitecture

@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that is enough to get something on the screen to play around with. It&#39;s definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.&lt;/p&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on testing, see the dedicated &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testingtca&quot;&gt;testing&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To test use a &lt;code&gt;TestStore&lt;/code&gt;, which can be created with the same information as the &lt;code&gt;Store&lt;/code&gt;, but it does extra work to allow you to assert how your feature evolves as actions are sent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature()
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. For example, we can simulate the user flow of tapping on the increment and decrement buttons:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Test that tapping on the increment/decrement buttons changes the count
await store.send(.incrementButtonTapped) {
  $0.count = 1
}
await store.send(.decrementButtonTapped) {
  $0.count = 0
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert on that. For example, if we simulate the user tapping on the fact button we expect to receive a fact response back with the fact, which then causes the &lt;code&gt;numberFact&lt;/code&gt; state to be populated:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = ???
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, how do we know what fact is going to be sent back to us?&lt;/p&gt; 
&lt;p&gt;Currently our reducer is using an effect that reaches out into the real world to hit an API server, and that means we have no way to control its behavior. We are at the whims of our internet connectivity and the availability of the API server in order to write this test.&lt;/p&gt; 
&lt;p&gt;It would be better for this dependency to be passed to the reducer so that we can use a live dependency when running the application on a device, but use a mocked dependency for tests. We can do this by adding a property to the &lt;code&gt;Feature&lt;/code&gt; reducer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Reducer
struct Feature {
  let numberFact: (Int) async throws -&amp;gt; String
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then we can use it in the &lt;code&gt;reduce&lt;/code&gt; implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;case .numberFactButtonTapped:
  return .run { [count = state.count] send in 
    let fact = try await self.numberFact(count)
    await send(.numberFactResponse(fact))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And in the entry point of the application we can provide a version of the dependency that actually interacts with the real world API server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature(
            numberFact: { number in
              let (data, _) = try await URLSession.shared.data(
                from: URL(string: &quot;http://numbersapi.com/\(number)&quot;)!
              )
              return String(decoding: data, as: UTF8.self)
            }
          )
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But in tests we can use a mock dependency that immediately returns a deterministic, predictable fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature(numberFact: { &quot;\($0) is a good number Brent&quot; })
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work we can finish the test by simulating the user tapping on the fact button, and then receiving the response from the dependency to present the fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = &quot;0 is a good number Brent&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also improve the ergonomics of using the &lt;code&gt;numberFact&lt;/code&gt; dependency in our application. Over time the application may evolve into many features, and some of those features may also want access to &lt;code&gt;numberFact&lt;/code&gt;, and explicitly passing it through all layers can get annoying. There is a process you can follow to “register” dependencies with the library, making them instantly available to any layer in the application.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on dependency management, see the dedicated &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement&quot;&gt;dependencies&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We can start by wrapping the number fact functionality in a new type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct NumberFactClient {
  var fetch: (Int) async throws -&amp;gt; String
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then registering that type with the dependency management system by conforming the client to the &lt;code&gt;DependencyKey&lt;/code&gt; protocol, which requires you to specify the live value to use when running the application in simulators or devices:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension NumberFactClient: DependencyKey {
  static let liveValue = Self(
    fetch: { number in
      let (data, _) = try await URLSession.shared
        .data(from: URL(string: &quot;http://numbersapi.com/\(number)&quot;)!
      )
      return String(decoding: data, as: UTF8.self)
    }
  )
}

extension DependencyValues {
  var numberFact: NumberFactClient {
    get { self[NumberFactClient.self] }
    set { self[NumberFactClient.self] = newValue }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work done you can instantly start making use of the dependency in any feature by using the &lt;code&gt;@Dependency&lt;/code&gt; property wrapper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt; @Reducer
 struct Feature {
-  let numberFact: (Int) async throws -&amp;gt; String
+  @Dependency(\.numberFact) var numberFact
   
   …

-  try await self.numberFact(count)
+  try await self.numberFact.fetch(count)
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This code works exactly as it did before, but you no longer have to explicitly pass the dependency when constructing the feature&#39;s reducer. When running the app in previews, the simulator or on a device, the live dependency will be provided to the reducer, and in tests the test dependency will be provided.&lt;/p&gt; 
&lt;p&gt;This means the entry point to the application no longer needs to construct dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the test store can be constructed without specifying any dependencies, but you can still override any dependency you need to for the purpose of the test:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let store = TestStore(initialState: Feature.State()) {
  Feature()
} withDependencies: {
  $0.numberFact.fetch = { &quot;\($0) is a good number Brent&quot; }
}

// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is the basics of building and testing a feature in the Composable Architecture. There are &lt;em&gt;a lot&lt;/em&gt; more things to be explored, such as composition, modularity, adaptability, and complex effects. The &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&quot;&gt;Examples&lt;/a&gt; directory has a bunch of projects to explore to see more advanced usages.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The documentation for releases and &lt;code&gt;main&lt;/code&gt; are available here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/&quot;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.17.0/documentation/composablearchitecture/&quot;&gt;1.17.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.17&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt; Other versions &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.16.0/documentation/composablearchitecture/&quot;&gt;1.16.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.16&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.15.0/documentation/composablearchitecture/&quot;&gt;1.15.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.15&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.14.0/documentation/composablearchitecture/&quot;&gt;1.14.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.14&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.13.0/documentation/composablearchitecture/&quot;&gt;1.13.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.13&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.12.0/documentation/composablearchitecture/&quot;&gt;1.12.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.12&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.11.0/documentation/composablearchitecture/&quot;&gt;1.11.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.11&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.10.0/documentation/composablearchitecture/&quot;&gt;1.10.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.10&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.9.0/documentation/composablearchitecture/&quot;&gt;1.9.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.9&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.8.0/documentation/composablearchitecture/&quot;&gt;1.8.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.8&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.7.0/documentation/composablearchitecture/&quot;&gt;1.7.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.7&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.6.0/documentation/composablearchitecture/&quot;&gt;1.6.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.6&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.5.0/documentation/composablearchitecture/&quot;&gt;1.5.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.5&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.4.0/documentation/composablearchitecture/&quot;&gt;1.4.0&lt;/a&gt; (&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.4&quot;&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.3.0/documentation/composablearchitecture/&quot;&gt;1.3.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.2.0/documentation/composablearchitecture/&quot;&gt;1.2.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.1.0/documentation/composablearchitecture/&quot;&gt;1.1.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/1.0.0/documentation/composablearchitecture/&quot;&gt;1.0.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.59.0/documentation/composablearchitecture/&quot;&gt;0.59.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.58.0/documentation/composablearchitecture/&quot;&gt;0.58.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/0.57.0/documentation/composablearchitecture/&quot;&gt;0.57.0&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;p&gt;There are a number of articles in the documentation that you may find helpful as you become more comfortable with the library:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/gettingstarted&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement&quot;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testingtca&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/navigation&quot;&gt;Navigation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/sharingstate&quot;&gt;Sharing state&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/performance&quot;&gt;Performance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/swiftconcurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/bindings&quot;&gt;Bindings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;We have a &lt;a href=&quot;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/faq&quot;&gt;dedicated article&lt;/a&gt; for all of the most frequently asked questions and comments people have concerning the library.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, there are a number of places you can discuss with fellow &lt;a href=&quot;http://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; enthusiasts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For long-form discussions, we recommend the &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/discussions&quot;&gt;discussions&lt;/a&gt; tab of this repo.&lt;/li&gt; 
 &lt;li&gt;For casual chat, we recommend the &lt;a href=&quot;http://pointfree.co/slack-invite&quot;&gt;Point-Free Community slack&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Add Package Dependencies...&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Enter &quot;&lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture&quot;&gt;https://github.com/pointfreeco/swift-composable-architecture&lt;/a&gt;&quot; into the package repository URL text field&lt;/li&gt; 
 &lt;li&gt;Depending on how your project is structured: 
  &lt;ul&gt; 
   &lt;li&gt;If you have a single application target that needs access to the library, then add &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; directly to your application.&lt;/li&gt; 
   &lt;li&gt;If you want to use this library from multiple Xcode targets, or mix Xcode targets and SPM targets, you must create a shared framework that depends on &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; and then depend on that framework in all of your targets. For an example of this, check out the &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&quot;&gt;Tic-Tac-Toe&lt;/a&gt; demo application, which splits lots of features into modules and consumes the static library in this fashion using the &lt;strong&gt;tic-tac-toe&lt;/strong&gt; Swift package.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Companion libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture is built with extensibility in mind, and there are a number of community-supported libraries available to enhance your applications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Ryu0118/swift-composable-architecture-extras&quot;&gt;Composable Architecture Extras&lt;/a&gt;: A companion library to the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mentalflux/tca-composer&quot;&gt;TCAComposer&lt;/a&gt;: A macro framework for generating boiler-plate code in the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/johnpatrickmorgan/TCACoordinators&quot;&gt;TCACoordinators&lt;/a&gt;: The coordinator pattern in the Composable Architecture.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to contribute a library, please &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&quot;&gt;open a PR&lt;/a&gt; with a link to it!&lt;/p&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;The following translations of this README have been contributed by members of the community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/NorhanBoghdadi/1b98d55c02b683ddef7e05c2ebcccd47&quot;&gt;Arabic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/nikitamounier/0e93eb832cf389db12f9a69da030a2dc&quot;&gt;French&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/akashsoni01/b358ee0b3b747167964ef6946123c88d&quot;&gt;Hindi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/wendyliga/792ea9ac5cc887f59de70a9e39cc7343&quot;&gt;Indonesian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Bellaposa/5114e6d4d55fdb1388e8186886d48958&quot;&gt;Italian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Achoo-kr/2d0712deb77f78b3379551ac7baea3e4&quot;&gt;Japanese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Achoo-kr/5d8936d12e71028fcc4a7c5e078ca038&quot;&gt;Korean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/MarcelStarczyk/6b6153051f46912a665c32199f0d1d54&quot;&gt;Polish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/SevioCorrea/2bbf337cd084a58c89f2f7f370626dc8&quot;&gt;Portuguese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/SubvertDev/3317d0c3b35ed601be330d6fc0df5aba&quot;&gt;Russian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad&quot;&gt;Simplified Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/pitt500/f5e32fccb575ce112ffea2827c7bf942&quot;&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/gokhanamal/93001244ef0c1cec58abeb1afc0de37c&quot;&gt;Turkish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gist.github.com/barabashd/33b64676195ce41f4bb73c327ea512a8&quot;&gt;Ukrainian&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to contribute a translation, please &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&quot;&gt;open a PR&lt;/a&gt; with a link to a &lt;a href=&quot;https://gist.github.com&quot;&gt;Gist&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Credits and thanks&lt;/h2&gt; 
&lt;p&gt;The following people gave feedback on the library at its early stages and helped make the library what it is today:&lt;/p&gt; 
&lt;p&gt;Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the &lt;a href=&quot;https://www.pointfree.co&quot;&gt;Point-Free&lt;/a&gt; subscribers 😁.&lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/liscio&quot;&gt;Chris Liscio&lt;/a&gt; who helped us work through many strange SwiftUI quirks and helped refine the final API.&lt;/p&gt; 
&lt;p&gt;And thanks to &lt;a href=&quot;https://github.com/freak4pc&quot;&gt;Shai Mishali&lt;/a&gt; and the &lt;a href=&quot;https://github.com/CombineCommunity/CombineExt/&quot;&gt;CombineCommunity&lt;/a&gt; project, from which we took their implementation of &lt;code&gt;Publishers.Create&lt;/code&gt;, which we use in &lt;code&gt;Effect&lt;/code&gt; to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.&lt;/p&gt; 
&lt;h2&gt;Other libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was built on a foundation of ideas started by other libraries, in particular &lt;a href=&quot;https://elm-lang.org&quot;&gt;Elm&lt;/a&gt; and &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/uber/RIBs&quot;&gt;RIBs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/Loop&quot;&gt;Loop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReSwift/ReSwift&quot;&gt;ReSwift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/square/workflow&quot;&gt;Workflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ReactorKit/ReactorKit&quot;&gt;ReactorKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/NoTests/RxFeedback.swift&quot;&gt;RxFeedback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/spotify/mobius.swift&quot;&gt;Mobius.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;And more&lt;/summary&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://github.com/FluxorOrg/Fluxor&quot;&gt;Fluxor&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://github.com/RPallas92/PromisedArchitectureKit&quot;&gt;PromisedArchitectureKit&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is released under the MIT license. See &lt;a href=&quot;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apple/swift-async-algorithms</title>
      <link>https://github.com/apple/swift-async-algorithms</link>
      <description>&lt;p&gt;Async Algorithms for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swift-async-algorithms&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Swift Async Algorithms&lt;/strong&gt; is an open-source package of asynchronous sequence and advanced algorithms that involve concurrency, along with their related types.&lt;/p&gt; 
&lt;p&gt;This package has three main goals:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;First-class integration with &lt;code&gt;async/await&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Provide a home for time-based algorithms&lt;/li&gt; 
 &lt;li&gt;Be cross-platform and open source&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;AsyncAlgorithms is a package for algorithms that work with &lt;em&gt;values over time&lt;/em&gt;. That includes those primarily about &lt;em&gt;time&lt;/em&gt;, like &lt;code&gt;debounce&lt;/code&gt; and &lt;code&gt;throttle&lt;/code&gt;, but also algorithms about &lt;em&gt;order&lt;/em&gt; like &lt;code&gt;combineLatest&lt;/code&gt; and &lt;code&gt;merge&lt;/code&gt;. Operations that work with multiple inputs (like &lt;code&gt;zip&lt;/code&gt; does on &lt;code&gt;Sequence&lt;/code&gt;) can be surprisingly complex to implement, with subtle behaviors and many edge cases to consider. A shared package can get these details correct, with extensive testing and documentation, for the benefit of all Swift apps.&lt;/p&gt; 
&lt;p&gt;The foundation for AsyncAlgorithms was included in Swift 5.5 from &lt;a href=&quot;https://github.com/apple/swift-evolution/raw/main/proposals/0298-asyncsequence.md&quot;&gt;AsyncSequence&lt;/a&gt;. Swift 5.5 also brings the ability to use a natural &lt;code&gt;for/in&lt;/code&gt; loop with &lt;code&gt;await&lt;/code&gt; to process the values in an &lt;code&gt;AsyncSequence&lt;/code&gt; and &lt;code&gt;Sequence&lt;/code&gt;-equivalent API like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;. Structured concurrency allows us to write code where intermediate state is simply a local variable, &lt;code&gt;try&lt;/code&gt; can be used directly on functions that &lt;code&gt;throw&lt;/code&gt;, and generally treat the logic for asynchronous code similar to that of synchronous code.&lt;/p&gt; 
&lt;p&gt;This package is the home for these APIs. Development and API design take place on &lt;a href=&quot;https://github.com/apple/swift-async-algorithms&quot;&gt;GitHub&lt;/a&gt; and the &lt;a href=&quot;https://forums.swift.org/c/related-projects/swift-async-algorithms&quot;&gt;Swift Forums&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;h4&gt;Combining asynchronous sequences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Chain.md&quot;&gt;&lt;code&gt;chain(_:...)&lt;/code&gt;&lt;/a&gt;: Concatenates two or more asynchronous sequences with the same element type.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/CombineLatest.md&quot;&gt;&lt;code&gt;combineLatest(_:...)&lt;/code&gt;&lt;/a&gt;: Combines two or more asynchronous sequences into an asynchronous sequence producing a tuple of elements from those base asynchronous sequences that updates when any of the base sequences produce a value.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Merge.md&quot;&gt;&lt;code&gt;merge(_:...)&lt;/code&gt;&lt;/a&gt;: Merges two or more asynchronous sequence into a single asynchronous sequence producing the elements of all of the underlying asynchronous sequences.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Zip.md&quot;&gt;&lt;code&gt;zip(_:...)&lt;/code&gt;&lt;/a&gt;: Creates an asynchronous sequence of pairs built out of underlying asynchronous sequences.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Joined.md&quot;&gt;&lt;code&gt;joined(separator:)&lt;/code&gt;&lt;/a&gt;: Concatenated elements of an asynchronous sequence of asynchronous sequences, inserting the given separator between each element.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Creating asynchronous sequences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Lazy.md&quot;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt;: Create an asynchronous sequence composed from a synchronous sequence.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Channel.md&quot;&gt;&lt;code&gt;AsyncChannel&lt;/code&gt;&lt;/a&gt;: An asynchronous sequence with back pressure sending semantics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Channel.md&quot;&gt;&lt;code&gt;AsyncThrowingChannel&lt;/code&gt;&lt;/a&gt;: An asynchronous sequence with back pressure sending semantics that can emit failures.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Performance optimized asynchronous iterators&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/BufferedBytes.md&quot;&gt;&lt;code&gt;AsyncBufferedByteIterator&lt;/code&gt;&lt;/a&gt;: A highly efficient iterator useful for iterating byte sequences derived from asynchronous read functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Other useful asynchronous sequences&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/AdjacentPairs.md&quot;&gt;&lt;code&gt;adjacentPairs()&lt;/code&gt;&lt;/a&gt;: Collects tuples of adjacent elements.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Chunked.md&quot;&gt;&lt;code&gt;chunks(...)&lt;/code&gt; and &lt;code&gt;chunked(...)&lt;/code&gt;&lt;/a&gt;: Collect values into chunks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Compacted.md&quot;&gt;&lt;code&gt;compacted()&lt;/code&gt;&lt;/a&gt;: Remove nil values from an asynchronous sequence.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/RemoveDuplicates.md&quot;&gt;&lt;code&gt;removeDuplicates()&lt;/code&gt;&lt;/a&gt;: Remove sequentially adjacent duplicate values.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Intersperse.md&quot;&gt;&lt;code&gt;interspersed(with:)&lt;/code&gt;&lt;/a&gt;: Place a value between every two elements of an asynchronous sequence.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Asynchronous Sequences that transact in time&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Debounce.md&quot;&gt;&lt;code&gt;debounce(for:tolerance:clock:)&lt;/code&gt;&lt;/a&gt;: Emit values after a quiescence period has been reached.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Throttle.md&quot;&gt;&lt;code&gt;throttle(for:clock:reducing:)&lt;/code&gt;&lt;/a&gt;: Ensure a minimum interval has elapsed between events.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Timer.md&quot;&gt;&lt;code&gt;AsyncTimerSequence&lt;/code&gt;&lt;/a&gt;: Emit the value of now at a given interval repeatedly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Obtaining all values from an asynchronous sequence&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;RangeReplaceableCollection.init(_:)&lt;/code&gt;&lt;/a&gt;: Creates a new instance of a collection containing the elements of an asynchronous sequence.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;Dictionary.init(uniqueKeysWithValues:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary from the key-value pairs in the given asynchronous sequence.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary from the key-value pairs in the given asynchronous sequence, using a combining closure to determine the value for any duplicate keys.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;Dictionary.init(grouping:by:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary whose keys are the groupings returned by the given closure and whose values are arrays of the elements that returned each key.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&quot;&gt;&lt;code&gt;SetAlgebra.init(_:)&lt;/code&gt;&lt;/a&gt;: Creates a new set from an asynchronous sequence of items.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Effects&lt;/h4&gt; 
&lt;p&gt;Each algorithm has specific behavioral effects. For throwing effects these can either be if the sequence throws, does not throw, or rethrows errors. Sendability effects in some asynchronous sequences are conditional whereas others require the composed parts to all be sendable to satisfy a requirement of &lt;code&gt;Sendable&lt;/code&gt;. The effects are &lt;a href=&quot;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Effects.md&quot;&gt;listed here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adding Swift Async Algorithms as a Dependency&lt;/h2&gt; 
&lt;p&gt;To use the &lt;code&gt;AsyncAlgorithms&lt;/code&gt; library in a SwiftPM project, add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.package(url: &quot;https://github.com/apple/swift-async-algorithms&quot;, from: &quot;1.0.0&quot;),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Include &lt;code&gt;&quot;AsyncAlgorithms&quot;&lt;/code&gt; as a dependency for your executable target:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;.target(name: &quot;&amp;lt;target&amp;gt;&quot;, dependencies: [
    .product(name: &quot;AsyncAlgorithms&quot;, package: &quot;swift-async-algorithms&quot;),
]),
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, add &lt;code&gt;import AsyncAlgorithms&lt;/code&gt; to your source code.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;⚠️ Please note that this package requires Xcode 14 on macOS hosts. Previous versions of Xcode do not contain the required Swift version.&lt;/p&gt; 
&lt;h3&gt;Building/Testing Using Xcode on macOS&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;In the &lt;code&gt;swift-async-algorithms&lt;/code&gt; directory run &lt;code&gt;swift build&lt;/code&gt; or &lt;code&gt;swift test&lt;/code&gt; accordingly&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Building/Testing on Linux&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the most recent development toolchain for your Linux distribution&lt;/li&gt; 
 &lt;li&gt;Decompress the archive to a path in which the &lt;code&gt;swift&lt;/code&gt; executable is in the binary search path environment variable (&lt;code&gt;$PATH&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;In the &lt;code&gt;swift-async-algorithms&lt;/code&gt; directory run &lt;code&gt;swift build&lt;/code&gt; or &lt;code&gt;swift test&lt;/code&gt; accordingly&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Source Stability&lt;/h2&gt; 
&lt;p&gt;The Swift Async Algorithms package has a goal of being source stable as soon as possible; version numbers will follow &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;. Source breaking changes to public API can only land in a new major version.&lt;/p&gt; 
&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-async-algorithms&lt;/code&gt; package will consist of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;AsyncAlgorithms&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; 
&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; 
&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
