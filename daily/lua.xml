<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub Lua Daily Trending</title>
    <description>Daily Trending of Lua in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:33:48 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>josean-dev/dev-environment-files</title>
      <link>https://github.com/josean-dev/dev-environment-files</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;My Dev Environment Files üöÄ&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; These are primarily meant for inspiration. I wouldn&#39;t just blindly use them. Proceed at your own risk!&lt;/p&gt; 
&lt;p&gt;üìπ Youtube Playlist With Detailed Walkthroughs on My Setup: &lt;a href=&quot;https://youtube.com/playlist?list=PLnu5gT9QrFg36OehOdECFvxFFeMHhb_07&quot;&gt;üíª My Dev Environment &amp;amp; Workflow&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Terminal Setup&lt;/h1&gt; 
&lt;p&gt;After recommendations from you guys, I&#39;ve swapped out Alacritty for &lt;a href=&quot;https://wezfurlong.org/wezterm/index.html&quot;&gt;WezTerm&lt;/a&gt;! Everything is the same except the Alacritty config file, you can swap it out with this &lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.wezterm.lua&quot;&gt;~/.wezterm.lua&lt;/a&gt; file and everything should look and work very similar to Alacritty!&lt;/p&gt; 
&lt;p>üèº ‚úçBlog Post Step-by-Step Guide: &lt;a href=&quot;https://josean.com/posts/how-to-setup-alacritty-terminal&quot;&gt;How To Make Your Boring Mac Terminal Amazing With Alacritty&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üìπ Youtube Guide: &lt;a href=&quot;https://youtu.be/uOnL4fEnldA&quot;&gt;How To Make Your Boring Mac Terminal Amazing With Alacritty&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You&#39;ll also need to install extra cli tools as described in this blog post and video:&lt;/p&gt; 
&lt;p&gt;‚úçüèº Blog Post : &lt;a href=&quot;https://josean.com/posts/7-amazing-cli-tools&quot;&gt;7 Amazing CLI Tools You Won&#39;t Be Able To Live Without&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üìπ Youtube Video: &lt;a href=&quot;https://www.youtube.com/mmqDYw9C30I&quot;&gt;7 Amazing CLI Tools You Won&#39;t Be Able To Live Without&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/fzf.git&quot;&gt;fzf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/fzf-git.sh&quot;&gt;fzf-git&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;delta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eza-community/eza.git&quot;&gt;eza&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tldr-pages/tldr&quot;&gt;tldr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvbn/thefuck&quot;&gt;thefuck&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Relevant Files&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.zshrc&quot;&gt;.zshrc&lt;/a&gt; - Zsh Shell Configuration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/alacritty/themes/themes/coolnight.toml&quot;&gt;coolnight.toml&lt;/a&gt; - Alacritty Color Scheme&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Tmux Setup&lt;/h1&gt; 
&lt;p&gt;‚úçüèº Blog Post: &lt;a href=&quot;https://josean.com/posts/tmux-setup&quot;&gt;How To Use and Configure Tmux Alongside Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üìπ Youtube Guide: &lt;a href=&quot;https://youtu.be/U-omALWIBos&quot;&gt;How I Setup And Use Tmux Alongside Neovim for an Awesome Dev Workflow&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Relevant Files&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.tmux.conf&quot;&gt;.tmux.conf&lt;/a&gt; - Tmux Configuration File&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Yabai Tiling Window Manager Setup&lt;/h1&gt; 
&lt;p&gt;‚úçüèº Blog Post: &lt;a href=&quot;https://josean.com/posts/yabai-setup&quot;&gt;How To Setup And Use The Yabai Tiling Window Manager On Mac&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üìπ Youtube Guide: &lt;a href=&quot;https://youtu.be/k94qImbFKWE&quot;&gt;How To Setup And Use The Yabai Tiling Window Manager On Mac&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Relevant Files&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/yabai/yabairc&quot;&gt;.config/yabai/yabairc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/skhd/skhdrc&quot;&gt;.config/skhd/skhdrc&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Aerospace Tiling Window Manager Setup&lt;/h1&gt; 
&lt;p&gt;‚úçüèº Blog Post: &lt;a href=&quot;https://josean.com/posts/how-to-setup-aerospace-tiling-window-manager&quot;&gt;How To Setup And Use The Aerospace Tiling Window Manager On macOS&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üìπ Youtube Guide: &lt;a href=&quot;https://youtu.be/-FoWClVHG5g&quot;&gt;How To Setup And Use The Aerospace Tiling Window Manager On macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Relevant Files&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/aerospace/aerospace.toml&quot;&gt;.config/aerospace/aerospace.toml&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Sketchybar Custom Menu Bar Setup&lt;/h1&gt; 
&lt;p&gt;‚úçüèº Blog Post: &lt;a href=&quot;https://josean.com/posts/sketchybar-setup&quot;&gt;How To Make An Amazing Custom Menu Bar For Your Mac With Sketchybar&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üìπ Youtube Guide: &lt;a href=&quot;https://youtu.be/k94qImbFKWE&quot;&gt;How To Make An Amazing Custom Menu Bar For Your Mac With Sketchybar&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Setup Requires&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;sketchybar: &lt;code&gt;brew tap FelixKratz/formulae&lt;/code&gt; and &lt;code&gt;brew install sketchybar&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;jq (json command line processor): &lt;code&gt;brew install jq&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SF Pro Font: &lt;code&gt;brew tap homebrew/cask-fonts&lt;/code&gt; and &lt;code&gt;brew install font-sf-pro&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SF Symbols: &lt;code&gt;brew install --cask sf-symbols&lt;/code&gt;:&lt;/li&gt; 
 &lt;li&gt;Sketchybar App Font:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;`curl -L https://github.com/kvndrsslr/sketchybar-app-font/releases/download/v1.0.16/sketchybar-app-font.ttf -o $HOME/Library/Fonts/sketchybar-app-font.ttf`
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Relevant Files&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/sketchybar/&quot;&gt;.config/sketchybar&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Neovim Setup&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: This is my latest config with lazy.nvim. It is similar, but not the same as my original packer setup.&lt;/p&gt; 
&lt;p&gt;If you are coming from my full neovim setup video with packer, that config is found here: &lt;a href=&quot;https://github.com/josean-dev/dev-environment-files/tree/packer-nvim-setup&quot;&gt;Packer Config&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;‚úçüèº Blog Post: &lt;a href=&quot;https://josean.com/posts/how-to-setup-neovim-2024&quot;&gt;How I Setup Neovim On My Mac To Make It AMAZING In 2024&lt;/a&gt; üìπ Complete Neovim Setup Guide: &lt;a href=&quot;https://youtu.be/6pAG3BHurdM&quot;&gt;How I Setup Neovim On My Mac To Make It AMAZING In 2024&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;If you clone the repo into your machine and use the config by copying .config/nvim to your home folder, wait for the plugins, language servers and parsers to install with lazy.nvim, Mason and nvim-treesitter. If you are opening a lua file or another file I have language servers configured for, like html, css or javascript/typescript, you might also get an error saying that the server failed to start. This is because Mason hasn&#39;t installed it yet. Press enter to continue, Mason will automatically install it.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Relevant Files&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/nvim&quot;&gt;.config/nvim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Setup Requires&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;True Color Terminal Like: &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/&quot;&gt;Neovim&lt;/a&gt; (Version 0.9 or Later)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; - I use Meslo Nerd Font&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;Ripgrep&lt;/a&gt; - For Telescope Fuzzy Finder&lt;/li&gt; 
 &lt;li&gt;XCode Command Line Tools&lt;/li&gt; 
 &lt;li&gt;If working with typescript/javascript and the typescript language server like me. You might need to install node/npm.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;re on mac, like me, you can install iTerm2, Neovim, Meslo Nerd Font, Ripgrep and Node with homebrew.&lt;/p&gt; 
&lt;p&gt;iTerm2:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install --cask iterm2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Nerd font:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew tap homebrew/cask-fonts
brew install font-meslo-lg-nerd-font
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Neovim:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ripgrep:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install ripgrep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Node/Npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install node
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For XCode Command Line Tools do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;h4&gt;Plugin Manager&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;folke/lazy.nvim&lt;/a&gt; - Amazing plugin manager&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Dependency For Other Plugins&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;nvim-lua/plenary&lt;/a&gt; - Useful lua functions other plugins use&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Preferred Colorscheme&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/tokyonight.nvim&quot;&gt;folke/tokyonight.nvim&lt;/a&gt; - tokyonight colorscheme (I modified some colors it in config)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Navigating Between Neovim Windows and Tmux&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/christoomey/vim-tmux-navigator&quot;&gt;christoomey/vim-tmux-navigator&lt;/a&gt; - navigate b/w nvim splits &amp;amp; tmux panes with CTRL+h,j,k,l&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Essentials&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kylechui/nvim-surround&quot;&gt;kylechui/nvim-surround&lt;/a&gt; - manipulate surroundings with &quot;ys&quot;, &quot;ds&quot;, and &quot;cs&quot;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gbprod/substitute.nvim&quot;&gt;gbprod/substitute.nvim&lt;/a&gt; - replace things with register with &quot;s&quot; and &quot;S&quot;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Navigating Quickly&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;folke/flash.nvim&lt;/a&gt; - jump anywhere visible very quickly with minimal keystrokes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;File Explorer&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;nvim-tree/nvim-tree.lua&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;VS Code Like Icons&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kyazdani42/nvim-web-devicons&quot;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Neovim Greeter&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;goolord/alpha-nvim&lt;/a&gt; -- neovim greeter on startup&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Auto Sessions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rmagatti/auto-session&quot;&gt;rmagatti/auto-session&lt;/a&gt; - auto save neovim sessions/restore with keymap&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Statusline&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;nvim-lualine/lualine.nvim&lt;/a&gt; - Better statusline&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Bufferline&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;akinsho/bufferline.nvim&lt;/a&gt; - Better looking tabs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Keymap Suggestions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;folke/which-key.nvim&lt;/a&gt; - Get suggested keymaps as you type&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Fuzzy Finder&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim&quot;&gt;nvim-telescope/telescope-fzf-native.nvim&lt;/a&gt; - Dependency for better performance&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;nvim-telescope/telescope.nvim&lt;/a&gt; - Fuzzy Finder&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc/dressing.nvim&quot;&gt;stevearc/dressing.nvim&lt;/a&gt; - select/input ui improvement&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Autocompletion&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;hrsh7th/nvim-cmp&lt;/a&gt; - Completion plugin&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/cmp-buffer&quot;&gt;hrsh7th/cmp-buffer&lt;/a&gt; - Completion source for text in current buffer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/cmp-path&quot;&gt;hrsh7th/cmp-path&lt;/a&gt; - Completion source for file system paths&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onsails/lspkind.nvim&quot;&gt;onsails/lspkind.nvim&lt;/a&gt; - Vs Code Like Icons for autocompletion&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Snippets&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip&quot;&gt;L3MON4D3/LuaSnip&lt;/a&gt; - Snippet engine&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rafamadriz/friendly-snippets&quot;&gt;rafamadriz/friendly-snippets&lt;/a&gt; - Useful snippets for different languages&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/saadparwaiz1/cmp_luasnip&quot;&gt;saadparwaiz1/cmp_luasnip&lt;/a&gt; - Completion source for snippet autocomplete&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Managing &amp;amp; Installing Language Servers, Linters &amp;amp; Formatters&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;williamboman/mason.nvim&lt;/a&gt; - Install language servers, formatters and linters&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;LSP Configuration&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/williamboman/mason-lspconfig.nvim&quot;&gt;williamboman/mason-lspconfig.nvim&lt;/a&gt; - Bridges gap b/w mason &amp;amp; lspconfig&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;neovim/nvim-lspconfig&lt;/a&gt; - Easy way to configure lsp servers&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hrsh7th/cmp-nvim-lsp&quot;&gt;hrsh7th/cmp-nvim-lsp&lt;/a&gt; - Smart code autocompletion with lsp&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Trouble.nvim&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;folke/trouble.nvim&lt;/a&gt; - nice way to see diagnostics and other stuff&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Formatting &amp;amp; Linting&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc/conform.nvim&quot;&gt;stevearc/conform.nvim&lt;/a&gt; - Easy way to configure formatters&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-lint&quot;&gt;mfussenegger/nvim-lint&lt;/a&gt; - Easy way to configure linters&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/WhoIsSethDaniel/mason-tool-installer.nvim&quot;&gt;WhoIsSethDaniel/mason-tool-installer.nvim&lt;/a&gt; - Auto install linters &amp;amp; formatters on startup&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Comments&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/numToStr/Comment.nvim&quot;&gt;numToStr/Comment.nvim&lt;/a&gt; - toggle comments with &quot;gc&quot;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JoosepAlviste/nvim-ts-context-commentstring&quot;&gt;JoosepAlviste/nvim-ts-context-commentstring&lt;/a&gt; - Requires treesitter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/folke/todo-comments.nvim&quot;&gt;folke/todo-comments.nvim&lt;/a&gt; - highlight/search for comments like todo/hack/bug&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Treesitter Syntax Highlighting, Autoclosing &amp;amp; Text Objects&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt; - Treesitter configuration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&quot;&gt;nvim-treesitter/nvim-treesitter-textobjects&lt;/a&gt; - Treesitter configuration&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/windwp/nvim-autopairs&quot;&gt;windwp/nvim-autopairs&lt;/a&gt; - Autoclose brackets, parens, quotes, etc...&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/windwp/nvim-ts-autotag&quot;&gt;windwp/nvim-ts-autotag&lt;/a&gt; - Autoclose tags&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Indent Guides&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;lukas-reineke/indent-blankline.nvim&lt;/a&gt; - Indent guides with treesitter integration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Git&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;lewis6991/gitsigns.nvim&lt;/a&gt; - Show modifications on left hand side and interact with git hunks&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kdheepak/lazygit.nvim&quot;&gt;kdheepak/lazygit.nvim&lt;/a&gt; - Use lazygit within Neovim&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>opentibiabr/canary</title>
      <link>https://github.com/opentibiabr/canary</link>
      <description>&lt;p&gt;Canary Server 14.x for OpenTibia community.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTibiaBR - Canary&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/gvTj5sh9Mp&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/528117503952551936.svg?style=flat-square&amp;amp;logo=discord&quot; alt=&quot;Discord Channel&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-ubuntu.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-ubuntu.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Ubuntu&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-cmake.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-cmake.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Windows - CMake&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-solution.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-windows-solution.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Windows - Solution&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-docker.yml&quot;&gt;&lt;img src=&quot;https://github.com/opentibiabr/canary/actions/workflows/build-docker.yml/badge.svg?sanitize=true&quot; alt=&quot;Build - Docker&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://sonarcloud.io/dashboard?id=opentibiabr_canary&quot;&gt;&lt;img src=&quot;https://sonarcloud.io/api/project_badges/measure?project=opentibiabr_canary&amp;amp;metric=alert_status&quot; alt=&quot;Quality Gate Status&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/repo-size/opentibiabr/canary&quot; alt=&quot;GitHub repo size&quot; /&gt; &lt;a href=&quot;https://github.com/opentibiabr/canary/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/opentibiabr/canary&quot; alt=&quot;GitHub&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenTibiaBR - Canary is a free and open-source MMORPG server emulator written in C++. It is a fork of the &lt;a href=&quot;https://github.com/opentibiabr/otservbr-global&quot;&gt;OTServBR-Global&lt;/a&gt; project. To connect to the server and to take a stable experience, you can use &lt;a href=&quot;https://github.com/mehah/otclient&quot;&gt;mehah&#39;s otclient&lt;/a&gt; or &lt;a href=&quot;https://github.com/dudantas/tibia-client/releases/latest&quot;&gt;tibia client&lt;/a&gt; and if you want to edit something, check our &lt;a href=&quot;https://docs.opentibiabr.com/opentibiabr/downloads/tools&quot;&gt;customized tools&lt;/a&gt;. If you want to edit the map, use our own &lt;a href=&quot;https://github.com/opentibiabr/remeres-map-editor/&quot;&gt;remere&#39;s map editor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.opentibiabr.com/opentibiabr/projects/canary&quot;&gt;Gitbook&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/wiki&quot;&gt;Wiki&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Running Tests&lt;/h2&gt; 
&lt;p&gt;Tests can be run directly from the repository root using CMake test presets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Configure and build tests for your platform
cmake --preset linux-debug &amp;amp;&amp;amp; cmake --build --preset linux-debug

# Run all tests
ctest --preset linux-debug

# For other platforms use:
# ctest --preset macos-debug
# ctest --preset windows-debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For detailed testing information including adding tests and framework usage, see &lt;a href=&quot;https://raw.githubusercontent.com/opentibiabr/canary/main/tests/README.md&quot;&gt;tests/README.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you need help, please visit our &lt;a href=&quot;https://discord.gg/gvTj5sh9Mp&quot;&gt;discord&lt;/a&gt;. Our issue tracker is not a support forum, and using it as one will result in your issue being closed.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Here are some ways you can contribute:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/issues/new/choose&quot;&gt;Issue Tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/opentibiabr/canary/pulls&quot;&gt;Pull Request&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You are subject to our code of conduct, read at &lt;a href=&quot;https://github.com/opentibiabr/canary/raw/main/CODE_OF_CONDUCT.md&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Our contributors (&lt;a href=&quot;https://github.com/opentibiabr/canary/graphs/contributors&quot;&gt;Canary&lt;/a&gt; | &lt;a href=&quot;https://github.com/opentibiabr/otservbr-global/graphs/contributors&quot;&gt;OTServBR-Global&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;See our &lt;a href=&quot;https://docs.opentibiabr.com/home/donate&quot;&gt;donate page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Project supported by JetBrains&lt;/h2&gt; 
&lt;p&gt;We extend our heartfelt gratitude to Jetbrains for generously granting us licenses to collaborate on this and various other open-source initiatives.&lt;/p&gt; 
&lt;a href=&quot;https://jb.gg/OpenSourceSupport/?from=https://github.com/opentibiabr/canary/&quot;&gt; &lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot; width=&quot;150&quot; /&gt; &lt;/a&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://forums.otserv.com.br&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/otbr/otserv-brasil/main/otbr.png&quot; alt=&quot;Supported by OTServ Brasil&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>folke/which-key.nvim</title>
      <link>https://github.com/folke/which-key.nvim</link>
      <description>&lt;p&gt;üí• Create key bindings that stick. WhichKey helps you remember your Neovim keymaps, by showing available keybindings in a popup as you type.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí• Which Key&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; helps you remember your Neovim keymaps, by showing available keybindings in a popup as you type.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/89277334-dcdc-4b0f-9fd4-02f27012f589&quot; alt=&quot;image&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/f8d71a75-312e-4a42-add8-d153493b2633&quot; alt=&quot;image&quot; /&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/e4400a1d-7e71-4439-b6ff-6cbc40647a6f&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üîç &lt;strong&gt;Key Binding Help&lt;/strong&gt;: show available keybindings in a popup as you type.&lt;/li&gt; 
 &lt;li&gt;‚å®Ô∏è &lt;strong&gt;Modes&lt;/strong&gt;: works in normal, insert, visual, operator pending, terminal and command mode. Every mode can be enabled/disabled.&lt;/li&gt; 
 &lt;li&gt;üõ†Ô∏è &lt;strong&gt;Customizable Layouts&lt;/strong&gt;: choose from &lt;code&gt;classic&lt;/code&gt;, &lt;code&gt;modern&lt;/code&gt;, and &lt;code&gt;helix&lt;/code&gt; presets or customize the window.&lt;/li&gt; 
 &lt;li&gt;üîÑ &lt;strong&gt;Flexible Sorting&lt;/strong&gt;: sort by &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;alphanum&lt;/code&gt;, &lt;code&gt;mod&lt;/code&gt;, &lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;icase&lt;/code&gt;, &lt;code&gt;desc&lt;/code&gt;, or &lt;code&gt;manual&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;üé® &lt;strong&gt;Formatting&lt;/strong&gt;: customizable key labels and descriptions&lt;/li&gt; 
 &lt;li&gt;üñºÔ∏è &lt;strong&gt;Icons&lt;/strong&gt;: integrates with &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;‚è±Ô∏è &lt;strong&gt;Delay&lt;/strong&gt;: delay is independent of &lt;code&gt;timeoutlen&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;üåê &lt;strong&gt;Plugins&lt;/strong&gt;: built-in plugins for marks, registers, presets, and spelling suggestions&lt;/li&gt; 
 &lt;li&gt;üöÄ &lt;strong&gt;Operators, Motions, Text Objects&lt;/strong&gt;: help for operators, motions and text objects&lt;/li&gt; 
 &lt;li&gt;üêô &lt;strong&gt;Hydra Mode&lt;/strong&gt;: keep the popup open until you hit &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4&lt;/li&gt; 
 &lt;li&gt;for proper icons support: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üì¶ Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager:&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/which-key.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  },
  keys = {
    {
      &quot;&amp;lt;leader&amp;gt;?&quot;,
      function()
        require(&quot;which-key&quot;).show({ global = false })
      end,
      desc = &quot;Buffer Local Keymaps (which-key)&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important] Make sure to run &lt;code&gt;:checkhealth which-key&lt;/code&gt; if something isn&#39;t working properly&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; is highly configurable. Expand to see the list of all the default options below.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class wk.Opts
local defaults = {
  ---@type false | &quot;classic&quot; | &quot;modern&quot; | &quot;helix&quot;
  preset = &quot;classic&quot;,
  -- Delay before showing the popup. Can be a number or a function that returns a number.
  ---@type number | fun(ctx: { keys: string, mode: string, plugin?: string }):number
  delay = function(ctx)
    return ctx.plugin and 0 or 200
  end,
  ---@param mapping wk.Mapping
  filter = function(mapping)
    -- example to exclude mappings without a description
    -- return mapping.desc and mapping.desc ~= &quot;&quot;
    return true
  end,
  --- You can add any mappings here, or use `require(&#39;which-key&#39;).add()` later
  ---@type wk.Spec
  spec = {},
  -- show a warning when issues were detected with your mappings
  notify = true,
  -- Which-key automatically sets up triggers for your mappings.
  -- But you can disable this and setup the triggers manually.
  -- Check the docs for more info.
  ---@type wk.Spec
  triggers = {
    { &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nxso&quot; },
  },
  -- Start hidden and wait for a key to be pressed before showing the popup
  -- Only used by enabled xo mapping modes.
  ---@param ctx { mode: string, operator: string }
  defer = function(ctx)
    return ctx.mode == &quot;V&quot; or ctx.mode == &quot;&amp;lt;C-V&amp;gt;&quot;
  end,
  plugins = {
    marks = true, -- shows a list of your marks on &#39; and `
    registers = true, -- shows your registers on &quot; in NORMAL or &amp;lt;C-r&amp;gt; in INSERT mode
    -- the presets plugin, adds help for a bunch of default keybindings in Neovim
    -- No actual key bindings are created
    spelling = {
      enabled = true, -- enabling this will show WhichKey when pressing z= to select spelling suggestions
      suggestions = 20, -- how many suggestions should be shown in the list?
    },
    presets = {
      operators = true, -- adds help for operators like d, y, ...
      motions = true, -- adds help for motions
      text_objects = true, -- help for text objects triggered after entering an operator
      windows = true, -- default bindings on &amp;lt;c-w&amp;gt;
      nav = true, -- misc bindings to work with windows
      z = true, -- bindings for folds, spelling and others prefixed with z
      g = true, -- bindings for prefixed with g
    },
  },
  ---@type wk.Win.opts
  win = {
    -- don&#39;t allow the popup to overlap with the cursor
    no_overlap = true,
    -- width = 1,
    -- height = { min = 4, max = 25 },
    -- col = 0,
    -- row = math.huge,
    -- border = &quot;none&quot;,
    padding = { 1, 2 }, -- extra window padding [top/bottom, right/left]
    title = true,
    title_pos = &quot;center&quot;,
    zindex = 1000,
    -- Additional vim.wo and vim.bo options
    bo = {},
    wo = {
      -- winblend = 10, -- value between 0-100 0 for fully opaque and 100 for fully transparent
    },
  },
  layout = {
    width = { min = 20 }, -- min and max width of the columns
    spacing = 3, -- spacing between columns
  },
  keys = {
    scroll_down = &quot;&amp;lt;c-d&amp;gt;&quot;, -- binding to scroll down inside the popup
    scroll_up = &quot;&amp;lt;c-u&amp;gt;&quot;, -- binding to scroll up inside the popup
  },
  ---@type (string|wk.Sorter)[]
  --- Mappings are sorted using configured sorters and natural sort of the keys
  --- Available sorters:
  --- * local: buffer-local mappings first
  --- * order: order of the items (Used by plugins like marks / registers)
  --- * group: groups last
  --- * alphanum: alpha-numerical first
  --- * mod: special modifier keys last
  --- * manual: the order the mappings were added
  --- * case: lower-case first
  sort = { &quot;local&quot;, &quot;order&quot;, &quot;group&quot;, &quot;alphanum&quot;, &quot;mod&quot; },
  ---@type number|fun(node: wk.Node):boolean?
  expand = 0, -- expand groups when &amp;lt;= n mappings
  -- expand = function(node)
  --   return not node.desc -- expand all nodes without a description
  -- end,
  -- Functions/Lua Patterns for formatting the labels
  ---@type table&amp;lt;string, ({[1]:string, [2]:string}|fun(str:string):string)[]&amp;gt;
  replace = {
    key = {
      function(key)
        return require(&quot;which-key.view&quot;).format(key)
      end,
      -- { &quot;&amp;lt;Space&amp;gt;&quot;, &quot;SPC&quot; },
    },
    desc = {
      { &quot;&amp;lt;Plug&amp;gt;%(?(.*)%)?&quot;, &quot;%1&quot; },
      { &quot;^%+&quot;, &quot;&quot; },
      { &quot;&amp;lt;[cC]md&amp;gt;&quot;, &quot;&quot; },
      { &quot;&amp;lt;[cC][rR]&amp;gt;&quot;, &quot;&quot; },
      { &quot;&amp;lt;[sS]ilent&amp;gt;&quot;, &quot;&quot; },
      { &quot;^lua%s+&quot;, &quot;&quot; },
      { &quot;^call%s+&quot;, &quot;&quot; },
      { &quot;^:%s*&quot;, &quot;&quot; },
    },
  },
  icons = {
    breadcrumb = &quot;¬ª&quot;, -- symbol used in the command line area that shows your active key combo
    separator = &quot;‚ûú&quot;, -- symbol used between a key and it&#39;s label
    group = &quot;+&quot;, -- symbol prepended to a group
    ellipsis = &quot;‚Ä¶&quot;,
    -- set to false to disable all mapping icons,
    -- both those explicitly added in a mapping
    -- and those from rules
    mappings = true,
    --- See `lua/which-key/icons.lua` for more details
    --- Set to `false` to disable keymap icons from rules
    ---@type wk.IconRule[]|false
    rules = {},
    -- use the highlights from mini.icons
    -- When `false`, it will use `WhichKeyIcon` instead
    colors = true,
    -- used by key format
    keys = {
      Up = &quot;ÔÅ¢ &quot;,
      Down = &quot;ÔÅ£ &quot;,
      Left = &quot;ÔÅ† &quot;,
      Right = &quot;ÔÅ° &quot;,
      C = &quot;Û∞ò¥ &quot;,
      M = &quot;Û∞òµ &quot;,
      D = &quot;Û∞ò≥ &quot;,
      S = &quot;Û∞ò∂ &quot;,
      CR = &quot;Û∞åë &quot;,
      Esc = &quot;Û±ä∑ &quot;,
      ScrollWheelDown = &quot;Û±ïê &quot;,
      ScrollWheelUp = &quot;Û±ïë &quot;,
      NL = &quot;Û∞åë &quot;,
      BS = &quot;Û∞ÅÆ&quot;,
      Space = &quot;Û±Åê &quot;,
      Tab = &quot;Û∞åí &quot;,
      F1 = &quot;Û±ä´&quot;,
      F2 = &quot;Û±ä¨&quot;,
      F3 = &quot;Û±ä≠&quot;,
      F4 = &quot;Û±äÆ&quot;,
      F5 = &quot;Û±äØ&quot;,
      F6 = &quot;Û±ä∞&quot;,
      F7 = &quot;Û±ä±&quot;,
      F8 = &quot;Û±ä≤&quot;,
      F9 = &quot;Û±ä≥&quot;,
      F10 = &quot;Û±ä¥&quot;,
      F11 = &quot;Û±äµ&quot;,
      F12 = &quot;Û±ä∂&quot;,
    },
  },
  show_help = true, -- show a help message in the command line for using WhichKey
  show_keys = true, -- show the currently pressed key and its label as a message in the command line
  -- disable WhichKey for certain buf types and file types.
  disable = {
    ft = {},
    bt = {},
  },
  debug = false, -- enable wk.log in the current directory
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;h2&gt;‚å®Ô∏è Mappings&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; automatically gets the descriptions of your keymaps from the &lt;code&gt;desc&lt;/code&gt; attribute of the keymap. So for most use-cases, you don&#39;t need to do anything else.&lt;/p&gt; 
&lt;p&gt;However, the &lt;strong&gt;mapping spec&lt;/strong&gt; is still useful to configure group descriptions and mappings that don&#39;t really exist as a regular keymap.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The &lt;strong&gt;mappings spec&lt;/strong&gt; changed in &lt;code&gt;v3&lt;/code&gt;, so make sure to only use the new &lt;code&gt;add&lt;/code&gt; method if you updated your existing mappings.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Mappings can be added as part of the config &lt;code&gt;opts.spec&lt;/code&gt;, or can be added later using &lt;code&gt;require(&quot;which-key&quot;).add()&lt;/code&gt;. &lt;code&gt;wk.add()&lt;/code&gt; can be called multiple times from anywhere in your config files.&lt;/p&gt; 
&lt;p&gt;A mapping has the following attributes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[1]&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) lhs &lt;strong&gt;&lt;em&gt;(required)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2]&lt;/strong&gt;: (&lt;code&gt;string|fun()&lt;/code&gt;) rhs &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;: when present, it will create the mapping&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;desc&lt;/strong&gt;: (&lt;code&gt;string|fun():string&lt;/code&gt;) description &lt;strong&gt;&lt;em&gt;(required for non-groups)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;group&lt;/strong&gt;: (&lt;code&gt;string|fun():string&lt;/code&gt;) group name &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: (&lt;code&gt;string|string[]&lt;/code&gt;) mode &lt;strong&gt;&lt;em&gt;(optional, defaults to &lt;code&gt;&quot;n&quot;&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;cond&lt;/strong&gt;: (&lt;code&gt;boolean|fun():boolean&lt;/code&gt;) condition to enable the mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;hidden&lt;/strong&gt;: (&lt;code&gt;boolean&lt;/code&gt;) hide the mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;icon&lt;/strong&gt;: (&lt;code&gt;string|wk.Icon|fun():(wk.Icon|string)&lt;/code&gt;) icon spec &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;proxy&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) proxy to another mapping &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;expand&lt;/strong&gt;: (&lt;code&gt;fun():wk.Spec&lt;/code&gt;) nested mappings &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;any other option valid for &lt;code&gt;vim.keymap.set&lt;/code&gt;. These are only used for creating mappings.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When &lt;code&gt;desc&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, or &lt;code&gt;icon&lt;/code&gt; are functions, they are evaluated every time the popup is shown.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;expand&lt;/code&gt; property allows to create dynamic mappings. Only functions as &lt;code&gt;rhs&lt;/code&gt; are supported for dynamic mappings. Two examples are included in &lt;code&gt;which-key.extras&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;require(&quot;which-key.extras&quot;).expand.buf&lt;/code&gt;: creates numerical key to buffer mappings&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;require(&quot;which-key.extras&quot;).expand.win&lt;/code&gt;: creates numerical key to window mappings&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local wk = require(&quot;which-key&quot;)
wk.add({
  { &quot;&amp;lt;leader&amp;gt;f&quot;, group = &quot;file&quot; }, -- group
  { &quot;&amp;lt;leader&amp;gt;ff&quot;, &quot;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&quot;, desc = &quot;Find File&quot;, mode = &quot;n&quot; },
  { &quot;&amp;lt;leader&amp;gt;fb&quot;, function() print(&quot;hello&quot;) end, desc = &quot;Foobar&quot; },
  { &quot;&amp;lt;leader&amp;gt;fn&quot;, desc = &quot;New File&quot; },
  { &quot;&amp;lt;leader&amp;gt;f1&quot;, hidden = true }, -- hide this keymap
  { &quot;&amp;lt;leader&amp;gt;w&quot;, proxy = &quot;&amp;lt;c-w&amp;gt;&quot;, group = &quot;windows&quot; }, -- proxy to window mappings
  { &quot;&amp;lt;leader&amp;gt;b&quot;, group = &quot;buffers&quot;, expand = function()
      return require(&quot;which-key.extras&quot;).expand.buf()
    end
  },
  {
    -- Nested mappings are allowed and can be added in any order
    -- Most attributes can be inherited or overridden on any level
    -- There&#39;s no limit to the depth of nesting
    mode = { &quot;n&quot;, &quot;v&quot; }, -- NORMAL and VISUAL mode
    { &quot;&amp;lt;leader&amp;gt;q&quot;, &quot;&amp;lt;cmd&amp;gt;q&amp;lt;cr&amp;gt;&quot;, desc = &quot;Quit&quot; }, -- no need to specify mode since it&#39;s inherited
    { &quot;&amp;lt;leader&amp;gt;w&quot;, &quot;&amp;lt;cmd&amp;gt;w&amp;lt;cr&amp;gt;&quot;, desc = &quot;Write&quot; },
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üéØ Triggers&lt;/h2&gt; 
&lt;p&gt;There&#39;s two ways that &lt;strong&gt;which-key&lt;/strong&gt; can be triggered:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;by a trigger keymap&lt;/li&gt; 
 &lt;li&gt;by a &lt;code&gt;ModeChanged&lt;/code&gt; event for visual and operator pending mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Both can be configured using &lt;code&gt;opts.triggers&lt;/code&gt; and &lt;code&gt;opts.defer&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;By default &lt;code&gt;opts.triggers&lt;/code&gt; includes &lt;code&gt;{ &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nixsotc&quot; }&lt;/code&gt;, which will setup keymap triggers for every mode automatically and will trigger during &lt;code&gt;ModeChanged&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Auto triggers will never be created for existing keymaps. That includes every valid single key Neovim builtin mapping. If you want to trigger on a builtin keymap, you have to add it manually.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt; triggers = {
   { &quot;&amp;lt;auto&amp;gt;&quot;, mode = &quot;nixsotc&quot; },
   { &quot;a&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] To manually setup triggers, you can set &lt;code&gt;opts.triggers&lt;/code&gt; to:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt; triggers = {
   { &quot;&amp;lt;leader&amp;gt;&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For &lt;code&gt;ModeChanged&lt;/code&gt; triggers, you can configure the &lt;code&gt;opts.defer&lt;/code&gt; option. When it returns &lt;code&gt;true&lt;/code&gt;, the popup will be shown only after an additional key is pressed. So &lt;code&gt;yaf&lt;/code&gt;, would show which-key after pressing &lt;code&gt;ya&lt;/code&gt;, but not after &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Defer some operators:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@param ctx { mode: string, operator: string }
defer = function(ctx)
  if vim.list_contains({ &quot;d&quot;, &quot;y&quot; }, ctx.operator) then
    return true
  end
  return vim.list_contains({ &quot;&amp;lt;C-V&amp;gt;&quot;, &quot;V&quot; }, ctx.mode)
end,
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;üé® Icons&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!note] For full support, you need to install either &lt;a href=&quot;https://github.com/echasnovski/mini.icons&quot;&gt;mini.icons&lt;/a&gt; or &lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There&#39;s multiple ways to set icons for your keymaps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;if you use lazy.nvim, then some icons will be autodetected for keymaps belonging to certain plugins.&lt;/li&gt; 
 &lt;li&gt;custom rules to decide what icon to use&lt;/li&gt; 
 &lt;li&gt;in your mapping spec, you can specify what icon to use at any level, so at the node for &lt;code&gt;&amp;lt;leader&amp;gt;g&lt;/code&gt; for example, to apply to all git keymaps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;icon&lt;/code&gt; attribute of a mapping can be a &lt;code&gt;string&lt;/code&gt;, which will be used as the actual icon, or an &lt;code&gt;wk.Icon&lt;/code&gt; object, which can have the following attributes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;icon&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the icon to use &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hl&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the highlight group to use for the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;color&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the color to use for the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt; valid colors are: &lt;code&gt;azure&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt;, &lt;code&gt;purple&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the category of the icon &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt; valid categories are: &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;filetype&lt;/code&gt;, &lt;code&gt;extension&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;): the name of the icon in the specified category &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If you&#39;d rather not use icons, you can disable them by setting &lt;code&gt;opts.icons.mappings&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;üöÄ Usage&lt;/h2&gt; 
&lt;p&gt;When the &lt;strong&gt;WhichKey&lt;/strong&gt; popup is open, you can use the following key bindings (they are also displayed at the bottom of the screen):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;hit one of the keys to open a group or execute a key binding&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; to cancel and close the popup&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;bs&amp;gt;&lt;/code&gt; go up one level&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt; scroll down&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; scroll up&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üêô Hydra Mode&lt;/h2&gt; 
&lt;p&gt;Hydra mode is a special mode that keeps the popup open until you hit &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Show hydra mode for changing windows
require(&quot;which-key&quot;).show({
  keys = &quot;&amp;lt;c-w&amp;gt;&quot;,
  loop = true, -- this will keep the popup open until you hit &amp;lt;esc&amp;gt;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üî• Plugins&lt;/h2&gt; 
&lt;p&gt;Four built-in plugins are included with &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;Presets&lt;/h3&gt; 
&lt;p&gt;Built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; and more.&lt;/p&gt; 
&lt;h3&gt;Marks&lt;/h3&gt; 
&lt;p&gt;Shows a list of your buffer local and global marks when you hit ` or &#39;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/43fb0874-7f79-4521-aee9-03e2b0841758&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Registers&lt;/h3&gt; 
&lt;p&gt;Shows a list of your buffer local and global registers when you hit &quot; in &lt;em&gt;NORMAL&lt;/em&gt; mode, or &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; in &lt;em&gt;INSERT&lt;/em&gt; mode.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/d8077dcb-56fb-47b0-ad9e-1aba5db16950&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;Spelling&lt;/h3&gt; 
&lt;p&gt;When enabled, this plugin hooks into &lt;code&gt;z=&lt;/code&gt; and replaces the full-screen spelling suggestions window by a list of suggestions within &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/102c7963-329a-40b9-b0a8-72c8656318b7&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;üé® Colors&lt;/h2&gt; 
&lt;p&gt;The table below shows all the highlight groups defined for &lt;strong&gt;WhichKey&lt;/strong&gt; with their default link.&lt;/p&gt; 
&lt;!-- colors:start --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Default Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKey&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyBorder&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;FloatBorder&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Border of the which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyDesc&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Identifier&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;description&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyGroup&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Keyword&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;group name&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIcon&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;@markup.link&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;icons&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconAzure&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconBlue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticInfo&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconCyan&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticHint&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconGreen&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticOk&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconGrey&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Normal&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconOrange&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticWarn&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconPurple&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Constant&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconRed&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticError&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyIconYellow&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;DiagnosticWarn&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyNormal&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;NormalFloat&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Normal in th which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeySeparator&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;the separator between the key and its description&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyTitle&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;FloatTitle&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;Title of the which-key window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WhichKeyValue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;values by plugins (like marks, registers, etc)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- colors:end --&gt;</description>
    </item>
    
    <item>
      <title>folke/snacks.nvim</title>
      <link>https://github.com/folke/snacks.nvim</link>
      <description>&lt;p&gt;üçø A collection of QoL plugins for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üçø &lt;code&gt;snacks.nvim&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;A collection of small QoL plugins for Neovim.&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;!-- toc:start --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Snack&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Setup&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/animate.md&quot;&gt;animate&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Efficient animations including over 45 easing functions &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/bigfile.md&quot;&gt;bigfile&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Deal with big files&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/bufdelete.md&quot;&gt;bufdelete&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Delete buffers without disrupting window layout&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/dashboard.md&quot;&gt;dashboard&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Beautiful declarative dashboards&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/debug.md&quot;&gt;debug&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty inspect &amp;amp; backtraces for debugging&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/dim.md&quot;&gt;dim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Focus on the active scope by dimming the rest&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/explorer.md&quot;&gt;explorer&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A file explorer (picker in disguise)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/git.md&quot;&gt;git&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Git utilities&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/gitbrowse.md&quot;&gt;gitbrowse&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open the current file, branch, commit, or repo in a browser (e.g. GitHub, GitLab, Bitbucket)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/image.md&quot;&gt;image&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Image viewer using Kitty Graphics Protocol, supported by &lt;code&gt;kitty&lt;/code&gt;, &lt;code&gt;wezterm&lt;/code&gt; and &lt;code&gt;ghostty&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/indent.md&quot;&gt;indent&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Indent guides and scopes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/input.md&quot;&gt;input&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Better &lt;code&gt;vim.ui.input&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/layout.md&quot;&gt;layout&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Window layouts&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/lazygit.md&quot;&gt;lazygit&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Open LazyGit in a float, auto-configure colorscheme and integration with Neovim&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/notifier.md&quot;&gt;notifier&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/notify.md&quot;&gt;notify&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utility functions to work with Neovim&#39;s &lt;code&gt;vim.notify&lt;/code&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/picker.md&quot;&gt;picker&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Picker for selecting items&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/profiler.md&quot;&gt;profiler&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Neovim lua profiler&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/quickfile.md&quot;&gt;quickfile&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;When doing &lt;code&gt;nvim somefile.txt&lt;/code&gt;, it will render the file as quickly as possible, before loading your plugins.&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/rename.md&quot;&gt;rename&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;LSP-integrated file renaming with support for plugins like &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-mini/mini.files&quot;&gt;mini.files&lt;/a&gt;.&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scope.md&quot;&gt;scope&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scope detection, text objects and jumping based on treesitter or indent&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scratch.md&quot;&gt;scratch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scratch buffers with a persistent file&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/scroll.md&quot;&gt;scroll&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Smooth scrolling&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/statuscolumn.md&quot;&gt;statuscolumn&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pretty status column&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/terminal.md&quot;&gt;terminal&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create and toggle floating/split terminals&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/toggle.md&quot;&gt;toggle&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle keymaps integrated with which-key icons / colors&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/util.md&quot;&gt;util&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utility functions for Snacks &lt;em&gt;(library)&lt;/em&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/win.md&quot;&gt;win&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create and manage floating windows or splits&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/words.md&quot;&gt;words&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Auto-show LSP references and quickly navigate between them&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚ÄºÔ∏è&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/docs/zen.md&quot;&gt;zen&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Zen mode ‚Ä¢ distraction-free coding&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- toc:end --&gt; 
&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neovim&lt;/strong&gt; &amp;gt;= 0.9.4&lt;/li&gt; 
 &lt;li&gt;for proper icons support: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-mini/mini.icons&quot;&gt;mini.icons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üì¶ Installation&lt;/h2&gt; 
&lt;p&gt;Install the plugin with your package manager:&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important] A couple of plugins &lt;strong&gt;require&lt;/strong&gt; &lt;code&gt;snacks.nvim&lt;/code&gt; to be set-up early. Setup creates some autocmds and does not load any plugins. Check the &lt;a href=&quot;https://github.com/folke/snacks.nvim/raw/main/lua/snacks/init.lua&quot;&gt;code&lt;/a&gt; to see what it does.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!caution] You need to explicitly pass options for a plugin or set &lt;code&gt;enabled = true&lt;/code&gt; to enable it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!tip] It&#39;s a good idea to run &lt;code&gt;:checkhealth snacks&lt;/code&gt; to see if everything is set up correctly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/snacks.nvim&quot;,
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
    bigfile = { enabled = true },
    dashboard = { enabled = true },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    picker = { enabled = true },
    notifier = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For an in-depth setup of &lt;code&gt;snacks.nvim&lt;/code&gt; with &lt;code&gt;lazy.nvim&lt;/code&gt;, check the &lt;a href=&quot;https://github.com/folke/snacks.nvim?tab=readme-ov-file#-usage&quot;&gt;example&lt;/a&gt; below.&lt;/p&gt; 
&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; 
&lt;p&gt;Please refer to the readme of each plugin for their specific configuration.&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;Default Options&lt;/summary&gt; 
 &lt;!-- config:start --&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;---@class snacks.Config
---@field animate? snacks.animate.Config
---@field bigfile? snacks.bigfile.Config
---@field dashboard? snacks.dashboard.Config
---@field dim? snacks.dim.Config
---@field explorer? snacks.explorer.Config
---@field gitbrowse? snacks.gitbrowse.Config
---@field image? snacks.image.Config
---@field indent? snacks.indent.Config
---@field input? snacks.input.Config
---@field layout? snacks.layout.Config
---@field lazygit? snacks.lazygit.Config
---@field notifier? snacks.notifier.Config
---@field picker? snacks.picker.Config
---@field profiler? snacks.profiler.Config
---@field quickfile? snacks.quickfile.Config
---@field scope? snacks.scope.Config
---@field scratch? snacks.scratch.Config
---@field scroll? snacks.scroll.Config
---@field statuscolumn? snacks.statuscolumn.Config
---@field terminal? snacks.terminal.Config
---@field toggle? snacks.toggle.Config
---@field win? snacks.win.Config
---@field words? snacks.words.Config
---@field zen? snacks.zen.Config
---@field styles? table&amp;lt;string, snacks.win.Config&amp;gt;
---@field image? snacks.image.Config|{}
{
  image = {
    -- define these here, so that we don&#39;t need to load the image module
    formats = {
      &quot;png&quot;,
      &quot;jpg&quot;,
      &quot;jpeg&quot;,
      &quot;gif&quot;,
      &quot;bmp&quot;,
      &quot;webp&quot;,
      &quot;tiff&quot;,
      &quot;heic&quot;,
      &quot;avif&quot;,
      &quot;mp4&quot;,
      &quot;mov&quot;,
      &quot;avi&quot;,
      &quot;mkv&quot;,
      &quot;webm&quot;,
      &quot;pdf&quot;,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- config:end --&gt; 
&lt;/details&gt; 
&lt;p&gt;Some plugins have examples in their documentation. You can include them in your config like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  dashboard = { example = &quot;github&quot; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to customize options for a plugin after they have been resolved, you can use the &lt;code&gt;config&lt;/code&gt; function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  gitbrowse = {
    config = function(opts, defaults)
      table.insert(opts.remote_patterns, { &quot;my&quot;, &quot;custom pattern&quot; })
    end
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üöÄ Usage&lt;/h2&gt; 
&lt;p&gt;See the example below for how to configure &lt;code&gt;snacks.nvim&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- example:start --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;folke/snacks.nvim&quot;,
  priority = 1000,
  lazy = false,
  ---@type snacks.Config
  opts = {
    bigfile = { enabled = true },
    dashboard = { enabled = true },
    explorer = { enabled = true },
    indent = { enabled = true },
    input = { enabled = true },
    notifier = {
      enabled = true,
      timeout = 3000,
    },
    picker = { enabled = true },
    quickfile = { enabled = true },
    scope = { enabled = true },
    scroll = { enabled = true },
    statuscolumn = { enabled = true },
    words = { enabled = true },
    styles = {
      notification = {
        -- wo = { wrap = true } -- Wrap notifications
      }
    }
  },
  keys = {
    -- Top Pickers &amp;amp; Explorer
    { &quot;&amp;lt;leader&amp;gt;&amp;lt;space&amp;gt;&quot;, function() Snacks.picker.smart() end, desc = &quot;Smart Find Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;,&quot;, function() Snacks.picker.buffers() end, desc = &quot;Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;/&quot;, function() Snacks.picker.grep() end, desc = &quot;Grep&quot; },
    { &quot;&amp;lt;leader&amp;gt;:&quot;, function() Snacks.picker.command_history() end, desc = &quot;Command History&quot; },
    { &quot;&amp;lt;leader&amp;gt;n&quot;, function() Snacks.picker.notifications() end, desc = &quot;Notification History&quot; },
    { &quot;&amp;lt;leader&amp;gt;e&quot;, function() Snacks.explorer() end, desc = &quot;File Explorer&quot; },
    -- find
    { &quot;&amp;lt;leader&amp;gt;fb&quot;, function() Snacks.picker.buffers() end, desc = &quot;Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;fc&quot;, function() Snacks.picker.files({ cwd = vim.fn.stdpath(&quot;config&quot;) }) end, desc = &quot;Find Config File&quot; },
    { &quot;&amp;lt;leader&amp;gt;ff&quot;, function() Snacks.picker.files() end, desc = &quot;Find Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;fg&quot;, function() Snacks.picker.git_files() end, desc = &quot;Find Git Files&quot; },
    { &quot;&amp;lt;leader&amp;gt;fp&quot;, function() Snacks.picker.projects() end, desc = &quot;Projects&quot; },
    { &quot;&amp;lt;leader&amp;gt;fr&quot;, function() Snacks.picker.recent() end, desc = &quot;Recent&quot; },
    -- git
    { &quot;&amp;lt;leader&amp;gt;gb&quot;, function() Snacks.picker.git_branches() end, desc = &quot;Git Branches&quot; },
    { &quot;&amp;lt;leader&amp;gt;gl&quot;, function() Snacks.picker.git_log() end, desc = &quot;Git Log&quot; },
    { &quot;&amp;lt;leader&amp;gt;gL&quot;, function() Snacks.picker.git_log_line() end, desc = &quot;Git Log Line&quot; },
    { &quot;&amp;lt;leader&amp;gt;gs&quot;, function() Snacks.picker.git_status() end, desc = &quot;Git Status&quot; },
    { &quot;&amp;lt;leader&amp;gt;gS&quot;, function() Snacks.picker.git_stash() end, desc = &quot;Git Stash&quot; },
    { &quot;&amp;lt;leader&amp;gt;gd&quot;, function() Snacks.picker.git_diff() end, desc = &quot;Git Diff (Hunks)&quot; },
    { &quot;&amp;lt;leader&amp;gt;gf&quot;, function() Snacks.picker.git_log_file() end, desc = &quot;Git Log File&quot; },
    -- Grep
    { &quot;&amp;lt;leader&amp;gt;sb&quot;, function() Snacks.picker.lines() end, desc = &quot;Buffer Lines&quot; },
    { &quot;&amp;lt;leader&amp;gt;sB&quot;, function() Snacks.picker.grep_buffers() end, desc = &quot;Grep Open Buffers&quot; },
    { &quot;&amp;lt;leader&amp;gt;sg&quot;, function() Snacks.picker.grep() end, desc = &quot;Grep&quot; },
    { &quot;&amp;lt;leader&amp;gt;sw&quot;, function() Snacks.picker.grep_word() end, desc = &quot;Visual selection or word&quot;, mode = { &quot;n&quot;, &quot;x&quot; } },
    -- search
    { &#39;&amp;lt;leader&amp;gt;s&quot;&#39;, function() Snacks.picker.registers() end, desc = &quot;Registers&quot; },
    { &#39;&amp;lt;leader&amp;gt;s/&#39;, function() Snacks.picker.search_history() end, desc = &quot;Search History&quot; },
    { &quot;&amp;lt;leader&amp;gt;sa&quot;, function() Snacks.picker.autocmds() end, desc = &quot;Autocmds&quot; },
    { &quot;&amp;lt;leader&amp;gt;sb&quot;, function() Snacks.picker.lines() end, desc = &quot;Buffer Lines&quot; },
    { &quot;&amp;lt;leader&amp;gt;sc&quot;, function() Snacks.picker.command_history() end, desc = &quot;Command History&quot; },
    { &quot;&amp;lt;leader&amp;gt;sC&quot;, function() Snacks.picker.commands() end, desc = &quot;Commands&quot; },
    { &quot;&amp;lt;leader&amp;gt;sd&quot;, function() Snacks.picker.diagnostics() end, desc = &quot;Diagnostics&quot; },
    { &quot;&amp;lt;leader&amp;gt;sD&quot;, function() Snacks.picker.diagnostics_buffer() end, desc = &quot;Buffer Diagnostics&quot; },
    { &quot;&amp;lt;leader&amp;gt;sh&quot;, function() Snacks.picker.help() end, desc = &quot;Help Pages&quot; },
    { &quot;&amp;lt;leader&amp;gt;sH&quot;, function() Snacks.picker.highlights() end, desc = &quot;Highlights&quot; },
    { &quot;&amp;lt;leader&amp;gt;si&quot;, function() Snacks.picker.icons() end, desc = &quot;Icons&quot; },
    { &quot;&amp;lt;leader&amp;gt;sj&quot;, function() Snacks.picker.jumps() end, desc = &quot;Jumps&quot; },
    { &quot;&amp;lt;leader&amp;gt;sk&quot;, function() Snacks.picker.keymaps() end, desc = &quot;Keymaps&quot; },
    { &quot;&amp;lt;leader&amp;gt;sl&quot;, function() Snacks.picker.loclist() end, desc = &quot;Location List&quot; },
    { &quot;&amp;lt;leader&amp;gt;sm&quot;, function() Snacks.picker.marks() end, desc = &quot;Marks&quot; },
    { &quot;&amp;lt;leader&amp;gt;sM&quot;, function() Snacks.picker.man() end, desc = &quot;Man Pages&quot; },
    { &quot;&amp;lt;leader&amp;gt;sp&quot;, function() Snacks.picker.lazy() end, desc = &quot;Search for Plugin Spec&quot; },
    { &quot;&amp;lt;leader&amp;gt;sq&quot;, function() Snacks.picker.qflist() end, desc = &quot;Quickfix List&quot; },
    { &quot;&amp;lt;leader&amp;gt;sR&quot;, function() Snacks.picker.resume() end, desc = &quot;Resume&quot; },
    { &quot;&amp;lt;leader&amp;gt;su&quot;, function() Snacks.picker.undo() end, desc = &quot;Undo History&quot; },
    { &quot;&amp;lt;leader&amp;gt;uC&quot;, function() Snacks.picker.colorschemes() end, desc = &quot;Colorschemes&quot; },
    -- LSP
    { &quot;gd&quot;, function() Snacks.picker.lsp_definitions() end, desc = &quot;Goto Definition&quot; },
    { &quot;gD&quot;, function() Snacks.picker.lsp_declarations() end, desc = &quot;Goto Declaration&quot; },
    { &quot;gr&quot;, function() Snacks.picker.lsp_references() end, nowait = true, desc = &quot;References&quot; },
    { &quot;gI&quot;, function() Snacks.picker.lsp_implementations() end, desc = &quot;Goto Implementation&quot; },
    { &quot;gy&quot;, function() Snacks.picker.lsp_type_definitions() end, desc = &quot;Goto T[y]pe Definition&quot; },
    { &quot;&amp;lt;leader&amp;gt;ss&quot;, function() Snacks.picker.lsp_symbols() end, desc = &quot;LSP Symbols&quot; },
    { &quot;&amp;lt;leader&amp;gt;sS&quot;, function() Snacks.picker.lsp_workspace_symbols() end, desc = &quot;LSP Workspace Symbols&quot; },
    -- Other
    { &quot;&amp;lt;leader&amp;gt;z&quot;,  function() Snacks.zen() end, desc = &quot;Toggle Zen Mode&quot; },
    { &quot;&amp;lt;leader&amp;gt;Z&quot;,  function() Snacks.zen.zoom() end, desc = &quot;Toggle Zoom&quot; },
    { &quot;&amp;lt;leader&amp;gt;.&quot;,  function() Snacks.scratch() end, desc = &quot;Toggle Scratch Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;S&quot;,  function() Snacks.scratch.select() end, desc = &quot;Select Scratch Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;n&quot;,  function() Snacks.notifier.show_history() end, desc = &quot;Notification History&quot; },
    { &quot;&amp;lt;leader&amp;gt;bd&quot;, function() Snacks.bufdelete() end, desc = &quot;Delete Buffer&quot; },
    { &quot;&amp;lt;leader&amp;gt;cR&quot;, function() Snacks.rename.rename_file() end, desc = &quot;Rename File&quot; },
    { &quot;&amp;lt;leader&amp;gt;gB&quot;, function() Snacks.gitbrowse() end, desc = &quot;Git Browse&quot;, mode = { &quot;n&quot;, &quot;v&quot; } },
    { &quot;&amp;lt;leader&amp;gt;gg&quot;, function() Snacks.lazygit() end, desc = &quot;Lazygit&quot; },
    { &quot;&amp;lt;leader&amp;gt;un&quot;, function() Snacks.notifier.hide() end, desc = &quot;Dismiss All Notifications&quot; },
    { &quot;&amp;lt;c-/&amp;gt;&quot;,      function() Snacks.terminal() end, desc = &quot;Toggle Terminal&quot; },
    { &quot;&amp;lt;c-_&amp;gt;&quot;,      function() Snacks.terminal() end, desc = &quot;which_key_ignore&quot; },
    { &quot;]]&quot;,         function() Snacks.words.jump(vim.v.count1) end, desc = &quot;Next Reference&quot;, mode = { &quot;n&quot;, &quot;t&quot; } },
    { &quot;[[&quot;,         function() Snacks.words.jump(-vim.v.count1) end, desc = &quot;Prev Reference&quot;, mode = { &quot;n&quot;, &quot;t&quot; } },
    {
      &quot;&amp;lt;leader&amp;gt;N&quot;,
      desc = &quot;Neovim News&quot;,
      function()
        Snacks.win({
          file = vim.api.nvim_get_runtime_file(&quot;doc/news.txt&quot;, false)[1],
          width = 0.6,
          height = 0.6,
          wo = {
            spell = false,
            wrap = false,
            signcolumn = &quot;yes&quot;,
            statuscolumn = &quot; &quot;,
            conceallevel = 3,
          },
        })
      end,
    }
  },
  init = function()
    vim.api.nvim_create_autocmd(&quot;User&quot;, {
      pattern = &quot;VeryLazy&quot;,
      callback = function()
        -- Setup some globals for debugging (lazy-loaded)
        _G.dd = function(...)
          Snacks.debug.inspect(...)
        end
        _G.bt = function()
          Snacks.debug.backtrace()
        end

        -- Override print to use snacks for `:=` command
        if vim.fn.has(&quot;nvim-0.11&quot;) == 1 then
          vim._print = function(_, ...)
            dd(...)
          end
        else
          vim.print = _G.dd 
        end

        -- Create some toggle mappings
        Snacks.toggle.option(&quot;spell&quot;, { name = &quot;Spelling&quot; }):map(&quot;&amp;lt;leader&amp;gt;us&quot;)
        Snacks.toggle.option(&quot;wrap&quot;, { name = &quot;Wrap&quot; }):map(&quot;&amp;lt;leader&amp;gt;uw&quot;)
        Snacks.toggle.option(&quot;relativenumber&quot;, { name = &quot;Relative Number&quot; }):map(&quot;&amp;lt;leader&amp;gt;uL&quot;)
        Snacks.toggle.diagnostics():map(&quot;&amp;lt;leader&amp;gt;ud&quot;)
        Snacks.toggle.line_number():map(&quot;&amp;lt;leader&amp;gt;ul&quot;)
        Snacks.toggle.option(&quot;conceallevel&quot;, { off = 0, on = vim.o.conceallevel &amp;gt; 0 and vim.o.conceallevel or 2 }):map(&quot;&amp;lt;leader&amp;gt;uc&quot;)
        Snacks.toggle.treesitter():map(&quot;&amp;lt;leader&amp;gt;uT&quot;)
        Snacks.toggle.option(&quot;background&quot;, { off = &quot;light&quot;, on = &quot;dark&quot;, name = &quot;Dark Background&quot; }):map(&quot;&amp;lt;leader&amp;gt;ub&quot;)
        Snacks.toggle.inlay_hints():map(&quot;&amp;lt;leader&amp;gt;uh&quot;)
        Snacks.toggle.indent():map(&quot;&amp;lt;leader&amp;gt;ug&quot;)
        Snacks.toggle.dim():map(&quot;&amp;lt;leader&amp;gt;uD&quot;)
      end,
    })
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- example:end --&gt; 
&lt;h2&gt;üåà Highlight Groups&lt;/h2&gt; 
&lt;p&gt;Snacks defines &lt;strong&gt;a lot&lt;/strong&gt; of highlight groups and it&#39;s impossible to document them all.&lt;/p&gt; 
&lt;p&gt;Instead, you can use the picker to see all the highlight groups.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;Snacks.picker.highlights({pattern = &quot;hl_group:^Snacks&quot;})
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>olimorris/codecompanion.nvim</title>
      <link>https://github.com/olimorris/codecompanion.nvim</link>
      <description>&lt;p&gt;‚ú® AI Coding, Vim Style&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://codecompanion.olimorris.dev&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/64da6a69-a54d-4799-b034-59d9efd27b76&quot; alt=&quot;CodeCompanion.nvim&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/olimorris/codecompanion.nvim?color=c678dd&amp;amp;logoColor=e06c75&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/olimorris/codecompanion.nvim/ci.yml?branch=main&amp;amp;label=tests&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/olimorris/codecompanion.nvim?style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Code with LLMs and Agents via the &lt;a href=&quot;https://codecompanion.olimorris.dev/getting-started.html&quot;&gt;in-built&lt;/a&gt; adapters, the &lt;a href=&quot;https://codecompanion.olimorris.dev/configuration/adapters#community-adapters&quot;&gt;community&lt;/a&gt; adapters or by &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/adapters.html&quot;&gt;building&lt;/a&gt; your own&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;New features are always announced &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/discussions/categories/announcements&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üíú&lt;/span&gt; Sponsors&lt;/h2&gt; 
&lt;p&gt;Thank you to the following people:&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;!-- sponsors --&gt;&lt;a href=&quot;https://github.com/unicell&quot;&gt;&lt;img src=&quot;https://github.com/unicell.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Qiu Yu&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/adam-e-trepanier&quot;&gt;&lt;img src=&quot;https://github.com/adam-e-trepanier.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Adam Trepanier&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jfgordon2&quot;&gt;&lt;img src=&quot;https://github.com/jfgordon2.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Jeff Gordon&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/llinfeng&quot;&gt;&lt;img src=&quot;https://github.com/llinfeng.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Linfeng Li&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/prettymuchbryce&quot;&gt;&lt;img src=&quot;https://github.com/prettymuchbryce.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Bryce Neal&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/pratyushmittal&quot;&gt;&lt;img src=&quot;https://github.com/pratyushmittal.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Pratyush Mittal&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/toupeira&quot;&gt;&lt;img src=&quot;https://github.com/toupeira.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Markus Koller&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JuanCrg90&quot;&gt;&lt;img src=&quot;https://github.com/JuanCrg90.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Juan Carlos Ruiz&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Alexander-Garcia&quot;&gt;&lt;img src=&quot;https://github.com/Alexander-Garcia.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Alexander Garcia&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/LumenYoung&quot;&gt;&lt;img src=&quot;https://github.com/LumenYoung.png&quot; width=&quot;60px&quot; alt=&quot;User avatar: Lumen Yang&quot; /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;If &lt;i&gt;you&lt;/i&gt; love CodeCompanion and use it in your workflow, please consider &lt;a href=&quot;https://github.com/sponsors/olimorris&quot;&gt;sponsoring me&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;&lt;span&gt;‚ú®&lt;/span&gt; Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;üí¨&lt;/span&gt; &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;Copilot Chat&lt;/a&gt; meets &lt;a href=&quot;https://zed.dev/blog/zed-ai&quot;&gt;Zed AI&lt;/a&gt;, in Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üîå&lt;/span&gt; Support for LLMs from Anthropic, Copilot, GitHub Models, DeepSeek, Gemini, Mistral AI, Novita, Ollama, OpenAI, Azure OpenAI, HuggingFace and xAI (or &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/adapters.html&quot;&gt;bring your own&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;ü§ñ&lt;/span&gt; Support for &lt;a href=&quot;https://agentclientprotocol.com&quot;&gt;Agent Client Protocol&lt;/a&gt;, enabling coding with agents like &lt;a href=&quot;https://docs.anthropic.com/en/docs/claude-code/overview&quot;&gt;Claude Code&lt;/a&gt; and &lt;a href=&quot;https://github.com/google-gemini/gemini-cli&quot;&gt;Gemini CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;ü´∂&lt;/span&gt; User contributed and supported &lt;a href=&quot;https://codecompanion.olimorris.dev/configuration/adapters#community-adapters&quot;&gt;adapters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üöÄ&lt;/span&gt; &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/inline-assistant.html&quot;&gt;Inline transformations&lt;/a&gt;, code creation and refactoring&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üé®&lt;/span&gt; &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/variables.html&quot;&gt;Variables&lt;/a&gt;, &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/slash-commands.html&quot;&gt;Slash Commands&lt;/a&gt;, &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/tools.html&quot;&gt;Tools&lt;/a&gt; and &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/workflows.html&quot;&gt;Workflows&lt;/a&gt; to improve LLM output&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üß†&lt;/span&gt; Support for &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/memory.html&quot;&gt;memory&lt;/a&gt; files like &lt;code&gt;CLAUDE.md&lt;/code&gt;, &lt;code&gt;.cursor/rules&lt;/code&gt; and your own custom ones&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üîÆ&lt;/span&gt; Native &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/index.html#super-diff&quot;&gt;Super Diff&lt;/a&gt; for tracking agent edits&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;‚ú®&lt;/span&gt; Built-in &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/action-palette.html&quot;&gt;prompt library&lt;/a&gt; for common tasks like advice on LSP errors and code explanations&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üèó&lt;/span&gt; Create your own &lt;a href=&quot;https://codecompanion.olimorris.dev/extending/prompts.html&quot;&gt;custom prompts&lt;/a&gt;, Variables and Slash Commands&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üìö&lt;/span&gt; Have &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/introduction.html#quickly-accessing-a-chat-buffer&quot;&gt;multiple chats&lt;/a&gt; open at the same time&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üé®&lt;/span&gt; Support for &lt;a href=&quot;https://codecompanion.olimorris.dev/usage/chat-buffer/#images-vision&quot;&gt;vision and images&lt;/a&gt; as input&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üí™&lt;/span&gt; Async execution for fast performance&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h2&gt;&lt;span&gt;üì∏&lt;/span&gt; In Action&lt;/h2&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/aa109f1d-0ec9-4f08-bd9a-df99da03b9a4&quot;&gt;The Chat Buffer&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/3cc83544-2690-49b5-8be6-51e671db52ef&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/362b7cfd-e794-4d9c-9a74-90d5e2a87a32&quot;&gt;Tools + Agentic Workflows&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/59efa262-e768-4f36-9901-9d02b018fcf0&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h3&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/dcddcb85-cba0-4017-9723-6e6b7f080fee&quot;&gt;Inline Assistant&lt;/a&gt;&lt;/h3&gt; 
 &lt;video controls muted src=&quot;https://github.com/user-attachments/assets/11a42705-d9de-4eb5-a9ab-c8a2772fb4d4&quot;&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;&lt;span&gt;üöÄ&lt;/span&gt; Getting Started&lt;/h2&gt; 
&lt;p&gt;Everything you need to know about CodeCompanion (installation, configuration and usage) is within the &lt;a href=&quot;https://codecompanion.olimorris.dev&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üß∞&lt;/span&gt; Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Before raising an &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/issues&quot;&gt;issue&lt;/a&gt;, there are a number of steps you can take to troubleshoot a problem:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Checkhealth&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;:checkhealth codecompanion&lt;/code&gt; and check all dependencies are installed correctly. Also take note of the log file path.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Turn on logging&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Update your config and turn debug logging on:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- lazy.nvim
{
  &quot;olimorris/codecompanion.nvim&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;nvim-treesitter/nvim-treesitter&quot;,
  },
  opts = {
    -- NOTE: The log_level is in `opts.opts`
    opts = {
      log_level = &quot;DEBUG&quot;, -- or &quot;TRACE&quot;
    },
  },
},

-- Other package managers
require(&quot;codecompanion&quot;).setup({
  opts = {
    log_level = &quot;DEBUG&quot;, -- or &quot;TRACE&quot;
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and inspect the log file as per the location from the checkhealth command.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try with a &lt;code&gt;minimal.lua&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A large proportion of issues which are raised in Neovim plugins are to do with a user&#39;s own config. That&#39;s why I always ask users to fill in a &lt;code&gt;minimal.lua&lt;/code&gt; file when they raise an issue. We can rule out their config being an issue and it allows me to recreate the problem.&lt;/p&gt; 
&lt;p&gt;For this purpose, I have included a &lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim/raw/main/minimal.lua&quot;&gt;minimal.lua&lt;/a&gt; file in the repository for you to test out if you&#39;re facing issues. Simply copy the file, edit it and run neovim with &lt;code&gt;nvim --clean -u minimal.lua&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;h2&gt;&lt;span&gt;üéÅ&lt;/span&gt; Contributing&lt;/h2&gt; 
&lt;p&gt;I am open to contributions but they will be implemented at my discretion. Feel free to open up a discussion before embarking on a PR and please read the &lt;a href=&quot;https://raw.githubusercontent.com/olimorris/codecompanion.nvim/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üëè&lt;/span&gt; Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc&quot;&gt;Steven Arcangeli&lt;/a&gt; for his genius creation of the chat buffer and his feedback early on&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/piersolenski/wtf.nvim&quot;&gt;Wtf.nvim&lt;/a&gt; for the LSP assistant action&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CopilotC-Nvim/CopilotChat.nvim&quot;&gt;CopilotChat.nvim&lt;/a&gt; for the rendering and usability of the chat buffer&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;Aerial.nvim&lt;/a&gt; for the Tree-sitter parsing which inspired the symbols Slash Command&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Saghen&quot;&gt;Saghen&lt;/a&gt; for the fantastic docs inspiration from &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; and continued PRs to the project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/catwell&quot;&gt;Catwell&lt;/a&gt; for the &lt;a href=&quot;https://github.com/catwell/cw-lua/raw/master/deque/deque.lua&quot;&gt;queue&lt;/a&gt; inspiration that I use to stack agents and tools&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ravitemer&quot;&gt;ravitemer&lt;/a&gt; for the fantastic extensions API&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Davidyz&quot;&gt;Davidyz&lt;/a&gt; for his continued, excellent contributions that keep CodeCompanion going&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/conradirwin&quot;&gt;Conrad Irwin&lt;/a&gt;, &lt;a href=&quot;https://github.com/agu-z&quot;&gt;Agus Zubiaga&lt;/a&gt; and Morgan Krey from &lt;a href=&quot;https://github.com/zed-industries&quot;&gt;Zed Industries&lt;/a&gt; for their support in implementing &lt;a href=&quot;https://agentclientprotocol.com&quot;&gt;ACP&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>apache/apisix</title>
      <link>https://github.com/apache/apisix</link>
      <description>&lt;p&gt;The Cloud-Native API Gateway and AI Gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache APISIX API Gateway ÔΩú AI Gateway&lt;/h1&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/logos/apisix-white-bg.jpg&quot; alt=&quot;APISIX logo&quot; height=&quot;150px&quot; align=&quot;right&quot; /&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/actions/workflows/build.yml&quot;&gt;&lt;img src=&quot;https://github.com/apache/apisix/actions/workflows/build.yml/badge.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/apache/apisix/graphs/commit-activity&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/apache/apisix&quot; alt=&quot;Commit activity&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/resolution/apache/apisix.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/apache/apisix&quot; title=&quot;Percentage of issues still open&quot;&gt;&lt;img src=&quot;http://isitmaintained.com/badge/open/apache/apisix.svg?sanitize=true&quot; alt=&quot;Percentage of issues still open&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Slack/Join%20Apache%20APISIX?icon=slack&quot; alt=&quot;Slack&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Apache APISIX&lt;/strong&gt; is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; 
&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; 
&lt;p&gt;APISIX can serve as an &lt;strong&gt;&lt;a href=&quot;https://apisix.apache.org/ai-gateway/&quot;&gt;AI Gateway&lt;/a&gt;&lt;/strong&gt; through its flexible plugin system, providing AI proxying, load balancing for LLMs, retries and fallbacks, token-based rate limiting, and robust security to ensure the efficiency and reliability of AI agents. APISIX also provides the &lt;a href=&quot;https://apisix.apache.org/blog/2025/04/21/host-mcp-server-with-api-gateway/&quot;&gt;&lt;code&gt;mcp-bridge&lt;/code&gt;&lt;/a&gt; plugin to seamlessly convert stdio-based MCP servers to scalable HTTP SSE services.&lt;/p&gt; 
&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. It can also be used as a &lt;a href=&quot;https://github.com/apache/apisix-ingress-controller&quot;&gt;k8s ingress controller&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The technical architecture of Apache APISIX:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/apisix.png&quot; alt=&quot;Technical architecture of Apache APISIX&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.g2.com/products/apache-apisix/reviews&quot;&gt;Kindly Write a Review&lt;/a&gt; for APISIX in G2.&lt;/li&gt; 
 &lt;li&gt;Mailing List: Mail to &lt;a href=&quot;mailto:dev-subscribe@apisix.apache.org&quot;&gt;dev-subscribe@apisix.apache.org&lt;/a&gt;, follow the reply to subscribe to the mailing list.&lt;/li&gt; 
 &lt;li&gt;Slack Workspace - &lt;a href=&quot;https://apisix.apache.org/slack&quot;&gt;invitation link&lt;/a&gt; (Please open an &lt;a href=&quot;https://apisix.apache.org/docs/general/submit-issue&quot;&gt;issue&lt;/a&gt; if this link is expired), and then join the #apisix channel (Channels -&amp;gt; Browse channels -&amp;gt; search for &quot;apisix&quot;).&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ApacheAPISIX?style=social&quot; alt=&quot;Twitter Follow&quot; /&gt; - follow and interact with us using hashtag &lt;code&gt;#ApacheAPISIX&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;You can use APISIX API Gateway as a traffic entrance to process all business data, including dynamic routing, dynamic upstream, dynamic certificates, A/B testing, canary release, blue-green deployment, limit rate, defense against malicious attacks, metrics, monitoring alarms, service observability, service governance, etc.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;All platforms&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cloud-Native: Platform agnostic, No vendor lock-in, APISIX API Gateway can run from bare-metal to Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Supports ARM64: Don&#39;t worry about the lock-in of the infra technology.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi protocols&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/stream-proxy.md&quot;&gt;TCP/UDP Proxy&lt;/a&gt;: Dynamic TCP/UDP proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/dubbo-proxy.md&quot;&gt;Dubbo Proxy&lt;/a&gt;: Dynamic HTTP to Dubbo proxy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/mqtt-proxy.md&quot;&gt;Dynamic MQTT Proxy&lt;/a&gt;: Supports to load balance MQTT by &lt;code&gt;client_id&lt;/code&gt;, both support MQTT &lt;a href=&quot;http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&quot;&gt;3.1.*&lt;/a&gt;, &lt;a href=&quot;https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html&quot;&gt;5.0&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/grpc-proxy.md&quot;&gt;gRPC proxy&lt;/a&gt;: Proxying gRPC traffic.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-web.md&quot;&gt;gRPC Web Proxy&lt;/a&gt;: Proxying gRPC Web traffic to gRPC Service.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/grpc-transcode.md&quot;&gt;gRPC transcoding&lt;/a&gt;: Supports protocol transcoding so that clients can access your gRPC API by using HTTP/JSON.&lt;/li&gt; 
   &lt;li&gt;Proxy Websocket&lt;/li&gt; 
   &lt;li&gt;Proxy Protocol&lt;/li&gt; 
   &lt;li&gt;HTTP(S) Forward Proxy&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/certificate.md&quot;&gt;SSL&lt;/a&gt;: Dynamically load an SSL certificate&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/http3.md&quot;&gt;HTTP/3 with QUIC&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full Dynamic&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;Hot Updates And Hot Plugins&lt;/a&gt;: Continuously updates its configurations and plugins without restarts!&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-rewrite.md&quot;&gt;Proxy Rewrite&lt;/a&gt;: Support rewrite the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;schema&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; of the request before send to upstream.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/response-rewrite.md&quot;&gt;Response Rewrite&lt;/a&gt;: Set customized response status code, body and header to the client.&lt;/li&gt; 
   &lt;li&gt;Dynamic Load Balancing: Round-robin load balancing with weight.&lt;/li&gt; 
   &lt;li&gt;Hash-based Load Balancing: Load balance with consistent hashing sessions.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/tutorials/health-check.md&quot;&gt;Health Checks&lt;/a&gt;: Enable health check on the upstream node and will automatically filter unhealthy nodes during load balancing to ensure system stability.&lt;/li&gt; 
   &lt;li&gt;Circuit-Breaker: Intelligent tracking of unhealthy upstream services.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/proxy-mirror.md&quot;&gt;Proxy Mirror&lt;/a&gt;: Provides the ability to mirror client requests.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/traffic-split.md&quot;&gt;Traffic Split&lt;/a&gt;: Allows users to incrementally direct percentages of traffic between various upstreams.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fine-grained routing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-use-libradixtree-in-apisix&quot;&gt;Supports full path matching and prefix matching&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-nginx-builtin-variable&quot;&gt;Support all Nginx built-in variables as conditions for routing&lt;/a&gt;, so you can use &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, etc. as routing conditions to implement canary release, A/B testing, etc.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree#operator-list&quot;&gt;various operators as judgment conditions for routing&lt;/a&gt;, for example &lt;code&gt;{&quot;arg_age&quot;, &quot;&amp;gt;&quot;, 24}&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://github.com/iresty/lua-resty-radixtree/raw/master/t/filter-fun.t#L10&quot;&gt;custom route matching function&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;IPv6: Use IPv6 to match the route.&lt;/li&gt; 
   &lt;li&gt;Support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md#route&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#3-match-priority&quot;&gt;Support priority&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/batch-requests.md&quot;&gt;Support Batch Http Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/router-radixtree.md#how-to-filter-route-by-graphql-attributes&quot;&gt;Support filtering route by GraphQL attributes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Rich authentication &amp;amp; authorization support: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/key-auth.md&quot;&gt;key-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/jwt-auth.md&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/basic-auth.md&quot;&gt;basic-auth&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/wolf-rbac.md&quot;&gt;wolf-rbac&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casbin.md&quot;&gt;casbin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-keycloak.md&quot;&gt;keycloak&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/authz-casdoor.md&quot;&gt;casdoor&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/ip-restriction.md&quot;&gt;IP Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/referer-restriction.md&quot;&gt;Referer Whitelist/Blacklist&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openid-connect.md&quot;&gt;IdP&lt;/a&gt;: Support external Identity platforms, such as Auth0, okta, etc..&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-req.md&quot;&gt;Limit-req&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-count.md&quot;&gt;Limit-count&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/limit-conn.md&quot;&gt;Limit-concurrency&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Anti-ReDoS(Regular expression Denial of Service): Built-in policies to Anti ReDoS without configuration.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/cors.md&quot;&gt;CORS&lt;/a&gt; Enable CORS(Cross-origin resource sharing) for your API.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/uri-blocker.md&quot;&gt;URI Blocker&lt;/a&gt;: Block client request by URI.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/request-validation.md&quot;&gt;Request Validator&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/csrf.md&quot;&gt;CSRF&lt;/a&gt; Based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery#Double_Submit_Cookie&quot;&gt;&lt;code&gt;Double Submit Cookie&lt;/code&gt;&lt;/a&gt; way, protect your API from CSRF attacks.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OPS friendly&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Zipkin tracing: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/zipkin.md&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Open source APM: support &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking.md&quot;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Works with external service discovery: In addition to the built-in etcd, it also supports &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul.md&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/consul_kv.md&quot;&gt;Consul_kv&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/nacos.md&quot;&gt;Nacos&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/discovery/eureka.md&quot;&gt;Eureka&lt;/a&gt; and &lt;a href=&quot;https://github.com/api7/apisix-seed/raw/main/docs/en/latest/zookeeper.md&quot;&gt;Zookeeper (CP)&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Monitoring And Metrics: &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/prometheus.md&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Clustering: APISIX nodes are stateless, creates clustering of the configuration center, please refer to &lt;a href=&quot;https://etcd.io/docs/v3.5/op-guide/clustering/&quot;&gt;etcd Clustering Guide&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;High availability: Support to configure multiple etcd addresses in the same cluster.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Version Control: Supports rollbacks of operations.&lt;/li&gt; 
   &lt;li&gt;CLI: start\stop\reload APISIX through the command line.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/deployment-modes.md#standalone&quot;&gt;Standalone&lt;/a&gt;: Supports to load route rules from local YAML file, it is more friendly such as under the kubernetes(k8s).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/global-rule.md&quot;&gt;Global Rule&lt;/a&gt;: Allows to run any plugin for all request, eg: limit rate, IP filter etc.&lt;/li&gt; 
   &lt;li&gt;High performance: The single-core QPS reaches 18k with an average delay of fewer than 0.2 milliseconds.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/fault-injection.md&quot;&gt;Fault Injection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt;: Using the REST Admin API to control Apache APISIX, which only allows 127.0.0.1 access by default, you can modify the &lt;code&gt;allow_admin&lt;/code&gt; field in &lt;code&gt;conf/config.yaml&lt;/code&gt; to specify a list of IPs that are allowed to call the Admin API. Also, note that the Admin API uses key auth to verify the identity of the caller.&lt;/li&gt; 
   &lt;li&gt;External Loggers: Export access logs to external log management tools. (&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/http-logger.md&quot;&gt;HTTP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tcp-logger.md&quot;&gt;TCP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/kafka-logger.md&quot;&gt;Kafka Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/udp-logger.md&quot;&gt;UDP Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/rocketmq-logger.md&quot;&gt;RocketMQ Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/skywalking-logger.md&quot;&gt;SkyWalking Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/sls-logger.md&quot;&gt;Alibaba Cloud Logging(SLS)&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/google-cloud-logging.md&quot;&gt;Google Cloud Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/splunk-hec-logging.md&quot;&gt;Splunk HEC Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/file-logger.md&quot;&gt;File Logger&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/loggly.md&quot;&gt;SolarWinds Loggly Logging&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/tencent-cloud-cls.md&quot;&gt;TencentCloud CLS&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/clickhouse-logger.md&quot;&gt;ClickHouse&lt;/a&gt;: push logs to ClickHouse.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/elasticsearch-logger.md&quot;&gt;Elasticsearch&lt;/a&gt;: push logs to Elasticsearch.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/datadog.md&quot;&gt;Datadog&lt;/a&gt;: push custom metrics to the DogStatsD server, comes bundled with &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent&lt;/a&gt;, over the UDP protocol. DogStatsD basically is an implementation of StatsD protocol which collects the custom metrics for Apache APISIX agent, aggregates it into a single data point and sends it to the configured Datadog server.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix-helm-chart&quot;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;: Support secret management solution for accessing secrets from Vault secure storage backed in a low trust environment. Currently, RS256 keys (public-private key pairs) or secret keys can be linked from vault in jwt-auth authentication plugin using &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/secret.md&quot;&gt;APISIX Secret&lt;/a&gt; resource.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly scalable&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;Custom plugins&lt;/a&gt;: Allows hooking of common phases, such as &lt;code&gt;rewrite&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;header filter&lt;/code&gt;, &lt;code&gt;body filter&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt;, also allows to hook the &lt;code&gt;balancer&lt;/code&gt; stage.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/external-plugin.md&quot;&gt;Plugin can be written in Java/Go/Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/wasm.md&quot;&gt;Plugin can be written with Proxy Wasm SDK&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Custom load balancing algorithms: You can use custom load balancing algorithms during the &lt;code&gt;balancer&lt;/code&gt; phase.&lt;/li&gt; 
   &lt;li&gt;Custom routing: Support users to implement routing algorithms themselves.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Language support&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Apache APISIX is a multi-language gateway for plugin development and provides support via &lt;code&gt;RPC&lt;/code&gt; and &lt;code&gt;Wasm&lt;/code&gt;. &lt;img src=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/assets/images/external-plugin.png&quot; alt=&quot;Multi Language Support into Apache APISIX&quot; /&gt;&lt;/li&gt; 
   &lt;li&gt;The RPC way, is the current way. Developers can choose the language according to their needs and after starting an independent process with the RPC, it exchanges data with APISIX through local RPC communication. Till this moment, APISIX has support for &lt;a href=&quot;https://github.com/apache/apisix-java-plugin-runner&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-go-plugin-runner&quot;&gt;Golang&lt;/a&gt;, &lt;a href=&quot;https://github.com/apache/apisix-python-plugin-runner&quot;&gt;Python&lt;/a&gt; and Node.js.&lt;/li&gt; 
   &lt;li&gt;The Wasm or WebAssembly, is an experimental way. APISIX can load and run Wasm bytecode via APISIX &lt;a href=&quot;https://github.com/apache/apisix/raw/master/docs/en/latest/wasm.md&quot;&gt;wasm plugin&lt;/a&gt; written with the &lt;a href=&quot;https://github.com/proxy-wasm/spec#sdks&quot;&gt;Proxy Wasm SDK&lt;/a&gt;. Developers only need to write the code according to the SDK and then compile it into a Wasm bytecode that runs on Wasm VM with APISIX.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/serverless.md&quot;&gt;Lua functions&lt;/a&gt;: Invoke functions in each phase in APISIX.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/aws-lambda.md&quot;&gt;AWS Lambda&lt;/a&gt;: Integration with AWS Lambda function as a dynamic upstream to proxy all requests for a particular URI to the AWS API gateway endpoint. Supports authorization via api key and AWS IAM access secret.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/azure-functions.md&quot;&gt;Azure Functions&lt;/a&gt;: Seamless integration with Azure Serverless Function as a dynamic upstream to proxy all requests for a particular URI to the Microsoft Azure cloud.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins/openwhisk.md&quot;&gt;Apache OpenWhisk&lt;/a&gt;: Seamless integration with Apache OpenWhisk as a dynamic upstream to proxy all requests for a particular URI to your own OpenWhisk cluster.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;Please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/installation-guide/&quot;&gt;install documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Getting started&lt;/p&gt; &lt;p&gt;The getting started guide is a great way to learn the basics of APISIX. Just follow the steps in &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Further, you can follow the documentation to try more &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugins&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Admin API&lt;/p&gt; &lt;p&gt;Apache APISIX provides &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/admin-api.md&quot;&gt;REST Admin API&lt;/a&gt; to dynamically control the Apache APISIX cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Plugin development&lt;/p&gt; &lt;p&gt;You can refer to &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/plugin-develop.md&quot;&gt;plugin development guide&lt;/a&gt;, and sample plugin &lt;code&gt;example-plugin&lt;/code&gt;&#39;s code implementation. Reading &lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/docs/en/latest/terminology/plugin.md&quot;&gt;plugin concept&lt;/a&gt; would help you learn more about the plugin.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For more documents, please refer to &lt;a href=&quot;https://apisix.apache.org/docs/apisix/getting-started/&quot;&gt;Apache APISIX Documentation site&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Using AWS&#39;s eight-core server, APISIX&#39;s QPS reaches 140,000 with a latency of only 0.2 ms.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apache/apisix/master/benchmark/run.sh&quot;&gt;Benchmark script&lt;/a&gt; has been open sourced, welcome to try and contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/blog/2022/06/07/installation-performance-test-of-apigateway-apisix-on-aws-graviton3&quot;&gt;APISIX also works perfectly in AWS graviton3 C7g.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;User Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.efactory-project.eu/post/api-security-gateway-using-apisix-in-the-efactory-platform&quot;&gt;European eFactory Platform: API Security Gateway ‚Äì Using APISIX in the eFactory Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/COPRS/infrastructure/wiki/Networking-trade-off&quot;&gt;Copernicus Reference System Software&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apisix.apache.org/blog/tags/case-studies/&quot;&gt;More Stories&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who Uses APISIX API Gateway?&lt;/h2&gt; 
&lt;p&gt;A wide variety of companies and organizations use APISIX API Gateway for research, production and commercial product, below are some of them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Airwallex&lt;/li&gt; 
 &lt;li&gt;Bilibili&lt;/li&gt; 
 &lt;li&gt;CVTE&lt;/li&gt; 
 &lt;li&gt;European eFactory Platform&lt;/li&gt; 
 &lt;li&gt;European Copernicus Reference System&lt;/li&gt; 
 &lt;li&gt;Geely&lt;/li&gt; 
 &lt;li&gt;HONOR&lt;/li&gt; 
 &lt;li&gt;Horizon Robotics&lt;/li&gt; 
 &lt;li&gt;iQIYI&lt;/li&gt; 
 &lt;li&gt;Lenovo&lt;/li&gt; 
 &lt;li&gt;NASA JPL&lt;/li&gt; 
 &lt;li&gt;Nayuki&lt;/li&gt; 
 &lt;li&gt;OPPO&lt;/li&gt; 
 &lt;li&gt;QingCloud&lt;/li&gt; 
 &lt;li&gt;Swisscom&lt;/li&gt; 
 &lt;li&gt;Tencent Game&lt;/li&gt; 
 &lt;li&gt;Travelsky&lt;/li&gt; 
 &lt;li&gt;vivo&lt;/li&gt; 
 &lt;li&gt;Sina Weibo&lt;/li&gt; 
 &lt;li&gt;WeCity&lt;/li&gt; 
 &lt;li&gt;WPS&lt;/li&gt; 
 &lt;li&gt;XPENG&lt;/li&gt; 
 &lt;li&gt;Zoom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/logos/apache-apisix.png&quot;&gt;Apache APISIX logo(PNG)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://apache.org/logos/#apisix&quot;&gt;Apache APISIX logo source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Inspired by Kong and Orange.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/apisix/tree/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>catppuccin/nvim</title>
      <link>https://github.com/catppuccin/nvim</link>
      <description>&lt;p&gt;üç® Soothing pastel theme for (Neo)vim&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&quot; width=&quot;100&quot; alt=&quot;Logo&quot; /&gt;&lt;br /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot; /&gt; Catppuccin for &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;(Neo)&lt;/a&gt;&lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&quot; height=&quot;30&quot; width=&quot;0px&quot; /&gt; &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=b7bdf8&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=f5a97f&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/catppuccin/nvim/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/catppuccin/nvim?colorA=363a4f&amp;amp;colorB=a6da95&amp;amp;style=for-the-badge&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213472445-091e54fb-091f-4448-a631-fa6b2ba7d8a5.png&quot; /&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; This port of &lt;a href=&quot;https://github.com/catppuccin/&quot;&gt;Catppuccin&lt;/a&gt; is special because it was the first one and the one that originated the project itself. Given this, it&#39;s important to acknowledge that it all didn&#39;t come to be what it is now out of nowhere. So, if you are interested in knowing more about the initial stages of the theme, you can find it under the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/v0.1&quot;&gt;v0.1&lt;/a&gt; tag. &lt;/p&gt; 
&lt;h2&gt;Previews&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;üåª Latte&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473391-603bdc68-68f4-4877-a15a-b469040928b5.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ü™¥ Frapp√©&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473368-16931b70-fd84-4a89-a698-1b1bca1f82de.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;üå∫ Macchiato&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213473285-7bd858be-6947-4d9e-8c01-2573cbc7e76c.png&quot; /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;üåø Mocha&lt;/summary&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/56817415/213471997-34837219-88cc-4db2-baca-e25813a89789.png&quot; /&gt; 
&lt;/details&gt; 
&lt;!-- panvimdoc-ignore-end --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports both Vim and Neovim (requires &lt;a href=&quot;https://github.com/neovim/neovim/&quot;&gt;neovim&lt;/a&gt; &amp;gt;= 0.8 or &lt;a href=&quot;https://github.com/vim/vim&quot;&gt;vim&lt;/a&gt; &amp;gt;= 9 compiled with &lt;a href=&quot;https://github.com/lua/lua&quot;&gt;lua&lt;/a&gt; &amp;gt;= 5.1)&lt;/li&gt; 
 &lt;li&gt;Highly configurable with 4 different flavours and &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;the ability to create your own!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/catppuccin/nvim#Compile&quot;&gt;Compiled&lt;/a&gt; configuration for &lt;a href=&quot;https://www.reddit.com/r/neovim/comments/xxfpt3/catppuccinnvim_now_startup_in_1ms/&quot;&gt;fast startup time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Integrations with lsp, treesitter and &lt;a href=&quot;https://github.com/catppuccin/nvim#integrations&quot;&gt;a bunch of plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://github.com/catppuccin/catppuccin&quot;&gt;many other applications&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{ &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot;, priority = 1000 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-deps.md&quot;&gt;mini.deps&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add({ source = &quot;catppuccin/nvim&quot;, name = &quot;catppuccin&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use { &quot;catppuccin/nvim&quot;, as = &quot;catppuccin&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;catppuccin/nvim&#39;, { &#39;as&#39;: &#39;catppuccin&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;colorscheme catppuccin &quot; catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;There is no need to call &lt;code&gt;setup&lt;/code&gt; if you don&#39;t want to change the default options and settings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    flavour = &quot;auto&quot;, -- latte, frappe, macchiato, mocha
    background = { -- :h background
        light = &quot;latte&quot;,
        dark = &quot;mocha&quot;,
    },
    transparent_background = false, -- disables setting the background color.
    float = {
        transparent = false, -- enable transparent floating windows
        solid = false, -- use solid styling for floating windows, see |winborder|
    },
    show_end_of_buffer = false, -- shows the &#39;~&#39; characters after the end of buffers
    term_colors = false, -- sets terminal colors (e.g. `g:terminal_color_0`)
    dim_inactive = {
        enabled = false, -- dims the background color of inactive window
        shade = &quot;dark&quot;,
        percentage = 0.15, -- percentage of the shade to apply to the inactive window
    },
    no_italic = false, -- Force no italic
    no_bold = false, -- Force no bold
    no_underline = false, -- Force no underline
    styles = { -- Handles the styles of general hi groups (see `:h highlight-args`):
        comments = { &quot;italic&quot; }, -- Change the style of comments
        conditionals = { &quot;italic&quot; },
        loops = {},
        functions = {},
        keywords = {},
        strings = {},
        variables = {},
        numbers = {},
        booleans = {},
        properties = {},
        types = {},
        operators = {},
        -- miscs = {}, -- Uncomment to turn off hard-coded styles
    },
    color_overrides = {},
    custom_highlights = {},
    default_integrations = true,
    auto_integrations = false,
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
        -- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim#integrations)
    },
})

-- setup must be called before loading
vim.cmd.colorscheme &quot;catppuccin&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;h3&gt;Getting colors&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local latte = require(&quot;catppuccin.palettes&quot;).get_palette &quot;latte&quot;
local frappe = require(&quot;catppuccin.palettes&quot;).get_palette &quot;frappe&quot;
local macchiato = require(&quot;catppuccin.palettes&quot;).get_palette &quot;macchiato&quot;
local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns a table where the key is the name of the color and the value is the hex code.&lt;/p&gt; 
&lt;h3&gt;Overwriting colors&lt;/h3&gt; 
&lt;p&gt;Colors can be overwritten using &lt;code&gt;color_overrides&lt;/code&gt;, see &lt;a href=&quot;https://github.com/catppuccin/nvim/discussions/323&quot;&gt;https://github.com/catppuccin/nvim/discussions/323&lt;/a&gt; for inspiration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    color_overrides = {
        all = {
            text = &quot;#ffffff&quot;,
        },
        latte = {
            base = &quot;#ff0000&quot;,
            mantle = &quot;#242424&quot;,
            crust = &quot;#474747&quot;,
        },
        frappe = {},
        macchiato = {},
        mocha = {},
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Overwriting highlight groups&lt;/h3&gt; 
&lt;p&gt;Global highlight groups can be overwritten, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    custom_highlights = function(colors)
        return {
            Comment = { fg = colors.flamingo },
            TabLineSel = { bg = colors.pink },
            CmpBorder = { fg = colors.surface2 },
            Pmenu = { bg = colors.none },
        }
    end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Highlight groups per flavour can also be overwritten, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup {
    highlight_overrides = {
        all = function(colors)
            return {
                NvimTreeNormal = { fg = colors.none },
                CmpBorder = { fg = &quot;#3e4145&quot; },
            }
        end,
        latte = function(latte)
            return {
                Normal = { fg = latte.base },
            }
        end,
        frappe = function(frappe)
            return {
                [&quot;@comment&quot;] = { fg = frappe.surface2, style = { &quot;italic&quot; } },
            }
        end,
        macchiato = function(macchiato)
            return {
                LineNr = { fg = macchiato.overlay1 },
            }
        end,
        mocha = function(mocha)
            return {
                Comment = { fg = mocha.flamingo },
            }
        end,
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;Catppuccin provides theme support for other plugins in the Neovim ecosystem and extended Neovim functionality through &lt;em&gt;integrations&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;To enable/disable an integration you just need to set it to true/false, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        notify = false,
        mini = {
            enabled = true,
            indentscope_color = &quot;&quot;,
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some integrations are enabled by default, you can control this behaviour with &lt;code&gt;default_integrations&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    default_integrations = false,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you use &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; as your package manager, you can use the &lt;code&gt;auto_integrations&lt;/code&gt; option to let catppuccin automatically detect installed plugins and enable their respective integrations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({
    auto_integrations = true,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Below is a list of supported plugins and their corresponding integration module.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] If you&#39;d like to see the full list of highlight groups modified by Catppuccin, see the &lt;a href=&quot;https://github.com/catppuccin/nvim/tree/main/lua/catppuccin/groups/integrations&quot;&gt;&lt;code&gt;lua/catppuccin/groups/integrations/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;b&gt;Plugin&lt;/b&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;b&gt;Default&lt;/b&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/aerial.nvim&quot;&gt;aerial.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;aerial = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- aerial.nvim --&gt; 
  &lt;!-- alpha.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/goolord/alpha-nvim&quot;&gt;alpha-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;alpha = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- alpha.nvim --&gt; 
  &lt;!-- barbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/romgrk/barbar.nvim&quot;&gt;barbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbar = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbar.nvim --&gt; 
  &lt;!-- barbecue.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/utilyre/barbecue.nvim&quot;&gt;barbecue.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;barbecue = {
    dim_dirname = true, -- directory name is dimmed by default
    bold_basename = true,
    dim_context = false,
    alt_background = false,
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;barbecue&quot;).setup {
  theme = &quot;catppuccin&quot;, -- catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- barbecue.nvim --&gt; 
  &lt;!-- beacon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/DanilaMihailov/beacon.nvim&quot;&gt;beacon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;beacon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- beacon.nvim --&gt; 
  &lt;!-- blink.cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Saghen/blink.cmp&quot;&gt;blink.cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;blink_cmp = {
    style = &#39;bordered&#39;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- blink.cmp --&gt; 
  &lt;!-- bufferline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/akinsho/bufferline.nvim&quot;&gt;bufferline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your bufferline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!NOTE] bufferline needs to be loaded after setting up Catppuccin or it will highlight incorrectly&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use &quot;akinsho/bufferline.nvim&quot; {
  after = &quot;catppuccin&quot;,
  config = function()
    require(&quot;bufferline&quot;).setup {
      highlights = require(&quot;catppuccin.special.bufferline&quot;).get_theme()
    }
  end
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Configurations are self-explanatory, see &lt;code&gt;:h bufferline-highlights&lt;/code&gt; for detailed explanations:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local mocha = require(&quot;catppuccin.palettes&quot;).get_palette &quot;mocha&quot;
bufferline.setup {
    highlights = require(&quot;catppuccin.special.bufferline&quot;).get_theme {
        styles = { &quot;italic&quot;, &quot;bold&quot; },
        custom = {
            all = {
                fill = { bg = &quot;#000000&quot; },
            },
            mocha = {
                background = { fg = mocha.text },
            },
            latte = {
                background = { fg = &quot;#000000&quot; },
            },
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- bufferline.nvim --&gt; 
  &lt;!-- buffon.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/francescarpi/buffon.nvim&quot;&gt;buffon.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;buffon = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- buffon.nvim --&gt; 
  &lt;!-- coc.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot;&gt;coc.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; enables this integration.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;coc_nvim = true,
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Note] coc.nvim by default link to native lsp highlight groups so &lt;code&gt;lsp_styles&lt;/code&gt; options will also apply to coc&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;p&gt;In the nested tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_styles = {
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- coc.nvim --&gt; 
  &lt;!-- colorful-winsep.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-zh/colorful-winsep.nvim&quot;&gt;colorful-winsep.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;colorful_winsep = {
    enabled = false,
    color = &quot;red&quot;,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- colorful_winsep.nvim --&gt; 
  &lt;!-- dashboard-nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/dashboard-nvim&quot;&gt;dashboard-nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dashboard = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dashboard-nvim --&gt; 
  &lt;!-- diffview.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;diffview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- diffview.nvim --&gt; 
  &lt;!-- dropbar.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/Bekaboo/dropbar.nvim&quot;&gt;dropbar.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dropbar = {
    enabled = false,
    color_mode = false, -- enable color for kind&#39;s texts, not just kind&#39;s icons
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- dropbar.nvim --&gt; 
  &lt;!-- feline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/freddiehaddad/feline.nvim/&quot;&gt;feline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;  
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Update your Feline config to use the Catppuccin components:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local ctp_feline = require(&#39;catppuccin.special.feline&#39;)

ctp_feline.setup()

require(&quot;feline&quot;).setup({
    components = ctp_feline.get_statusline(),
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;Notice that calling &lt;code&gt;setup()&lt;/code&gt; is optional. You may pass a lua table in order to change assets, settings and the colors per vim mode.&lt;/p&gt; 
     &lt;p&gt;Here are the defaults:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local clrs = require(&quot;catppuccin.palettes&quot;).get_palette()
local ctp_feline = require(&#39;catppuccin.special.feline&#39;)
local U = require &quot;catppuccin.utils.colors&quot;

ctp_feline.setup({
    assets = {
        left_separator = &quot;ÓÇ∂&quot;,
        right_separator = &quot;ÓÇ¥&quot;,
        mode_icon = &quot;ÔÜÆ&quot;,
        dir = &quot;Û∞âñ&quot;,
        file = &quot;Û∞àô&quot;,
        lsp = {
            server = &quot;Û∞Ö°&quot;,
            error = &quot;ÔÑë&quot;,
            warning = &quot;ÔÑë&quot;,
            info = &quot;ÔÑë&quot;,
            hint = &quot;ÔÑë&quot;,
        },
        git = {
            branch = &quot;Óú•&quot;,
            added = &quot;ÔÅï&quot;,
            changed = &quot;ÔÖÑ&quot;,
            removed = &quot;ÔÅñ&quot;,
        },
    },
    sett = {
        text = U.vary_color({ latte = latte.base }, clrs.surface0),
        bkg = U.vary_color({ latte = latte.crust }, clrs.surface0),
        diffs = clrs.mauve,
        extras = clrs.overlay1,
        curr_file = clrs.maroon,
        curr_dir = clrs.flamingo,
        show_modified = false, -- show if the file has been modified
        show_lazy_updates = false -- show the count of updatable plugins from lazy.nvim
                                  -- need to set checker.enabled = true in lazy.nvim first
                                  -- the icon is set in ui.icons.plugin in lazy.nvim
    },
    mode_colors = {
        [&quot;n&quot;] = { &quot;NORMAL&quot;, clrs.lavender },
        [&quot;no&quot;] = { &quot;N-PENDING&quot;, clrs.lavender },
        [&quot;i&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;ic&quot;] = { &quot;INSERT&quot;, clrs.green },
        [&quot;t&quot;] = { &quot;TERMINAL&quot;, clrs.green },
        [&quot;v&quot;] = { &quot;VISUAL&quot;, clrs.flamingo },
        [&quot;V&quot;] = { &quot;V-LINE&quot;, clrs.flamingo },
        [&quot;&quot;] = { &quot;V-BLOCK&quot;, clrs.flamingo },
        [&quot;R&quot;] = { &quot;REPLACE&quot;, clrs.maroon },
        [&quot;Rv&quot;] = { &quot;V-REPLACE&quot;, clrs.maroon },
        [&quot;s&quot;] = { &quot;SELECT&quot;, clrs.maroon },
        [&quot;S&quot;] = { &quot;S-LINE&quot;, clrs.maroon },
        [&quot;&quot;] = { &quot;S-BLOCK&quot;, clrs.maroon },
        [&quot;c&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;cv&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;ce&quot;] = { &quot;COMMAND&quot;, clrs.peach },
        [&quot;r&quot;] = { &quot;PROMPT&quot;, clrs.teal },
        [&quot;rm&quot;] = { &quot;MORE&quot;, clrs.teal },
        [&quot;r?&quot;] = { &quot;CONFIRM&quot;, clrs.mauve },
        [&quot;!&quot;] = { &quot;SHELL&quot;, clrs.green },
    },
    view = {
        lsp = {
            progress = true, -- if true the status bar will display an lsp progress indicator
            name = false, -- if true the status bar will display the lsp servers name, otherwise it will display the text &quot;Lsp&quot;
            exclude_lsp_names = {}, -- lsp server names that should not be displayed when name is set to true
            separator = &quot;|&quot;, -- the separator used when there are multiple lsp servers
        },
    }
})
&lt;/code&gt;&lt;/pre&gt; 
     &lt;blockquote&gt; 
      &lt;p&gt;[!Warning] Currently feline &lt;a href=&quot;https://github.com/feline-nvim/feline.nvim/issues/302&quot;&gt;doesn&#39;t officially support custom themes&lt;/a&gt;. In order for &lt;code&gt;:colorscheme catppuccin-&amp;lt;flavour&amp;gt;&lt;/code&gt; to work you could add this autocmd as a workaround:&lt;/p&gt; 
     &lt;/blockquote&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;ColorScheme&quot;, {
    pattern = &quot;*&quot;,
    callback = function()
        package.loaded[&quot;feline&quot;] = nil
        package.loaded[&quot;catppuccin.special.feline&quot;] = nil
        require(&quot;feline&quot;).setup {
            components = require(&quot;catppuccin.special.feline&quot;).get_statusline(),
        }
    end,
})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- feline.nvim --&gt; 
  &lt;!-- fern.vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lambdalisue/fern.vim&quot;&gt;fern.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fern = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fern.vim --&gt; 
  &lt;!-- fidget.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/j-hui/fidget.nvim&quot;&gt;fidget.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fidget = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; Set `notification.window.winblend` to `0`: 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fidget&quot;).setup {
    notification = {
        window = {
            winblend = 0,
        },
    }
    -- ... the rest of your fidget config
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fidget.nvim --&gt; 
  &lt;!-- flash.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/flash.nvim&quot;&gt;flash.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;flash = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- flash.nvim --&gt; 
    &lt;!-- fzf-lua --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- fzf-lua --&gt; 
  &lt;!-- gitgraph.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/isakbm/gitgraph.nvim&quot;&gt;gitgraph.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgraph = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- gitgraph.nvim --&gt; 
    &lt;!-- gitsigns.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lewis6991/gitsigns.nvim&quot;&gt;gitsigns.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitsigns = {
  enabled = true,
  -- align with the transparent_background option by default
  transparent = false,
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- gitsigns.nvim --&gt; 
    &lt;!-- grug-far.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MagicDuck/grug-far.nvim&quot;&gt;grug-far.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;grug_far = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- grug-far.nvim --&gt; 
    &lt;!-- harpoon --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ThePrimeagen/harpoon&quot;&gt;harpoon&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;harpoon = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- harpoon --&gt; 
    &lt;!-- headlines.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/headlines.nvim&quot;&gt;headlines.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;headlines = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- headlines.nvim --&gt; 
    &lt;!-- hop.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hop = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- hop.nvim --&gt; 
    &lt;!-- indent-blankline.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim&quot;&gt;indent-blankline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;indent_blankline = {
    enabled = true,
    scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
    colored_indent_levels = false,
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;&lt;code&gt;colored_indent_levels&lt;/code&gt; enables char highlights per indent level. Follow the instructions &lt;a href=&quot;https://github.com/lukas-reineke/indent-blankline.nvim#multiple-indent-colors&quot;&gt;here&lt;/a&gt; to set the latter up.&lt;/p&gt; 
    &lt;/details&gt; 
    &lt;!-- indent-blankline.nvim --&gt; 
    &lt;!-- leap.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/leap.nvim&quot;&gt;leap.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;leap = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- leap.nvim --&gt; 
    &lt;!-- lightline.vim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;lightline.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:lightline = {&#39;colorscheme&#39;: &#39;catppuccin&#39;}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lightline.vim --&gt; 
    &lt;!-- lightspeed.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/ggandor/lightspeed.nvim&quot;&gt;lightspeed.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lightspeed = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lightspeed.nvim --&gt; 
    &lt;!-- lir.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/tamago324/lir.nvim&quot;&gt;lir.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lir = {
    enabled = false,
    git_status = false
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- lir.nvim --&gt; 
    &lt;!-- lspsaga.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/glepnir/lspsaga.nvim&quot;&gt;lspsaga.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_saga = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;For custom Lsp Kind Icon and Color&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;lspsaga&quot;).setup {
    ui = {
        kind = require(&quot;catppuccin.groups.integrations.lsp_saga&quot;).custom_kind(),
    },
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;!-- lspsaga.nvim --&gt; 
  &lt;!-- lualine.nvim --&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lualine&#39;).setup {
    options = {
        theme = &quot;catppuccin&quot;
        -- ... the rest of your lualine config
    }
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; 
    &lt;!-- lualine.nvim --&gt; 
    &lt;!-- markview.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/OXY2DEV/markview.nvim&quot;&gt;markview.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;markview = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- markview.nvim --&gt; 
  &lt;!-- mason.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/williamboman/mason.nvim&quot;&gt;mason.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mason = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mason.nvim --&gt; 
  &lt;!-- mini.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/echasnovski/mini.nvim&quot;&gt;mini.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;mini = {
    enabled = true,
    indentscope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
},
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- mini.nvim --&gt; 
  &lt;!-- neo-tree.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neo-tree.nvim --&gt; 
  &lt;!-- neogit --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/NeogitOrg/neogit&quot;&gt;neogit&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neogit = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neogit --&gt; 
  &lt;!-- neotest --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-neotest/neotest&quot;&gt;neotest&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;neotest = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- neotest --&gt; 
  &lt;!-- noice.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/noice.nvim&quot;&gt;noice.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;noice = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- noice.nvim --&gt; 
  &lt;!-- notifier.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vigoux/notifier.nvim&quot;&gt;notifier.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notifier = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- notifier.nvim --&gt; 
  &lt;!-- nvim-cmp --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;cmp = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-cmp --&gt; 
  &lt;!-- nvim-copilot-vim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/github/copilot.vim&quot;&gt;copilot.vim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;copilot_vim = false,
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-copilot-vim --&gt; 
  &lt;!-- nvim-dap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap = true
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special &lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local sign = vim.fn.sign_define

sign(&quot;DapBreakpoint&quot;, { text = &quot;‚óè&quot;, texthl = &quot;DapBreakpoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapBreakpointCondition&quot;, { text = &quot;‚óè&quot;, texthl = &quot;DapBreakpointCondition&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
sign(&quot;DapLogPoint&quot;, { text = &quot;‚óÜ&quot;, texthl = &quot;DapLogPoint&quot;, linehl = &quot;&quot;, numhl = &quot;&quot;})
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap --&gt; 
  &lt;!-- nvim-dap-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dap_ui = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-dap-ui --&gt; 
  &lt;!-- nvim-lspconfig --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_styles = {
    virtual_text = {
        errors = { &quot;italic&quot; },
        hints = { &quot;italic&quot; },
        warnings = { &quot;italic&quot; },
        information = { &quot;italic&quot; },
        ok = { &quot;italic&quot; },
    },
    underlines = {
        errors = { &quot;underline&quot; },
        hints = { &quot;underline&quot; },
        warnings = { &quot;underline&quot; },
        information = { &quot;underline&quot; },
        ok = { &quot;underline&quot; },
    },
    inlay_hints = {
        background = true,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;In the inners tables you can set the style for the diagnostics, both &lt;code&gt;virtual_text&lt;/code&gt; (what you see on the side) and &lt;code&gt;underlines&lt;/code&gt; (what points directly at the thing (e.g. an error)).&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-lspconfig --&gt; 
  &lt;!-- navic --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/SmiteshP/nvim-navic&quot;&gt;navic&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;navic = {
    enabled = false,
    custom_bg = &quot;NONE&quot;, -- &quot;lualine&quot; will set background to mantle
},

&lt;/code&gt;&lt;/pre&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- You NEED to enable highlight in nvim-navic setting or it won&#39;t work
require(&quot;nvim-navic&quot;).setup {
    highlight = true
}
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- navic --&gt; 
  &lt;!-- nvim-notify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;notify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-notify --&gt; 
  &lt;!-- nvim-surround --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kylechui/nvim-surround&quot;&gt;nvim-surround&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvim_surround = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-surround --&gt; 
  &lt;!-- nvim-tree.lua --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kyazdani42/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;nvimtree = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-tree.lua --&gt; 
  &lt;!-- nvim-treesitter-context --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;treesitter_context = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-treesitter-context --&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/nvim-ts-rainbow2&quot;&gt;nvim-ts-rainbow2&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow2 = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow2 --&gt; 
  &lt;!-- nvim-ts-rainbow --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/p00f/nvim-ts-rainbow&quot;&gt;nvim-ts-rainbow&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ts_rainbow = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ts-rainbow --&gt; 
  &lt;!-- nvim-ufo --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kevinhwang91/nvim-ufo&quot;&gt;nvim-ufo&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;ufo = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- nvim-ufo --&gt; 
  &lt;!-- nvim-window-picker --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/s1n7ax/nvim-window-picker&quot;&gt;nvim-window-picker&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;window_picker = false
&lt;/code&gt;&lt;/pre&gt; 
    &lt;!-- nvim-window-picker --&gt; 
    &lt;!-- octo.nvim --&gt; &lt;/td&gt;
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/pwntester/octo.nvim&quot;&gt;octo.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;octo = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- octo.nvim --&gt; 
  &lt;!-- overseer.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/stevearc/overseer.nvim&quot;&gt;overseer.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;overseer = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- overseer.nvim --&gt; 
  &lt;!-- pounce.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rlane/pounce.nvim&quot;&gt;pounce.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;pounce = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- pounce.nvim --&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/HiPhish/rainbow-delimiters.nvim&quot;&gt;rainbow-delimiters.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;rainbow_delimiters = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- rainbow-delimiters.nvim --&gt; 
  &lt;!-- reactive.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/rasulomaroff/reactive.nvim&quot;&gt;reactive.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;There&#39;re 2 available presets (&lt;code&gt;cursor&lt;/code&gt; and &lt;code&gt;cursorline&lt;/code&gt;) for every flavour.&lt;/p&gt; 
     &lt;p&gt;Here is how you can use them.&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;reactive&#39;).setup {
  load = { &#39;catppuccin-mocha-cursor&#39;, &#39;catppuccin-mocha-cursorline&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
     &lt;p&gt;To use another flavour just replace &lt;code&gt;mocha&lt;/code&gt; with the one you want to use.&lt;/p&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- reactive.nvim --&gt; 
  &lt;!-- render-markdown.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;render_markdown = true
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- render-markdown.nvim --&gt; 
  &lt;!-- snacks.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;snacks = {
    enabled = false,
    indent_scope_color = &quot;&quot;, -- catppuccin color (eg. `lavender`) Default: text
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- snacks.nvim --&gt; 
  &lt;!-- symbols-outline.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/simrat39/symbols-outline.nvim&quot;&gt;symbols-outline.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;blockquote&gt; 
     &lt;p&gt;[!NOTE] This plugin has been archived by the author, consider using &lt;a href=&quot;https://github.com/hedyhli/outline.nvim&quot;&gt;outline.nvim&lt;/a&gt;&lt;/p&gt; 
    &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;symbols_outline = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- symbols-outline.nvim --&gt; 
  &lt;!-- telekasten.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/renerocksai/telekasten.nvim&quot;&gt;telekasten.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telekasten = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telekasten.nvim --&gt; 
  &lt;!-- telescope.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;telescope.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;telescope = {
    enabled = true,
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- telescope.nvim --&gt; 
  &lt;!-- trouble.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/trouble.nvim&quot;&gt;trouble.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;lsp_trouble = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- trouble.nvim --&gt; 
  &lt;!-- vim-airline --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim-airline&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:airline_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-airline --&gt; 
  &lt;!-- vim-clap --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/liuchengxu/vim-clap&quot;&gt;vim-clap&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; 
    &lt;details&gt; 
     &lt;summary&gt;Special&lt;/summary&gt; 
     &lt;p&gt;Use this to set it up:&lt;/p&gt; 
     &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;let g:clap_theme = &#39;catppuccin&#39;
&lt;/code&gt;&lt;/pre&gt; 
    &lt;/details&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-clap --&gt; 
  &lt;!-- vim-dadbod-ui --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/kristijanhusak/vim-dadbod-ui&quot;&gt;vim-dadbod-ui&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;dadbod_ui = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-dadbod-ui --&gt; 
  &lt;!-- vim-gitgutter --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/airblade/vim-gitgutter&quot;&gt;vim-gitgutter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;gitgutter = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-gitgutter --&gt; 
  &lt;!-- vim-illuminate --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/RRethy/vim-illuminate&quot;&gt;vim-illuminate&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;illuminate = {
    enabled = true,
    lsp = false
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-illuminate --&gt; 
  &lt;!-- vim-sandwich --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;sandwich = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sandwich --&gt; 
  &lt;!-- vim-signify --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;vim-signify&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;signify = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-signify --&gt; 
  &lt;!-- vim-sneak --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;vim-sneak&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim_sneak = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vim-sneak --&gt; 
  &lt;!-- vimwiki --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vimwiki = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- vimwiki --&gt; 
  &lt;!-- which-key.nvim --&gt;  
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;which_key = false
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- which-key.nvim --&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Compile&lt;/h2&gt; 
&lt;p&gt;Catppuccin is a highly customizable and configurable colorscheme. This does however come at the cost of complexity and execution time. Catppuccin can pre compute the results of your configuration and store the results in a compiled Lua file. We use these pre-cached values to set it&#39;s highlights.&lt;/p&gt; 
&lt;p&gt;By default, Catppuccin writes the compiled results into the system&#39;s cache directory. See below if you&#39;d like to change the cache directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;catppuccin&quot;).setup({ -- Note: On windows we replace `/` with `\` by default
    compile_path = vim.fn.stdpath &quot;cache&quot; .. &quot;/catppuccin&quot;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üôã FAQ&lt;/h2&gt; 
&lt;h3&gt;Why do my Treesitter highlights look incorrect?&lt;/h3&gt; 
&lt;p&gt;Please disable &lt;code&gt;additional_vim_regex_highlighting&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-treesitter.configs&quot;).setup {
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = false
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Why aren&#39;t my colors the same as the previews?&lt;/h3&gt; 
&lt;p&gt;Catppuccin requires that your terminal supports true color, meaning that your terminal can display the full range of 16 million colors.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported: iterm2 (macOS), kitty, wezterm, alacritty, &lt;a href=&quot;https://github.com/termstandard/colors#truecolor-support-in-output-devices&quot;&gt;see full list...&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Unsupported: Terminal.app (macOS), Terminus, Terminology, &lt;a href=&quot;https://github.com/termstandard/colors#not-supporting-truecolor&quot;&gt;see full list...&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you use tmux, make sure to enable &lt;a href=&quot;https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6&quot;&gt;true color support&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/gyribeiro/4192af1aced7a1b555df06bd3781a722&quot;&gt;italic font support&lt;/a&gt;. This will prevent issues raised in &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/415&quot;&gt;#415&lt;/a&gt; and &lt;a href=&quot;https://github.com/catppuccin/nvim/issues/428&quot;&gt;#428&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üíù Thanks to&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Current Maintainer(s)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vollowx&quot;&gt;vollowx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/comfysage&quot;&gt;robin&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Previous Maintainer(s)&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pocco81&quot;&gt;Pocco81&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nullchilly&quot;&gt;nullchilly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mrtnvgr&quot;&gt;mrtnvgr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- panvimdoc-ignore-start --&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/footers/gray0_ctp_on_line.svg?sanitize=true&quot; /&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;Copyright ¬© 2021-present &lt;a href=&quot;https://github.com/catppuccin&quot; target=&quot;_blank&quot;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=363a4f&amp;amp;colorB=b7bdf8&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- panvimdoc-ignore-end --&gt;</description>
    </item>
    
    <item>
      <title>iDvel/rime-ice</title>
      <link>https://github.com/iDvel/rime-ice</link>
      <description>&lt;p&gt;Rime ÈÖçÁΩÆÔºöÈõæÂááÊãºÈü≥ | ÈïøÊúüÁª¥Êä§ÁöÑÁÆÄ‰ΩìËØçÂ∫ì&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ÈõæÂááÊãºÈü≥&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.txt&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPL--3.0--only-34ad9b&quot; alt=&quot;License: GPL 3.0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/iDvel/rime-ice?filter=!nightly&quot; alt=&quot;GitHub Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/iDvel/rime-ice/actions/workflows/release.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/iDvel/rime-ice/release.yml&quot; alt=&quot;GitHub Actions Workflow Status&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/stars/iDvel/rime-ice&quot; alt=&quot;GitHub Repo stars&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;ÂäüËÉΩÈΩêÂÖ®ÔºåËØçÂ∫ì‰ΩìÈ™åËâØÂ•ΩÔºåÈïøÊúüÊõ¥Êñ∞‰øÆËÆ¢„ÄÇ&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;a href=&quot;https://rime.im/&quot;&gt;Rime Input Method Engine / ‰∏≠Â∑ûÈüµËæìÂÖ•Ê≥ïÂºïÊìé&lt;/a&gt; ÊòØ‰∏Ä‰∏™Ë∑®Âπ≥Âè∞ÁöÑËæìÂÖ•Ê≥ïÁÆóÊ≥ïÊ°ÜÊû∂„ÄÇ&lt;/p&gt; 
&lt;p&gt;ËøôÈáåÊòØ Rime ÁöÑ‰∏Ä‰ªΩÈÖçÁΩÆ‰ªìÂ∫ìÔºåÁî®Êà∑ÈúÄË¶Å‰∏ãËΩΩÂêÑÂπ≥Âè∞ÂØπÂ∫îÁöÑÂâçÁ´ØÔºåÂπ∂Â∞ÜÊ≠§ÈÖçÁΩÆÂ∫îÁî®Âà∞ÈÖçÁΩÆÁõÆÂΩï„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÈõæÂááÊãºÈü≥Êèê‰æõ‰∫Ü‰∏ÄÂ•óÂºÄÁÆ±Âç≥Áî®ÁöÑÂÆåÊï¥ÈÖçÁΩÆÔºåÂåÖÂê´ËæìÂÖ•ÊñπÊ°àÔºàÂÖ®Êãº„ÄÅÂ∏∏ËßÅÂèåÊãºÔºâ„ÄÅÈïøÊúüÁª¥Êä§ÁöÑÂºÄÊ∫êËØçÂ∫ìÂèäÂêÑÈ°πÊâ©Â±ïÂäüËÉΩ„ÄÇ&lt;/p&gt; 
&lt;p&gt;ËØ¶ÁªÜ‰ªãÁªçÔºö&lt;a href=&quot;https://dvel.me/posts/rime-ice/&quot;&gt;Rime ÈÖçÁΩÆÔºöÈõæÂááÊãºÈü≥&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/133&quot;&gt;Â∏∏ËßÅÈóÆÈ¢ò&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/CHANGELOG.md&quot;&gt;Êõ¥Êñ∞Êó•Âøó&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;Âü∫Êú¨Â•óË∑Ø&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÁÆÄ‰Ωì | ÂÖ®Êãº | ÂèåÊãº&lt;/li&gt; 
 &lt;li&gt;‰∏ªË¶ÅÂäüËÉΩ 
  &lt;ul&gt; 
   &lt;li&gt;ËΩªÈáèÁöÑËã±ÊñáËæìÂÖ•ÔºåÊîØÊåÅ‰∏≠Ëã±Ê∑∑Ëæì&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://dvel.me/posts/make-rime-en-better/&quot;&gt;‰ºòÂåñËã±ÊñáËæìÂÖ•‰ΩìÈ™å&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;ÊãÜÂ≠óÂèçÊü•Ôºà&lt;kbd&gt;uU&lt;/kbd&gt;+ÊãºÈü≥ÔºâÔºåÊãÜÂ≠óËæÖÁ†ÅÔºàÊãºÈü≥+&lt;kbd&gt;`&lt;/kbd&gt;+ÊãÜÂ≠óËæÖÁ†ÅÔºâ&lt;/li&gt; 
   &lt;li&gt;Ëá™Êï¥ÁêÜÁöÑ Emoji&lt;/li&gt; 
   &lt;li&gt;‰ª•ËØçÂÆöÂ≠óÔºàÂ∑¶Âè≥‰∏≠Êã¨Âè∑Ôºö&lt;kbd&gt;[&lt;/kbd&gt;„ÄÅ&lt;kbd&gt;]&lt;/kbd&gt;Ôºâ&lt;/li&gt; 
   &lt;li&gt;ÈïøËØç‰ºòÂÖà&lt;/li&gt; 
   &lt;li&gt;UnicodeÔºà&lt;kbd&gt;U&lt;/kbd&gt;+Unicode Á†Å‰ΩçÔºâ&lt;/li&gt; 
   &lt;li&gt;Êï∞Â≠ó„ÄÅ‰∫∫Ê∞ëÂ∏ÅÂ§ßÂÜôÔºà&lt;kbd&gt;R&lt;/kbd&gt;+Êï∞Â≠óÔºâ&lt;/li&gt; 
   &lt;li&gt;Êó•Êúü„ÄÅÊó∂Èó¥„ÄÅÊòüÊúüÔºàËØ¶ËßÅÊñπÊ°à &lt;code&gt;/date_translator&lt;/code&gt; ËäÇÁÇπÔºâ&lt;/li&gt; 
   &lt;li&gt;ÂÜúÂéÜÔºàËΩ¨ÂÜôÔºö&lt;kbd&gt;N&lt;/kbd&gt;+ÂÖ´‰ΩçÊï∞Â≠óÔºõËé∑ÂèñÂΩìÂâçÂÜúÂéÜÔºöÂÖ®Êãº&lt;kbd&gt;nl&lt;/kbd&gt;ÔºåÂèåÊãº&lt;kbd&gt;lunar&lt;/kbd&gt;Ôºâ&lt;/li&gt; 
   &lt;li&gt;ÁÆÄÊòìËÆ°ÁÆóÂô®Ôºà&lt;kbd&gt;cC&lt;/kbd&gt;+ÁÆóÂºèÔºâ&lt;/li&gt; 
   &lt;li&gt;Â∏∏ËßÅÈîôÈü≥ÈîôÂ≠óÊèêÁ§∫&lt;/li&gt; 
   &lt;li&gt;ÁΩÆÈ°∂ÂÄôÈÄâÈ°πÔºàËØ¶ËßÅÊñπÊ°à &lt;code&gt;/pin_cand_filter&lt;/code&gt; ËäÇÁÇπÔºâ&lt;/li&gt; 
   &lt;li&gt;ÊâÄÊúâÊ†áÁÇπÁ¨¶Âè∑Áõ¥Êé•‰∏äÂ±è&lt;/li&gt; 
   &lt;li&gt;ÁâπÊÆäÁ¨¶Âè∑„ÄÅÂ≠óÁ¨¶ËæìÂÖ•ÔºàÂÖ®Êãº&lt;kbd&gt;v&lt;/kbd&gt;+È¶ñÂ≠óÊØçÁº©ÂÜôÔºõÂèåÊãº&lt;kbd&gt;V&lt;/kbd&gt;+È¶ñÂ≠óÊØçÁº©ÂÜôÔºâ&lt;/li&gt; 
   &lt;li&gt;ÊãºÈü≥Á∫†ÈîôÔºàÊ®°Á≥äÈü≥Ôºâ&lt;/li&gt; 
   &lt;li&gt;Êõ¥Â§öÈªòËÆ§Êú™ÂêØÁî®ÁöÑÂäüËÉΩËØ∑ÂèÇËÄÉ &lt;code&gt;lua/&lt;/code&gt; ÂèäÊñπÊ°àÊ≥®Èáä&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ÁÆÄ‰ΩìÂ≠óË°®„ÄÅËØçÂ∫ì 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&quot;&gt;ÈÄöÁî®ËßÑËåÉÊ±âÂ≠óË°®&lt;/a&gt;Ôºàby ‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÊïôËÇ≤ÈÉ®Ôºâ8K Â∏∏Áî®Ê±âÂ≠ó&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.unicode.org/Public/&quot;&gt;Unihan Â≠óÂ∫ì&lt;/a&gt;Ôºàby Unicode lnc | &lt;a href=&quot;https://www.unicode.org/license.txt&quot;&gt;UNICODE LICENSE V3&lt;/a&gt;Ôºâ40K Â§ßÂ≠óÂ∫ìÔºå &lt;strong&gt;ÈªòËÆ§Êú™ÂêØÁî®&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D%E8%A1%A8&quot;&gt;Áé∞‰ª£Ê±âËØ≠Â∏∏Áî®ËØçË°®&lt;/a&gt;Ôºàby ‰∏≠ÂõΩÂõΩÂÆ∂ËØ≠Ë®ÄÊñáÂ≠óÂ∑•‰ΩúÂßîÂëò‰ºöÔºâ&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&quot;&gt;ÂçéÂÆáÈáéÈ£éËØçÂ∫ì&lt;/a&gt;Ôºàby ÈáéÈ£éÔºâ&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rime/rime-essay-simp&quot;&gt;ÁÆÄÂåñÂ≠óÂÖ´ËÇ°Êñá&lt;/a&gt;Ôºàby rime | &lt;a href=&quot;https://github.com/rime/rime-essay-simp/raw/master/LICENSE&quot;&gt;LGPL&lt;/a&gt;Ôºâ&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/thunlp/THUOCL&quot;&gt;Ê∏ÖÂçéÂ§ßÂ≠¶ÂºÄÊ∫êËØçÂ∫ì&lt;/a&gt;Ôºàby THUNLP | &lt;a href=&quot;https://github.com/thunlp/THUOCL/raw/master/LICENSE&quot;&gt;MIT&lt;/a&gt;Ôºâ&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://ai.tencent.com/ailab/nlp/en/download.html&quot;&gt;ËÖæËÆØËØçÂêëÈáè&lt;/a&gt;Ôºà@Huandeep &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/24&quot;&gt;Êï¥ÁêÜ&lt;/a&gt; | by Tencent AI Lab | &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;Ôºâ&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ËØçÂ∫ì‰øÆËÆ¢ 
  &lt;ul&gt; 
   &lt;li&gt;Ê†°ÂØπÂ§ßÈáèÂºÇÂΩ¢ËØç„ÄÅÈîôÂà´Â≠ó„ÄÅÈîôËØØÊ≥®Èü≥&lt;/li&gt; 
   &lt;li&gt;ÂÖ®ËØçÂ∫ìÂÆåÊàêÊ≥®Èü≥&lt;/li&gt; 
   &lt;li&gt;Âêå‰πâÂ§öÈü≥Â≠óÊ≥®Èü≥&lt;/li&gt; 
   &lt;li&gt;ÂèÇËÄÉ 
    &lt;ul&gt; 
     &lt;li&gt;„ÄäÁé∞‰ª£Ê±âËØ≠ËØçÂÖ∏„Äã&lt;/li&gt; 
     &lt;li&gt;„ÄäÂêå‰πâËØçËØçÊûó„Äã&lt;/li&gt; 
     &lt;li&gt;„ÄäÊñ∞ÂçéÊàêËØ≠Â§ßËØçÂÖ∏„Äã&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;http://www.jiaodui.com/bbs/&quot;&gt;Ê†°ÂØπÊ†áÂáÜËÆ∫Âùõ&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Rime„ÄÅSquirrel„ÄÅWeasel Â∏∏Áî®ÈÖçÁΩÆÈ°πÁöÑËØ¶Â∞ΩÊ≥®Èáä&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;ÈïøÊúüÁª¥Êä§ËØçÂ∫ì&lt;/h2&gt; 
&lt;p&gt;Âõ†‰∏∫Ê≤°ÊúâÊâæÂà∞‰∏Ä‰ªΩÊØîËæÉÂ•ΩÁöÑËØçÂ∫ìÔºåÂπ≤ËÑÜËá™Â∑±Áª¥Êä§‰∏Ä‰∏™„ÄÇÁªºÂêà‰∫ÜÂá†‰∏™‰∏çÈîôÁöÑËØçÂ∫ìÔºåÁ≤æÂøÉË∞ÉÊïô‰∫ÜÂæàÂ§ö„ÄÇ&lt;/p&gt; 
&lt;p&gt;‰∏ªË¶ÅÁª¥Êä§ÁöÑËØçÂ∫ìÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; Â≠óË°®„ÄÇ&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;base&lt;/code&gt; Âü∫Á°ÄËØçÂ∫ì„ÄÇ&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; Êâ©Â±ïËØçÂ∫ìÔºåÂ∞èËØçÂ∫ì„ÄÇ&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; Êâ©Â±ïËØçÂ∫ìÔºåÂ§ßËØçÂ∫ì„ÄÇ&lt;/li&gt; 
 &lt;li&gt;Emoji&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Áª¥Êä§ÂÜÖÂÆπ‰∏ªË¶ÅÊòØÂºÇÂΩ¢ËØç„ÄÅÈîôÂà´Â≠óÁöÑÊ†°ÂØπÔºåÈîôËØØÊ≥®Èü≥ÁöÑ‰øÆÊ≠£ÔºåÁº∫Â§±ÁöÑÂ∏∏Áî®ËØçÊ±áÁöÑÂ¢ûÊ∑ªÔºåËØçÈ¢ëÁöÑË∞ÉÊï¥„ÄÇ&lt;/p&gt; 
&lt;p&gt;Ê¨¢ËøéÂú®ËØçÂ∫ìÊñπÈù¢Êèê issue &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/666&quot;&gt;#666&lt;/a&gt; ÔºåÊàë‰ºöÂèäÊó∂Êõ¥Êñ∞‰øÆÊ≠£„ÄÇ&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;‰ΩøÁî®ËØ¥Êòé&lt;/h2&gt; 
&lt;h3&gt;ÈÄâÊã©ÂíåÂÆâË£Ö RIME ÂâçÁ´Ø&lt;/h3&gt; 
&lt;p&gt;Ë¶Å‰ΩøÁî®ÈõæÂááÊãºÈü≥ÈªòËÆ§Êèê‰æõÁöÑÊâÄÊúâÂäüËÉΩÔºåËØ∑‰øùËØÅ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÊÇ®ÁöÑ RIME ÂâçÁ´ØÊèê‰æõÁöÑ librime ÁâàÊú¨ ‚â• 1.8.5 ‰∏î&lt;/li&gt; 
 &lt;li&gt;Âê´Êúâ librime-lua ‰æùËµñ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;‰ª•‰∏ãÊòØ‰∏ªÊµÅÂπ≥Âè∞‰∏äÁöÑ‰∏Ä‰∫õ RIME ÂâçÁ´ØÂÆâË£ÖÂª∫ËÆÆ„ÄÇÈÉ®ÂàÜ‰ø°ÊÅØÂÖ∑ÊúâÊó∂ÊïàÊÄßÔºåËØ∑‰ª•ÂΩì‰∏ãÂÖ∑‰ΩìÊÉÖÂÜµ‰∏∫ÂáÜÔºö&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Á≥ªÁªü&lt;/th&gt; 
   &lt;th&gt;RIME ÂâçÁ´Ø&lt;/th&gt; 
   &lt;th&gt;ÈõæÂááÊãºÈü≥ÁâàÊú¨Ë¶ÅÊ±Ç&lt;/th&gt; 
   &lt;th&gt;Â§áÊ≥®&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx5-android/fcitx5-android/releases&quot;&gt;fcitx5-android&lt;/a&gt; + plugin.rimeÔºàÂ∞è‰ºÅÈπÖËæìÂÖ•Ê≥ïÔºâ&lt;/td&gt; 
   &lt;td&gt;‚â• 0.0.8&lt;/td&gt; 
   &lt;td&gt;ÊöÇ‰∏çÊîØÊåÅ‰πùÂÆ´Ê†º&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/osfans/trime&quot;&gt;Trime&lt;/a&gt;ÔºàÂêåÊñáËæìÂÖ•Ê≥ïÔºâ&lt;/td&gt; 
   &lt;td&gt;‚â• 3.2.11&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95/id6446617683&quot;&gt;Hamster&lt;/a&gt;Ôºà‰ªìËæìÂÖ•Ê≥ïÔºâ&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;Èó≠Ê∫êÔºõÊúâÂÜÖË¥≠&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;ibus + &lt;a href=&quot;https://github.com/rime/ibus-rime&quot;&gt;ibus-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ‚â• 1.8.5 ‰∏îË£ÖÊúâ librime-lua&lt;/td&gt; 
   &lt;td&gt;ÈÉ®ÂàÜÂèëË°åÁâàÈúÄÊâãÂä®ÂÆâË£Ö librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;fcitx5 + &lt;a href=&quot;https://github.com/fcitx/fcitx5-rime&quot;&gt;fcitx5-rime&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;librime ‚â• 1.8.5 ‰∏îË£ÖÊúâ librime-lua&lt;/td&gt; 
   &lt;td&gt;ÈÉ®ÂàÜÂèëË°åÁâàÈúÄÊâãÂä®ÂÆâË£Ö librime-lua&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/squirrel&quot;&gt;Squirrel&lt;/a&gt;ÔºàÈº†È°ªÁÆ°Ôºâ&lt;/td&gt; 
   &lt;td&gt;‚â• 1.0.0&lt;/td&gt; 
   &lt;td&gt;0.16.0 - 0.18.0 ÁâàÊú¨ËØ∑ÂèÇËÄÉ&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/1062&quot;&gt;üîó&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fcitx-contrib/fcitx5-macos&quot;&gt;fcitx5-macos&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;ÊîØÊåÅ&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/941&quot;&gt;Âç∑ËΩ¥Ê®°Âºè&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rime/weasel&quot;&gt;Weasel&lt;/a&gt;ÔºàÂ∞èÁãºÊØ´Ôºâ&lt;/td&gt; 
   &lt;td&gt;‚â• 0.15.0&lt;/td&gt; 
   &lt;td&gt;0.14.3 ÂèØÊâãÂä®Êõ¥Êñ∞ &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/197&quot;&gt;rime.dll&lt;/a&gt;Ôºà‰ΩÜ‰∏çÊîØÊåÅÂΩ©Ëâ≤ emojiÔºâ&lt;br /&gt;Weasel ÂΩì‰∏ãÊúâÂÖºÂÆπÊÄßÈóÆÈ¢òÔºåÂª∫ËÆÆÂÆâË£ÖÂÖ∂‰ªñËæìÂÖ•Ê≥ïÂ§áÁî®&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Linux ‰æùËµñÈóÆÈ¢òÁöÑÂÖ∑‰ΩìËß£ÈáäËØ∑ÂèÇËÄÉ &lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/840&quot;&gt;#840&lt;/a&gt;„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÈõæÂááÊãºÈü≥ÁöÑÈÉ®ÂàÜÈÖçÁΩÆÂèØËÉΩË¶ÅÊ±ÇÊõ¥È´òÁöÑ librime ÊàñËÄÖÂÆ¢Êà∑Á´ØÁâàÊú¨ÔºåËøô‰∫õÂäüËÉΩÂ∑≤Âú®ÂÖ∑‰ΩìÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê≥®Êòé„ÄÇ&lt;/p&gt; 
&lt;p&gt;‰ª•‰∏ãÂÆâË£ÖÊñπÂºèÔºåÈÄâÊã©ÂÖ∂‰∏ÄÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85&quot;&gt;ÊâãÂä®ÂÆâË£Ö&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#git-%E5%AE%89%E8%A3%85&quot;&gt;Git ÂÆâË£Ö&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%B8%9C%E9%A3%8E%E7%A0%B4-plum&quot;&gt;‰∏úÈ£éÁ†¥ plum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC&quot;&gt;Ëá™Âä®ÈÉ®ÁΩ≤ËÑöÊú¨&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#%E4%BB%93%E8%BE%93%E5%85%A5%E6%B3%95-hamster&quot;&gt;‰ªìËæìÂÖ•Ê≥ï&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/#arch-linux&quot;&gt;Arch Linux&lt;/a&gt;ÔºàAURÔºâ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ÊâãÂä®ÂÆâË£Ö&lt;/h3&gt; 
&lt;p&gt;ÊÇ®ÂèØ‰ª•Â∞Ü‰ªìÂ∫ìÊâìÂåÖ‰∏ãËΩΩÔºåÂ∞ÜÊâÄÊúâÊñá‰ª∂Â§çÂà∂Á≤òË¥¥Âà∞ RIME ÂâçÁ´ØÁöÑÈÖçÁΩÆÁõÆÂΩïÔºåÈáçÊñ∞ÈÉ®ÁΩ≤„ÄÇ&lt;/p&gt; 
&lt;p&gt;Âè™ÈúÄË¶Å‰ΩøÁî®ÊàñËÄÖÊõ¥Êñ∞ËØçÂ∫ìÁöÑËØùÔºåÂèØ‰ª•ÊâãÂä®Á≤òË¥¥Ë¶ÜÁõñ &lt;code&gt;cn_dicts&lt;/code&gt; &lt;code&gt;en_dicts&lt;/code&gt; &lt;code&gt;opencc&lt;/code&gt; ‰∏â‰∏™Êñá‰ª∂Â§π„ÄÇ&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] ÈõæÂááÊãºÈü≥‰∏≠Â§ö‰∏™Êñá‰ª∂ÂèØËÉΩ‰∏éÂÖ∂‰ªñÊñπÊ°àÂêåÂêçÂÜ≤Á™ÅÔºåÂ¶ÇÊûúÊòØÊñ∞ÊâãÊÉ≥‰∏ÄÈîÆÂÆâË£ÖÔºåÂª∫ËÆÆÂ§á‰ªΩÂéüÂÖàÈÖçÁΩÆÔºå&lt;strong&gt;Ê∏ÖÁ©∫ÈÖçÁΩÆÁõÆÂΩï&lt;/strong&gt;ÂÜçÂØºÂÖ•„ÄÇ&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;ÂçïÁã¨‰ΩøÁî®ËØçÂ∫ìÊ≥®ÊÑè‰∫ãÈ°πÔºö&lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; ‰∏ãÈù¢ÂåÖÂê´‰∫ÜÂ§ßÂÜôÂ≠óÊØçÔºåËøôÂíåÈÖçÁΩÆÊúâ‰∫õËÆ∏ÁªëÂÆöÔºåÂèØ‰ª•Áõ¥Êé•Âà†Èô§ÔºåËØ¶ÁªÜËØ¥ÊòéÔºö&lt;a href=&quot;https://github.com/iDvel/rime-ice/issues/356&quot;&gt;#356&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;ÊÇ®‰πüÂèØ‰ª•ÂâçÂæÄ &lt;a href=&quot;https://github.com/iDvel/rime-ice/releases&quot;&gt;Release&lt;/a&gt; ÁïåÈù¢Ôºå‰∏ãËΩΩÁâπÂÆöÁâàÊú¨ÁöÑËØçÂÖ∏Êñá‰ª∂ÔºàÂÖ∑‰ΩìÊèèËø∞ËßÅ Release ËØ¥ÊòéÔºâÔºåË¶ÜÁõñÈÖçÁΩÆÁõÆÂΩïÁöÑÂØπÂ∫îÊñá‰ª∂„ÄÇ&lt;/p&gt; 
&lt;h3&gt;Git ÂÆâË£Ö&lt;/h3&gt; 
&lt;p&gt;ÊÇ®Â¶ÇÊûúÁÜüÊÇâ git Â∏∏Áî®Êìç‰ΩúÔºåÂèØ‰ª•‰ΩøÁî® git clone ÂëΩ‰ª§Â∞ÜÊú¨‰ªìÂ∫ìÂÖãÈöÜÂà∞ÂØπÂ∫îÂâçÁ´ØÁöÑÁî®Êà∑ÁõÆÂΩï„ÄÇÁî±‰∫éÊú¨Â∫ìÊèê‰∫§ÂéÜÂè≤ËæÉÂ§ö‰∏îÊõ¥ÊîπÈ¢ëÁπÅÔºåÊ∑ªÂä† &lt;code&gt;--depth&lt;/code&gt; ÂèÇÊï∞ÂèØ‰ª•ÊòæËëóÂáèÂ∞ë‰º†Ëæì‰ΩìÁßØ„ÄÇ&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/iDvel/rime-ice.git Rime --depth 1

# Êõ¥Êñ∞
cd Rime
git pull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ÈÄöËøá checkout ÂëΩ‰ª§ÔºåÊÇ®‰πüÂèØ‰ª•ÂÆûÁé∞Êõ¥Êñ∞ÈÉ®ÂàÜÊñá‰ª∂ÁöÑÊïàÊûú„ÄÇ&lt;/p&gt; 
&lt;h3&gt;‰∏úÈ£éÁ†¥ &lt;a href=&quot;https://github.com/rime/plum&quot;&gt;plum&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;ÈÄâÊã©ÈÖçÊñπÔºà&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;ÔºâÊù•ËøõË°åÂÆâË£ÖÊàñÊõ¥Êñ∞„ÄÇ&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;/plum/ ÁÆÄÊòìÂÆâË£ÖÊïôÁ®ã&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;ÂÆâË£Ö plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# ËØ∑ÂÖàÂÆâË£Ö git Âíå bashÔºåÂπ∂Âä†ÂÖ•ÁéØÂ¢ÉÂèòÈáè
# ËØ∑Á°Æ‰øùÂíå github.com ÁöÑËøûÊé•Á®≥ÂÆö
cd ~
git clone https://github.com/rime/plum.git plum
# Âç∏ËΩΩ plum Âè™ÈúÄË¶ÅÂà†Èô§ ~/plum Êñá‰ª∂Â§πÂç≥ÂèØ
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;‰ΩøÁî® plum&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/plum
bash rime-install &amp;lt;recipe_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr /&gt; 
&lt;/details&gt; 
&lt;p&gt;ËØçÂ∫ìÈÖçÊñπÂè™ÊòØÊõ¥Êñ∞ÂÖ∑‰ΩìËØçÂ∫ìÊñá‰ª∂ÔºåÂπ∂‰∏çÊõ¥Êñ∞ &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; Âíå &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;ÔºåÂõ†‰∏∫Áî®Êà∑ÂèØËÉΩ‰ºöÊåÇËΩΩÂÖ∂‰ªñËØçÂ∫ì„ÄÇÂ¶ÇÊûúÊõ¥Êñ∞ÂêéÈÉ®ÁΩ≤Êó∂Êä•ÈîôÔºåÂèØËÉΩÊòØÂ¢û„ÄÅÂà†„ÄÅÊîπ‰∫ÜÊñá‰ª∂ÂêçÔºåÈúÄË¶ÅÊ£ÄÊü•‰∏äÈù¢‰∏§‰∏™Êñá‰ª∂ÂíåËØçÂ∫ìÁöÑÂØπÂ∫îÂÖ≥Á≥ª„ÄÇ&lt;/p&gt; 
&lt;p&gt;‚Ñû ÂÆâË£ÖÊàñÊõ¥Êñ∞ÂÖ®ÈÉ®Êñá‰ª∂&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ñû ÂÆâË£ÖÊàñÊõ¥Êñ∞ÊâÄÊúâËØçÂ∫ìÊñá‰ª∂ÔºàÂåÖÂê´‰∏ãÈù¢‰∏â‰∏™Ôºâ&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ñû ÂÆâË£ÖÊàñÊõ¥Êñ∞ÊãºÈü≥ËØçÂ∫ìÊñá‰ª∂Ôºà &lt;code&gt;cn_dicts/&lt;/code&gt; ÁõÆÂΩïÂÜÖÊâÄÊúâÊñá‰ª∂Ôºâ&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ñû ÂÆâË£ÖÊàñÊõ¥Êñ∞Ëã±ÊñáËØçÂ∫ìÊñá‰ª∂Ôºà &lt;code&gt;en_dicts/&lt;/code&gt; ÁõÆÂΩïÂÜÖÊâÄÊúâÊñá‰ª∂Ôºâ&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ñû ÂÆâË£ÖÊàñÊõ¥Êñ∞ opencc Ôºà &lt;code&gt;opencc/&lt;/code&gt; ÁõÆÂΩïÂÜÖÊâÄÊúâÊñá‰ª∂Ôºâ&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‰∏ãÈù¢Ëøô‰∏™ÈÖçÊñπ‰ºöÂú® &lt;code&gt;radical_pinyin.custom.yaml&lt;/code&gt; Âíå &lt;code&gt;melt_eng.custom.yaml&lt;/code&gt; ÈáåÂ∞Ü &lt;code&gt;speller/algebra&lt;/code&gt; ‰øÆÊîπ‰∏∫ÂØπÂ∫îÁöÑÂèåÊãºÊãºÂÜôÔºåÈÄâÊã©‰∏Ä‰∏™Ëá™Â∑±‰ΩøÁî®ÁöÑÂèåÊãº‰Ωú‰∏∫ÂèÇÊï∞„ÄÇ&lt;/p&gt; 
&lt;p&gt;‚Ñû ÂèåÊãºË°•‰∏Å&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/config:schema=flypy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=double_pinyin
bash rime-install iDvel/rime-ice:others/recipes/config:schema=mspy
bash rime-install iDvel/rime-ice:others/recipes/config:schema=sogou
bash rime-install iDvel/rime-ice:others/recipes/config:schema=abc
bash rime-install iDvel/rime-ice:others/recipes/config:schema=ziguang
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ñû ‰∏ãËΩΩÁâπÂÆöÁâàÊú¨ÁöÑÈÖçÁΩÆ&lt;/p&gt; 
&lt;p&gt;Âú®‰ªìÂ∫ìÂêéÂä† &lt;code&gt;@tag&lt;/code&gt; Âç≥ÂèØÔºå‰æãÂ¶ÇÔºö&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;bash rime-install iDvel/rime-ice@2024.05.21:others/recipes/full
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;‰ªìËæìÂÖ•Ê≥ï &lt;a href=&quot;https://github.com/imfuxiao/Hamster&quot;&gt;Hamster&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;ÂèÇËÄÉ &lt;a href=&quot;https://github.com/imfuxiao/Hamster/wiki/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%22%E9%9B%BE%E6%B7%9E%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%96%B9%E6%A1%88%22&quot;&gt;Â¶Ç‰ΩïÂØºÂÖ•&quot;ÈõæÂááÊãºÈü≥ËæìÂÖ•ÊñπÊ°à&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;‰ªìËæìÂÖ•Ê≥ïÁõÆÂâçÂ∑≤ÂÜÖÁΩÆÈõæÂááÊãºÈü≥„ÄÇ&lt;/p&gt; 
&lt;p&gt;‰ΩøÁî®‰πùÂÆ´Ê†ºÔºåÈúÄË¶ÅÂêåÊó∂ÂêØÁî®‰πùÂÆ´Ê†ºÊñπÊ°àÔºàËæìÂÖ•ÊñπÊ°àËÆæÁΩÆÔºâÂíå‰πùÂÆ´Ê†ºÂ∏ÉÂ±ÄÔºàÈîÆÁõòËÆæÁΩÆ - ÈîÆÁõòÂ∏ÉÂ±Ä - ‰∏≠Êñá 9 ÈîÆÔºâ„ÄÇ&lt;/p&gt; 
&lt;h3&gt;Ëá™Âä®ÈÉ®ÁΩ≤ËÑöÊú¨&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Mark24Code/rime-auto-deploy&quot;&gt;Mark24Code/rime-auto-deploy&lt;/a&gt; ‰∏Ä‰∏™Ëá™Âä®ÈÉ®ÁΩ≤ËÑöÊú¨ÔºåÈõÜÊàê‰∫ÜÈõæÂááÊãºÈü≥ÔºåÂ∏ÆÂä©Êó†ÁóõÂø´ÈÄüÂÆâË£Ö„ÄÅÈÉ®ÁΩ≤ Rime ËæìÂÖ•Ê≥ïÔºà‰∏≠Â∑ûÈüµ„ÄÅÂ∞èÁãºÊØ´ÔºåÈº†È°ªÁÆ°Ôºâ‰ª•ÂèäÈÉ®ÁΩ≤ÈÖçÁΩÆ„ÄÇ&lt;/p&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;‰ΩøÁî® AUR helper ÂÆâË£Ö &lt;a href=&quot;https://aur.archlinux.org/packages/rime-ice-git&quot;&gt;rime-ice-git&lt;/a&gt; ÂåÖÂç≥ÂèØ„ÄÇ&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# paru ÈªòËÆ§‰ºöÊØèÊ¨°ÈáçÊñ∞ËØÑ‰º∞ pkgverÔºåÊâÄ‰ª•ÊúâÊñ∞ÁöÑÊèê‰∫§Êó∂ paru ‰ºöËá™Âä®Êõ¥Êñ∞Ôºå
# yay ÈªòËÆ§Êú™ÂºÄÂêØÊ≠§ÂäüËÉΩÔºåÂèØ‰ª•ÈÄöËøáÊ≠§ÂëΩ‰ª§ÂºÄÂêØ
# yay -Y --devel --save

paru -S rime-ice-git
# yay -S rime-ice-git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Êé®Ëçê‰ΩøÁî®&lt;a href=&quot;https://github.com/rime/home/wiki/Configuration#%E8%A3%9C%E9%9D%AA&quot;&gt;Ë°•‰∏Å&lt;/a&gt;ÁöÑÊñπÂºèÂêØÁî®„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÂèÇËÄÉ‰∏ãÈù¢ÁöÑÈÖçÁΩÆÁ§∫‰æãÔºå‰øÆÊîπÂØπÂ∫îËæìÂÖ•Ê≥ïÊ°ÜÊû∂Áî®Êà∑ÁõÆÂΩïÔºàËßÅ‰∏ãÔºâ‰∏≠ÁöÑ &lt;code&gt;default.custom.yaml&lt;/code&gt; Êñá‰ª∂&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iBus ‰∏∫ &lt;code&gt;$HOME/.config/ibus/rime/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fcitx5 ‰∏∫ &lt;code&gt;$HOME/.local/share/fcitx5/rime/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;default.custom.yaml&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;patch:
  # ‰ªÖ‰ΩøÁî®„ÄåÈõæÂááÊãºÈü≥„ÄçÁöÑÈªòËÆ§ÈÖçÁΩÆÔºåÈÖçÁΩÆÊ≠§Ë°åÂç≥ÂèØ
  __include: rime_ice_suggestion:/
  # ‰ª•‰∏ãÊ†πÊçÆËá™Â∑±ÊâÄÈúÄËá™Ë°åÂÆö‰πâÔºå‰ªÖÂÅöÂèÇËÄÉ„ÄÇ
  # ÈíàÂØπÂØπÂ∫îÂ§ÑÊñπÁöÑÂÆöÂà∂Êù°ÁõÆÔºåËØ∑‰ΩøÁî® &amp;lt;recipe&amp;gt;.custom.yaml ‰∏≠ÈÖçÁΩÆÔºå‰æãÂ¶Ç rime_ice.custom.yaml
  __patch:
    key_binder/bindings/+:
      # ÂºÄÂêØÈÄóÂè∑Âè•Âè∑ÁøªÈ°µ
      - { when: paging, accept: comma, send: Page_Up }
      - { when: has_menu, accept: period, send: Page_Down }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;h2&gt;ÊÑüË∞¢ ‚ù§Ô∏è&lt;/h2&gt; 
&lt;p&gt;ÁâπÂà´ÊÑüË∞¢‰∏äÊñáÂ∑≤ÁªèÊèêÂèäÁöÑËØçÂ∫ì„ÄÅËØçÂÖ∏ÁöÑ‰ΩúËÄÖ„ÄÅË¥°ÁåÆËÄÖÂèäÊï¥ÁêÜËÄÖÔºõÁâπÂà´ÊÑüË∞¢‰ª•Âèä‰∏ãÂàóËØçÂ∫ì„ÄÅÊñπÊ°à„ÄÅËÑöÊú¨ÁöÑ‰ΩúËÄÖÂèäË¥°ÁåÆËÄÖÔºàÊèêÂèäÁöÑÂùá‰∏∫ GitHub idÔºâÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@mozillazg ÂºÄÂèëÁöÑÊ±âÂ≠óËΩ¨ÊãºÈü≥Â∑•ÂÖ∑ÂíåÊï∞ÊçÆÂ∫ìÔºàMITÔºâ&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt&quot;&gt;melt_eng&lt;/a&gt;Ôºà@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;Ôºâ ÔºöÊèê‰æõ‰∫ÜÈÉ®ÂàÜÔºàÁ∫¶ 1000 Êù°ÔºâËã±ÊñáËØçÊ±á‰ª•ÂèäÂéüÂßãËã±ÊñáÊñπÊ°àÂèÇËÄÉÔºõ&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin&quot;&gt;ÈÉ®‰ª∂ÊãÜÂ≠óÊñπÊ°à&lt;/a&gt;Ôºà@mirtlecn | &lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin/raw/master/LICENSE&quot;&gt;GPL 3.0&lt;/a&gt;ÔºâÔºöÊèê‰æõÁöÑÊãÜÂ≠óÂèçÊü•ÂíåÂÄôÈÄâÁ≠õÈÄâÊèí‰ª∂Ôºõ&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&quot;&gt;ÈïøËØç‰ºòÂÖàÊèí‰ª∂&lt;/a&gt;Ôºà@tumuyan | &lt;a href=&quot;https://github.com/tumuyan/rime-melt/raw/master/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;Ôºâ&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;Unicode Êèí‰ª∂&lt;/a&gt;Ôºà@shewer | &lt;a href=&quot;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&quot;&gt;MIT&lt;/a&gt;Ôºâ&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yanhuacuo/98wubi/raw/master/lua/number.lua&quot;&gt;Êï∞Â≠ó„ÄÅ‰∫∫Ê∞ëÂ∏ÅÂ§ßÂÜôÊèí‰ª∂&lt;/a&gt;Ôºà@98wubiÔºâ&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/boomker/rime-fast-xhup&quot;&gt;ÂÜúÂéÜÊèí‰ª∂&lt;/a&gt;Ôºà@boomker | &lt;a href=&quot;https://github.com/boomker/rime-fast-xhup/raw/master/LICENSE&quot;&gt;LGPL 3.0&lt;/a&gt;Ôºâ&lt;/li&gt; 
 &lt;li&gt;Êú™ËÉΩÂú®Ê≠§Â§ÑËØ¶Ëø∞ÁöÑ„ÄÅÂú®Êú¨Â∫ìÊ∫êÁ†ÅÊ≥®Èáä‰∏≠ÊèêÂèäÁöÑÈ°πÁõÆÂèä‰ΩúËÄÖÁªô‰∫àÁöÑÂ∏ÆÂä©ÂíåÂèÇËÄÉ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ÊÑüË∞¢ &lt;a href=&quot;https://github.com/Huandeep&quot;&gt;@Huandeep&lt;/a&gt; Êï¥ÁêÜÁöÑÂ§ö‰∏™ËØçÂ∫ì„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÊÑüË∞¢ &lt;a href=&quot;https://github.com/mirtlecn&quot;&gt;@Mirtle&lt;/a&gt; ÂÆåÂñÑÁöÑÂ§ö‰∏™ÂäüËÉΩ„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÊÑüË∞¢ &lt;a href=&quot;https://github.com/Lithium-7&quot;&gt;@Lithium-7&lt;/a&gt; ÂØπËØçÂ∫ìÁöÑÂ§ßÈáè‰øÆËÆ¢„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÊÑüË∞¢ÊâÄÊúâË¥°ÁåÆËÄÖ„ÄÇ&lt;/p&gt; 
&lt;!-- ÊêúÁãóËΩ¨ RimeÔºö[lewangdev/scel2txt](https://github.com/lewangdev/scel2txt) --&gt; 
&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSourceSupport&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&quot; alt=&quot;JetBrains&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;h2&gt;ËµûÂä© ‚òï&lt;/h2&gt; 
&lt;p&gt;Â¶ÇÊûúËßâÂæóÈ°πÁõÆ‰∏çÈîôÔºåÂèØ‰ª•ËØ∑ Dvel ÂêÉ‰∏™ÁÖéÈ•ºÈ¶ÉÂ≠ê„ÄÇ&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&quot; alt=&quot;ËØ∑ Dvel ÂêÉ‰∏™ÁÖéÈ•ºÈ¶ÉÂ≠ê&quot; width=&quot;600&quot; /&gt;</description>
    </item>
    
    <item>
      <title>amzxyz/rime_wanxiang</title>
      <link>https://github.com/amzxyz/rime_wanxiang</link>
      <description>&lt;p&gt;Rime‰∏áË±°ÊãºÈü≥ËæìÂÖ•ÊñπÊ°àÔºöÊ†áÂáÜÁâà‰∏éÂ¢ûÂº∫ÁâàÂèØÈÄâÔºåËØçÂ∫ìÂü∫‰∫éAIÁ≠õÈÄâÂíåËØ≠ÊñôËæÖÂä©Á≠õÈÄâÁ≤æÂπ≤È´òÊïàÔºåÈÖçÂêàÂÖ®Êñ∞ËØ≠Ê≥ïÊ®°ÂûãÔºåËæìÂÖ•‰∏çÂÜçÁ∫†Áªì„ÄÇPROÁâàÊú¨ÊîØÊåÅ10ÁßçÂèåÊãºÔºå6ÁßçËæÖÂä©Á†ÅÔºåÂπ∂‰∏îÂèØ‰ª•Êâ©Â±ïÊõ¥Â§öÔºåÊîØÊåÅ‰∏≠Ëã±Ê∑∑ËæìÔºåÂÜÖÁΩÆË∂ÖÁ∫ßÊ≥®Èáä„ÄÅÂ∏¶Ë∞ÉÂÖ®ÊãºËæìÂÖ•Á†ÅÊòæÁ§∫„ÄÅÂø´Á¨¶‰∏éÈáçÂ§ç‰∏äÂ±è„ÄÅÂÄôÈÄâÊâãÂä®ÊéíÂ∫è„ÄÅtipsÁ≠âÂäüËÉΩÊâ©Â±ïÔºåÂ§ßÂ§ßÂ¢ûÂº∫‰ΩøÁî®‰ΩìÈ™å„ÄÇ„ÄÄ„ÄÄQÁæ§Ôºö11033572&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; 
&lt;h1&gt;‰∏áË±°Á≥ªÂàóÊñπÊ°à &lt;a href=&quot;https://deepwiki.com/amzxyz/rime_wanxiang&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;hr /&gt; 
&lt;h2&gt;‰∏áË±°ÊãºÈü≥‚Äî‚ÄîÂü∫‰∫éÊ∑±Â∫¶‰ºòÂåñÁöÑËØçÂ∫ìÂíåËØ≠Ë®ÄÊ®°Âûã&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;‰∏áË±°ËØçÂ∫ì‰∏é‰∏áË±°ËØ≠Ë®ÄÊ®°Âûã&lt;/a&gt; ÊòØ‰∏ÄÁßçÂ∏¶Â£∞Ë∞ÉÁöÑËØçÂ∫ìÔºåÁªèËøáAIÂíåÂ§ßÂü∫Êï∞ËØ≠ÊñôÁ≠õÈÄâ„ÄÅÂä†È¢ëÔºåÁªìÂêàËØ≠Ë®ÄÊ®°ÂûãËé∑ÂæóÊõ¥ÂáÜÁ°ÆÁöÑÊï¥Âè•ËæìÂá∫„ÄÇËøòÁªìÂêà‰∫Ü‰∏≠Ëã±ÊñáÊ∑∑ËæìÔºå‰∏ÄÂ•óËØçÂ∫ìÔºåÂ§öÁßçÁî®Ê≥ïÔºåÂÖ∑‰ΩìÂèØ‰ª•ÁÇπÂáªÈìæÊé•‰∫ÜËß£‰ºòÂäø&lt;/p&gt; 
&lt;h3&gt;‰ºòÂäø&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;ËØçÂ∫ìËØçËØ≠ÂÖ®ÈÉ®Âä†Èü≥Ë∞É&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ËÆæËÆ°6ÁßçËæÖÂä©Á†ÅÔºåÂ§¥ÈÉ®‰ΩøÁî®ÂÖ®ÊãºÁºñÁ†ÅÔºåÂèØ‰ª•ËΩ¨Âåñ‰∏∫‰ªª‰ΩïÂèåÊãºÁºñÁ†Å&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ËØçÂ∫ìËß£Á†ÅÈ°∫Â∫è‰∏∫ÔºöÂÖ®ÊãºÊãºÈü≥ÔºõÂ¢®Â•áÁ†ÅÔºõÈπ§ÂΩ¢ÔºõËá™ÁÑ∂Á†ÅÔºõËôéÁ†ÅÈ¶ñÊú´Ôºõ‰∫îÁ¨îÂâç2ÔºõÊ±âÂøÉÁ†Å&lt;/li&gt; 
   &lt;li&gt;Âõ†Ê≠§Ôºå‰∏áË±°ÊãºÈü≥ÊîØÊåÅÊãºÈü≥ÂíåËæÖÂä©Á†Å‰ªªÊÑè‰∏§‰∏§ÁªÑÂêà&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ÂÖ∂‰ªñÁ±ªÂûãËæÖÂä©Á†ÅÁî®Êà∑ÂèØ‰ª•ÈÄöËøáLMDGÂ∑•ÂÖ∑ÂåÖËøõË°åËØçÂ∫ìËæÖÂä©Á†ÅÂà∑Êñ∞Ôºå‰ΩøÁî®zrm-fuzhuÊñπÊ°àÂåÖÔºåÊõøÊç¢‰∏∫Âà∑Êñ∞ÂêéÁöÑËØçÂ∫ìÂç≥ÂèØ‰ΩøÁî®„ÄÇ&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;‰∏áË±°ËØçÂ∫ì‰∏≠ÁöÑÂ∏¶Â£∞Ë∞ÉÊãºÈü≥Ê†áÊ≥®+ËØçÁªÑÊûÑÊàê+ËØçÈ¢ëÊòØÊï¥‰∏™‰∏áË±°È°πÁõÆÁöÑÊ†∏ÂøÉÔºåÊòØ‰ΩøÁî®‰ΩìÈ™åÁöÑÂü∫Áü≥ÔºåÊñπÊ°àÁöÑÂÖ∂ÂÆÉÂäüËÉΩÁöÜÂèØËá™ÂÆö‰πâÔºåÊàëÂ∏åÊúõ‰ΩøÁî®ËÄÖÂèØ‰ª•Âü∫‰∫éËØçÂ∫ì+ËΩ¨ÂÜôÁöÑÊñπÂºèËé∑ÂæóËæìÂÖ•‰ΩìÈ™å&lt;/strong&gt; &lt;a href=&quot;https://docs.qq.com/smartsheet/DWHZsdnZZaGh5bWJI?viewId=vUQPXH&amp;amp;tab=BB08J2&quot;&gt;‰∏áË±°ËØçÂ∫ìÈóÆÈ¢òÊî∂ÈõÜÂèçÈ¶àË°®&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;ÊïàÊûúÂ§ßËµè&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202502200358104987_%E6%95%88%E6%9E%9C.png&quot; alt=&quot;ÊïàÊûú.png&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;ÁâàÊú¨Â∑ÆÂºÇ&lt;/th&gt; 
   &lt;th&gt;Ê†áÂáÜÁâà&lt;/th&gt; 
   &lt;th&gt;Â¢ûÂº∫Áâà&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ÊñπÊ°àÊñá‰ª∂&lt;/td&gt; 
   &lt;td&gt;wanxiang.schema.yaml&lt;/td&gt; 
   &lt;td&gt;wanxiang_pro.schema.yaml&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ÊòØÂê¶Ë∞ÉÈ¢ë&lt;/td&gt; 
   &lt;td&gt;ÈªòËÆ§ÂºÄÂêØ&lt;/td&gt; 
   &lt;td&gt;ÈªòËÆ§ÂÖ≥Èó≠&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Áî®Êà∑ËØçËÆ∞ÂΩï&lt;/td&gt; 
   &lt;td&gt;Êó†Â∑ÆÂà´Ëá™Âä®ËÆ∞ÂΩïÔºåËØçÂ∫ìÊ∑∑‰π±&lt;/td&gt; 
   &lt;td&gt;ÈúÄÊâãÂä®ÈÄ†ËØç``ÂºïÂØºÔºåËØçÂ∫ìÂèØÊéß&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Áî®Êà∑ËØç‰ΩçÁΩÆ&lt;/td&gt; 
   &lt;td&gt;wanxiang.userdb&lt;/td&gt; 
   &lt;td&gt;zc.userdb&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ËæÖÂä©Á†Å&lt;/td&gt; 
   &lt;td&gt;ÊúâÂü∫‰∫éÂ£∞Ë∞ÉÁöÑËæÖÂä©&lt;/td&gt; 
   &lt;td&gt;Êúâ7ÁßçËæÖÂä©Á†ÅÂèØÈÄâÔºåÂêåÊó∂ÂÖºÂÆπÂ£∞Ë∞ÉËæÖÂä©&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ÁÆÄÁ†Å&lt;/td&gt; 
   &lt;td&gt;ÂÖ®ÊãºÂºÄÂêØÂü∫‰∫éËΩ¨ÂÜôÁöÑÁÆÄÁ†ÅÔºåÂèåÊãºÊú™ÂºÄÂêØ&lt;/td&gt; 
   &lt;td&gt;ÊúâÊê∫Â∏¶ÈÉ®ÂàÜÊï∞ÊçÆ‰ΩÜÊú™ÈÖçÁΩÆ(Ëá™Â∑±ËÆæÁΩÆÁöÑÊâçÊòØËá™Â∑±ÁöÑ)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ËØçÂ∫ìÊ†ºÂºè&lt;/td&gt; 
   &lt;td&gt;‰Ω†‚û©n«ê‚û©1000&lt;/td&gt; 
   &lt;td&gt;‰Ω†‚û©n«ê;re‚û©1000&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Êñ∞ÊâãÂø´ÈÄüÂÖ•Èó®&lt;/h3&gt; 
&lt;p&gt;‰∏ç‰∫ÜËß£rimeÂü∫Á°ÄÁöÑÂèØ‰ª•ÂèÇËÄÉÂèãÊÉÖÈìæÊé•ÔºåÂàùÊ≠•‰∫ÜËß£rimeËøêË°åÁöÑ‰∫õËÆ∏ÁâπÊÄßÔºö&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.mintimate.cc/zh/guide/installRime.html&quot;&gt;oh my rime&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://xishansnow.github.io/posts/41ac964d.html&quot;&gt;rimeÂèÇÊï∞ÈÖçÁΩÆ&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Êï¥‰∏™rimeÈÖçÁΩÆÁîüÊÄÅÈÉΩÊòØÈÄöÁöÑÔºåÈáåÈù¢ÊúâÈùûÂ∏∏ÂÆåÊï¥ÁöÑ‰ΩøÁî®ÊñπÊ≥ïÔºå(ËØ∏Â¶ÇÊîæÂà∞Âì™Èáå„ÄÅÊç¢‰∏™ÁöÆËÇ§„ÄÅ‰ªÄ‰πàÊòØÁî®Êà∑ÁõÆÂΩï„ÄÇ„ÄÇ„ÄÇ)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÂèãÊÉÖÊèêÁ§∫Ôºö&lt;/strong&gt; &lt;em&gt;Â¶ÇÊûú‰Ω†ÊòØÁ¨¨‰∏ÄÊ¨°‰ΩøÁî®‰∏áË±°ÔºåÂèØ‰ª•‰∏çË¶ÅÁî®‰Ω†ËøáÂæÄÁªèÈ™åÊù•ÂÆö‰πâ‰∏áË±°ÔºåÊåâÂ¶Ç‰∏ãÁöÑÊ≠•È™§Â∞Ü‰∏áË±°Ë∑ëËµ∑Êù•Âêé,‰ΩìÈ™å‰∏Ä‰∏ã‰∏áË±°ÁöÑÂäüËÉΩÔºåÁÑ∂ÂêéÂ≠¶‰π†‰∏Ä‰∏ã‰∏áË±°ÁöÑÂêÑÈ°πÂÜÖÂÆπ‰πãÂêéÂÜçËÄÉËôë„ÄÇ&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;‚ë†Âø´ÈÄüËøêË°åÔºö&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Â∞ÜÊñπÊ°àÊñá‰ª∂ÁΩÆ‰∫éÁî®Êà∑ÁõÆÂΩï‰∏≠ÔºåÁõ¥Êé•ÈÉ®ÁΩ≤ÔºåÁ≠âÂæÖÈÉ®ÁΩ≤ÂÆåÊàêÂêéÔºå&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ËæìÂÖ•‰ª•‰∏ãÊåá‰ª§(ÊñúÊù†ÂºïÂØº)ÂàáÊç¢‰∏∫ÂØπÂ∫îÁöÑÂèåÊãº/ÂÖ®ÊãºÔºåÂàáÊç¢ÂêéÊåâÁÖßÊèêÁ§∫ÈáçÊñ∞ÈÉ®ÁΩ≤ÔºåÂÆåÊàê„ÄÇ&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ËøôÊ†∑ÁöÑÊåá‰ª§ËÉΩÂ∏Æ‰Ω†‰∏ÄÊ¨°ÊÄßÂÆåÊàê4‰∏™Ë°•‰∏ÅÊñá‰ª∂ÁöÑËæìÂÖ•Á±ªÂûã‰øÆÊîπÔºåËøêË°åÈÄªËæëÔºöÊ†πÁõÆÂΩïÊó†Ëá™ÂÆö‰πâÊñá‰ª∂ÂàôÂ§çÂà∂customÊñá‰ª∂Â§πÁõ∏ÂÖ≥Êñá‰ª∂Âá∫Êù•Âπ∂‰øÆÊîπ‰∏∫ÂØπÂ∫îÁöÑËæìÂÖ•ÊñπÊ°àÔºåÂ¶ÇÊûúÊ†πÁõÆÂΩïÂ≠òÂú®ÂàôÂè™‰øÆÊîπËæìÂÖ•ÊñπÊ°àÔºå‰∏çËøõË°åÂ§çÂà∂ÔºåÂõ†Ê≠§‰∏ç‰ºöË¢´Ë¶ÜÁõñ„ÄÇ&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ios‰ªìËæìÂÖ•Ê≥ïÔºåÂπ≥Âè∞ÁâπÊÆäÔºåÈúÄË¶ÅÈ¢ùÂ§ñÂéªÔºöÊñπÊ°àÊñá‰ª∂ÁÆ°ÁêÜ-‰ΩøÁî®ÈîÆÁõòÊñá‰ª∂Ë¶ÜÁõñÂ∫îÁî®Êñá‰ª∂ÔºåÊâçËÉΩÂÆåÊàêÊñá‰ª∂ÂèòÊõ¥&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;/flypy    ‚Üí Â∞èÈπ§ÂèåÊãº
/mspy     ‚Üí ÂæÆËΩØÂèåÊãº
/zrm      ‚Üí Ëá™ÁÑ∂Á†Å
/sogou    ‚Üí ÊêúÁãóÂèåÊãº
/abc      ‚Üí Êô∫ËÉΩABC
/ziguang  ‚Üí Á¥´ÂÖâÂèåÊãº
/pyjj     ‚Üí ÊãºÈü≥Âä†Âä†
/gbpy     ‚Üí ÂõΩÊ†áÂèåÊãº
/lxsq     ‚Üí ‰π±Â∫è17
/pinyin   ‚Üí ÂÖ®Êãº
/zrlong   ‚Üí Ëá™ÁÑ∂Èæô(ÂèçÊü•ÊòØÂÖ®Êãº)
/hxlong   ‚Üí Ê±âÂøÉÈæô(ÂèçÊü•ÊòØÂÖ®Êãº)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;‚ë°ËøõÈò∂custom patchÊ≥ïÔºàÂ∑≤ÁªèÂ∞ΩÈáè‰∏∫‰Ω†ÁÆÄÂåñÔºâÂº∫ÁÉàÊé®ËçêÔºåÈÄÇÁî®‰∫éÈïøÊúüÁ®≥ÂÆö‰ΩøÁî®Ôºö&lt;/h4&gt; 
&lt;p&gt;ÂÖ∂ÂÆûÂø´ÈÄüËøêË°å‰∏≠Êàë‰ª¨Â∑≤ÁªèÂÆåÊàê‰∫Ücustom patchÁöÑÈÉ®ÁΩ≤ÔºåÈáåÈù¢ËøòÈ¢ÑËÆæ‰∫Ü‰∏Ä‰∫õÁ§∫‰æãÔºåËøô‰∫õ‰æãÂ≠êÂè™ÊòØ‰æãÂ≠êÔºåËØ∑Âä°ÂøÖËØ¶ÁªÜÈòÖËØªÊØè‰∏ÄË°åÔºå‰øùÁïôÊúâÁî®ÁöÑÂà†Èô§Êó†Áî®ÁöÑÔºåÂçÉ‰∏á‰∏çË¶ÅÊîπÂÆåÂèåÊãºÂ∞±‰∏á‰∫ãÂ§ßÂêâ‰∫ÜÔºåÊØè‰∏ÄË°åËØ¶ÁªÜÊü•ÈòÖ„ÄÅÁêÜËß£„ÄÅ‰øÆÊîπ„ÄÇcustomÊòØÂØπÂØπÂ∫îÊñπÊ°àÊñá‰ª∂ÁöÑÊúÄÂêé‰∏ÄÈÅìË°•‰∏ÅÔºåÊòØÁúüÊ≠£Â±û‰∫é‰Ω†Ëá™Â∑±ÁöÑÈÖçÁΩÆÊñá‰ª∂Ôºå‰ªñ‰∏ç‰ºöË¢´ÂçáÁ∫ßÊâÄË¶ÜÁõñ„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÊñπÊ°àÊèê‰æõ‰∫ÜcustomÊñá‰ª∂Â§πÔºåÈ¢ÑËÆæ‰∫Ü‰∏Ä‰∫õÊñá‰ª∂‰∏éÊïôÁ®ãÔºåËØ∑‰∏çË¶ÅÂà†Èô§Áõ∏ÂÖ≥Êñá‰ª∂ÔºåÊ†πÊçÆÊñá‰ª∂Â§π‰∏≠ÂÜÖÂÆπËøõË°åÁõ∏ÂÖ≥‰øÆÊîπÂèòÊõ¥Ôºö&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;‰∏çË¶ÅÂú®default.customÂÜô‰∏úË•ø,‰ªª‰ΩïpatchÈÉΩË¶ÅÂØπÊñπÊ°àÊñá‰ª∂ËøõË°åpatchÔºådefault.customÁïôÁªôÂâçÁ´ØÊìç‰ΩúËØ∑Âä°ÂøÖÊÇâÁü•ÔºÅ&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wanxiang.custom.yamlÊòØÂØπwanxiang.schema.yamlÁöÑË°•‰∏Å‰ª•Ê≠§Á±ªÊé®
ÂèØ‰ª•ÊâìË°•‰∏ÅÁöÑÁ±ªÂûãÔºö
schema,default,weasel,squirrel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ê≥®ÊÑè‰∏çË¶ÅÂà†Èô§ÂíåÂèòÊõ¥ÊØè‰∏Ä‰∏™customÁöÑË°®Â§¥„ÄÇ&lt;/p&gt; 
&lt;p&gt;Êõ¥ËØ¶ÁªÜÂèÇÁÖßÔºö&lt;a href=&quot;https://docs.qq.com/doc/DQ0FqSXBmYVpWVFpy?rtkey=&quot;&gt;üöÄ Rime ‰∏áË±°ÊãºÈü≥ËæìÂÖ•ÊñπÊ°à Êñ∞ÊâãÂÆâË£ÖÈÖçÁΩÆÊåáÂçó&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;‚ë¢ËÑöÊú¨Êõ¥Êñ∞Ôºö&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;ËÑöÊú¨ÁöÑ‰∏ãËΩΩÂú∞ÂùÄ &lt;a href=&quot;https://github.com/rimeinn/rime-wanxiang-update-tools&quot;&gt;‰∏áË±°ÊñπÊ°àÊõ¥Êñ∞ËÑöÊú¨&lt;/a&gt;„ÄÇËøôÈáå‰ª•winÁâàÊú¨ÁöÑÂ∞èÁãºÊØ´‰∏∫‰æãÔºåÂ¶ÇÊûú‰Ω†ÊòØ&lt;strong&gt;‰∏≠ÊñáÁ≥ªÁªü&lt;/strong&gt;ËØ∑‰∏ãËΩΩÊõ¥Êñ∞ËÑöÊú¨ÁöÑ powershell &lt;strong&gt;Èùûutf-8ÁâàÊú¨&lt;/strong&gt;ÔºåÂÖ∑‰ΩìÊñá‰ª∂ÂêçÔºö&lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; „ÄÇÂú®‰ΩøÁî®‰∏áË±°‰πãÂâçÔºåËØ∑ÂÆâË£ÖÂ∞èÁãºÊØ´ÔºåÂÆâË£ÖÂ∞èÁãºÊØ´ÁöÑËøáÁ®ã‰∏≠ÔºåËØ∑‰∏ÄÂàá‰øùÊåÅÈªòËÆ§Âç≥ÂèØÔºåÁ≠â‰Ω†ÁÜüÊÇâ‰πãÂêéÂèØ‰ª•Ëá™ÂÆö‰πâ„ÄÇÊú¨ÂÖ•Èó®ÊúÄÁªà‰ºöÂ∏¶‰Ω†‰∏ÄÊ≠•Ê≠•ËÆæÁΩÆ‰ΩøÁî®&lt;strong&gt;Â∞èÈπ§ÂèåÊãº+Â¢®Â•áËæÖÂä©Á†Å&lt;/strong&gt;ÁöÑÊñπÊ°à„ÄÇ&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;‰∏ãËΩΩÊõ¥Êñ∞ËÑöÊú¨ÔºöÁõ¥Êé•ÁÇπÂáª‰∏äÈù¢Âú∞ÂùÄÈ¶ñÈ°µÂè≥ËæπÊúÄÊñ∞ release ÈìæÊé•ÔºåÁÑ∂Âêé‰∏ãËΩΩÂØπÂ∫îÁöÑ &lt;code&gt;rime-wanxiang-update-windows.ps1&lt;/code&gt; Êñá‰ª∂Âç≥ÂèØ„ÄÇ‰∏ãËΩΩÂÆåÊàêÂêéÔºåÁõ¥Êé•ÂèåÂáªËøêË°åÂàöÂàö‰∏ãËΩΩÁöÑps1ËÑöÊú¨„ÄÇÂ¶ÇÊûúÊùÄÊØíÊä•ÈîôÔºåËØ∑Â∞Ü‰Ω†‰∏ãËΩΩÁöÑÊñá‰ª∂ÊÅ¢Â§çÂêéÔºåÊ∑ªÂä†Âà∞‰ø°‰ªªÊñá‰ª∂„ÄÇÂ¶ÇÊûúÊâßË°å‰∏ÄÈó™ËÄåËøá„ÄÅÊàñËÄÖÈÅáÂà∞‰π±Á†ÅÂÜçÂ∞ùËØï‰∏ãËΩΩ utf-8 ÁâàÊú¨ÔºåÂÖ∑‰ΩìÊñá‰ª∂ÂêçÔºö&lt;code&gt;rime-wanxiang-update-windows-utf-8.ps1&lt;/code&gt;„ÄÇÂ¶ÇÊûúÊèêÁ§∫ÊùÉÈôê‰∏çË∂≥ÔºåÂèØ‰ª•Âú® powershell ÁªàÁ´Ø‰∏≠ÊâßË°å &lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser&lt;/code&gt; ÂÜçÂ∞ùËØïËøêË°å‰∏ãËΩΩÁöÑ ps1 ËÑöÊú¨„ÄÇ&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ËÑöÊú¨ÊâßË°åÂêéÔºåÈúÄË¶Å‰Ω†Á°ÆËÆ§‰Ω†‰ΩøÁî®ÁöÑÊòØÂÖ®ÊãºËøòÊòØÂèåÊãºÁî®Êà∑ÔºåÂ¶ÇÊûú‰Ω†ÊòØÂÖ®ÊãºÁî®Êà∑ÔºåËØ∑Ê†πÊçÆÊèêÁ§∫ËæìÂÖ• 0 ÂêéÂõûËΩ¶„ÄÇÂ¶ÇÊûú‰Ω†ÂèåÊãºÁî®Êà∑ÔºåÈúÄË¶Å‰Ω†Á°ÆËÆ§‰Ω†‰ΩøÁî®ÁöÑËæÖÂä©Á†ÅÁ±ªÂûãÔºåÈªòËÆ§ÁöÑ‰∏áË±°ÊñπÊ°àÊîØÊåÅÊ±âÂøÉ„ÄÅÁÆÄÂçïÈπ§„ÄÅÂ¢®Â•á„ÄÅËôéÁ†Å„ÄÅ‰∫îÁ¨î„ÄÅËá™ÁÑ∂Á†ÅÂÖ±ËÆ°6ÁßçËæÖÂä©Á†ÅÁ±ªÂûã„ÄÇÂ¶ÇÊûúÊ≤°Êúâ‰Ω†ÊÉ≥Ë¶ÅÁöÑËæÖÂä©Á†ÅÁ±ªÂûãÔºå‰πü‰∏çË¶ÅÁùÄÊÄ•ÔºåÂèØÂú®ÁÜüÊÇâ‰∏áË±°‰πãÂêéËá™ÂÆö‰πâ„ÄÇÊ†πÊçÆÊèêÁ§∫ËæìÂÖ•‰Ω†‰ΩøÁî®ÁöÑËæÖÂä©Á†ÅÁ±ªÂûãÁöÑÊï∞Â≠óÂêéÂõûËΩ¶Âç≥ÂèØ„ÄÇËøôÈáåÊàëÊåâÂ¢®Â•áËæÖÂä©Á†ÅËæìÂÖ•„ÄÇÊõ¥‰∏çË¶ÅÁùÄÊÄ•ÊÄé‰πàÈÄâÊã©ÂèåÊãºÊñπÊ°àÔºåÂêéÈù¢‰ºöÂëäËØâ‰Ω†ÁöÑ„ÄÇ&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ËÑöÊú¨ÁªßÁª≠ÊâßË°åÔºåÊèêÁ§∫ÈÄâÊã©ÊòØÂê¶ÂÖ®ÈÉ®Êõ¥Êñ∞Ôºå‰∏çË¶ÅÁÆ°Ôºå‰Ω†ÊòØÊñ∞ÊâãÔºåÁõ¥Êé•ÈÄâÂÖ®ÈÉ®Êõ¥Êñ∞ÔºåËæìÂÖ• 0 ÂõûËΩ¶„ÄÇÁÑ∂ÂêéÂ∞±ÈªòÈªòÁöÑÁ≠âÂæÖËÑöÊú¨ÊâßË°åÂÆåÂêéÔºåÊåâ‰ªªÊÑèÈîÆÈÄÄÂá∫Âç≥ÂèØ„ÄÇÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºå‰∏áË±°ÁöÑÂèåÊãºÊñπÊ°à‰∏∫Ëá™ÁÑ∂Á†Å„ÄÇ&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Âú®‰ΩøÁî®ËÑöÊú¨Êõ¥Êñ∞‰πãÂâçÔºåÂä°ÂøÖ‰ΩøÁî®ËøõÈò∂custom patchÊ≥ïÁª¥Êä§Â•Ω‰Ω†ÁöÑÈÖçÁΩÆÔºåÊõ¥Êñ∞‰∏ç‰ºöË¶ÜÁõñcustom.yamlÁ±ªÊñá‰ª∂&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;‚ë£&lt;strong&gt;Ëá™ÂÆö‰πâÊï∞ÊçÆËé∑ÂèñÔºö&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Âú®Á∫øcustomÁõÆÂΩïÈöèÊúâ‰∏â‰∏™Êï∞ÊçÆÊ∫êÊèê‰æõÔºåÊåâËá™Â∑±ÈúÄÊ±ÇËá™Ë°åÊï¥ÁêÜÂèñÁî®ÔºåËøôÈÉ®ÂàÜÊï∞ÊçÆÊ≤°ÊúâÈöèzipÊñπÊ°àÂåÖ‰∏ÄËµ∑‰æõÂ∫îÔºåÈúÄÂú®Á∫ø‰∏ãËΩΩ„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;jm_flypy.txt Áî®‰∫éÊèê‰æõÂ∞èÈπ§Á±ªÂûãÁöÑÁÆÄÁ†ÅÔºå‰∏ãËΩΩÂêéÊîæÁΩÆ‰∫éÊ†πÁõÆÂΩïtxtËá™ÂÆö‰πâÂ∫ìÂç≥ÂèØ‰ΩøÁî®Ôºõ&lt;/li&gt; 
 &lt;li&gt;jm_zrm.txt Áî®‰∫éÊèê‰æõËá™ÁÑ∂Á†ÅÁ±ªÂûãÁöÑÁÆÄÁ†ÅÔºå‰∏ãËΩΩÂêéÊîæÁΩÆ‰∫éÊ†πÁõÆÂΩïtxtËá™ÂÆö‰πâÂ∫ìÂç≥ÂèØ‰ΩøÁî®Ôºõ&lt;/li&gt; 
 &lt;li&gt;tips_user.txt tipsÁî®Âà∞ÁöÑ‚ÄúÁøªËØë‚ÄùÁ±ªÂûãÁöÑÊï∞ÊçÆÔºå‰∏ãËΩΩÂêéÊîæÁΩÆ‰∫élua/tipsÈáåÈù¢ÈáçÊñ∞ÈÉ®ÁΩ≤„ÄÇ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Á≠îÁñë&lt;/h3&gt; 
&lt;h4&gt;‰∏∫‰ªÄ‰πàËØçÂ∫ìËøô‰πàÂ§ßÔºåÊàëËßÅËøáÂè™ÊúâÂçïÂ≠óÊê∫Â∏¶ËæÖÂä©Á†ÅÁöÑÊñπÊ°àÔºåËØçÂ∫ìÂèØ‰ª•Áº©Â∞èÂêóÔºü&lt;/h4&gt; 
&lt;p&gt;Âú®ËøôÈáåÊàëÂÄüÂä©wikiÊ∑±ÂÖ•ÈòêËø∞‰∏Ä‰∏ãËøô‰∏™ÈóÆÈ¢òÂπ∂Ëß£Á≠îËøô‰∫õÈóÆÈ¢òÔºö&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%87%E8%B1%A1%E8%AF%8D%E5%BA%93PRO%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5&quot;&gt;‰∏áË±°ËØçÂ∫ìPROÁöÑËÆæËÆ°ÁêÜÂøµ&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG/wiki/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%85%B3%E9%97%AD%E8%B0%83%E9%A2%91%E4%BB%A5%E5%8F%8A%E4%B8%8E%E4%B9%8B%E5%85%B3%E8%81%94%E7%9A%84%E6%8E%AA%E6%96%BD%E6%9C%89%E5%93%AA%E4%BA%9B&quot;&gt;‰∏∫‰ªÄ‰πàPROÁâàÊú¨ÈªòËÆ§ÂÖ≥Èó≠Ë∞ÉÈ¢ëÁöÑËØ¥Êòé&lt;/a&gt; &lt;code&gt;enable_user_dict: false # ÊòØÂê¶ÂºÄÂêØËá™Âä®Ë∞ÉÈ¢ëÔºåtrue‰∏∫ÂºÄÂêØ&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;ÂäüËÉΩ‰∏ÄËßà&lt;/h3&gt; 
&lt;h4&gt;ËæÖÂä©Á†Å&lt;/h4&gt; 
&lt;p&gt;ËæÖÂä©Á†ÅÂèØ‰ª•Âú®ËæìÂÖ•‰∏Ä‰∏™Á°ÆÂÆöÂæóÊãºÈü≥ÂêéÈù¢ÁªßÁª≠ËæìÂÖ•‰∏Ä‰∏™ÈÉ®È¶ñÁöÑËØªÈü≥Ôºå‰ΩøÂæóËøô‰∏™Â≠óÂá∫Áé∞Âú®Èù†ÂâçÁîöËá≥Á¨¨‰∏Ä‰Ωç„ÄÇËøôÁßçÊñπÂºèÊòì‰∫éÁêÜËß£ÔºåÊó†È°ªËÆ∞ÂøÜÂ≠óÊ†πÔºå‰∏ÄÂàáÂü∫‰∫éÊãºÈü≥ÂæóÂü∫Á°Ä‰∏ä„ÄÇ‰æãÂ¶ÇÔºö&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041144502563_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121653.png&quot; alt=&quot;Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20240704121653.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÂäüËÉΩ1&lt;/strong&gt; &lt;strong&gt;Ôºà‰ªÖPROÔºâ&lt;/strong&gt; Áõ¥Êé•ËæÖÂä©--Â¶ÇÊûúÊÉ≥Ë¶Å &lt;code&gt;Èïá&lt;/code&gt; Â≠óÊòæÁ§∫Âú®ÂâçÈù¢ ÈÇ£‰πàÂú®Êú¨ÊñπÊ°à‰∏ãÊèê‰æõ‰∏§ÁßçÊñπÂºèÔºåÁ¨¨‰∏ÄÁßçÂ∞±ÊòØËæÖÂä©Á†ÅÂ£∞ÊØçÔºå&lt;code&gt;vf&lt;/code&gt;ÁªßÁª≠ËæìÂÖ•&lt;code&gt;j&lt;/code&gt; ‰πüÂ∞±ÊòØÈáëÂ≠óÊóÅÂæóÂ£∞ÊØçÂç≥ÂèØÂá∫Áé∞ÁªìÊûúÔºåÂ¶ÇÊûúËøòÊòØÂá∫Áé∞‰∏ç‰∫Ü‰Ω†Ë¶ÅÁöÑÁªìÊûúÔºåÂèØ‰ª•ËæìÂÖ•Âè¶Â§ñ‰∏ª‰ΩìÂ≠óÁöÑÂ£∞ÊØçÊù•ÁªßÁª≠Áº©Â∞èËåÉÂõ¥„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041147131421_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121809.png&quot; alt=&quot;Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20240704121809.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Âè•Â≠ê‰∏≠Èó¥ÊàñËÄÖÂçïÂ≠óËæìÂÖ•Êó∂ÈúÄË¶ÅËæìÂÖ•ÂÖ®‰ΩçËæÖÂä©Á†ÅÊó∂Áî±‰∫é‰∏éÂèåÊãºËØçËØ≠ÈáçÁ†ÅÔºåÂõ†‰∏∫Êàë‰ª¨ËÆæËÆ°ÁöÑÂü∫Êú¨ËæÖÂä©Á†ÅÊòØ2‰ΩçÔºåÂä†‰∏äÂèåÊãºÂÖ±4‰ΩçÔºåÁî±‰∫éÂú®Êï¥Âè•‰∏≠Êàë‰ª¨‰∏∫‰∫ÜÊï¥Âè•ËæìÂÖ•ÁöÑÈ°∫ÁïÖÔºå‰∏ç‰ºöÂ∞Ü4Á†ÅËÅöÊã¢‰Ωú‰∏∫‰ºòÂÖàÁ∫ßËæÉÈ´òÁöÑÈÄâÊã©ÔºåËøôÊ†∑‰ºöÂú®ÂæàÂ§öÊó∂ÂÄôÈÄ†Êàê‰Ω†ÊÉ≥ÊâìÁöÑÂè•Â≠êÁº©Êàê‰∏ÄÂõ¢ÂèòÊàêÂÖ®ËæÖÂä©Á†ÅÁöÑËØçÊ±á„ÄÇÊ≠§Êó∂ÂèØ‰ª•ÈÄöËøáËøΩÂä†/ÁöÑÊñπÂºè‰ΩøÂÖ∂ËÅöÊã¢ÔºåËøôÁßçÊñπÂºèÊòØÁî±‰∫éÊàë‰ª¨ÊòØÁõ¥Êé•ËæÖÂä©Á†ÅÂØºËá¥ÁöÑÔºåÂ¶ÇÊûúÊàë‰ª¨ÈÄöËøá‰∏Ä‰∏™Á¨¶Âè∑ÂºïÂØºËæÖÂä©Á†ÅÔºåÈÇ£‰πàÂú®ËæìÂÖ•Êó∂Ë¶ÅÊØè‰∏Ä‰∏™ÈÉΩÁî®Âà∞Á¨¶Âè∑ÔºåËÄåÈááÁî®ËøôÁßçÊñπÂºèÊàë‰ª¨Âè™ÈúÄË¶ÅÂú®ÂøÖË¶ÅÁöÑÊó∂ÂÄô‰ΩøÁî®/ËäÇÁúÅ‰∫ÜËæìÂÖ•ÁöÑÊåâÈîÆÂºÄÊîØÔºå‰∏ãÈù¢Áî±‰∏§‰∏™ÂõæÁâáËØ¥ÊòéÈóÆÈ¢òÔºö&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202408210142513354_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093644.png&quot; alt=&quot;Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20240821093644.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202408210143144721_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240821093701.png&quot; alt=&quot;Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20240821093701.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÂäüËÉΩ2&lt;/strong&gt; &lt;strong&gt;Ôºà‰ªÖPROÔºâ&lt;/strong&gt; Èó¥Êé•ËæÖÂä©--Èô§‰ª•‰∏äÁõ¥Êé•‰ΩøÁî®ËæÖÂä©Â§ñ,Êàë‰ª¨ËøòÊîØÊåÅ‰∏≠Èó¥Âä†ÂÖ•/Êù•ÂºïÂØºËæÖÂä©Á†ÅÁöÑËæìÂÖ•,Âç≥:ÂäüËÉΩ1ÊòØ&quot;nire/&quot; Âú®ÊúâÈúÄÊ±ÇÁöÑÊó∂ÂÄôÊú´Â∞æÂ¢ûÂä†ÊñúÊù†ËÉΩËÆ©Á≥ªÁªü‰æßÈáç‰∫éÂçïÂ≠ó,Âπ≥Êó∂ÂàôÊ∞∏ËøúÂú®Âä®ÊÄÅÂàáÂàÜ,Ëøô‰∏™Ê®°Âºè‰πüÊòØÊØîËæÉÂêÉËØçÂ∫ìÁöÑ,ÂΩì‰Ω†ÁöÑËØçÁªÑÂÆåÊï¥,ÈÅáÂà∞ÁöÑÂºÇÂ∏∏Â∞±Â∞ë,ÂΩìËØçÁªÑ‰∏çÂÆåÊï¥,‰Ω†ÊÉ≥ËæìÂÖ•‰∏â‰∏™Â≠ó2+2=2ÁºñÁ†ÅÁªìÊûÑ,ÊÅ∞Â•ΩËæÖÂä©Á†Å‰∏éÂèåÊãºÁºñÁ†ÅÈáçÂêàÂ∞±‰ºöÂá∫Áé∞3+3ÁöÑËÅöÊã¢,Ê≠§Êó∂Â∞Ü‰Ω†ÊÉ≥ËæìÂÖ•ÁöÑ‰∏â‰∏™Â≠óÊîæÂÖ•ËØçÂ∫ì‰∏≠,Ëøô‰∏™ÈóÆÈ¢òÂ∞±ÂæóÂà∞‰∫ÜËß£ÂÜ≥,ËøòÊúâÂæóÈ°πÁõÆÈÄöËøáLuaÈáçÊñ∞ÂàáÂàÜÊù•Ëß£ÂÜ≥,Áúã‰ººÂ∑ßÂ¶ô,ÂÆûÈôÖ‰∏äÊØîËæÉÂêÉÊìç‰Ωú,ÂΩ±ÂìçËäÇÂ•è,Êó†Áñë‰∏áË±°Âú®ÂæàÂ§öÈÄâÊã©‰∏äÈù¢ÈÄâÊã©‰∫ÜÊõ¥Âä†ÈöæÁöÑË∑ØÁ∫ø,Áî®ËØçÂ∫ìÁöÑÂÖ®Èù¢ÊÄßÊù•Êâò‰∏æ. ËÄåÂú®ÂäüËÉΩ2‰∏≠ÊòØ&quot;ni/re&quot;,‰πüÂ∞±ÊòØËØ¥ËæÖÂä©Á†ÅÂøÖÈ°ªÁªèËøá/Êù•ÂºïÂØº,Â¶ÇÊûú‰Ω†‰∏çËæìÂÖ•/ÂÆÉÂ∞Ü‰∏éÊôÆÈÄöÂèåÊãºÊó†ÂºÇ,‰ºòÁÇπÊòØÁ±ª‰ººvsgËÉΩÂ§üÊ¥æÁîüÂá∫&quot;‰∏≠ÂõΩ&quot;,Êõ¥ÈÄÇÁî®‰∫éÊñ∞ÊâãËæÖÂä©Á†ÅÊàñËÄÖÂè´ËæÖÂä©Á†ÅËΩªÈáè‰ΩøÁî®ËÄÖ.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÂäüËÉΩ3&lt;/strong&gt; Á¨¨‰∫åÁßçÊñπÂºèÊòØÈÄöËøáÂèçÊü•Â≠óÂ∫ìÊù•ÂÆö‰ΩçÔºåÂè™ÊòØÈÄöËøá‰∏çÂêåÁöÑÊñπÊ°àÂÆûÁé∞ÔºåÂú®ËæìÂÖ•‰∏ªË¶ÅÊãºÈü≥ÂêéÔºåÈÄöËøáÁ¨¶Âè∑&lt;code&gt;`&lt;/code&gt; Êù•ÂºïÂØºËøõÂÖ•ÂèçÊü•Áä∂ÊÄÅÔºåÂºïÂØºÂêéÁªßÁª≠ËæìÂÖ•&lt;code&gt;jn&lt;/code&gt;Èáë ÂàôÂåÖÂê´ÈáëÁöÑÂ≠óÂ∞±‰ºöË¢´ÈÄâÂá∫Êù•Ôºõ&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041149125588_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121635.png&quot; alt=&quot;Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20240704121635.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;ÂºïÂØºÂêéÁªßÁª≠ËæìÂÖ•&lt;code&gt;mu Êú®&lt;/code&gt;ÂàôÂ∏¶&lt;code&gt;Êú®&lt;/code&gt;ÁöÑÂ≠óÂ∞±‰ºöË¢´ÈÄâÂá∫Êù•&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202407041149524870_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240704121611.png&quot; alt=&quot;Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20240704121611.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;ÂÆûÈôÖ‰∏äÊàë‰ª¨ÂêåÊó∂ÊîØÊåÅÔºå&lt;code&gt;‰∏§ÂàÜÔºö‰Ω†(ni`rferÔºåni`re)„ÄÅÂ§öÂàÜÔºöËé´Ôºàmu`ckridaÔºâ„ÄÅÁ¨îÁîªÔºö‰Ω†ni`pspzhpd&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÂäüËÉΩ4&lt;/strong&gt; ÈÄöËøá ÊãºÈü≥Áä∂ÊÄÅ‰∏ã&lt;code&gt; ``„ÄîÂèçÊü•ÔºöÈÉ®‰ª∂|Á¨îÁîª„Äï&lt;/code&gt; Êù•ÂºïÂØºÊãÜÂ≠óÊ®°Âºè ‰∏æ‰æã &lt;code&gt;Èúá&lt;/code&gt; ÂÅáËÆæ‰Ω†‰∏çËÆ§ËØÜÔºå‰Ω†ÂèØ‰ª•ÈÄöËøá&lt;code&gt;Èõ®ÂíåËæ∞&lt;/code&gt; Êù•ÂêàÂπ∂ËæìÂÖ•ÔºåÊãºÈü≥Áä∂ÊÄÅËæìÂÖ•ÂêéÔºåÁªßÁª≠ËæìÂÖ•ÂÖ∂ÂÆÉÂ≠óÁ¨¶Â≠óÊØçaz‰ºöÊ∂àÂ§±Â¶Ç‰∏ãÂõæÔºåËæìÂÖ• &lt;code&gt;yu if&lt;/code&gt; Âç≥Èõ® Ëæ∞ÔºåÁªìÊûúÂá∫Áé∞‰∫ÜÊàë‰ª¨Ë¶ÅÁöÑÈúáÂ≠óÔºå‰∏îÁªôÂá∫‰∫ÜËæÖÂä©Á†Å &lt;code&gt;y&lt;/code&gt; Âíå &lt;code&gt;i&lt;/code&gt; Ôºå&lt;code&gt;y&lt;/code&gt;ÊòØÈõ®ÁöÑÂ£∞ÊØç&lt;code&gt;y&lt;/code&gt;Ôºå&lt;code&gt;i&lt;/code&gt;ÊòØËæ∞ÁöÑÂ£∞ÊØç&lt;code&gt;ch&lt;/code&gt;ÔºåÂêåÊó∂ÂÖºÂÆπÈÄöËøáhspnz‰ª£Ë°®Ê®™Á´ñÊíáÊç∫Êäò‰∫îÁ¨îÁîª„ÄÇÂäüËÉΩ3ÊòØÂäüËÉΩ4ÁöÑÂè¶‰∏ÄÁßçË°®Áé∞ÂΩ¢Âºè,ÊàñËÄÖÂè´Áî®Ê≥ï„ÄÇËøô‰∏™ÂäüËÉΩ‰æùËµñwanxiang_reverse.schema.yamlÊñπÊ°à,ÂèØ‰ª•ÈÄöËøácustomÈÖçÁΩÆÊàê‰ªªÊÑèÂÖ®ÊãºÂèåÊãº‰ª•ÂåπÈÖç‰∏ªÊñπÊ°à‰∏ÄËá¥ÁöÑËæìÂÖ•ÊñπÂºè,Âõ†Ê≠§ÊòØ‰∏çÊòØËæìÂÖ•jn=jinÈúÄË¶ÅÁúã‰Ω†ÂÖ∑‰ΩìÁöÑÂèåÊãºÁ±ªÂûã„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202409280324599355_%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20240928112256.png&quot; alt=&quot;Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20240928112256.png&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÂäüËÉΩ5&lt;/strong&gt; Âè•Â≠ê‰∏≠Èó¥ÊàñËÄÖÂçïÂ≠óËæìÂÖ•Êó∂ÈúÄË¶ÅÂèØ‰ª•‰ΩøÁî®Êõ¥Á≤æÁ°ÆÁöÑËÅöÊã¢ÊñπÂºè&quot;Â£∞Ë∞ÉËæÖÂä©&quot;Ôºå7890Êï∞Â≠óÊåâÈîÆ‰ª£Ë°®1234Â£∞ÔºåËΩªÂ£∞ÂΩíÂπ∂Âà∞4Â£∞ÔºåÂú®ÂäüËÉΩ4‰∏≠Êàë‰ª¨ÂèØ‰ª•Âú®ÂèåÊãº‰∏§Á†ÅÂêéÈù¢3‰∏™ÁºñÁ†ÅÁöÑ‰ΩçÁΩÆ‰ªªÊÑèÊèíÂÖ•Â£∞Ë∞É‰∏é‰∏§‰ΩçËæÖÂä©Á†ÅÊ∑∑Âêà‰ΩøÁî®ÔºåÂ∞±ÊòØÈô§‰∫Ü‰∏çÁî®ÊñúÊù†‰∫ÜÔºåÊàë‰ª¨ËøòÈ°∫Â∫èËá™Áî±‰∫ÜÔºå‰∏ãÈù¢Áî±‰∏§‰∏™ÂõæÁâáËØ¥ÊòéÈóÆÈ¢ò,ÂÖ∂ÂÆûÂú®ÈîÆÁõò‰∏äÊÉ≥Ë¶ÅÂÆâÊéíÂõõ‰∏™ÊåâÈîÆÊòØÂæàÈöæÂæó,‰∏çÊòØÂç†Áî®Ëøô‰∏™ÊåâÈîÆÂ∞±ÊòØÂç†Áî®Âè¶Â§ñÁöÑ,ËøòÊúâÂæóÊúãÂèãËßâÂæóÁ¶ªÂæóËøú,ËøòÊúâÂæóÊõ¥ÊòØ‰∏çÈúÄË¶ÅÂ£∞Ë∞É,Ë¶ÅÊääÂÄôÈÄâÂÅöÊàê9‰∏™„ÄÇËøô‰∫õÈÉΩÊòØÂ≠òÂú®ÁöÑÊÉÖÂÜµ,Áé∞Âú®ÁöÑÂ§ÑÁêÜ‰πüÊòØÂ¶•ÂçèÂêéÁöÑÁªìÊûú,Ë¶ÅÊÉ≥ÂÆåÂÖ®‰∏çÂç†Áî®ÊåâÈîÆÁ±ª‰ººÁöÑÂäûÊ≥ïÂèØ‰ª•ÊîπÊàêÂ§ßÂÜôÂ≠óÊØçÊù•‰ª£Ë°®,ÂÉèÂú∞ÁêÉÊãºÈü≥ÂàôÊòØ‰ΩøÁî®Â§ß‰∫éÂ∞è‰∫éÂè∑Ëøô‰∏ÄÁâáÁöÑÁ¨¶Âè∑Êù•Ë°®Á§∫,Êàë‰ª¨ÁöÑËØçÂ∫ìÊúâÂ£∞Ë∞ÉËøô‰∏™Âü∫Á°Ä,‰∏ÄÂÆöÁ®ãÂ∫¶‰∏äËøòÊòØË¶ÅÂà©Áî®Ëµ∑Êù•Ôºö&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202505120222182012_Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20250512101814.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/20250512022217432_Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20250512101752.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202505120222163619_Êà™Âõæ_ÈÄâÊã©Âå∫Âüü_20250512101713.png&quot; height=&quot;130&quot; width=&quot;520&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;ÂäüËÉΩ6&lt;/strong&gt; Ê∑∑ÂêàËæìÂÖ•:Â≠óÊØç„ÄÅÊ±âÂ≠ó„ÄÅÊï∞Â≠ó„ÄÅÁî®‰∫éËøûÊé•ÁöÑÁâπÊÆäÁ¨¶Âè∑Á≠âÁªÑÂêàÔºå‰ª•ÂèäËã±ÊñáÊ∑∑ËæìÔºåÊàë‰ª¨Áªü‰∏ÄÊîæÂú®‰∫Üwanxiang_mixedcode.schema.yamlÊ∑∑ÂêàÁºñÁ†ÅÊñπÊ°àÈáåÔºåÊ≠§ÂäüËÉΩÊó†ÈúÄÂºïÂØºÔºåÁõ¥Êé•ËæìÂÖ•Ôºå‰∏çÂèÇ‰∏éÁªÑÂè•ÔºåÁ±ª‰ººÔºö1000wclips„ÄÅADÈíôÂ•∂„ÄÅPNÁªì„ÄÅType-C‰ª•ÂèäÁ∫ØËã±ÊñáÔºåÂêåÊ†∑ÂèØ‰ª•ÈÄöËøácustomÊù•ÂÆö‰πâ‰Ω†ÊâÄ‰ΩøÁî®ÁöÑÂèåÊãº„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260105536966_%E6%B7%B7%E5%90%88%E7%BC%96%E7%A0%81.jpg&quot; alt=&quot;‰∏úÈ£é5C&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Êï¥ÂêàËØ¥Êòé&lt;/strong&gt; ‰∏áË±°ÊñπÊ°àÊï¥ÂêàÂ∫¶ÂæàÈ´òÔºåÊàë‰ª¨‰∏çÂ∏åÊúõ‰ΩøÁî®Êà∑Êñá‰ª∂Â§πÂèòÂæóÂ§çÊùÇÔºåÂäüËÉΩ5‰∏≠Êàë‰ª¨Â∞Ü‰∏§Á±ª‰π†ÊÉØÁöÑ‰∫îÁ¨îÁîªÂíåÂ§öÂàÜÊãÜÂ≠óÂíå‰∏§ÂàÜÊãÜÂ≠óÊï¥ÂêàÂà∞‰∫Ü‰∏ÄËµ∑ÔºåÂèØ‰ª•ËÆ§‰∏∫ÊòØ4‰∏™ÊåÇÊé•ÊñπÊ°àÔºõÂú®ÂäüËÉΩ6‰∏≠ÔºåÊàë‰ª¨Â∞Ü Ëã±ÊñáËæìÂÖ•„ÄÅ‰∏≠Ëã±Ê∑∑ÂêàÁºñÁ†Å„ÄÅ‰ª•Âèä‰∏Ä‰∫õÂÖ∂‰ªñÊ∑∑ÂêàÁºñÁ†ÅÊï¥ÂêàÂà∞‰∫Ü‰∏ÄËµ∑ÔºåÂÖ±‰∫´ÊñπÊ°àËΩ¨ÂÜôÔºå‰∏§‰∏™ÂäüËÉΩÈÉΩ‰øùËØÅ‰∫ÜÂèØÈÖçÁΩÆÊÄßÔºåÈÉΩËÉΩ‰∏é‰Ω†ÊâÄ‰ΩøÁî®ÁöÑÂèåÊãºÂ•ëÂêàÔºå ÂØπ‰∫éËØçÂ∫ì‰πüÈÉΩÊï¥ÂêàÂà∞‰∫ÜdictsÈáåÈù¢Ôºå‰∏∫‰∫ÜËÉΩÊõ¥Â•ΩÁöÑÁªü‰∏ÄÊõ¥Êñ∞ÂíåÂàÜÂèëÔºå‰ªìÂ∫ì‰∏≠Êàë‰ª¨ÊîØÊåÅÂü∫Á°ÄÁâàÊú¨ËØçÂ∫ì„ÄÅÊê∫Â∏¶proÁöÑËæÖÂä©Á†ÅÁâàÊú¨ËØçÂ∫ì„ÄÅËã±ÊñáËØçÂ∫ì„ÄÅÊ∑∑ÂêàËØçÂ∫ì4‰∏™Á±ªÂà´ÔºåÂú®release‰∏≠ÂêÑËá™ÂΩíÁ±ªÔºåÊúÄÁªàÂÅöÂà∞‰∫ÜÊ†πÁõÆÂΩï15‰∏™Êñá‰ª∂„ÄÅ4‰∏™Êñá‰ª∂Â§πÁ§∫‰∫∫ÔºåÂÖ∂‰∏≠ÁöÑcustomÁõÆÂΩïËøòÊê∫Â∏¶‰∫ÜÁî®Êà∑Ëá™ÂÆö‰πâÁöÑÊ≥ïÂÆùÁßòÁ±çÔºåËÉΩÁß∞Âæó‰∏äÁÆÄÁ∫¶ËÄå‰∏çÁÆÄÂçï„ÄÇ&lt;/p&gt; 
&lt;h4&gt;ÂÖ∂‰ªñ‰∫ÆÁÇπÂäüËÉΩ&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Êó•Êúü„ÄÅÊó∂Èó¥„ÄÅËäÇÊó•„ÄÅËäÇÊ∞î„ÄÅÈóÆÂÄôÊ®°ÊùøÔºö&lt;/strong&gt; ÂèØ‰ª•Âú®ÊåâÈîÆÈÖçÁΩÆÁöÑÂú∞ÊñπÂÆöÂà∂ÂºïÂØºÂâçÁºÄ&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;key_binder/shijian_keys: [&quot;/&quot;, &quot;o&quot;]&lt;/code&gt; ËøôÊ†∑ÁöÑÈÖçÁΩÆ‰ª•‰∏∫‰Ω†‰Ω†ÂèØ‰ª•/sj‰πüÂèØ‰ª•osjÔºåÊüê‰∫õÊñπÊ°àoÊúâÂà´ÁöÑ‰ΩúÁî®Êó∂ÂÄôÂèØ‰ª•ÂéªÊéâo,ÁÅµÊ¥ªÂ§ÑÁêÜ„ÄÇ&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;#Êó∂Èó¥Ôºöosj ÊàñËÄÖ /sj
#Êó•ÊúüÔºöorq ÊàñËÄÖ /rq
#ÂÜúÂéÜÔºöonl ÊàñËÄÖ /nl
#ÊòüÊúüÔºöoxq ÊàñËÄÖ /xq
#‰ªäÂπ¥Á¨¨Âá†Âë®Ôºöoww ÊàñËÄÖ /ww
#ËäÇÊ∞îÔºöojq ÊàñËÄÖ /jq
#Êó•Êúü+Êó∂Èó¥Ôºöors ÊàñËÄÖ /rs
#Êó∂Èó¥Êà≥Ôºöott ÊàñËÄÖ /tt
#Â§ßÂÜôNÊó•ÊúüÔºöN20250315 ÊàñËÄÖ N0302 Âç≥‰∏çÊ∑ªÂä†Âπ¥
#ËäÇÊó•Ôºöojr ÊàñËÄÖ /jr
#ÈóÆÂÄôÊ®°ÊùøÔºö/day ÊàñËÄÖ oday
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260107542641_N20250102.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260108069991_N0102.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;UnicodeÔºö&lt;/strong&gt; Â§ßÂÜô U ÂºÄÂ§¥ÔºåÂ¶Ç U62fc ÂæóÂà∞„ÄåÊãº„Äç„ÄÇ&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260111366093_UÁ†Å.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;Êï∞Â≠ó„ÄÅÈáëÈ¢ùÂ§ßÂÜôÔºö&lt;/strong&gt; Â§ßÂÜô R ÂºÄÂ§¥ÔºåÂ¶Ç R1234 ÂæóÂà∞„Äå‰∏ÄÂçÉ‰∫åÁôæ‰∏âÂçÅÂõõ„ÄÅÂ£π‰ªüË¥∞‰Ω∞ÂèÅÊãæËÇÜÂÖÉÊï¥„Äç„ÄÇ&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260124573417_ÈáëÈ¢ùÂ§ßÂÜô.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;/ÂºïÂØºÊ®°ÂºèÔºö&lt;/strong&gt; ÈÄöËøáËæìÂÖ• /sx Âø´Êç∑ËæìÂÖ•ÂÖ≥‰∫é‚ÄúÊï∞Â≠¶‚ÄùÁöÑÁâπÊÆäÁ¨¶Âè∑ÔºåÂÖ∑‰ΩìËÉΩËæìÂÖ•‰ªÄ‰πàÂèØ‰ª•ÊâìÂºÄ symbols.yamlÂ≠¶‰π†„ÄÇ&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126183029_Á¨¶Âè∑Êï∞Â≠¶.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126173818_Á¨¶Âè∑Â§ß‰∫é.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260126167252_Á¨¶Âè∑ÂúÜÁÇπ.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;ËÆ°ÁÆóÂô®Ôºö&lt;/strong&gt; ÈÄöËøáËæìÂÖ•Â§ßÂÜôVÂºïÂØºÁªßÁª≠ËæìÂÖ•Â¶ÇÔºöV3+5 ÂÄôÈÄâÊ°ÜÂ∞±‰ºöÊúâ8Âíå3+5=8ÔºåÂü∫Á°ÄÂäüËÉΩ &lt;code&gt;+ - * / % ^&lt;/code&gt; ËøòÊîØÊåÅ &lt;code&gt;sin(x) cos(x)&lt;/code&gt; Á≠â‰ºóÂ§öËøêÁÆóÊñπÂºèÔºåÊâìÂºÄsuper_calculator.luaÈòÖËØªÁõ∏ÂÖ≥Áî®Ê≥ï„ÄÇ&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260127113759_ËÆ°ÁÆóÂô®1.png&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260127126065_ËÆ°ÁÆóÂô®2.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;Ëá™Âä®‰∏äÂ±èÔºö&lt;/strong&gt; ‰æãÂ¶ÇÔºö‰∏â‰Ωç„ÄÅÂõõ‰ΩçÁÆÄÁ†ÅÂîØ‰∏ÄÊó∂ÔºåËá™Âä®‰∏äÂ±èÂ¶Ç&lt;code&gt;jjkwÂ≤åÂ≤åÂèØÂç±&lt;/code&gt; &lt;code&gt;zmhuÊÄé‰πàÂõû‰∫ã&lt;/code&gt; „ÄÇÈªòËÆ§Êú™ÂºÄÂêØÔºåÊñπÊ°àÊñá‰ª∂‰∏≠&lt;code&gt;speller:&lt;/code&gt;Â≠óÊÆµ‰∏ãÂèñÊ∂àÊ≥®ÈáäËøô‰∏§Âè•ÂºÄÂêØ &lt;code&gt;# auto_select: true # auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÈîôÈü≥ÈîôÂ≠óÊèêÁ§∫Ôºö&lt;/strong&gt; ‰æãÂ¶ÇÔºöËæìÂÖ•&lt;code&gt;gei yuÁªô‰∫à&lt;/code&gt;ÔºåËé∑Âæó&lt;code&gt;j«ê y«î&lt;/code&gt;ÊèêÁ§∫ÔºåÊ≠§ÂäüËÉΩ‰∏éÂÖ®Êãº„ÄÅÂèåÊãºÁ±ªÂûãÊó†ÂÖ≥ÂÖ®ÈÉ®ÊîØÊåÅÔºõ&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260127525844_ÈîôÈü≥Áªô‰∫à.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260127524705_ÈîôÈü≥Â¥©Ê∫É.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Âø´Á¨¶LuaÔºö&lt;/strong&gt; ‰æãÂ¶ÇÈÄöËøá &lt;code&gt;a/&lt;/code&gt; ÔºåÂø´ÈÄüËá™Âä®‰∏äÂ±è‚ÄúÔºÅ‚ÄùÁ¨¶Âè∑ÊàñËÄÖÂÆö‰πâ‰∏∫‰ªªÊÑèÂ≠óÁ¨¶Ôºå‰∫´Âèó26Â≠óÊØçÁöÑÊâ©Â±ï„ÄÇÂÖ∂‰∏≠ÂÄºËÆæÁΩÆ‰∏∫&lt;code&gt;repeat&lt;/code&gt;ÂàôÊÑèÂë≥ÁùÄÊåâ‰∏ãÂØπÂ∫îÊåâÈîÆËÉΩÂê¶ÈáçÂ§ç‰∏ä‰∏ÄÊ¨°‰∏äÂ±èÁöÑÂÜÖÂÆπÔºõ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Ë∂ÖÁ∫ßtipsÔºö&lt;/strong&gt; ÊîØÊåÅÂ∞ÜË°®ÊÉÖ„ÄÅÂåñÂ≠¶Âºè„ÄÅÁøªËØë„ÄÅÁÆÄÁ†Å ÊèêÁ§∫Á≠âÁ≠â‰Ω†ËÉΩÊÉ≥Âà∞ÂæóÊï∞ÊçÆËé∑ÂæóÊèêÁ§∫ÊòæÁ§∫Âπ∂Â∞ÜÈÄöËøá‰∏Ä‰∏™Ëá™ÂÆö‰πâÊåâÈîÆÁõ¥Êé•‰∏äÂ±èÔºåÈªòËÆ§‰∏∫‚Äú.‚Äù ‰πüË°®Áé∞‰∏∫Âè•Âè∑ÔºåÂ¶ÇÈúÄÂè•Âè∑ÁøªÈ°µÂèØ‰ª•ÈááÁî®ÂÖ∂‰ªñ‰Ωú‰∏∫Ëß¶Âèë„ÄÇÈÅøÂÖç‰∫ÜËøôÁ±ªÂÜÖÂÆπÂç†Áî®ÂÄôÈÄâÊ°ÜÔºåÈÄöËøáControl+t ËøõË°åÂºÄÂÖ≥„ÄÇ‚ö†Ô∏è‰ªìËæìÂÖ•Ê≥ï„ÄÅË∂ÖË∂äËæìÂÖ•Ê≥ïËÆæÁΩÆÊåâÈîÆ‰∫§Áî±rimeÂéªÂ§ÑÁêÜÔºåÊ≤°ÊúâÁâπÊÆäÈúÄÊ±ÇÂ∫îËØ•‰∏ÄÂæã‰∫§ÁªôrimeÔºõ&lt;/p&gt; 
&lt;p&gt;ÂåñÂ≠¶ÂºèÔºö&lt;img src=&quot;https://storage.deepin.org/thread/202509260128462735_tipsÂåñÂ≠¶Âºè.jpg&quot; height=&quot;80&quot; /&gt;Á¨¶Âè∑Ôºö&lt;img src=&quot;https://storage.deepin.org/thread/202509260128454675_tipsÁ¨¶Âè∑.jpg&quot; height=&quot;80&quot; /&gt;Ë°®ÊÉÖÔºö&lt;img src=&quot;https://storage.deepin.org/thread/202509260128457494_tipsË°®ÊÉÖ.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;È¶ñÈÄâÊ†ºÂºèÂåñÔºö&lt;/strong&gt; Â∞ÜËá™ÂÆö‰πâÁü≠ËØ≠‰∏≠ÔºåËØ∏Â¶Ç\n \s \t Á≠âË°å‰∏≠Ê†áËØÜÁ¨¶ËΩ¨Êç¢‰∏∫ÂÆûÈôÖÁöÑÊç¢Ë°å„ÄÅÁ©∫Ê†º„ÄÅÂà∂Ë°®Á¨¶Á≠âÁ≠âÔºå‰ΩøÂæóÁ±ª‰ººËæìÂÖ•jysÂèØ‰ª•ÊâìÂá∫‰∏ÄÈ¶ñÂ∏¶Ê†ºÂºèÁöÑ„ÄäÈùôÂ§úÊÄù„ÄãÔºåËøôÂ∞ÜÊàê‰∏∫Á±ª‰ºº‰π¶ÂêçÂè∑ËæìÂÖ•Âú∫ÊôØÁöÑÂà©Âô®„ÄÇ&lt;/p&gt; 
&lt;p&gt;‰æãÔºö&lt;code&gt;ÈùôÂ§úÊÄù\n\s\sÊùéÁôΩ\nÂ∫äÂâçÊòéÊúàÂÖâ\nÁñë‰ººÂú∞‰∏äÈúú\n‰∏æÂ§¥ÊúõÊòéÊúà\n‰ΩéÂ§¥ÊÄùÊïÖ‰π° jys&lt;/code&gt;&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260129305342_Ê†ºÂºèÂåñ.jpg&quot; height=&quot;260&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;È¶ñÈÄâÂä†ÊàêÂØπÁ¨¶Âè∑Ôºö&lt;/strong&gt; Â∞ÜËæìÂÖ•‰∏≠ÁöÑÁü≠ËØ≠ÈÄöËøáËæìÂÖ•ËøΩÂä†\a ËøôÊ†∑ÁöÑÊú´Â∞æÁºñÁ†ÅÔºåËß¶ÂèëÁõ∏ÂØπ‰∫éaËøô‰∏™Â≠óÊØçÊò†Â∞ÑÁöÑÊàêÂØπÁ¨¶Âè∑Ôºå‰æãÂ¶ÇÔºö&lt;code&gt; sj mk lq lh ji\l=„Ää‰∏âÊØõÊµÅÊµ™ËÆ∞„Äã&lt;/code&gt;ÂèØ‰ª•ÈÄöËøácustomËá™ÂÆö‰πâÁ¨¶Âè∑ÂíåËß¶ÂèëÊñπÂºè„ÄÇ&lt;/p&gt; 
&lt;p&gt;Â∑•‰ΩúÈÄªËæëÔºöËæìÂÖ•ËØçÊ±áÁºñÁ†Å &amp;gt; Êåâ‰∏ãÈîÅÂÆöÊåâÈíÆ\ &amp;gt; Êåâ‰∏ãÊò†Â∞ÑÂ≠óÁ¨¶\a &amp;gt; „ÄäÂÄôÈÄâÂåÖË£πÊàêÂØπÁ¨¶Âè∑„Äã&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://storage.deepin.org/thread/202509260130219621_È¶ñÈÄâÊàêÂØπÁ¨¶Âè∑1.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260130208277_È¶ñÈÄâÊàêÂØπÁ¨¶Âè∑2.jpg&quot; height=&quot;80&quot; /&gt; &lt;img src=&quot;https://storage.deepin.org/thread/202509260130199763_È¶ñÈÄâÊàêÂØπÁ¨¶Âè∑3.jpg&quot; height=&quot;80&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Ëã±ÊñáÂÄôÈÄâÊ†ºÂºèÂåñÔºö&lt;/strong&gt; ËæìÂÖ•helloÂàôÂæóÂà∞helloÔºåËæìÂÖ•È¶ñÂ≠óÊØçÂ§ßÂÜôHelloÂàôÂæóÂà∞HelloÂíå‰∏Ä‰ºóÈ¶ñÂ≠óÊØçÂ§ßÂÜôÁöÑËÅîÊÉ≥ËØçÔºåËæìÂÖ•Ââç‰∏§Á†ÅÂ§ßÂÜôHElloÂàôÂæóÂà∞ÂÖ®‰∏∫Â§ßÂÜôÁöÑHELLOÂíå‰∏Ä‰ºóÂ§ßÂÜôËã±Êñá„ÄÇ&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260133175234_È¶ñÂ≠óÊØçÂ§ßÂÜô.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260133175362_ÂèåÂ≠óÊØçÂ§ßÂÜô.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;ËæÖÂä©Á†ÅÊèêÁ§∫Ôºà‰ªÖPROÔºâÔºö&lt;/strong&gt; ‰ªªÊÑèÈïøÂ∫¶ÂÄôÈÄâËØçÁöÑËæÖÂä©Á†ÅÊèêÁ§∫ËÉΩÂäõÔºåÈªòËÆ§ÂºÄÂêØ1‰∏™Â≠óÁöÑËæÖÂä©Á†ÅÔºåÂèØ‰ª•Âú®ÊñπÊ°àÊñá‰ª∂‰∏≠ÂÆö‰πâÊõ¥ÈïøÁöÑÈïøÂ∫¶„ÄÇCtrl+aÂèØ‰ª•ÂÆûÊó∂Âú®ÂºÄÂêØËæÖÂä©Á†ÅÊèêÁ§∫„ÄÅÂºÄÂêØÂ£∞Ë∞ÉÂÖ®ÊãºÊèêÁ§∫„ÄÅÂÖ≥Èó≠Ê≥®Èáä ‰∏â‰∏™Áä∂ÊÄÅÂæ™ÁéØÔºåCtrl+cÂºÄÂêØÊãÜÂàÜËæÖÂä©ÊèêÁ§∫Ôºå‰ºòÂÖàÁ∫ßÈ´ò‰∫éÊôÆÈÄöËæÖÂä©ÊèêÁ§∫Ôºõ&lt;/p&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134283927_ËæÖÂä©Á†ÅÊèêÁ§∫.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134278003_Â£∞Ë∞ÉÊèêÁ§∫.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;img src=&quot;https://storage.deepin.org/thread/202509260134284782_ÊãÜÂàÜÊèêÁ§∫.jpg&quot; height=&quot;80&quot; /&gt; 
&lt;p&gt;&lt;strong&gt;ËæìÂÖ•Á†ÅÈü≥Ë∞ÉÊòæÁ§∫Ôºö&lt;/strong&gt; ÈÄöËøáCtrl+sÂèØ‰ª•‰ΩøÂæóËæìÂÖ•Á†ÅÂÆûÊó∂Âä®ÊÄÅÊòæÁ§∫ÂÖ®ÊãºÂπ∂Âä†Èü≥Ë∞ÉÔºåËøôÊòØ‰∏áË±°ÁâπËâ≤ÂäüËÉΩÔºõ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Áî®Êà∑ÊåâÈúÄÈÄ†ËØçÔºà‰ªÖPROÔºâÔºö&lt;/strong&gt; ÈªòËÆ§ÈÄöËøá&lt;code&gt;``&lt;/code&gt;ÂºïÂØºÁöÑÊñπÂºèËøõÂÖ•Áî®Êà∑ËØçËá™ÈÄ†ËØçÊ®°ÂºèÔºåÁªßÁª≠ËæìÂÖ•Âàô&lt;code&gt;``&lt;/code&gt;ÂâçÁºÄÊ∂àÂ§±ÔºåÂêéÈù¢ÊâìÂá∫Êù•ÁöÑÂ≠ó‰∏äÂ±èÂêéÂÆåÊàêÈÄ†ËØç„ÄÇ proÁâàÊú¨ËÆ≤Á©∂Ëá™‰∏ªÂèØÊéßÔºåÁî±‰∫éËæÖÂä©Á†ÅÁöÑ‰ΩøÁî®Âú®ÂæàÂ§öÊó∂ÂÄô‰∏çÁÜüÊÇâÁöÑÊó∂ÂÄôÂèØËÉΩ‰ºö‰∏äÂ±èÊõ¥Âä†ÂºÇÂ∏∏ÁöÑËØçÊ±áÊàñËÄÖÁîüÂÉªÂ≠óÔºåÊúâÁöÑÁî®Êà∑Ëøò‰∏ç‰ºö‰ΩøÁî®EscÈÄÄÂá∫ËæìÂÖ•ÔºåËÄåÊòØÈÄâÊã©Áõ¥Êé•Êï≤‰∏ãÁ©∫Ê†º„ÄÇÊåâÈúÄÈÄ†ËØçÂèØ‰ª•ÊúâÊïàÊääÊéßÈÄ†Âá∫ÁöÑËØçÊòØÊúâÊÑè‰πâÁöÑÔºåËÄå‰∏îÈªòËÆ§Èù†ÂêéÔºåÂéüÂõ†ÁÆÄÂçïÂü∫Êú¨‰∏äÊúâÊÑè‰πâÁöÑÈ´òÈ¢ëËØç‰∏áË±°Â∑≤ÁªèÊèê‰æõÔºå‰Ω†Â∫îËØ•‰ΩøÁî®ËæÖÂä©Á†ÅÂ∞ÜÂÖ∂ÂâçÁΩÆ„ÄÇ&lt;strong&gt;ÈáçÁÇπ&lt;/strong&gt;ÔºöÂú®Ê≠§Âü∫Á°Ä‰∏äÊàë‰ª¨ËøòÊîØÊåÅ‚ÄúÂêéËß¶Âèë‚ÄùÂΩì‰Ω†ËæìÂÖ•ÁºñÁ†ÅÂêéÂèëÁé∞Ê≤°Êúâ‰Ω†Ë¶ÅÁöÑË°å‰∏öËØçÊ±áÔºåÊ≠§Êó∂Âú®ÂêéÈù¢ÂèåÂáª&lt;code&gt;``&lt;/code&gt; Â∞±ÂèØ‰ª•Âú®‰∏çÂà†Èô§ÁºñÁ†ÅÁöÑÊÉÖÂÜµ‰∏ãÂÆåÊàêÈÄ†ËØç„ÄÇËøòÊúâ‰∏Ä‰∏™ÊòØÊ¨°ÈÄâÈÄ†ËØçÔºåÂ¶ÇÊûúÊ¨°ÈÄâÊòØ‰Ω†ÊÉ≥Ë¶ÅÁöÑÔºåÂπ∂‰∏îÊòØËØçÂ∫ìÁªÑÂêàÊàêÁöÑÔºå‰∏äÂ±èÂ∞±‰ºöËÆ∞ÂΩï‰∏ãÊù•„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÊÄªÁªì‰∏Ä‰∏ãÔºåÈÄ†ËØçÂäüËÉΩÁî±Ôºö‚ë†&lt;code&gt;``&lt;/code&gt;Ëµ∑ÂßãÁöÑ‰∏ªÂä®ÈÄ†ËØçÔºå‚ë°&lt;code&gt;``&lt;/code&gt;Âú®ÁºñÁ†ÅÂêéÈù¢ÁöÑ‰∏ªÂä®ÈÄ†ËØçÔºå‚ë¢Ê¨°ÈÄâÈÄ†ËØç„ÄÇ‰∏â‰∏™ÁâπÊÄßÊûÑÊàê&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Êó†ÊÑüÈÄ†ËØçÔºà‰ªÖPROÔºâÔºö&lt;/strong&gt; Âú®ÂÖ≥Èó≠Ë∞ÉÈ¢ëÁöÑÊÉÖÂÜµ‰∏ãÔºåÈÄöËøáÈÄêÊ≠•ÈÄâÂ≠óÈÄâËØçÁöÑÊñπÂºè‰∏äÂ±èÂ∞Ü‰∏∫‰Ω†ËÆ∞ÂΩïÊï¥ÊÆµÔºå‰∏î‰∏ç‰ºö‰∫ßÁîüÂ∞èÁ¢éÁâáÔºåÊâÄÈÄ†ËØçÊ±á‰∏édbÁî®Êà∑ËØçÊòØ‰∏ÄÂõû‰∫ãÔºåÈÅµÂæ™Áî®Êà∑ËØçÁÆ°ÁêÜÁöÑÁõ∏ÂÖ≥ÈÄªËæëÔºåÂÖ∂‰∏≠Áõ¥Êé•‰∏äÂ±è‰∏çÈÄ†ËØç„ÄÇÁõ∏ÊØîÊåâÈúÄÈÄ†ËØçÊõ¥Âä†‰∏çÊâìÊñ≠ËæìÂÖ•„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Áî®Êà∑ËØçÂà†Èô§Ôºö&lt;/strong&gt; ‰ΩøÁî®Ctrl+delÊòØrimeÁ≥ªÁªüÂà†Èô§Áî®Êà∑ËØç,Â∞±ÂèØ‰ª•Â∞ÜÁî®Êà∑ËØçÊ†áËÆ∞‰∏∫c&amp;lt;=0ÔºåËøôÂú®rimeÁ≥ªÁªü‰∏≠Â∞±Ë°®Áé∞‰∏∫‰∏ç‰ΩøÁî®ÔºåÂÅáÊÄßÂà†Èô§„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÊâãÂä®ÊéíÂ∫èÔºàLuaÔºâÔºö&lt;/strong&gt; ‚ë†ËØçÂÖ∏ÂÄôÈÄâÁ±ªÂûãÔºöÂØπÈÄâ‰∏≠ÁöÑÂÄôÈÄâËØçÊìç‰ΩúÔºå‰ΩøÁî®Ctrl+jÂêëÂ∑¶‰∏ÄÊ≠•ÔºåCtrl+kÂêëÂè≥‰∏ÄÊ≠•ÔºåCtrl+l(Èõ∂)ÁßªÈô§ÈÄâ‰∏≠ÊéíÂ∫è‰ø°ÊÅØÔºåCtrl+p ÁΩÆÈ°∂ÈÄâ‰∏≠ÂÄôÈÄâ„ÄÇÂÖ∂‰ΩúÁî®‰∫éÂΩìÊó∂ÁºñÁ†Å‰∏éÂÄôÈÄâËØçÔºõ‚ë°Âä®ÊÄÅÁîüÊàêÁöÑLuaÂÄôÈÄâÔºåÂæàÂ§öÊó∂ÂÄôÊàë‰ª¨ÂØπÊó•Êúü„ÄÅÊó∂Èó¥Á≠âËæìÂá∫Ê†ºÂºèÈ¶ñÈÄâÊúâÁùÄËá™Â∑±ÁöÑËøΩÊ±ÇÔºåÂ§çÊùÇÁöÑÈÖçÁΩÆÂèàÂæÄÂæÄÊèêÂçá‰∫Ü‰ΩøÁî®ÈöæÂ∫¶Ôºå‰∫éÊòØÊàë‰ª¨Âü∫‰∫éÊéíÂ∫èLuaÂÆûÁé∞‰∫ÜÂä®ÊÄÅÂÜÖÂÆπÁöÑÊåâÂ∫èÂè∑Á¥¢ÂºïÁöÑÊéíÂ∫èÔºå‰πüÂ∞±ÊòØËØ¥ËØ•Â∫èÂè∑‰∏ãÂéüÊú¨ÁîüÊàêÁöÑÊ†ºÂºèÊï¥‰∏™ÂèëÁîü‰∫Ü‰ΩçÁΩÆÂèòÂåñÔºå‰ΩøÁî®ÊñπÊ≥ï‰∏ÄËá¥„ÄÇ‰ø°ÊÅØÂÇ®Â≠ò‰∫éLuaÊñá‰ª∂Â§π‰∏ãÊéíÂ∫èÊï∞ÊçÆÂ∫ì‰∏≠sequence.userdbÔºåÊîØÊåÅÂØºÂá∫ÂØºÂÖ•Êï∞ÊçÆ‰æø‰∫éÂ§öËÆæÂ§áÂÖ±Áî®„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÊéíÂ∫è‰ø°ÊÅØÂêåÊ≠•Ôºö&lt;/p&gt; 
&lt;p&gt;A ÂÖàÁÇπÂáªÂêåÊ≠•ÔºåÂ§öËßÅ‰∫éÂè≥ÈîÆËèúÂçïÔºå‰øùËØÅÂàõÂª∫‰∫ÜÁõ∏Â∫îÁöÑÂêåÊ≠•ÁõÆÂΩïÔºåÂ¶ÇÊ≤°ÊúâËá™ÂÆö‰πâÂàô‰Ωç‰∫éÁî®Êà∑ÁõÆÂΩï‰∏ã/sync&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;ÊâìÂºÄÁî®Êà∑ÁõÆÂΩïÔºå‰ºöÊúâinstallation.yamlÊñá‰ª∂ÔºåÊâìÂºÄÂêé‰ºöÊúâÂ¶Ç‰∏ã‰ø°ÊÅØÔºåÊàë‰ª¨Â∞Üinstallation_idËÆ§‰∏∫ÊòØËÆæÂ§áidÔºåÂàùÊ¨°‰ºöÂàõÂª∫Ëá™Âä®‰∏≤Âè∑Ôºå‰Ω†‰πüÂèØ‰ª•Â∞ÜÂÖ∂‰øÆÊîπ‰∏∫ÂΩìÂâçËÆæÂ§áÂêçÁß∞&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;distribution_code_name: &quot;fcitx-rime&quot;
distribution_name: Rime
distribution_version: 5.1.9
install_time: &quot;Mon Jun 23 18:47:55 2025&quot;
installation_id: &quot;ff9b2823-8733-44bb-a497-daf382b74ca5&quot;  #ËøôÈáåÂèØ‰ª•ÈöèÊÑèÁºñËæëÔºåÊØîÂ¶Ç‰øÆÊîπ‰∏∫windows
rime_version: 1.13.1
update_time: &quot;Sat Sep  6 16:08:56 2025&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ÂæóÂà∞Ëøô‰∏™idÂêéÊàë‰ª¨Â∞±ÂèØ‰ª•‰∏ã‰∏ÄÊ≠•ÊûÑÂª∫Âá∫ÂêåÊ≠•Êñá‰ª∂ÁöÑÂêçÁß∞sequence_ËÆæÂ§áid.txt&lt;/p&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;È¶ñÂÖàÁ°ÆÂÆö‰∏Ä‰∏™‰∏ªË¶ÅÁÆ°ÁêÜËÆæÂ§áÔºåÂú®/sync‰∏≠ÂàõÂª∫‰∏Ä‰∏™ÊèèËø∞ËÆæÂ§áÊ∏ÖÂçïÁöÑÊñá‰ª∂ &lt;code&gt;sequence_device_list.txt&lt;/code&gt;ÔºåËøô‰∏™Ê∏ÖÂçïÂëäËØâÁ®ãÂ∫èË¶ÅËØªÂèñÂêåÁõÆÂΩï‰∏ãÂì™‰∫õÊñá‰ª∂ËøõË°åÂêàÂπ∂&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ÂÜÖÈÉ®ÂÜÖÂÆπ‰∏∫Ôºö&quot;&gt;sequence_deepin.txt
sequence_windows.txt
sequence_iPhone.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;Êåâ„ÄåÈÉ®ÁΩ≤„ÄçÔºå‰ºöËøõË°å‰ª•‰∏ãÂá†Ê≠•Ôºö&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;‚ë†„ÄÅËá™Âä®ÂØºÂá∫Êï∞ÊçÆÂà∞ &lt;code&gt;sequence_deepin.txt&lt;/code&gt; Êñá‰ª∂(ÂÅáËÆæ‰∏∫ÂΩìÂâçËÆæÂ§á)ÔºåÂõ†Ê≠§Ëøô‰∏™ÂΩìÂâçËÆæÂ§áÊñá‰ª∂‰ºöË¢´Ë¶ÜÁõñÔºåËØ∑‰∏çË¶ÅÊâãÂä®‰øÆÊîπÈÅøÂÖç‰∏¢Â§±Ôºõ&lt;/p&gt; 
&lt;p&gt;‚ë°„ÄÅËØªÂèñÂàóË°®‰∏≠ÂàóÂá∫ÁöÑÊñá‰ª∂ÔºåÊåâÊó∂Â∫è‰ª•‰øùÁïôÊúÄÊñ∞Âä®‰Ωú‰∏∫‰æùÊçÆËøõË°åÂéªÈáçÂêàÂπ∂ÔºåÂêàÂπ∂ÂêéÊï∞ÊçÆÂ∞Ü‰ºöÂõûÂÜôÂà∞ &lt;code&gt;sequence_deepin.txt&lt;/code&gt; Êñá‰ª∂Ôºõ&lt;/p&gt; 
&lt;p&gt;‚ë¢„ÄÅÂ∞ÜÂêàÂπ∂ÂêéÁöÑÊñá‰ª∂ÂØºÂÖ•dbÊï∞ÊçÆÂ∫ìÔºåÂÆåÊàêÊï∞ÊçÆÂêàÂπ∂ÔºåÊ≥®ÊÑèp=0ÁöÑÈáçÁΩÆÂêéÁöÑÁºñÁ†Å‰∏ç‰ºöÂØºÂÖ•Êï∞ÊçÆÂ∫ìÔºåÂ¶ÇÊï∞ÊçÆÂ∫ìÂéüÊú¨ÊúâÂØπÂ∫îÁöÑËØçÊ±áÔºåÂ∞ÜÂà†Èô§ÂØπÂ∫îÁöÑÈîÆ„ÄÇ&lt;/p&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;ÈÄöËøá‰∫ëÂêåÊ≠•Â∞Ü/syncÂÆåÊàêÂêåÊ≠•Âà∞windowsËÆæÂ§áÔºåÂêåÊ≠•ÂêéÔºåÁºñËæë &lt;code&gt;sequence_device_list.txt&lt;/code&gt;Â∞Üsequence_windows.txtÂÜôÂÖ•Êñá‰ª∂ÔºåËÆ©ÂêåÊ≠•Á®ãÂ∫èÂÜçÊ¨°ÂÆåÊàêÂ§öÁ´ØÂêåÊ≠•&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Ê≠§Êó∂ÁõÆÂΩï‰∏≠Â∑≤ÁªèÂ≠òÂú®Â¶Ç‰∏ãÊñá‰ª∂ÔºåÊ≠§Êó∂ÈáçÊñ∞ÈÉ®ÁΩ≤ÔºåÁ®ç‰ΩúÁ≠âÂæÖÂ∞Ü‰ºöÂÆåÊàê&lt;code&gt;sequence_windows.txt&lt;/code&gt;ÁöÑËæìÂá∫&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_device_list.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_deepin.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sequence_windows.txt&lt;/code&gt; #ÂêåÊ≠•ÂêéÊñ∞Â¢û&lt;/p&gt; 
&lt;p&gt;ÂÜçÊ¨°ÊâãÂä®ÂÆåÊàêÊâãÂä®‰∫ëÂêåÊ≠•ÔºåÂèäÊó∂ËÆ©Êñá‰ª∂ÂØπÈΩê„ÄÇ&lt;/p&gt; 
&lt;p&gt;B ÈáçÂ§ç‰ª•‰∏äÊìç‰ΩúÂÆåÊàêÊõ¥Â§öËÆæÂ§áÁöÑÊ∑ªÂä†ÂíåÂêåÊ≠•&lt;/p&gt; 
&lt;p&gt;Áî±‰∫éÊ≠§ÊµÅÁ®ã‰∏∫Ê®°ÊãürimeÂêåÊ≠•ÁöÑÊñπÂºèÔºårimeÁöÑÂêåÊ≠•Êú¨Ë¥®‰∏äÂ∞±ÊòØÂ§öÁ´ØÁöÑÊï∞ÊçÆÂêàÂπ∂ÁöÑËøáÁ®ãÔºåÂèØÈù†ÊÄßÂèØËÉΩÁõ∏ËæÉ‰∫éÂéüÁîüËæÉÂº±‰∏Ä‰∫õÔºåÂ∞§ÂÖ∂ÊòØiPhoneÂèØËÉΩÈÅáÂà∞Êõ¥Â§öÈóÆÈ¢ò„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Â£∞Ë∞ÉËæÖÂä©ÂõûÈÄÄÔºàLuaÔºâÔºö&lt;/strong&gt; ‰∏áË±°ÊòØÂ∞Ü7890Áî®‰∫é‰ª£Ë°®1234Â£∞ÔºåËΩªÂ£∞ÂΩíÂπ∂Âà∞‰∫Ü4ÔºåÊàë‰ª¨ÊîØÊåÅÂú®‰æãÂ¶ÇËæìÂÖ•ni9ÂêéÂèëÁé∞ÊàëÂèØËÉΩË¶Å4Â£∞Ôºåni0ÔºåÊ≠§Êó∂Êàë‰ª¨Êó†ÈúÄÂà†Èô§Êï∞Â≠ó9ËÄåÊòØÁõ¥Êé•ËæìÂÖ•ÂØπÁöÑ0ÔºåÁ±ª‰ººÊâãÂä®Âú®7890‰πãÈó¥ËΩÆÂ∑°ÔºåËÉΩÊúâÊïàÂø´ÈÄüÊèêÂçáÂ£∞Ë∞ÉËæÖÂä©ÁöÑÊïàÁéáÔºåÂáèÂ∞ë‰ΩøÁî®Ë¥üÊãÖÔºå‰πüÊòØ‰∏áË±°Áã¨ÂàõÂäüËÉΩ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Âà†Èô§ÈîÆÈôêÂà∂ÔºàLuaÔºâÔºö&lt;/strong&gt; ÂèØ‰ª•Âú®ËæìÂÖ•‰∏≠ÂΩìÊåÅÁª≠Êåâ‰∏ãÂà†Èô§ÁºñÁ†Å‰∏∫0Êó∂‰ºöÂç°‰ΩèÔºåÊä¨Ëµ∑ÈáçÊñ∞Êåâ‰∏ãÊâçËÉΩÁªßÁª≠Âà†Èô§Â∑≤Áªè‰∏äÂ±èÂÜÖÂÆπÔºåÈÅøÂÖçËØØÂà†Èô§‰∏äÂ±èÂÜÖÂÆπ„ÄÇÁõÆÂâç‰ªÖPCÂèØÁî®Ôºå‰πüÊòØ‰∏áË±°Áã¨ÂàõÂäüËÉΩ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ËæìÂÖ•ÈïøÂ∫¶ÈôêÂà∂ÔºàLuaÔºâÔºö&lt;/strong&gt; ÂØπ‰∏§Á±ªÂú∫ÊôØËøõË°åÈôêÂà∂ÔºåÈÅøÂÖçÊï∞ÊçÆÂπ∂ÂèëÂç°È°øÔºö1„ÄÅÈáçÂ§çËæìÂÖ•8‰∏™ËøûÁª≠Áõ∏ÂêåÁöÑÂ≠óÊØçÔºåaaaaaaaa‰ºöÊèêÁ§∫:Â∑≤Ë∂ÖÊúÄÂ§ßÈáçÂ§çÂ£∞ÊØç„ÄÇÂõ†‰∏∫ËøûÁª≠Â§ö‰∏™ÁöÑÈáçÂ§çÂ≠óÊØç‰ºöÈÄ†Êàê‰∏•ÈáçÁöÑÂç°È°øÔºõ2„ÄÅÂàÜËØçÁâáÊÆµÈôêÂà∂Âú®30‰∏™Ôºå‰πüÂ∞±ÊòØ30‰∏™Â≠óÔºåËøáÈïøÁöÑËØ≠Âè•‰ª∑ÂÄº‰∏çÂ§ßËøò‰ºöÈÄ†ÊàêÂç°È°ø„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TabÂæ™ÁéØÂàáÊç¢Èü≥ËäÇÔºö&lt;/strong&gt; ÂΩìËæìÂÖ•Â§ö‰∏™Â≠óËØçÊó∂ÊÉ≥Ë¶ÅÁªôÂâçÈù¢Ë°•ÂÖÖËæÖÂä©Á†ÅÔºåÂèØ‰ª•Â§öÊ¨°Êåâ‰∏ãtabÂæ™ÁéØÂàáÊç¢ÔºåËøôÁßçÂèØËÉΩÊØîÈÇ£‰∫õÂ§çÊùÇÁöÑÂø´Êç∑ÈîÆÂ•ΩÁî®‰∏Ä‰∫õÔºõ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÁøªËØëÊ®°ÂºèÔºö&lt;/strong&gt; ËæìÂÖ•Áä∂ÊÄÅÊåâ‰∏ãCtrl+EÂø´Êç∑ÈîÆËøõÂÖ•ÁøªËØëÊ®°ÂºèÔºåÂéüÁêÜÊòØopenccÊü•Ë°®ËøõË°å‰∏≠Ëã±Êñá‰∫íËØëÔºåËÉΩÂê¶ÁøªËØëÂèñÂÜ≥‰∫éËØçË°®ÁöÑ‰∏∞ÂØåÂ∫¶Ôºõ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Â≠óÁ¨¶ÈõÜËøáÊª§Ôºö&lt;/strong&gt; ÈªòËÆ§ÂºÄÂêØËøáÊª§ÔºåÂÜôÂú®charset.dict.yamlÁöÑÂ∞±ÊòØÂèØ‰ª•ÈÄöËøáÁöÑÂ≠óË°®ÔºåÈªòËÆ§‰∏∫8105+∞ªû∞ªûÔºåÂ¶ÇÊûú‰Ω†ÊÉ≥‰ªÄ‰πàÂ≠óÂú®Â∞èÂ≠óÈõÜÊ®°ÂºèÂèØ‰ª•ÈÄöËøáÂèØ‰ª•ÂÜôÂú®ËøôÈáåÔºåÈÖçÂ•óÂºÄÂÖ≥„ÄêÂ∞èÂ≠óÈõÜ„ÄÅÂ§ßÂ≠óÈõÜ„ÄëÔºåÂø´Êç∑ÈîÆCtrl+g&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Ëá™ÂÆö‰πâËØçÂ∫ìÔºö&lt;/strong&gt; Ëá™ÂÆö‰πâËØçÂ∫ìÈ¶ñÂÖàË¶ÅÂà©Áî®&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;LMDG&lt;/a&gt;‰∏≠ÁöÑËÑöÊú¨Â∞Ü‰Ω†Ëá™Â∑±ÁöÑËØçÂ∫ìÂà∑Êàê‰∏é‰∏áË±°ÂêåÁ±ªÂûãÁöÑÂ£∞Ë∞É„ÄÅÊàñËÄÖÂ£∞Ë∞É+ËæÖÂä©Á†ÅÁöÑÂΩ¢ÊÄÅÔºåÂõ†‰∏∫‰∏ªËØçÂ∫ìË¶ÅÂèÇ‰∏éËΩ¨ÂÜô„ÄÇÂØπ‰∫écustom_phraseÂàôÈúÄË¶ÅÊâãÂä®ÁºñËæëÁºñÁ†Å‰∏∫ÂÆûÈôÖËæìÂÖ•ÁöÑÁºñÁ†Å&lt;/p&gt; 
&lt;img alt=&quot;pay&quot; src=&quot;./custom/‰∏áË±°ËæìÂÖ•ÊñπÊ°à.png&quot; /&gt; 
&lt;h2&gt;È∏£Ë∞¢&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÊÑüË∞¢ÁΩëÂèãÁöÑÁÉ≠ÊÉÖÊèêÊä•ÈóÆÈ¢òÔºå‰ΩøÂæóÊ®°ÂûãÂíåËØçÂ∫ì‰ΩìÈ™åËøõ‰∏ÄÊ≠•ÊèêÂçá„ÄÇ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ËµûËµè&lt;/h2&gt; 
&lt;p&gt;Â¶ÇÊûúËßâÂæóÈ°πÁõÆÂ•ΩÁî®ÔºåÂèØ‰ª•ËØ∑AMZÂñùÂíñÂï°&lt;/p&gt; 
&lt;img alt=&quot;pay&quot; src=&quot;./custom/ËµûËµè.jpg&quot; height=&quot;312&quot; width=&quot;446&quot; /&gt;</description>
    </item>
    
    <item>
      <title>jdhao/nvim-config</title>
      <link>https://github.com/jdhao/nvim-config</link>
      <description>&lt;p&gt;A modern Neovim configuration with full battery for Python, Lua, C++, Markdown, LaTeX, and more...&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt; &lt;a&gt; &lt;img alt=&quot;Linux&quot; src=&quot;https://img.shields.io/badge/Linux-%23.svg?style=flat-square&amp;amp;logo=linux&amp;amp;color=FCC624&amp;amp;logoColor=black&quot; /&gt; &lt;/a&gt; &lt;a&gt; &lt;img alt=&quot;macOS&quot; src=&quot;https://img.shields.io/badge/macOS-%23.svg?style=flat-square&amp;amp;logo=apple&amp;amp;color=000000&amp;amp;logoColor=white&quot; /&gt; &lt;/a&gt; &lt;a&gt; &lt;img alt=&quot;Windows&quot; src=&quot;https://img.shields.io/badge/Windows-%23.svg?style=flat-square&amp;amp;logo=windows&amp;amp;color=0078D6&amp;amp;logoColor=white&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Neovim-0.11.4-blueviolet.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;logoColor=green&quot; alt=&quot;Neovim minimum version&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/jdhao/nvim-config/search?l=vim-script&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/languages/top/jdhao/nvim-config&quot; alt=&quot;Top languages&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/jdhao/nvim-config/graphs/commit-activity&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/jdhao/nvim-config?style=flat-square&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/jdhao/nvim-config/graphs/contributors&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/jdhao/nvim-config?style=flat-square&quot; /&gt; &lt;/a&gt; &lt;a&gt; &lt;img src=&quot;https://img.shields.io/github/repo-size/jdhao/nvim-config?style=flat-square&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/jdhao/nvim-config/raw/master/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/jdhao/nvim-config?style=flat-square&amp;amp;logo=GNU&amp;amp;label=License&quot; alt=&quot;License&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://deepwiki.com/jdhao/nvim-config&quot;&gt; &lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;deepwiki&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;This repo hosts my Nvim configuration for Linux, macOS, and Windows. &lt;code&gt;init.lua&lt;/code&gt; is the config entry point for terminal Nvim, and &lt;code&gt;ginit.vim&lt;/code&gt; is the additional config file for &lt;a href=&quot;https://github.com/neovim/neovim/wiki/Related-projects#gui&quot;&gt;GUI client of Nvim&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;My configurations are heavily documented to make it as clear as possible. While you can clone the whole repository and use it, it is not recommended though. Good configurations are personal. Everyone should have his or her unique config file. You are encouraged to copy from this repo the part you want and add it to your own config.&lt;/p&gt; 
&lt;p&gt;To reduce the possibility of breakage, &lt;strong&gt;this config is only maintained for &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;the latest nvim stable release&lt;/a&gt;. No effort is spent on maintaining backward compatibility.&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;Install and setup&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/jdhao/nvim-config/main/docs/README.md&quot;&gt;doc here&lt;/a&gt; on how to install Nvim&#39;s dependencies, Nvim itself, and how to set up on different platforms (Linux, macOS, and Windows).&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Plugin management via &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;Lazy.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Code, snippet, word auto-completion via &lt;a href=&quot;https://github.com/hrsh7th/nvim-cmp&quot;&gt;nvim-cmp&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Language server protocol (LSP) support via &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;nvim-lspconfig&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Git integration via &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;vim-fugitive&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Better escaping from insert mode via &lt;a href=&quot;https://github.com/nvim-zh/better-escape.vim&quot;&gt;better-escape.vim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Ultra-fast project-wide fuzzy searching via &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua&quot;&gt;fzf-lua&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Faster code commenting via &lt;a href=&quot;https://github.com/tpope/vim-commentary&quot;&gt;vim-commentary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Faster matching pair insertion and jump via &lt;a href=&quot;https://github.com/windwp/nvim-autopairs&quot;&gt;nvim-autopairs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Smarter and faster matching pair management (add, replace or delete) via &lt;a href=&quot;https://github.com/machakann/vim-sandwich&quot;&gt;vim-sandwich&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Fast buffer jump via &lt;a href=&quot;https://github.com/phaazon/hop.nvim&quot;&gt;hop.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Powerful snippet insertion via &lt;a href=&quot;https://github.com/SirVer/ultisnips&quot;&gt;Ultisnips&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Beautiful statusline via &lt;a href=&quot;https://github.com/nvim-lualine/lualine.nvim&quot;&gt;lualine.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;File tree explorer via &lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;nvim-tree.lua&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Better quickfix list with &lt;a href=&quot;https://github.com/kevinhwang91/nvim-bqf&quot;&gt;nvim-bqf&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Show search index and count with &lt;a href=&quot;https://github.com/kevinhwang91/nvim-hlslens&quot;&gt;nvim-hlslens&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;User-defined mapping hint via &lt;a href=&quot;https://github.com/folke/which-key.nvim&quot;&gt;which-key.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Asynchronous code execution via &lt;a href=&quot;https://github.com/skywind3000/asyncrun.vim&quot;&gt;asyncrun.vim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Code highlighting via &lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Code editing using true nvim inside browser via &lt;a href=&quot;https://github.com/glacambre/firenvim&quot;&gt;firenvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Beautiful colorscheme via &lt;a href=&quot;https://github.com/sainnhe/gruvbox-material&quot;&gt;sainnhe/gruvbox-material&lt;/a&gt; and other colorschemes.&lt;/li&gt; 
 &lt;li&gt;Markdown writing and previewing via &lt;a href=&quot;https://github.com/preservim/vim-markdown&quot;&gt;vim-markdown&lt;/a&gt; and &lt;a href=&quot;https://github.com/iamcco/markdown-preview.nvim&quot;&gt;markdown-preview.nvim&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;LaTeX editing and previewing via &lt;a href=&quot;https://github.com/lervag/vimtex&quot;&gt;vimtex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Animated GUI style notification via &lt;a href=&quot;https://github.com/rcarriga/nvim-notify&quot;&gt;nvim-notify&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Tags navigation via &lt;a href=&quot;https://github.com/liuchengxu/vista.vim&quot;&gt;vista&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Undo management via &lt;a href=&quot;https://github.com/simnalamburt/vim-mundo&quot;&gt;vim-mundo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Code folding with &lt;a href=&quot;https://github.com/kevinhwang91/nvim-ufo&quot;&gt;nvim-ufo&lt;/a&gt; and &lt;a href=&quot;https://github.com/luukvbaal/statuscol.nvim&quot;&gt;statuscol.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;......&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;UI Demo&lt;/h1&gt; 
&lt;p&gt;For more UI demos, check &lt;a href=&quot;https://github.com/jdhao/nvim-config/issues/15&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Start screen with dashboard-nvim&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/183256752-fb23b215-a6b8-4646-beed-9999f52d53f1.png&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;File fuzzy finding using fzf-lua&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/3199e35d-121a-487b-bfd1-58eb69b0b48a&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Code autocompletion with nvim-cmp&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/128590006-0fc1451f-fac1-49b2-bb95-8aba21bfa44e.gif&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Git add, commit and push via fugitive.vim&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/128590833-aaa05d53-19ef-441d-a5a9-ba1bbd3936c1.gif&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Tags&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/128589584-4036a1a2-2e0a-4bbe-8aaf-ff8b91644648.jpg&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Cursor jump via hop.nvim&lt;/h2&gt; 
&lt;p&gt;Go to a string starting with &lt;code&gt;se&lt;/code&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/139459219-8a7e6ac4-1d24-4008-a370-b56773d7cb85.gif&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;GUI-style notification with nvim-notify&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/16662357/128589873-aadb8264-1098-4834-9876-fa66a309be05.gif&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;code folding with nvim-ufo and statuscol.nvim&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/user-attachments/assets/a01a56b2-7c91-43de-b305-f2fbaa81dcec&quot; width=&quot;800&quot; /&gt; &lt;/p&gt; 
&lt;h1&gt;Shortcuts&lt;/h1&gt; 
&lt;p&gt;Some of the shortcuts I use frequently are listed here. In the following shortcuts, &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; represents ASCII character &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Shortcut&lt;/th&gt; 
   &lt;th&gt;Mode&lt;/th&gt; 
   &lt;th&gt;platform&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ff&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy file searching in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy help file grepping in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fg&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy project-wide grepping in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ft&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy buffer tag searching in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fb&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Fuzzy buffer switching in a floating window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;Space&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Remove trailing white spaces&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;v&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Reselect last pasted text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ev&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Edit Nvim config in a new tabpage&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;sv&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Reload Nvim config&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;st&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Show highlight group for cursor text&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Quit current window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;Q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Quit all window and close Nvim&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;w&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Save current buffer content&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;y&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Copy the content of entire buffer to default register&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Toggle cursor column&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Change current working directory to to the dir of current buffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;space&amp;gt;t&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Toggle tag window (show project tags in the right window)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Show Git status result&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gw&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Run Git add for current file&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Run git commit&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gpl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Run git pull&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gpu&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Run git push&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gbd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Delete a branch&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gbn&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Create a new branch&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal/Visual&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Get perm link for current/visually-select lines&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gbr&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;Browse current git repo in browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gb&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Visual&lt;/td&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;Blame current line&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F9&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Compile&amp;amp;run current source file (for C++, LaTeX, Lua, Python)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F11&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Toggle spell checking&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F12&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Toggle paste mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;\x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Close location or quickfix window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Close current buffer and go to previous buffer&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;{count}gb&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Go to buffer &lt;code&gt;{count}&lt;/code&gt; or next buffer in the buffer list.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;{operator}iB&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Operate in the whole buffer, &lt;code&gt;{operator}&lt;/code&gt; can be &lt;code&gt;v&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt; etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt-k&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Move current line or selected lines up&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt-j&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Move current line or selected lines down&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt-m&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;macOS/Win&lt;/td&gt; 
   &lt;td&gt;Markdown previewing in system browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt-Shift-m&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Normal&lt;/td&gt; 
   &lt;td&gt;macOS/Win&lt;/td&gt; 
   &lt;td&gt;Stopping Markdown previewing in system browser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ctrl-u&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Turn word under cursor to upper case&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ctrl-t&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Turn word under cursor to title case&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;jk&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Insert&lt;/td&gt; 
   &lt;td&gt;Linux/macOS/Win&lt;/td&gt; 
   &lt;td&gt;Return to Normal mode without lagging&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Custom commands&lt;/h1&gt; 
&lt;p&gt;In addition to commands provided by various plugins, I have also created some custom commands for personal use.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;command&lt;/th&gt; 
   &lt;th&gt;description&lt;/th&gt; 
   &lt;th&gt;example&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Redir&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;capture command output to a tabpage for easier inspection.&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Redir hi&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Edit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;edit multiple files at the same time, supports globing&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Edit *.vim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Datetime&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;print current date and time or convert Unix time stamp to date and time&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Datetime 12345&lt;/code&gt; or &lt;code&gt;Datetime&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;JSONFormat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;format a JSON file&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;JSONFormat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CopyPath&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;copy current file path to clipboard&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;CopyPath relative&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;If you find anything that needs improving, do not hesitate to point it out or create a PR.&lt;/p&gt; 
&lt;p&gt;If you come across an issue, you can first use &lt;code&gt;:checkhealth&lt;/code&gt; command provided by &lt;code&gt;nvim&lt;/code&gt; to trouble-shoot yourself. Please read carefully the messages provided by health check.&lt;/p&gt; 
&lt;p&gt;If you still have an issue, &lt;a href=&quot;https://github.com/jdhao/nvim-config/issues&quot;&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Further readings&lt;/h1&gt; 
&lt;p&gt;Some of the resources that I find helpful in mastering Nvim is documented &lt;a href=&quot;https://raw.githubusercontent.com/jdhao/nvim-config/main/docs/nvim_resources.md&quot;&gt;here&lt;/a&gt;. You may also be interested in my posts on configuring Nvim:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;My nvim notes can be found &lt;a href=&quot;https://jdhao.github.io/categories/Nvim/&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jdhao.github.io/2021/12/31/using_nvim_after_three_years/&quot;&gt;Using Neovim for Three years&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/&quot;&gt;Config nvim on Linux for Python development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jdhao.github.io/2018/11/15/neovim_configuration_windows/&quot;&gt;Nvim config on Windows 10&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jdhao.github.io/2019/01/17/nvim_qt_settings_on_windows/&quot;&gt;Nvim-qt config on Windows 10&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>neovim/nvim-lspconfig</title>
      <link>https://github.com/neovim/nvim-lspconfig</link>
      <description>&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; 
&lt;p&gt;nvim-lspconfig is a collection of LSP server configurations for the &lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;Nvim LSP client&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;View &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;all configs&lt;/a&gt;, or run &lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim.&lt;/p&gt; 
&lt;h2&gt;Important ‚ö†Ô∏è&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;require(&#39;lspconfig&#39;)&lt;/code&gt; (the legacy &quot;framework&quot; of nvim-lspconfig) &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/issues/3693&quot;&gt;is &lt;strong&gt;deprecated&lt;/strong&gt;&lt;/a&gt; in favor of &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;vim.lsp.config&lt;/a&gt; (Nvim 0.11+). 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lua/lspconfig.lua&quot;&gt;lspconfig.lua&lt;/a&gt; &lt;em&gt;module&lt;/em&gt; will be dropped. Calls to &lt;code&gt;require(&#39;lspconfig&#39;)&lt;/code&gt; will show a warning, which will later become an error.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;nvim-lspconfig itself is &lt;strong&gt;NOT deprecated&lt;/strong&gt;. It provides server-specific configs. 
  &lt;ul&gt; 
   &lt;li&gt;The configs live in the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;lsp/&lt;/a&gt; directory. &lt;code&gt;vim.lsp.config&lt;/code&gt; automatically finds them and merges them with any local &lt;code&gt;lsp/*.lua&lt;/code&gt; configs defined by you or a plugin.&lt;/li&gt; 
   &lt;li&gt;The old configs in &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lua/lspconfig/&quot;&gt;lua/lspconfig/&lt;/a&gt; are &lt;strong&gt;deprecated&lt;/strong&gt; and will be removed.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Migration instructions&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Upgrade to Nvim 0.11+&lt;/li&gt; 
 &lt;li&gt;(Optional) Use &lt;code&gt;vim.lsp.config(&#39;‚Ä¶&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.‚Ä¶.setup{}&lt;/code&gt;) to &lt;em&gt;customize&lt;/em&gt; or &lt;em&gt;define&lt;/em&gt; a config.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;vim.lsp.enable(&#39;‚Ä¶&#39;)&lt;/code&gt; (not &lt;code&gt;require&#39;lspconfig&#39;.‚Ä¶.setup{}&lt;/code&gt;) to &lt;em&gt;enable&lt;/em&gt; a config, so that it activates for its &lt;code&gt;filetypes&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;These configs are &lt;strong&gt;best-effort and supported by the community (you).&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&quot;&gt;contributions&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, not the issue tracker.&lt;/li&gt; 
 &lt;li&gt;If you found a bug in Nvim LSP (&lt;code&gt;:help lsp&lt;/code&gt;), &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; report it here. Only configuration data lives here.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/neovim/nvim-lspconfig&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Nvim 0.11.3+. 
  &lt;ul&gt; 
   &lt;li&gt;Support for Nvim 0.10 &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/issues/3693&quot;&gt;will be removed&lt;/a&gt;. Upgrade Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install nvim-lspconfig using Vim&#39;s &quot;packages&quot; feature: &lt;pre&gt;&lt;code&gt;git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or with Nvim 0.12 (nightly), you can use the builtin &lt;code&gt;vim.pack&lt;/code&gt; plugin manager: &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.pack.add{
  { src = &#39;https://github.com/neovim/nvim-lspconfig&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Or use a 3rd-party plugin manager.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install a language server, e.g. &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md#pyright&quot;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g pyright
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable its config in your init.lua (&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-quickstart&quot;&gt;:help lsp-quickstart&lt;/a&gt;). &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.enable(&#39;pyright&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Ensure your project/workspace contains a root marker as specified in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Open a code file in Nvim. LSP will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;code&gt;:help lspconfig-all&lt;/code&gt; for the full list of server-specific details. For servers not on your &lt;code&gt;$PATH&lt;/code&gt; (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually set the &lt;code&gt;cmd&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;jdtls&#39;, {
  cmd = { &#39;/path/to/jdtls&#39; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Nvim sets default options and mappings when LSP is active in a buffer:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-defaults&quot;&gt;:help lsp-defaults&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#diagnostic-defaults&quot;&gt;:help diagnostic-defaults&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To customize, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-attach&quot;&gt;:help lsp-attach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-buf&quot;&gt;:help lsp-buf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Extra settings can be specified for each LSP server. With Nvim 0.11+ you can &lt;a href=&quot;https://neovim.io/doc/user/lsp.html#lsp-config&quot;&gt;extend a config&lt;/a&gt; by calling &lt;code&gt;vim.lsp.config(&#39;‚Ä¶&#39;, {‚Ä¶})&lt;/code&gt;. (You can also copy any config directly from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt; and put it in a local &lt;code&gt;lsp/&lt;/code&gt; directory in your &#39;runtimepath&#39;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;rust_analyzer&#39;, {
  -- Server-specific settings. See `:help lsp-quickstart`
  settings = {
    [&#39;rust-analyzer&#39;] = {},
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Create a new config&lt;/h2&gt; 
&lt;p&gt;To create a new config you can either (1) use &lt;code&gt;vim.lsp.config&lt;/code&gt; or (2) create a file &lt;code&gt;lsp/&amp;lt;config-name&amp;gt;.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;.&lt;/p&gt; 
&lt;h3&gt;Example: define a new config as code&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.config(&#39;foo&#39;, {cmd={&#39;true&#39;}})&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. üòé&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Example: define a new config as a file&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a file &lt;code&gt;lsp/foo.lua&lt;/code&gt; somewhere on your &#39;runtimepath&#39;. &lt;pre&gt;&lt;code&gt;:exe &#39;edit&#39; stdpath(&#39;config&#39;) .. &#39;/lsp/foo.lua&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Add this code to the file (or copy any of the examples from the &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&quot;&gt;lsp/ directory&lt;/a&gt; in this repo): &lt;pre&gt;&lt;code&gt;return {
  cmd = { &#39;true&#39; },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Save the file (with &lt;code&gt;++p&lt;/code&gt; to ensure its parent directory is created). &lt;pre&gt;&lt;code&gt;:write ++p
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Enable the config. &lt;pre&gt;&lt;code&gt;:lua vim.lsp.enable(&#39;foo&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;, the new config is listed under &quot;Enabled Configurations&quot;. üåà&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Start with &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt; to troubleshoot. The most common reasons a language server does not start or attach are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in the config from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is a name instead of an absolute path, ensure it is on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Missing filetype plugins. Some languages are not detected by Nvim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set filetype?&lt;/code&gt; shows the filetype and not an empty value.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Not triggering root detection. Some language servers require a &quot;workspace&quot;, which is found by looking for an ancestor directory that contains a &quot;root marker&quot;. The most common root marker is &lt;code&gt;.git/&lt;/code&gt;, but each config defines other &quot;root marker&quot; names. Root markers/directories are listed in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can also explicitly set a root instead of relying on automatic detection by enabling &lt;code&gt;&#39;exrc&#39;&lt;/code&gt; and adding an &lt;code&gt;.nvim.lua&lt;/code&gt; at the desired root dir with the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.config(&#39;&amp;lt;client name&amp;gt;&#39;, {
  root_dir = vim.fn.fnamemodify(debug.getinfo(1, &#39;S&#39;).source:sub(2), &#39;:p:h&#39;),
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that prior to nvim 0.12 &lt;code&gt;exrc&lt;/code&gt; file is executed only if it&#39;s inside of a cwd where you start &lt;code&gt;nvim&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Bug reports&lt;/h2&gt; 
&lt;p&gt;If you found a bug with LSP functionality, &lt;a href=&quot;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&quot;&gt;report it to Neovim core&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;. Add this to your init.lua to enable verbose logging:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.lsp.set_log_level(&quot;debug&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attempt to run the language server, then run &lt;code&gt;:LspLog&lt;/code&gt; to open the log. Most of the time, the reason for failure is present in the logs.&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; (alias to &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;) shows the status of active and configured language servers.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspStop [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Stops the given server. Defaults to stopping all servers active on the current buffer. To force stop add &lt;code&gt;++force&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:LspRestart [&amp;lt;client_id_or_name&amp;gt;]&lt;/code&gt; Restarts the given client, and attempts to reattach to all previously attached buffers. Defaults to restarting all active servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;If a language server is missing from &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&quot;&gt;configs.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Read &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create a new file at &lt;code&gt;lsp/&amp;lt;server_name&amp;gt;.lua&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Copy an &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tree/master/lsp&quot;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/raw/master/lsp/texlab.lua&quot;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://github.com/neovim/neovim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; or in the &lt;a href=&quot;https://app.element.io/#/room/#neovim:matrix.org&quot;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Release process&lt;/h2&gt; 
&lt;p&gt;To publish a release:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create and push a new &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/tags&quot;&gt;tag&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;After pushing the tag, a &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/.github/workflows/release.yml&quot;&gt;GitHub action&lt;/a&gt; will automatically package the plugin and publish the release to LuaRocks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright Neovim contributors. All rights reserved.&lt;/p&gt; 
&lt;p&gt;nvim-lspconfig is licensed under the terms of the Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LazyVim/starter</title>
      <link>https://github.com/LazyVim/starter</link>
      <description>&lt;p&gt;Starter template for LazyVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí§ LazyVim&lt;/h1&gt; 
&lt;p&gt;A starter template for &lt;a href=&quot;https://github.com/LazyVim/LazyVim&quot;&gt;LazyVim&lt;/a&gt;. Refer to the &lt;a href=&quot;https://lazyvim.github.io/installation&quot;&gt;documentation&lt;/a&gt; to get started.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mintimate/oh-my-rime</title>
      <link>https://github.com/Mintimate/oh-my-rime</link>
      <description>&lt;p&gt;The Simple Config Template Of Rime By Mintimate.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://www.mintimate.cc/image/demo/guide.webp&quot; alt=&quot;Ê†∑Âºè&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README.md&quot;&gt;‰∏≠Êñá - ÁÆÄ‰ΩìÁÆÄ‰ªã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README_zh-CHT.md&quot;&gt;‰∏≠Êñá - ÁπÅÈ´îÁ∞°‰ªã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README_en.md&quot;&gt;English - Brief&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;‰∏ÄÂ•óÂø´ÈÄüÂàùÂßãÂåñrimeÁöÑÊ®°ÊùøÊñπÊ°àÔºåÂõ†‰∏∫Âπ≥Êó∂Êàë‰ΩøÁî®&lt;code&gt;oh-my-zsh&lt;/code&gt;ÔºåÂ∏åÊúõÂ§ßÂÆ∂Âú®Áî®Ëøô‰∏™Ê®°ÊùøÁöÑÊó∂ÂÄôÔºåÊúâÁßçÁî®&lt;code&gt;omz&lt;/code&gt;ÁöÑÊÑüËßâÔºõÊâÄ‰ª•ÊàëÁªôÂÆÉÂèñÂêçÂè´&lt;code&gt;oh-my-rime&lt;/code&gt;Ôºå‰Ω†‰πüÂèØ‰ª•Âè´ÂÆÉ&lt;code&gt;ËñÑËç∑ËæìÂÖ•Ê≥ï&lt;/code&gt;Ôºå‰∫¶ÊàñËÄÖ&lt;code&gt;Mint Input&lt;/code&gt;„ÄÇ&lt;/p&gt; 
&lt;p&gt;Â¶ÇÊûú‰Ω†‰∏ãËΩΩÈÅáÂà∞Âõ∞ÈöæÔºå‰ΩøÁî®GitHub ActionÊé®ÈÄÅÁöÑÈïúÂÉè‰ªìÂ∫ìÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cnb.cool/Mintimate/rime/oh-my-rime&quot;&gt;oh-my-rime: https://cnb.cool/Mintimate/rime/oh-my-rime&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ÊàñËÄÖÔºå‰Ω†Âè™ÊòØÊÉ≥‰∏ãËΩΩËñÑËç∑ÊñπÊ°àÔºåÂπ∂‰∏çÈúÄË¶ÅÁî® Git ÂÖãÈöÜ‰ªìÂ∫ìÔºõÈÇ£‰πà‰∏ãËΩΩÈÅáÂà∞Âõ∞ÈöæÔºåÂèØ‰ª•‰ΩøÁî® &lt;a href=&quot;https://cnb.cool/Mintimate/rime/oh-my-rime&quot;&gt;CNB&lt;/a&gt; Ëá™Âä®ÊµÅÊ∞¥Á∫øÊâìÂåÖÁöÑÂéãÁº©ÂåÖ:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cnb.cool/Mintimate/rime/oh-my-rime/-/releases/download/latest/oh-my-rime.zip&quot;&gt;oh-my-rime.zip: https://cnb.cool/Mintimate/rime/oh-my-rime/-/releases/download/latest/oh-my-rime.zip&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;2025-07-09 Á†¥ÂùèÊÄßÂèòÊõ¥:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ËØçÂ∫ì‰ªéÁôΩÈúúËØçÂ∫ìÂàáÊç¢Âà∞‰∏áË±°ËØçÂ∫ì‰ª•ÊèêÂçáÂú∞ÁêÉÊãºÈü≥ÁöÑ‰ΩìÈ™åÔºåÂêåÊó∂Êõ¥Âä†ÂÖºÂÆπ‰∏áË±°Ê®°ÂûãÁöÑÊåÇËΩΩ„ÄÇ&lt;/li&gt; 
 &lt;li&gt;ËØçÂ∫ìÂÜÖÊãºÈü≥Êñá‰ª∂Êõ¥Âêç‰∏∫&lt;code&gt;rime_mint&lt;/code&gt;ÂºÄÂ§¥ÔºåÊñπ‰æøÂêéÁª≠Áª¥Êä§„ÄÇ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Âõ†‰∏∫Á†¥ÂùèÊÄßÂèòÊõ¥ÔºåÂΩìÂâçËøòÈúÄË¶ÅËß£ÂÜ≥ÈóÆÈ¢ò:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; ÂàáÊç¢‰∏∫‰∏áË±°ËØçÂ∫ìÂêéÔºåÁî®Êà∑ËØçÂÖ∏(.userdb)ÈúÄË¶ÅËÑöÊú¨Âà∑ÂÜô„ÄÇÂê¶ÂàôÈü≥Ë∞ÉÊó†Ê≥ïÊòæÁ§∫„ÄÇÊèê‰æõ&lt;a href=&quot;https://www.mintimate.cc/zh/guide/faQ.html#%E7%94%A8%E6%88%B7%E8%AF%8D%E5%85%B8%E9%9F%B3%E6%A0%87%E8%BD%AC%E5%86%99&quot;&gt;Á¶ªÁ∫øÂ∑•ÂÖ∑‰ª•Êñπ‰æøÁî®Êà∑ËøÅÁßª&lt;/a&gt;„ÄÇ&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; ‰∏áË±°È¢ÑÁºñËæëËÑöÊú¨ÂíåÁ∫†ÈîôËÑöÊú¨ÂÜ≤Á™ÅÈóÆÈ¢òÂ∑≤ÁªèËß£ÂÜ≥Ôºå‰ΩÜÊòØÁ∫†ÈîôÊ†∑ÂºèÂíå‰∏áË±°ËØçÂ∫ìÁöÑÊ†∑Âºè‰∏ÄËá¥ÔºåÊó†Ê≥ïÂå∫ÂàÜÔºåËÄÉËôëÂêéÁª≠ÊòØÂê¶Ë∞ÉÊï¥„ÄÇ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Oh-my-rimeÊåáÂçó&lt;/h2&gt; 
&lt;p&gt;Rime ÈÖçÁΩÆÊïôÁ®ãÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mintimate.cn/2023/03/18/rimeQuickInit&quot;&gt;Ë∑®Âπ≥Âè∞ÁöÑÂºÄÊ∫êËæìÂÖ•Ê≥ïRimeÂÆöÂà∂ÊåáÂçóÔºåÊâìÈÄ†Âº∫Â§ßÁöÑ‰∏™ÊÄßÂåñËæìÂÖ•Ê≥ï&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV12M411T7gf&quot;&gt;BilibiliËßÜÈ¢ë(macOS/Windows/Linux): https://www.bilibili.com/video/BV12M411T7gf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Mr42137Ns&quot;&gt;BilibiliËßÜÈ¢ë(iOS/Android): https://www.bilibili.com/video/BV1Mr42137Ns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yc4AivDDpMM&quot;&gt;YoutubeË¶ñÈ†ª: https://www.youtube.com/watch?v=yc4AivDDpMM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Â¶ÇÊûú‰Ω†ÊúâQQÂ∏êÂè∑ÔºåÂèØ‰ª•Âä†ÂÖ•Áæ§ËÅäÔºàÁ¶ÅÊ≠¢ÂπøÂëäÔºâ: 703260572&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Âº∫ÁÉàÂª∫ËÆÆ&lt;a href=&quot;https://www.mintimate.cc&quot;&gt;ÈÖçÂêàÊñáÊ°£: https://www.mintimate.cc&lt;/a&gt;ËøõË°åÊìç‰Ωú!!!&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;È°πÁõÆÊñáÊ°£ CDN Âä†ÈÄüÂèäÂÆâÂÖ®Èò≤Êä§Áî± &lt;a href=&quot;https://edgeone.ai/zh?from=github&quot;&gt;Tencent EdgeOne&lt;/a&gt; ËµûÂä©„ÄÇ&lt;br /&gt;&lt;img src=&quot;https://edgeone.ai/media/34fe3a45-492d-4ea4-ae5d-ea1087ca7b4b.png&quot; alt=&quot;Tencent EdgeOne&quot; height=&quot;20&quot; /&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Êú¨ËæìÂÖ•ÊñπÊ°àÂÜÖÂåÖÂê´Ôºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ËñÑËç∑ÊãºÈü≥-ÂÖ®ÊãºËæìÂÖ•: ÂÖ®ÊãºËæìÂÖ•ÔºåÈÄÇÂêàÁöÑ‰∫∫Áæ§ÊúÄÂ§öÔºåÊâÄ‰ª•‰πüÊòØÈªòËÆ§ÁöÑËæìÂÖ•Ôºõ&lt;/li&gt; 
 &lt;li&gt;Â∞èÈπ§ÂèåÊãº-ËñÑËç∑ÂÆöÂà∂: Âü∫‰∫éÂ∞èÈπ§ÂèåÊãºÔºåÊ∑ªÂä†ÂÆöÂà∂ÂÜÖÂÆπ„ÄÇÊîØÊåÅËæìÂÖ•Èü≥ÂΩ¢(ÂΩ¢Á†Å)„ÄÅËá™ÁÑ∂Á†ÅËæÖÂä©Á†ÅÊàñÂ¢®Â•áËæÖÂä©Á†Å‰Ωú‰∏∫ËæÖÂä©ËæìÂÖ•Ôºõ&lt;/li&gt; 
 &lt;li&gt;ËñÑËç∑ÊãºÈü≥-Â∞èÈπ§Ê∑∑Ëæì: ÂÖ®ÊãºËæìÂÖ•ÁöÑÂêåÊó∂ÔºåÊîØÊåÅÂ∞èÈπ§ÂèåÊãºÔºõ&lt;/li&gt; 
 &lt;li&gt;Âú∞ÁêÉÊãºÈü≥-ËñÑËç∑ÂÆöÂà∂: Âü∫‰∫éÂú∞ÁêÉÊãºÈü≥ÔºåÊ∑ªÂä†ÂÆöÂà∂ÂÜÖÂÆπÔºåÊâ©Â±ïÊµ∑ÈáèËØçÂ∫ìÔºõ&lt;/li&gt; 
 &lt;li&gt;‰∫îÁ¨î98-‰∫îÁ¨îÂ∞èÁ≠ë: Âü∫‰∫é&lt;a href=&quot;https://github.com/yanhuacuo/98wubi&quot;&gt;98wubi&lt;/a&gt;ÁöÑÁ≤æÁÆÄÁâàÊú¨ÔºåÊúüÂæÖÂ§ßÂÆ∂ÁöÑPR„ÄÇÂ¶ÇÊûúÊÉ≥Ë¶ÅÊõ¥Â•ΩÁöÑ‰ΩìÈ™å(‰∫îÁ¨î„ÄÅÊãºÈü≥Ê∑∑ËæìÂÖ•Á≠â)ÔºåÊ¨¢Ëøé‰ΩøÁî®‰∫îÁ¨î98Âõ¢ÈòüÂÅöÁöÑ&lt;a href=&quot;https://github.com/yanhuacuo/98wubi&quot;&gt;‰∫îÁ¨î98&lt;/a&gt;Ôºõ&lt;/li&gt; 
 &lt;li&gt;‰∫îÁ¨î86-ÊûÅÁÇπ‰∫îÁ¨î: Âü∫‰∫é&lt;a href=&quot;https://github.com/KyleBing/rime-wubi86-jidian&quot;&gt;wubi86-jidian&lt;/a&gt;ÁöÑÁ≤æÁÆÄÁâàÊú¨ÔºåÊúüÂæÖÂ§ßÂÆ∂ÁöÑPR„ÄÇÂ¶ÇÊûúÊÉ≥Ë¶ÅÊõ¥Â•ΩÁöÑ‰ΩìÈ™å(‰∫îÁ¨î„ÄÅÊãºÈü≥Ê∑∑ËæìÂÖ•Á≠â)ÔºåÊ¨¢Ëøé‰ΩøÁî®&lt;a href=&quot;https://github.com/KyleBing/rime-wubi86-jidian&quot;&gt;rime-wubi86-jidian&lt;/a&gt;Ôºõ&lt;/li&gt; 
 &lt;li&gt;‰ªì‰πùÂÆ´Ê†º-ÂÖ®ÊãºËæìÂÖ•: Âü∫‰∫é„ÄåËñÑËç∑ÊãºÈü≥-ÂÖ®ÊãºËæìÂÖ•„ÄçÔºåÈÄÇÁî®‰∫éÂú®iOS‰ªìËæìÂÖ•Ê≥ïÂÜÖ‰ΩøÁî®‰πùÂÆ´Ê†ºÔºõÂ¶ÇÊûúÊúâÂÖ∂‰ªñÊñπÊ°àÁöÑ‰πùÂÆ´Ê†ºÈúÄÊ±ÇÔºåÂèØ‰ª•Âü∫‰∫éÊú¨ÊñπÊ°à‰øÆÊîπ„ÄÇ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;‰Ω†ÂèØ‰ª•Âú®ÂÆâË£ÖÂêéÔºå‰ΩøÁî®„ÄéCtrl„Äè+„Äé~„ÄèËøõË°åÂàáÊç¢„ÄÇÔºàÈªòËÆ§ÊøÄÊ¥ªÁöÑÊòØ„ÄéËñÑËç∑ÊãºÈü≥-ÂÖ®ÊãºËæìÂÖ•„ÄèÔºâ„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÁõÆÂâçËñÑËç∑ÂÜÖËá™Â∏¶‰∏§Â•óÁöÆËÇ§Ôºö Ê∞¥È∏≠Á≥ªÂàó„ÄÅÈùíÊ∂©Á≥ªÂàó„ÄÇÂ§ßÂÆ∂ÂèØ‰ª•Âú®Èº†È°ªÁÆ°ÂíåÂ∞èÁãºÊØ´ÁöÑ‰∏™ÊÄßÂåñÈÖçÁΩÆÂÜÖËá™Áî±ÈÄâÊã©ÊøÄÊ¥ªÔºå‰πüÂèØ‰ª•‰ΩøÁî®Ëá™Â∑±ÁöÑÈÖçËâ≤ÔºàÊé®Ëçê&lt;a href=&quot;https://www.mintimate.cc/zh/guide/configurationOverride.html#%E4%BF%AE%E6%94%B9%E8%96%84%E8%8D%B7%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%85%8D%E7%BD%AE&quot;&gt;‰ΩøÁî® custom ÂØπËñÑËç∑ÈÖçÁΩÆËøõË°åË¶ÜÂÜô&lt;/a&gt;Ôºâ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://www.mintimate.cc/image/demo/themeOfOhMyRime.webp&quot; alt=&quot;ÊòæÁ§∫ÊïàÊûú&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;ÂÆâË£Ö&lt;/h3&gt; 
&lt;p&gt;‰ª•‰∏ãÊïôÁ®ãÔºåÈÄÇÁî®‰∫éLinux„ÄÅmacOSÂíåWindowsÔºàXp~Ôºâ&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;ÂÆâË£Ö&lt;a href=&quot;https://rime.im/&quot;&gt;RimeËæìÂÖ•Ê≥ï&lt;/a&gt;Âπ∂Ê≥®ÈîÄÊàñÈáçÂêØÁîµËÑëÔºõ&lt;/li&gt; 
 &lt;li&gt;‰∏ãËΩΩÊú¨‰ªìÂ∫ìÊâÄÊúâÈÖçÁΩÆÊñá‰ª∂Âà∞Êú¨Âú∞rimeÈÖçÁΩÆÊñá‰ª∂Ôºõ&lt;/li&gt; 
 &lt;li&gt;ÈáçÊñ∞ÈÉ®ÁΩ≤Rime&lt;/li&gt; 
 &lt;li&gt;ÂºÄÂßã‰ΩøÁî®&lt;/li&gt; 
 &lt;li&gt;Ê†πÊçÆËá™Â∑±‰π†ÊÉØÔºåËøõË°å‰∫åÊ¨°‰øÆÊîπ&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;ÈúÄË¶ÅÊ≥®ÊÑè: Windows 7 Âíå Windows XpÂè™ËÉΩ‰ΩøÁî® 0.14.3 ÁâàÊú¨ÁöÑWeaselÔºåÊó†Ê≥ï‰ΩøÁî®Êú¨ËæìÂÖ•ÊñπÊ°àÁöÑÂÖ®ÈÉ®ÂäüËÉΩÔºåÈúÄË¶ÅÊâãÂä®Êõ¥Êñ∞librimeÊîØÊè¥Â∫ìÔºö&lt;a href=&quot;https://www.mintimate.cc/zh/guide/faQ.html#winxp%E5%92%8Cwin7%E4%BD%BF%E7%94%A8%E8%96%84%E8%8D%B7%E8%BE%93%E5%85%A5%E6%B3%95&quot;&gt;WinXPÂíåWin7‰ΩøÁî®ËñÑËç∑ËæìÂÖ•Ê≥ï&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Tips&lt;/h2&gt; 
&lt;p&gt;Êú¨Âú∞rimeÈÖçÁΩÆÊñá‰ª∂ÈªòËÆ§Âú∞ÂùÄÔºåÂ¶Ç‰∏ã&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows 
  &lt;ul&gt; 
   &lt;li&gt;Weasel: &lt;code&gt;%APPDATA%\Rime&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mac OS X 
  &lt;ul&gt; 
   &lt;li&gt;Squirrel: &lt;code&gt;~/Library/Rime&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Fcitx5 macOS: &lt;code&gt;~/.local/share/fcitx5/rime&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Linux 
  &lt;ul&gt; 
   &lt;li&gt;iBus:&lt;code&gt;~/.config/ibus/rime&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Fcitx5: &lt;code&gt;~/.local/share/fcitx5/rime&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Fctix5 Android(Â∞è‰ºÅÈπÖÂÖ•Ê≥ï): &lt;code&gt;/storage/emulated/0/Android/data/org.fcitx.fcitx5.android/files/data/rime/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Êú¨Âú∞rimeÊó•ÂøóÊñá‰ª∂ÈªòËÆ§Âú∞ÂùÄÂ¶Ç‰∏ãÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows 
  &lt;ul&gt; 
   &lt;li&gt;Weasel: &lt;code&gt;%TEMP%&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mac OS X 
  &lt;ul&gt; 
   &lt;li&gt;Squirrel: &lt;code&gt;$TMPDIR&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Linux 
  &lt;ul&gt; 
   &lt;li&gt;iBus:&lt;code&gt;/tmp&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;‰ªìËæìÂÖ•Ê≥ï Hamster ÂÜÖÂ¶Ç‰Ωï‰ΩøÁî®‰πùÂÆ´Ê†ºËæìÂÖ•Ôºü&lt;/p&gt; 
&lt;p&gt;ËñÑËç∑ÊñπÊ°àÂÜÖÔºåÂü∫‰∫é&lt;a href=&quot;https://github.com/imfuxiao/Hamster/&quot;&gt;Hamster&lt;/a&gt; ‰πùÂÆ´Ê†ºÂ∏ÉÂ±ÄÂíå&lt;a href=&quot;https://github.com/iDvel/rime-ice/raw/main/t9.schema.yaml&quot;&gt;ÈõæÂáá‰πùÂÆ´Ê†º&lt;/a&gt;ÁßªÊ§ç‰∫Ü‰πùÂÆ´Ê†º„ÄÇÈúÄË¶ÅÂêåÊó∂ÂêØÁî®‰πùÂÆ´Ê†ºÊñπÊ°àÔºàËæìÂÖ•ÊñπÊ°àËÆæÁΩÆÔºâÂíå‰πùÂÆ´Ê†ºÂ∏ÉÂ±ÄÔºàÈîÆÁõòËÆæÁΩÆ - ÈîÆÁõòÂ∏ÉÂ±Ä - ‰∏≠Êñá 9 ÈîÆÔºâ„ÄÇ&lt;/p&gt; 
&lt;p&gt;Â¶ÇÊûú‰Ω†ÂñúÊ¨¢‰ΩøÁî® Rime Êâì‰∏Ä‰∫õÈïøÂè•ÔºåÈÇ£‰πàÂº∫ÁÉàÂª∫ËÆÆÈÖçÂêàËØ≠Ë®ÄÊ®°ÂûãÊù•‰ΩøÁî®„ÄÇÂèÇËÄÉÊïôÁ®ã:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mintimate.cc/zh/guide/languageModel.html&quot;&gt;Rime ÂÜÖÂ¶Ç‰ΩïÈÖçÁΩÆËØ≠Ë®ÄÊ®°Âûã -- ËñÑËç∑ËæìÂÖ•ÈÖçÁΩÆÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ÈÖçÁΩÆÊñá‰ª∂ËØ¥Êòé&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;default.yaml&lt;/code&gt; ËÆæÁΩÆËæìÂÖ•Ê≥ï„ÄÅÂ¶Ç‰ΩïÂàáÊç¢ËæìÂÖ•Ê≥ï„ÄÅÁøªÈ°µÁ≠âÔºõÂª∫ËÆÆËá™Ë°åÂàõÂª∫&lt;code&gt;default.custom.yaml&lt;/code&gt;Êù•Ë¶ÜÂÜôËñÑËç∑ÈÖçÁΩÆÁöÑ&lt;code&gt;default.yaml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;squirrel.yaml&lt;/code&gt; Èº†È°ªÁÆ°( Mac ÁâàÊú¨ )ËÆæÁΩÆÂì™‰∫õËΩØ‰ª∂ÈªòËÆ§Ëã±ÊñáËæìÂÖ•ÔºåËæìÂÖ•Ê≥ïÁöÆËÇ§Á≠âÔºõÂ¶ÇÈúÄËá™ÂÆö‰πâÔºåÂª∫ËÆÆËá™Ë°åÂàõÂª∫&lt;code&gt;squirrel.custom.yaml&lt;/code&gt;Êù•Ë¶ÜÂÜô„ÄÇ&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;weasel.yaml&lt;/code&gt; Â∞èÁãºÊØ´( Win ÁâàÊú¨ )ËÆæÁΩÆÂì™‰∫õËΩØ‰ª∂ÈªòËÆ§Ëã±ÊñáËæìÂÖ•ÔºåËæìÂÖ•Ê≥ïÁöÆËÇ§Á≠âÔºõÂ¶ÇÈúÄËá™ÂÆö‰πâÔºåÂª∫ËÆÆËá™Ë°åÂàõÂª∫&lt;code&gt;weasel.custom.yaml&lt;/code&gt;Êù•Ë¶ÜÂÜô„ÄÇ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ÈÖçÁΩÆÊñá‰ª∂‰∏≠Â§ßÈÉ®ÂàÜÈÉΩÊúâÊ≥®ÈáäÔºåÈÖçÂêàÊïôÁ®ãÔºö&lt;a href=&quot;https://www.mintimate.cc/zh/guide/configurationOverride.html&quot;&gt;ÈÖçÁΩÆË¶ÜÂÜô&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;ËØçÂ∫ìÂÆöÂà∂‰ª•ÂèäÊõ¥Êñ∞&lt;/h2&gt; 
&lt;p&gt;Êú¨‰ªìÂ∫ìÁöÑËØçÂ∫ìÁõÆÂΩï&lt;a href=&quot;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/dicts&quot;&gt;dicts&lt;/a&gt;Ôºå‰∏ªË¶ÅÊúâÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice&quot;&gt;ÈõæÂááÊãºÈü≥ËØçÂ∫ì&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gaboolic/rime-frost&quot;&gt;ÁôΩÈúúËØçÂ∫ì&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;‰∏áË±°ËØçÂ∫ì&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yanhuacuo/98wubi-tables&quot;&gt;98‰∫îÁ¨îËØçÂ∫ì&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/KyleBing/rime-wubi86-jidian&quot;&gt;86‰∫îÁ¨îËØçÂ∫ì&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ËØ¶ÁªÜËØ¥ÊòéÔºö&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;dicts
‚îú‚îÄ‚îÄ custom_simple.dict.yaml    # Ëá™ÂÆö‰πâËØçÂ∫ìÔºàÂª∫ËÆÆËá™Â∑±Ê∑ªÂä†ÁöÑËØçÂ∫ìÂèØ‰ª•ÊîæËøôÈáåÔºâ
‚îú‚îÄ‚îÄ other_emoji.dict.yaml      # emoji ËØçÂ∫ì
‚îú‚îÄ‚îÄ other_kaomoji.dict.yaml    # È¢úÊñáÂ≠óËØçÂ∫ìÔºàÊåâvvËøõË°åÊøÄÊ¥ªÔºâ
‚îú‚îÄ‚îÄ rime_ice.ext.dict.yaml     # ÁôΩÈúúËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ rime_ice.cn_en.txt         # ÁôΩÈúúËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ rime_ice.en.dict.yaml      # ÁôΩÈúúËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ rime_ice.en_ext.dict.yaml  # ÁôΩÈúúËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ rime_ice.others.dict.yaml  # ÁôΩÈúúËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ rime_mint.base.dict.yaml            # ‰∏áË±°ËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ rime_mint.chars.dict.yaml           # ‰∏áË±°ËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ rime_mint.correlation.dict.yaml     # ‰∏áË±°ËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ rime_mint.ext.dict.yaml             # ‰∏áË±°ËØçÂ∫ìÔºàGitHub actionËá™Âä®Êõ¥Êñ∞Ôºâ
‚îú‚îÄ‚îÄ wubi86_core.dict.yaml           # 86Áâà‰∫îÁ¨îÂü∫Á°ÄËØçÂ∫ì
‚îî‚îÄ‚îÄ wubi98_base.dict.yaml           # 98Áâà‰∫îÁ¨îÂü∫Á°ÄËØçÂ∫ì
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ÂêéÁª≠Êõ¥Êñ∞ËØçÂ∫ìÔºõÂèØ‰ª•‰∏ãËΩΩÊú¨‰ªìÂ∫ì&lt;code&gt;dicts&lt;/code&gt;ÂÜÖÁöÑÊñá‰ª∂ÔºåÈô§‰∫Ü&lt;code&gt;custom_simple.dict.yaml&lt;/code&gt;ÁöÑÊñá‰ª∂ÔºåÂÖ∂‰ªñÈÉΩËøõË°åË¶ÜÁõñÊõøÊç¢Âç≥ÂèØ„ÄÇ&lt;/p&gt; 
&lt;p&gt;Â¶ÇÊûúÊÉ≥Ëá™Â∑±Êâ©Â±ïËØçÂ∫ìÔºåÂèØ‰ª•Âú®ËæìÂÖ•Ê≥ïÁöÑÂ≠óÂÖ∏ÈÖçÁΩÆÊñá‰ª∂ÂÜÖËøõË°åÂØºÂÖ•ÔºåÊØîÂ¶Ç„ÄåËñÑËç∑ÊãºÈü≥-ÂÖ®ÊãºËæìÂÖ•„ÄçÁöÑÂ≠óÂÖ∏ÈÖçÁΩÆÊñá‰ª∂&lt;a href=&quot;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/rime_mint.dict.yaml&quot;&gt;rime_mint.dict.yaml&lt;/a&gt;ÂÜÖÔºö&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
name: rime_mint                  # Ê≥®ÊÑènameÂíåÊñá‰ª∂Âêç‰∏ÄËá¥
version: &quot;2025.07.06&quot;
sort: by_weight
use_preset_vocabulary: false
# Ê≠§Â§Ñ‰∏∫ ËæìÂÖ•Ê≥ïÊâÄÁî®Âà∞ÁöÑËØçÂ∫ìÔºåÊó¢Ë°•ÂÖÖÊãìÂ±ïËØçÂ∫ìÁöÑÂú∞Êñπ
# ÈõæÂááÊãºÈü≥ËØçÂ∫ìÔºåÁî±Github RobotËá™Âä®Êõ¥Êñ∞
import_tables:
  - dicts/custom_simple          # Ëá™ÂÆö‰πâ
  - dicts/rime_mint.chars        # ÂçïÂ≠óËØçÂ∫ìÔºà‰∏áË±°ÊãºÈü≥ËØçÂ∫ìÂü∫Á°ÄÁâàÊú¨Ôºâ
  - dicts/rime_mint.base         # Âü∫Á°ÄËØçÂ∫ìÔºà‰∏áË±°ÊãºÈü≥ËØçÂ∫ìÂü∫Á°ÄÁâàÊú¨Ôºâ
  - dicts/rime_mint.correlation  # ÂÖ≥ËÅîËØçÂ∫ìÔºà‰∏áË±°ÊãºÈü≥ËØçÂ∫ìÂü∫Á°ÄÁâàÊú¨Ôºâ
  - dicts/rime_mint.ext          # ËÅîÊÉ≥ËØçÂ∫ìÔºà‰∏áË±°ÊãºÈü≥ËØçÂ∫ìÂü∫Á°ÄÁâàÊú¨Ôºâ
  - dicts/other_kaomoji          # È¢úÊñáÂ≠óË°®ÊÉÖÔºàÊåâ`VV`ÂëºÂá∫)
  - dicts/rime_ice.others        # ÈõæÂááÊãºÈü≥ othersËØçÂ∫ìÔºàÁî®‰∫éËá™Âä®Á∫†ÈîôÔºâ
  # 20240608 EmojiÂÆåÂÖ®‰∫§Áî±OpenCCÔºå‰∏çÂÜç‰ΩøÁî®Â≠óÂÖ∏‰Ωú‰∏∫Ë°•ÂÖÖ
  # - dicts/other_emoji            # Emoji(‰ªÖ‰ªÖ‰Ωú‰∏∫Ë°•ÂÖÖÔºåÂÆûÈôÖ‰ΩøÁî®‰∏ÄËà¨ÊòØOpenCCÁîüÊïà)
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;ÊîØÊåÅ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mintimate.cn&quot;&gt;Mintimate&#39;s Blog: https://www.mintimate.cn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://afdian.net/a/mintimate&quot;&gt;MintimateÁöÑÁà±ÂèëÁîµ: Âä†ÂÖ•ÁîµÂúàÔºåÊîØÊåÅÂàõÈÄ†!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://space.bilibili.com/355567627&quot;&gt;BilibiliÔºö@Mintimate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCI7LLdUGNzkcKOE7grAqCoA&quot;&gt;YoutubeÔºö@Mintimate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ÂèÇËÄÉ/Ëá¥Ë∞¢&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rime/home/wiki/RimeWithSchemata&quot;&gt;Rime-RimeWithSchemata&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://chenhe.me/post/oh-my-rime&quot;&gt;Rime/Â∞èÁãºË±™/Èº†È°ªÁÆ° ËæìÂÖ•Ê≥ïÈÖçÁΩÆËÆ∞&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Iorest/rime-setting&quot;&gt;rime-setting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice&quot;&gt;ÈõæÂááÊãºÈü≥ | ÈïøÊúüÁª¥Êä§ÁöÑÁÆÄ‰ΩìËØçÂ∫ì&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mirtlecn/rime-radical-pinyin&quot;&gt;rime-radical-pinyin | Rime ÈÉ®‰ª∂ÊãÜÂ≠óËæìÂÖ•ÊñπÊ°àÔºàÂÖ®ÊãºÂèåÊãºÔºâ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/KyleBing/rime-wubi86-jidian&quot;&gt;86‰∫îÁ¨îÊûÅÁÇπÁ†ÅË°®&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hchunhui/librime-lua/wiki/Scripting&quot;&gt;Extending RIME with Lua scripts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gaboolic/rime-frost&quot;&gt;ÁôΩÈúúËØçÂ∫ì | Âü∫‰∫éÈõæÂááÊãºÈü≥ÈáçÂà∂ÁöÑÔºåÊõ¥Á∫ØÂáÄ„ÄÅËØçÈ¢ëÂáÜÁ°Æ„ÄÅÊô∫ËÉΩÁöÑËØçÂ∫ì&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/amzxyz/RIME-LMDG&quot;&gt;‰∏áË±°ËØçÂ∫ì | RimeËæìÂÖ•Ê≥ïËØ≠Ê≥ïÊ®°ÂûãÂÖ®ÊµÅÁ®ãÊûÑÂª∫ÊïôÁ®ãÔºåÂÖ®Â±ÄÂ∏¶Â£∞Ë∞ÉËØçÂ∫ìÔºåÊúÄÂÖ®Â£∞Ë∞ÉÊ†áÊ≥®Â∑•ÂÖ∑Èìæ&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Êé®ËçêÈ°πÁõÆ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wubi98.github.io/&quot;&gt;98‰∫îÁ¨îÔºåÂçÅÂàÜÂ•ΩÁî®ÁöÑ98‰∫îÁ¨îËæìÂÖ•ÊñπÊ°à&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/KyleBing/rime-wubi86-jidian&quot;&gt;86‰∫îÁ¨îÊûÅÁÇπÁ†ÅË°®Ôºårime‰∏äÁöÑ86‰∫îÁ¨îÊñπÊ°à&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iDvel/rime-ice&quot;&gt;ÈõæÂááÊãºÈü≥ÔºåÂæà‰ºòÁßÄÁöÑ‰∏≠ÊñáËØçÂ∫ì&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/amzxyz/rime_wanxiang&quot;&gt;‰∏áË±°ÊãºÈü≥ÔºåÂº∫Â§ßÂà∞Â§çÊùÇÁöÑÊãºÈü≥ÊñπÊ°à&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;ËñÑËç∑ÁöÑËØçÂ∫ì: ‚ë† Âú®&lt;code&gt;2024-07-29&lt;/code&gt;Ëµ∑ÔºåÊãºÈü≥ËØçÂ∫ì‰ΩøÁî®ÁôΩÈúúËØçÂ∫ìÔºåÊ≠§Ââç‰ΩøÁî®ÈõæÂááÊãºÈü≥ËØçÂ∫ìÔºõ‚ë° Âú®&lt;code&gt;2025-07-09&lt;/code&gt;Ëµ∑ÔºåËØçÂ∫ì‰ΩøÁî®‰∏áË±°ÊãºÈü≥ËØçÂ∫ì„ÄÇ&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;picture&gt; 
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&amp;amp;theme=dark&quot; /&gt; 
 &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&quot; /&gt; 
 &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&quot; /&gt; 
&lt;/picture&gt; 
&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; 
&lt;a href=&quot;https://github.com/Mintimate/oh-my-rime/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=Mintimate/oh-my-rime&quot; /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>LandSandBoat/server</title>
      <link>https://github.com/LandSandBoat/server</link>
      <description>&lt;p&gt;‚õµ LandSandBoat - a server emulator for Final Fantasy XI&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;256&quot; height=&quot;256&quot; src=&quot;https://raw.githubusercontent.com/LandSandBoat/server/base/res/lsb_logo_circle.png&quot; /&gt; &lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;LandSandBoat&lt;/h1&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/LandSandBoat/server/actions/workflows/build.yml?query=base&quot;&gt;&lt;img src=&quot;https://github.com/LandSandBoat/server/actions/workflows/build.yml/badge.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/LandSandBoat/server/pulls&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Welcome to LandSandBoat, an open source server emulator for FFXI.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;A &lt;a href=&quot;https://github.com/LandSandBoat/server/wiki/Quick-Start-Guide&quot;&gt;quick start guide&lt;/a&gt;, the &lt;a href=&quot;https://github.com/LandSandBoat/server/wiki/Frequently-Asked-Questions&quot;&gt;frequently asked questions&lt;/a&gt;, and a table of &quot;&lt;a href=&quot;https://github.com/LandSandBoat/server/wiki/What-Works&quot;&gt;what works&lt;/a&gt;&quot; are all available on &lt;a href=&quot;https://github.com/LandSandBoat/server/wiki&quot;&gt;our wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Interacting with LandSandBoat&lt;/h2&gt; 
&lt;h3&gt;Crashes, warnings, errors, bugs, gameplay issues, visual issues, etc.&lt;/h3&gt; 
&lt;p&gt;Please create a new issue in the &lt;a href=&quot;https://github.com/LandSandBoat/server/issues&quot;&gt;issues tab&lt;/a&gt; after searching to see if your issue is already logged.&lt;/p&gt; 
&lt;h3&gt;Balance discussion, technical discussion, meta discussions, etc.&lt;/h3&gt; 
&lt;p&gt;Discussions are similar to forum posts. Please open a new discussion post in the &lt;a href=&quot;https://github.com/LandSandBoat/server/discussions&quot;&gt;discussions tab&lt;/a&gt; for less directed and more open-ended conversation than issues.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;If you are encountering an issue, please open an issue and not a discussion!&lt;/em&gt; It&#39;s much easier for us to track and you&#39;re more likely to get resolution through an issue.&lt;/p&gt; 
&lt;h2&gt;LICENSE&lt;/h2&gt; 
&lt;p&gt;LandSandBoat is licensed under &lt;a href=&quot;https://github.com/LandSandBoat/server/raw/base/LICENSE&quot;&gt;GNU GPL v3&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Thanks to all contributors past and present, we wouldn&#39;t be here without you!&lt;/p&gt; 
&lt;p&gt;Thanks to GitHub for hosting us, and for all the CI minutes we use!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stevearc/oil.nvim</title>
      <link>https://github.com/stevearc/oil.nvim</link>
      <description>&lt;p&gt;Neovim file explorer: edit your filesystem like a buffer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oil.nvim&lt;/h1&gt; 
&lt;p&gt;A &lt;a href=&quot;https://github.com/tpope/vim-vinegar&quot;&gt;vim-vinegar&lt;/a&gt; like file explorer that lets you edit your filesystem like a normal Neovim buffer.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/506791/209727111-6b4a11f4-634a-4efa-9461-80e9717cea94.mp4&quot;&gt;https://user-images.githubusercontent.com/506791/209727111-6b4a11f4-634a-4efa-9461-80e9717cea94.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;!-- TOC --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#quick-start&quot;&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#options&quot;&gt;Options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#adapters&quot;&gt;Adapters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#recipes&quot;&gt;Recipes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#third-party-extensions&quot;&gt;Third-party extensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /TOC --&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim 0.8+&lt;/li&gt; 
 &lt;li&gt;Icon provider plugin (optional) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-icons.md&quot;&gt;mini.icons&lt;/a&gt; for file and folder icons&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; for file icons&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;oil.nvim supports all the usual plugin managers&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;lazy.nvim&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &#39;stevearc/oil.nvim&#39;,
  ---@module &#39;oil&#39;
  ---@type oil.SetupOpts
  opts = {},
  -- Optional dependencies
  dependencies = { { &quot;echasnovski/mini.icons&quot;, opts = {} } },
  -- dependencies = { &quot;nvim-tree/nvim-web-devicons&quot; }, -- use if you prefer nvim-web-devicons
  -- Lazy loading is not recommended because it is very tricky to make it work correctly in all situations.
  lazy = false,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Packer&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;packer&quot;).startup(function()
  use({
    &quot;stevearc/oil.nvim&quot;,
    config = function()
      require(&quot;oil&quot;).setup()
    end,
  })
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Paq&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;paq&quot;)({
  { &quot;stevearc/oil.nvim&quot; },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;vim-plug&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;stevearc/oil.nvim&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;dein&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;call dein#add(&#39;stevearc/oil.nvim&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Pathogen&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth=1 https://github.com/stevearc/oil.nvim.git ~/.vim/bundle/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neovim native package&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth=1 https://github.com/stevearc/oil.nvim.git \
  &quot;${XDG_DATA_HOME:-$HOME/.local/share}&quot;/nvim/site/pack/oil/start/oil.nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;Add the following to your init.lua&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;oil&quot;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open a directory with &lt;code&gt;nvim .&lt;/code&gt;. Use &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to open a file/directory, and &lt;code&gt;-&lt;/code&gt; to go up a directory. Otherwise, just treat it like a normal buffer and make changes as you like. Remember to &lt;code&gt;:w&lt;/code&gt; when you&#39;re done to actually perform the actions.&lt;/p&gt; 
&lt;p&gt;If you want to mimic the &lt;code&gt;vim-vinegar&lt;/code&gt; method of navigating to the parent directory of a file, add this keymap:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set(&quot;n&quot;, &quot;-&quot;, &quot;&amp;lt;CMD&amp;gt;Oil&amp;lt;CR&amp;gt;&quot;, { desc = &quot;Open parent directory&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can open a directory with &lt;code&gt;:edit &amp;lt;path&amp;gt;&lt;/code&gt; or &lt;code&gt;:Oil &amp;lt;path&amp;gt;&lt;/code&gt;. To open oil in a floating window, do &lt;code&gt;:Oil --float &amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;oil&quot;).setup({
  -- Oil will take over directory buffers (e.g. `vim .` or `:e src/`)
  -- Set to false if you want some other plugin (e.g. netrw) to open when you edit directories.
  default_file_explorer = true,
  -- Id is automatically added at the beginning, and name at the end
  -- See :help oil-columns
  columns = {
    &quot;icon&quot;,
    -- &quot;permissions&quot;,
    -- &quot;size&quot;,
    -- &quot;mtime&quot;,
  },
  -- Buffer-local options to use for oil buffers
  buf_options = {
    buflisted = false,
    bufhidden = &quot;hide&quot;,
  },
  -- Window-local options to use for oil buffers
  win_options = {
    wrap = false,
    signcolumn = &quot;no&quot;,
    cursorcolumn = false,
    foldcolumn = &quot;0&quot;,
    spell = false,
    list = false,
    conceallevel = 3,
    concealcursor = &quot;nvic&quot;,
  },
  -- Send deleted files to the trash instead of permanently deleting them (:help oil-trash)
  delete_to_trash = false,
  -- Skip the confirmation popup for simple operations (:help oil.skip_confirm_for_simple_edits)
  skip_confirm_for_simple_edits = false,
  -- Selecting a new/moved/renamed file or directory will prompt you to save changes first
  -- (:help prompt_save_on_select_new_entry)
  prompt_save_on_select_new_entry = true,
  -- Oil will automatically delete hidden buffers after this delay
  -- You can set the delay to false to disable cleanup entirely
  -- Note that the cleanup process only starts when none of the oil buffers are currently displayed
  cleanup_delay_ms = 2000,
  lsp_file_methods = {
    -- Enable or disable LSP file operations
    enabled = true,
    -- Time to wait for LSP file operations to complete before skipping
    timeout_ms = 1000,
    -- Set to true to autosave buffers that are updated with LSP willRenameFiles
    -- Set to &quot;unmodified&quot; to only save unmodified buffers
    autosave_changes = false,
  },
  -- Constrain the cursor to the editable parts of the oil buffer
  -- Set to `false` to disable, or &quot;name&quot; to keep it on the file names
  constrain_cursor = &quot;editable&quot;,
  -- Set to true to watch the filesystem for changes and reload oil
  watch_for_changes = false,
  -- Keymaps in oil buffer. Can be any value that `vim.keymap.set` accepts OR a table of keymap
  -- options with a `callback` (e.g. { callback = function() ... end, desc = &quot;&quot;, mode = &quot;n&quot; })
  -- Additionally, if it is a string that matches &quot;actions.&amp;lt;name&amp;gt;&quot;,
  -- it will use the mapping at require(&quot;oil.actions&quot;).&amp;lt;name&amp;gt;
  -- Set to `false` to remove a keymap
  -- See :help oil-actions for a list of all available actions
  keymaps = {
    [&quot;g?&quot;] = { &quot;actions.show_help&quot;, mode = &quot;n&quot; },
    [&quot;&amp;lt;CR&amp;gt;&quot;] = &quot;actions.select&quot;,
    [&quot;&amp;lt;C-s&amp;gt;&quot;] = { &quot;actions.select&quot;, opts = { vertical = true } },
    [&quot;&amp;lt;C-h&amp;gt;&quot;] = { &quot;actions.select&quot;, opts = { horizontal = true } },
    [&quot;&amp;lt;C-t&amp;gt;&quot;] = { &quot;actions.select&quot;, opts = { tab = true } },
    [&quot;&amp;lt;C-p&amp;gt;&quot;] = &quot;actions.preview&quot;,
    [&quot;&amp;lt;C-c&amp;gt;&quot;] = { &quot;actions.close&quot;, mode = &quot;n&quot; },
    [&quot;&amp;lt;C-l&amp;gt;&quot;] = &quot;actions.refresh&quot;,
    [&quot;-&quot;] = { &quot;actions.parent&quot;, mode = &quot;n&quot; },
    [&quot;_&quot;] = { &quot;actions.open_cwd&quot;, mode = &quot;n&quot; },
    [&quot;`&quot;] = { &quot;actions.cd&quot;, mode = &quot;n&quot; },
    [&quot;~&quot;] = { &quot;actions.cd&quot;, opts = { scope = &quot;tab&quot; }, mode = &quot;n&quot; },
    [&quot;gs&quot;] = { &quot;actions.change_sort&quot;, mode = &quot;n&quot; },
    [&quot;gx&quot;] = &quot;actions.open_external&quot;,
    [&quot;g.&quot;] = { &quot;actions.toggle_hidden&quot;, mode = &quot;n&quot; },
    [&quot;g\\&quot;] = { &quot;actions.toggle_trash&quot;, mode = &quot;n&quot; },
  },
  -- Set to false to disable all of the above keymaps
  use_default_keymaps = true,
  view_options = {
    -- Show files and directories that start with &quot;.&quot;
    show_hidden = false,
    -- This function defines what is considered a &quot;hidden&quot; file
    is_hidden_file = function(name, bufnr)
      local m = name:match(&quot;^%.&quot;)
      return m ~= nil
    end,
    -- This function defines what will never be shown, even when `show_hidden` is set
    is_always_hidden = function(name, bufnr)
      return false
    end,
    -- Sort file names with numbers in a more intuitive order for humans.
    -- Can be &quot;fast&quot;, true, or false. &quot;fast&quot; will turn it off for large directories.
    natural_order = &quot;fast&quot;,
    -- Sort file and directory names case insensitive
    case_insensitive = false,
    sort = {
      -- sort order can be &quot;asc&quot; or &quot;desc&quot;
      -- see :help oil-columns to see which columns are sortable
      { &quot;type&quot;, &quot;asc&quot; },
      { &quot;name&quot;, &quot;asc&quot; },
    },
    -- Customize the highlight group for the file name
    highlight_filename = function(entry, is_hidden, is_link_target, is_link_orphan)
      return nil
    end,
  },
  -- Extra arguments to pass to SCP when moving/copying files over SSH
  extra_scp_args = {},
  -- EXPERIMENTAL support for performing file operations with git
  git = {
    -- Return true to automatically git add/mv/rm files
    add = function(path)
      return false
    end,
    mv = function(src_path, dest_path)
      return false
    end,
    rm = function(path)
      return false
    end,
  },
  -- Configuration for the floating window in oil.open_float
  float = {
    -- Padding around the floating window
    padding = 2,
    -- max_width and max_height can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
    max_width = 0,
    max_height = 0,
    border = &quot;rounded&quot;,
    win_options = {
      winblend = 0,
    },
    -- optionally override the oil buffers window title with custom function: fun(winid: integer): string
    get_win_title = nil,
    -- preview_split: Split direction: &quot;auto&quot;, &quot;left&quot;, &quot;right&quot;, &quot;above&quot;, &quot;below&quot;.
    preview_split = &quot;auto&quot;,
    -- This is the config that will be passed to nvim_open_win.
    -- Change values here to customize the layout
    override = function(conf)
      return conf
    end,
  },
  -- Configuration for the file preview window
  preview_win = {
    -- Whether the preview window is automatically updated when the cursor is moved
    update_on_cursor_moved = true,
    -- How to open the preview window &quot;load&quot;|&quot;scratch&quot;|&quot;fast_scratch&quot;
    preview_method = &quot;fast_scratch&quot;,
    -- A function that returns true to disable preview on a file e.g. to avoid lag
    disable_preview = function(filename)
      return false
    end,
    -- Window-local options to use for preview window buffers
    win_options = {},
  },
  -- Configuration for the floating action confirmation window
  confirmation = {
    -- Width dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
    -- min_width and max_width can be a single value or a list of mixed integer/float types.
    -- max_width = {100, 0.8} means &quot;the lesser of 100 columns or 80% of total&quot;
    max_width = 0.9,
    -- min_width = {40, 0.4} means &quot;the greater of 40 columns or 40% of total&quot;
    min_width = { 40, 0.4 },
    -- optionally define an integer/float for the exact width of the preview window
    width = nil,
    -- Height dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
    -- min_height and max_height can be a single value or a list of mixed integer/float types.
    -- max_height = {80, 0.9} means &quot;the lesser of 80 columns or 90% of total&quot;
    max_height = 0.9,
    -- min_height = {5, 0.1} means &quot;the greater of 5 columns or 10% of total&quot;
    min_height = { 5, 0.1 },
    -- optionally define an integer/float for the exact height of the preview window
    height = nil,
    border = &quot;rounded&quot;,
    win_options = {
      winblend = 0,
    },
  },
  -- Configuration for the floating progress window
  progress = {
    max_width = 0.9,
    min_width = { 40, 0.4 },
    width = nil,
    max_height = { 10, 0.9 },
    min_height = { 5, 0.1 },
    height = nil,
    border = &quot;rounded&quot;,
    minimized_border = &quot;none&quot;,
    win_options = {
      winblend = 0,
    },
  },
  -- Configuration for the floating SSH window
  ssh = {
    border = &quot;rounded&quot;,
  },
  -- Configuration for the floating keymaps help window
  keymaps_help = {
    border = &quot;rounded&quot;,
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Adapters&lt;/h2&gt; 
&lt;p&gt;Oil does all of its filesystem interaction through an &lt;em&gt;adapter&lt;/em&gt; abstraction. In practice, this means that oil can be used to view and modify files in more places than just the local filesystem, so long as the destination has an adapter implementation.&lt;/p&gt; 
&lt;p&gt;Note that file operations work &lt;em&gt;across adapters&lt;/em&gt;. This means that you can use oil to copy files to/from a remote server using the ssh adapter just as easily as you can copy files from one directory to another on your local machine.&lt;/p&gt; 
&lt;h3&gt;SSH&lt;/h3&gt; 
&lt;p&gt;This adapter allows you to browse files over ssh, much like netrw. To use it, simply open a buffer using the following name template:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nvim oil-ssh://[username@]hostname[:port]/[path]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This may look familiar. In fact, this is the same url format that netrw uses.&lt;/p&gt; 
&lt;p&gt;Note that at the moment the ssh adapter does not support Windows machines, and it requires the server to have a &lt;code&gt;/bin/sh&lt;/code&gt; binary as well as standard unix commands (&lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;ln&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;Recipes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/recipes.md#toggle-file-detail-view&quot;&gt;Toggle file detail view&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/recipes.md#show-cwd-in-the-winbar&quot;&gt;Show CWD in the winbar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/recipes.md#hide-gitignored-files-and-show-git-tracked-hidden-files&quot;&gt;Hide gitignored files and show git tracked hidden files&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Third-party extensions&lt;/h2&gt; 
&lt;p&gt;These are plugins maintained by other authors that extend the functionality of oil.nvim.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/refractalize/oil-git-status.nvim&quot;&gt;oil-git-status.nvim&lt;/a&gt; - Shows git status of files in statuscolumn&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/benomahony/oil-git.nvim&quot;&gt;oil-git.nvim&lt;/a&gt; - Shows git status of files with colour and symbols&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JezerM/oil-lsp-diagnostics.nvim&quot;&gt;oil-lsp-diagnostics.nvim&lt;/a&gt; - Shows LSP diagnostics indicator as virtual text&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;!-- API --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_entry_on_linebufnr-lnum&quot;&gt;get_entry_on_line(bufnr, lnum)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_cursor_entry&quot;&gt;get_cursor_entry()&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#discard_all_changes&quot;&gt;discard_all_changes()&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#set_columnscols&quot;&gt;set_columns(cols)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#set_sortsort&quot;&gt;set_sort(sort)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#set_is_hidden_fileis_hidden_file&quot;&gt;set_is_hidden_file(is_hidden_file)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#toggle_hidden&quot;&gt;toggle_hidden()&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#get_current_dirbufnr&quot;&gt;get_current_dir(bufnr)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#open_floatdir-opts-cb&quot;&gt;open_float(dir, opts, cb)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#toggle_floatdir&quot;&gt;toggle_float(dir)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#opendir-opts-cb&quot;&gt;open(dir, opts, cb)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#closeopts&quot;&gt;close(opts)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#open_previewopts-callback&quot;&gt;open_preview(opts, callback)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#selectopts-callback&quot;&gt;select(opts, callback)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#saveopts-cb&quot;&gt;save(opts, cb)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/stevearc/oil.nvim/master/doc/api.md#setupopts&quot;&gt;setup(opts)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /API --&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Q: Why &quot;oil&quot;&lt;/strong&gt;?&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; From the &lt;a href=&quot;https://github.com/tpope/vim-vinegar&quot;&gt;vim-vinegar&lt;/a&gt; README, a quote by Drew Neil:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Split windows and the project drawer go together like oil and vinegar&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Vinegar was taken. Let&#39;s be oil. Plus, I think it&#39;s pretty slick ;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Why would I want to use oil vs any other plugin?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You like to use a netrw-like view to browse directories (as opposed to a file tree)&lt;/li&gt; 
 &lt;li&gt;AND you want to be able to edit your filesystem like a buffer&lt;/li&gt; 
 &lt;li&gt;AND you want to perform cross-directory actions. AFAIK there is no other plugin that does this. (update: &lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-files.md&quot;&gt;mini.files&lt;/a&gt; also offers this functionality)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you don&#39;t need those features specifically, check out the alternatives listed below&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Why write another plugin yourself instead of adding functionality to one that already exists&lt;/strong&gt;?&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Because I am a &lt;em&gt;maniac control freak&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Can oil display files as a tree view&lt;/strong&gt;?&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; No. A tree view would require a completely different methodology, necessitating a complete rewrite. I don&#39;t use tree views, so I will leave this as a plugin for someone else to write.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: What are some alternatives?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-files.md&quot;&gt;mini.files&lt;/a&gt;: A newer plugin that also supports cross-directory filesystem-as-buffer edits. It utilizes a unique column view.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tpope/vim-vinegar&quot;&gt;vim-vinegar&lt;/a&gt;: The granddaddy. This made me fall in love with single-directory file browsing. I stopped using it when I encountered netrw bugs and performance issues.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Shougo/defx.nvim&quot;&gt;defx.nvim&lt;/a&gt;: What I switched to after vim-vinegar. Much more flexible and performant, but requires python and the API is a little hard to work with.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/elihunter173/dirbuf.nvim&quot;&gt;dirbuf.nvim&lt;/a&gt;: The first plugin I encountered that let you edit the filesystem like a buffer. Never used it because it &lt;a href=&quot;https://github.com/elihunter173/dirbuf.nvim/issues/7&quot;&gt;can&#39;t do cross-directory edits&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tamago324/lir.nvim&quot;&gt;lir.nvim&lt;/a&gt;: What I used prior to writing this plugin. Similar to vim-vinegar, but with better Neovim integration (floating windows, lua API).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/justinmk/vim-dirvish&quot;&gt;vim-dirvish&lt;/a&gt;: Never personally used, but well-established, stable, simple directory browser.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/trapd00r/vidir&quot;&gt;vidir&lt;/a&gt;: Never personally used, but might be the first plugin to come up with the idea of editing a directory like a buffer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There&#39;s also file trees like &lt;a href=&quot;https://github.com/nvim-neo-tree/neo-tree.nvim&quot;&gt;neo-tree&lt;/a&gt; and &lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;nvim-tree&lt;/a&gt;, but they&#39;re really a different category entirely.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nvim-lua/kickstart.nvim</title>
      <link>https://github.com/nvim-lua/kickstart.nvim</link>
      <description>&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kickstart.nvim&lt;/h1&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Small&lt;/li&gt; 
 &lt;li&gt;Single-file&lt;/li&gt; 
 &lt;li&gt;Completely Documented&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt; a Neovim distribution, but instead a starting point for your configuration.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install Neovim&lt;/h3&gt; 
&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/stable&quot;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&quot;https://github.com/neovim/neovim/releases/tag/nightly&quot;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; 
&lt;h3&gt;Install External Dependencies&lt;/h3&gt; 
&lt;p&gt;External Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic utils: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, C Compiler (&lt;code&gt;gcc&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep#installation&quot;&gt;ripgrep&lt;/a&gt;, &lt;a href=&quot;https://github.com/sharkdp/fd#installation&quot;&gt;fd-find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clipboard tool (xclip/xsel/win32yank or other depending on the platform)&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font&lt;/a&gt;: optional, provides various icons 
  &lt;ul&gt; 
   &lt;li&gt;if you have it set &lt;code&gt;vim.g.have_nerd_font&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt; to true&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emoji fonts (Ubuntu only, and only if you want emoji!) &lt;code&gt;sudo apt install fonts-noto-color-emoji&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Language Setup: 
  &lt;ul&gt; 
   &lt;li&gt;If you want to write Typescript, you need &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;If you want to write Golang, you will need &lt;code&gt;go&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Recipes&quot;&gt;Install Recipes&lt;/a&gt; for additional Windows and Linux specific notes and quick install snippets&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install Kickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#FAQ&quot;&gt;Backup&lt;/a&gt; your previous configuration (if any exists)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Neovim&#39;s configurations are located under the following paths, depending on your OS:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;OS&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;PATH&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Linux, MacOS&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$XDG_CONFIG_HOME/nvim&lt;/code&gt;, &lt;code&gt;~/.config/nvim&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (cmd)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;%localappdata%\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;Windows (powershell)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;code&gt;$env:LOCALAPPDATA\nvim\&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Recommended Step&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/fork-a-repo&quot;&gt;Fork&lt;/a&gt; this repo so that you have your own copy that you can modify, then install by cloning the fork to your machine using one of the commands below, depending on your OS.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Your fork&#39;s URL will be something like this: &lt;code&gt;https://github.com/&amp;lt;your_github_username&amp;gt;/kickstart.nvim.git&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You likely want to remove &lt;code&gt;lazy-lock.json&lt;/code&gt; from your fork&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file too - it&#39;s ignored in the kickstart repo to make maintenance easier, but it&#39;s &lt;a href=&quot;https://lazy.folke.io/usage/lockfile&quot;&gt;recommended to track it in version control&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Clone kickstart.nvim&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If following the recommended step above (i.e., forking the repo), replace &lt;code&gt;nvim-lua&lt;/code&gt; with &lt;code&gt;&amp;lt;your_github_username&amp;gt;&lt;/code&gt; in the commands below&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt;
 &lt;summary&gt; Linux and Mac &lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${XDG_CONFIG_HOME:-$HOME/.config}&quot;/nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt; Windows &lt;/summary&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;%localappdata%\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you&#39;re using &lt;code&gt;powershell.exe&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;git clone https://github.com/nvim-lua/kickstart.nvim.git &quot;${env:LOCALAPPDATA}\nvim&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Post Installation&lt;/h3&gt; 
&lt;p&gt;Start Neovim&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nvim
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it! Lazy will install all the plugins you have. Use &lt;code&gt;:Lazy&lt;/code&gt; to view the current plugin status. Hit &lt;code&gt;q&lt;/code&gt; to close the window.&lt;/p&gt; 
&lt;h4&gt;Read The Friendly Documentation&lt;/h4&gt; 
&lt;p&gt;Read through the &lt;code&gt;init.lua&lt;/code&gt; file in your configuration folder for more information about extending and exploring Neovim. That also includes examples of adding popularly requested plugins.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] For more information about a particular plugin check its repository&#39;s documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://youtu.be/m8C0Cq9Uv9o&quot;&gt;The Only Video You Need to Get Started with Neovim&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;What should I do if I already have a pre-existing Neovim configuration? 
  &lt;ul&gt; 
   &lt;li&gt;You should back it up and then delete all associated files.&lt;/li&gt; 
   &lt;li&gt;This includes your existing init.lua and the Neovim files in &lt;code&gt;~/.local&lt;/code&gt; which can be deleted with &lt;code&gt;rm -rf ~/.local/share/nvim/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Can I keep my existing configuration in parallel to kickstart? 
  &lt;ul&gt; 
   &lt;li&gt;Yes! You can use &lt;a href=&quot;https://neovim.io/doc/user/starting.html#%24NVIM_APPNAME&quot;&gt;NVIM_APPNAME&lt;/a&gt;&lt;code&gt;=nvim-NAME&lt;/code&gt; to maintain multiple configurations. For example, you can install the kickstart configuration in &lt;code&gt;~/.config/nvim-kickstart&lt;/code&gt; and create an alias: &lt;pre&gt;&lt;code&gt;alias nvim-kickstart=&#39;NVIM_APPNAME=&quot;nvim-kickstart&quot; nvim&#39;
&lt;/code&gt;&lt;/pre&gt; When you run Neovim using &lt;code&gt;nvim-kickstart&lt;/code&gt; alias it will use the alternative config directory and the matching local directory &lt;code&gt;~/.local/share/nvim-kickstart&lt;/code&gt;. You can apply this approach to any Neovim distribution that you would like to try out.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;What if I want to &quot;uninstall&quot; this configuration: 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href=&quot;https://lazy.folke.io/usage#-uninstalling&quot;&gt;lazy.nvim uninstall&lt;/a&gt; information&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the kickstart &lt;code&gt;init.lua&lt;/code&gt; a single file? Wouldn&#39;t it make sense to split it into multiple files? 
  &lt;ul&gt; 
   &lt;li&gt;The main purpose of kickstart is to serve as a teaching tool and a reference configuration that someone can easily use to &lt;code&gt;git clone&lt;/code&gt; as a basis for their own. As you progress in learning Neovim and Lua, you might consider splitting &lt;code&gt;init.lua&lt;/code&gt; into smaller parts. A fork of kickstart that does this while maintaining the same functionality is available here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/dam9000/kickstart-modular.nvim&quot;&gt;kickstart-modular.nvim&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Discussions on this topic can be found here: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/issues/218&quot;&gt;Restructure the configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/kickstart.nvim/pull/473&quot;&gt;Reorganize init.lua into a multi-file setup&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install Recipes&lt;/h3&gt; 
&lt;p&gt;Below you can find OS specific install instructions for Neovim and dependencies.&lt;/p&gt; 
&lt;p&gt;After installing all the dependencies continue with the &lt;a href=&quot;https://raw.githubusercontent.com/nvim-lua/kickstart.nvim/master/#Install-Kickstart&quot;&gt;Install Kickstart&lt;/a&gt; step.&lt;/p&gt; 
&lt;h4&gt;Windows Installation&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with Microsoft C++ Build Tools and CMake&lt;/summary&gt; Installation may require installing build tools and updating the run command for `telescope-fzf-native` 
 &lt;p&gt;See &lt;code&gt;telescope-fzf-native&lt;/code&gt; documentation for &lt;a href=&quot;https://github.com/nvim-telescope/telescope-fzf-native.nvim#installation&quot;&gt;more details&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This requires:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Install CMake and the Microsoft C++ Build Tools on Windows&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{&#39;nvim-telescope/telescope-fzf-native.nvim&#39;, build = &#39;cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release &amp;amp;&amp;amp; cmake --build build --config Release &amp;amp;&amp;amp; cmake --install build --prefix build&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Windows with gcc/make using chocolatey&lt;/summary&gt; Alternatively, one can install gcc and make which don&#39;t require changing the config, the easiest way is to use choco: 
 &lt;ol&gt; 
  &lt;li&gt;install &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; either follow the instructions on the page or use winget, run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;winget install --accept-source-agreements chocolatey.chocolatey
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start=&quot;2&quot;&gt; 
  &lt;li&gt;install all requirements using choco, exit the previous cmd and open a new one so that choco path is set, and run in cmd as &lt;strong&gt;admin&lt;/strong&gt;:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code&gt;choco install -y neovim git ripgrep wget fd unzip gzip mingw make
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;WSL (Windows Subsystem for Linux)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;wsl --install
wsl
sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Linux Install&lt;/h4&gt; 
&lt;details&gt;
 &lt;summary&gt;Ubuntu Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:neovim-ppa/unstable -y
sudo apt update
sudo apt install make gcc ripgrep unzip git xclip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Debian Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install make gcc ripgrep unzip git xclip curl

# Now we install nvim
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
sudo rm -rf /opt/nvim-linux-x86_64
sudo mkdir -p /opt/nvim-linux-x86_64
sudo chmod a+rX /opt/nvim-linux-x86_64
sudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz

# make it available in /usr/local/bin, distro installs to /usr/bin
sudo ln -sf /opt/nvim-linux-x86_64/bin/nvim /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Fedora Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo dnf install -y gcc make git ripgrep fd-find unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt;
 &lt;summary&gt;Arch Install Steps&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;sudo pacman -S --noconfirm --needed gcc make git ripgrep fd unzip neovim
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>greggh/claude-code.nvim</title>
      <link>https://github.com/greggh/claude-code.nvim</link>
      <description>&lt;p&gt;Seamless integration between Claude Code AI assistant and Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Neovim Plugin&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub Stars&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/issues&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/greggh/claude-code.nvim?style=flat-square&quot; alt=&quot;GitHub Issues&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/greggh/claude-code.nvim/ci.yml?branch=main&amp;amp;style=flat-square&amp;amp;logo=github&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/neovim/neovim&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim-0.7%2B-blueviolet?style=flat-square&amp;amp;logo=neovim&quot; alt=&quot;Neovim Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Tests-44%20passing-success?style=flat-square&amp;amp;logo=github-actions&quot; alt=&quot;Tests&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/releases/tag/v0.4.2&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Version-0.4.2-blue?style=flat-square&quot; alt=&quot;Version&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/discussions/greggh/claude-code.nvim?style=flat-square&amp;amp;logo=github&quot; alt=&quot;Discussions&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;A seamless integration between &lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code&lt;/a&gt; AI assistant and Neovim&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#features&quot;&gt;Features&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#requirements&quot;&gt;Requirements&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#installation&quot;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#configuration&quot;&gt;Configuration&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#usage&quot;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/#contributing&quot;&gt;Contributing&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/greggh/claude-code.nvim/raw/main/assets/claude-code.png?raw=true&quot; alt=&quot;Claude Code in Neovim&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;This plugin was built entirely with Claude Code in a Neovim terminal, and then inside itself using Claude Code for everything!&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;üöÄ Toggle Claude Code in a terminal window with a single key press&lt;/li&gt; 
 &lt;li&gt;üß† Support for command-line arguments like &lt;code&gt;--continue&lt;/code&gt; and custom variants&lt;/li&gt; 
 &lt;li&gt;üîÑ Automatically detect and reload files modified by Claude Code&lt;/li&gt; 
 &lt;li&gt;‚ö° Real-time buffer updates when files are changed externally&lt;/li&gt; 
 &lt;li&gt;üì± Customizable window position and size (including floating windows)&lt;/li&gt; 
 &lt;li&gt;ü§ñ Integration with which-key (if available)&lt;/li&gt; 
 &lt;li&gt;üìÇ Automatically uses git project root as working directory (when available)&lt;/li&gt; 
 &lt;li&gt;üß© Modular and maintainable code structure&lt;/li&gt; 
 &lt;li&gt;üìã Type annotations with LuaCATS for better IDE support&lt;/li&gt; 
 &lt;li&gt;‚úÖ Configuration validation to prevent errors&lt;/li&gt; 
 &lt;li&gt;üß™ Testing framework for reliability (44 comprehensive tests)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Neovim 0.7.0 or later&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code CLI&lt;/a&gt; tool installed and available in your PATH&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;plenary.nvim&lt;/a&gt; (dependency for git operations)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt; for version history and updates.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  &quot;greggh/claude-code.nvim&quot;,
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;, -- Required for git operations
  },
  config = function()
    require(&quot;claude-code&quot;).setup()
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &#39;greggh/claude-code.nvim&#39;,
  requires = {
    &#39;nvim-lua/plenary.nvim&#39;, -- Required for git operations
  },
  config = function()
    require(&#39;claude-code&#39;).setup()
  end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;greggh/claude-code.nvim&#39;
&quot; After installing, add this to your init.vim:
&quot; lua require(&#39;claude-code&#39;).setup()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The plugin can be configured by passing a table to the &lt;code&gt;setup&lt;/code&gt; function. Here&#39;s the default configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;claude-code&quot;).setup({
  -- Terminal window settings
  window = {
    split_ratio = 0.3,      -- Percentage of screen for the terminal window (height for horizontal, width for vertical splits)
    position = &quot;botright&quot;,  -- Position of the window: &quot;botright&quot;, &quot;topleft&quot;, &quot;vertical&quot;, &quot;float&quot;, etc.
    enter_insert = true,    -- Whether to enter insert mode when opening Claude Code
    hide_numbers = true,    -- Hide line numbers in the terminal window
    hide_signcolumn = true, -- Hide the sign column in the terminal window
    
    -- Floating window configuration (only applies when position = &quot;float&quot;)
    float = {
      width = &quot;80%&quot;,        -- Width: number of columns or percentage string
      height = &quot;80%&quot;,       -- Height: number of rows or percentage string
      row = &quot;center&quot;,       -- Row position: number, &quot;center&quot;, or percentage string
      col = &quot;center&quot;,       -- Column position: number, &quot;center&quot;, or percentage string
      relative = &quot;editor&quot;,  -- Relative to: &quot;editor&quot; or &quot;cursor&quot;
      border = &quot;rounded&quot;,   -- Border style: &quot;none&quot;, &quot;single&quot;, &quot;double&quot;, &quot;rounded&quot;, &quot;solid&quot;, &quot;shadow&quot;
    },
  },
  -- File refresh settings
  refresh = {
    enable = true,           -- Enable file change detection
    updatetime = 100,        -- updatetime when Claude Code is active (milliseconds)
    timer_interval = 1000,   -- How often to check for file changes (milliseconds)
    show_notifications = true, -- Show notification when files are reloaded
  },
  -- Git project settings
  git = {
    use_git_root = true,     -- Set CWD to git root when opening Claude Code (if in git project)
  },
  -- Shell-specific settings
  shell = {
    separator = &#39;&amp;amp;&amp;amp;&#39;,        -- Command separator used in shell commands
    pushd_cmd = &#39;pushd&#39;,     -- Command to push directory onto stack (e.g., &#39;pushd&#39; for bash/zsh, &#39;enter&#39; for nushell)
    popd_cmd = &#39;popd&#39;,       -- Command to pop directory from stack (e.g., &#39;popd&#39; for bash/zsh, &#39;exit&#39; for nushell)
  },
  -- Command settings
  command = &quot;claude&quot;,        -- Command used to launch Claude Code
  -- Command variants
  command_variants = {
    -- Conversation management
    continue = &quot;--continue&quot;, -- Resume the most recent conversation
    resume = &quot;--resume&quot;,     -- Display an interactive conversation picker

    -- Output options
    verbose = &quot;--verbose&quot;,   -- Enable verbose logging with full turn-by-turn output
  },
  -- Keymaps
  keymaps = {
    toggle = {
      normal = &quot;&amp;lt;C-,&amp;gt;&quot;,       -- Normal mode keymap for toggling Claude Code, false to disable
      terminal = &quot;&amp;lt;C-,&amp;gt;&quot;,     -- Terminal mode keymap for toggling Claude Code, false to disable
      variants = {
        continue = &quot;&amp;lt;leader&amp;gt;cC&quot;, -- Normal mode keymap for Claude Code with continue flag
        verbose = &quot;&amp;lt;leader&amp;gt;cV&quot;,  -- Normal mode keymap for Claude Code with verbose flag
      },
    },
    window_navigation = true, -- Enable window navigation keymaps (&amp;lt;C-h/j/k/l&amp;gt;)
    scrolling = true,         -- Enable scrolling keymaps (&amp;lt;C-f/b&amp;gt;) for page up/down
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Quick Start&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;&quot; In your Vim/Neovim commands or init file:
:ClaudeCode
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Or from Lua:
vim.cmd[[ClaudeCode]]

-- Or map to a key:
vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cc&#39;, &#39;&amp;lt;cmd&amp;gt;ClaudeCode&amp;lt;CR&amp;gt;&#39;, { desc = &#39;Toggle Claude Code&#39; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commands&lt;/h3&gt; 
&lt;p&gt;Basic command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCode&lt;/code&gt; - Toggle the Claude Code terminal window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Conversation management commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeContinue&lt;/code&gt; - Resume the most recent conversation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeResume&lt;/code&gt; - Display an interactive conversation picker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Output options command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:ClaudeCodeVerbose&lt;/code&gt; - Enable verbose logging with full turn-by-turn output&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: Commands are automatically generated for each entry in your &lt;code&gt;command_variants&lt;/code&gt; configuration.&lt;/p&gt; 
&lt;h3&gt;Key Mappings&lt;/h3&gt; 
&lt;p&gt;Default key mappings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ac&lt;/code&gt; - Toggle Claude Code terminal window (normal mode)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-,&amp;gt;&lt;/code&gt; - Toggle Claude Code terminal window (both normal and terminal modes)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Variant mode mappings (if configured):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cC&lt;/code&gt; - Toggle Claude Code with --continue flag&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cV&lt;/code&gt; - Toggle Claude Code with --verbose flag&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additionally, when in the Claude Code terminal:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;&lt;/code&gt; - Move to the window on the left&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt; - Move to the window below&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt; - Move to the window above&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt; - Move to the window on the right&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; - Scroll full-page down&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; - Scroll full-page up&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note: After scrolling with &lt;code&gt;&amp;lt;C-f&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;, you&#39;ll need to press the &lt;code&gt;i&lt;/code&gt; key to re-enter insert mode so you can continue typing to Claude Code.&lt;/p&gt; 
&lt;p&gt;When Claude Code modifies files that are open in Neovim, they&#39;ll be automatically reloaded.&lt;/p&gt; 
&lt;h3&gt;Floating Window Example&lt;/h3&gt; 
&lt;p&gt;To use Claude Code in a floating window:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;claude-code&quot;).setup({
  window = {
    position = &quot;float&quot;,
    float = {
      width = &quot;90%&quot;,      -- Take up 90% of the editor width
      height = &quot;90%&quot;,     -- Take up 90% of the editor height
      row = &quot;center&quot;,     -- Center vertically
      col = &quot;center&quot;,     -- Center horizontally
      relative = &quot;editor&quot;,
      border = &quot;double&quot;,  -- Use double border style
    },
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How it Works&lt;/h2&gt; 
&lt;p&gt;This plugin:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Creates a terminal buffer running the Claude Code CLI&lt;/li&gt; 
 &lt;li&gt;Sets up autocommands to detect file changes on disk&lt;/li&gt; 
 &lt;li&gt;Automatically reloads files when they&#39;re modified by Claude Code&lt;/li&gt; 
 &lt;li&gt;Provides convenient keymaps and commands for toggling the terminal&lt;/li&gt; 
 &lt;li&gt;Automatically detects git repositories and sets working directory to the git root&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Please check out our &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt; for details on how to get started.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License - See &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;For a complete guide on setting up a development environment, installing all required tools, and understanding the project structure, please refer to &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&quot;&gt;DEVELOPMENT.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Development Setup&lt;/h3&gt; 
&lt;p&gt;The project includes comprehensive setup for development:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Complete installation instructions for all platforms in &lt;a href=&quot;https://raw.githubusercontent.com/greggh/claude-code.nvim/main/DEVELOPMENT.md&quot;&gt;DEVELOPMENT.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pre-commit hooks for code quality&lt;/li&gt; 
 &lt;li&gt;Testing framework with 44 comprehensive tests&lt;/li&gt; 
 &lt;li&gt;Linting and formatting tools&lt;/li&gt; 
 &lt;li&gt;Weekly dependency updates workflow for Claude CLI and actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Run tests
make test

# Check code quality
make lint

# Set up pre-commit hooks
scripts/setup-hooks.sh

# Format code
make format
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/discussions&quot;&gt;GitHub Discussions&lt;/a&gt; - Get help, share ideas, and connect with other users&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/issues&quot;&gt;GitHub Issues&lt;/a&gt; - Report bugs or suggest features&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/greggh/claude-code.nvim/pulls&quot;&gt;GitHub Pull Requests&lt;/a&gt; - Contribute to the project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/anthropics/claude-code&quot;&gt;Claude Code&lt;/a&gt; by Anthropic - This plugin was entirely built using Claude Code. Development cost: $5.42 with 17m 12.9s of API time&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-lua/plenary.nvim&quot;&gt;Plenary.nvim&lt;/a&gt; - Core dependency for testing framework and Git operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; - Versioning standard used in this project&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.contributor-covenant.org/&quot;&gt;Contributor Covenant&lt;/a&gt; - Code of Conduct standard&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://keepachangelog.com/&quot;&gt;Keep a Changelog&lt;/a&gt; - Changelog format&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://luals.github.io/wiki/annotations/&quot;&gt;LuaCATS&lt;/a&gt; - Type annotations for better IDE support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JohnnyMorganz/StyLua&quot;&gt;StyLua&lt;/a&gt; - Lua code formatter&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lunarmodules/luacheck&quot;&gt;Luacheck&lt;/a&gt; - Lua static analyzer and linter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ‚ù§Ô∏è by &lt;a href=&quot;https://github.com/greggh&quot;&gt;Gregg Housh&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nvim-neorg/neorg</title>
      <link>https://github.com/nvim-neorg/neorg</link>
      <description>&lt;p&gt;Modernity meets insane extensibility. The future of organizing your life in Neovim.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/nvim-neorg/neorg/main/res/neorg.svg?sanitize=true&quot; width=&quot;300&quot; /&gt; 
 &lt;h1&gt;Neorg - An Organized Future&lt;/h1&gt; 
 &lt;p&gt;&lt;a href=&quot;https://neovim.io&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/Neovim%200.10+-brightgreen?style=for-the-badge&quot; alt=&quot;Neovim&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://discord.gg/T6EgTAX7ht&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/discord-join-7289da?style=for-the-badge&amp;amp;logo=discord&quot; alt=&quot;Discord&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neorg/neorg/main/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/license-GPL%20v3-brightgreen?style=for-the-badge&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dotfyle.com/plugins/nvim-neorg/neorg&quot;&gt; &lt;img src=&quot;https://dotfyle.com/plugins/nvim-neorg/neorg/shield?style=for-the-badge&quot; alt=&quot;Usage&quot; /&gt; &lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Your New Life Organization Tool - All in Lua&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-tutorial&quot;&gt;Tutorial&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neorg/neorg/main/ROADMAP.md&quot;&gt;Roadmap&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-installation&quot;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-further-learning&quot;&gt;Further Learning&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#credits&quot;&gt;Credits&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#support&quot;&gt;Support&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;br /&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;span&gt;‚ö†&lt;/span&gt; Neorg &lt;code&gt;9.0.0&lt;/code&gt; has introduced some breaking changes! Please see &lt;a href=&quot;https://vhyrro.github.io/posts/neorg-9-0-0/&quot;&gt;this blog post&lt;/a&gt; on what changed.&lt;/strong&gt;&lt;/p&gt; 
 &lt;h2&gt;Summary&lt;/h2&gt; 
&lt;/div&gt; 
&lt;p&gt;Neorg (&lt;em&gt;Neo&lt;/em&gt; - new, &lt;em&gt;org&lt;/em&gt; - organization) is a Neovim plugin designed to reimagine organization as you know it. Grab some coffee, start writing some notes, let your editor handle the rest.&lt;/p&gt; 
&lt;h3&gt;What is Neorg?&lt;/h3&gt; 
&lt;p&gt;Neorg is an all-encompassing tool based around structured note taking, project and task management, time tracking, slideshows, writing typeset documents and much more. The premise is that all of these features are built on top of a single base file format (&lt;code&gt;.norg&lt;/code&gt;), which the user only has to learn once to gain access to all of Neorg&#39;s functionality.&lt;/p&gt; 
&lt;p&gt;Not only does this yield a low barrier for entry for new users it also ensures that all features are integrated with each other and speak the same underlying language. The file format is built to be expressive and easy to parse, which also makes &lt;code&gt;.norg&lt;/code&gt; files easily usable anywhere outside of Neorg itself.&lt;/p&gt; 
&lt;p&gt;A good way of thinking about Neorg is as a plaintext environment which can be adapted to a variety of use cases. If a problem can be represented using raw text, it can be solved using Neorg.&lt;/p&gt; 
&lt;h6&gt;&lt;span&gt;‚ùó&lt;/span&gt; &lt;strong&gt;IMPORTANT&lt;/strong&gt;: Neorg is young software. We consider it stable however be prepared for occasional breaking workflow changes. Make sure to pin the version of Neorg you&#39;d like to use and only update when you are ready.&lt;/h6&gt; 
&lt;h2&gt;üåü Tutorial&lt;/h2&gt; 
&lt;p&gt;A video tutorial may be found on Youtube:&lt;/p&gt; 
&lt;div&gt; 
 &lt;a href=&quot;https://www.youtube.com/watch?v=NnmRVY22Lq8&amp;amp;list=PLx2ksyallYzVI8CN1JMXhEf62j2AijeDa&amp;amp;index=1&quot;&gt; &lt;img src=&quot;https://img.youtube.com/vi/NnmRVY22Lq8/0.jpg&quot; style=&quot;width:75%;&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;üì¶ Installation&lt;/h2&gt; 
&lt;p&gt;Neorg&#39;s setup process is slightly more complex than average, so we encourage you to be patient :)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Neorg requires Neovim 0.10 or above to function. After you&#39;re done with the installation process, run &lt;code&gt;:checkhealth neorg&lt;/code&gt; to see if everything&#39;s correct!&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;rocks.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;One way of installing Neorg is via &lt;a href=&quot;https://github.com/nvim-neorocks/rocks.nvim&quot;&gt;rocks.nvim&lt;/a&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Installation snippet.&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Run &lt;code&gt;:Rocks install rocks-config.nvim&lt;/code&gt; (if you don&#39;t have it already!).&lt;/li&gt; 
  &lt;li&gt;Run &lt;code&gt;:Rocks install neorg&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;From the root of your configuration (&lt;code&gt;~/.config/nvim/&lt;/code&gt; on unix-like systems), create a &lt;code&gt;lua/plugins/neorg.lua&lt;/code&gt; file and place the following content inside: &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;neorg&quot;).setup()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;!-- TODO: rewrite this section once a new luarocks release is made, as it will automatically download nvim-treesitter-legacy-api as a dependency --&gt; 
 &lt;p&gt;For the time being you also need &lt;code&gt;nvim-treesitter&lt;/code&gt; installed.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;:Rocks install nvim-treesitter-legacy-api&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;Just like the &lt;code&gt;neorg.lua&lt;/code&gt; file, create a &lt;code&gt;lua/plugins/treesitter.lua&lt;/code&gt; file and place the following content inside: &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;nvim-treesitter.configs&quot;).setup({
  highlight = {
    enable = true,
  },
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;The last three steps will eventually not be required to run Neorg.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;code&gt;neorg-kickstart&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Not bothered to set up Neovim on your own? Check out our &lt;a href=&quot;https://github.com/nvim-neorg/neorg/wiki/Kickstart&quot;&gt;kickstart config&lt;/a&gt; which will get you up and running with Neorg without any prior Neovim configuration knowledge.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;To install Neorg via lazy, first ensure that you have &lt;code&gt;luarocks&lt;/code&gt; installed on your system. On Linux/Mac, this involves installing using your system&#39;s package manager. On Windows, consider the &lt;a href=&quot;https://github.com/rjpcomputing/luaforwindows&quot;&gt;Lua for Windows&lt;/a&gt; all-in-one package.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for installation snippet.&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;nvim-neorg/neorg&quot;,
    lazy = false, -- Disable lazy loading as some `lazy.nvim` distributions set `lazy = true` by default
    version = &quot;*&quot;, -- Pin Neorg to the latest stable release
    config = true,
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;While lazy &lt;a href=&quot;https://lazy.folke.io/spec#spec-lazy-loading&quot;&gt;supports lazy-loading upon specific commands and filetypes&lt;/a&gt;, it can cause neorg to load incorrectly, leading to a &#39;broken&#39; plugin. Lazy load at your own risk, and disable lazy loading as your first debugging step.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Neorg can be installed purely via luarocks on packer, pulling in all required dependencies in the process.&lt;/p&gt; 
&lt;p&gt;It is not recommended to use packer as it is now unmaintained.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for installation snippet.&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;use {
  &quot;nvim-neorg/neorg&quot;,
  rocks = { &quot;lua-utils.nvim&quot;, &quot;nvim-nio&quot;, &quot;nui.nvim&quot;, &quot;plenary.nvim&quot;, &quot;pathlib.nvim&quot;, &quot;nvim-treesitter-legacy-api&quot; },
  tag = &quot;*&quot;, -- Pin Neorg to the latest stable release
  config = function()
      require(&quot;neorg&quot;).setup()
  end,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Other Plugin Managers&lt;/h3&gt; 
&lt;p&gt;Because of the complexities of &lt;code&gt;luarocks&lt;/code&gt;, we are choosing not to support other plugin managers for the time being. It is actively on our TODO list, however!&lt;/p&gt; 
&lt;h2&gt;üìö Further Learning&lt;/h2&gt; 
&lt;p&gt;After you have installed Neorg, we recommend you head over to either the Youtube tutorial series or to the &lt;a href=&quot;https://github.com/nvim-neorg/neorg/wiki&quot;&gt;wiki&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Massive shoutouts go to all the contributors actively working on the project together to form a fantastic integrated workflow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mrossinek&quot;&gt;mrossinek&lt;/a&gt; - for basically being my second brain when it comes to developing new features and adding new syntax elements&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danymat&quot;&gt;danymat&lt;/a&gt; - for creating the excellent foundations for the up and coming GTD system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And an extra thank you to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dvchoudh&quot;&gt;Binx&lt;/a&gt; - for making that gorgeous logo for free!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bandithedoge&quot;&gt;bandithedoge&lt;/a&gt; - for converting the PNG version of the logo into SVG form&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Love what I do? Want to see more get done faster? Want to support future projects? Any sort of support is always heartwarming and fuels the urge to keep going &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;. You can show support here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://buymeacoffee.com/vhyrro&quot;&gt;Buy me a coffee!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sponsors/vhyrro&quot;&gt;Support me via Github Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://patreon.com/vhyrro&quot;&gt;Support me on Patreon&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Immense thank you to all of the sponsors of my work!&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;!-- sponsors --&gt;
 &lt;a href=&quot;https://github.com/vsedov&quot;&gt;&lt;img src=&quot;https://github.com/vsedov.png&quot; width=&quot;60px&quot; alt=&quot;vsedov&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 &lt;a href=&quot;https://github.com/molleweide&quot;&gt;&lt;img src=&quot;https://github.com/molleweide.png&quot; width=&quot;60px&quot; alt=&quot;molleweide&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 &lt;a href=&quot;https://github.com/danymat&quot;&gt;&lt;img src=&quot;https://github.com/danymat.png&quot; width=&quot;60px&quot; alt=&quot;danymat&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 &lt;a href=&quot;https://github.com/purepani&quot;&gt;&lt;img src=&quot;https://github.com/purepani.png&quot; width=&quot;60px&quot; alt=&quot;purepani&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 &lt;a href=&quot;https://github.com/jgregoire&quot;&gt;&lt;img src=&quot;https://github.com/jgregoire.png&quot; width=&quot;60px&quot; alt=&quot;jgregoire&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 &lt;a href=&quot;https://github.com/bottd&quot;&gt;&lt;img src=&quot;https://github.com/bottd.png&quot; width=&quot;60px&quot; alt=&quot;bottd&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 &lt;a href=&quot;https://github.com/kvodenicharov&quot;&gt;&lt;img src=&quot;https://github.com/kvodenicharov.png&quot; width=&quot;60px&quot; alt=&quot;kvodenicharov&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 &lt;a href=&quot;https://github.com/freexploit&quot;&gt;&lt;img src=&quot;https://github.com/freexploit.png&quot; width=&quot;60px&quot; alt=&quot;freexploit&quot; /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 &lt;!-- sponsors --&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>gaboolic/rime-frost</title>
      <link>https://github.com/gaboolic/rime-frost</link>
      <description>&lt;p&gt;ÁôΩÈúúÊãºÈü≥ÔºöËíπËë≠ËãçËãçÔºåÁôΩÈú≤‰∏∫Èúú„ÄÇÁôΩÈúúÊãºÈü≥‰ΩøÁî®‰ΩøÁî®745396750Â≠óÁöÑÈ´òË¥®ÈáèËØ≠ÊñôÔºåËøõË°åÂàÜËØçÔºåÈáçÊñ∞ÁªüËÆ°Â≠óÈ¢ë„ÄÅËØçÈ¢ëÔºåÂΩí‰∏ÄÂåñÔºåÊâìÈÄ†Á∫ØÂáÄ„ÄÅËØçÈ¢ëÂáÜÁ°Æ„ÄÅÊô∫ËÉΩÁöÑËØçÂ∫ì„ÄÇÁôΩÈúúËØçÂ∫ìÊòØÁõÆÂâçrimeÊñπÊ°à‰∏ãÊúÄÂ•ΩÁöÑÂºÄÊ∫êËØçÂ∫ìÔºåÁ´ãÂøó‰∫éÊâìÈÄ†‰∏çËæì‰∫éÂïÜ‰∏öËæìÂÖ•Ê≥ïÁöÑËæìÂÖ•‰ΩìÈ™å„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ÁôΩÈúúÊãºÈü≥&lt;/h1&gt; 
&lt;p&gt;ÂéüÂßãÈÖçÁΩÆÂíåËØçÂ∫ìÁî±&lt;a href=&quot;https://github.com/iDvel/rime-ice&quot;&gt;ÈõæÂááÊãºÈü≥&lt;/a&gt;ÁöÑ &lt;a href=&quot;https://github.com/iDvel/rime-ice/commit/af2480ba1b147a6a54c0c21e2997ef451c34e036&quot;&gt;af2480b&lt;/a&gt; commit ‰øÆÊîπËÄåÊù•„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÈõæÂááËØçÂ∫ìÈáåÁöÑËØçÊØîËæÉÂÖ®‰ΩÜ‰πü‰∏çÊòØÈùûÂ∏∏ÂÖ®Ôºå‰∏ªË¶ÅÁöÑÈóÆÈ¢òÊòØÂ≠óÈ¢ëÂíåËØçÈ¢ë‰∏çÂ§™ÂØπÔºåÂ∫üËØçÊúâÁÇπÂ§öÔºå‰∫éÊòØÈáçÊñ∞Âà∂‰Ωú„ÄÇ&lt;/p&gt; 
&lt;p&gt;‰∏ªË¶ÅÁª¥Êä§ËØçÂ∫ì„ÄÅËØçÈ¢ë„ÄÇÂú®ÈõæÂááËØçÂ∫ìÁöÑÂü∫Á°Ä‰∏äÂà†Èô§‰∫Ü‰∏çÂÅ•Â∫∑ËØçÊ±áÔºåÂà†Èô§‰∫ÜÂ§ßÈáèÂÜ∑ÂÉªËØçÔºàÈ¢ëÁéá==1 ‰∏îÂàÜËØçÂô®ÂàÜ‰∏çÂá∫ÁöÑËØçÔºâÔºåÂà†Èô§/Ë∞ÉÊï¥‰∫ÜËØ∏Â¶Ç‚ÄúÁöÑÂêß‚Äù„ÄÅ‚ÄúÁöÑ‰∫Ü‚ÄùËøôÁßç‰∏çÊòØËØçÁöÑËØç„ÄÇÊâãÂä®Â§ßÈáè‰øÆÊîπ‰∫ÜÂ≠óÈ¢ë ËØçÈ¢ë„ÄÇÁ¨¨‰∏ÄÊ≠•ÊòØÂÅö‰∫ÜÂáèÊ≥ï„ÄÇ&lt;/p&gt; 
&lt;p&gt;ÁÑ∂Âêé‰ΩøÁî® 745396750 Â≠óÁöÑÈ´òË¥®ÈáèËØ≠ÊñôÔºåËøõË°åÂàÜËØçÔºåÈáçÊñ∞ÁªüËÆ°Â≠óÈ¢ë„ÄÅËØçÈ¢ëÔºåÂΩí‰∏ÄÂåñÔºå‰ª•ËææÂà∞Êõ¥Â•ΩÁöÑËæìÂÖ•ÊïàÊûú„ÄÇÂÖ®ÊãºÂíåÂèåÊãºÈÉΩÂèØ‰ª•‰ΩøÁî®„ÄÇ&lt;/p&gt; 
&lt;h3&gt;‰ΩøÁî®ÊñπÊ≥ï&lt;/h3&gt; 
&lt;p&gt;‰ΩøÁî®ÊñπÊ≥ïÂü∫Êú¨ÂêåÈõæÂááÊãºÈü≥ÔºåÂæÆË∞É‰∫Ü‰∏Ä‰∫õËß¶ÂèëÊåá‰ª§ÔºåÂä†ÂÖ•‰∫ÜluaËæÖÂä©Á†ÅÁöÑÊîØÊåÅ„ÄÇËæÖÂä©Á†ÅÊòØÂèØÈÄâÈ°πÔºåÊåâ‰∏ã`ÂºÄÂêØÔºå‰∏çÂΩ±ÂìçÊ≠£Â∏∏ÊâìÂ≠ó„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Á¨¶Âè∑ /fh Êõ¥Â§öÁ¨¶Âè∑ËØ¶ËßÅ&lt;code&gt;https://github.com/gaboolic/rime-frost/blob/master/symbols_v.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Â∏¶Ë∞ÉÈüµÊØç /a /e /u Á≠â&lt;/li&gt; 
 &lt;li&gt;Êó•Êúü‰∏éÊó∂Èó¥ rq sj xq dt ts&lt;/li&gt; 
 &lt;li&gt;ÂºÄÂêØËæÖÂä©Á†Å ` &lt;a href=&quot;https://moqiyinxing.chunqiujinjing.com/index/mo-qi-yin-xing-shuo-ming/fu-zhu-ma-shuo-ming/mo-qi-ma-chai-fen-shuo-ming&quot;&gt;Â¢®Â•áËæÖÂä©Á†ÅÊãÜÂàÜËØ¥Êòé&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ÈÉ®‰ª∂ÊãÜÂ≠óÂèçÊü• uU&lt;/li&gt; 
 &lt;li&gt;unicodeÂ≠óÁ¨¶ U&lt;/li&gt; 
 &lt;li&gt;Êï∞Â≠óÈáëÈ¢ùÂ§ßÂÜô R&lt;/li&gt; 
 &lt;li&gt;ÂÜúÂéÜ N&lt;/li&gt; 
 &lt;li&gt;ËÆ°ÁÆóÂô® V&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Â¶Ç‰ΩïÂÆâË£Ö&amp;amp;ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ&lt;/h3&gt; 
&lt;h4&gt;ÊâãÂä®‰∏ãËΩΩÂÆâË£Ö&lt;/h4&gt; 
&lt;p&gt;‰∏ãËΩΩÊú¨‰ªìÂ∫ìÁöÑÂéãÁº©ÂåÖ Code - Download ZIPÔºàÊàñËÄÖ‰∏ãËΩΩ&lt;a href=&quot;https://github.com/gaboolic/rime-frost/releases&quot;&gt;releases&lt;/a&gt;ÊúÄÊñ∞ÁöÑ source-code.zipÔºâÔºåËß£ÂéãÂà∞Â¶Ç‰∏ãË∑ØÂæÑÂç≥ÂèØ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows: &lt;code&gt;%APPDATA%\Rime&lt;/code&gt; ÔºàÂèØ‰ª•Âú®Âè≥‰∏ãËßíÂ∞èÁãºÊØ´ËæìÂÖ•Ê≥ïÂè≥ÈîÆÊâìÂºÄËèúÂçïÈÄâÁî®Êà∑Êñá‰ª∂Â§πÔºâÂ§çÂà∂ÂÆå‰πãÂêéÔºåÂéªËæìÂÖ•Ê≥ïËÆæÂÆöÈáåÈÄâÊã©ÁôΩÈúúÊãºÈü≥ÔºåÁÑ∂ÂêéÈáçÊñ∞ÈÉ®ÁΩ≤&lt;/li&gt; 
 &lt;li&gt;Mac 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rime/squirrel&quot;&gt;Èº†È°ªÁÆ°&lt;/a&gt;Ë∑ØÂæÑ‰∏∫ &lt;code&gt;~/Library/Rime&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/fcitx-contrib/fcitx5-macos&quot;&gt;fcitx5-Mac Áâà&lt;/a&gt;Ë∑ØÂæÑ‰∏∫ &lt;code&gt;~/.local/share/fcitx5/rime&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Linux 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/fcitx/fcitx5-rime&quot;&gt;fcitx5-rime&lt;/a&gt;Ë∑ØÂæÑ‰∏∫ &lt;code&gt;~/.local/share/fcitx5/rime&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;fcitx5 flatpak ÁâàÁöÑË∑ØÂæÑ &lt;code&gt;~/.var/app/org.fcitx.Fcitx5/data/fcitx5/rime&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/rime/ibus-rime&quot;&gt;ibus-rime&lt;/a&gt;Ë∑ØÂæÑ‰∏∫ &lt;code&gt;~/.config/ibus/rime&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Android 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/fcitx5-android/fcitx5-android&quot;&gt;fcitx5-ÂÆâÂçìÁâà&lt;/a&gt;Ë∑ØÂæÑ‰∏∫ &lt;code&gt;/Android/data/org.fcitx.fcitx5.android/files/data/rime&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/osfans/trime&quot;&gt;ÂêåÊñá&lt;/a&gt;Ë∑ØÂæÑ‰∏∫ &lt;code&gt;/rime&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/gurecn/YuyanIme&quot;&gt;Èõ®Ááï&lt;/a&gt; Â∑≤ÂÜÖÁΩÆÁôΩÈúúËØçÂ∫ìËØçÈ¢ëÔºåÁõ¥Êé•ÂÆâË£Ö‰ΩøÁî®Âç≥ÂèØ&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iOS &lt;a href=&quot;https://github.com/imfuxiao/Hamster&quot;&gt;‰ªìËæìÂÖ•Ê≥ï&lt;/a&gt; ÁõÆÂâçÂ∑≤ÂÜÖÁΩÆÔºå‰πüÂèØ‰ª•ÈÄöËøá„ÄêËæìÂÖ•ÊñπÊ°àËÆæÁΩÆ - Âè≥‰∏äËßíÂä†Âè∑ - ÊñπÊ°à‰∏ãËΩΩ - Ë¶ÜÁõñÂπ∂ÈÉ®ÁΩ≤„ÄëÊù•Êõ¥Êñ∞ÁôΩÈúúÊãºÈü≥„ÄÇ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;ÈÄöËøá Git ÂÆâË£Ö&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;È¶ñÊ¨°ÂÆâË£ÖÔºö&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Ê†πÊçÆÁî®Êà∑‰ΩøÁî®ÁöÑÁ≥ªÁªü„ÄÅÂÆâË£ÖÁöÑËΩØ‰ª∂‰∏çÂêåÔºåÂÖàcdÂà∞ÂØπÂ∫îÁöÑÈÖçÁΩÆÊñá‰ª∂ÁöÑÁà∂Á∫ßÁõÆÂΩï(‰æãÂ¶ÇWindows‰∏∫&lt;code&gt;%APPDATA%&lt;/code&gt;„ÄÅmacÈº†È°ªÁÆ°‰∏∫&lt;code&gt;~/Library/&lt;/code&gt;)ÔºåÁÑ∂ÂêéÊâßË°å‰ª•‰∏ãÂëΩ‰ª§Ôºö&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;git clone --depth 1 https://github.com/gaboolic/rime-frost Rime&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÂêéÁª≠Êõ¥Êñ∞Ôºö&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Âú® Rime Êñá‰ª∂Â§πÊâßË°å &lt;code&gt;git pull&lt;/code&gt; Âç≥ÂèØ„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mac: &lt;code&gt;cd ~/Library/Rime &amp;amp;&amp;amp; git pull&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Windows: &lt;code&gt;cd &quot;$env:APPDATA\Rime&quot; &amp;amp;&amp;amp; git pull&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;ÂÖ∂‰ªñÁ≥ªÁªü‰ª•Ê≠§Á±ªÊé®&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;ÈÄöËøá ‰∏úÈ£éÁ†¥ ÂÆâË£Ö&lt;/h4&gt; 
&lt;p&gt;ÈÄâÊã©ÈÖçÊñπÔºàothers/recipes/*.recipe.yamlÔºâÊù•ËøõË°åÂÆâË£ÖÊàñÊõ¥Êñ∞Ôºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚Ñû ÂÆâË£ÖÊàñÊõ¥Êñ∞ÂÖ®ÈÉ®Êñá‰ª∂ ÊâßË°åbash rime-install gaboolic/rime-frost:others/recipes/full&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Êó†Êô∫ËÉΩÊ®°ÂûãÊó∂ÁöÑËæìÂÖ•ÊïàÊûú&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/gegegojx.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/mggjdgg.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/ddmdd.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/tushuguancangshu.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/znjldkd.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/kudsvqw.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/cqlbtdmdfu.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/djbwv.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/%E5%88%9A%E4%BA%A4%E7%9A%84%E6%9C%8B%E5%8F%8B.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/%E5%88%9A%E4%BA%A4%E7%9A%84%E5%A5%BD%E6%9C%8B%E5%8F%8B.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/%E5%88%9A%E4%BA%A4%E7%9A%84%E5%A5%BD%E6%9C%8B%E5%8F%8B2.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/%E8%A1%8D%E5%B0%84.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt; 
&lt;h3&gt;To-Do&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Êï¥ÁêÜÂàÜËØçÂêéËØçÈ¢ëÊØîËæÉÈ´ò‰ΩÜËØçÂ∫ìÊ≤°ÊúâÁöÑËØçÂä†ËøõÂéª&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; ÈîôÂ≠óÈîôÈü≥ÊèêÈÜílua&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; ÂÜôËá™Âä®ÂåñËÑöÊú¨ÔºåÊääÂè•Â≠êËΩ¨ÊàêÊãºÈü≥ÔºåÂÜçÁî®ÊãºÈü≥Ë∞ÉÁî® rime_api ÁîüÊàêÂè•Â≠êÔºåÊØîÂØπÊ≠£Á°ÆÁéáÔºåËø≠‰ª£&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Âä†‰∏äÂ¢®Â•áÁ†ÅÈ¶ñÊú´Â≠óÂΩ¢ÂèçÊü•Ôºå‰æãÂ¶Ç amq ÂºïÂØºÁ¨¶ÂÜçÊâì mu cun ÂèØ‰ª•ÊâìÂá∫‚ÄúÊùë Ê´â Ê¢º Ê†ë‚ÄùÁ≠âÂ≠ó&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Âä†‰∏ä lua ÂºïÂØºËæÖÂä©Á†ÅÁöÑÂäüËÉΩ&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; 2 Â≠óËØçÔºåÂä®ËØç+ÂêçËØçÁªìÊûÑÔºå‰∏≠Èó¥Âä†ÂÖ•‚Äú‰∫Ü‚Äù ‚ÄúÂÆå‚ÄùÔºåÁªìÂ∞æÂä†ÂÖ•‚ÄúÊ≤°‚ÄùËá™Âä®Ê¥æÁîüËØçÊ±á„ÄÇ 
  &lt;ul&gt; 
   &lt;li&gt;‰æãÂ¶ÇÔºö 
    &lt;ul&gt; 
     &lt;li&gt;ÊãîÁâôÔºö Êãî‰∫ÜÁâôÔºåÊãîÂÆåÁâôÔºåÊãîÁâôÊ≤°ÔºåÊ≤°ÊãîÁâôÔºåÊãîÊ≤°ÊãîÁâô&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;ÂΩ¢ÂÆπËØç‰∏≠Èó¥Âä†‚Äú‰∏ç‚ÄùÔºö 
    &lt;ul&gt; 
     &lt;li&gt;‰æãÂ¶ÇÔºöÂéâÂÆ≥‚ÜíÂéâ‰∏çÂéâÂÆ≥&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Á±ª‰ºº‚ÄúÁ¨¨Âõõ ÂõõÂàó = Á¨¨ÂõõÂàó‚ÄùËøôÁßçËØçÂä†‰∏äÂéª&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; ÁªüËÆ°‰∏≠ÊñáËØ≠Êñô‰∏≠ÁöÑËã±ÊñáËØçÈ¢ë&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; ËÆ≠ÁªÉ‰∏Ä‰∏™Êô∫ËÉΩËØ≠Ë®ÄÊ®°Âûã&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;È∏£Ë∞¢&lt;/h3&gt; 
&lt;p&gt;ÈõæÂááËØçÂ∫ì &lt;a href=&quot;https://github.com/iDvel/rime-ice&quot;&gt;https://github.com/iDvel/rime-ice&lt;/a&gt; ÁôΩÈúúËØçÂ∫ìÁöÑÂàùÂßãËØçÂ∫ì„ÄÅÁªùÂ§ßÈÉ®ÂàÜÈÖçÁΩÆÊù•Ëá™ÈõæÂááËØçÂ∫ì&lt;/p&gt; 
&lt;p&gt;ÁªìÂ∑¥‰∏≠ÊñáÂàÜËØç &lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;https://github.com/fxsjy/jieba&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Ê±âÂ≠óËΩ¨ÊãºÈü≥(pypinyin) &lt;a href=&quot;https://github.com/mozillazg/python-pinyin&quot;&gt;https://github.com/mozillazg/python-pinyin&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;MNBVC Ë∂ÖÂ§ßËßÑÊ®°‰∏≠ÊñáËØ≠ÊñôÈõÜ &lt;a href=&quot;https://github.com/esbatmop/MNBVC&quot;&gt;https://github.com/esbatmop/MNBVC&lt;/a&gt; ÁõÆÂâçÂ∑≤Êúâ 33TB Êï∞ÊçÆÈáè&lt;/p&gt; 
&lt;p&gt;kenlm &lt;a href=&quot;https://github.com/kpu/kenlm&quot;&gt;https://github.com/kpu/kenlm&lt;/a&gt; ÂÆòÁΩë&lt;a href=&quot;https://kheafield.com/code/kenlm/&quot;&gt;https://kheafield.com/code/kenlm/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;kenlm ÊïôÁ®ã„ÄÅpython Ë∞ÉÁî® &lt;a href=&quot;https://github.com/mattzheng/py-kenlm-model&quot;&gt;https://github.com/mattzheng/py-kenlm-model&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ÂêâÁ••Áâ©(‰∫é2024-10-12Êç°Êù•)Ôºö&lt;/p&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/gaboolic/rime-frost/master/others/img/white-cat.jpg&quot; width=&quot;30%&quot; /&gt; 
&lt;h3&gt;ÂèãÊÉÖÈìæÊé•&lt;/h3&gt; 
&lt;p&gt;‰ΩøÁî®ÁôΩÈúúËØçÂ∫ìÁöÑÊñπÊ°à&lt;/p&gt; 
&lt;p&gt;Â¢®Â•áÈü≥ÂΩ¢ &lt;a href=&quot;https://github.com/gaboolic/rime-shuangpin-fuzhuma&quot;&gt;https://github.com/gaboolic/rime-shuangpin-fuzhuma&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Â¢®Â•á‰∫îÁ¨îÊï¥Âè• &lt;a href=&quot;https://github.com/gaboolic/rime-wubi-sentence&quot;&gt;https://github.com/gaboolic/rime-wubi-sentence&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ËñÑËç∑ÊãºÈü≥ &lt;a href=&quot;https://github.com/Mintimate/oh-my-rime&quot;&gt;https://github.com/Mintimate/oh-my-rime&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Èõ®ÁáïËæìÂÖ•Ê≥ï &lt;a href=&quot;https://github.com/gurecn/YuyanIme&quot;&gt;https://github.com/gurecn/YuyanIme&lt;/a&gt; ‰∏Ä‰∏™ÂºÄÁÆ±Âç≥Áî®ÁöÑÂÆâÂçìËæìÂÖ•Ê≥ï ÂÜÖÁΩÆÁôΩÈúúËØçÂ∫ì&lt;/p&gt; 
&lt;h3&gt;Star History&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://star-history.com/#gaboolic/rime-frost&amp;amp;Date&quot;&gt;&lt;img src=&quot;https://api.star-history.com/svg?repos=gaboolic/rime-frost&amp;amp;type=Date&quot; alt=&quot;Star History Chart&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yetone/avante.nvim</title>
      <link>https://github.com/yetone/avante.nvim</link>
      <description>&lt;p&gt;Use your Neovim like using Cursor AI IDE!&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot; markdown=&quot;1&quot;&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href=&quot;https://www.warp.dev/avantenvim&quot;&gt; &lt;img alt=&quot;Warp sponsorship&quot; width=&quot;400&quot; src=&quot;https://github.com/user-attachments/assets/0fb088f2-f684-4d17-86d2-07a489229083&quot; /&gt; &lt;/a&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://www.warp.dev/avantenvim&quot;&gt;Warp, the intelligent terminal for developers&lt;/a&gt;&lt;/h3&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.warp.dev/avantenvim&quot;&gt;Available for MacOS, Linux, &amp;amp; Windows&lt;/a&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img alt=&quot;logo&quot; width=&quot;120&quot; src=&quot;https://github.com/user-attachments/assets/2e2f2a58-2b28-4d11-afd1-87b65612b2de&quot; /&gt; 
 &lt;h1&gt;avante.nvim&lt;/h1&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://neovim.io/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=Neovim&amp;amp;message=v0.10%2b&amp;amp;logo=neovim&amp;amp;labelColor=282828&amp;amp;logoColor=8faa80&amp;amp;color=414b32&quot; alt=&quot;Neovim: v0.10+&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/lua.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/lua.yaml?style=flat-square&amp;amp;logo=lua&amp;amp;logoColor=c7c7c7&amp;amp;label=Lua+CI&amp;amp;labelColor=1E40AF&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Lua CI status&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/rust.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/rust.yaml?style=flat-square&amp;amp;logo=rust&amp;amp;logoColor=ffffff&amp;amp;label=Rust+CI&amp;amp;labelColor=BC826A&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;Rust CI status&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/yetone/avante.nvim/actions/workflows/pre-commit.yaml&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/pre-commit.yaml?style=flat-square&amp;amp;logo=pre-commit&amp;amp;logoColor=ffffff&amp;amp;label=pre-commit&amp;amp;labelColor=FAAF3F&amp;amp;color=347D39&amp;amp;event=push&quot; alt=&quot;pre-commit status&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://discord.gg/QfnEFEdSjz&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/discord/1302530866362323016?style=flat-square&amp;amp;logo=discord&amp;amp;label=Discord&amp;amp;logoColor=ffffff&amp;amp;labelColor=7376CF&amp;amp;color=268165&quot; alt=&quot;Discord&quot; /&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://dotfyle.com/plugins/yetone/avante.nvim&quot;&gt; &lt;img src=&quot;https://dotfyle.com/plugins/yetone/avante.nvim/shield?style=flat-square&quot; /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;avante.nvim&lt;/strong&gt; is a Neovim plugin designed to emulate the behaviour of the &lt;a href=&quot;https://www.cursor.com&quot;&gt;Cursor&lt;/a&gt; AI IDE. It provides users with AI-driven code suggestions and the ability to apply these recommendations directly to their source files with minimal effort.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/README_zh.md&quot;&gt;Êü•Áúã‰∏≠ÊñáÁâà&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;ü•∞ This project is undergoing rapid iterations, and many exciting features will be added successively. Stay tuned!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&quot;&gt;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&quot;&gt;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsorship ‚ù§Ô∏è&lt;/h2&gt; 
&lt;p&gt;If you like this project, please consider supporting me on Patreon, as it helps me to continue maintaining and improving it:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://patreon.com/yetone&quot;&gt;Sponsor me&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;AI-Powered Code Assistance&lt;/strong&gt;: Interact with AI to ask questions about your current code file and receive intelligent suggestions for improvement or modification.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;One-Click Application&lt;/strong&gt;: Quickly apply the AI&#39;s suggested changes to your source code with a single command, streamlining the editing process and saving time.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Project-Specific Instruction Files&lt;/strong&gt;: Customize AI behavior by adding a markdown file (&lt;code&gt;avante.md&lt;/code&gt; by default) in the project root. This file is automatically referenced during workspace changes. You can also configure a custom file name for tailored project instructions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Avante Zen Mode&lt;/h2&gt; 
&lt;p&gt;Due to the prevalence of claude code, it is clear that this is an era of Coding Agent CLIs. As a result, there are many arguments like: in the Vibe Coding era, editors are no longer needed; you only need to use the CLI in the terminal. But have people realized that for more than half a century, Terminal-based Editors have solved and standardized the biggest problem with Terminal-based applications ‚Äî that is, the awkward TUI interactions! No matter how much these Coding Agent CLIs optimize their UI/UX, their UI/UX will always be a subset of Terminal-based Editors (Vim, Emacs)! They cannot achieve Vim‚Äôs elegant action + text objects abstraction (imagine how you usually edit large multi-line prompts in an Agent CLI), nor can they leverage thousands of mature Vim/Neovim plugins to help optimize TUI UI/UX‚Äîsuch as easymotions and so on. Moreover, when they want to view or modify code, they often have to jump into other applications which forcibly interrupts the UI/UX experience.&lt;/p&gt; 
&lt;p&gt;Therefore, Avante‚Äôs Zen Mode was born! It looks like a Vibe Coding Agent CLI but it is completely Neovim underneath. So you can use your muscle-memory Vim operations and those rich and mature Neovim plugins on it. At the same time, by leveraging &lt;a href=&quot;https://github.com/yetone/avante.nvim#acp-support&quot;&gt;ACP&lt;/a&gt; it has all capabilities of claude code / gemini-cli / codex! Why not enjoy both?&lt;/p&gt; 
&lt;p&gt;Now all you need to do is alias this command to avante; then every time you simply type avante just like using claude code and enter Avante‚Äôs Zen Mode!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alias avante=&#39;nvim -c &quot;lua vim.defer_fn(function()require(\&quot;avante.api\&quot;).zen_mode()end, 100)&quot;&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The effect is as follows:&lt;/p&gt; 
&lt;img alt=&quot;Avante Zen Mode&quot; src=&quot;https://github.com/user-attachments/assets/60880f65-af55-4e4c-a565-23bb63e19251&quot; /&gt; 
&lt;h2&gt;Project instructions with avante.md&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt; The `avante.md` file allows you to provide project-specific context and instructions to the ai. this file should be placed in your project root and will be automatically referenced during all interactions with avante. &lt;/summary&gt; 
 &lt;h3&gt;Best practices for avante.md&lt;/h3&gt; 
 &lt;p&gt;to get the most out of your project instruction file, consider following this structure:&lt;/p&gt; 
 &lt;h4&gt;Your role&lt;/h4&gt; 
 &lt;p&gt;define the ai&#39;s persona and expertise level for your project:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;### your role

you are an expert senior software engineer specializing in [technology stack]. you have deep knowledge of [specific frameworks/tools] and understand best practices for [domain/industry]. you write clean, maintainable, and well-documented code. you prioritize code quality, performance, and security in all your recommendations.
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Your mission&lt;/h4&gt; 
 &lt;p&gt;clearly describe what the ai should focus on and how it should help:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;### your mission

your primary goal is to help build and maintain [project description]. you should:

- provide code suggestions that follow our established patterns and conventions
- help debug issues by analyzing code and suggesting solutions
- assist with refactoring to improve code quality and maintainability
- suggest optimizations for performance and scalability
- ensure all code follows our security guidelines
- help write comprehensive tests for new features
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Additional sections to consider&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;project context&lt;/strong&gt;: brief description of the project, its goals, and target users&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;technology stack&lt;/strong&gt;: list of technologies, frameworks, and tools used&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;coding standards&lt;/strong&gt;: specific conventions, style guides, and patterns to follow&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;architecture guidelines&lt;/strong&gt;: how components should interact and be organized&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;testing requirements&lt;/strong&gt;: testing strategies and coverage expectations&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;security considerations&lt;/strong&gt;: specific security requirements or constraints&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;example avante.md&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# project instructions for myapp

## your role

you are an expert full-stack developer specializing in react, node.js, and typescript. you understand modern web development practices and have experience with our tech stack.

## your mission

help build a scalable e-commerce platform by:

- writing type-safe typescript code
- following react best practices and hooks patterns
- implementing restful apis with proper error handling
- ensuring responsive design with tailwind css
- writing comprehensive unit and integration tests

## project context

myapp is a modern e-commerce platform targeting small businesses. we prioritize performance, accessibility, and user experience.

## technology stack

- frontend: react 18, typescript, tailwind css, vite
- backend: node.js, express, prisma, postgresql
- testing: jest, react testing library, playwright
- deployment: docker, aws

## coding standards

- use functional components with hooks
- prefer composition over inheritance
- write self-documenting code with clear variable names
- add jsdoc comments for complex functions
- follow the existing folder structure and naming conventions
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;For building binary if you wish to build from source, then &lt;code&gt;cargo&lt;/code&gt; is required. Otherwise &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;tar&lt;/code&gt; will be used to get prebuilt binary from GitHub.&lt;/p&gt; 
&lt;details open&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt; (recommended)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;yetone/avante.nvim&quot;,
  -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  -- ‚ö†Ô∏è must add this setting! ! !
  build = vim.fn.has(&quot;win32&quot;) ~= 0
      and &quot;powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false&quot;
      or &quot;make&quot;,
  event = &quot;VeryLazy&quot;,
  version = false, -- Never set this value to &quot;*&quot;! Never!
  ---@module &#39;avante&#39;
  ---@type avante.Config
  opts = {
    -- add any opts here
    -- this file can contain specific instructions for your project
    instructions_file = &quot;avante.md&quot;,
    -- for example
    provider = &quot;claude&quot;,
    providers = {
      claude = {
        endpoint = &quot;https://api.anthropic.com&quot;,
        model = &quot;claude-sonnet-4-20250514&quot;,
        timeout = 30000, -- Timeout in milliseconds
          extra_request_body = {
            temperature = 0.75,
            max_tokens = 20480,
          },
      },
      moonshot = {
        endpoint = &quot;https://api.moonshot.ai/v1&quot;,
        model = &quot;kimi-k2-0711-preview&quot;,
        timeout = 30000, -- Timeout in milliseconds
        extra_request_body = {
          temperature = 0.75,
          max_tokens = 32768,
        },
      },
    },
  },
  dependencies = {
    &quot;nvim-lua/plenary.nvim&quot;,
    &quot;MunifTanjim/nui.nvim&quot;,
    --- The below dependencies are optional,
    &quot;echasnovski/mini.pick&quot;, -- for file_selector provider mini.pick
    &quot;nvim-telescope/telescope.nvim&quot;, -- for file_selector provider telescope
    &quot;hrsh7th/nvim-cmp&quot;, -- autocompletion for avante commands and mentions
    &quot;ibhagwan/fzf-lua&quot;, -- for file_selector provider fzf
    &quot;stevearc/dressing.nvim&quot;, -- for input provider dressing
    &quot;folke/snacks.nvim&quot;, -- for input provider snacks
    &quot;nvim-tree/nvim-web-devicons&quot;, -- or echasnovski/mini.icons
    &quot;zbirenbaum/copilot.lua&quot;, -- for providers=&#39;copilot&#39;
    {
      -- support for image pasting
      &quot;HakonHarnes/img-clip.nvim&quot;,
      event = &quot;VeryLazy&quot;,
      opts = {
        -- recommended settings
        default = {
          embed_image_as_base64 = false,
          prompt_for_file_name = false,
          drag_and_drop = {
            insert_mode = true,
          },
          -- required for Windows users
          use_absolute_path = true,
        },
      },
    },
    {
      -- Make sure to set this up properly if you have lazy=true
      &#39;MeanderingProgrammer/render-markdown.nvim&#39;,
      opts = {
        file_types = { &quot;markdown&quot;, &quot;Avante&quot; },
      },
      ft = { &quot;markdown&quot;, &quot;Avante&quot; },
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;vim-plug&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;
call plug#begin()

&quot; Deps
Plug &#39;nvim-lua/plenary.nvim&#39;
Plug &#39;MunifTanjim/nui.nvim&#39;
Plug &#39;MeanderingProgrammer/render-markdown.nvim&#39;

&quot; Optional deps
Plug &#39;hrsh7th/nvim-cmp&#39;
Plug &#39;nvim-tree/nvim-web-devicons&#39; &quot;or Plug &#39;echasnovski/mini.icons&#39;
Plug &#39;HakonHarnes/img-clip.nvim&#39;
Plug &#39;zbirenbaum/copilot.lua&#39;
Plug &#39;stevearc/dressing.nvim&#39; &quot; for enhanced input UI
Plug &#39;folke/snacks.nvim&#39; &quot; for modern input UI

&quot; Yay, pass source=true if you want to build from source
Plug &#39;yetone/avante.nvim&#39;, { &#39;branch&#39;: &#39;main&#39;, &#39;do&#39;: &#39;make&#39; }

call plug#end()

autocmd! User avante.nvim
lua &amp;lt;&amp;lt; EOF
require(&#39;avante&#39;).setup({})
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/echasnovski/mini.deps&quot;&gt;mini.deps&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local add, later, now = MiniDeps.add, MiniDeps.later, MiniDeps.now

add({
  source = &#39;yetone/avante.nvim&#39;,
  monitor = &#39;main&#39;,
  depends = {
    &#39;nvim-lua/plenary.nvim&#39;,
    &#39;MunifTanjim/nui.nvim&#39;,
    &#39;echasnovski/mini.icons&#39;
  },
  hooks = { post_checkout = function() vim.cmd(&#39;make&#39;) end }
})
--- optional
add({ source = &#39;hrsh7th/nvim-cmp&#39; })
add({ source = &#39;zbirenbaum/copilot.lua&#39; })
add({ source = &#39;HakonHarnes/img-clip.nvim&#39; })
add({ source = &#39;MeanderingProgrammer/render-markdown.nvim&#39; })

later(function() require(&#39;render-markdown&#39;).setup({...}) end)
later(function()
  require(&#39;img-clip&#39;).setup({...}) -- config img-clip
  require(&quot;copilot&quot;).setup({...}) -- setup copilot to your liking
  require(&quot;avante&quot;).setup({...}) -- config for avante.nvim
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;Packer&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;
  -- Required plugins
  use &#39;nvim-lua/plenary.nvim&#39;
  use &#39;MunifTanjim/nui.nvim&#39;
  use &#39;MeanderingProgrammer/render-markdown.nvim&#39;

  -- Optional dependencies
  use &#39;hrsh7th/nvim-cmp&#39;
  use &#39;nvim-tree/nvim-web-devicons&#39; -- or use &#39;echasnovski/mini.icons&#39;
  use &#39;HakonHarnes/img-clip.nvim&#39;
  use &#39;zbirenbaum/copilot.lua&#39;
  use &#39;stevearc/dressing.nvim&#39; -- for enhanced input UI
  use &#39;folke/snacks.nvim&#39; -- for modern input UI

  -- Avante.nvim with build process
  use {
    &#39;yetone/avante.nvim&#39;,
    branch = &#39;main&#39;,
    run = &#39;make&#39;,
    config = function()
      require(&#39;avante&#39;).setup()
    end
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://github.com/nix-community/home-manager&quot;&gt;Home Manager&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;programs.neovim = {
  plugins = [
    {
      plugin = pkgs.vimPlugins.avante-nvim;
      type = &quot;lua&quot;;
      config = &#39;&#39;
              require(&quot;avante_lib&quot;).load()
              require(&quot;avante&quot;).setup()
      &#39;&#39; # or builtins.readFile ./plugins/avante.lua;
    }
  ];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;a href=&quot;https://nix-community.github.io/nixvim/plugins/avante/index.html&quot;&gt;Nixvim&lt;/a&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;  plugins.avante.enable = true;
  plugins.avante.settings = {
    # setup options here
  };
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Lua&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- deps:
require(&#39;cmp&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;img-clip&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;copilot&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;render-markdown&#39;).setup ({
  -- use recommended settings from above
})
require(&#39;avante&#39;).setup({
  -- Example: Using snacks.nvim as input provider
  input = {
    provider = &quot;snacks&quot;, -- &quot;native&quot; | &quot;dressing&quot; | &quot;snacks&quot;
    provider_opts = {
      -- Snacks input configuration
      title = &quot;Avante Input&quot;,
      icon = &quot; &quot;,
      placeholder = &quot;Enter your API key...&quot;,
    },
  },
  -- Your other config here!
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;avante.nvim&lt;/code&gt; is currently only compatible with Neovim 0.10.1 or later. Please ensure that your Neovim version meets these requirements before proceeding.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;When loading the plugin synchronously, we recommend &lt;code&gt;require&lt;/code&gt;ing it sometime after your colorscheme.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Recommended &lt;strong&gt;Neovim&lt;/strong&gt; options:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- views can only be fully collapsed with the global statusline
vim.opt.laststatus = 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Any rendering plugins that support markdown should work with Avante as long as you add the supported filetype &lt;code&gt;Avante&lt;/code&gt;. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/issues/175&quot;&gt;https://github.com/yetone/avante.nvim/issues/175&lt;/a&gt; and &lt;a href=&quot;https://github.com/yetone/avante.nvim/issues/175#issuecomment-2313749363&quot;&gt;this comment&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Default setup configuration&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/config.lua&quot;&gt;config.lua#L9&lt;/a&gt; for the full config&lt;/em&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Default configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  ---@alias Provider &quot;claude&quot; | &quot;openai&quot; | &quot;azure&quot; | &quot;gemini&quot; | &quot;cohere&quot; | &quot;copilot&quot; | string
  ---@type Provider
  provider = &quot;claude&quot;, -- The provider used in Aider mode or in the planning phase of Cursor Planning Mode
  ---@alias Mode &quot;agentic&quot; | &quot;legacy&quot;
  ---@type Mode
  mode = &quot;agentic&quot;, -- The default mode for interaction. &quot;agentic&quot; uses tools to automatically generate code, &quot;legacy&quot; uses the old planning method to generate code.
  -- WARNING: Since auto-suggestions are a high-frequency operation and therefore expensive,
  -- currently designating it as `copilot` provider is dangerous because: https://github.com/yetone/avante.nvim/issues/1048
  -- Of course, you can reduce the request frequency by increasing `suggestion.debounce`.
  auto_suggestions_provider = &quot;claude&quot;,
  providers = {
    claude = {
      endpoint = &quot;https://api.anthropic.com&quot;,
      model = &quot;claude-3-5-sonnet-20241022&quot;,
      extra_request_body = {
        temperature = 0.75,
        max_tokens = 4096,
      },
    },
  },
  ---Specify the special dual_boost mode
  ---1. enabled: Whether to enable dual_boost mode. Default to false.
  ---2. first_provider: The first provider to generate response. Default to &quot;openai&quot;.
  ---3. second_provider: The second provider to generate response. Default to &quot;claude&quot;.
  ---4. prompt: The prompt to generate response based on the two reference outputs.
  ---5. timeout: Timeout in milliseconds. Default to 60000.
  ---How it works:
  --- When dual_boost is enabled, avante will generate two responses from the first_provider and second_provider respectively. Then use the response from the first_provider as provider1_output and the response from the second_provider as provider2_output. Finally, avante will generate a response based on the prompt and the two reference outputs, with the default Provider as normal.
  ---Note: This is an experimental feature and may not work as expected.
  dual_boost = {
    enabled = false,
    first_provider = &quot;openai&quot;,
    second_provider = &quot;claude&quot;,
    prompt = &quot;Based on the two reference outputs below, generate a response that incorporates elements from both but reflects your own judgment and unique perspective. Do not provide any explanation, just give the response directly. Reference Output 1: [{{provider1_output}}], Reference Output 2: [{{provider2_output}}]&quot;,
    timeout = 60000, -- Timeout in milliseconds
  },
  behaviour = {
    auto_suggestions = false, -- Experimental stage
    auto_set_highlight_group = true,
    auto_set_keymaps = true,
    auto_apply_diff_after_generation = false,
    support_paste_from_clipboard = false,
    minimize_diff = true, -- Whether to remove unchanged lines when applying a code block
    enable_token_counting = true, -- Whether to enable token counting. Default to true.
    auto_approve_tool_permissions = false, -- Default: show permission prompts for all tools
    -- Examples:
    -- auto_approve_tool_permissions = true,                -- Auto-approve all tools (no prompts)
    -- auto_approve_tool_permissions = {&quot;bash&quot;, &quot;replace_in_file&quot;}, -- Auto-approve specific tools only
  },
  prompt_logger = { -- logs prompts to disk (timestamped, for replay/debugging)
    enabled = true, -- toggle logging entirely
    log_dir = vim.fn.stdpath(&quot;cache&quot;) .. &quot;/avante_prompts&quot;, -- directory where logs are saved
    fortune_cookie_on_success = false, -- shows a random fortune after each logged prompt (requires `fortune` installed)
    next_prompt = {
      normal = &quot;&amp;lt;C-n&amp;gt;&quot;, -- load the next (newer) prompt log in normal mode
      insert = &quot;&amp;lt;C-n&amp;gt;&quot;,
    },
    prev_prompt = {
      normal = &quot;&amp;lt;C-p&amp;gt;&quot;, -- load the previous (older) prompt log in normal mode
      insert = &quot;&amp;lt;C-p&amp;gt;&quot;,
    },
  },
  mappings = {
    --- @class AvanteConflictMappings
    diff = {
      ours = &quot;co&quot;,
      theirs = &quot;ct&quot;,
      all_theirs = &quot;ca&quot;,
      both = &quot;cb&quot;,
      cursor = &quot;cc&quot;,
      next = &quot;]x&quot;,
      prev = &quot;[x&quot;,
    },
    suggestion = {
      accept = &quot;&amp;lt;M-l&amp;gt;&quot;,
      next = &quot;&amp;lt;M-]&amp;gt;&quot;,
      prev = &quot;&amp;lt;M-[&amp;gt;&quot;,
      dismiss = &quot;&amp;lt;C-]&amp;gt;&quot;,
    },
    jump = {
      next = &quot;]]&quot;,
      prev = &quot;[[&quot;,
    },
    submit = {
      normal = &quot;&amp;lt;CR&amp;gt;&quot;,
      insert = &quot;&amp;lt;C-s&amp;gt;&quot;,
    },
    cancel = {
      normal = { &quot;&amp;lt;C-c&amp;gt;&quot;, &quot;&amp;lt;Esc&amp;gt;&quot;, &quot;q&quot; },
      insert = { &quot;&amp;lt;C-c&amp;gt;&quot; },
    },
    sidebar = {
      apply_all = &quot;A&quot;,
      apply_cursor = &quot;a&quot;,
      retry_user_request = &quot;r&quot;,
      edit_user_request = &quot;e&quot;,
      switch_windows = &quot;&amp;lt;Tab&amp;gt;&quot;,
      reverse_switch_windows = &quot;&amp;lt;S-Tab&amp;gt;&quot;,
      remove_file = &quot;d&quot;,
      add_file = &quot;@&quot;,
      close = { &quot;&amp;lt;Esc&amp;gt;&quot;, &quot;q&quot; },
      close_from_input = nil, -- e.g., { normal = &quot;&amp;lt;Esc&amp;gt;&quot;, insert = &quot;&amp;lt;C-d&amp;gt;&quot; }
    },
  },
  selection = {
    enabled = true,
    hint_display = &quot;delayed&quot;,
  },
  windows = {
    ---@type &quot;right&quot; | &quot;left&quot; | &quot;top&quot; | &quot;bottom&quot;
    position = &quot;right&quot;, -- the position of the sidebar
    wrap = true, -- similar to vim.o.wrap
    width = 30, -- default % based on available width
    sidebar_header = {
      enabled = true, -- true, false to enable/disable the header
      align = &quot;center&quot;, -- left, center, right for title
      rounded = true,
    },
    spinner = {
      editing = { &quot;‚°Ä&quot;, &quot;‚†Ñ&quot;, &quot;‚†Ç&quot;, &quot;‚†Å&quot;, &quot;‚†à&quot;, &quot;‚†ê&quot;, &quot;‚††&quot;, &quot;‚¢Ä&quot;, &quot;‚£Ä&quot;, &quot;‚¢Ñ&quot;, &quot;‚¢Ç&quot;, &quot;‚¢Å&quot;, &quot;‚¢à&quot;, &quot;‚¢ê&quot;, &quot;‚¢†&quot;, &quot;‚£†&quot;, &quot;‚¢§&quot;, &quot;‚¢¢&quot;, &quot;‚¢°&quot;, &quot;‚¢®&quot;, &quot;‚¢∞&quot;, &quot;‚£∞&quot;, &quot;‚¢¥&quot;, &quot;‚¢≤&quot;, &quot;‚¢±&quot;, &quot;‚¢∏&quot;, &quot;‚£∏&quot;, &quot;‚¢º&quot;, &quot;‚¢∫&quot;, &quot;‚¢π&quot;, &quot;‚£π&quot;, &quot;‚¢Ω&quot;, &quot;‚¢ª&quot;, &quot;‚£ª&quot;, &quot;‚¢ø&quot;, &quot;‚£ø&quot; },
      generating = { &quot;¬∑&quot;, &quot;‚ú¢&quot;, &quot;‚ú≥&quot;, &quot;‚àó&quot;, &quot;‚úª&quot;, &quot;‚úΩ&quot; }, -- Spinner characters for the &#39;generating&#39; state
      thinking = { &quot;ü§Ø&quot;, &quot;üôÑ&quot; }, -- Spinner characters for the &#39;thinking&#39; state
    },
    input = {
      prefix = &quot;&amp;gt; &quot;,
      height = 8, -- Height of the input window in vertical layout
    },
    edit = {
      border = &quot;rounded&quot;,
      start_insert = true, -- Start insert mode when opening the edit window
    },
    ask = {
      floating = false, -- Open the &#39;AvanteAsk&#39; prompt in a floating window
      start_insert = true, -- Start insert mode when opening the ask window
      border = &quot;rounded&quot;,
      ---@type &quot;ours&quot; | &quot;theirs&quot;
      focus_on_apply = &quot;ours&quot;, -- which diff to focus after applying
    },
  },
  highlights = {
    ---@type AvanteConflictHighlights
    diff = {
      current = &quot;DiffText&quot;,
      incoming = &quot;DiffAdd&quot;,
    },
  },
  --- @class AvanteConflictUserConfig
  diff = {
    autojump = true,
    ---@type string | fun(): any
    list_opener = &quot;copen&quot;,
    --- Override the &#39;timeoutlen&#39; setting while hovering over a diff (see :help timeoutlen).
    --- Helps to avoid entering operator-pending mode with diff mappings starting with `c`.
    --- Disable by setting to -1.
    override_timeoutlen = 500,
  },
  suggestion = {
    debounce = 600,
    throttle = 600,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Blink.cmp users&lt;/h2&gt; 
&lt;p&gt;For blink cmp users (nvim-cmp alternative) view below instruction for configuration This is achieved by emulating nvim-cmp using blink.compat or you can use &lt;a href=&quot;https://github.com/Kaiser-Yang/blink-cmp-avante&quot;&gt;Kaiser-Yang/blink-cmp-avante&lt;/a&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Lua&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      selector = {
        --- @alias avante.SelectorProvider &quot;native&quot; | &quot;fzf_lua&quot; | &quot;mini_pick&quot; | &quot;snacks&quot; | &quot;telescope&quot; | fun(selector: avante.ui.Selector): nil
        --- @type avante.SelectorProvider
        provider = &quot;fzf&quot;,
        -- Options override for custom providers
        provider_opts = {},
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To create a customized selector provider, you can specify a customized function to launch a picker to select items and pass the selected items to the &lt;code&gt;on_select&lt;/code&gt; callback.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      selector = {
        ---@param selector avante.ui.Selector
        provider = function(selector)
          local items = selector.items ---@type avante.ui.SelectorItem[]
          local title = selector.title ---@type string
          local on_select = selector.on_select ---@type fun(selected_item_ids: string[]|nil): nil

          --- your customized picker logic here
        end,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Input Provider Configuration&lt;/h3&gt; 
 &lt;p&gt;Avante.nvim supports multiple input providers for user input (like API key entry). You can configure which provider to use:&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt;Native Input Provider (Default)&lt;/summary&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  input = {
    provider = &quot;native&quot;, -- Uses vim.ui.input
    provider_opts = {},
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt;Dressing.nvim Input Provider&lt;/summary&gt; 
  &lt;p&gt;For enhanced input UI with better styling and features:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  input = {
    provider = &quot;dressing&quot;,
    provider_opts = {},
  }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;You&#39;ll need to install dressing.nvim:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- With lazy.nvim
{ &quot;stevearc/dressing.nvim&quot; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt;Snacks.nvim Input Provider (Recommended)&lt;/summary&gt; 
  &lt;p&gt;For modern, feature-rich input UI:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  input = {
    provider = &quot;snacks&quot;,
    provider_opts = {
      -- Additional snacks.input options
      title = &quot;Avante Input&quot;,
      icon = &quot; &quot;,
    },
  }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;You&#39;ll need to install snacks.nvim:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- With lazy.nvim
{ &quot;folke/snacks.nvim&quot; }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt;Custom Input Provider&lt;/summary&gt; 
  &lt;p&gt;To create a customized input provider, you can specify a function:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  input = {
    ---@param input avante.ui.Input
    provider = function(input)
      local title = input.title ---@type string
      local default = input.default ---@type string
      local conceal = input.conceal ---@type boolean
      local on_submit = input.on_submit ---@type fun(result: string|nil): nil

      --- your customized input logic here
    end,
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;p&gt;Choose a selector other that native, the default as that currently has an issue For lazyvim users copy the full config for blink.cmp from the website or extend the options&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      compat = {
        &quot;avante_commands&quot;,
        &quot;avante_mentions&quot;,
        &quot;avante_files&quot;,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For other users just add a custom provider&lt;/p&gt; 
 &lt;h3&gt;Available Completion Sources&lt;/h3&gt; 
 &lt;p&gt;Avante.nvim provides several completion sources that can be integrated with blink.cmp:&lt;/p&gt; 
 &lt;h4&gt;Mentions (&lt;code&gt;@&lt;/code&gt; trigger)&lt;/h4&gt; 
 &lt;p&gt;Mentions allow you to quickly reference specific features or add files to the chat context:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;@codebase&lt;/code&gt; - Enable project context and repository mapping&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;@diagnostics&lt;/code&gt; - Enable diagnostics information&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;@file&lt;/code&gt; - Open file selector to add files to chat context&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;@quickfix&lt;/code&gt; - Add files from quickfix list to chat context&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;@buffers&lt;/code&gt; - Add open buffers to chat context&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Slash Commands (&lt;code&gt;/&lt;/code&gt; trigger)&lt;/h4&gt; 
 &lt;p&gt;Built-in slash commands for common operations:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;/help&lt;/code&gt; - Show help message with available commands&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;/init&lt;/code&gt; - Initialize AGENTS.md based on current project&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;/clear&lt;/code&gt; - Clear chat history&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;/new&lt;/code&gt; - Start a new chat&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;/compact&lt;/code&gt; - Compact history messages to save tokens&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;/lines &amp;lt;start&amp;gt;-&amp;lt;end&amp;gt; &amp;lt;question&amp;gt;&lt;/code&gt; - Ask about specific lines&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;/commit&lt;/code&gt; - Generate commit message for changes&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Shortcuts (&lt;code&gt;#&lt;/code&gt; trigger)&lt;/h4&gt; 
 &lt;p&gt;Shortcuts provide quick access to predefined prompt templates. You can customize these in your config:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  shortcuts = {
    {
      name = &quot;refactor&quot;,
      description = &quot;Refactor code with best practices&quot;,
      details = &quot;Automatically refactor code to improve readability, maintainability, and follow best practices while preserving functionality&quot;,
      prompt = &quot;Please refactor this code following best practices, improving readability and maintainability while preserving functionality.&quot;
    },
    {
      name = &quot;test&quot;,
      description = &quot;Generate unit tests&quot;,
      details = &quot;Create comprehensive unit tests covering edge cases, error scenarios, and various input conditions&quot;,
      prompt = &quot;Please generate comprehensive unit tests for this code, covering edge cases and error scenarios.&quot;
    },
    -- Add more custom shortcuts...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;When you type &lt;code&gt;#refactor&lt;/code&gt; in the input, it will automatically be replaced with the corresponding prompt text.&lt;/p&gt; 
 &lt;h3&gt;Configuration Example&lt;/h3&gt; 
 &lt;p&gt;Here&#39;s a complete blink.cmp configuration example with all Avante sources:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      default = {
        ...
        &quot;avante_commands&quot;,
        &quot;avante_mentions&quot;,
        &quot;avante_shortcuts&quot;,
        &quot;avante_files&quot;,
      }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;      providers = {
        avante_commands = {
          name = &quot;avante_commands&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 90, -- show at a higher priority than lsp
          opts = {},
        },
        avante_files = {
          name = &quot;avante_files&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 100, -- show at a higher priority than lsp
          opts = {},
        },
        avante_mentions = {
          name = &quot;avante_mentions&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 1000, -- show at a higher priority than lsp
          opts = {},
        },
        avante_shortcuts = {
          name = &quot;avante_shortcuts&quot;,
          module = &quot;blink.compat.source&quot;,
          score_offset = 1000, -- show at a higher priority than lsp
          opts = {},
        }
        ...
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Basic Functionality&lt;/h3&gt; 
&lt;p&gt;Given its early stage, &lt;code&gt;avante.nvim&lt;/code&gt; currently supports the following basic functionalities:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;/p&gt; 
 &lt;p&gt;For most consistency between neovim session, it is recommended to set the environment variables in your shell file. By default, &lt;code&gt;Avante&lt;/code&gt; will prompt you at startup to input the API key for the provider you have selected.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Scoped API Keys (Recommended for Isolation)&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Avante now supports scoped API keys, allowing you to isolate API keys specifically for Avante without affecting other applications. Simply prefix any API key with &lt;code&gt;AVANTE_&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Scoped keys (recommended)
export AVANTE_ANTHROPIC_API_KEY=your-claude-api-key
export AVANTE_OPENAI_API_KEY=your-openai-api-key
export AVANTE_AZURE_OPENAI_API_KEY=your-azure-api-key
export AVANTE_GEMINI_API_KEY=your-gemini-api-key
export AVANTE_CO_API_KEY=your-cohere-api-key
export AVANTE_AIHUBMIX_API_KEY=your-aihubmix-api-key
export AVANTE_MOONSHOT_API_KEY=your-moonshot-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Global API Keys (Legacy)&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;You can still use the traditional global API keys if you prefer:&lt;/p&gt; 
 &lt;p&gt;For Claude:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export ANTHROPIC_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For OpenAI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export OPENAI_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Azure OpenAI:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export AZURE_OPENAI_API_KEY=your-api-key
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Amazon Bedrock:&lt;/p&gt; 
 &lt;p&gt;You can specify the &lt;code&gt;BEDROCK_KEYS&lt;/code&gt; environment variable to set credentials. When this variable is not specified, bedrock will use the default AWS credentials chain (see below).&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;export BEDROCK_KEYS=aws_access_key_id,aws_secret_access_key,aws_region[,aws_session_token]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: The aws_session_token is optional and only needed when using temporary AWS credentials&lt;/p&gt; 
 &lt;p&gt;Alternatively Bedrock tries to resolve AWS credentials using the &lt;a href=&quot;https://docs.aws.amazon.com/cli/v1/userguide/cli-chap-authentication.html&quot;&gt;Default Credentials Provider Chain&lt;/a&gt;. This means you can have credentials e.g. configured via the AWS CLI, stored in your ~/.aws/profile, use AWS SSO etc. In this case &lt;code&gt;aws_region&lt;/code&gt; and optionally &lt;code&gt;aws_profile&lt;/code&gt; should be specified via the bedrock config, e.g.:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;bedrock = {
  model = &quot;us.anthropic.claude-3-5-sonnet-20241022-v2:0&quot;,
  aws_profile = &quot;bedrock&quot;,
  aws_region = &quot;us-east-1&quot;,
},
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Note: Bedrock requires the &lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;AWS CLI&lt;/a&gt; to be installed on your system.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open a code file in Neovim.&lt;/li&gt; 
 &lt;li&gt;Use the &lt;code&gt;:AvanteAsk&lt;/code&gt; command to query the AI about the code.&lt;/li&gt; 
 &lt;li&gt;Review the AI&#39;s suggestions.&lt;/li&gt; 
 &lt;li&gt;Apply the recommended changes directly to your code with a simple command or key binding.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The plugin is still under active development, and both its functionality and interface are subject to significant changes. Expect some rough edges and instability as the project evolves.&lt;/p&gt; 
&lt;h2&gt;Key Bindings&lt;/h2&gt; 
&lt;p&gt;The following key bindings are available for use with &lt;code&gt;avante.nvim&lt;/code&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key Binding&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Sidebar&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;p&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;next prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;p&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;previous prompt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;A&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;apply all&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;apply cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;retry user request&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;edit user request&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;&amp;lt;Tab&amp;gt;&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;switch windows&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;&amp;lt;S-Tab&amp;gt;&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;reverse switch windows&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;d&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;remove file&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;@&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;add file&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;q&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;close sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;show sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;toggle sidebar visibility&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;refresh sidebar&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;switch sidebar focus&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Suggestion&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;?&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;select model&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;n&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;new ask&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;edit selected blocks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;stop current AI request&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;h&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;select between chat histories&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;&amp;lt;M-l&amp;gt;&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;accept suggestion&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;&amp;lt;M-]&amp;gt;&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;next suggestion&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;&amp;lt;M-[&amp;gt;&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;previous suggestion&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;&amp;lt;C-]&amp;gt;&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;dismiss suggestion&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;d&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;toggle debug mode&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;s&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;toggle suggestion display&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;R&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;toggle repomap&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Files&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;add current buffer to selected files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;B&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;add all buffer files to selected files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Diff&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose ours&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose theirs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose all theirs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose both&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;choose cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;move to next conflict&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;move to previous conflict&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Confirm&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;w&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;focus confirm window&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;confirm code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;confirm response&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;kbd&gt;i&lt;/kbd&gt;&lt;/td&gt; 
   &lt;td&gt;confirm input&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;If you are using &lt;code&gt;lazy.nvim&lt;/code&gt;, then all keymap here will be safely set, meaning if &lt;code&gt;&amp;lt;leader&amp;gt;aa&lt;/code&gt; is already binded, then avante.nvim won&#39;t bind this mapping. In this case, user will be responsible for setting up their own. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki#keymaps-and-api-i-guess&quot;&gt;notes on keymaps&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Neotree shortcut&lt;/h3&gt; 
&lt;p&gt;In the neotree sidebar, you can also add a new keyboard shortcut to quickly add &lt;code&gt;file/folder&lt;/code&gt; to &lt;code&gt;Avante Selected Files&lt;/code&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neotree configuration&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;return {
  {
    &#39;nvim-neo-tree/neo-tree.nvim&#39;,
    config = function()
      require(&#39;neo-tree&#39;).setup({
        filesystem = {
          commands = {
            avante_add_files = function(state)
              local node = state.tree:get_node()
              local filepath = node:get_id()
              local relative_path = require(&#39;avante.utils&#39;).relative_path(filepath)

              local sidebar = require(&#39;avante&#39;).get()

              local open = sidebar:is_open()
              -- ensure avante sidebar is open
              if not open then
                require(&#39;avante.api&#39;).ask()
                sidebar = require(&#39;avante&#39;).get()
              end

              sidebar.file_selector:add_selected_file(relative_path)

              -- remove neo tree buffer
              if not open then
                sidebar.file_selector:remove_selected_file(&#39;neo-tree filesystem [1]&#39;)
              end
            end,
          },
          window = {
            mappings = {
              [&#39;oa&#39;] = &#39;avante_add_files&#39;,
            },
          },
        },
      })
    end,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Examples&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteAsk [question] [position]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Ask AI about your code. Optional &lt;code&gt;position&lt;/code&gt; set window position and &lt;code&gt;ask&lt;/code&gt; enable/disable direct asking mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteAsk position=right Refactor this code here&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteBuild&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Build dependencies for the project&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteChat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Start a chat session with AI about your codebase. Default is &lt;code&gt;ask&lt;/code&gt;=false&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteChatNew&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Start a new chat session. The current chat can be re-opened with the chat session selector&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteHistory&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Opens a picker for your previous chat sessions&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteClear&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Clear the chat history for your current chat session&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteEdit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Edit the selected code blocks&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteFocus&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch focus to/from the sidebar&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteRefresh&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Refresh all Avante windows&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteStop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stop the current AI request&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteSwitchProvider&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch AI provider (e.g. openai)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteShowRepoMap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show repo map for project&#39;s structure&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteToggle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle the Avante sidebar&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteModels&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show model list&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;:AvanteSwitchSelectorProvider&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Switch avante selector provider (e.g. native, telescope, fzf_lua, mini_pick, snacks)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Highlight Groups&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Highlight Group&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteTitle&lt;/td&gt; 
   &lt;td&gt;Title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedTitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteSubtitle&lt;/td&gt; 
   &lt;td&gt;Selected code title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedSubtitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteThirdTitle&lt;/td&gt; 
   &lt;td&gt;Prompt title&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteReversedThirdTitle&lt;/td&gt; 
   &lt;td&gt;Used for rounded border&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictCurrent&lt;/td&gt; 
   &lt;td&gt;Current conflict highlight&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.current&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictIncoming&lt;/td&gt; 
   &lt;td&gt;Incoming conflict highlight&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.incoming&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictCurrentLabel&lt;/td&gt; 
   &lt;td&gt;Current conflict label highlight&lt;/td&gt; 
   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictCurrent&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteConflictIncomingLabel&lt;/td&gt; 
   &lt;td&gt;Incoming conflict label highlight&lt;/td&gt; 
   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictIncoming&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvantePopupHint&lt;/td&gt; 
   &lt;td&gt;Usage hints in popup menus&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvanteInlineHint&lt;/td&gt; 
   &lt;td&gt;The end-of-line hint displayed in visual mode&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvantePromptInput&lt;/td&gt; 
   &lt;td&gt;The body highlight of the prompt input&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AvantePromptInputBorder&lt;/td&gt; 
   &lt;td&gt;The border highlight of the prompt input&lt;/td&gt; 
   &lt;td&gt;Default to &lt;code&gt;NormalFloat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/highlights.lua&quot;&gt;highlights.lua&lt;/a&gt; for more information&lt;/p&gt; 
&lt;h2&gt;Fast Apply&lt;/h2&gt; 
&lt;p&gt;Fast Apply is a feature that enables instant code edits with high accuracy by leveraging specialized models. It replicates Cursor&#39;s instant apply functionality, allowing for seamless code modifications without the typical delays associated with traditional code generation.&lt;/p&gt; 
&lt;h3&gt;Purpose and Benefits&lt;/h3&gt; 
&lt;p&gt;Fast Apply addresses the common pain point of slow code application in AI-assisted development. Instead of waiting for a full language model to process and apply changes, Fast Apply uses a specialized &quot;apply model&quot; that can quickly and accurately merge code edits with 96-98% accuracy at speeds of 2500-4500+ tokens per second.&lt;/p&gt; 
&lt;p&gt;Key benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Instant application&lt;/strong&gt;: Code changes are applied immediately without noticeable delays&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High accuracy&lt;/strong&gt;: Specialized models achieve 96-98% accuracy for code edits&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless workflow&lt;/strong&gt;: Maintains the natural flow of development without interruptions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Large context support&lt;/strong&gt;: Handles up to 16k tokens for both input and output&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;To enable Fast Apply, you need to:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enable Fast Apply in your configuration&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  behaviour = {
    enable_fastapply = true,  -- Enable Fast Apply feature
  },
  -- ... other configuration
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Get your Morph API key&lt;/strong&gt;: Go to &lt;a href=&quot;https://morphllm.com/api-keys&quot;&gt;morphllm.com&lt;/a&gt; and create an account and get the API key.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set your Morph API key&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export MORPH_API_KEY=&quot;your-api-key&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change Morph model&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;providers = {
  morph = {
    model = &quot;morph-v3-large&quot;,
  },
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Model Options&lt;/h3&gt; 
&lt;p&gt;Morph provides different models optimized for different use cases:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Model&lt;/th&gt; 
   &lt;th&gt;Speed&lt;/th&gt; 
   &lt;th&gt;Accuracy&lt;/th&gt; 
   &lt;th&gt;Context Limit&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;morph-v3-fast&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;4500+ tok/sec&lt;/td&gt; 
   &lt;td&gt;96%&lt;/td&gt; 
   &lt;td&gt;16k tokens&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;morph-v3-large&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;2500+ tok/sec&lt;/td&gt; 
   &lt;td&gt;98%&lt;/td&gt; 
   &lt;td&gt;16k tokens&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;2500-4500 tok/sec&lt;/td&gt; 
   &lt;td&gt;98%&lt;/td&gt; 
   &lt;td&gt;16k tokens&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;How It Works&lt;/h3&gt; 
&lt;p&gt;When Fast Apply is enabled and a Morph provider is configured, avante.nvim will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Use the &lt;code&gt;edit_file&lt;/code&gt; tool for code modifications instead of traditional tools&lt;/li&gt; 
 &lt;li&gt;Send the original code, edit instructions, and update snippet to the Morph API&lt;/li&gt; 
 &lt;li&gt;Receive the fully merged code back from the specialized apply model&lt;/li&gt; 
 &lt;li&gt;Apply the changes directly to your files with high accuracy&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The process uses a specialized prompt format that includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;instructions&amp;gt;&lt;/code&gt;: Clear description of what changes to make&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;: The original code content&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;update&amp;gt;&lt;/code&gt;: The specific changes using truncation markers (&lt;code&gt;// ... existing code ...&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This approach ensures that the apply model can quickly and accurately merge your changes without the overhead of full code generation.&lt;/p&gt; 
&lt;h2&gt;Ollama&lt;/h2&gt; 
&lt;p&gt;ollama is a first-class provider for avante.nvim. You can use it by setting &lt;code&gt;provider = &quot;ollama&quot;&lt;/code&gt; in the configuration, and set the &lt;code&gt;model&lt;/code&gt; field in &lt;code&gt;ollama&lt;/code&gt; to the model you want to use. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;provider = &quot;ollama&quot;,
providers = {
  ollama = {
    endpoint = &quot;http://localhost:11434&quot;,
    model = &quot;qwq:32b&quot;,
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ACP Support&lt;/h2&gt; 
&lt;p&gt;Avante.nvim now supports the &lt;a href=&quot;https://agentclientprotocol.com/overview/introduction&quot;&gt;Agent Client Protocol (ACP)&lt;/a&gt;, enabling seamless integration with AI agents that follow this standardized communication protocol. ACP provides a unified way for AI agents to interact with development environments, offering enhanced capabilities for code editing, file operations, and tool execution.&lt;/p&gt; 
&lt;h3&gt;What is ACP?&lt;/h3&gt; 
&lt;p&gt;The Agent Client Protocol (ACP) is a standardized protocol that enables AI agents to communicate with development tools and environments. It provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Standardized Communication&lt;/strong&gt;: A unified JSON-RPC based protocol for agent-client interactions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tool Integration&lt;/strong&gt;: Support for various development tools like file operations, code execution, and search&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Session Management&lt;/strong&gt;: Persistent sessions that maintain context across interactions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Permission System&lt;/strong&gt;: Granular control over what agents can access and modify&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Enabling ACP&lt;/h3&gt; 
&lt;p&gt;To use ACP-compatible agents with Avante.nvim, you need to configure an ACP provider. Here are the currently supported ACP agents:&lt;/p&gt; 
&lt;h4&gt;Gemini CLI with ACP&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  provider = &quot;gemini-cli&quot;,
  -- other configuration options...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Claude Code with ACP&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  provider = &quot;claude-code&quot;,
  -- other configuration options...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ACP Configuration&lt;/h3&gt; 
&lt;p&gt;ACP providers are configured in the &lt;code&gt;acp_providers&lt;/code&gt; section of your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  acp_providers = {
    [&quot;gemini-cli&quot;] = {
      command = &quot;gemini&quot;,
      args = { &quot;--experimental-acp&quot; },
      env = {
        NODE_NO_WARNINGS = &quot;1&quot;,
        GEMINI_API_KEY = os.getenv(&quot;GEMINI_API_KEY&quot;),
      },
    },
    [&quot;claude-code&quot;] = {
      command = &quot;npx&quot;,
      args = { &quot;@zed-industries/claude-code-acp&quot; },
      env = {
        NODE_NO_WARNINGS = &quot;1&quot;,
        ANTHROPIC_API_KEY = os.getenv(&quot;ANTHROPIC_API_KEY&quot;),
      },
    },
  },
  -- other configuration options...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;Before using ACP agents, ensure you have the required tools installed:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;For Gemini CLI&lt;/strong&gt;: Install the &lt;code&gt;gemini&lt;/code&gt; CLI tool and set your &lt;code&gt;GEMINI_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;For Claude Code&lt;/strong&gt;: Install the &lt;code&gt;acp-claude-code&lt;/code&gt; package via npm and set your &lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ACP vs Traditional Providers&lt;/h3&gt; 
&lt;p&gt;ACP providers offer several advantages over traditional API-based providers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Enhanced Tool Access&lt;/strong&gt;: Agents can directly interact with your file system, run commands, and access development tools&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Persistent Context&lt;/strong&gt;: Sessions maintain state across multiple interactions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fine-grained Permissions&lt;/strong&gt;: Control exactly what agents can access and modify&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Standardized Protocol&lt;/strong&gt;: Compatible with any ACP-compliant agent&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Custom providers&lt;/h2&gt; 
&lt;p&gt;Avante provides a set of default providers, but users can also create their own providers.&lt;/p&gt; 
&lt;p&gt;For more information, see &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki/Custom-providers&quot;&gt;Custom Providers&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;RAG Service&lt;/h2&gt; 
&lt;p&gt;Avante provides a RAG service, which is a tool for obtaining the required context for the AI to generate the codes. By default, it is not enabled. You can enable it this way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  rag_service = { -- RAG Service configuration
    enabled = false, -- Enables the RAG service
    host_mount = os.getenv(&quot;HOME&quot;), -- Host mount path for the rag service (Docker will mount this path)
    runner = &quot;docker&quot;, -- Runner for the RAG service (can use docker or nix)
    llm = { -- Language Model (LLM) configuration for RAG service
      provider = &quot;openai&quot;, -- LLM provider
      endpoint = &quot;https://api.openai.com/v1&quot;, -- LLM API endpoint
      api_key = &quot;OPENAI_API_KEY&quot;, -- Environment variable name for the LLM API key
      model = &quot;gpt-4o-mini&quot;, -- LLM model name
      extra = nil, -- Additional configuration options for LLM
    },
    embed = { -- Embedding model configuration for RAG service
      provider = &quot;openai&quot;, -- Embedding provider
      endpoint = &quot;https://api.openai.com/v1&quot;, -- Embedding API endpoint
      api_key = &quot;OPENAI_API_KEY&quot;, -- Environment variable name for the embedding API key
      model = &quot;text-embedding-3-large&quot;, -- Embedding model name
      extra = nil, -- Additional configuration options for the embedding model
    },
    docker_extra_args = &quot;&quot;, -- Extra arguments to pass to the docker command
  },
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RAG Service can currently configure the LLM and embedding models separately. In the &lt;code&gt;llm&lt;/code&gt; and &lt;code&gt;embed&lt;/code&gt; configuration blocks, you can set the following fields:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;provider&lt;/code&gt;: Model provider (e.g., &quot;openai&quot;, &quot;ollama&quot;, &quot;dashscope&quot;, and &quot;openrouter&quot;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;: API endpoint&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;api_key&lt;/code&gt;: Environment variable name for the API key&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: Model name&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;extra&lt;/code&gt;: Additional configuration options&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For detailed configuration of different model providers, you can check &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/py/rag-service/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, RAG Service also depends on Docker! (For macOS users, OrbStack is recommended as a Docker alternative).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;host_mount&lt;/code&gt; is the path that will be mounted to the container, and the default is the home directory. The mount is required for the RAG service to access the files in the host machine. It is up to the user to decide if you want to mount the whole &lt;code&gt;/&lt;/code&gt; directory, just the project directory, or the home directory. If you plan using avante and RAG event for projects stored outside your home directory, you will need to set the &lt;code&gt;host_mount&lt;/code&gt; to the root directory of your file system.&lt;/p&gt; 
&lt;p&gt;The mount will be read only.&lt;/p&gt; 
&lt;p&gt;After changing the rag_service configuration, you need to manually delete the rag_service container to ensure the new configuration is used: &lt;code&gt;docker rm -fv avante-rag-service&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Web Search Engines&lt;/h2&gt; 
&lt;p&gt;Avante&#39;s tools include some web search engines, currently support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tavily.com/&quot;&gt;Tavily&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://serpapi.com/&quot;&gt;SerpApi - Search API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google&#39;s &lt;a href=&quot;https://developers.google.com/custom-search/v1/overview&quot;&gt;Programmable Search Engine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://help.kagi.com/kagi/api/search.html&quot;&gt;Kagi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api-dashboard.search.brave.com/app/documentation/web-search/get-started&quot;&gt;Brave Search&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://searxng.github.io/searxng/&quot;&gt;SearXNG&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The default is Tavily, and can be changed through configuring &lt;code&gt;Config.web_search_engine.provider&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;web_search_engine = {
  provider = &quot;tavily&quot;, -- tavily, serpapi, google, kagi, brave, or searxng
  proxy = nil, -- proxy support, e.g., http://127.0.0.1:7890
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Environment variables required for providers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tavily: &lt;code&gt;TAVILY_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;SerpApi: &lt;code&gt;SERPAPI_API_KEY&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Google: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://developers.google.com/custom-search/v1/overview&quot;&gt;API key&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_ENGINE_ID&lt;/code&gt; as the &lt;a href=&quot;https://programmablesearchengine.google.com&quot;&gt;search engine&lt;/a&gt; ID&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Kagi: &lt;code&gt;KAGI_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://kagi.com/settings?p=api&quot;&gt;API Token&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Brave Search: &lt;code&gt;BRAVE_API_KEY&lt;/code&gt; as the &lt;a href=&quot;https://api-dashboard.search.brave.com/app/keys&quot;&gt;API key&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SearXNG: &lt;code&gt;SEARXNG_API_URL&lt;/code&gt; as the &lt;a href=&quot;https://docs.searxng.org/dev/search_api.html&quot;&gt;API URL&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Disable Tools&lt;/h2&gt; 
&lt;p&gt;Avante enables tools by default, but some LLM models do not support tools. You can disable tools by setting &lt;code&gt;disable_tools = true&lt;/code&gt; for the provider. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;providers = {
  claude = {
    endpoint = &quot;https://api.anthropic.com&quot;,
    model = &quot;claude-sonnet-4-20250514&quot;,
    timeout = 30000, -- Timeout in milliseconds
    disable_tools = true, -- disable tools!
    extra_request_body = {
      temperature = 0,
      max_tokens = 4096,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case you want to ban some tools to avoid its usage (like Claude 3.7 overusing the python tool) you can disable just specific tools&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  disabled_tools = { &quot;python&quot; },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Tool list&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;rag_search, python, git_diff, git_commit, glob, search_keyword, read_file_toplevel_symbols, read_file, create_file, move_path, copy_path, delete_path, create_dir, bash, web_search, fetch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Custom Tools&lt;/h2&gt; 
&lt;p&gt;Avante allows you to define custom tools that can be used by the AI during code generation and analysis. These tools can execute shell commands, run scripts, or perform any custom logic you need.&lt;/p&gt; 
&lt;h3&gt;Example: Go Test Runner&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Here&#39;s an example of a custom tool that runs Go unit tests:&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  custom_tools = {
    {
      name = &quot;run_go_tests&quot;,  -- Unique name for the tool
      description = &quot;Run Go unit tests and return results&quot;,  -- Description shown to AI
      command = &quot;go test -v ./...&quot;,  -- Shell command to execute
      param = {  -- Input parameters (optional)
        type = &quot;table&quot;,
        fields = {
          {
            name = &quot;target&quot;,
            description = &quot;Package or directory to test (e.g. &#39;./pkg/...&#39; or &#39;./internal/pkg&#39;)&quot;,
            type = &quot;string&quot;,
            optional = true,
          },
        },
      },
      returns = {  -- Expected return values
        {
          name = &quot;result&quot;,
          description = &quot;Result of the fetch&quot;,
          type = &quot;string&quot;,
        },
        {
          name = &quot;error&quot;,
          description = &quot;Error message if the fetch was not successful&quot;,
          type = &quot;string&quot;,
          optional = true,
        },
      },
      func = function(params, on_log, on_complete)  -- Custom function to execute
        local target = params.target or &quot;./...&quot;
        return vim.fn.system(string.format(&quot;go test -v %s&quot;, target))
      end,
    },
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;MCP&lt;/h2&gt; 
&lt;p&gt;Now you can integrate MCP functionality for Avante through &lt;code&gt;mcphub.nvim&lt;/code&gt;. For detailed documentation, please refer to &lt;a href=&quot;https://ravitemer.github.io/mcphub.nvim/extensions/avante.html&quot;&gt;mcphub.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Custom prompts&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;avante.nvim&lt;/code&gt; provides three different modes to interact with: &lt;code&gt;planning&lt;/code&gt;, &lt;code&gt;editing&lt;/code&gt;, and &lt;code&gt;suggesting&lt;/code&gt;, followed with three different prompts per mode.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;planning&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).toggle()&lt;/code&gt; on sidebar&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;editing&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).edit()&lt;/code&gt; on selection codeblock&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;suggesting&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).get_suggestion():suggest()&lt;/code&gt; on Tab flow.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cursor-planning&lt;/code&gt;: Used with &lt;code&gt;require(&quot;avante&quot;).toggle()&lt;/code&gt; on Tab flow, but only when cursor planning mode is enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Users can customize the system prompts via &lt;code&gt;Config.system_prompt&lt;/code&gt; or &lt;code&gt;Config.override_prompt_dir&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Config.system_prompt&lt;/code&gt; allows you to set a global system prompt. We recommend calling this in a custom Autocmds depending on your need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd(&quot;User&quot;, {
  pattern = &quot;ToggleMyPrompt&quot;,
  callback = function() require(&quot;avante.config&quot;).override({system_prompt = &quot;MY CUSTOM SYSTEM PROMPT&quot;}) end,
})

vim.keymap.set(&quot;n&quot;, &quot;&amp;lt;leader&amp;gt;am&quot;, function() vim.api.nvim_exec_autocmds(&quot;User&quot;, { pattern = &quot;ToggleMyPrompt&quot; }) end, { desc = &quot;avante: toggle my prompt&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;Config.override_prompt_dir&lt;/code&gt; allows you to specify a directory containing your own custom prompt templates, which will override the built-in templates. This is useful if you want to maintain a set of custom prompts outside of your Neovim configuration. It can be a string representing the directory path, or a function that returns a string representing the directory path.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Example: Override with prompts from a specific directory
require(&quot;avante&quot;).setup({
  override_prompt_dir = vim.fn.expand(&quot;~/.config/nvim/avante_prompts&quot;),
})

-- Example: Override with prompts from a function (dynamic directory)
require(&quot;avante&quot;).setup({
  override_prompt_dir = function()
    -- Your logic to determine the prompt directory
    return vim.fn.expand(&quot;~/.config/nvim/my_dynamic_prompts&quot;)
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;If you customize &lt;code&gt;base.avanterules&lt;/code&gt;, please ensure that &lt;code&gt;{% block custom_prompt %}{% endblock %}&lt;/code&gt; and &lt;code&gt;{% block extra_prompt %}{% endblock %}&lt;/code&gt; exist, otherwise the entire plugin may become unusable. If you are unsure about the specific reasons or what you are doing, please do not override the built-in prompts. The built-in prompts work very well.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you wish to custom prompts for each mode, &lt;code&gt;avante.nvim&lt;/code&gt; will check for project root based on the given buffer whether it contains the following patterns: &lt;code&gt;*.{mode}.avanterules&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The rules for root hierarchy:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;lsp workspace folders&lt;/li&gt; 
 &lt;li&gt;lsp root_dir&lt;/li&gt; 
 &lt;li&gt;root pattern of filename of the current buffer&lt;/li&gt; 
 &lt;li&gt;root pattern of cwd&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also configure custom directories for your &lt;code&gt;avanterules&lt;/code&gt; files using the &lt;code&gt;rules&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;avante&#39;).setup({
  rules = {
    project_dir = &#39;.avante/rules&#39;, -- relative to project root, can also be an absolute path
    global_dir = &#39;~/.config/avante/rules&#39;, -- absolute path
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The loading priority is as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;rules.project_dir&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rules.global_dir&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Project root&lt;/li&gt; 
&lt;/ol&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example folder structure for custom prompt&lt;/summary&gt; 
 &lt;p&gt;If you have the following structure:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;.
‚îú‚îÄ‚îÄ .git/
‚îú‚îÄ‚îÄ typescript.planning.avanterules
‚îú‚îÄ‚îÄ snippets.editing.avanterules
‚îú‚îÄ‚îÄ suggesting.avanterules
‚îî‚îÄ‚îÄ src/

&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;typescript.planning.avanterules&lt;/code&gt; will be used for &lt;code&gt;planning&lt;/code&gt; mode&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;snippets.editing.avanterules&lt;/code&gt; will be used for &lt;code&gt;editing&lt;/code&gt; mode&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;suggesting.avanterules&lt;/code&gt; will be used for &lt;code&gt;suggesting&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!important]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;*.avanterules&lt;/code&gt; is a jinja template file, in which will be rendered using &lt;a href=&quot;https://github.com/mitsuhiko/minijinja&quot;&gt;minijinja&lt;/a&gt;. See &lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates&quot;&gt;templates&lt;/a&gt; for example on how to extend current templates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Integration&lt;/h2&gt; 
&lt;p&gt;Avante.nvim can be extended to work with other plugins by using its extension modules. Below is an example of integrating Avante with &lt;a href=&quot;https://github.com/nvim-tree/nvim-tree.lua&quot;&gt;&lt;code&gt;nvim-tree&lt;/code&gt;&lt;/a&gt;, allowing you to select or deselect files directly from the NvimTree UI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
    &quot;yetone/avante.nvim&quot;,
    event = &quot;VeryLazy&quot;,
    keys = {
        {
            &quot;&amp;lt;leader&amp;gt;a+&quot;,
            function()
                local tree_ext = require(&quot;avante.extensions.nvim_tree&quot;)
                tree_ext.add_file()
            end,
            desc = &quot;Select file in NvimTree&quot;,
            ft = &quot;NvimTree&quot;,
        },
        {
            &quot;&amp;lt;leader&amp;gt;a-&quot;,
            function()
                local tree_ext = require(&quot;avante.extensions.nvim_tree&quot;)
                tree_ext.remove_file()
            end,
            desc = &quot;Deselect file in NvimTree&quot;,
            ft = &quot;NvimTree&quot;,
        },
    },
    opts = {
        --- other configurations
        selector = {
            exclude_auto_select = { &quot;NvimTree&quot; },
        },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;TODOs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Chat with current file&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Apply diff patch&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Chat with the selected block&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Slash commands&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Edit the selected block&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Smart Tab (Cursor Flow)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Chat with project (You can use &lt;code&gt;@codebase&lt;/code&gt; to chat with the whole project)&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Chat with selected files&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Tool use&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; MCP&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; ACP&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; disabled /&gt; Better codebase indexing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Enhanced AI Interactions&lt;/strong&gt;: Improve the depth of AI analysis and recommendations for more complex coding scenarios.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LSP + Tree-sitter + LLM Integration&lt;/strong&gt;: Integrate with LSP and Tree-sitter and LLM to provide more accurate and powerful code suggestions and analysis.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How to disable agentic mode?&lt;/h3&gt; 
&lt;p&gt;Avante.nvim provides two interaction modes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;agentic&lt;/code&gt;&lt;/strong&gt; (default): Uses AI tools to automatically generate and apply code changes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;legacy&lt;/code&gt;&lt;/strong&gt;: Uses the traditional planning method without automatic tool execution&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To disable agentic mode and switch to legacy mode, update your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  mode = &quot;legacy&quot;, -- Switch from &quot;agentic&quot; to &quot;legacy&quot;
  -- ... your other configuration options
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;What&#39;s the difference?&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Agentic mode&lt;/strong&gt;: AI can automatically execute tools like file operations, bash commands, web searches, etc. to complete complex tasks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Legacy mode&lt;/strong&gt;: AI provides suggestions and plans but requires manual approval for all actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;When should you use legacy mode?&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you prefer more control over what actions the AI takes&lt;/li&gt; 
 &lt;li&gt;If you&#39;re concerned about security with automatic tool execution&lt;/li&gt; 
 &lt;li&gt;If you want to manually review each step before applying changes&lt;/li&gt; 
 &lt;li&gt;If you&#39;re working in a sensitive environment where automatic code changes aren&#39;t desired&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also disable specific tools while keeping agentic mode enabled by configuring &lt;code&gt;disabled_tools&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  mode = &quot;agentic&quot;,
  disabled_tools = { &quot;bash&quot;, &quot;python&quot; }, -- Disable specific tools
  -- ... your other configuration options
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions to avante.nvim are welcome! If you&#39;re interested in helping out, please feel free to submit pull requests or open issues. Before contributing, ensure that your code has been thoroughly tested.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/yetone/avante.nvim/wiki&quot;&gt;wiki&lt;/a&gt; for more recipes and tricks.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;We would like to express our heartfelt gratitude to the contributors of the following open-source projects, whose code has provided invaluable inspiration and reference for the development of avante.nvim:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Nvim Plugin&lt;/th&gt; 
   &lt;th&gt;License&lt;/th&gt; 
   &lt;th&gt;Functionality&lt;/th&gt; 
   &lt;th&gt;Location&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/akinsho/git-conflict.nvim&quot;&gt;git-conflict.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;No License&lt;/td&gt; 
   &lt;td&gt;Diff comparison functionality&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/diff.lua&quot;&gt;lua/avante/diff.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jackMort/ChatGPT.nvim&quot;&gt;ChatGPT.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apache 2.0 License&lt;/td&gt; 
   &lt;td&gt;Calculation of tokens count&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/utils/tokens.lua&quot;&gt;lua/avante/utils/tokens.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/HakonHarnes/img-clip.nvim&quot;&gt;img-clip.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Clipboard image support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/clipboard.lua&quot;&gt;lua/avante/clipboard.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/zbirenbaum/copilot.lua&quot;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Copilot support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/copilot.lua&quot;&gt;lua/avante/providers/copilot.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/HiPhish/jinja.vim&quot;&gt;jinja.vim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Template filetype support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/syntax/jinja.vim&quot;&gt;syntax/jinja.vim&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/olimorris/codecompanion.nvim&quot;&gt;codecompanion.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MIT License&lt;/td&gt; 
   &lt;td&gt;Secrets logic support&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/init.lua&quot;&gt;lua/avante/providers/init.lua&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/paul-gauthier/aider&quot;&gt;aider&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Apache 2.0 License&lt;/td&gt; 
   &lt;td&gt;Planning mode user prompt&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates/planning.avanterules&quot;&gt;lua/avante/templates/planning.avanterules&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The high quality and ingenuity of these projects&#39; source code have been immensely beneficial throughout our development process. We extend our sincere thanks and respect to the authors and contributors of these projects. It is the selfless dedication of the open-source community that drives projects like avante.nvim forward.&lt;/p&gt; 
&lt;h2&gt;Business Sponsors&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt; &lt;a href=&quot;https://s.kiiro.ai/r/ylVbT6&quot; target=&quot;_blank&quot;&gt; &lt;img height=&quot;80&quot; src=&quot;https://github.com/user-attachments/assets/1abd8ede-bd98-4e6e-8ee0-5a661b40344a&quot; alt=&quot;Meshy AI&quot; /&gt;&lt;br /&gt; &lt;strong&gt;Meshy AI&lt;/strong&gt; 
     &lt;div&gt;
      &amp;nbsp;
     &lt;/div&gt; 
     &lt;div&gt;
      The #1 AI 3D Model Generator for Creators
     &lt;/div&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt; &lt;a href=&quot;https://s.kiiro.ai/r/mGPJOd&quot; target=&quot;_blank&quot;&gt; &lt;img height=&quot;80&quot; src=&quot;https://github.com/user-attachments/assets/7b7bd75e-1fd2-48cc-a71a-cff206e4fbd7&quot; alt=&quot;BabelTower API&quot; /&gt;&lt;br /&gt; &lt;strong&gt;BabelTower API&lt;/strong&gt; 
     &lt;div&gt;
      &amp;nbsp;
     &lt;/div&gt; 
     &lt;div&gt;
      No account needed, use any model instantly
     &lt;/div&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;avante.nvim is licensed under the Apache 2.0 License. For more details, please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/yetone/avante.nvim/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;h1&gt;Star History&lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://star-history.com/#yetone/avante.nvim&amp;amp;Date&quot;&gt; 
  &lt;picture&gt; 
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&amp;amp;theme=dark&quot; /&gt; 
   &lt;img alt=&quot;NebulaGraph Data Intelligence Suite(ngdi)&quot; src=&quot;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&quot; /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mfussenegger/nvim-lint</title>
      <link>https://github.com/mfussenegger/nvim-lint</link>
      <description>&lt;p&gt;An asynchronous linter plugin for Neovim complementary to the built-in Language Server Protocol support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lint&lt;/h1&gt; 
&lt;p&gt;An asynchronous linter plugin for Neovim (&amp;gt;= 0.9.5) complementary to the built-in Language Server Protocol support.&lt;/p&gt; 
&lt;h2&gt;Motivation &amp;amp; Goals&lt;/h2&gt; 
&lt;p&gt;With &lt;a href=&quot;https://github.com/dense-analysis/ale&quot;&gt;ale&lt;/a&gt; we already got an asynchronous linter, why write yet another one?&lt;/p&gt; 
&lt;p&gt;Because &lt;a href=&quot;https://github.com/dense-analysis/ale&quot;&gt;ale&lt;/a&gt; also includes its own language server client.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;nvim-lint&lt;/code&gt; instead has a more narrow scope: It spawns linters, parses their output, and reports the results via the &lt;code&gt;vim.diagnostic&lt;/code&gt; module.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;nvim-lint&lt;/code&gt; complements the built-in language server client for languages where there are no language servers, or where standalone linters provide better results.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires Neovim &amp;gt;= 0.9.5&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nvim-lint&lt;/code&gt; is a regular plugin and can be installed via the &lt;code&gt;:h packages&lt;/code&gt; mechanism or via a plugin manager.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone \
    https://github.com/mfussenegger/nvim-lint.git
    ~/.config/nvim/pack/plugins/start/nvim-lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;If using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-lint&#39;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;If using &lt;a href=&quot;https://github.com/wbthomason/packer.nvim&quot;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-lint&#39;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Configure the linters you want to run per file type. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lint&#39;).linters_by_ft = {
  markdown = {&#39;vale&#39;},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get the &lt;code&gt;filetype&lt;/code&gt; of a buffer you can run &lt;code&gt;:= vim.bo.filetype&lt;/code&gt;. The &lt;code&gt;filetype&lt;/code&gt; can also be a compound &lt;code&gt;filetype&lt;/code&gt;. For example, if you have a buffer with a &lt;code&gt;filetype&lt;/code&gt; like &lt;code&gt;yaml.ghaction&lt;/code&gt;, you can use either &lt;code&gt;ghaction&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt; or the full &lt;code&gt;yaml.ghaction&lt;/code&gt; as key in the &lt;code&gt;linters_by_ft&lt;/code&gt; table and the linter will be picked up in that buffer. This is useful for linters like &lt;a href=&quot;https://github.com/rhysd/actionlint&quot;&gt;actionlint&lt;/a&gt; in combination with &lt;code&gt;vim.filetype&lt;/code&gt; patterns like &lt;code&gt;[&quot;.*/.github/workflows/.*%.yml&quot;] = &quot;yaml.ghaction&quot;,&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Then setup a &lt;code&gt;autocmd&lt;/code&gt; to trigger linting. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vimL&quot;&gt;au BufWritePost * lua require(&#39;lint&#39;).try_lint()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or with Lua auto commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.api.nvim_create_autocmd({ &quot;BufWritePost&quot; }, {
  callback = function()

    -- try_lint without arguments runs the linters defined in `linters_by_ft`
    -- for the current filetype
    require(&quot;lint&quot;).try_lint()

    -- You can call `try_lint` with a linter name or a list of names to always
    -- run specific linters, independent of the `linters_by_ft` configuration
    require(&quot;lint&quot;).try_lint(&quot;cspell&quot;)
  end,
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some linters require a file to be saved to disk, others support linting &lt;code&gt;stdin&lt;/code&gt; input. For such linters you could also define a more aggressive &lt;code&gt;autocmd&lt;/code&gt;, for example on the &lt;code&gt;InsertLeave&lt;/code&gt; or &lt;code&gt;TextChanged&lt;/code&gt; events.&lt;/p&gt; 
&lt;p&gt;If you want to customize how the diagnostics are displayed, read &lt;code&gt;:help vim.diagnostic.config&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Available Linters&lt;/h2&gt; 
&lt;p&gt;There is a generic linter called &lt;code&gt;compiler&lt;/code&gt; that uses the &lt;code&gt;makeprg&lt;/code&gt; and &lt;code&gt;errorformat&lt;/code&gt; options of the current buffer.&lt;/p&gt; 
&lt;p&gt;Other dedicated linters that are built-in are:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool&lt;/th&gt; 
   &lt;th&gt;Linter name&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Set via &lt;code&gt;makeprg&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;compiler&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rhysd/actionlint&quot;&gt;actionlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;actionlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://alexjs.com/&quot;&gt;alex&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;alex&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/crystal-ameba/ameba&quot;&gt;ameba&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ameba&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://docs.ansible.com/lint.html&quot;&gt;ansible-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ansible_lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://bandit.readthedocs.io/en/latest/&quot;&gt;bandit&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;bandit&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/bash/&quot;&gt;bash&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;bash&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://beancount.github.io/docs/running_beancount_and_generating_reports.html#bean-check&quot;&gt;bean-check&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;bean_check&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/biomejs/biome&quot;&gt;biomejs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;biomejs&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/PrincetonUniversity/blocklint&quot;&gt;blocklint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;blocklint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bufbuild/buf&quot;&gt;buf_lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;buf_lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bazelbuild/buildtools/tree/main/buildifier&quot;&gt;buildifier&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;buildifier&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/aws-cloudformation/cfn-lint&quot;&gt;cfn-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cfn_lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/stelligent/cfn_nag&quot;&gt;cfn_nag&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cfn_nag&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mrtazz/checkmake&quot;&gt;checkmake&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;checkmake&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://docs.kernel.org/dev-tools/checkpatch.html&quot;&gt;checkpatch.pl&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;checkpatch&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://checkstyle.org/&quot;&gt;checkstyle&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;checkstyle&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.nongnu.org/chktex&quot;&gt;chktex&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;chktex&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://clang.llvm.org/extra/clang-tidy/&quot;&gt;clang-tidy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;clangtidy&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/KDE/clazy&quot;&gt;clazy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;clazy&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;clippy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;clippy&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/clj-kondo/clj-kondo&quot;&gt;clj-kondo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;clj-kondo&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/cmake-lint/cmake-lint&quot;&gt;cmakelint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cmakelint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/cheshirekow/cmake_format&quot;&gt;cmake-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cmake_lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/codespell-project/codespell&quot;&gt;codespell&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codespell&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://commitlint.js.org&quot;&gt;commitlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;commitlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/danmar/cppcheck/&quot;&gt;cppcheck&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cppcheck&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/cpplint/cpplint&quot;&gt;cpplint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cpplint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rrrene/credo&quot;&gt;credo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;credo&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/streetsidesoftware/cspell/tree/main/packages/cspell&quot;&gt;cspell&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cspell&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/cue-lang/cue&quot;&gt;cue&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cue&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.curlylint.org/&quot;&gt;curlylint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;curlylint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;http://gondor.apana.org.au/~herbert/dash&quot;&gt;dash&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/astro/deadnix&quot;&gt;deadnix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;deadnix&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/denoland/deno&quot;&gt;deno&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;deno&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://mypy.readthedocs.io/en/stable/mypy_daemon.html&quot;&gt;dmypy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;dmypy&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/microsoft/DirectXShaderCompiler&quot;&gt;DirectX Shader Compiler&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;dxc&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://djlint.com/&quot;&gt;djlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;djlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dotenv-linter.github.io/&quot;&gt;dotenv-linter&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;dotenv_linter&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/editorconfig-checker/editorconfig-checker&quot;&gt;editorconfig-checker&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;editorconfig-checker&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/shopify/erb-lint&quot;&gt;erb-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;erb_lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;ESLint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mantoni/eslint_d.js&quot;&gt;eslint_d&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/kaaveland/eugene&quot;&gt;eugene&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;eugene&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bakpakin/Fennel&quot;&gt;fennel&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;fennel&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/fieldalignment&quot;&gt;fieldalignment&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;fieldalignment&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fish-shell/fish-shell&quot;&gt;fish&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://flake8.pycqa.org/&quot;&gt;Flake8&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;flake8&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/david-a-wheeler/flawfinder&quot;&gt;flawfinder&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;flawfinder&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/PlasmaFAIR/fortitude&quot;&gt;fortitude&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;fortitude&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fsprojects/FSharpLint&quot;&gt;fsharplint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;fsharplint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/software/gawk/&quot;&gt;gawk&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gawk&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Scony/godot-gdscript-toolkit&quot;&gt;gdlint (gdtoolkit)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gdlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ghdl/ghdl&quot;&gt;GHDL&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ghdl&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jorisroovers/gitlint&quot;&gt;gitlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gitlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/google/shaderc&quot;&gt;glslc&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;glslc&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://golangci-lint.run/&quot;&gt;Golangci-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;golangcilint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/hadolint/hadolint&quot;&gt;hadolint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hadolint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://hledger.org/&quot;&gt;hledger&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hledger&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ndmitchell/hlint&quot;&gt;hlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;hlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://htmlhint.com/&quot;&gt;htmlhint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;htmlhint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.html-tidy.org/&quot;&gt;HTML Tidy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tidy&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://inko-lang.org/&quot;&gt;Inko&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;inko&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/janet-lang/janet&quot;&gt;janet&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;janet&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/candid82/joker&quot;&gt;joker&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;joker&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://jshint.com/&quot;&gt;jshint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;jshint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://json5.org/&quot;&gt;json5&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;json5&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/zaach/jsonlint&quot;&gt;jsonlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;jsonlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json.tool&quot;&gt;json.tool&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;json_tool&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ksh93/ksh&quot;&gt;ksh&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ksh&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pinterest/ktlint&quot;&gt;ktlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ktlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.ctan.org/tex-archive/support/lacheck&quot;&gt;lacheck&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;lacheck&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://languagetool.org/&quot;&gt;Languagetool&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;languagetool&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Makopo/lslint/&quot;&gt;lslint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;lslint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.lua.org/manual/5.1/luac.html&quot;&gt;luac&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;luac&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mpeterv/luacheck&quot;&gt;luacheck&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;luacheck&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/DavidAnson/markdownlint&quot;&gt;markdownlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;markdownlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/DavidAnson/markdownlint-cli2&quot;&gt;markdownlint-cli2&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;markdownlint-cli2&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://markuplint.dev/&quot;&gt;markuplint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;markuplint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/mlint.html&quot;&gt;mlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;mlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;http://mypy-lang.org/&quot;&gt;Mypy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;mypy&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://nagelfar.sourceforge.net/&quot;&gt;Nagelfar&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nagelfar&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/NixOS/nix&quot;&gt;Nix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/nvuillam/npm-groovy-lint&quot;&gt;npm-groovy-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;npm-groovy-lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/priv-kweihmann/oelint-adv&quot;&gt;oelint-adv&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;oelint-adv&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.openpolicyagent.org/&quot;&gt;opa_check&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;opa_check&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://opentofu.org/&quot;&gt;tofu&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tofu&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://oxc-project.github.io/&quot;&gt;oxlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;oxlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Perl-Critic/Perl-Critic&quot;&gt;perlcritic&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;perlcritic&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/perl-ide/App-perlimports&quot;&gt;perlimports&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;perlimports&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/PHPCSStandards/PHP_CodeSniffer&quot;&gt;phpcs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;phpcs&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/nunomaduro/phpinsights&quot;&gt;phpinsights&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;phpinsights&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://phpmd.org/&quot;&gt;phpmd&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;phpmd&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.php.net/&quot;&gt;php&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;php&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://phpstan.org/&quot;&gt;phpstan&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;phpstan&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pmd.github.io/&quot;&gt;pmd&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pmd&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ponylang/ponyc&quot;&gt;ponyc&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pony&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/loop-payments/prisma-lint&quot;&gt;prisma-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;prisma-lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/amperser/proselint&quot;&gt;proselint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;proselint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yoheimuta/protolint&quot;&gt;protolint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;protolint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://psalm.dev/&quot;&gt;psalm&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;psalm&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/puppetlabs/puppet-lint&quot;&gt;puppet-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;puppet-lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pycodestyle.pycqa.org/en/latest/&quot;&gt;pycodestyle&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.pydocstyle.org/en/stable/&quot;&gt;pydocstyle&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pydocstyle&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://pylint.org/&quot;&gt;Pylint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pylint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/csachs/pyproject-flake8&quot;&gt;pyproject-flake8&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pflake8&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://quick-lint-js.com&quot;&gt;quick-lint-js&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;quick-lint-js&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://redocly.com/docs/cli/commands/lint&quot;&gt;redocly&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;redolcy&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/StyraInc/regal&quot;&gt;regal&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;regal&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mgechev/revive&quot;&gt;Revive&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;revive&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/boakley/robotframework-lint&quot;&gt;rflint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rflint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MarketSquare/robotframework-robocop&quot;&gt;robocop&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;robocop&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rpm-software-management/rpmlint&quot;&gt;rpmlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rpmlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://rpm.org&quot;&gt;RPM&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rpmspec&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/myint/rstcheck&quot;&gt;rstcheck&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rstcheck&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/twolfson/restructuredtext-lint&quot;&gt;rstlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rstlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/rubocop/rubocop&quot;&gt;RuboCop&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;rubocop&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ruby/ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/astral-sh/ruff&quot;&gt;Ruff&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/warpnet/salt-lint&quot;&gt;salt-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;saltlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Kampfkarren/selene&quot;&gt;Selene&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;selene&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.shellcheck.net/&quot;&gt;ShellCheck&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;shellcheck&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/MikePopoloski/slang&quot;&gt;slang&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;slang&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://snakemake.github.io&quot;&gt;Snakemake&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;snakemake&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/snyk/cli&quot;&gt;snyk&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;snyk_iac&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://protofire.github.io/solhint/&quot;&gt;Solhint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;solhint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/stoplightio/spectral&quot;&gt;Spectral&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;spectral&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/sphinx-contrib/sphinx-lint&quot;&gt;sphinx-lint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sphinx-lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/sqlfluff/sqlfluff&quot;&gt;sqlfluff&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sqlfluff&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/quarylabs/sqruff&quot;&gt;sqruff&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;sqruff&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://standardjs.com/&quot;&gt;standardjs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;standardjs&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/testdouble/standard&quot;&gt;StandardRB&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;standardrb&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/NerdyPepper/statix&quot;&gt;statix check&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;statix&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/stylelint/stylelint&quot;&gt;stylelint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;stylelint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/dalance/svlint&quot;&gt;svlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;svlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;swiftlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://man.archlinux.org/man/systemd-analyze.1&quot;&gt;systemd-analyze&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;systemd-analyze&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/priv-kweihmann/systemdlint&quot;&gt;systemdlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;systemdlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/terraform-linters/tflint&quot;&gt;tflint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tflint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/aquasecurity/tfsec&quot;&gt;tfsec&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tfsec&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/tighten/tlint&quot;&gt;tlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/aquasecurity/trivy&quot;&gt;trivy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;trivy&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/standard/ts-standard&quot;&gt;ts-standard&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ts-standard&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/VincentLanglet/Twig-CS-Fixer&quot;&gt;twig-cs-fixer&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;twig-cs-fixer&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/crate-ci/typos&quot;&gt;typos&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;typos&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/vala-lang/vala-lint&quot;&gt;Vala&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;vala_lint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/errata-ai/vale&quot;&gt;Vale&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;vale&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://verilator.org/guide/latest/&quot;&gt;Verilator&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;verilator&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/Vimjas/vint&quot;&gt;vint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;vint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jeremiah-c-leary/vhdl-style-guide&quot;&gt;VSG&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;vsg&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/jendrikseipp/vulture&quot;&gt;vulture&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;vulture&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://docs.getwoke.tech/&quot;&gt;woke&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;woke&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/btford/write-good&quot;&gt;write-good&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;write_good&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/adrienverge/yamllint&quot;&gt;yamllint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;yamllint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://mikefarah.gitbook.io/yq&quot;&gt;yq&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;yq&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/woodruffw/zizmor&quot;&gt;zizmor&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;zizmor&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://donisaac.github.io/zlint/&quot;&gt;zlint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;zlint&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.zsh.org/&quot;&gt;zsh&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;zsh&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Custom Linters&lt;/h2&gt; 
&lt;p&gt;You can register custom linters by adding them to the &lt;code&gt;linters&lt;/code&gt; table, but please consider contributing a linter if it is missing.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;lint&#39;).linters.your_linter_name = {
  cmd = &#39;linter_cmd&#39;,
  stdin = true, -- or false if it doesn&#39;t support content input via stdin. In that case the filename is automatically added to the arguments.
  append_fname = true, -- Automatically append the file name to `args` if `stdin = false` (default: true)
  args = {}, -- list of arguments. Can contain functions with zero arguments that will be evaluated once the linter is used.
  stream = nil, -- (&#39;stdout&#39; | &#39;stderr&#39; | &#39;both&#39;) configure the stream to which the linter outputs the linting result.
  ignore_exitcode = false, -- set this to true if the linter exits with a code != 0 and that&#39;s considered normal.
  env = nil, -- custom environment table to use with the external process. Note that this replaces the *entire* environment, it is not additive.
  parser = your_parse_function
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instead of declaring the linter as a table, you can also declare it as a function which returns the linter table in case you want to dynamically generate some of the properties.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;your_parse_function&lt;/code&gt; can be a function which takes three arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;output&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bufnr&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;linter_cwd&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;output&lt;/code&gt; is the output generated by the linter command. The function must return a list of diagnostics as specified in &lt;code&gt;:help diagnostic-structure&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can override the environment that the linting process runs in by setting the &lt;code&gt;env&lt;/code&gt; key, e.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;env = { [&quot;FOO&quot;] = &quot;bar&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that this completely overrides the environment, it does not add new environment variables. The one exception is that the &lt;code&gt;PATH&lt;/code&gt; variable will be preserved if it is not explicitly set.&lt;/p&gt; 
&lt;p&gt;You can generate a parse function from a Lua pattern, from an &lt;code&gt;errorformat&lt;/code&gt; or for &lt;a href=&quot;https://sarifweb.azurewebsites.net/&quot;&gt;SARIF&lt;/a&gt; using the functions in the &lt;code&gt;lint.parser&lt;/code&gt; module:&lt;/p&gt; 
&lt;h3&gt;for_sarif&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;parser = require(&quot;lint.parser&quot;).for_sarif()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The function takes an optional argument:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;skeleton&lt;/code&gt;: Default values for the diagnostics&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;from_errorformat&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;parser = require(&#39;lint.parser&#39;).from_errorformat(errorformat)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The function takes two arguments: &lt;code&gt;errorformat&lt;/code&gt; and &lt;code&gt;skeleton&lt;/code&gt; (optional).&lt;/p&gt; 
&lt;h3&gt;from_pattern&lt;/h3&gt; 
&lt;p&gt;Creates a parser function from a pattern.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;parser = require(&#39;lint.parser&#39;).from_pattern(pattern, groups, severity_map, defaults, opts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;pattern&lt;/h3&gt; 
&lt;p&gt;The function allows to parse the linter&#39;s output using a pattern which can be either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Lua pattern. See &lt;code&gt;:help lua-patterns&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;A LPEG pattern object. See &lt;code&gt;:help vim.lpeg&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;A function (&lt;code&gt;fun(line: string):string[]&lt;/code&gt;). It takes one parameter - a line from the linter output and must return a string array with the matches. The array should be empty if there was no match.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;groups&lt;/h3&gt; 
&lt;p&gt;The groups specify the result format of the pattern. Available groups:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lnum&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;end_lnum&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;end_col&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;message&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;file&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;code&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The order of the groups must match the order of the captures within the pattern. An example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local pattern = &#39;[^:]+:(%d+):(%d+):(%w+):(.+)&#39;
local groups = { &#39;lnum&#39;, &#39;col&#39;, &#39;code&#39;, &#39;message&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The captures in the pattern correspond to the group at the same position.&lt;/p&gt; 
&lt;h3&gt;severity&lt;/h3&gt; 
&lt;p&gt;A mapping from severity codes to diagnostic codes&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;default_severity = {
[&#39;error&#39;] = vim.diagnostic.severity.ERROR,
[&#39;warning&#39;] = vim.diagnostic.severity.WARN,
[&#39;information&#39;] = vim.diagnostic.severity.INFO,
[&#39;hint&#39;] = vim.diagnostic.severity.HINT,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;defaults&lt;/h3&gt; 
&lt;p&gt;The defaults diagnostic values&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;defaults = {[&quot;source&quot;] = &quot;mylint-name&quot;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;opts&lt;/h3&gt; 
&lt;p&gt;Additional options&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lnum_offset&lt;/code&gt;: Added to &lt;code&gt;lnum&lt;/code&gt;. Defaults to 0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;end_lnum_offset&lt;/code&gt;: Added to &lt;code&gt;end_lnum&lt;/code&gt;. Defaults to 0&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;end_col_offset&lt;/code&gt;: offset added to &lt;code&gt;end_col&lt;/code&gt;. Defaults to &lt;code&gt;-1&lt;/code&gt;, assuming that the end-column position is exclusive.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Customize built-in linters&lt;/h2&gt; 
&lt;p&gt;You can import a linter and modify its properties. An example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local phpcs = require(&#39;lint&#39;).linters.phpcs
phpcs.args = {
  &#39;-q&#39;,
  -- &amp;lt;- Add a new parameter here
  &#39;--report=json&#39;,
  &#39;-&#39;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some linters are defined as function for lazy evaluation of some properties. In this case, you need to wrap them like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local original = require(&quot;lint&quot;).linters.terraform_validate
require(&quot;lint&quot;).linters.terraform_validate = function()
  local linter = original()
  linter.cmd = &quot;my_custom&quot;
  return linter
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also post-process the diagnostics produced by a linter by wrapping it. For example, to change the severity of all diagnostics created by &lt;code&gt;cspell&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local lint = require(&quot;lint&quot;)
lint.linters.cspell = require(&quot;lint.util&quot;).wrap(lint.linters.cspell, function(diagnostic)
  diagnostic.severity = vim.diagnostic.severity.HINT
  return diagnostic
end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Display configuration&lt;/h2&gt; 
&lt;p&gt;See &lt;code&gt;:help vim.diagnostic.config&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to have different settings per linter, you can get the &lt;code&gt;namespace&lt;/code&gt; for a linter via &lt;code&gt;require(&quot;lint&quot;).get_namespace(&quot;linter_name&quot;)&lt;/code&gt;. An example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local ns = require(&quot;lint&quot;).get_namespace(&quot;my_linter_name&quot;)
vim.diagnostic.config({ virtual_text = true }, ns)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Get the current running linters for your buffer&lt;/h2&gt; 
&lt;p&gt;You can see which linters are running with &lt;code&gt;require(&quot;lint&quot;).get_running()&lt;/code&gt;. To include the running linters in the status line you could format them like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local lint_progress = function()
  local linters = require(&quot;lint&quot;).get_running()
  if #linters == 0 then
      return &quot;Û∞¶ï&quot;
  end
  return &quot;Û±â∂ &quot; .. table.concat(linters, &quot;, &quot;)
end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dense-analysis/ale&quot;&gt;Ale&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mattn/efm-langserver&quot;&gt;efm-langserver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iamcco/diagnostic-languageserver&quot;&gt;diagnostic-languageserver&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development ‚ò¢Ô∏è&lt;/h2&gt; 
&lt;h3&gt;Run tests&lt;/h3&gt; 
&lt;p&gt;Running tests requires &lt;a href=&quot;https://lunarmodules.github.io/busted/&quot;&gt;busted&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/nvim-neorocks/neorocks&quot;&gt;neorocks&lt;/a&gt; or &lt;a href=&quot;https://zignar.net/2023/01/21/using-luarocks-as-lua-interpreter-with-luarocks/&quot;&gt;Using Neovim as Lua interpreter with Luarocks&lt;/a&gt; for installation instructions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;busted tests/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docs&lt;/h3&gt; 
&lt;p&gt;API docs is generated using &lt;a href=&quot;https://github.com/mrcjkb/vimcats&quot;&gt;vimcats&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vimcats&quot;&gt;vimcats -t -f lua/lint.lua lua/lint/parser.lua &amp;gt; doc/lint.txt
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>xmake-io/xmake</title>
      <link>https://github.com/xmake-io/xmake</link>
      <description>&lt;p&gt;üî• A cross-platform build utility based on Lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://xmake.io&quot;&gt; &lt;img width=&quot;160&quot; height=&quot;160&quot; src=&quot;https://xmake.io/assets/img/logo.png&quot; /&gt; &lt;/a&gt; 
 &lt;h1&gt;xmake&lt;/h1&gt; 
 &lt;div&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/actions?query=workflow%3AWindows&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/windows.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=windows&quot; alt=&quot;github-ci&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/actions?query=workflow%3ALinux&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/linux.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=linux&quot; alt=&quot;github-ci&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/actions?query=workflow%3AmacOS&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/xmake-io/xmake/macos.yml?branch=master&amp;amp;style=flat-square&amp;amp;logo=apple&quot; alt=&quot;github-ci&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/release/xmake-io/xmake.svg?style=flat-square&quot; alt=&quot;Github All Releases&quot; /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;a href=&quot;https://github.com/xmake-io/xmake/raw/master/LICENSE.md&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/xmake-io/xmake.svg?colorB=f48041&amp;amp;style=flat-square&quot; alt=&quot;license&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://www.reddit.com/r/xmake/&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/chat-on%20reddit-ff3f34.svg?style=flat-square&quot; alt=&quot;Reddit&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://t.me/tbooxorg&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/chat-on%20telegram-blue.svg?style=flat-square&quot; alt=&quot;Telegram&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://jq.qq.com/?_wv=1027&amp;amp;k=5hpwWFv&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/chat-on%20QQ-ff69b4.svg?style=flat-square&quot; alt=&quot;QQ&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://discord.gg/xmake&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg?style=flat-square&quot; alt=&quot;Discord&quot; /&gt; &lt;/a&gt; 
  &lt;a href=&quot;https://xmake.io/about/sponsor&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/donate-us-orange.svg?style=flat-square&quot; alt=&quot;Donate&quot; /&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;p&gt;&lt;b&gt;A cross-platform build utility based on Lua&lt;/b&gt;&lt;br /&gt; &lt;i&gt;Modern C/C++ build tool: Simple, Fast, Powerful dependency package integration&lt;/i&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Support this project&lt;/h2&gt; 
&lt;p&gt;Support this project by &lt;a href=&quot;https://xmake.io/about/sponsor&quot;&gt;becoming a sponsor&lt;/a&gt;. Your logo will show up here with a link to your website. üôè&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/xmake#sponsors&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/xmake/sponsors.svg?width=890&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/xmake#backers&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/xmake/backers.svg?width=890&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Technical support&lt;/h2&gt; 
&lt;p&gt;You can also consider sponsoring us to get extra technical support services via the &lt;a href=&quot;https://github.com/sponsors/waruqi&quot;&gt;Github sponsor program&lt;/a&gt;. If you do, you can get access to the &lt;a href=&quot;https://github.com/xmake-io/technical-support&quot;&gt;xmake-io/technical-support&lt;/a&gt; repository, which has the following benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Handling Issues with higher priority&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; One-to-one technical consulting service&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Review your xmake.lua and provide suggestions for improvement&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction (&lt;a href=&quot;https://raw.githubusercontent.com/xmake-io/xmake/dev/README_zh.md&quot;&gt;‰∏≠Êñá&lt;/a&gt;)&lt;/h2&gt; 
&lt;p&gt;What is Xmake?&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Xmake is a cross-platform build utility based on the Lua scripting language.&lt;/li&gt; 
 &lt;li&gt;Xmake is very lightweight and has no dependencies outside of the standard library.&lt;/li&gt; 
 &lt;li&gt;Uses the &lt;code&gt;xmake.lua&lt;/code&gt; file to maintain project builds with a simple and readable syntax.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Xmake can be used to directly build source code (like with Make or Ninja), or it can generate project source files like CMake or Meson. It also has a &lt;em&gt;built-in&lt;/em&gt; package management system to help users integrate C/C++ dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Although less precise, one can still understand Xmake in the following way:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Xmake ‚âà Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to know more, please refer to the &lt;a href=&quot;https://xmake.io/guide/quick-start&quot;&gt;Documentation&lt;/a&gt;, &lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;GitHub&lt;/a&gt; or &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;. You are also welcome to join our &lt;a href=&quot;https://xmake.io/about/contact&quot;&gt;community&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The official Xmake repository can be found at &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-io/xmake-repo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/xmake-io/xmake-docs/raw/master/docs/public/assets/img/index/xmake-basic-render.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;With cURL&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -fsSL https://xmake.io/shget.text | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;With Wget&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget https://xmake.io/shget.text -O - | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;With PowerShell&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;irm https://xmake.io/psget.text | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Other installation methods&lt;/h3&gt; 
&lt;p&gt;If you don&#39;t want to use the above scripts to install Xmake, visit the &lt;a href=&quot;https://xmake.io/guide/quick-start.html#installation&quot;&gt;Installation Guide&lt;/a&gt; for other installation methods (building from source, package managers, etc.).&lt;/p&gt; 
&lt;h2&gt;Simple Project Description&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;console&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Creates a new target &lt;code&gt;console&lt;/code&gt; of kind &lt;code&gt;binary&lt;/code&gt;, and adds all the files ending in &lt;code&gt;.c&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Package dependencies&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;tbox 1.6.*&quot;, &quot;zlib&quot;, &quot;libpng ~1.6&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Adds a requirement of tbox v1.6, zlib (any version), and libpng v1.6.&lt;/p&gt; 
&lt;p&gt;The official xmake package repository exists at: &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/xmake-io/xmake-docs/raw/master/assets/img/index/package.gif&quot; width=&quot;650px&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Command line interface reference&lt;/h2&gt; 
&lt;p&gt;The below assumes you are currently in the project&#39;s root directory.&lt;/p&gt; 
&lt;h3&gt;Build a project&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run target&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake run console
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Debug target&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake run -d console
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run test&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configure platform&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake f -p [windows|linux|macosx|android|iphoneos ..] -a [x86|arm64 ..] -m [debug|release]
$ xmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Menu configuration&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake f --menu
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://xmake.io/assets/img/index/menuconf.png&quot; width=&quot;650px&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Supported platforms&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (x86, x64, arm, arm64, arm64ec)&lt;/li&gt; 
 &lt;li&gt;macOS (i386, x86_64, arm64)&lt;/li&gt; 
 &lt;li&gt;Linux (i386, x86_64, arm, arm64, riscv, mips, 390x, sh4 ...)&lt;/li&gt; 
 &lt;li&gt;*BSD (i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;Android (x86, x86_64, armeabi, armeabi-v7a, arm64-v8a)&lt;/li&gt; 
 &lt;li&gt;iOS (armv7, armv7s, arm64, i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;WatchOS (armv7k, i386)&lt;/li&gt; 
 &lt;li&gt;AppleTVOS (armv7, arm64, i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;AppleXROS (arm64, x86_64)&lt;/li&gt; 
 &lt;li&gt;MSYS (i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;MinGW (i386, x86_64, arm, arm64)&lt;/li&gt; 
 &lt;li&gt;Cygwin (i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;Wasm (wasm32, wasm64)&lt;/li&gt; 
 &lt;li&gt;Haiku (i386, x86_64)&lt;/li&gt; 
 &lt;li&gt;Harmony (x86_64, armeabi-v7a, arm64-v8a)&lt;/li&gt; 
 &lt;li&gt;Cross (cross-toolchains ..)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported toolchains&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake show -l toolchains
xcode         Xcode IDE
msvc          Microsoft Visual C/C++ Compiler
clang-cl      LLVM Clang C/C++ Compiler compatible with msvc
yasm          The Yasm Modular Assembler
clang         A C language family frontend for LLVM
go            Go Programming Language Compiler
dlang         D Programming Language Compiler (Auto)
dmd           D Programming Language Compiler
ldc           The LLVM-based D Compiler
gdc           The GNU D Compiler (GDC)
gfortran      GNU Fortran Programming Language Compiler
zig           Zig Programming Language Compiler
sdcc          Small Device C Compiler
cuda          CUDA Toolkit (nvcc, nvc, nvc++, nvfortran)
ndk           Android NDK
rust          Rust Programming Language Compiler
swift         Swift Programming Language Compiler
llvm          A collection of modular and reusable compiler and toolchain technologies
cross         Common cross compilation toolchain
nasm          NASM Assembler
gcc           GNU Compiler Collection
mingw         Minimalist GNU for Windows
gnu-rm        GNU Arm Embedded Toolchain
envs          Environment variables toolchain
fasm          Flat Assembler
tinycc        Tiny C Compiler
emcc          A toolchain for compiling to asm.js and WebAssembly
icc           Intel C/C++ Compiler
ifort         Intel Fortran Compiler
ifx           Intel LLVM Fortran Compiler
muslcc        The musl-based cross-compilation toolchain
fpc           Free Pascal Programming Language Compiler
wasi          WASI-enabled WebAssembly C/C++ toolchain
nim           Nim Programming Language Compiler
circle        A new C++20 compiler
armcc         ARM Compiler Version 5 of Keil MDK
armclang      ARM Compiler Version 6 of Keil MDK
c51           Keil development tools for the 8051 Microcontroller Architecture
icx           Intel LLVM C/C++ Compiler
dpcpp         Intel LLVM C++ Compiler for data parallel programming model based on Khronos SYCL
masm32        The MASM32 SDK
iverilog      Icarus Verilog
verilator     Verilator open-source SystemVerilog simulator and lint system
cosmocc       build-once run-anywhere
hdk           Harmony SDK
ti-c2000      TI-CGT C2000 compiler
ti-c6000      TI-CGT C6000 compiler
iararm        IAR ARM C/C++ Compiler
kotlin-native Kotlin Native Programming Language Compiler
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Supported languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;C and C++&lt;/li&gt; 
 &lt;li&gt;Objective-C and Objective-C++&lt;/li&gt; 
 &lt;li&gt;Swift&lt;/li&gt; 
 &lt;li&gt;Assembly&lt;/li&gt; 
 &lt;li&gt;Golang&lt;/li&gt; 
 &lt;li&gt;Rust&lt;/li&gt; 
 &lt;li&gt;Dlang&lt;/li&gt; 
 &lt;li&gt;Fortran&lt;/li&gt; 
 &lt;li&gt;Cuda&lt;/li&gt; 
 &lt;li&gt;Zig&lt;/li&gt; 
 &lt;li&gt;Vala&lt;/li&gt; 
 &lt;li&gt;Pascal&lt;/li&gt; 
 &lt;li&gt;Nim&lt;/li&gt; 
 &lt;li&gt;Verilog&lt;/li&gt; 
 &lt;li&gt;FASM&lt;/li&gt; 
 &lt;li&gt;NASM&lt;/li&gt; 
 &lt;li&gt;YASM&lt;/li&gt; 
 &lt;li&gt;MASM32&lt;/li&gt; 
 &lt;li&gt;Cppfront&lt;/li&gt; 
 &lt;li&gt;Kotlin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Xmake exhibits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple yet flexible configuration grammar.&lt;/li&gt; 
 &lt;li&gt;Quick, dependency-free installation.&lt;/li&gt; 
 &lt;li&gt;Easy compilation for most all supported platforms.&lt;/li&gt; 
 &lt;li&gt;Supports cross-compilation with intelligent analysis of cross toolchain information.&lt;/li&gt; 
 &lt;li&gt;Extremely fast parallel compilation support.&lt;/li&gt; 
 &lt;li&gt;Supports C++ modules (new in C++20).&lt;/li&gt; 
 &lt;li&gt;Supports cross-platform C/C++ dependencies with built-in package manager.&lt;/li&gt; 
 &lt;li&gt;Multi-language compilation support including mixed-language projects.&lt;/li&gt; 
 &lt;li&gt;Rich plug-in support with various project generators (ex. Visual Studio/Makefiles/CMake/&lt;code&gt;compile_commands.json&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;REPL interactive execution support&lt;/li&gt; 
 &lt;li&gt;Incremental compilation support with automatic analysis of header files&lt;/li&gt; 
 &lt;li&gt;Built-in toolchain management&lt;/li&gt; 
 &lt;li&gt;A large number of expansion modules&lt;/li&gt; 
 &lt;li&gt;Remote compilation support&lt;/li&gt; 
 &lt;li&gt;Distributed compilation support&lt;/li&gt; 
 &lt;li&gt;Local and remote build cache support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Project Types&lt;/h2&gt; 
&lt;p&gt;Xmake supports the below types of projects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Static libraries&lt;/li&gt; 
 &lt;li&gt;Shared libraries&lt;/li&gt; 
 &lt;li&gt;Console/CLI applications&lt;/li&gt; 
 &lt;li&gt;CUDA programs&lt;/li&gt; 
 &lt;li&gt;Qt applications&lt;/li&gt; 
 &lt;li&gt;WDK drivers (umdf/kmdf/wdm)&lt;/li&gt; 
 &lt;li&gt;WinSDK applications&lt;/li&gt; 
 &lt;li&gt;MFC applications&lt;/li&gt; 
 &lt;li&gt;Darwin applications (with metal support)&lt;/li&gt; 
 &lt;li&gt;Frameworks and bundles (in Darwin)&lt;/li&gt; 
 &lt;li&gt;SWIG modules (Lua, Python, ...)&lt;/li&gt; 
 &lt;li&gt;LuaRocks modules&lt;/li&gt; 
 &lt;li&gt;Protobuf programs&lt;/li&gt; 
 &lt;li&gt;Lex/Yacc programs&lt;/li&gt; 
 &lt;li&gt;Linux kernel modules&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Package management&lt;/h2&gt; 
&lt;h3&gt;Download and build&lt;/h3&gt; 
&lt;p&gt;Xmake can automatically fetch and install dependencies!&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://xmake.io/assets/img/index/package_manage.png&quot; width=&quot;650px&quot; /&gt; &lt;/p&gt; 
&lt;h3&gt;Supported package repositories&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official package repository &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; (tbox &amp;gt;1.6.1)&lt;/li&gt; 
 &lt;li&gt;Official package manager &lt;a href=&quot;https://github.com/xmake-io/xrepo&quot;&gt;Xrepo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://xmake.io/guide/package-management/using-official-packages.html#using-self-built-private-package-repository&quot;&gt;User-built repositories&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Conan (conan::openssl/1.1.1g)&lt;/li&gt; 
 &lt;li&gt;Conda (conda::libpng 1.3.67)&lt;/li&gt; 
 &lt;li&gt;Vcpkg (vcpkg:ffmpeg)&lt;/li&gt; 
 &lt;li&gt;Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)&lt;/li&gt; 
 &lt;li&gt;Pacman on archlinux/msys2 (pacman::libcurl)&lt;/li&gt; 
 &lt;li&gt;Apt on ubuntu/debian (apt::zlib1g-dev)&lt;/li&gt; 
 &lt;li&gt;Clib (clib::clibs/bytes@0.0.4)&lt;/li&gt; 
 &lt;li&gt;Dub (dub::log 0.4.3)&lt;/li&gt; 
 &lt;li&gt;Portage on Gentoo/Linux (portage::libhandy)&lt;/li&gt; 
 &lt;li&gt;Nimble for nimlang (nimble::zip &amp;gt;1.3)&lt;/li&gt; 
 &lt;li&gt;Cargo for rust (cargo::base64 0.13.0)&lt;/li&gt; 
 &lt;li&gt;Zypper on openSUSE (zypper::libsfml2 2.5)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Package management features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;The official repository provides nearly 500+ packages with simple compilation on all supported platforms&lt;/li&gt; 
 &lt;li&gt;Full platform package support, support for cross-compiled dependent packages&lt;/li&gt; 
 &lt;li&gt;Support package virtual environment using &lt;code&gt;xrepo env shell&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Precompiled package acceleration for Windows (NT)&lt;/li&gt; 
 &lt;li&gt;Support self-built package repositories and private repository deployment&lt;/li&gt; 
 &lt;li&gt;Third-party package repository support for repositories such as: vcpkg, conan, conda, etc.&lt;/li&gt; 
 &lt;li&gt;Supports automatic pulling of remote toolchains&lt;/li&gt; 
 &lt;li&gt;Supports dependency version locking&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Processing architecture&lt;/h2&gt; 
&lt;p&gt;Below is a diagram showing roughly the architecture of Xmake, and thus how it functions.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://xmake.io/assets/img/index/package_arch.png&quot; width=&quot;650px&quot; /&gt; &lt;/p&gt; 
&lt;h2&gt;Distributed Compilation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Cross-platform support.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support for MSVC, Clang, GCC and other cross-compilation toolchains.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support for building for Android, Linux, Windows NT, and Darwin hosts.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; No dependencies other than the compilation toolchain.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support for build server load balancing scheduling.&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Support for real time compressed transfer of large files (lz4).&lt;/li&gt; 
 &lt;li&gt;&lt;input type=&quot;checkbox&quot; checked disabled /&gt; Almost zero configuration cost, no shared filesystem required, for convenience and security.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more details see: &lt;a href=&quot;https://xmake.io/guide/extras/distributed-compilation.html&quot;&gt;Distributed Compilation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Remote Compilation&lt;/h2&gt; 
&lt;p&gt;For more details see: &lt;a href=&quot;https://xmake.io/guide/extras/remote-compilation.html&quot;&gt;Remote Compilation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Local/Remote Build Cache&lt;/h2&gt; 
&lt;p&gt;For more details see: &lt;a href=&quot;https://xmake.io/guide/extras/build-cache.html&quot;&gt;Build Cache Acceleration&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;Xmake&#39;s speed on is par with Ninja! The test project: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/core&quot;&gt;xmake-core&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Multi-task parallel compilation&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;buildsystem&lt;/th&gt; 
   &lt;th&gt;Termux (8core/-j12)&lt;/th&gt; 
   &lt;th&gt;buildsystem&lt;/th&gt; 
   &lt;th&gt;MacOS (8core/-j12)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;xmake&lt;/td&gt; 
   &lt;td&gt;24.890s&lt;/td&gt; 
   &lt;td&gt;xmake&lt;/td&gt; 
   &lt;td&gt;12.264s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ninja&lt;/td&gt; 
   &lt;td&gt;25.682s&lt;/td&gt; 
   &lt;td&gt;ninja&lt;/td&gt; 
   &lt;td&gt;11.327s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmake(gen+make)&lt;/td&gt; 
   &lt;td&gt;5.416s+28.473s&lt;/td&gt; 
   &lt;td&gt;cmake(gen+make)&lt;/td&gt; 
   &lt;td&gt;1.203s+14.030s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; 
   &lt;td&gt;4.458s+24.842s&lt;/td&gt; 
   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; 
   &lt;td&gt;0.988s+11.644s&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Single task compilation&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;buildsystem&lt;/th&gt; 
   &lt;th&gt;Termux (-j1)&lt;/th&gt; 
   &lt;th&gt;buildsystem&lt;/th&gt; 
   &lt;th&gt;MacOS (-j1)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;xmake&lt;/td&gt; 
   &lt;td&gt;1m57.707s&lt;/td&gt; 
   &lt;td&gt;xmake&lt;/td&gt; 
   &lt;td&gt;39.937s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ninja&lt;/td&gt; 
   &lt;td&gt;1m52.845s&lt;/td&gt; 
   &lt;td&gt;ninja&lt;/td&gt; 
   &lt;td&gt;38.995s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmake(gen+make)&lt;/td&gt; 
   &lt;td&gt;5.416s+2m10.539s&lt;/td&gt; 
   &lt;td&gt;cmake(gen+make)&lt;/td&gt; 
   &lt;td&gt;1.203s+41.737s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; 
   &lt;td&gt;4.458s+1m54.868s&lt;/td&gt; 
   &lt;td&gt;cmake(gen+ninja)&lt;/td&gt; 
   &lt;td&gt;0.988s+38.022s&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;More Examples&lt;/h2&gt; 
&lt;h3&gt;Debug and release profiles&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_rules(&quot;mode.debug&quot;, &quot;mode.release&quot;)

target(&quot;console&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    if is_mode(&quot;debug&quot;) then
        add_defines(&quot;DEBUG&quot;)
    end
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom scripts&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    after_build(function (target)
        print(&quot;hello: %s&quot;, target:name())
        os.exec(&quot;echo %s&quot;, target:targetfile())
    end)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Automatic integration of dependent packages&lt;/h3&gt; 
&lt;p&gt;Download and use packages in &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; or third-party repositories:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;tbox &amp;gt;1.6.1&quot;, &quot;libuv master&quot;, &quot;vcpkg::ffmpeg&quot;, &quot;brew::pcre2/libpcre2-8&quot;)
add_requires(&quot;conan::openssl/1.1.1g&quot;, {alias = &quot;openssl&quot;, optional = true, debug = true})
target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    add_packages(&quot;tbox&quot;, &quot;libuv&quot;, &quot;vcpkg::ffmpeg&quot;, &quot;brew::pcre2/libpcre2-8&quot;, &quot;openssl&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition, we can also use the &lt;a href=&quot;https://github.com/xmake-io/xrepo&quot;&gt;xrepo&lt;/a&gt; command to quickly install dependencies.&lt;/p&gt; 
&lt;h3&gt;Qt QuickApp Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    add_rules(&quot;qt.quickapp&quot;)
    add_files(&quot;src/*.cpp&quot;)
    add_files(&quot;src/qml.qrc&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cuda Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.cu&quot;)
    add_cugencodes(&quot;native&quot;)
    add_cugencodes(&quot;compute_35&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WDK/UMDF Driver Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;echo&quot;)
    add_rules(&quot;wdk.driver&quot;, &quot;wdk.env.umdf&quot;)
    add_files(&quot;driver/*.c&quot;)
    add_files(&quot;driver/*.inx&quot;)
    add_includedirs(&quot;exe&quot;)

target(&quot;app&quot;)
    add_rules(&quot;wdk.binary&quot;, &quot;wdk.env.umdf&quot;)
    add_files(&quot;exe/*.cpp&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more WDK driver examples (UMDF/KMDF/WDM), please visit &lt;a href=&quot;https://xmake.io/examples/cpp/wdk.html&quot;&gt;WDK Program Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Darwin Applications&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    add_rules(&quot;xcode.application&quot;)
    add_files(&quot;src/*.m&quot;, &quot;src/**.storyboard&quot;, &quot;src/*.xcassets&quot;)
    add_files(&quot;src/Info.plist&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Framework and Bundle Program (Darwin)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    add_rules(&quot;xcode.framework&quot;) -- or xcode.bundle
    add_files(&quot;src/*.m&quot;)
    add_files(&quot;src/Info.plist&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;OpenMP Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;libomp&quot;, {optional = true})
target(&quot;loop&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.cpp&quot;)
    add_rules(&quot;c++.openmp&quot;)
    add_packages(&quot;libomp&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Zig Program&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/main.zig&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Automatically fetch remote toolchain&lt;/h3&gt; 
&lt;h4&gt;fetch a special version of LLVM&lt;/h4&gt; 
&lt;p&gt;Require the Clang version packaged with LLM-10 to compile a project.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;llvm 10.x&quot;, {alias = &quot;llvm-10&quot;})
target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    set_toolchains(&quot;llvm@llvm-10&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fetch a cross-compilation toolchain&lt;/h4&gt; 
&lt;p&gt;We can also pull a specified cross-compilation toolchain in to compile the project.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;muslcc&quot;)
target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    set_toolchains(&quot;@muslcc&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fetch toolchain and packages&lt;/h4&gt; 
&lt;p&gt;We can also use the specified &lt;code&gt;muslcc&lt;/code&gt; cross-compilation toolchain to compile and integrate all dependent packages.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;add_requires(&quot;muslcc&quot;)
add_requires(&quot;zlib&quot;, &quot;libogg&quot;, {system = false})

set_toolchains(&quot;@muslcc&quot;)

target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.c&quot;)
    add_packages(&quot;zlib&quot;, &quot;libogg&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;h4&gt;Generate IDE project file pluginÔºàmakefile, vs2002 - vs2026 .. Ôºâ&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake project -k vsxmake -m &quot;debug,release&quot; # New vsproj generator (Recommended)
$ xmake project -k vs -m &quot;debug,release&quot;
$ xmake project -k cmake
$ xmake project -k ninja
$ xmake project -k compile_commands
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Run a custom lua script plugin&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ xmake l ./test.lua
$ xmake l -c &quot;print(&#39;hello xmake!&#39;)&quot;
$ xmake l lib.detect.find_tool gcc
$ xmake l
&amp;gt; print(&quot;hello xmake!&quot;)
&amp;gt; {1, 2, 3}
&amp;lt; {
    1,
    2,
    3
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see a list of builtin plugins, please visit &lt;a href=&quot;https://xmake.io/guide/extensions/builtin-plugins.html&quot;&gt;Builtin plugins&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please download and install other plugins from the plugins repository &lt;a href=&quot;https://github.com/xmake-io/xmake-plugins&quot;&gt;xmake-plugins&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;IDE/Editor Integration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-vscode&quot;&gt;xmake-vscode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/xmake-io/xmake-vscode/master/res/problem.gif&quot; width=&quot;650px&quot; /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-sublime&quot;&gt;xmake-sublime&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/xmake-io/xmake-sublime/master/res/problem.gif&quot; width=&quot;650px&quot; /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-idea&quot;&gt;xmake-idea&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/xmake-io/xmake-idea/master/res/problem.gif&quot; width=&quot;650px&quot; /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/luzhlon/xmake.vim&quot;&gt;xmake.vim&lt;/a&gt; (third-party, thanks &lt;a href=&quot;https://github.com/luzhlon&quot;&gt;@luzhlon&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/HelloWorld886/xmake-visualstudio&quot;&gt;xmake-visualstudio&lt;/a&gt; (third-party, thanks &lt;a href=&quot;https://github.com/HelloWorld886&quot;&gt;@HelloWorld886&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Arthapz/xmake-project-manager&quot;&gt;xmake-qtcreator&lt;/a&gt; (third-party, thanks &lt;a href=&quot;https://github.com/Arthapz&quot;&gt;@Arthapz&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Xmake Gradle Plugin (JNI)&lt;/h3&gt; 
&lt;p&gt;We can use the &lt;a href=&quot;https://github.com/xmake-io/xmake-gradle&quot;&gt;xmake-gradle&lt;/a&gt; plugin to compile JNI libraries via gradle.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;plugins {
  id &#39;org.tboox.gradle-xmake-plugin&#39; version &#39;1.1.5&#39;
}

android {
    externalNativeBuild {
        xmake {
            path &quot;jni/xmake.lua&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;xmakeBuild&lt;/code&gt; task will be injected into the &lt;code&gt;assemble&lt;/code&gt; task automatically if the &lt;code&gt;gradle-xmake-plugin&lt;/code&gt; has been applied.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ ./gradlew app:assembleDebug
&amp;gt; Task :nativelib:xmakeConfigureForArm64
&amp;gt; Task :nativelib:xmakeBuildForArm64
&amp;gt;&amp;gt; xmake build
[ 50%]: cache compiling.debug nativelib.cc
[ 75%]: linking.debug libnativelib.so
[100%]: build ok!
&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/arm64-v8a
&amp;gt; Task :nativelib:xmakeConfigureForArmv7
&amp;gt; Task :nativelib:xmakeBuildForArmv7
&amp;gt;&amp;gt; xmake build
[ 50%]: cache compiling.debug nativelib.cc
[ 75%]: linking.debug libnativelib.so
[100%]: build ok!
&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/armeabi-v7a
&amp;gt; Task :nativelib:preBuild
&amp;gt; Task :nativelib:assemble
&amp;gt; Task :app:assembleDebug
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;CI Integration&lt;/h2&gt; 
&lt;h3&gt;GitHub Action&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/xmake-io/github-action-setup-xmake&quot;&gt;github-action-setup-xmake&lt;/a&gt; plugin for GitHub Actions can allow you to use Xmake with minimal efforts if you use GitHub Actions for your CI pipeline.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;uses: xmake-io/github-action-setup-xmake@v1
with:
  xmake-version: latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Who is using Xmake?&lt;/h2&gt; 
&lt;p&gt;The list of people and projects who are using Xmake is available &lt;a href=&quot;https://xmake.io/about/who_is_using_xmake.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are using Xmake, you are welcome to submit your information to the above list through a PR, so that other users and the developers can gauge interest. This also lets users use xmake more confidently and gives us motivation to continue to maintain it.&lt;/p&gt; 
&lt;p&gt;This will help the Xmake project and it&#39;s community grow stronger and expand!&lt;/p&gt; 
&lt;h2&gt;Contacts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;EmailÔºö&lt;a href=&quot;mailto:waruqi@gmail.com&quot;&gt;waruqi@gmail.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HomepageÔºö&lt;a href=&quot;https://xmake.io&quot;&gt;xmake.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Community 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/xmake/&quot;&gt;Chat on Reddit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://t.me/tbooxorg&quot;&gt;Chat on Telegram&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://discord.gg/xmake&quot;&gt;Chat on Discord&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Chat on QQ Group: 343118190, 662147501&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Source CodeÔºö&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;WeChat Public: tboox-os&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;This project exists thanks to all the people who have &lt;a href=&quot;https://raw.githubusercontent.com/xmake-io/xmake/dev/CONTRIBUTING.md&quot;&gt;contributed&lt;/a&gt;: &lt;a href=&quot;https://github.com/xmake-io/xmake/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/xmake/contributors.svg?width=890&amp;amp;button=false&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TitanSnow&quot;&gt;TitanSnow&lt;/a&gt;: Provide the xmake &lt;a href=&quot;https://github.com/TitanSnow/ts-xmake-logo&quot;&gt;logo&lt;/a&gt; and install scripts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/uael&quot;&gt;uael&lt;/a&gt;: Provide the semantic versioning library &lt;a href=&quot;https://github.com/uael/sv&quot;&gt;sv&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;OpportunityLiu&lt;/a&gt;: Improve cuda, tests and ci&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xq114&quot;&gt;xq144&lt;/a&gt;: Improve &lt;code&gt;xrepo env shell&lt;/code&gt;, and contribute a lot of packages to the &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; repository.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/star-hengxing&quot;&gt;star-hengxing&lt;/a&gt;: Contribute a lot of packages to the &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; repository.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Arthapz&quot;&gt;Arthapz&lt;/a&gt;: Contribute new C++ Modules implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SirLynix&quot;&gt;SirLynix&lt;/a&gt;: Contributed many packages and let more people know about xmake.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;enderger&lt;/code&gt;: Helped smooth out the edges on the English translation of the README&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Powered by&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://jb.gg/OpenSource&quot;&gt;&lt;img src=&quot;https://resources.jetbrains.com/storage/products/company/brand/logos/jetbrains.svg?sanitize=true&quot; alt=&quot;JetBrains logo.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ibhagwan/fzf-lua</title>
      <link>https://github.com/ibhagwan/fzf-lua</link>
      <description>&lt;p&gt;Improved fzf.vim written in lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;fzf &lt;span&gt;‚ù§Ô∏è&lt;/span&gt; lua&lt;/h1&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/Neovim-0.9-57A143?style=flat-square&amp;amp;logo=neovim&quot; alt=&quot;Neovim version&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#quickstart&quot;&gt;Quickstart&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#installation&quot;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#usage&quot;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#commands&quot;&gt;Commands&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#customization&quot;&gt;Customization&lt;/a&gt; ‚Ä¢ &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/ibhagwan/fzf-lua/demo.gif&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt; 
 &lt;p&gt;‚Äúbecause you can and you love fzf‚Äù - &lt;a href=&quot;https://github.com/junegunn&quot;&gt;@junegunn&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&quot;fzf changed my command life, it can change yours too, if you allow it&quot; - &lt;a href=&quot;https://github.com/ibhagwan&quot;&gt;@ibhagwan&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To quickly test this plugin without changing your configuration run (will run in its own sandbox with the default keybinds below):&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] it&#39;s good practice to first &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/scripts/mini.sh&quot;&gt;read the script&lt;/a&gt; before running &lt;code&gt;sh -c&lt;/code&gt; directly from the web&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sh -c &quot;$(curl -s https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/scripts/mini.sh)&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Key&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-\&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;buffers&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-g&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;grep&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;live_grep&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;builtin commands&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;F1&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;neovim help&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/ibhagwan/fzf-lua&quot;&gt;&lt;img src=&quot;https://img.shields.io/luarocks/v/ibhagwan/fzf-lua?logo=lua&amp;amp;color=purple&quot; alt=&quot;LuaRocks&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://github.com/folke/lazy.nvim&quot;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;{
  &quot;ibhagwan/fzf-lua&quot;,
  -- optional for icon support
  dependencies = { &quot;nvim-tree/nvim-web-devicons&quot; },
  -- or if using mini.icons/mini.nvim
  -- dependencies = { &quot;nvim-mini/mini.icons&quot; },
  opts = {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Show dependencies&lt;/summary&gt; 
 &lt;h3&gt;Dependencies&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/neovim/neovim/releases&quot;&gt;&lt;code&gt;neovim&lt;/code&gt;&lt;/a&gt; version &amp;gt;= &lt;code&gt;0.9&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; version &amp;gt; &lt;code&gt;0.36&lt;/code&gt; or &lt;a href=&quot;https://github.com/skim-rs/skim&quot;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; binary installed&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-tree/nvim-web-devicons&quot;&gt;nvim-web-devicons&lt;/a&gt; or &lt;a href=&quot;https://github.com/nvim-mini/mini.icons&quot;&gt;mini.icons&lt;/a&gt; (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Optional dependencies&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt; - better &lt;code&gt;find&lt;/code&gt; utility&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt; - better &lt;code&gt;grep&lt;/code&gt; utility&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt; - syntax highlighted previews when using fzf&#39;s native previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/dandavison/delta&quot;&gt;delta&lt;/a&gt; - syntax highlighted git pager for git status previews&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt; - for Debug Adapter Protocol (DAP) support&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter-context&quot;&gt;nvim-treesitter-context&lt;/a&gt; - for viewing treesitter context within the previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/MeanderingProgrammer/render-markdown.nvim&quot;&gt;render-markdown.nvim&lt;/a&gt; or &lt;a href=&quot;https://github.com/OXY2DEV/markview.nvim&quot;&gt;markview.nvim&lt;/a&gt; - for rendering markdown files in the previewer&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Below are a few optional dependencies for viewing media files (which you need to configure in &lt;code&gt;previewer.builtin.extensions&lt;/code&gt;):&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/hpjansson/chafa&quot;&gt;chafa&lt;/a&gt; - terminal image previewer (recommended, supports most file formats)&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/atanunq/viu&quot;&gt;viu&lt;/a&gt; - terminal image previewer&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/jstkdng/ueberzugpp&quot;&gt;ueberzugpp&lt;/a&gt; - terminal image previewer using X11/Wayland child windows, sixels, kitty and iterm2&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!TIP] If your terminal supports the kitty graphics protocol (e.g. kitty, ghostty, etc) install @folke&#39;s &lt;a href=&quot;https://github.com/folke/snacks.nvim&quot;&gt;snacks.nvim&lt;/a&gt; to render images using the &lt;code&gt;snacks.image&lt;/code&gt; module, it will be auto-detected by fzf-lua and requires no configuration.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;Windows Notes&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt; is required for &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;git&lt;/a&gt; for Windows is required for &lt;code&gt;git&lt;/code&gt; (though installing &lt;code&gt;git-bash&lt;/code&gt;|&lt;code&gt;sh&lt;/code&gt; &lt;strong&gt;is not required&lt;/strong&gt;).&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Installation of dependencies (fzf, rg, fd, etc) is possible via &lt;a href=&quot;https://github.com/ScoopInstaller/Install&quot;&gt;scoop&lt;/a&gt;, &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;chocolatey&lt;/a&gt; or &lt;a href=&quot;https://github.com/microsoft/winget-cli&quot;&gt;winget-cli&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Although almost everything works on Windows exactly as the *NIX/OSX check out the &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/README-Win.md&quot;&gt;Windows README&lt;/a&gt; for known issues and limitations.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Fzf-lua aims to be as plug and play as possible with sane defaults, you can run any fzf-lua command like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require(&quot;fzf-lua&quot;).files()
-- once loaded we can use the global object
:lua FzfLua.files()
-- or the vim command:
:FzfLua files
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or with arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ cwd = &#39;~/.config&#39; })
-- or using the `FzfLua` vim command:
:FzfLua files cwd=~/.config
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Resume&lt;/h3&gt; 
&lt;p&gt;Resuming work from where you left off is as easy as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.resume()
-- or
:FzfLua resume
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, resuming work on a specific picker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ resume = true })
-- or
:FzfLua files resume=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Combining Pickers&lt;/h3&gt; 
&lt;p&gt;Fzf-Lua can combine any of the available pickers into a single display using the &lt;code&gt;combine&lt;/code&gt; method, for example file history (oldfiles) and git-files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.combine({ pickers = &quot;oldfiles;git_files&quot; })
-- or using the `FzfLua` vim command:
:FzfLua combine pickers=oldfiles;git_files
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The first picker options determine the options used by the combined picker, that includes formatters, previewer, path_shorten, etc. To avoid errors combine only pickers of the same entry types (i.e files)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Global Picker&lt;/h3&gt; 
&lt;p&gt;Fzf-Lua conveniently comes with a VS-Code like picker by default (customizable) combining files, buffers and LSP symbols:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Prefix&lt;/th&gt; 
   &lt;th&gt;Behavior&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;no prefix&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Buffers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;LSP Symbols (current buffer)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;LSP Symbols (workspace/project)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.global()
-- or using the `FzfLua` vim command:
:FzfLua global
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;LIST OF AVAILABLE COMMANDS BELOW&lt;/strong&gt; üëá&lt;/p&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Buffers and Files&lt;/summary&gt; 
 &lt;h3&gt;Buffers and Files&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;buffers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open buffers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; on a path&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oldfiles&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;opened files history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;quickfix_stack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;quickfix stack&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;loclist_stack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;location stack&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open buffers lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;blines&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;current buffer lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;treesitter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;current buffer treesitter symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tabs&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;open tabs&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;args&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;argument list&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Search&lt;/summary&gt; 
 &lt;h3&gt;Search&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search for a pattern with &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_last&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;run search again with the last pattern&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_cword&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search word under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_cWORD&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search WORD under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_visual&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search visual selection&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_project&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search all project lines (fzf.vim&#39;s &lt;code&gt;:Rg&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_curbuf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search current buffer lines&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search the quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;grep_loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search the location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_curbuf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep current buffer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_quickfix&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep the quickfix list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lgrep_loclist&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep the location list&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep current project&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_resume&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep continue last search&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_glob&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live_grep with &lt;code&gt;rg --glob&lt;/code&gt; support&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;live_grep_native&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;performant version of &lt;code&gt;live_grep&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tags&lt;/summary&gt; 
 &lt;h3&gt;Tags&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search project tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;btags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search buffer tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;grep project tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_cword&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; word under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_cWORD&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; WORD under cursor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep_visual&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;tags_grep&lt;/code&gt; visual selection&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tags_live_grep&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;live grep project tags&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Git&lt;/summary&gt; 
 &lt;h3&gt;Git&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_files&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git ls-files&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_status&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_diff&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git diff {ref}&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_hunks&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;git hunks {ref}&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_commits&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git commit log (project)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_bcommits&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git commit log (buffer)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_blame&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git blame (buffer)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_branches&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git branches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_worktrees&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git worktrees&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_tags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;git_stash&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;git stash&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;LSP / Diagnostics&lt;/summary&gt; 
 &lt;h3&gt;LSP/Diagnostics&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_references&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;References&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_definitions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Definitions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_declarations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Declarations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_typedefs&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Type Definitions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_implementations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Implementations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_document_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Document Symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_live_workspace_symbols&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Symbols (live query)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_incoming_calls&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Incoming Calls&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_outgoing_calls&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Outgoing Calls&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_code_actions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Code Actions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_finder&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;All LSP locations, combined view&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Document Diagnostics&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Workspace Diagnostics&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_document_diagnostics&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;alias to &lt;code&gt;diagnostics_document&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lsp_workspace_diagnostics&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;alias to &lt;code&gt;diagnostics_workspace&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Misc&lt;/summary&gt; 
 &lt;h3&gt;Misc&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;resume last command/query&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;builtin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua builtin commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;combine&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;combine different fzf-lua pickers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;global&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;global picker for files,buffers and symbols&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;profiles&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua configuration profiles&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;helptags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;help tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;manpages&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;man pages&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;colorschemes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;color schemes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;awesome_colorschemes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Awesome Neovim color schemes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;highlights&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;highlight groups&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;commands&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;neovim commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;command_history&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;command history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;search_history&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;search history&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;marks&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:marks&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;jumps&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:jumps&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;changes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:changes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;registers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:registers&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tagstack&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:tags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;autocmds&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:autocmd&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;nvim_options&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;neovim options&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;keymaps&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;key mappings&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;filetypes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;filetypes&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;menus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;menus&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;spellcheck&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;misspelled words in buffer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;spell_suggest&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;spelling suggestions&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;packadd&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;:packadd 
     &lt;package&gt;&lt;/package&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Neovim API&lt;/summary&gt; 
 &lt;h3&gt;Neovim API&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;code&gt;:help vim.ui.select&lt;/code&gt; for more info&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;register_ui_select&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;register fzf-lua as the UI interface for &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;deregister_ui_select&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;de-register fzf-lua with &lt;code&gt;vim.ui.select&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;nvim-dap&lt;/summary&gt; 
 &lt;h3&gt;nvim-dap&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Requires &lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;&lt;code&gt;nvim-dap&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_commands&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,run &lt;code&gt;nvim-dap&lt;/code&gt; builtin commands&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_configurations&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,run debug configurations&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_breakpoints&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list,delete breakpoints&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_variables&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;active session variables&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;dap_frames&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;active session jump to frame&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tmux&lt;/summary&gt; 
 &lt;h3&gt;tmux&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tmux_buffers&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list tmux paste buffers&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Zoxide&lt;/summary&gt; 
 &lt;h3&gt;zoxide&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;zoxide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;list recent directories&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Completion Functions&lt;/summary&gt; 
 &lt;h3&gt;Completion Functions&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Command&lt;/th&gt; 
    &lt;th&gt;List&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_path&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete path under cursor (incl dirs)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_file&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete file under cursor (excl dirs)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_line&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete line (all open buffers)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;complete_bline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;complete line (current buffer only)&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;Customization&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Refer to &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/OPTIONS.md&quot;&gt;OPTIONS&lt;/a&gt; to see detailed usage notes and a comprehensive list of yet more(!) available options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup {
  -- MISC GLOBAL SETUP OPTIONS, SEE BELOW
  -- fzf_bin = ...,
  -- each of these options can also be passed as function that return options table
  -- e.g. winopts = function() return { ... } end
  winopts = { ...  },     -- UI Options
  keymap = { ...  },      -- Neovim keymaps / fzf binds
  actions = { ...  },     -- Fzf &quot;accept&quot; binds
  fzf_opts = { ...  },    -- Fzf CLI flags
  fzf_colors = { ...  },  -- Fzf `--color` specification
  hls = { ...  },         -- Highlights
  previewers = { ...  },  -- Previewers options
  -- SPECIFIC COMMAND/PICKER OPTIONS, SEE BELOW
  -- files = { ... },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;DEFAULT OPTIONS OF THE DIFFERENT CONFIG SECTIONS BELOW&lt;/strong&gt; üëá&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;globals&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- Use skim (or a speccific fzf binary/version) instead of fzf?
  -- fzf_bin = &#39;sk&#39;,
  -- Padding can help kitty term users with double-width icon rendering
  file_icon_padding = &#39;&#39;,
  -- Uncomment if your terminal/font does not support unicode character
  -- &#39;EN SPACE&#39; (U+2002), the below sets it to &#39;NBSP&#39; (U+00A0) instead
  -- nbsp = &#39;\xc2\xa0&#39;,
  -- Function override for opening the help window (default bound to `&amp;lt;F1&amp;gt;`)
  -- Override this function if you want to customize window config of the
  -- help window (location, width, border, etc.)
  help_open_win = vim.api.nvim_open_win,
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;winopts&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;winopts = {
    -- split = &quot;belowright new&quot;,-- open in a split instead?
            -- &quot;belowright new&quot;  : split below
            -- &quot;aboveleft new&quot;   : split above
            -- &quot;belowright vnew&quot; : split right
            -- &quot;aboveleft vnew   : split left
    -- Only valid when using a float window
    -- (i.e. when &#39;split&#39; is not defined, default)
    height           = 0.85,            -- window height
    width            = 0.80,            -- window width
    row              = 0.35,            -- window row position (0=top, 1=bottom)
    col              = 0.50,            -- window col position (0=left, 1=right)
    -- border argument passthrough to nvim_open_win()
    border           = &quot;rounded&quot;,
    -- Backdrop opacity, 0 is fully opaque, 100 is fully transparent (i.e. disabled)
    backdrop         = 60,
    -- title         = &quot;Title&quot;,
    -- title_pos     = &quot;center&quot;,        -- &#39;left&#39;, &#39;center&#39; or &#39;right&#39;
    -- title_flags   = false,           -- uncomment to disable title flags
    fullscreen       = false,           -- start fullscreen?
    -- enable treesitter highlighting for the main fzf window will only have
    -- effect where grep like results are present, i.e. &quot;file:line:col:text&quot;
    -- due to highlight color collisions will also override `fzf_colors`
    -- set `fzf_colors=false` or `fzf_colors.hl=...` to override
    treesitter       = {
      enabled    = true,
      fzf_colors = { [&quot;hl&quot;] = &quot;-1:reverse&quot;, [&quot;hl+&quot;] = &quot;-1:reverse&quot; }
    },
    preview = {
      -- default     = &#39;bat&#39;,           -- override the default previewer?
                                        -- default uses the &#39;builtin&#39; previewer
      border         = &quot;rounded&quot;,       -- preview border: accepts both `nvim_open_win`
                                        -- and fzf values (e.g. &quot;border-top&quot;, &quot;none&quot;)
                                        -- native fzf previewers (bat/cat/git/etc)
                                        -- can also be set to `fun(winopts, metadata)`
      wrap           = false,           -- preview line wrap (fzf&#39;s &#39;wrap|nowrap&#39;)
      hidden         = false,           -- start preview hidden
      vertical       = &quot;down:45%&quot;,      -- up|down:size
      horizontal     = &quot;right:60%&quot;,     -- right|left:size
      layout         = &quot;flex&quot;,          -- horizontal|vertical|flex
      flip_columns   = 100,             -- #cols to switch to horizontal on flex
      -- Only used with the builtin previewer:
      title          = true,            -- preview border title (file/buf)?
      title_pos      = &quot;center&quot;,        -- left|center|right, title alignment
      scrollbar      = &quot;float&quot;,         -- `false` or string:&#39;float|border&#39;
                                        -- float:  in-window floating border
                                        -- border: in-border &quot;block&quot; marker
      scrolloff      = -1,              -- float scrollbar offset from right
                                        -- applies only when scrollbar = &#39;float&#39;
      delay          = 20,              -- delay(ms) displaying the preview
                                        -- prevents lag on fast scrolling
      winopts = {                       -- builtin previewer window options
        number            = true,
        relativenumber    = false,
        cursorline        = true,
        cursorlineopt     = &quot;both&quot;,
        cursorcolumn      = false,
        signcolumn        = &quot;no&quot;,
        list              = false,
        foldenable        = false,
        foldmethod        = &quot;manual&quot;,
      },
    },
    on_create = function()
      -- called once upon creation of the fzf main window
      -- can be used to add custom fzf-lua mappings, e.g:
      --   vim.keymap.set(&quot;t&quot;, &quot;&amp;lt;C-j&amp;gt;&quot;, &quot;&amp;lt;Down&amp;gt;&quot;, { silent = true, buffer = true })
    end,
    -- called once _after_ the fzf interface is closed
    -- on_close = function() ... end
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;keymap&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;keymap = {
    -- Below are the default binds, setting any value in these tables will override
    -- the defaults, to inherit from the defaults change [1] from `false` to `true`
    builtin = {
      -- neovim `:tmap` mappings for the fzf win
      -- true,        -- uncomment to inherit all the below in your custom config
      [&quot;&amp;lt;M-Esc&amp;gt;&quot;]     = &quot;hide&quot;,     -- hide fzf-lua, `:FzfLua resume` to continue
      [&quot;&amp;lt;F1&amp;gt;&quot;]        = &quot;toggle-help&quot;,
      [&quot;&amp;lt;F2&amp;gt;&quot;]        = &quot;toggle-fullscreen&quot;,
      -- Only valid with the &#39;builtin&#39; previewer
      [&quot;&amp;lt;F3&amp;gt;&quot;]        = &quot;toggle-preview-wrap&quot;,
      [&quot;&amp;lt;F4&amp;gt;&quot;]        = &quot;toggle-preview&quot;,
      -- Rotate preview clockwise/counter-clockwise
      [&quot;&amp;lt;F5&amp;gt;&quot;]        = &quot;toggle-preview-cw&quot;,
      -- Preview toggle behavior default/extend
      [&quot;&amp;lt;F6&amp;gt;&quot;]        = &quot;toggle-preview-behavior&quot;,
      -- `ts-ctx` binds require `nvim-treesitter-context`
      [&quot;&amp;lt;F7&amp;gt;&quot;]        = &quot;toggle-preview-ts-ctx&quot;,
      [&quot;&amp;lt;F8&amp;gt;&quot;]        = &quot;preview-ts-ctx-dec&quot;,
      [&quot;&amp;lt;F9&amp;gt;&quot;]        = &quot;preview-ts-ctx-inc&quot;,
      [&quot;&amp;lt;S-Left&amp;gt;&quot;]    = &quot;preview-reset&quot;,
      [&quot;&amp;lt;S-down&amp;gt;&quot;]    = &quot;preview-page-down&quot;,
      [&quot;&amp;lt;S-up&amp;gt;&quot;]      = &quot;preview-page-up&quot;,
      [&quot;&amp;lt;M-S-down&amp;gt;&quot;]  = &quot;preview-down&quot;,
      [&quot;&amp;lt;M-S-up&amp;gt;&quot;]    = &quot;preview-up&quot;,
    },
    fzf = {
      -- fzf &#39;--bind=&#39; options
      -- true,        -- uncomment to inherit all the below in your custom config
      [&quot;ctrl-z&quot;]      = &quot;abort&quot;,
      [&quot;ctrl-u&quot;]      = &quot;unix-line-discard&quot;,
      [&quot;ctrl-f&quot;]      = &quot;half-page-down&quot;,
      [&quot;ctrl-b&quot;]      = &quot;half-page-up&quot;,
      [&quot;ctrl-a&quot;]      = &quot;beginning-of-line&quot;,
      [&quot;ctrl-e&quot;]      = &quot;end-of-line&quot;,
      [&quot;alt-a&quot;]       = &quot;toggle-all&quot;,
      [&quot;alt-g&quot;]       = &quot;first&quot;,
      [&quot;alt-G&quot;]       = &quot;last&quot;,
      -- Only valid with fzf previewers (bat/cat/git/etc)
      [&quot;f3&quot;]          = &quot;toggle-preview-wrap&quot;,
      [&quot;f4&quot;]          = &quot;toggle-preview&quot;,
      [&quot;shift-down&quot;]  = &quot;preview-page-down&quot;,
      [&quot;shift-up&quot;]    = &quot;preview-page-up&quot;,
    },
},
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;actions&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;actions = {
    -- Below are the default actions, setting any value in these tables will override
    -- the defaults, to inherit from the defaults change [1] from `false` to `true`
    files = {
      -- true,        -- uncomment to inherit all the below in your custom config
      -- Pickers inheriting these actions:
      --   files, git_files, git_status, grep, lsp, oldfiles, quickfix, loclist,
      --   tags, btags, args, buffers, tabs, lines, blines
      -- `file_edit_or_qf` opens a single selection or sends multiple selection to quickfix
      -- replace `enter` with `file_edit` to open all files/bufs whether single or multiple
      -- replace `enter` with `file_switch_or_edit` to attempt a switch in current tab first
      [&quot;enter&quot;]       = FzfLua.actions.file_edit_or_qf,
      [&quot;ctrl-s&quot;]      = FzfLua.actions.file_split,
      [&quot;ctrl-v&quot;]      = FzfLua.actions.file_vsplit,
      [&quot;ctrl-t&quot;]      = FzfLua.actions.file_tabedit,
      [&quot;alt-q&quot;]       = FzfLua.actions.file_sel_to_qf,
      [&quot;alt-Q&quot;]       = FzfLua.actions.file_sel_to_ll,
      [&quot;alt-i&quot;]       = FzfLua.actions.toggle_ignore,
      [&quot;alt-h&quot;]       = FzfLua.actions.toggle_hidden,
      [&quot;alt-f&quot;]       = FzfLua.actions.toggle_follow,
    },
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;fzf_opts&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;fzf_opts = {
    -- options are sent as `&amp;lt;left&amp;gt;=&amp;lt;right&amp;gt;`
    -- set to `false` to remove a flag
    -- set to `true` for a no-value flag
    -- for raw args use `fzf_args` instead
    [&quot;--ansi&quot;]           = true,
    [&quot;--info&quot;]           = &quot;inline-right&quot;, -- fzf &amp;lt; v0.42 = &quot;inline&quot;
    [&quot;--height&quot;]         = &quot;100%&quot;,
    [&quot;--layout&quot;]         = &quot;reverse&quot;,
    [&quot;--border&quot;]         = &quot;none&quot;,
    [&quot;--highlight-line&quot;] = true,           -- fzf &amp;gt;= v0.53
  }

-- Only used when fzf_bin = &quot;fzf-tmux&quot;, by default opens as a
-- popup 80% width, 80% height (note `-p` requires tmux &amp;gt; 3.2)
-- and removes the sides margin added by `fzf-tmux` (fzf#3162)
-- for more options run `fzf-tmux --help`
-- NOTE: since fzf v0.53 / sk v0.15 it is recommended to use
-- native tmux integration by adding the below to `fzf_opts`
-- fzf_opts = { [&quot;--tmux&quot;] = &quot;center,80%,60%&quot; }
fzf_tmux_opts = { [&quot;-p&quot;] = &quot;80%,80%&quot;, [&quot;--margin&quot;] = &quot;0,0&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;fzf_colors&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] See the &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#fzf-colors&quot;&gt;Fzf Colors&lt;/a&gt; section for more info.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- 
  -- Set fzf&#39;s terminal colorscheme (optional)
  --
  -- Set to `true` to automatically generate an fzf&#39;s colorscheme from
  -- Neovim&#39;s current colorscheme:
  -- fzf_colors       = true,
  -- 
  -- Building a custom colorscheme, has the below specifications:
  -- If rhs is of type &quot;string&quot; rhs will be passed raw, e.g.:
  --   `[&quot;fg&quot;] = &quot;underline&quot;` will be translated to `--color fg:underline`
  -- If rhs is of type &quot;table&quot;, the following convention is used:
  --   [1] &quot;what&quot; field to extract from the hlgroup, i.e &quot;fg&quot;, &quot;bg&quot;, etc.
  --   [2] Neovim highlight group(s), can be either &quot;string&quot; or &quot;table&quot;
  --       when type is &quot;table&quot; the first existing highlight group is used
  --   [3+] any additional fields are passed raw to fzf&#39;s command line args
  -- Example of a &quot;fully loaded&quot; color option:
  --   `[&quot;fg&quot;] = { &quot;fg&quot;, { &quot;NonExistentHl&quot;, &quot;Comment&quot; }, &quot;underline&quot;, &quot;bold&quot; }`
  -- Assuming `Comment.fg=#010101` the resulting fzf command line will be:
  --   `--color fg:#010101:underline:bold`
  -- NOTE: to pass raw arguments `fzf_opts[&quot;--color&quot;]` or `fzf_args`
  -- NOTE: below is an example, not the defaults:
  fzf_colors = {
      true,   -- inherit fzf colors that aren&#39;t specified below from
              -- the auto-generated theme similar to `fzf_colors=true`
      [&quot;fg&quot;]          = { &quot;fg&quot;, &quot;CursorLine&quot; },
      [&quot;bg&quot;]          = { &quot;bg&quot;, &quot;Normal&quot; },
      [&quot;hl&quot;]          = { &quot;fg&quot;, &quot;Comment&quot; },
      [&quot;fg+&quot;]         = { &quot;fg&quot;, &quot;Normal&quot;, &quot;underline&quot; },
      [&quot;bg+&quot;]         = { &quot;bg&quot;, { &quot;CursorLine&quot;, &quot;Normal&quot; } },
      [&quot;hl+&quot;]         = { &quot;fg&quot;, &quot;Statement&quot; },
      [&quot;info&quot;]        = { &quot;fg&quot;, &quot;PreProc&quot; },
      [&quot;prompt&quot;]      = { &quot;fg&quot;, &quot;Conditional&quot; },
      [&quot;pointer&quot;]     = { &quot;fg&quot;, &quot;Exception&quot; },
      [&quot;marker&quot;]      = { &quot;fg&quot;, &quot;Keyword&quot; },
      [&quot;spinner&quot;]     = { &quot;fg&quot;, &quot;Label&quot; },
      [&quot;header&quot;]      = { &quot;fg&quot;, &quot;Comment&quot; },
      [&quot;gutter&quot;]      = &quot;-1&quot;,
  },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;hls&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] See the &lt;a href=&quot;https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/#highlights&quot;&gt;highlights&lt;/a&gt; section below for all available highlight groups.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;hls = {
    normal = &quot;Normal&quot;          -- highlight group for normal fg/bg
    preview_normal = &quot;Normal&quot;  -- highlight group for preview fg/bg
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;previewers&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;previewers = {
    cat = {
      cmd             = &quot;cat&quot;,
      args            = &quot;-n&quot;,
    },
    bat = {
      cmd             = &quot;bat&quot;,
      args            = &quot;--color=always --style=numbers,changes&quot;,
    },
    head = {
      cmd             = &quot;head&quot;,
      args            = nil,
    },
    git_diff = {
      -- if required, use `{file}` for argument positioning
      -- e.g. `cmd_modified = &quot;git diff --color HEAD {file} | cut -c -30&quot;`
      cmd_deleted     = &quot;git diff --color HEAD --&quot;,
      cmd_modified    = &quot;git diff --color HEAD&quot;,
      cmd_untracked   = &quot;git diff --color --no-index /dev/null&quot;,
      -- git-delta is automatically detected as pager, set `pager=false`
      -- to disable, can also be set under &#39;git.status.preview_pager&#39;
    },
    man = {
      -- NOTE: remove the `-c` flag when using man-db
      -- replace with `man -P cat %s | col -bx` on OSX
      cmd             = &quot;man -c %s | col -bx&quot;,
    },
    builtin = {
      syntax          = true,         -- preview syntax highlight?
      syntax_limit_l  = 0,            -- syntax limit (lines), 0=nolimit
      syntax_limit_b  = 1024*1024,    -- syntax limit (bytes), 0=nolimit
      limit_b         = 1024*1024*10, -- preview limit (bytes), 0=nolimit
      -- previewer treesitter options:
      -- enable specific filetypes with: `{ enabled = { &quot;lua&quot; } }
      -- exclude specific filetypes with: `{ disabled = { &quot;lua&quot; } }
      -- disable `nvim-treesitter-context` with `context = false`
      -- disable fully with: `treesitter = false` or `{ enabled = false }`
      treesitter      = {
        enabled = true,
        disabled = {},
        -- nvim-treesitter-context config options
        context = { max_lines = 1, trim_scope = &quot;inner&quot; }
      },
      -- By default, the main window dimensions are calculated as if the
      -- preview is visible, when hidden the main window will extend to
      -- full size. Set the below to &quot;extend&quot; to prevent the main window
      -- from being modified when toggling the preview.
      toggle_behavior = &quot;default&quot;,
      -- Title transform function, by default only displays the tail
      -- title_fnamemodify = function(s) return vim.fn.fnamemodify(s, &quot;:t&quot;) end,
      -- preview extensions using a custom shell command:
      -- for example, use `viu` for image previews
      -- will do nothing if `viu` isn&#39;t executable
      extensions      = {
        -- neovim terminal only supports `viu` block output
        [&quot;png&quot;]       = { &quot;viu&quot;, &quot;-b&quot; },
        -- by default the filename is added as last argument
        -- if required, use `{file}` for argument positioning
        [&quot;svg&quot;]       = { &quot;chafa&quot;, &quot;{file}&quot; },
        [&quot;jpg&quot;]       = { &quot;ueberzug&quot; },
      },
      -- if using `ueberzug` in the above extensions map
      -- set the default image scaler, possible scalers:
      --   false (none), &quot;crop&quot;, &quot;distort&quot;, &quot;fit_contain&quot;,
      --   &quot;contain&quot;, &quot;forced_cover&quot;, &quot;cover&quot;
      -- https://github.com/seebye/ueberzug
      ueberzug_scaler = &quot;cover&quot;,
      -- render_markdown.nvim integration, enabled by default for markdown
      render_markdown = { enabled = true, filetypes = { [&quot;markdown&quot;] = true } },
      -- snacks.images integration, enabled by default
      snacks_image = { enabled = true, render_inline = true },
    },
    -- Code Action previewers, default is &quot;codeaction&quot; (set via `lsp.code_actions.previewer`)
    -- &quot;codeaction_native&quot; uses fzf&#39;s native previewer, recommended when combined with git-delta
    codeaction = {
      -- options for vim.diff(): https://neovim.io/doc/user/lua.html#vim.diff()
      diff_opts = { ctxlen = 3 },
    },
    codeaction_native = {
      diff_opts = { ctxlen = 3 },
      -- git-delta is automatically detected as pager, set `pager=false`
      -- to disable, can also be set under &#39;lsp.code_actions.preview_pager&#39;
      -- recommended styling for delta
      --pager = [[delta --width=$COLUMNS --hunk-header-style=&quot;omit&quot; --file-style=&quot;omit&quot;]],
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;picker options&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;  -- use `defaults` (table or function) if you wish to set &quot;global-picker&quot; defaults
  -- for example, using &quot;mini.icons&quot; globally and open the quickfix list at the top
  --   defaults = {
  --     file_icons   = &quot;mini&quot;,
  --     copen        = &quot;topleft copen&quot;,
  --   },
  files = {
    -- previewer      = &quot;bat&quot;,          -- uncomment to override previewer
                                        -- (name from &#39;previewers&#39; table)
                                        -- set to &#39;false&#39; to disable
    prompt            = &#39;Files‚ùØ &#39;,
    multiprocess      = true,           -- run command in a separate process
    git_icons         = false,          -- show git icons?
    file_icons        = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,           -- colorize file|git icons
    -- path_shorten   = 1,              -- &#39;true&#39; or number, shorten path?
    -- Uncomment for custom vscode-like formatter where the filename is first:
    -- e.g. &quot;fzf-lua/previewer/fzf.lua&quot; =&amp;gt; &quot;fzf.lua previewer/fzf-lua&quot;
    -- formatter      = &quot;path.filename_first&quot;,
    -- executed command priority is &#39;cmd&#39; (if exists)
    -- otherwise auto-detect prioritizes `fd`:`rg`:`find`
    -- default options are controlled by &#39;fd|rg|find|_opts&#39;
    -- cmd            = &quot;rg --files&quot;,
    find_opts         = [[-type f \! -path &#39;*/.git/*&#39;]],
    rg_opts           = [[--color=never --hidden --files -g &quot;!.git&quot;]],
    fd_opts           = [[--color=never --hidden --type f --type l --exclude .git]],
    dir_opts          = [[/s/b/a:-d]],
    -- by default, cwd appears in the header only if {opts} contain a cwd
    -- parameter to a different folder than the current working directory
    -- uncomment if you wish to force display of the cwd as part of the
    -- query prompt string (fzf.vim style), header line or both
    -- cwd_header = true,
    cwd_prompt             = true,
    cwd_prompt_shorten_len = 32,        -- shorten prompt beyond this length
    cwd_prompt_shorten_val = 1,         -- shortened path parts length
    toggle_ignore_flag = &quot;--no-ignore&quot;, -- flag toggled in `actions.toggle_ignore`
    toggle_hidden_flag = &quot;--hidden&quot;,    -- flag toggled in `actions.toggle_hidden`
    toggle_follow_flag = &quot;-L&quot;,          -- flag toggled in `actions.toggle_follow`
    hidden             = true,          -- enable hidden files by default
    follow             = false,         -- do not follow symlinks by default
    no_ignore          = false,         -- respect &quot;.gitignore&quot;  by default
    actions = {
      -- inherits from &#39;actions.files&#39;, here we can override
      -- or set bind to &#39;false&#39; to disable a default action
      -- uncomment to override `actions.file_edit_or_qf`
      --   [&quot;enter&quot;]     = actions.file_edit,
      -- custom actions are available too
      --   [&quot;ctrl-y&quot;]    = function(selected) print(selected[1]) end,
    }
  },
  git = {
    files = {
      prompt        = &#39;GitFiles‚ùØ &#39;,
      cmd           = &#39;git ls-files --exclude-standard&#39;,
      multiprocess  = true,           -- run command in a separate process
      git_icons     = true,           -- show git icons?
      file_icons    = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
      color_icons   = true,           -- colorize file|git icons
      -- force display the cwd header line regardless of your current working
      -- directory can also be used to hide the header when not wanted
      -- cwd_header = true
    },
    status = {
      prompt        = &#39;GitStatus‚ùØ &#39;,
      cmd           = &quot;git -c color.status=false --no-optional-locks status --porcelain=v1 -u&quot;,
      multiprocess  = true,           -- run command in a separate process
      file_icons    = true,
      color_icons   = true,
      previewer     = &quot;git_diff&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        -- actions inherit from &#39;actions.files&#39; and merge
        [&quot;right&quot;]  = { fn = actions.git_unstage, reload = true },
        [&quot;left&quot;]   = { fn = actions.git_stage, reload = true },
        [&quot;ctrl-x&quot;] = { fn = actions.git_reset, reload = true },
      },
      -- If you wish to use a single stage|unstage toggle instead
      -- using &#39;ctrl-s&#39; modify the &#39;actions&#39; table as shown below
      -- actions = {
      --   [&quot;right&quot;]   = false,
      --   [&quot;left&quot;]    = false,
      --   [&quot;ctrl-x&quot;]  = { fn = actions.git_reset, reload = true },
      --   [&quot;ctrl-s&quot;]  = { fn = actions.git_stage_unstage, reload = true },
      -- },
    },
    diff = {
      cmd               = &quot;git --no-pager diff --name-only {ref}&quot;,
      ref               = &quot;HEAD&quot;,
      preview           = &quot;git diff {ref} {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      file_icons        = true,
      color_icons       = true,
      fzf_opts          = { [&quot;--multi&quot;] = true },
    },
    hunks = {
      cmd               = &quot;git --no-pager diff --color=always {ref}&quot;,
      ref               = &quot;HEAD&quot;,
      file_icons        = true,
      color_icons       = true,
      fzf_opts          = {
      [&quot;--multi&quot;] = true,
      [&quot;--delimiter&quot;] = &quot;:&quot;,
      [&quot;--nth&quot;] = &quot;3..&quot;,
      },
    },
    commits = {
      prompt        = &#39;Commits‚ùØ &#39;,
      cmd           = [[git log --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot;]],
      preview       = &quot;git show --color {1}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]   = actions.git_checkout,
        -- remove `exec_silent` or set to `false` to exit after yank
        [&quot;ctrl-y&quot;]  = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    bcommits = {
      prompt        = &#39;BCommits‚ùØ &#39;,
      -- default preview shows a git diff vs the previous commit
      -- if you prefer to see the entire commit you can use:
      --   git show --color {1} --rotate-to={file}
      --   {1}    : commit SHA (fzf field index expression)
      --   {file} : filepath placement within the commands
      cmd           = [[git log --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot; {file}]],
      preview       = &quot;git show --color {1} -- {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]   = actions.git_buf_edit,
        [&quot;ctrl-s&quot;]  = actions.git_buf_split,
        [&quot;ctrl-v&quot;]  = actions.git_buf_vsplit,
        [&quot;ctrl-t&quot;]  = actions.git_buf_tabedit,
        [&quot;ctrl-y&quot;]  = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    blame = {
      prompt        = &quot;Blame&amp;gt; &quot;,
      cmd           = [[git blame --color-lines {file}]],
      preview       = &quot;git show --color {1} -- {file}&quot;,
      -- git-delta is automatically detected as pager, uncomment to disable
      -- preview_pager = false,
      actions = {
        [&quot;enter&quot;]  = actions.git_goto_line,
        [&quot;ctrl-s&quot;] = actions.git_buf_split,
        [&quot;ctrl-v&quot;] = actions.git_buf_vsplit,
        [&quot;ctrl-t&quot;] = actions.git_buf_tabedit,
        [&quot;ctrl-y&quot;] = { fn = actions.git_yank_commit, exec_silent = true },
      },
    },
    branches = {
      prompt   = &#39;Branches‚ùØ &#39;,
      cmd      = &quot;git branch --all --color&quot;,
      preview  = &quot;git log --graph --pretty=oneline --abbrev-commit --color {1}&quot;,
      remotes  = &quot;local&quot;, -- &quot;detach|local&quot;, switch behavior for remotes
      actions  = {
        [&quot;enter&quot;]   = actions.git_switch,
        [&quot;ctrl-x&quot;]  = { fn = actions.git_branch_del, reload = true },
        [&quot;ctrl-a&quot;]  = { fn = actions.git_branch_add, field_index = &quot;{q}&quot;, reload = true },
      },
      -- If you wish to add branch and switch immediately
      -- cmd_add  = { &quot;git&quot;, &quot;checkout&quot;, &quot;-b&quot; },
      cmd_add  = { &quot;git&quot;, &quot;branch&quot; },
      -- If you wish to delete unmerged branches add &quot;--force&quot;
      -- cmd_del  = { &quot;git&quot;, &quot;branch&quot;, &quot;--delete&quot;, &quot;--force&quot; },
      cmd_del  = { &quot;git&quot;, &quot;branch&quot;, &quot;--delete&quot; },
    },
    tags = {
      prompt   = &quot;Tags&amp;gt; &quot;,
      cmd      = [[git for-each-ref --color --sort=&quot;-taggerdate&quot; --format ]]
          .. [[&quot;%(color:yellow)%(refname:short)%(color:reset) ]]
          .. [[%(color:green)(%(taggerdate:relative))%(color:reset)]]
          .. [[ %(subject) %(color:blue)%(taggername)%(color:reset)&quot; refs/tags]],
      preview  = [[git log --graph --color --pretty=format:&quot;%C(yellow)%h%Creset ]]
          .. [[%Cgreen(%&amp;gt;&amp;lt;(12)%cr%&amp;gt;&amp;lt;|(12))%Creset %s %C(blue)&amp;lt;%an&amp;gt;%Creset&quot; {1}]],
      actions  = { [&quot;enter&quot;] = actions.git_checkout },
    },
    stash = {
      prompt          = &#39;Stash&amp;gt; &#39;,
      cmd             = &quot;git --no-pager stash list&quot;,
      preview         = &quot;git --no-pager stash show --patch --color {1}&quot;,
      actions = {
        [&quot;enter&quot;]     = actions.git_stash_apply,
        [&quot;ctrl-x&quot;]    = { fn = actions.git_stash_drop, reload = true },
      },
    },
    icons = {
      [&quot;M&quot;]           = { icon = &quot;M&quot;, color = &quot;yellow&quot; },
      [&quot;D&quot;]           = { icon = &quot;D&quot;, color = &quot;red&quot; },
      [&quot;A&quot;]           = { icon = &quot;A&quot;, color = &quot;green&quot; },
      [&quot;R&quot;]           = { icon = &quot;R&quot;, color = &quot;yellow&quot; },
      [&quot;C&quot;]           = { icon = &quot;C&quot;, color = &quot;yellow&quot; },
      [&quot;T&quot;]           = { icon = &quot;T&quot;, color = &quot;magenta&quot; },
      [&quot;?&quot;]           = { icon = &quot;?&quot;, color = &quot;magenta&quot; },
      -- override git icons?
      -- [&quot;M&quot;]        = { icon = &quot;‚òÖ&quot;, color = &quot;red&quot; },
      -- [&quot;D&quot;]        = { icon = &quot;‚úó&quot;, color = &quot;red&quot; },
      -- [&quot;A&quot;]        = { icon = &quot;+&quot;, color = &quot;green&quot; },
    },
  },
  grep = {
    prompt            = &#39;Rg‚ùØ &#39;,
    input_prompt      = &#39;Grep For‚ùØ &#39;,
    multiprocess      = true,           -- run command in a separate process
    git_icons         = false,          -- show git icons?
    file_icons        = true,           -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,           -- colorize file|git icons
    -- executed command priority is &#39;cmd&#39; (if exists)
    -- otherwise auto-detect prioritizes `rg` over `grep`
    -- default options are controlled by &#39;rg|grep_opts&#39;
    -- cmd            = &quot;rg --vimgrep&quot;,
    grep_opts         = &quot;--binary-files=without-match --line-number --recursive --color=auto --perl-regexp -e&quot;,
    rg_opts           = &quot;--column --line-number --no-heading --color=always --smart-case --max-columns=4096 -e&quot;,
    hidden             = false,       -- disable hidden files by default
    follow             = false,       -- do not follow symlinks by default
    no_ignore          = false,       -- respect &quot;.gitignore&quot;  by default
    -- Uncomment to use the rg config file `$RIPGREP_CONFIG_PATH`
    -- RIPGREP_CONFIG_PATH = vim.env.RIPGREP_CONFIG_PATH
    --
    -- Set to &#39;true&#39; to always parse globs in both &#39;grep&#39; and &#39;live_grep&#39;
    -- search strings will be split using the &#39;glob_separator&#39; and translated
    -- to &#39;--iglob=&#39; arguments, requires &#39;rg&#39;
    -- can still be used when &#39;false&#39; by calling &#39;live_grep_glob&#39; directly
    rg_glob           = true,         -- default to glob parsing with `rg`
    glob_flag         = &quot;--iglob&quot;,    -- for case sensitive globs use &#39;--glob&#39;
    glob_separator    = &quot;%s%-%-&quot;,     -- query separator pattern (lua): &#39; --&#39;
    -- advanced usage: for custom argument parsing define
    -- &#39;rg_glob_fn&#39; to return a pair:
    --   first returned argument is the new search query
    --   second returned argument are additional rg flags
    -- rg_glob_fn = function(query, opts)
    --   ...
    --   return new_query, flags
    -- end,
    --
    -- Enable with narrow term width, split results to multiple lines
    -- NOTE: multiline requires fzf &amp;gt;= v0.53 and is ignored otherwise
    -- multiline      = 1,      -- Display as: PATH:LINE:COL\nTEXT
    -- multiline      = 2,      -- Display as: PATH:LINE:COL\nTEXT\n
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;
      [&quot;ctrl-g&quot;]      = { actions.grep_lgrep }
      -- uncomment to enable &#39;.gitignore&#39; toggle for grep
      -- [&quot;ctrl-r&quot;]   = { actions.toggle_ignore }
    },
    no_header             = false,    -- hide grep|cwd header?
    no_header_i           = false,    -- hide interactive header?
  },
  args = {
    prompt            = &#39;Args‚ùØ &#39;,
    files_only        = true,
    -- actions inherit from &#39;actions.files&#39; and merge
    actions           = { [&quot;ctrl-x&quot;] = { fn = actions.arg_del, reload = true } },
  },
  oldfiles = {
    prompt            = &#39;History‚ùØ &#39;,
    cwd_only          = false,
    stat_file         = true,         -- verify files exist on disk
    -- can also be a lua function, for example:
    -- stat_file = FzfLua.utils.file_is_readable,
    -- stat_file = function() return true end,
    include_current_session = false,  -- include bufs from current session
  },
  buffers = {
    prompt            = &#39;Buffers‚ùØ &#39;,
    file_icons        = true,         -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,         -- colorize file|git icons
    sort_lastused     = true,         -- sort buffers() by last used
    show_unloaded     = true,         -- show unloaded buffers
    cwd_only          = false,        -- buffers for the cwd only
    cwd               = nil,          -- buffers list for a given dir
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- by supplying a table of functions we&#39;re telling
      -- fzf-lua to not close the fzf window, this way we
      -- can resume the buffers picker on the same window
      -- eliminating an otherwise unaesthetic win &quot;flash&quot;
      [&quot;ctrl-x&quot;]      = { fn = actions.buf_del, reload = true },
    }
  },
  tabs = {
    prompt            = &#39;Tabs‚ùØ &#39;,
    tab_title         = &quot;Tab&quot;,
    tab_marker        = &quot;&amp;lt;&amp;lt;&quot;,
    locate            = true,         -- position cursor at current window
    file_icons        = true,         -- show file icons (true|&quot;devicons&quot;|&quot;mini&quot;)?
    color_icons       = true,         -- colorize file|git icons
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      [&quot;enter&quot;]       = actions.buf_switch,
      [&quot;ctrl-x&quot;]      = { fn = actions.buf_del, reload = true },
    },
    fzf_opts = {
      -- hide tabnr
      [&quot;--delimiter&quot;] = &quot;[\\):]&quot;,
      [&quot;--with-nth&quot;]  = &#39;2..&#39;,
    },
  },
  -- `blines` has the same defaults as `lines` aside from prompt and `show_bufname`
  lines = {
    prompt            = &#39;Lines‚ùØ &#39;,
    file_icons        = true,
    show_bufname      = true,         -- display buffer name
    show_unloaded     = true,         -- show unloaded buffers
    show_unlisted     = false,        -- exclude &#39;help&#39; buffers
    no_term_buffers   = true,         -- exclude &#39;term&#39; buffers
    sort_lastused     = true,         -- sort by most recent
    winopts  = { treesitter = true }, -- enable TS highlights
    fzf_opts = {
      -- do not include bufnr in fuzzy matching
      -- tiebreak by line no.
      [&quot;--multi&quot;]     = true,
      [&quot;--delimiter&quot;] = &quot;[\t]&quot;,
      [&quot;--tabstop&quot;]   = &quot;1&quot;,
      [&quot;--tiebreak&quot;]  = &quot;index&quot;,
      [&quot;--with-nth&quot;]  = &quot;2..&quot;,
      [&quot;--nth&quot;]       = &quot;4..&quot;,
    },
  },
  tags = {
    prompt                = &#39;Tags‚ùØ &#39;,
    ctags_file            = nil,      -- auto-detect from tags-option
    multiprocess          = true,
    file_icons            = true,
    color_icons           = true,
    -- &#39;tags_live_grep&#39; options, `rg` prioritizes over `grep`
    rg_opts               = &quot;--no-heading --color=always --smart-case&quot;,
    grep_opts             = &quot;--color=auto --perl-regexp&quot;,
    fzf_opts              = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    actions = {
      -- actions inherit from &#39;actions.files&#39; and merge
      -- this action toggles between &#39;grep&#39; and &#39;live_grep&#39;
      [&quot;ctrl-g&quot;]          = { actions.grep_lgrep }
    },
    no_header             = false,    -- hide grep|cwd header?
    no_header_i           = false,    -- hide interactive header?
  },
  btags = {
    prompt                = &#39;BTags‚ùØ &#39;,
    ctags_file            = nil,      -- auto-detect from tags-option
    ctags_autogen         = true,     -- dynamically generate ctags each call
    multiprocess          = true,
    file_icons            = false,
    rg_opts               = &quot;--color=never --no-heading&quot;,
    grep_opts             = &quot;--color=never --perl-regexp&quot;,
    fzf_opts              = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    -- actions inherit from &#39;actions.files&#39;
  },
  colorschemes = {
    prompt            = &#39;Colorschemes‚ùØ &#39;,
    live_preview      = true,       -- apply the colorscheme on preview?
    actions           = { [&quot;enter&quot;] = actions.colorscheme },
    winopts           = { height = 0.55, width = 0.30, },
    -- uncomment to ignore colorschemes names (lua patterns)
    -- ignore_patterns   = { &quot;^delek$&quot;, &quot;^blue$&quot; },
  },
  awesome_colorschemes = {
    prompt            = &#39;Colorschemes‚ùØ &#39;,
    live_preview      = true,       -- apply the colorscheme on preview?
    max_threads       = 5,          -- max download/update threads
    winopts           = { row = 0, col = 0.99, width = 0.50 },
    fzf_opts          = {
      [&quot;--multi&quot;]     = true,
      [&quot;--delimiter&quot;] = &quot;[:]&quot;,
      [&quot;--with-nth&quot;]  = &quot;3..&quot;,
      [&quot;--tiebreak&quot;]  = &quot;index&quot;,
    },
    actions           = {
      [&quot;enter&quot;]   = actions.colorscheme,
      [&quot;ctrl-g&quot;]  = { fn = actions.toggle_bg, exec_silent = true },
      [&quot;ctrl-r&quot;]  = { fn = actions.cs_update, reload = true },
      [&quot;ctrl-x&quot;]  = { fn = actions.cs_delete, reload = true },
    },
  },
  keymaps = {
    prompt            = &quot;Keymaps&amp;gt; &quot;,
    winopts           = { preview = { layout = &quot;vertical&quot; } },
    fzf_opts          = { [&quot;--tiebreak&quot;] = &quot;index&quot;, },
    -- by default, we ignore &amp;lt;Plug&amp;gt; and &amp;lt;SNR&amp;gt; mappings
    -- set `ignore_patterns = false` to disable filtering
    ignore_patterns   = { &quot;^&amp;lt;SNR&amp;gt;&quot;, &quot;^&amp;lt;Plug&amp;gt;&quot; },
    show_desc         = true,
    show_details      = true,
    actions           = {
      [&quot;enter&quot;]       = actions.keymap_apply,
      [&quot;ctrl-s&quot;]      = actions.keymap_split,
      [&quot;ctrl-v&quot;]      = actions.keymap_vsplit,
      [&quot;ctrl-t&quot;]      = actions.keymap_tabedit,
    },
  },
  nvim_options = {
    prompt            = &quot;Nvim Options&amp;gt; &quot;,
    separator         = &quot;‚îÇ&quot;,  -- separator between option name and value
    color_values      = true, -- colorize boolean values
    actions           = {
      [&quot;enter&quot;]     = { fn = actions.nvim_opt_edit_local, reload = true },
      [&quot;alt-enter&quot;] = { fn = actions.nvim_opt_edit_global, reload = true },
    },
  },
  quickfix = {
    file_icons        = true,
    valid_only        = false, -- select among only the valid quickfix entries
  },
  quickfix_stack = {
    prompt = &quot;Quickfix Stack&amp;gt; &quot;,
    marker = &quot;&amp;gt;&quot;,                   -- current list marker
  },
  lsp = {
    prompt_postfix    = &#39;‚ùØ &#39;,       -- will be appended to the LSP label
                                    -- to override use &#39;prompt&#39; instead
    cwd_only          = false,      -- LSP/diagnostics for cwd only?
    async_or_timeout  = 5000,       -- timeout(ms) or &#39;true&#39; for async calls
    file_icons        = true,
    git_icons         = false,
    jump1             = true,       -- skip the UI when result is a single entry
    jump1_action      = FzfLua.actions.file_edit
    -- The equivalent of using `includeDeclaration` in lsp buf calls, e.g:
    -- :lua vim.lsp.buf.references({includeDeclaration = false})
    includeDeclaration = true,      -- include current declaration in LSP context
    -- settings for &#39;lsp_{document|workspace|lsp_live_workspace}_symbols&#39;
    symbols = {
        -- lsp_query      = &quot;foo&quot;       -- query passed to the LSP directly
        -- query          = &quot;bar&quot;       -- query passed to fzf prompt for fuzzy matching
        locate            = false,      -- attempt to position cursor at current symbol
        async_or_timeout  = true,       -- symbols are async by default
        symbol_style      = 1,          -- style for document/workspace symbols
                                        -- false: disable,    1: icon+kind
                                        --     2: icon only,  3: kind only
                                        -- NOTE: icons are extracted from
                                        -- vim.lsp.protocol.CompletionItemKind
        -- icons for symbol kind
        -- see https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind
        -- see https://github.com/neovim/neovim/blob/829d92eca3d72a701adc6e6aa17ccd9fe2082479/runtime/lua/vim/lsp/protocol.lua#L117
        symbol_icons     = {
          File          = &quot;Û∞àô&quot;,
          Module        = &quot;Ôíá&quot;,
          Namespace     = &quot;Û∞¶Æ&quot;,
          Package       = &quot;Ôíá&quot;,
          Class         = &quot;Û∞Üß&quot;,
          Method        = &quot;Û∞äï&quot;,
          Property      = &quot;ÔÄ´&quot;,
          Field         = &quot;ÔÄ´&quot;,
          Constructor   = &quot;Ôê£&quot;,
          Enum          = &quot;ÔÖù&quot;,
          Interface     = &quot;ÔÉ®&quot;,
          Function      = &quot;Û∞äï&quot;,
          Variable      = &quot;Û∞Ä´&quot;,
          Constant      = &quot;Û∞èø&quot;,
          String        = &quot;Ó™±&quot;,
          Number        = &quot;Û∞é†&quot;,
          Boolean       = &quot;Û∞®ô&quot;,
          Array         = &quot;Û±°†&quot;,
          Object        = &quot;Ó™ã&quot;,
          Key           = &quot;Û∞åã&quot;,
          Null          = &quot;Û∞ü¢&quot;,
          EnumMember    = &quot;ÔÖù&quot;,
          Struct        = &quot;Û∞Üº&quot;,
          Event         = &quot;ÔÉß&quot;,
          Operator      = &quot;Û∞Üï&quot;,
          TypeParameter = &quot;Û∞ó¥&quot;,
        },
        -- colorize using Treesitter &#39;@&#39; highlight groups (&quot;@function&quot;, etc).
        -- or &#39;false&#39; to disable highlighting
        symbol_hl         = function(s) return &quot;@&quot; .. s:lower() end,
        -- additional symbol formatting, works with or without style
        symbol_fmt        = function(s, opts) return &quot;[&quot; .. s .. &quot;]&quot; end,
        -- prefix child symbols. set to any string or `false` to disable
        child_prefix      = true,
        fzf_opts          = { [&quot;--tiebreak&quot;] = &quot;begin&quot; },
    },
    code_actions = {
        prompt            = &#39;Code Actions&amp;gt; &#39;,
        async_or_timeout  = 5000,
        -- when git-delta is installed use &quot;codeaction_native&quot; for beautiful diffs
        -- try it out with `:FzfLua lsp_code_actions previewer=codeaction_native`
        -- scroll up to `previewers.codeaction{_native}` for more previewer options
        previewer        = &quot;codeaction&quot;,
    },
    finder = {
        prompt      = &quot;LSP Finder&amp;gt; &quot;,
        file_icons  = true,
        color_icons = true,
        async       = true,         -- async by default
        silent      = true,         -- suppress &quot;not found&quot;
        separator   = &quot;| &quot;,         -- separator after provider prefix, `false` to disable
        includeDeclaration = true,  -- include current declaration in LSP context
        -- by default display all LSP locations
        -- to customize, duplicate table and delete unwanted providers
        providers   = {
            { &quot;references&quot;,      prefix = FzfLua.utils.ansi_codes.blue(&quot;ref &quot;) },
            { &quot;definitions&quot;,     prefix = FzfLua.utils.ansi_codes.green(&quot;def &quot;) },
            { &quot;declarations&quot;,    prefix = FzfLua.utils.ansi_codes.magenta(&quot;decl&quot;) },
            { &quot;typedefs&quot;,        prefix = FzfLua.utils.ansi_codes.red(&quot;tdef&quot;) },
            { &quot;implementations&quot;, prefix = FzfLua.utils.ansi_codes.green(&quot;impl&quot;) },
            { &quot;incoming_calls&quot;,  prefix = FzfLua.utils.ansi_codes.cyan(&quot;in  &quot;) },
            { &quot;outgoing_calls&quot;,  prefix = FzfLua.utils.ansi_codes.yellow(&quot;out &quot;) },
        },
    }
  },
  diagnostics ={
    prompt            = &#39;Diagnostics‚ùØ &#39;,
    cwd_only          = false,
    file_icons        = false,
    git_icons         = false,
    color_headings    = true,   -- use diag highlights to color source &amp;amp; filepath
    diag_icons        = true,   -- display icons from diag sign definitions
    diag_source       = true,   -- display diag source (e.g. [pycodestyle])
    diag_code         = true,   -- display diag code (e.g. [undefined])
    icon_padding      = &#39;&#39;,     -- add padding for wide diagnostics signs
    multiline         = 2,      -- split heading and diag to separate lines
    -- severity_only:   keep any matching exact severity
    -- severity_limit:  keep any equal or more severe (lower)
    -- severity_bound:  keep any equal or less severe (higher)
  },
  marks = {
    marks = &quot;&quot;, -- filter vim marks with a lua pattern
    -- for example if you want to only show user defined marks
    -- you would set this option as %a this would match characters from [A-Za-z]
    -- or if you want to show only numbers you would set the pattern to %d (0-9).
  },
  complete_path = {
    cmd          = nil, -- default: auto detect fd|rg|find
    complete     = { [&quot;enter&quot;] = actions.complete },
    word_pattern = nil, -- default: &quot;[^%s\&quot;&#39;]*&quot;
  },
  complete_file = {
    cmd          = nil, -- default: auto detect rg|fd|find
    file_icons   = true,
    color_icons  = true,
    word_pattern = nil,
    -- actions inherit from &#39;actions.files&#39; and merge
    actions      = { [&quot;enter&quot;] = actions.complete },
    -- previewer hidden by default
    winopts      = { preview = { hidden = true } },
  },
  zoxide = {
    cmd          = &quot;zoxide query --list --score&quot;,
    scope        = &quot;global&quot;, -- cd action scope &quot;local|win|tab&quot;
    git_root     = false,    -- auto-detect git root
    formatter    = &quot;path.dirname_first&quot;,
    fzf_opts     = {
      [&quot;--no-multi&quot;]  = true,
      [&quot;--delimiter&quot;] = &quot;[\t]&quot;,
      [&quot;--tabstop&quot;]   = &quot;4&quot;,
      [&quot;--tiebreak&quot;]  = &quot;end,index&quot;, -- prefer dirs ending with search term
      [&quot;--nth&quot;]       = &quot;2..&quot;,       -- exclude score from fuzzy matching
    },
    actions      = { enter = actions.cd }
  },
  -- uncomment to use fzf native previewers
  -- (instead of using a neovim floating window)
  -- manpages = { previewer = &quot;man_native&quot; },
  -- helptags = { previewer = &quot;help_native&quot; },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] To experiment with different options without modifying the global config, options can be sent as inline parameters to the function calls. Expand below to see examples of inline customization and Refer to &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/raw/main/OPTIONS.md&quot;&gt;OPTIONS&lt;/a&gt; for yet more examples.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR EXAMPLES OF INLINE CUSTOMIZATION&lt;/summary&gt; 
 &lt;h4&gt;Inline Customization&lt;/h4&gt; 
 &lt;p&gt;Different &lt;code&gt;fzf&lt;/code&gt; layout:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ fzf_opts = {[&#39;--layout&#39;] = &#39;reverse-list&#39;} })
-- Or via the vimL command
:FzfLua files fzf_opts.--layout=reverse-list
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using &lt;code&gt;files&lt;/code&gt; with a different command and working directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ prompt=&quot;LS&amp;gt; &quot;, cmd = &quot;ls&quot;, cwd=&quot;~/.config&quot; })
-- Or via the vimL command
:FzfLua files prompt=&quot;LS&amp;gt;\ &quot; cmd=ls cwd=~/.config
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using &lt;code&gt;live_grep&lt;/code&gt; with &lt;code&gt;git grep&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.live_grep({ cmd = &quot;git grep --line-number --column --color=always&quot; })
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;code&gt;spell_suggest&lt;/code&gt; with non-default window size relative to cursor:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.spell_suggest({ winopts = { height=0.33, width=0.33, relative=&quot;cursor&quot; } })
-- Or via the vimL command
:FzfLua spell_suggest winopts={height=0.33,width=0.33,relative=cursor}
:FzfLua spell_suggest winopts={height=0.33,width=0.33} winopts.relative=cursor
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Profiles&lt;/h3&gt; 
&lt;p&gt;Conveniently, fzf-lua comes with a set of preconfigured profiles if you do not want to tinker with customization.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;:FzfLua profiles&lt;/code&gt; to experiment with the different profiles, once you&#39;ve found what you like and wish to make the profile persist, send a &lt;code&gt;string&lt;/code&gt; argument at the first index of the table sent to the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;code&gt;setup&lt;/code&gt; can be called multiple times for profile &quot;live&quot; switching, see &lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/tree/main/lua/fzf-lua/profiles&quot;&gt;profiles&lt;/a&gt; page for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-native&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also start with a profile as &quot;baseline&quot; and customize it, for example, telescope defaults with &lt;code&gt;bat&lt;/code&gt; previewer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&quot;fzf-lua&quot;.setup({&quot;telescope&quot;,winopts={preview={default=&quot;bat&quot;}}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Combining of profiles is also available by sending table instead of string as the first argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua require&quot;fzf-lua&quot;.setup({{&quot;telescope&quot;,&quot;fzf-native&quot;},winopts={fullscreen=true}})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] The default profile is a combination of border-fused+hide profiles, without the &quot;hide&quot; profile pressing esc terminates the fzf process which makes for an imperfect resume limited to resuming only the picker/query (without cursor position, selection, etc), to restore the default esc behavior combine any existing profile with &quot;hide&quot; by using a table in &lt;code&gt;opts[1]&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup({
  { &quot;fzf-native&quot;, &quot;hide&quot; },
  -- your other settings here
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Coming from fzf.vim?&lt;/h4&gt; 
&lt;p&gt;Easy! just use the &lt;code&gt;fzf-vim&lt;/code&gt; profile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup({&#39;fzf-vim&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Using the &lt;code&gt;fzf-vim&lt;/code&gt; profile will automatically create &lt;code&gt;fzf.vim&lt;/code&gt;&#39;s user commands (i.e. &lt;code&gt;:Files&lt;/code&gt;, &lt;code&gt;:Rg&lt;/code&gt;), if you wish to use a different profile you can create the same user commands by running &lt;code&gt;:FzfLua setup_fzfvim_cmds&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK TO SEE THE AVAILABLE PROFILES&lt;/summary&gt; 
 &lt;h4&gt;Available Profiles&lt;/h4&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Profile&lt;/th&gt; 
    &lt;th&gt;Details&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, uses neovim &quot;builtin&quot; buffer previewer and devicons (if available)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default-title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, using title for picker info (default on neovim &amp;gt;= 0.9)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;default-prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf-lua defaults, using prompt for picker info (default on neovim &amp;lt; 0.9)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-native&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;utilizes fzf&#39;s native previewing ability in the terminal where possible using &lt;code&gt;bat&lt;/code&gt; for previews&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-tmux&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and opens in a tmux popup (requires tmux &amp;gt; 3.2)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;fzf-vim&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;closest to &lt;code&gt;fzf.vim&lt;/code&gt;&#39;s defaults (+icons), also sets up user commands (&lt;code&gt;:Files&lt;/code&gt;, &lt;code&gt;:Rg&lt;/code&gt;, etc)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;max-perf&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;similar to &lt;code&gt;fzf-native&lt;/code&gt; and disables icons globally for max performance&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;closest match to telescope defaults in look and feel and keybinds&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;uses &lt;a href=&quot;https://github.com/skim-rs/skim&quot;&gt;&lt;code&gt;skim&lt;/code&gt;&lt;/a&gt; as an fzf alternative, (requires the &lt;code&gt;sk&lt;/code&gt; binary)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;borderless&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;borderless and minimalistic seamless look &amp;amp; feel&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;borderless-full&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;borderless with description in window title (instead of prompt)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;border-fused&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;single border around both fzf and the previewer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;ivy&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;UI at bottom, similar to telescope&#39;s ivy layout&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;hide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;send fzf process to background instead of termination&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h3&gt;Extensibility&lt;/h3&gt; 
&lt;p&gt;Fzf-lua can be easily extended and customised for your own needs: have a look at a full list of examples and plugins browsing the üí°&lt;a href=&quot;https://github.com/ibhagwan/fzf-lua/wiki/Advanced&quot;&gt;Wiki&lt;/a&gt; üí°&lt;/p&gt; 
&lt;p&gt;Have ideas for new pickers, plugins or extensions? Add it to the wiki, it&#39;s open edit!&lt;/p&gt; 
&lt;h3&gt;Insert-mode completion&lt;/h3&gt; 
&lt;p&gt;Fzf-lua comes with a set of completion functions for paths/files and lines from open buffers as well as custom completion, for example, set path/completion using &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;n&quot;, &quot;v&quot;, &quot;i&quot; }, &quot;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&quot;,
  function() FzfLua.complete_path() end,
  { silent = true, desc = &quot;Fuzzy complete path&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with a custom command and preview:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] only &lt;code&gt;complete_file&lt;/code&gt; supports a previewer as &lt;code&gt;complete_path&lt;/code&gt; mixes both files and directories.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;vim.keymap.set({ &quot;i&quot; }, &quot;&amp;lt;C-x&amp;gt;&amp;lt;C-f&amp;gt;&quot;,
  function()
    FzfLua.complete_file({
      cmd = &quot;rg --files&quot;,
      winopts = { preview = { hidden = true } }
    })
  end, { silent = true, desc = &quot;Fuzzy complete file&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR CUSTOM COMPLETION DETAILS&lt;/summary&gt; 
 &lt;h4&gt;Custom Completion&lt;/h4&gt; 
 &lt;p&gt;Every fzf-lua function can be easily converted to a completion function by sending &lt;code&gt;complete = true&lt;/code&gt; in the options:&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;By default fzf-lua will insert the entry at the cursor location as if you used &lt;code&gt;p&lt;/code&gt; to paste the selected entry.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;FzfLua.fzf_exec({&quot;foo&quot;, &quot;bar&quot;}, {complete = true})
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Custom completion is possible using a custom completion callback, the example below will replace the text from the current cursor column with the selected entry:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;FzfLua.fzf_exec({&quot;foo&quot;, &quot;bar&quot;}, {
  -- @param selected: the selected entry or entries
  -- @param opts: fzf-lua caller/provider options
  -- @param line: originating buffer completed line
  -- @param col: originating cursor column location
  -- @return newline: will replace the current buffer line
  -- @return newcol?: optional, sets the new cursor column
  complete = function(selected, opts, line, col)
    local newline = line:sub(1, col) .. selected[1]
    -- set cursor to EOL, since `nvim_win_set_cursor`
    -- is 0-based we have to lower the col value by 1
    return newline, #newline - 1
  end
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Highlights&lt;/h3&gt; 
&lt;p&gt;Highlight groups can be easily customized either via the lua API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua vim.api.nvim_set_hl(0, &quot;FzfLuaBorder&quot;, { link = &quot;FloatBorder&quot; })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or via &lt;code&gt;setup&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup {
  hls = { border = &quot;FloatBorder&quot; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or temporarily in the call:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua FzfLua.files({ hls={preview_title=&quot;IncSearch&quot;} })
-- vimL equivalent
:FzfLua files hls.preview_title=IncSearch
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK TO SEE AVAILABLE HIGHLIGHT GROUPS&lt;/summary&gt; 
 &lt;h4&gt;Highlight groups&lt;/h4&gt; 
 &lt;p&gt;FzfLua conveniently creates the below highlights, each hlgroup can be temporarily overridden by its corresponding &lt;code&gt;winopts&lt;/code&gt; option:&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Highlight Group&lt;/th&gt; 
    &lt;th&gt;Default&lt;/th&gt; 
    &lt;th&gt;Override Via&lt;/th&gt; 
    &lt;th&gt;Notes&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;Normal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;Normal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win title&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTitleFlags&lt;/td&gt; 
    &lt;td&gt;CursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.title_flags&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Main win title flags&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBackdrop&lt;/td&gt; 
    &lt;td&gt;*bg=Black&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.backdrop&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Backdrop color&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPreviewTitle&lt;/td&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.preview_title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview title&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursor&lt;/td&gt; 
    &lt;td&gt;Cursor&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursor&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;Cursor&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; 
    &lt;td&gt;CursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursorline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;Cursorline&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaCursorLineNr&lt;/td&gt; 
    &lt;td&gt;CursorLineNr&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.cursorlinenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;CursorLineNr&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaSearch&lt;/td&gt; 
    &lt;td&gt;IncSearch&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.search&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview search matches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollBorderEmpty&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollborder_e&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll empty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollBorderFull&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollborder_f&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;border&lt;/code&gt; scroll full&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollFloatEmpty&lt;/td&gt; 
    &lt;td&gt;PmenuSbar&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollfloat_e&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll empty&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaScrollFloatFull&lt;/td&gt; 
    &lt;td&gt;PmenuThumb&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.scrollfloat_f&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Builtin preview &lt;code&gt;float&lt;/code&gt; scroll full&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHelpNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.help_normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Help win &lt;code&gt;fg/bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHelpBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.help_border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Help win border&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHeaderBind&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.header_bind&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Header keybind&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaHeaderText&lt;/td&gt; 
    &lt;td&gt;*Brown1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.header_text&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Header text&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPathColNr&lt;/td&gt; 
    &lt;td&gt;*CadetBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.path_colnr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path col nr (&lt;code&gt;qf,lsp,diag&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaPathLineNr&lt;/td&gt; 
    &lt;td&gt;*LightGreen&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.path_linenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path line nr (&lt;code&gt;qf,lsp,diag&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufName&lt;/td&gt; 
    &lt;td&gt;Directory&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_name&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer name (&lt;code&gt;lines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufId&lt;/td&gt; 
    &lt;td&gt;TabLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_id&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer ID (&lt;code&gt;lines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufNr&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_nr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer number (&lt;code&gt;buffers,tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufLineNr&lt;/td&gt; 
    &lt;td&gt;LineNr&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_linenr&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line nr (&lt;code&gt;lines,blines&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufFlagCur&lt;/td&gt; 
    &lt;td&gt;*Brown1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_flag_cur&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line (&lt;code&gt;buffers&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaBufFlagAlt&lt;/td&gt; 
    &lt;td&gt;*CadetBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.buf_flag_alt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Buffer line (&lt;code&gt;buffers&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTabTitle&lt;/td&gt; 
    &lt;td&gt;*LightSkyBlue1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.tab_title&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Tab title (&lt;code&gt;tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaTabMarker&lt;/td&gt; 
    &lt;td&gt;*BlanchedAlmond&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.tab_marker&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Tab marker (&lt;code&gt;tabs&lt;/code&gt;)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaDirIcon&lt;/td&gt; 
    &lt;td&gt;Directory&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.dir_icon&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Paths directory icon&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaDirPart&lt;/td&gt; 
    &lt;td&gt;Comment&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.dir_part&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path formatters directory hl group&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFilePart&lt;/td&gt; 
    &lt;td&gt;@none&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.file_part&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Path formatters file hl group&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaLivePrompt&lt;/td&gt; 
    &lt;td&gt;*PaleVioletRed1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.live_prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&quot;live&quot; queries prompt text&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaLiveSym&lt;/td&gt; 
    &lt;td&gt;*PaleVioletRed1&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;hls.live_sym&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;LSP live symbols query match&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfNormal&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.normal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;fg|bg&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfCursorLine&lt;/td&gt; 
    &lt;td&gt;FzfLuaCursorLine&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.cursorline&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;fg+|bg+&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfMatch&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.match&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;hl+&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;FzfLuaBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.border&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;border&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfScrollbar&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.scrollbar&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;scrollbar&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfSeparator&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfBorder&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.separator&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;separator&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfGutter&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.gutter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;gutter&lt;/code&gt; (hl &lt;code&gt;bg&lt;/code&gt; is used)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfHeader&lt;/td&gt; 
    &lt;td&gt;FzfLuaTitle&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.header&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;header&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfInfo&lt;/td&gt; 
    &lt;td&gt;NonText&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.info&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;info&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.pointer&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfMarker&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.marker&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;marker&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfSpinner&lt;/td&gt; 
    &lt;td&gt;FzfLuaFzfPointer&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.spinner&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;spinner&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfPrompt&lt;/td&gt; 
    &lt;td&gt;Special&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.prompt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;prompt&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;FzfLuaFzfQuery&lt;/td&gt; 
    &lt;td&gt;FzfLuaNormal&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;fzf.query&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;fzf&#39;s &lt;code&gt;header&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;sup&gt;&lt;sub&gt;*Not a highlight group, RGB color from &lt;code&gt;nvim_get_color_map&lt;/code&gt;&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;CLICK FOR FZF COLORS DETAILS&lt;/summary&gt; 
 &lt;h4&gt;Fzf Colors&lt;/h4&gt; 
 &lt;p&gt;Fzf&#39;s terminal colors are controlled by fzf&#39;s &lt;code&gt;--color&lt;/code&gt; flag which can be configured during setup via &lt;code&gt;fzf_colors&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to have fzf-lua automatically generate an fzf colorscheme from your current Neovim colorscheme:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&quot;fzf-lua&quot;).setup({ fzf_colors = true })
-- Or in the direct call options
:lua FzfLua.files({ fzf_colors = true })
:FzfLua files fzf_colors=true
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Customizing the fzf colorscheme (see &lt;code&gt;man fzf&lt;/code&gt; for all color options):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&#39;fzf-lua&#39;).setup {
  fzf_colors = {
    -- First existing highlight group will be used
    -- values in 3rd+ index will be passed raw
    -- i.e:  `--color fg+:#010101:bold:underline`
    [&quot;fg+&quot;] = { &quot;fg&quot; , { &quot;Comment&quot;, &quot;Normal&quot; }, &quot;bold&quot;, &quot;underline&quot; },
    -- It is also possible to pass raw values directly
    [&quot;gutter&quot;] = &quot;-1&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Conveniently, fzf-lua can also be configured using fzf.vim&#39;s &lt;code&gt;g:fzf_colors&lt;/code&gt;, i.e:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;-- Similarly, first existing highlight group will be used
:lua vim.g.fzf_colors = { [&quot;gutter&quot;] = { &quot;bg&quot;, &quot;DoesNotExist&quot;, &quot;IncSearch&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;However, the above doesn&#39;t allow combining both neovim highlights and raw args, if you&#39;re only using fzf-lua we can hijack &lt;code&gt;g:fzf_colors&lt;/code&gt; to accept fzf-lua style values (i.e. table at 2nd index and 3rd+ raw args):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;:lua vim.g.fzf_colors = { [&quot;fg+&quot;] = { &quot;fg&quot;, { &quot;ErrorMsg&quot; }, &quot;bold&quot;, &quot;underline&quot; } }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Big thank you to all those I borrowed code/ideas from, I read so many configs and plugin codes that I probably forgot where I found some samples from so if I missed your name feel free to contact me and I&#39;ll add it below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/&quot;&gt;@junegunn&lt;/a&gt; for creating the magical &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt; and &lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot;&gt;fzf.vim&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vijaymarupudi/&quot;&gt;@vijaymarupudi&lt;/a&gt; for the wonderful &lt;a href=&quot;https://github.com/vijaymarupudi/nvim-fzf&quot;&gt;nvim-fzf&lt;/a&gt; plugin which started this endeavour&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tjdevries/&quot;&gt;@tjdevries&lt;/a&gt; for too many great things to list here and borrowing code from &lt;a href=&quot;https://github.com/nvim-telescope/telescope.nvim&quot;&gt;nvim-telescope&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lukas-reineke&quot;&gt;@lukas-reineke&lt;/a&gt; for inspiration after browsing &lt;a href=&quot;https://github.com/lukas-reineke/dotfiles&quot;&gt;dotfiles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindrets&quot;&gt;@sindrets&lt;/a&gt; for borrowing utilities from &lt;a href=&quot;https://github.com/sindrets/diffview.nvim&quot;&gt;diffview.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kevinhwang91&quot;&gt;@kevinhwang91&lt;/a&gt; for inspiring the builtin previewer code while using &lt;a href=&quot;https://github.com/kevinhwang91/nvim-bqf&quot;&gt;nvim-bqf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
