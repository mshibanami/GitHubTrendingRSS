<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub C Daily Trending</title>
    <description>Daily Trending of C in GitHub</description>
    <pubDate>Sat, 27 Sep 2025 01:30:41 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>redcanaryco/atomic-red-team</title>
      <link>https://github.com/redcanaryco/atomic-red-team</link>
      <description>&lt;p&gt;Small and highly portable detection tests based on MITRE&#39;s ATT&amp;CK.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://redcanary.com/wp-content/uploads/Atomic-Red-Team-Logo.png&quot; width=&quot;150px&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Atomic Red Team&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/redcanaryco/atomic-red-team/actions/workflows/validate-atomics.yml/badge.svg?branch=master&quot; alt=&quot;GitHub Action Status&quot; /&gt; &lt;img src=&quot;https://img.shields.io/badge/Atomics-1739-flat.svg?sanitize=true&quot; alt=&quot;Atomics&quot; /&gt; &lt;img src=&quot;https://github.com/redcanaryco/atomic-red-team/actions/workflows/generate-docs.yml/badge.svg?branch=master&quot; alt=&quot;GitHub Action Status&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Atomic Red Team™ is a library of tests mapped to the &lt;a href=&quot;https://attack.mitre.org/&quot;&gt;MITRE ATT&amp;amp;CK®&lt;/a&gt; framework. Security teams can use Atomic Red Team to quickly, portably, and reproducibly test their environments.&lt;/p&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;p&gt;You can execute atomic tests directly from the command line, no installation required. See the &lt;a href=&quot;https://github.com/redcanaryco/atomic-red-team/wiki/Getting-Started&quot;&gt;Getting started&lt;/a&gt; page of our wiki.&lt;/p&gt; 
&lt;p&gt;For a more robust testing experience, consider using an execution framework like &lt;a href=&quot;https://github.com/redcanaryco/invoke-atomicredteam&quot;&gt;Invoke-Atomic&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Learn more&lt;/h2&gt; 
&lt;p&gt;The Atomic Red Team documentation is available as a &lt;a href=&quot;https://github.com/redcanaryco/atomic-red-team/wiki/&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For information about the philosophy and development of Atomic Red Team, visit our website at &lt;a href=&quot;https://atomicredteam.io&quot;&gt;https://atomicredteam.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To stay up to date on all things Atomic Red Team, sign up for the Atomic Newsletter: &lt;a href=&quot;https://redcanary.com/atomic-newsletter/&quot;&gt;https://redcanary.com/atomic-newsletter/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contribute to Atomic Red Team&lt;/h2&gt; 
&lt;p&gt;Atomic Red Team is open source and community developed. If you&#39;re interested in becoming a contributor, check out these resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join our &lt;a href=&quot;https://slack.atomicredteam.io&quot;&gt;Slack workspace&lt;/a&gt; and get involved with the community. Don&#39;t forget to review the &lt;a href=&quot;https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/CODE_OF_CONDUCT.md&quot;&gt;code of conduct&lt;/a&gt; before you join.&lt;/li&gt; 
 &lt;li&gt;Report bugs and request new features by &lt;a href=&quot;https://github.com/redcanaryco/atomic-red-team/issues/new/choose&quot;&gt;submitting an issue&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read our &lt;a href=&quot;https://github.com/redcanaryco/atomic-red-team/wiki/Contributing&quot;&gt;contribution guide&lt;/a&gt; for more information about contributing directly to this repository.&lt;/li&gt; 
 &lt;li&gt;Check the &lt;a href=&quot;https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt&quot;&gt;license&lt;/a&gt; for information regarding the distribution and modification of Atomic Red Team.&lt;/li&gt; 
 &lt;li&gt;Contribute to linux atomics quickly from GitHub Codespaces. For more details, click &lt;a href=&quot;https://github.com/redcanaryco/atomic-red-team/wiki/Github-Codespaces&quot;&gt;here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://codespaces.new/redcanaryco/atomic-red-team&quot;&gt;&lt;img src=&quot;https://github.com/codespaces/badge.svg?sanitize=true&quot; alt=&quot;Open in GitHub Codespaces&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nginx/nginx</title>
      <link>https://github.com/nginx/nginx</link>
      <description>&lt;p&gt;The official NGINX Open Source repository.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/user-attachments/assets/9335b488-ffcc-4157-8364-2370a0b70ad0&quot; /&gt; 
 &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/user-attachments/assets/3a7eeb08-1133-47f5-859c-fad4f5a6a013&quot; /&gt; 
 &lt;img alt=&quot;NGINX Banner&quot; /&gt; 
&lt;/picture&gt; 
&lt;p&gt;NGINX (pronounced &quot;engine x&quot; or &quot;en-jin-eks&quot;) is the world&#39;s most popular Web Server, high performance Load Balancer, Reverse Proxy, API Gateway and Content Cache.&lt;/p&gt; 
&lt;p&gt;NGINX is free and open source software, distributed under the terms of a simplified &lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/LICENSE&quot;&gt;2-clause BSD-like license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Enterprise distributions, commercial support and training are available from &lt;a href=&quot;https://www.f5.com/products/nginx&quot;&gt;F5, Inc&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The goal of this README is to provide a basic, structured introduction to NGINX for novice users. Please refer to the &lt;a href=&quot;https://nginx.org/en/docs/&quot;&gt;full NGINX documentation&lt;/a&gt; for detailed information on &lt;a href=&quot;https://nginx.org/en/docs/install.html&quot;&gt;installing&lt;/a&gt;, &lt;a href=&quot;https://nginx.org/en/docs/configure.html&quot;&gt;building&lt;/a&gt;, &lt;a href=&quot;https://nginx.org/en/docs/dirindex.html&quot;&gt;configuring&lt;/a&gt;, &lt;a href=&quot;https://nginx.org/en/docs/debugging_log.html&quot;&gt;debugging&lt;/a&gt;, and more. These documentation pages also contain a more detailed &lt;a href=&quot;https://nginx.org/en/docs/beginners_guide.html&quot;&gt;Beginners Guide&lt;/a&gt;, How-Tos, &lt;a href=&quot;https://nginx.org/en/docs/dev/development_guide.html&quot;&gt;Development guide&lt;/a&gt;, and a complete module and &lt;a href=&quot;https://nginx.org/en/docs/dirindex.html&quot;&gt;directive reference&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Table of contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#how-it-works&quot;&gt;How it works&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#modules&quot;&gt;Modules&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#configurations&quot;&gt;Configurations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#runtime&quot;&gt;Runtime&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#downloading-and-installing&quot;&gt;Downloading and installing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#stable-and-mainline-binaries&quot;&gt;Stable and Mainline binaries&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#linux-binary-installation-process&quot;&gt;Linux binary installation process&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#freebsd-installation-process&quot;&gt;FreeBSD installation process&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#windows-executables&quot;&gt;Windows executables&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#dynamic-modules&quot;&gt;Dynamic modules&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#getting-started-with-nginx&quot;&gt;Getting started with NGINX&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#installing-ssl-certificates-and-enabling-tls-encryption&quot;&gt;Installing SSL certificates and enabling TLS encryption&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#load-balancing&quot;&gt;Load Balancing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#rate-limiting&quot;&gt;Rate limiting&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#content-caching&quot;&gt;Content caching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#building-from-source&quot;&gt;Building from source&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#installing-dependencies&quot;&gt;Installing dependencies&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#cloning-the-nginx-github-repository&quot;&gt;Cloning the NGINX GitHub repository&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#configuring-the-build&quot;&gt;Configuring the build&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#compiling&quot;&gt;Compiling&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#location-of-binary-and-installation&quot;&gt;Location of binary and installation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#running-and-testing-the-installed-binary&quot;&gt;Running and testing the installed binary&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#asking-questions-and-reporting-issues&quot;&gt;Asking questions and reporting issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#contributing-code&quot;&gt;Contributing code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#additional-help-and-resources&quot;&gt;Additional help and resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#changelog&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;How it works&lt;/h1&gt; 
&lt;p&gt;NGINX is installed software with binary packages available for all major operating systems and Linux distributions. See &lt;a href=&quot;https://nginx.org/en/#tested_os_and_platforms&quot;&gt;Tested OS and Platforms&lt;/a&gt; for a full list of compatible systems.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] While nearly all popular Linux-based operating systems are distributed with a community version of nginx, we highly advise installation and usage of official &lt;a href=&quot;https://nginx.org/en/linux_packages.html&quot;&gt;packages&lt;/a&gt; or sources from this repository. Doing so ensures that you&#39;re using the most recent release or source code, including the latest feature-set, fixes and security patches.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Modules&lt;/h2&gt; 
&lt;p&gt;NGINX is comprised of individual modules, each extending core functionality by providing additional, configurable features. See &quot;Modules reference&quot; at the bottom of &lt;a href=&quot;https://nginx.org/en/docs/&quot;&gt;nginx documentation&lt;/a&gt; for a complete list of official modules.&lt;/p&gt; 
&lt;p&gt;NGINX modules can be built and distributed as static or dynamic modules. Static modules are defined at build-time, compiled, and distributed in the resulting binaries. See &lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#dynamic-modules&quot;&gt;Dynamic Modules&lt;/a&gt; for more information on how they work, as well as, how to obtain, install, and configure them.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You can issue the following command to see which static modules your NGINX binaries were built with:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nginx -V
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#configuring-the-build&quot;&gt;Configuring the build&lt;/a&gt; for information on how to include specific Static modules into your nginx build.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Configurations&lt;/h2&gt; 
&lt;p&gt;NGINX is highly flexible and configurable. Provisioning the software is achieved via text-based config file(s) accepting parameters called &quot;&lt;a href=&quot;https://nginx.org/en/docs/dirindex.html&quot;&gt;Directives&lt;/a&gt;&quot;. See &lt;a href=&quot;https://nginx.org/en/docs/beginners_guide.html#conf_structure&quot;&gt;Configuration File&#39;s Structure&lt;/a&gt; for a comprehensive description of how NGINX configuration files work.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] The set of directives available to your distribution of NGINX is dependent on which &lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#modules&quot;&gt;modules&lt;/a&gt; have been made available to it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Runtime&lt;/h2&gt; 
&lt;p&gt;Rather than running in a single, monolithic process, NGINX is architected to scale beyond Operating System process limitations by operating as a collection of processes. They include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &quot;master&quot; process that maintains worker processes, as well as, reads and evaluates configuration files.&lt;/li&gt; 
 &lt;li&gt;One or more &quot;worker&quot; processes that process data (eg. HTTP requests).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The number of &lt;a href=&quot;https://nginx.org/en/docs/ngx_core_module.html#worker_processes&quot;&gt;worker processes&lt;/a&gt; is defined in the configuration file and may be fixed for a given configuration or automatically adjusted to the number of available CPU cores. In most cases, the latter option optimally balances load across available system resources, as NGINX is designed to efficiently distribute work across all worker processes.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Processes synchronize data through shared memory. For this reason, many NGINX directives require the allocation of shared memory zones. As an example, when configuring &lt;a href=&quot;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req&quot;&gt;rate limiting&lt;/a&gt;, connecting clients may need to be tracked in a &lt;a href=&quot;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone&quot;&gt;common memory zone&lt;/a&gt; so all worker processes can know how many times a particular client has accessed the server in a span of time.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Downloading and installing&lt;/h1&gt; 
&lt;p&gt;Follow these steps to download and install precompiled NGINX binaries. You may also choose to &lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/#building-from-source&quot;&gt;build NGINX locally from source code&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Stable and Mainline binaries&lt;/h2&gt; 
&lt;p&gt;NGINX binaries are built and distributed in two versions: stable and mainline. Stable binaries are built from stable branches and only contain critical fixes backported from the mainline version. Mainline binaries are built from the &lt;a href=&quot;https://github.com/nginx/nginx/tree/master&quot;&gt;master branch&lt;/a&gt; and contain the latest features and bugfixes. You&#39;ll need to &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#choosing-between-a-stable-or-a-mainline-version&quot;&gt;decide which is appropriate for your purposes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Linux binary installation process&lt;/h2&gt; 
&lt;p&gt;The NGINX binary installation process takes advantage of package managers native to specific Linux distributions. For this reason, first-time installations involve adding the official NGINX package repository to your system&#39;s package manager. Follow &lt;a href=&quot;https://nginx.org/en/linux_packages.html&quot;&gt;these steps&lt;/a&gt; to download, verify, and install NGINX binaries using the package manager appropriate for your Linux distribution.&lt;/p&gt; 
&lt;h3&gt;Upgrades&lt;/h3&gt; 
&lt;p&gt;Future upgrades to the latest version can be managed using the same package manager without the need to manually download and verify binaries.&lt;/p&gt; 
&lt;h2&gt;FreeBSD installation process&lt;/h2&gt; 
&lt;p&gt;For more information on installing NGINX on FreeBSD system, visit &lt;a href=&quot;https://nginx.org/en/docs/install.html&quot;&gt;https://nginx.org/en/docs/install.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Windows executables&lt;/h2&gt; 
&lt;p&gt;Windows executables for mainline and stable releases can be found on the main &lt;a href=&quot;https://nginx.org/en/download.html&quot;&gt;NGINX download page&lt;/a&gt;. Note that the current implementation of NGINX for Windows is at the Proof-of-Concept stage and should only be used for development and testing purposes. For additional information, please see &lt;a href=&quot;https://nginx.org/en/docs/windows.html&quot;&gt;nginx for Windows&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Dynamic modules&lt;/h2&gt; 
&lt;p&gt;NGINX version 1.9.11 added support for &lt;a href=&quot;https://nginx.org/en/docs/ngx_core_module.html#load_module&quot;&gt;Dynamic Modules&lt;/a&gt;. Unlike Static modules, dynamically built modules can be downloaded, installed, and configured after the core NGINX binaries have been built. &lt;a href=&quot;https://nginx.org/en/linux_packages.html#dynmodules&quot;&gt;Official dynamic module binaries&lt;/a&gt; are available from the same package repository as the core NGINX binaries described in previous steps.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;a href=&quot;https://github.com/nginx/njs&quot;&gt;NGINX JavaScript (njs)&lt;/a&gt;, is a popular NGINX dynamic module that enables the extension of core NGINX functionality using familiar JavaScript syntax.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] If desired, dynamic modules can also be built statically into NGINX at compile time.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Getting started with NGINX&lt;/h1&gt; 
&lt;p&gt;For a gentle introduction to NGINX basics, please see our &lt;a href=&quot;https://nginx.org/en/docs/beginners_guide.html&quot;&gt;Beginner’s Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing SSL certificates and enabling TLS encryption&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://nginx.org/en/docs/http/configuring_https_servers.html&quot;&gt;Configuring HTTPS servers&lt;/a&gt; for a quick guide on how to enable secure traffic to your NGINX installation.&lt;/p&gt; 
&lt;h2&gt;Load Balancing&lt;/h2&gt; 
&lt;p&gt;For a quick start guide on configuring NGINX as a Load Balancer, please see &lt;a href=&quot;https://nginx.org/en/docs/http/load_balancing.html&quot;&gt;Using nginx as HTTP load balancer&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Rate limiting&lt;/h2&gt; 
&lt;p&gt;See our &lt;a href=&quot;https://blog.nginx.org/blog/rate-limiting-nginx&quot;&gt;Rate Limiting with NGINX&lt;/a&gt; blog post for an overview of core concepts for provisioning NGINX as an API Gateway.&lt;/p&gt; 
&lt;h2&gt;Content caching&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://blog.nginx.org/blog/nginx-caching-guide&quot;&gt;A Guide to Caching with NGINX and NGINX Plus&lt;/a&gt; blog post for an overview of how to use NGINX as a content cache (e.g. edge server of a content delivery network).&lt;/p&gt; 
&lt;h1&gt;Building from source&lt;/h1&gt; 
&lt;p&gt;The following steps can be used to build NGINX from source code available in this repository.&lt;/p&gt; 
&lt;h2&gt;Installing dependencies&lt;/h2&gt; 
&lt;p&gt;Most Linux distributions will require several dependencies to be installed in order to build NGINX. The following instructions are specific to the &lt;code&gt;apt&lt;/code&gt; package manager, widely available on most Ubuntu/Debian distributions and their derivatives.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] It is always a good idea to update your package repository lists prior to installing new packages.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt update
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Installing compiler and make utility&lt;/h3&gt; 
&lt;p&gt;Use the following command to install the GNU C compiler and Make utility.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt install gcc make
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installing dependency libraries&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt install libpcre3-dev zlib1g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] This is the minimal set of dependency libraries needed to build NGINX with rewriting and gzip capabilities. Other dependencies may be required if you choose to build NGINX with additional modules. Monitor the output of the &lt;code&gt;configure&lt;/code&gt; command discussed in the following sections for information on which modules may be missing. For example, if you plan to use SSL certificates to encrypt traffic with TLS, you&#39;ll need to install the OpenSSL library. To do so, issue the following command.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt install libssl-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Cloning the NGINX GitHub repository&lt;/h2&gt; 
&lt;p&gt;Using your preferred method, clone the NGINX repository into your development directory. See &lt;a href=&quot;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&quot;&gt;Cloning a GitHub Repository&lt;/a&gt; for additional help.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/nginx/nginx.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuring the build&lt;/h2&gt; 
&lt;p&gt;Prior to building NGINX, you must run the &lt;code&gt;configure&lt;/code&gt; script with &lt;a href=&quot;https://nginx.org/en/docs/configure.html&quot;&gt;appropriate flags&lt;/a&gt;. This will generate a Makefile in your NGINX source root directory that can then be used to compile NGINX with &lt;a href=&quot;https://nginx.org/en/docs/configure.html&quot;&gt;options specified during configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;From the NGINX source code repository&#39;s root directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;auto/configure
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Configuring the build without any flags will compile NGINX with the default set of options. Please refer to &lt;a href=&quot;https://nginx.org/en/docs/configure.html&quot;&gt;https://nginx.org/en/docs/configure.html&lt;/a&gt; for a full list of available build configuration options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;configure&lt;/code&gt; script will generate a &lt;code&gt;Makefile&lt;/code&gt; in the NGINX source root directory upon successful execution. To compile NGINX into a binary, issue the following command from that same directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Location of binary and installation&lt;/h2&gt; 
&lt;p&gt;After successful compilation, a binary will be generated at &lt;code&gt;&amp;lt;NGINX_SRC_ROOT_DIR&amp;gt;/objs/nginx&lt;/code&gt;. To install this binary, issue the following command from the source root directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The binary will be installed into the &lt;code&gt;/usr/local/nginx/&lt;/code&gt; directory.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Running and testing the installed binary&lt;/h2&gt; 
&lt;p&gt;To run the installed binary, issue the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo /usr/local/nginx/sbin/nginx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may test NGINX operation using &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl localhost
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The output of which should start with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Asking questions and reporting issues&lt;/h1&gt; 
&lt;p&gt;We encourage you to engage with us.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nginx/nginx/discussions&quot;&gt;NGINX GitHub Discussions&lt;/a&gt;, is the go-to place to start asking questions and sharing your thoughts.&lt;/li&gt; 
 &lt;li&gt;Our &lt;a href=&quot;https://github.com/nginx/nginx/issues&quot;&gt;GitHub Issues&lt;/a&gt; page offers space to submit and discuss specific issues, report bugs, and suggest enhancements.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contributing code&lt;/h1&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; guide for information on how to contribute code.&lt;/p&gt; 
&lt;h1&gt;Additional help and resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;See the &lt;a href=&quot;https://blog.nginx.org/&quot;&gt;NGINX Community Blog&lt;/a&gt; for more tips, tricks and HOW-TOs related to NGINX and related projects.&lt;/li&gt; 
 &lt;li&gt;Access &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;, your go-to source for all documentation, information and software related to the NGINX suite of projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Changelog&lt;/h1&gt; 
&lt;p&gt;See our &lt;a href=&quot;https://nginx.org/en/CHANGES&quot;&gt;changelog&lt;/a&gt; to keep track of updates.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/nginx/nginx/master/LICENSE&quot;&gt;2-clause BSD-like license&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Additional documentation available at: &lt;a href=&quot;https://nginx.org/en/docs&quot;&gt;https://nginx.org/en/docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stephane/libmodbus</title>
      <link>https://github.com/stephane/libmodbus</link>
      <description>&lt;p&gt;A Modbus library for Linux, Mac OS, FreeBSD and Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A groovy modbus library&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/stephane/libmodbus/actions/workflows/build.yml/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot; /&gt; &lt;a href=&quot;https://scan.coverity.com/projects/libmodbus&quot;&gt;&lt;img src=&quot;https://scan.coverity.com/projects/8058/badge.svg?sanitize=true&quot; alt=&quot;Coverity Scan Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;libmodbus is a free software library to send/receive data with a device which respects the Modbus protocol. This library can use a serial port or an Ethernet connection.&lt;/p&gt; 
&lt;p&gt;The functions included in the library have been derived from the Modicon Modbus Protocol Reference Guide which can be obtained from &lt;a href=&quot;http://www.modbus.org&quot;&gt;www.modbus.org&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The license of libmodbus is &lt;em&gt;LGPL v2.1 or later&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;The official website is &lt;a href=&quot;http://www.libmodbus.org&quot;&gt;www.libmodbus.org&lt;/a&gt;. The website contains the latest version of the documentation.&lt;/p&gt; 
&lt;p&gt;The library is written in C and designed to run on Linux, Mac OS X, FreeBSD, Embox, QNX and Windows.&lt;/p&gt; 
&lt;p&gt;You can use the library on MCUs with Embox RTOS.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You will only need to install automake, autoconf, libtool and a C compiler (gcc or clang) to compile the library and asciidoc and xmlto to generate the documentation (optional).&lt;/p&gt; 
&lt;p&gt;To install, just run the usual dance, &lt;code&gt;./configure &amp;amp;&amp;amp; make install&lt;/code&gt;. Run &lt;code&gt;./autogen.sh&lt;/code&gt; first to generate the &lt;code&gt;configure&lt;/code&gt; script if required.&lt;/p&gt; 
&lt;p&gt;You can change installation directory with prefix option, eg. &lt;code&gt;./configure --prefix=/usr/local/&lt;/code&gt;. You have to check that the installation library path is properly set up on your system (&lt;em&gt;/etc/ld.so.conf.d&lt;/em&gt;) and library cache is up to date (run &lt;code&gt;ldconfig&lt;/code&gt; as root if required).&lt;/p&gt; 
&lt;p&gt;The library provides a &lt;em&gt;libmodbus.pc&lt;/em&gt; file to use with &lt;code&gt;pkg-config&lt;/code&gt; to ease your program compilation and linking.&lt;/p&gt; 
&lt;p&gt;If you want to compile with Microsoft Visual Studio, you should follow the instructions in &lt;code&gt;./src/win32/README.md&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To compile under Windows, install &lt;a href=&quot;http://www.mingw.org/&quot;&gt;MinGW&lt;/a&gt; and MSYS then select the common packages (gcc, automake, libtool, etc). The directory &lt;em&gt;./src/win32/&lt;/em&gt; contains a Visual C project.&lt;/p&gt; 
&lt;p&gt;To compile under OS X with &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;homebrew&lt;/a&gt;, you will need to install the following dependencies first: &lt;code&gt;brew install autoconf automake libtool&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To build under Embox, you have to use its build system.&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;Some tests are provided in &lt;em&gt;tests&lt;/em&gt; directory, you can freely edit the source code to fit your needs (it&#39;s Free Software :).&lt;/p&gt; 
&lt;p&gt;See &lt;em&gt;tests/README&lt;/em&gt; for a description of each program.&lt;/p&gt; 
&lt;p&gt;For a quick test of libmodbus, you can run the following programs in two shells:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;./unit-test-server&lt;/li&gt; 
 &lt;li&gt;./unit-test-client&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By default, all TCP unit tests will be executed (see --help for options).&lt;/p&gt; 
&lt;p&gt;It&#39;s also possible to run the unit tests with &lt;code&gt;make check&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;To report a bug or to contribute&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/stephane/libmodbus/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can serve the local documentation with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;pip install mkdocs-material
mkdocs serve
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>DaveGamble/cJSON</title>
      <link>https://github.com/DaveGamble/cJSON</link>
      <description>&lt;p&gt;Ultralightweight JSON parser in ANSI C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cJSON&lt;/h1&gt; 
&lt;p&gt;Ultralightweight JSON parser in ANSI C.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#usage&quot;&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#welcome-to-cjson&quot;&gt;Welcome to cJSON&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#building&quot;&gt;Building&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#copying-the-source&quot;&gt;Copying the source&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#cmake&quot;&gt;CMake&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#makefile&quot;&gt;Makefile&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#meson&quot;&gt;Meson&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#Vcpkg&quot;&gt;Vcpkg&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#including-cjson&quot;&gt;Including cJSON&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#data-structure&quot;&gt;Data Structure&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#working-with-the-data-structure&quot;&gt;Working with the data structure&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#basic-types&quot;&gt;Basic types&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#arrays&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#objects&quot;&gt;Objects&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing-json&quot;&gt;Parsing JSON&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing-json&quot;&gt;Printing JSON&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#example&quot;&gt;Example&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing&quot;&gt;Printing&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing&quot;&gt;Parsing&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#caveats&quot;&gt;Caveats&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#zero-character&quot;&gt;Zero Character&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#character-encoding&quot;&gt;Character Encoding&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#c-standard&quot;&gt;C Standard&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#floating-point-numbers&quot;&gt;Floating Point Numbers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#deep-nesting-of-arrays-and-objects&quot;&gt;Deep Nesting Of Arrays And Objects&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#thread-safety&quot;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#case-sensitivity&quot;&gt;Case Sensitivity&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#duplicate-object-members&quot;&gt;Duplicate Object Members&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#enjoy-cjson&quot;&gt;Enjoy cJSON!&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Copyright (c) 2009-2017 Dave Gamble and cJSON contributors&lt;/p&gt; 
 &lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
 &lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
 &lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Welcome to cJSON.&lt;/h3&gt; 
&lt;p&gt;cJSON aims to be the dumbest possible parser that you can get your job done with. It&#39;s a single file of C, and a single header file.&lt;/p&gt; 
&lt;p&gt;JSON is described best here: &lt;a href=&quot;http://www.json.org/&quot;&gt;http://www.json.org/&lt;/a&gt; It&#39;s like XML, but fat-free. You use it to move data around, store things, or just generally represent your program&#39;s state.&lt;/p&gt; 
&lt;p&gt;As a library, cJSON exists to take away as much legwork as it can, but not get in your way. As a point of pragmatism (i.e. ignoring the truth), I&#39;m going to say that you can use it in one of two modes: Auto and Manual. Let&#39;s have a quick run-through.&lt;/p&gt; 
&lt;p&gt;I lifted some JSON from this page: &lt;a href=&quot;http://www.json.org/fatfree.html&quot;&gt;http://www.json.org/fatfree.html&lt;/a&gt; That page inspired me to write cJSON, which is a parser that tries to share the same philosophy as JSON itself. Simple, dumb, out of the way.&lt;/p&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;p&gt;There are several ways to incorporate cJSON into your project.&lt;/p&gt; 
&lt;h4&gt;copying the source&lt;/h4&gt; 
&lt;p&gt;Because the entire library is only one C file and one header file, you can just copy &lt;code&gt;cJSON.h&lt;/code&gt; and &lt;code&gt;cJSON.c&lt;/code&gt; to your projects source and start using it.&lt;/p&gt; 
&lt;p&gt;cJSON is written in ANSI C (C89) in order to support as many platforms and compilers as possible.&lt;/p&gt; 
&lt;h4&gt;CMake&lt;/h4&gt; 
&lt;p&gt;With CMake, cJSON supports a full blown build system. This way you get the most features. CMake with an equal or higher version than 2.8.5 is supported. With CMake it is recommended to do an out of tree build, meaning the compiled files are put in a directory separate from the source files. So in order to build cJSON with CMake on a Unix platform, make a &lt;code&gt;build&lt;/code&gt; directory and run CMake inside it.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake ..
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a Makefile and a bunch of other files. You can then compile it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And install it with &lt;code&gt;make install&lt;/code&gt; if you want. By default it installs the headers &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries to &lt;code&gt;/usr/local/lib&lt;/code&gt;. It also installs files for pkg-config to make it easier to detect and use an existing installation of CMake. And it installs CMake config files, that can be used by other CMake based projects to discover the library.&lt;/p&gt; 
&lt;p&gt;You can change the build process with a list of different options that you can pass to CMake. Turn them on with &lt;code&gt;On&lt;/code&gt; and off with &lt;code&gt;Off&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_TEST=On&lt;/code&gt;: Enable building the tests. (on by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_UTILS=On&lt;/code&gt;: Enable building cJSON_Utils. (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_TARGET_EXPORT=On&lt;/code&gt;: Enable the export of CMake targets. Turn off if it makes problems. (on by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_CUSTOM_COMPILER_FLAGS=On&lt;/code&gt;: Enable custom compiler flags (currently for Clang, GCC and MSVC). Turn off if it makes problems. (on by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_VALGRIND=On&lt;/code&gt;: Run tests with &lt;a href=&quot;http://valgrind.org&quot;&gt;valgrind&lt;/a&gt;. (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_SANITIZERS=On&lt;/code&gt;: Compile cJSON with &lt;a href=&quot;https://github.com/google/sanitizers/wiki/AddressSanitizer&quot;&gt;AddressSanitizer&lt;/a&gt; and &lt;a href=&quot;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&quot;&gt;UndefinedBehaviorSanitizer&lt;/a&gt; enabled (if possible). (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_SAFE_STACK&lt;/code&gt;: Enable the &lt;a href=&quot;https://clang.llvm.org/docs/SafeStack.html&quot;&gt;SafeStack&lt;/a&gt; instrumentation pass. Currently only works with the Clang compiler. (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_LIBS=On&lt;/code&gt;: Build the shared libraries. (on by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_AND_STATIC_LIBS=On&lt;/code&gt;: Build both shared and static libraries. (off by default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=/usr&lt;/code&gt;: Set a prefix for the installation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_LOCALES=On&lt;/code&gt;: Enable the usage of localeconv method. ( on by default )&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DCJSON_OVERRIDE_BUILD_SHARED_LIBS=On&lt;/code&gt;: Enable overriding the value of &lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt; with &lt;code&gt;-DCJSON_BUILD_SHARED_LIBS&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_VERSION_SO&lt;/code&gt;: Enable cJSON so version. ( on by default )&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are packaging cJSON for a distribution of Linux, you would probably take these steps for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake .. -DENABLE_CJSON_UTILS=On -DENABLE_CJSON_TEST=Off -DCMAKE_INSTALL_PREFIX=/usr
make
make DESTDIR=$pkgdir install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Windows CMake is usually used to create a Visual Studio solution file by running it inside the Developer Command Prompt for Visual Studio, for exact steps follow the official documentation from CMake and Microsoft and use the online search engine of your choice. The descriptions of the the options above still generally apply, although not all of them work on Windows.&lt;/p&gt; 
&lt;h4&gt;Makefile&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This Method is deprecated. Use CMake if at all possible. Makefile support is limited to fixing bugs.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t have CMake available, but still have GNU make. You can use the makefile to build cJSON:&lt;/p&gt; 
&lt;p&gt;Run this command in the directory with the source code and it will automatically compile static and shared libraries and a little test program (not the full test suite).&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want, you can install the compiled library to your system using &lt;code&gt;make install&lt;/code&gt;. By default it will install the headers in &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries in &lt;code&gt;/usr/local/lib&lt;/code&gt;. But you can change this behavior by setting the &lt;code&gt;PREFIX&lt;/code&gt; and &lt;code&gt;DESTDIR&lt;/code&gt; variables: &lt;code&gt;make PREFIX=/usr DESTDIR=temp install&lt;/code&gt;. And uninstall them with: &lt;code&gt;make PREFIX=/usr DESTDIR=temp uninstall&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Meson&lt;/h4&gt; 
&lt;p&gt;To make cjson work in a project using meson, the libcjson dependency has to be included:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-meson&quot;&gt;project(&#39;c-json-example&#39;, &#39;c&#39;)

cjson = dependency(&#39;libcjson&#39;)

example = executable(
    &#39;example&#39;,
    &#39;example.c&#39;,
    dependencies: [cjson],
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Vcpkg&lt;/h4&gt; 
&lt;p&gt;You can download and install cJSON using the &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
./bootstrap-vcpkg.sh
./vcpkg integrate install
vcpkg install cjson
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The cJSON port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; 
&lt;h3&gt;Including cJSON&lt;/h3&gt; 
&lt;p&gt;If you installed it via CMake or the Makefile, you can include cJSON like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;cjson/cJSON.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Data Structure&lt;/h3&gt; 
&lt;p&gt;cJSON represents JSON data using the &lt;code&gt;cJSON&lt;/code&gt; struct data type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/* The cJSON structure: */
typedef struct cJSON
{
    struct cJSON *next;
    struct cJSON *prev;
    struct cJSON *child;
    int type;
    char *valuestring;
    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */
    int valueint;
    double valuedouble;
    char *string;
} cJSON;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An item of this type represents a JSON value. The type is stored in &lt;code&gt;type&lt;/code&gt; as a bit-flag (&lt;strong&gt;this means that you cannot find out the type by just comparing the value of &lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt; 
&lt;p&gt;To check the type of an item, use the corresponding &lt;code&gt;cJSON_Is...&lt;/code&gt; function. It does a &lt;code&gt;NULL&lt;/code&gt; check followed by a type check and returns a boolean value if the item is of this type.&lt;/p&gt; 
&lt;p&gt;The type can be one of the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Invalid&lt;/code&gt; (check with &lt;code&gt;cJSON_IsInvalid&lt;/code&gt;): Represents an invalid item that doesn&#39;t contain any value. You automatically have this type if you set the item to all zero bytes.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_False&lt;/code&gt; (check with &lt;code&gt;cJSON_IsFalse&lt;/code&gt;): Represents a &lt;code&gt;false&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_True&lt;/code&gt; (check with &lt;code&gt;cJSON_IsTrue&lt;/code&gt;): Represents a &lt;code&gt;true&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_NULL&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNull&lt;/code&gt;): Represents a &lt;code&gt;null&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Number&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNumber&lt;/code&gt;): Represents a number value. The value is stored as a double in &lt;code&gt;valuedouble&lt;/code&gt; and also in &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_String&lt;/code&gt; (check with &lt;code&gt;cJSON_IsString&lt;/code&gt;): Represents a string value. It is stored in the form of a zero terminated string in &lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Array&lt;/code&gt; (check with &lt;code&gt;cJSON_IsArray&lt;/code&gt;): Represent an array value. This is implemented by pointing &lt;code&gt;child&lt;/code&gt; to a linked list of &lt;code&gt;cJSON&lt;/code&gt; items that represent the values in the array. The elements are linked together using &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;, where the first element has &lt;code&gt;prev.next == NULL&lt;/code&gt; and the last element &lt;code&gt;next == NULL&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Object&lt;/code&gt; (check with &lt;code&gt;cJSON_IsObject&lt;/code&gt;): Represents an object value. Objects are stored same way as an array, the only difference is that the items in the object store their keys in &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_Raw&lt;/code&gt; (check with &lt;code&gt;cJSON_IsRaw&lt;/code&gt;): Represents any kind of JSON that is stored as a zero terminated array of characters in &lt;code&gt;valuestring&lt;/code&gt;. This can be used, for example, to avoid printing the same static JSON over and over again to save performance. cJSON will never create this type when parsing. Also note that cJSON doesn&#39;t check if it is valid JSON.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additionally there are the following two flags:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_IsReference&lt;/code&gt;: Specifies that the item that &lt;code&gt;child&lt;/code&gt; points to and/or &lt;code&gt;valuestring&lt;/code&gt; is not owned by this item, it is only a reference. So &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will only deallocate this item, not its &lt;code&gt;child&lt;/code&gt;/&lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_StringIsConst&lt;/code&gt;: This means that &lt;code&gt;string&lt;/code&gt; points to a constant string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will not try to deallocate &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Working with the data structure&lt;/h3&gt; 
&lt;p&gt;For every value type there is a &lt;code&gt;cJSON_Create...&lt;/code&gt; function that can be used to create an item of that type. All of these will allocate a &lt;code&gt;cJSON&lt;/code&gt; struct that can later be deleted with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Note that you have to delete them at some point, otherwise you will get a memory leak.&lt;br /&gt; &lt;strong&gt;Important&lt;/strong&gt;: If you have added an item to an array or an object already, you &lt;strong&gt;mustn&#39;t&lt;/strong&gt; delete it with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Adding it to an array or object transfers its ownership so that when that array or object is deleted, it gets deleted as well. You also could use &lt;code&gt;cJSON_SetValuestring&lt;/code&gt; to change a &lt;code&gt;cJSON_String&lt;/code&gt;&#39;s &lt;code&gt;valuestring&lt;/code&gt;, and you needn&#39;t to free the previous &lt;code&gt;valuestring&lt;/code&gt; manually.&lt;/p&gt; 
&lt;h4&gt;Basic types&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;null&lt;/strong&gt; is created with &lt;code&gt;cJSON_CreateNull&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;booleans&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateTrue&lt;/code&gt;, &lt;code&gt;cJSON_CreateFalse&lt;/code&gt; or &lt;code&gt;cJSON_CreateBool&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;numbers&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateNumber&lt;/code&gt;. This will set both &lt;code&gt;valuedouble&lt;/code&gt; and &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;strings&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateString&lt;/code&gt; (copies the string) or with &lt;code&gt;cJSON_CreateStringReference&lt;/code&gt; (directly points to the string. This means that &lt;code&gt;valuestring&lt;/code&gt; won&#39;t be deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt; and you are responsible for its lifetime, useful for constants)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Arrays&lt;/h4&gt; 
&lt;p&gt;You can create an empty array with &lt;code&gt;cJSON_CreateArray&lt;/code&gt;. &lt;code&gt;cJSON_CreateArrayReference&lt;/code&gt; can be used to create an array that doesn&#39;t &quot;own&quot; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To add items to an array, use &lt;code&gt;cJSON_AddItemToArray&lt;/code&gt; to append items to the end. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another item, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere. To insert items in the middle, use &lt;code&gt;cJSON_InsertItemInArray&lt;/code&gt;. It will insert an item at the given 0 based index and shift all the existing items to the right.&lt;/p&gt; 
&lt;p&gt;If you want to take an item out of an array at a given index and continue using it, use &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; 
&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromArray&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, but deletes the detached item via &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also replace an item in an array in place. Either with &lt;code&gt;cJSON_ReplaceItemInArray&lt;/code&gt; using an index or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; 
&lt;p&gt;To get the size of an array, use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;. Use &lt;code&gt;cJSON_GetArrayItem&lt;/code&gt; to get an element at a given index.&lt;/p&gt; 
&lt;p&gt;Because an array is stored as a linked list, iterating it via index is inefficient (&lt;code&gt;O(n²)&lt;/code&gt;), so you can iterate over an array using the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro in &lt;code&gt;O(n)&lt;/code&gt; time complexity.&lt;/p&gt; 
&lt;h4&gt;Objects&lt;/h4&gt; 
&lt;p&gt;You can create an empty object with &lt;code&gt;cJSON_CreateObject&lt;/code&gt;. &lt;code&gt;cJSON_CreateObjectReference&lt;/code&gt; can be used to create an object that doesn&#39;t &quot;own&quot; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To add items to an object, use &lt;code&gt;cJSON_AddItemToObject&lt;/code&gt;. Use &lt;code&gt;cJSON_AddItemToObjectCS&lt;/code&gt; to add an item to an object with a name that is a constant or reference (key of the item, &lt;code&gt;string&lt;/code&gt; in the &lt;code&gt;cJSON&lt;/code&gt; struct), so that it doesn&#39;t get freed by &lt;code&gt;cJSON_Delete&lt;/code&gt;. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another object, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere.&lt;/p&gt; 
&lt;p&gt;If you want to take an item out of an object, use &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; 
&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromObjectCaseSensitive&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt; followed by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also replace an item in an object in place. Either with &lt;code&gt;cJSON_ReplaceItemInObjectCaseSensitive&lt;/code&gt; using a key or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; 
&lt;p&gt;To get the size of an object, you can use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;, this works because internally objects are stored as arrays.&lt;/p&gt; 
&lt;p&gt;If you want to access an item in an object, use &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To iterate over an object, you can use the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro the same way as for arrays.&lt;/p&gt; 
&lt;p&gt;cJSON also provides convenient helper functions for quickly creating a new item and adding it to an object, like &lt;code&gt;cJSON_AddNullToObject&lt;/code&gt;. They return a pointer to the new item or &lt;code&gt;NULL&lt;/code&gt; if they failed.&lt;/p&gt; 
&lt;h3&gt;Parsing JSON&lt;/h3&gt; 
&lt;p&gt;Given some JSON in a zero terminated string, you can parse it with &lt;code&gt;cJSON_Parse&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;cJSON *json = cJSON_Parse(string);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given some JSON in a string (whether zero terminated or not), you can parse it with &lt;code&gt;cJSON_ParseWithLength&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;cJSON *json = cJSON_ParseWithLength(string, buffer_length);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It will parse the JSON and allocate a tree of &lt;code&gt;cJSON&lt;/code&gt; items that represents it. Once it returns, you are fully responsible for deallocating it after use with &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The allocator used by &lt;code&gt;cJSON_Parse&lt;/code&gt; is &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; by default but can be changed (globally) with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If an error occurs a pointer to the position of the error in the input string can be accessed using &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt;. Note though that this can produce race conditions in multithreading scenarios, in that case it is better to use &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; with &lt;code&gt;return_parse_end&lt;/code&gt;. By default, characters in the input string that follow the parsed JSON will not be considered as an error.&lt;/p&gt; 
&lt;p&gt;If you want more options, use &lt;code&gt;cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;. &lt;code&gt;return_parse_end&lt;/code&gt; returns a pointer to the end of the JSON in the input string or the position that an error occurs at (thereby replacing &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; in a thread safe way). &lt;code&gt;require_null_terminated&lt;/code&gt;, if set to &lt;code&gt;1&lt;/code&gt; will make it an error if the input string contains data after the JSON.&lt;/p&gt; 
&lt;p&gt;If you want more options giving buffer length, use &lt;code&gt;cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Printing JSON&lt;/h3&gt; 
&lt;p&gt;Given a tree of &lt;code&gt;cJSON&lt;/code&gt; items, you can print them as a string using &lt;code&gt;cJSON_Print&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;char *string = cJSON_Print(json);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It will allocate a string and print a JSON representation of the tree into it. Once it returns, you are fully responsible for deallocating it after use with your allocator. (usually &lt;code&gt;free&lt;/code&gt;, depends on what has been set with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;cJSON_Print&lt;/code&gt; will print with whitespace for formatting. If you want to print without formatting, use &lt;code&gt;cJSON_PrintUnformatted&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you have a rough idea of how big your resulting string will be, you can use &lt;code&gt;cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)&lt;/code&gt;. &lt;code&gt;fmt&lt;/code&gt; is a boolean to turn formatting with whitespace on and off. &lt;code&gt;prebuffer&lt;/code&gt; specifies the first buffer size to use for printing. &lt;code&gt;cJSON_Print&lt;/code&gt; currently uses 256 bytes for its first buffer size. Once printing runs out of space, a new buffer is allocated and the old gets copied over before printing is continued.&lt;/p&gt; 
&lt;p&gt;These dynamic buffer allocations can be completely avoided by using &lt;code&gt;cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)&lt;/code&gt;. It takes a buffer to a pointer to print to and its length. If the length is reached, printing will fail and it returns &lt;code&gt;0&lt;/code&gt;. In case of success, &lt;code&gt;1&lt;/code&gt; is returned. Note that you should provide 5 bytes more than is actually needed, because cJSON is not 100% accurate in estimating if the provided memory is enough.&lt;/p&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;p&gt;In this example we want to build and parse the following JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;name&quot;: &quot;Awesome 4K&quot;,
    &quot;resolutions&quot;: [
        {
            &quot;width&quot;: 1280,
            &quot;height&quot;: 720
        },
        {
            &quot;width&quot;: 1920,
            &quot;height&quot;: 1080
        },
        {
            &quot;width&quot;: 3840,
            &quot;height&quot;: 2160
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Printing&lt;/h4&gt; 
&lt;p&gt;Let&#39;s build the above JSON and print it to a string:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;//create a monitor with a list of supported resolutions
//NOTE: Returns a heap allocated string, you are required to free it after use.
char *create_monitor(void)
{
    const unsigned int resolution_numbers[3][2] = {
        {1280, 720},
        {1920, 1080},
        {3840, 2160}
    };
    char *string = NULL;
    cJSON *name = NULL;
    cJSON *resolutions = NULL;
    cJSON *resolution = NULL;
    cJSON *width = NULL;
    cJSON *height = NULL;
    size_t index = 0;

    cJSON *monitor = cJSON_CreateObject();
    if (monitor == NULL)
    {
        goto end;
    }

    name = cJSON_CreateString(&quot;Awesome 4K&quot;);
    if (name == NULL)
    {
        goto end;
    }
    /* after creation was successful, immediately add it to the monitor,
     * thereby transferring ownership of the pointer to it */
    cJSON_AddItemToObject(monitor, &quot;name&quot;, name);

    resolutions = cJSON_CreateArray();
    if (resolutions == NULL)
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, &quot;resolutions&quot;, resolutions);

    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)
    {
        resolution = cJSON_CreateObject();
        if (resolution == NULL)
        {
            goto end;
        }
        cJSON_AddItemToArray(resolutions, resolution);

        width = cJSON_CreateNumber(resolution_numbers[index][0]);
        if (width == NULL)
        {
            goto end;
        }
        cJSON_AddItemToObject(resolution, &quot;width&quot;, width);

        height = cJSON_CreateNumber(resolution_numbers[index][1]);
        if (height == NULL)
        {
            goto end;
        }
        cJSON_AddItemToObject(resolution, &quot;height&quot;, height);
    }

    string = cJSON_Print(monitor);
    if (string == NULL)
    {
        fprintf(stderr, &quot;Failed to print monitor.\n&quot;);
    }

end:
    cJSON_Delete(monitor);
    return string;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively we can use the &lt;code&gt;cJSON_Add...ToObject&lt;/code&gt; helper functions to make our lives a little easier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;//NOTE: Returns a heap allocated string, you are required to free it after use.
char *create_monitor_with_helpers(void)
{
    const unsigned int resolution_numbers[3][2] = {
        {1280, 720},
        {1920, 1080},
        {3840, 2160}
    };
    char *string = NULL;
    cJSON *resolutions = NULL;
    size_t index = 0;

    cJSON *monitor = cJSON_CreateObject();

    if (cJSON_AddStringToObject(monitor, &quot;name&quot;, &quot;Awesome 4K&quot;) == NULL)
    {
        goto end;
    }

    resolutions = cJSON_AddArrayToObject(monitor, &quot;resolutions&quot;);
    if (resolutions == NULL)
    {
        goto end;
    }

    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)
    {
        cJSON *resolution = cJSON_CreateObject();

        if (cJSON_AddNumberToObject(resolution, &quot;width&quot;, resolution_numbers[index][0]) == NULL)
        {
            goto end;
        }

        if (cJSON_AddNumberToObject(resolution, &quot;height&quot;, resolution_numbers[index][1]) == NULL)
        {
            goto end;
        }

        cJSON_AddItemToArray(resolutions, resolution);
    }

    string = cJSON_Print(monitor);
    if (string == NULL)
    {
        fprintf(stderr, &quot;Failed to print monitor.\n&quot;);
    }

end:
    cJSON_Delete(monitor);
    return string;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Parsing&lt;/h4&gt; 
&lt;p&gt;In this example we will parse a JSON in the above format and check if the monitor supports a Full HD resolution while printing some diagnostic output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/* return 1 if the monitor supports full hd, 0 otherwise */
int supports_full_hd(const char * const monitor)
{
    const cJSON *resolution = NULL;
    const cJSON *resolutions = NULL;
    const cJSON *name = NULL;
    int status = 0;
    cJSON *monitor_json = cJSON_Parse(monitor);
    if (monitor_json == NULL)
    {
        const char *error_ptr = cJSON_GetErrorPtr();
        if (error_ptr != NULL)
        {
            fprintf(stderr, &quot;Error before: %s\n&quot;, error_ptr);
        }
        status = 0;
        goto end;
    }

    name = cJSON_GetObjectItemCaseSensitive(monitor_json, &quot;name&quot;);
    if (cJSON_IsString(name) &amp;amp;&amp;amp; (name-&amp;gt;valuestring != NULL))
    {
        printf(&quot;Checking monitor \&quot;%s\&quot;\n&quot;, name-&amp;gt;valuestring);
    }

    resolutions = cJSON_GetObjectItemCaseSensitive(monitor_json, &quot;resolutions&quot;);
    cJSON_ArrayForEach(resolution, resolutions)
    {
        cJSON *width = cJSON_GetObjectItemCaseSensitive(resolution, &quot;width&quot;);
        cJSON *height = cJSON_GetObjectItemCaseSensitive(resolution, &quot;height&quot;);

        if (!cJSON_IsNumber(width) || !cJSON_IsNumber(height))
        {
            status = 0;
            goto end;
        }

        if ((width-&amp;gt;valuedouble == 1920) &amp;amp;&amp;amp; (height-&amp;gt;valuedouble == 1080))
        {
            status = 1;
            goto end;
        }
    }

end:
    cJSON_Delete(monitor_json);
    return status;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that there are no NULL checks except for the result of &lt;code&gt;cJSON_Parse&lt;/code&gt; because &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; checks for &lt;code&gt;NULL&lt;/code&gt; inputs already, so a &lt;code&gt;NULL&lt;/code&gt; value is just propagated and &lt;code&gt;cJSON_IsNumber&lt;/code&gt; and &lt;code&gt;cJSON_IsString&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; if the input is &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Caveats&lt;/h3&gt; 
&lt;h4&gt;Zero Character&lt;/h4&gt; 
&lt;p&gt;cJSON doesn&#39;t support strings that contain the zero character &lt;code&gt;&#39;\0&#39;&lt;/code&gt; or &lt;code&gt;\u0000&lt;/code&gt;. This is impossible with the current API because strings are zero terminated.&lt;/p&gt; 
&lt;h4&gt;Character Encoding&lt;/h4&gt; 
&lt;p&gt;cJSON only supports UTF-8 encoded input. In most cases it doesn&#39;t reject invalid UTF-8 as input though, it just propagates it through as is. As long as the input doesn&#39;t contain invalid UTF-8, the output will always be valid UTF-8.&lt;/p&gt; 
&lt;h4&gt;C Standard&lt;/h4&gt; 
&lt;p&gt;cJSON is written in ANSI C (or C89, C90). If your compiler or C library doesn&#39;t follow this standard, correct behavior is not guaranteed.&lt;/p&gt; 
&lt;p&gt;NOTE: ANSI C is not C++ therefore it shouldn&#39;t be compiled with a C++ compiler. You can compile it with a C compiler and link it with your C++ code however. Although compiling with a C++ compiler might work, correct behavior is not guaranteed.&lt;/p&gt; 
&lt;h4&gt;Floating Point Numbers&lt;/h4&gt; 
&lt;p&gt;cJSON does not officially support any &lt;code&gt;double&lt;/code&gt; implementations other than IEEE754 double precision floating point numbers. It might still work with other implementations but bugs with these will be considered invalid.&lt;/p&gt; 
&lt;p&gt;The maximum length of a floating point literal that cJSON supports is currently 63 characters.&lt;/p&gt; 
&lt;h4&gt;Deep Nesting Of Arrays And Objects&lt;/h4&gt; 
&lt;p&gt;cJSON doesn&#39;t support arrays and objects that are nested too deeply because this would result in a stack overflow. To prevent this cJSON limits the depth to &lt;code&gt;CJSON_NESTING_LIMIT&lt;/code&gt; which is 1000 by default but can be changed at compile time.&lt;/p&gt; 
&lt;h4&gt;Thread Safety&lt;/h4&gt; 
&lt;p&gt;In general cJSON is &lt;strong&gt;not thread safe&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;However it is thread safe under the following conditions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; is never used (the &lt;code&gt;return_parse_end&lt;/code&gt; parameter of &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; can be used instead)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cJSON_InitHooks&lt;/code&gt; is only ever called before using cJSON in any threads.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;setlocale&lt;/code&gt; is never called before all calls to cJSON functions have returned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Case Sensitivity&lt;/h4&gt; 
&lt;p&gt;When cJSON was originally created, it didn&#39;t follow the JSON standard and didn&#39;t make a distinction between uppercase and lowercase letters. If you want the correct, standard compliant, behavior, you need to use the &lt;code&gt;CaseSensitive&lt;/code&gt; functions where available.&lt;/p&gt; 
&lt;h4&gt;Duplicate Object Members&lt;/h4&gt; 
&lt;p&gt;cJSON supports parsing and printing JSON that contains objects that have multiple members with the same name. &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; however will always only return the first one.&lt;/p&gt; 
&lt;h1&gt;Enjoy cJSON!&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Dave Gamble (original author)&lt;/li&gt; 
 &lt;li&gt;Max Bruckner and Alan Wang (current maintainer)&lt;/li&gt; 
 &lt;li&gt;and the other &lt;a href=&quot;https://raw.githubusercontent.com/DaveGamble/cJSON/master/CONTRIBUTORS.md&quot;&gt;cJSON contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>obsproject/obs-studio</title>
      <link>https://github.com/obsproject/obs-studio</link>
      <description>&lt;p&gt;OBS Studio - Free and open source software for live streaming and screen recording&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OBS Studio &lt;a href=&quot;https://obsproject.com&quot;&gt;https://obsproject.com&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;.. image:: &lt;a href=&quot;https://github.com/obsproject/obs-studio/actions/workflows/push.yaml/badge.svg?branch=master&quot;&gt;https://github.com/obsproject/obs-studio/actions/workflows/push.yaml/badge.svg?branch=master&lt;/a&gt; :alt: OBS Studio Build Status - GitHub Actions :target: &lt;a href=&quot;https://github.com/obsproject/obs-studio/actions/workflows/push.yaml?query=branch%3Amaster&quot;&gt;https://github.com/obsproject/obs-studio/actions/workflows/push.yaml?query=branch%3Amaster&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. image:: &lt;a href=&quot;https://badges.crowdin.net/obs-studio/localized.svg&quot;&gt;https://badges.crowdin.net/obs-studio/localized.svg&lt;/a&gt; :alt: OBS Studio Translation Project Progress :target: &lt;a href=&quot;https://crowdin.com/project/obs-studio&quot;&gt;https://crowdin.com/project/obs-studio&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. image:: &lt;a href=&quot;https://img.shields.io/discord/348973006581923840.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&quot;&gt;https://img.shields.io/discord/348973006581923840.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&lt;/a&gt; :alt: OBS Studio Discord Server :target: &lt;a href=&quot;https://obsproject.com/discord&quot;&gt;https://obsproject.com/discord&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is OBS Studio?&lt;/h2&gt; 
&lt;p&gt;OBS Studio is software designed for capturing, compositing, encoding, recording, and streaming video content, efficiently.&lt;/p&gt; 
&lt;p&gt;It&#39;s distributed under the GNU General Public License v2 (or any later version) - see the accompanying COPYING file for more details.&lt;/p&gt; 
&lt;h2&gt;Quick Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Website: &lt;a href=&quot;https://obsproject.com&quot;&gt;https://obsproject.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Help/Documentation/Guides: &lt;a href=&quot;https://github.com/obsproject/obs-studio/wiki&quot;&gt;https://github.com/obsproject/obs-studio/wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Forums: &lt;a href=&quot;https://obsproject.com/forum/&quot;&gt;https://obsproject.com/forum/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build Instructions: &lt;a href=&quot;https://github.com/obsproject/obs-studio/wiki/Install-Instructions&quot;&gt;https://github.com/obsproject/obs-studio/wiki/Install-Instructions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Developer/API Documentation: &lt;a href=&quot;https://obsproject.com/docs&quot;&gt;https://obsproject.com/docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Donating/backing/sponsoring: &lt;a href=&quot;https://obsproject.com/contribute&quot;&gt;https://obsproject.com/contribute&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Bug Tracker: &lt;a href=&quot;https://github.com/obsproject/obs-studio/issues&quot;&gt;https://github.com/obsproject/obs-studio/issues&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If you would like to help fund or sponsor the project, you can do so via &lt;code&gt;Patreon &amp;lt;https://www.patreon.com/obsproject&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;OpenCollective &amp;lt;https://opencollective.com/obsproject&amp;gt;&lt;/code&gt;&lt;/em&gt;, or &lt;code&gt;PayPal &amp;lt;https://www.paypal.me/obsproject&amp;gt;&lt;/code&gt;&lt;em&gt;. See our &lt;code&gt;contribute page &amp;lt;https://obsproject.com/contribute&amp;gt;&lt;/code&gt;&lt;/em&gt; for more information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you wish to contribute code to the project, please make sure to read the coding and commit guidelines: &lt;a href=&quot;https://github.com/obsproject/obs-studio/raw/master/CONTRIBUTING.rst&quot;&gt;https://github.com/obsproject/obs-studio/blob/master/CONTRIBUTING.rst&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Developer/API documentation can be found here: &lt;a href=&quot;https://obsproject.com/docs&quot;&gt;https://obsproject.com/docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you wish to contribute translations, do not submit pull requests. Instead, please use Crowdin. For more information read this page: &lt;a href=&quot;https://obsproject.com/wiki/How-To-Contribute-Translations-For-OBS&quot;&gt;https://obsproject.com/wiki/How-To-Contribute-Translations-For-OBS&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Other ways to contribute are by helping people out with support on our forums or in our community chat. Please limit support to topics you fully understand -- bad advice is worse than no advice. When it comes to something that you don&#39;t fully know or understand, please defer to the official help or official channels.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;SAST Tools&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;PVS-Studio &amp;lt;https://pvs-studio.com/pvs-studio/?utm_source=website&amp;amp;utm_medium=github&amp;amp;utm_campaign=open_source&amp;gt;&lt;/code&gt;_ - static analyzer for C, C++, C#, and Java code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>madler/zlib</title>
      <link>https://github.com/madler/zlib</link>
      <description>&lt;p&gt;A massively spiffy yet delicately unobtrusive compression library.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ZLIB DATA COMPRESSION LIBRARY&lt;/p&gt; 
&lt;p&gt;zlib 1.3.1.1 is a general purpose data compression library. All the code is thread safe. The data format used by the zlib library is described by RFCs (Request for Comments) 1950 to 1952 in the files &lt;a href=&quot;http://tools.ietf.org/html/rfc1950&quot;&gt;http://tools.ietf.org/html/rfc1950&lt;/a&gt; (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format).&lt;/p&gt; 
&lt;p&gt;All functions of the compression library are documented in the file zlib.h (volunteer to write man pages welcome, contact &lt;a href=&quot;mailto:zlib@gzip.org&quot;&gt;zlib@gzip.org&lt;/a&gt;). A usage example of the library is given in the file test/example.c which also tests that the library is working correctly. Another example is given in the file test/minigzip.c. The compression library itself is composed of all source files in the root directory.&lt;/p&gt; 
&lt;p&gt;To compile all files and run the test program, follow the instructions given at the top of Makefile.in. In short &quot;./configure; make test&quot;, and if that goes well, &quot;make install&quot; should work for most flavors of Unix. For Windows, use one of the special makefiles in win32/ or contrib/vstudio/ . For VMS, use make_vms.com.&lt;/p&gt; 
&lt;p&gt;Questions about zlib should be sent to &lt;a href=&quot;mailto:zlib@gzip.org&quot;&gt;zlib@gzip.org&lt;/a&gt;, or to Gilles Vollant &lt;a href=&quot;mailto:info@winimage.com&quot;&gt;info@winimage.com&lt;/a&gt; for the Windows DLL version. The zlib home page is &lt;a href=&quot;http://zlib.net/&quot;&gt;http://zlib.net/&lt;/a&gt; . Before reporting a problem, please check this site to verify that you have the latest version of zlib; otherwise get the latest version and check whether the problem still exists or not.&lt;/p&gt; 
&lt;p&gt;PLEASE read the zlib FAQ &lt;a href=&quot;http://zlib.net/zlib_faq.html&quot;&gt;http://zlib.net/zlib_faq.html&lt;/a&gt; before asking for help.&lt;/p&gt; 
&lt;p&gt;Mark Nelson &lt;a href=&quot;mailto:markn@ieee.org&quot;&gt;markn@ieee.org&lt;/a&gt; wrote an article about zlib for the Jan. 1997 issue of Dr. Dobb&#39;s Journal; a copy of the article is available at &lt;a href=&quot;https://marknelson.us/posts/1997/01/01/zlib-engine.html&quot;&gt;https://marknelson.us/posts/1997/01/01/zlib-engine.html&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;The changes made in version 1.3.1.1 are documented in the file ChangeLog.&lt;/p&gt; 
&lt;p&gt;Unsupported third party contributions are provided in directory contrib/ .&lt;/p&gt; 
&lt;p&gt;zlib is available in Java using the java.util.zip package. Follow the API Documentation link at: &lt;a href=&quot;https://docs.oracle.com/search/?q=java.util.zip&quot;&gt;https://docs.oracle.com/search/?q=java.util.zip&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;A Perl interface to zlib and bzip2 written by Paul Marquess &lt;a href=&quot;mailto:pmqs@cpan.org&quot;&gt;pmqs@cpan.org&lt;/a&gt; can be found at &lt;a href=&quot;https://github.com/pmqs/IO-Compress&quot;&gt;https://github.com/pmqs/IO-Compress&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;A Python interface to zlib written by A.M. Kuchling &lt;a href=&quot;mailto:amk@amk.ca&quot;&gt;amk@amk.ca&lt;/a&gt; is available in Python 1.5 and later versions, see &lt;a href=&quot;http://docs.python.org/library/zlib.html&quot;&gt;http://docs.python.org/library/zlib.html&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;zlib is built into tcl: &lt;a href=&quot;http://wiki.tcl.tk/4610&quot;&gt;http://wiki.tcl.tk/4610&lt;/a&gt; .&lt;/p&gt; 
&lt;p&gt;An experimental package to read and write files in .zip format, written on top of zlib by Gilles Vollant &lt;a href=&quot;mailto:info@winimage.com&quot;&gt;info@winimage.com&lt;/a&gt;, is available in the contrib/minizip directory of zlib.&lt;/p&gt; 
&lt;p&gt;Notes for some targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For Windows DLL versions, please see win32/DLL_FAQ.txt&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For 64-bit Irix, deflate.c must be compiled without any optimization. With -O, one libpng test fails. The test works in 32 bit mode (with the -n32 compiler flag). The compiler bug has been reported to SGI.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;zlib doesn&#39;t work with gcc 2.6.3 on a DEC 3000/300LX under OSF/1 2.1 it works when compiled with cc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On Digital Unix 4.0D (formerly OSF/1) on AlphaServer, the cc option -std1 is necessary to get gzprintf working correctly. This is done by configure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;zlib doesn&#39;t work on HP-UX 9.05 with some versions of /bin/cc. It works with other compilers. Use &quot;make test&quot; to check your compiler.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For PalmOs, see &lt;a href=&quot;http://palmzlib.sourceforge.net/&quot;&gt;http://palmzlib.sourceforge.net/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Acknowledgments:&lt;/p&gt; 
&lt;p&gt;The deflate format used by zlib was defined by Phil Katz. The deflate and zlib specifications were written by L. Peter Deutsch. Thanks to all the people who reported problems and suggested various improvements in zlib; they are too numerous to cite here.&lt;/p&gt; 
&lt;p&gt;Copyright notice:&lt;/p&gt; 
&lt;p&gt;(C) 1995-2024 Jean-loup Gailly and Mark Adler&lt;/p&gt; 
&lt;p&gt;This software is provided &#39;as-is&#39;, without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.&lt;/p&gt; 
&lt;p&gt;Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.&lt;/li&gt; 
 &lt;li&gt;Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.&lt;/li&gt; 
 &lt;li&gt;This notice may not be removed or altered from any source distribution.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Jean-loup Gailly Mark Adler &lt;a href=&quot;mailto:jloup@gzip.org&quot;&gt;jloup@gzip.org&lt;/a&gt; &lt;a href=&quot;mailto:madler@alumni.caltech.edu&quot;&gt;madler@alumni.caltech.edu&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you use the zlib library in a product, we would appreciate &lt;em&gt;not&lt;/em&gt; receiving lengthy legal documents to sign. The sources are provided for free but without warranty of any kind. The library has been entirely written by Jean-loup Gailly and Mark Adler; it does not include third-party code. We make all contributions to and distributions of this project solely in our personal capacity, and are not conveying any rights to any intellectual property of any third parties.&lt;/p&gt; 
&lt;p&gt;If you redistribute modified sources, we would appreciate that you include in the file ChangeLog history information documenting your changes. Please read the FAQ for more information on the distribution of modified source versions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RT-Thread/rt-thread</title>
      <link>https://github.com/RT-Thread/rt-thread</link>
      <description>&lt;p&gt;RT-Thread is an open source IoT Real-Time Operating System (RTOS). https://rt-thread.github.io/rt-thread/&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/logo.png&quot; width=&quot;60%&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/README_zh.md&quot;&gt;中文&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/README_es.md&quot;&gt;Español&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/README_de.md&quot;&gt;Deutsch&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/RT-Thread/rt-thread/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/RT-Thread/rt-thread?style=flat-square&amp;amp;logo=GitHub&quot; alt=&quot;GitHubStars&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitee.com/rtthread/rt-thread/stargazers&quot;&gt;&lt;img src=&quot;https://gitee.com/rtthread/rt-thread/badge/star.svg?theme=gvp&quot; alt=&quot;GiteeStars&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/RT-Thread/rt-thread/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/RT-Thread/rt-thread.svg?sanitize=true&quot; alt=&quot;GitHub&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/RT-Thread/rt-thread/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/RT-Thread/rt-thread.svg?sanitize=true&quot; alt=&quot;GitHub release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/RT-Thread/rt-thread?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&quot; alt=&quot;Gitter&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/RT-Thread/rt-thread/pulls&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-pr/RT-Thread/rt-thread.svg?sanitize=true&quot; alt=&quot;GitHub pull-requests&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/RT-Thread/rt-thread/pulls&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&quot; alt=&quot;PRs Welcome&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/RT-Thread/rt-thread/actions/workflows/bsp_buildings.yml&quot;&gt;&lt;img src=&quot;https://github.com/RT-Thread/rt-thread/actions/workflows/bsp_buildings.yml/badge.svg?sanitize=true&quot; alt=&quot;RT-Thread BSP Static Build Check&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hellogithub.com/repository/5816fc3c1e714d109631ceb377538ca9&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://api.hellogithub.com/v1/widgets/recommend.svg?rid=5816fc3c1e714d109631ceb377538ca9&amp;amp;claim_uid=kVCe5FXIMGAjJfy&quot; alt=&quot;Featured｜HelloGitHub&quot; style=&quot;width: 100px; height: 20px;&quot; width=&quot;250&quot; height=&quot;54&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;RT-Thread&lt;/h1&gt; 
&lt;p&gt;RT-Thread was born in 2006, it is an open source, neutral, and community-based real-time operating system (RTOS).&lt;/p&gt; 
&lt;p&gt;RT-Thread is mainly written in C language, easy to understand and easy to port(can be quickly port to a wide range of mainstream MCUs and module chips). It applies object-oriented programming methods to real-time system design, making the code elegant, structured, modular, and very tailorable.&lt;/p&gt; 
&lt;p&gt;RT-Thread has Standard version and Nano version. For resource-constrained microcontroller (MCU) systems, the Nano version that requires only 3KB Flash and 1.2KB RAM memory resources can be tailored with easy-to-use tools. For resource-rich IoT devices, RT-Thread can use the on-line software package management tool, together with system configuration tools, to achieve intuitive and rapid modular cutting, seamlessly import rich software packages; thus, achieving complex functions like Android&#39;s graphical interface and touch sliding effects, smart voice interaction effects, and so on.&lt;/p&gt; 
&lt;h2&gt;RT-Thread Architecture&lt;/h2&gt; 
&lt;p&gt;RT-Thread has not only a real-time kernel, but also rich components. Its architecture is as follows:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/architecture.png&quot; alt=&quot;architecture&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;It includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Kernel layer: RT-Thread kernel, the core part of RT-Thread, includes the implementation of objects in the kernel system, such as multi-threading and its scheduling, semaphore, mailbox, message queue, memory management, timer, etc.; libcpu/BSP (Chip Migration Related Files/Board Support Package) is closely related to hardware and consists of peripheral drivers and CPU porting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Components and Service Layer: Components are based on upper-level software on top of the RT-Thread kernel, such as virtual file systems, FinSH command-line interfaces, network frameworks, device frameworks, and more. Its modular design allows for high internal cohesion inside the components and low coupling between components.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://packages.rt-thread.org/en/index.html&quot;&gt;RT-Thread software package&lt;/a&gt;: A general-purpose software component running on the RT-Thread IoT operating system platform for different application areas, consisting of description information, source code or library files. RT-Thread provides an open package platform with officially available or developer-supplied packages that provide developers with a choice of reusable packages that are an important part of the RT-Thread ecosystem. The package ecosystem is critical to the choice of an operating system because these packages are highly reusable and modular, making it easy for application developers to build the system they want in the shortest amount of time. RT-Thread supports 450+ software packages.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RT-Thread Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Designed for resource-constrained devices, the minimum kernel requires only 1.2KB of RAM and 3 KB of Flash.&lt;/li&gt; 
 &lt;li&gt;A variety of standard interfaces, such as POSIX, CMSIS, C++ application environment.&lt;/li&gt; 
 &lt;li&gt;Has rich components and a prosperous and fast growing package ecosystem.&lt;/li&gt; 
 &lt;li&gt;Elegant code style, easy to use, read and master.&lt;/li&gt; 
 &lt;li&gt;High Scalability. RT-Thread has high-quality scalable software architecture, loose coupling, modularity, is easy to tailor and expand.&lt;/li&gt; 
 &lt;li&gt;Supports high-performance applications.&lt;/li&gt; 
 &lt;li&gt;Supports all mainstream compiling tools such as GCC, Keil and IAR.&lt;/li&gt; 
 &lt;li&gt;Supports a wide range of &lt;a href=&quot;https://www.rt-thread.io/board.html&quot;&gt;architectures and chips&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Code Catalogue&lt;/h2&gt; 
&lt;p&gt;RT-Thread source code catalog is shown as follow:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bsp&lt;/td&gt; 
   &lt;td&gt;Board Support Package based on the porting of various development boards&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;components&lt;/td&gt; 
   &lt;td&gt;Components, such as finsh shell, file system, protocol stack etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;documentation&lt;/td&gt; 
   &lt;td&gt;Related documents, like coding style, doxygen etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;examples&lt;/td&gt; 
   &lt;td&gt;Related sample code&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;include&lt;/td&gt; 
   &lt;td&gt;Head files of RT-Thread kernel&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;libcpu&lt;/td&gt; 
   &lt;td&gt;CPU porting code such as ARM/MIPS/RISC-V etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;src&lt;/td&gt; 
   &lt;td&gt;The source files for the RT-Thread kernel.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;tools&lt;/td&gt; 
   &lt;td&gt;The script files for the RT-Thread command build tool.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;RT-Thread has now been ported for nearly 200 development boards, most BSPs support MDK, IAR development environment and GCC compiler, and have provided default MDK and IAR project, which allows users to add their own application code directly based on the project. Each BSP has a similar directory structure, and most BSPs provide a README.md file, which is a markdown-format file that contains the basic introduction of BSP, and introduces how to simply start using BSP.&lt;/p&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;h2&gt;Supported Architectures&lt;/h2&gt; 
&lt;p&gt;RT-Thread supports many architectures, and has covered the major architectures in current applications. Architecture and chip manufacturer involved:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ARM Cortex-M0/M0+&lt;/strong&gt;：manufacturers like ST&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM Cortex-M3&lt;/strong&gt;：manufacturers like ST、Winner Micro、MindMotion, ect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM Cortex-M4&lt;/strong&gt;：manufacturers like ST、Infineon、Nuvoton、NXP、&lt;a href=&quot;https://github.com/RT-Thread/rt-thread/tree/master/bsp/nrf5x&quot;&gt;Nordic&lt;/a&gt;、GigaDevice、Realtek、Ambiq Micro, ect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM Cortex-M7&lt;/strong&gt;：manufacturers like ST、NXP&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM Cortex-M23&lt;/strong&gt;：manufacturers like GigaDevice&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM Cortex-M33&lt;/strong&gt;：manufacturers like ST&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM Cortex-R4&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM Cortex-A8/A9&lt;/strong&gt;：manufacturers like NXP&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM7&lt;/strong&gt;：manufacturers like Samsung&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM9&lt;/strong&gt;：manufacturers like Allwinner、Xilinx 、GOKE&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARM11&lt;/strong&gt;：manufacturers like Fullhan&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MIPS32&lt;/strong&gt;：manufacturers like loongson、Ingenic&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;RISC-V RV32E/RV32I[F]/RV64[D]&lt;/strong&gt;：manufacturers like sifive、&lt;a href=&quot;https://github.com/RT-Thread/rt-thread/tree/master/bsp/k210&quot;&gt;Canaan Kendryte&lt;/a&gt;、&lt;a href=&quot;https://github.com/RT-Thread/rt-thread/tree/master/bsp/bouffalo_lab&quot;&gt;bouffalo_lab&lt;/a&gt;、&lt;a href=&quot;https://nucleisys.com/&quot;&gt;Nuclei&lt;/a&gt;、&lt;a href=&quot;https://www.t-head.cn/&quot;&gt;T-Head&lt;/a&gt;、&lt;a href=&quot;https://github.com/RT-Thread/rt-thread/tree/master/bsp/hpmicro&quot;&gt;HPMicro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ARC&lt;/strong&gt;：manufacturers like SYNOPSYS&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DSP&lt;/strong&gt;：manufacturers like TI&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;C-Sky&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;x86&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported IDE and Compiler&lt;/h2&gt; 
&lt;p&gt;The main IDE/compilers supported by RT-Thread are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RT-Thread Studio IDE&lt;/li&gt; 
 &lt;li&gt;MDK KEIL&lt;/li&gt; 
 &lt;li&gt;IAR&lt;/li&gt; 
 &lt;li&gt;GCC&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RT-Thread Studio IDE&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.rt-thread.io/document/site/rtthread-studio/um/studio-user-manual/&quot;&gt;User Manual&lt;/a&gt; | &lt;a href=&quot;https://youtu.be/ucq5eJgZIQg&quot;&gt;Tutorial Videos&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;RT-Thread Studio IDE (a.k.a. RT-Studio) is a one-stop intergrated development environment built by RT-Thread team. It has a easy-to-use graphical configuration system and a wealth of software packages and components resources. RT-Studio has the features of project creation, configuration and management,as well as code editing, SDK management, build configuration, debugging configuration, program download and debug. We&#39;re looking to make the use of RT-Studio as intuitive as possible, reducing the duplication of work and improving the development efficiency.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/studio.gif&quot; alt=&quot;studio&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Env Tool&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/env/env.md&quot;&gt;User Manual&lt;/a&gt; | &lt;a href=&quot;https://www.youtube.com/watch?v=dEK94o_YoSo&quot;&gt;Tutorial Videos&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;In the early stage, RT-Thread team also created an auxiliary tool called Env. It is an auxiliary tool with a TUI (Text-based user interface). Developers can use Env tool to configure and generate the GCC, Keil MDK, and IAR projects.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/env.png&quot; alt=&quot;env&quot; /&gt;&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.rt-thread.io/document/site/tutorial/quick-start/introduction/introduction/&quot;&gt;RT-Thread Programming Guide&lt;/a&gt; | &lt;a href=&quot;https://www.rt-thread.io/studio.html&quot;&gt;RT-Thread Studio IDE&lt;/a&gt; | &lt;a href=&quot;https://github.com/RT-Thread-packages/kernel-sample&quot;&gt;Kernel Sample&lt;/a&gt; | &lt;a href=&quot;https://www.youtube.com/watch?v=ZMi1O-Rr7yc&amp;amp;list=PLXUV89C_M3G5KVw2IerI-pqApdSM_IaZo&quot;&gt;RT-Thread Beginners Guide&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Based on &lt;a href=&quot;https://github.com/RT-Thread/rt-thread/tree/master/bsp/stm32/stm32f103-blue-pill&quot;&gt;STM32F103 BluePill&lt;/a&gt; | &lt;a href=&quot;https://github.com/RT-Thread/rt-thread/tree/master/bsp/raspberry-pico&quot;&gt;Raspberry Pi Pico&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Simulator&lt;/h2&gt; 
&lt;p&gt;RT-Thread BSP can be compiled directly and downloaded to the corresponding development board for use. In addition, RT-Thread also provides qemu-vexpress-a9 BSP, which can be used without hardware platform. See the getting started guide below for details. Getting Started of QEMU with Env: &lt;a href=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/2.quick-start/quick_start_qemu/quick_start_qemu_windows.md&quot;&gt;Windows&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/2.quick-start/quick_start_qemu/quick_start_qemu_linux.md&quot;&gt;Linux Ubuntu&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/2.quick-start/quick_start_qemu/quick_start_qemu_macos.md&quot;&gt;Mac OS&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;RT-Thread follows the Apache License 2.0 free software license. It&#39;s completely open-source, can be used in commercial applications for free, does not require the disclosure of code, and has no potential commercial risk. License information and copyright information can generally be seen at the beginning of the code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/* Copyright (c) 2006-2018, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 * ...
 */
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Community&lt;/h1&gt; 
&lt;p&gt;RT-Thread is very grateful for the support from all community developers, and if you have any ideas, suggestions or questions in the process of using RT-Thread, RT-Thread can be reached by the following means, and we are also updating RT-Thread in real time on these channels. At the same time, any questions can be asked in the &lt;a href=&quot;https://github.com/RT-Thread/rt-thread/issues&quot;&gt;issue section of RT-Thread repository&lt;/a&gt; or &lt;a href=&quot;https://club.rt-thread.io/&quot;&gt;RT-Thread forum&lt;/a&gt;, and community members will answer them.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.rt-thread.io&quot;&gt;Website&lt;/a&gt; | &lt;a href=&quot;https://github.com/RT-Thread/rt-thread&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;https://twitter.com/rt_thread&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://www.linkedin.com/company/rt-thread-iot-os/posts/?feedView=all&quot;&gt;LinkedIn&lt;/a&gt; | &lt;a href=&quot;https://www.youtube.com/channel/UCdDHtIfSYPq4002r27ffqPw&quot;&gt;Youtube&lt;/a&gt; | &lt;a href=&quot;https://www.facebook.com/RT-Thread-IoT-OS-110395723808463/?modal=admin_todo_tour&quot;&gt;Facebook&lt;/a&gt; | &lt;a href=&quot;https://rt-thread.medium.com/&quot;&gt;Medium&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contribution&lt;/h1&gt; 
&lt;p&gt;If you are interested in RT-Thread and want to join in the development of RT-Thread and become a code contributor,please refer to the &lt;a href=&quot;https://raw.githubusercontent.com/RT-Thread/rt-thread/master/.github/CONTRIBUTING.md&quot;&gt;Code Contribution Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Thanks for the following contributors!&lt;/h2&gt; 
&lt;a href=&quot;https://github.com/RT-Thread/rt-thread/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contrib.rocks/image?repo=RT-Thread/rt-thread&quot; /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>mackron/miniaudio</title>
      <link>https://github.com/mackron/miniaudio</link>
      <description>&lt;p&gt;Audio playback and capture library written in C, in a single source file.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; &lt;a href=&quot;https://miniaud.io&quot;&gt;&lt;img src=&quot;https://miniaud.io/img/miniaudio_wide.png&quot; alt=&quot;miniaudio&quot; width=&quot;1280&quot; /&gt;&lt;/a&gt; &lt;br /&gt; &lt;/h1&gt; 
&lt;h4 align=&quot;center&quot;&gt;An audio playback and capture library in a single source file.&lt;/h4&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://discord.gg/9vpqbjU&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/712952679415939085?label=discord&amp;amp;logo=discord&amp;amp;style=flat-square&quot; alt=&quot;discord&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://x.com/mackron&quot;&gt;&lt;img alt=&quot;x&quot; src=&quot;https://img.shields.io/twitter/url?url=https%3A%2F%2Fx.com%2Fmackron&amp;amp;style=flat-square&amp;amp;logo=x&amp;amp;label=%40mackron&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/#features&quot;&gt;Features&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/#examples&quot;&gt;Examples&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/#building&quot;&gt;Building&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/#documentation&quot;&gt;Documentation&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/#supported-platforms&quot;&gt;Supported Platforms&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/#security&quot;&gt;Security&lt;/a&gt; - &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/#license&quot;&gt;License&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;miniaudio is written in C with no dependencies except the standard library and should compile clean on all major compilers without the need to install any additional development packages. All major desktop and mobile platforms are supported.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple build system with no external dependencies.&lt;/li&gt; 
 &lt;li&gt;Simple and flexible API.&lt;/li&gt; 
 &lt;li&gt;Low-level API for direct access to raw audio data.&lt;/li&gt; 
 &lt;li&gt;High-level API for sound management, mixing, effects and optional 3D spatialization.&lt;/li&gt; 
 &lt;li&gt;Flexible node graph system for advanced mixing and effect processing.&lt;/li&gt; 
 &lt;li&gt;Resource management for loading sound files.&lt;/li&gt; 
 &lt;li&gt;Decoding, with built-in support for WAV, FLAC, and MP3, in addition to being able to plug in custom decoders.&lt;/li&gt; 
 &lt;li&gt;Encoding (WAV only).&lt;/li&gt; 
 &lt;li&gt;Data conversion.&lt;/li&gt; 
 &lt;li&gt;Resampling, including custom resamplers.&lt;/li&gt; 
 &lt;li&gt;Channel mapping.&lt;/li&gt; 
 &lt;li&gt;Basic generation of waveforms and noise.&lt;/li&gt; 
 &lt;li&gt;Basic effects and filters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Refer to the &lt;a href=&quot;https://miniaud.io/docs/manual/&quot;&gt;Programming Manual&lt;/a&gt; for a more complete description of available features in miniaudio.&lt;/p&gt; 
&lt;h1&gt;Examples&lt;/h1&gt; 
&lt;p&gt;This example shows one way to play a sound using the high level API.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;miniaudio/miniaudio.h&quot;

#include &amp;lt;stdio.h&amp;gt;

int main()
{
    ma_result result;
    ma_engine engine;

    result = ma_engine_init(NULL, &amp;amp;engine);
    if (result != MA_SUCCESS) {
        return -1;
    }

    ma_engine_play_sound(&amp;amp;engine, &quot;sound.wav&quot;, NULL);

    printf(&quot;Press Enter to quit...&quot;);
    getchar();

    ma_engine_uninit(&amp;amp;engine);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This example shows how to decode and play a sound using the low level API.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;miniaudio/miniaudio.h&quot;

#include &amp;lt;stdio.h&amp;gt;

void data_callback(ma_device* pDevice, void* pOutput, const void* pInput, ma_uint32 frameCount)
{
    ma_decoder* pDecoder = (ma_decoder*)pDevice-&amp;gt;pUserData;
    if (pDecoder == NULL) {
        return;
    }

    ma_decoder_read_pcm_frames(pDecoder, pOutput, frameCount, NULL);

    (void)pInput;
}

int main(int argc, char** argv)
{
    ma_result result;
    ma_decoder decoder;
    ma_device_config deviceConfig;
    ma_device device;

    if (argc &amp;lt; 2) {
        printf(&quot;No input file.\n&quot;);
        return -1;
    }

    result = ma_decoder_init_file(argv[1], NULL, &amp;amp;decoder);
    if (result != MA_SUCCESS) {
        return -2;
    }

    deviceConfig = ma_device_config_init(ma_device_type_playback);
    deviceConfig.playback.format   = decoder.outputFormat;
    deviceConfig.playback.channels = decoder.outputChannels;
    deviceConfig.sampleRate        = decoder.outputSampleRate;
    deviceConfig.dataCallback      = data_callback;
    deviceConfig.pUserData         = &amp;amp;decoder;

    if (ma_device_init(NULL, &amp;amp;deviceConfig, &amp;amp;device) != MA_SUCCESS) {
        printf(&quot;Failed to open playback device.\n&quot;);
        ma_decoder_uninit(&amp;amp;decoder);
        return -3;
    }

    if (ma_device_start(&amp;amp;device) != MA_SUCCESS) {
        printf(&quot;Failed to start playback device.\n&quot;);
        ma_device_uninit(&amp;amp;device);
        ma_decoder_uninit(&amp;amp;decoder);
        return -4;
    }

    printf(&quot;Press Enter to quit...&quot;);
    getchar();

    ma_device_uninit(&amp;amp;device);
    ma_decoder_uninit(&amp;amp;decoder);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More examples can be found in the &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/examples&quot;&gt;examples&lt;/a&gt; folder or online here: &lt;a href=&quot;https://miniaud.io/docs/examples/&quot;&gt;https://miniaud.io/docs/examples/&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;p&gt;Just compile miniaudio.c like any other source file and include miniaudio.h like a normal header. There&#39;s no need to install any dependencies. On Windows and macOS there&#39;s no need to link to anything. On Linux and BSD just link to &lt;code&gt;-lpthread&lt;/code&gt; and &lt;code&gt;-lm&lt;/code&gt;. On iOS you need to compile as Objective-C. Link to &lt;code&gt;-ldl&lt;/code&gt; if you get errors about &lt;code&gt;dlopen()&lt;/code&gt;, etc.&lt;/p&gt; 
&lt;p&gt;If you get errors about undefined references to &lt;code&gt;__sync_val_compare_and_swap_8&lt;/code&gt;, &lt;code&gt;__atomic_load_8&lt;/code&gt;, etc. you need to link with &lt;code&gt;-latomic&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;ABI compatibility is not guaranteed between versions so take care if compiling as a DLL/SO. The suggested way to integrate miniaudio is by adding it directly to your source tree.&lt;/p&gt; 
&lt;p&gt;You can also use CMake if that&#39;s your preference.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Online documentation can be found here: &lt;a href=&quot;https://miniaud.io/docs/&quot;&gt;https://miniaud.io/docs/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Documentation can also be found at the top of &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/miniaudio.h&quot;&gt;miniaudio.h&lt;/a&gt; which is always the most up-to-date and authoritative source of information on how to use miniaudio. All other documentation is generated from this in-code documentation.&lt;/p&gt; 
&lt;h1&gt;Supported Platforms&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows&lt;/li&gt; 
 &lt;li&gt;macOS, iOS&lt;/li&gt; 
 &lt;li&gt;Linux&lt;/li&gt; 
 &lt;li&gt;FreeBSD / OpenBSD / NetBSD&lt;/li&gt; 
 &lt;li&gt;Android&lt;/li&gt; 
 &lt;li&gt;Raspberry Pi&lt;/li&gt; 
 &lt;li&gt;Emscripten / HTML5&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;miniaudio should compile clean on other platforms, but it will not include any support for playback or capture by default. To support that, you would need to implement a custom backend. You can do this without needing to modify the miniaudio source code. See the &lt;a href=&quot;https://raw.githubusercontent.com/mackron/miniaudio/master/examples/custom_backend.c&quot;&gt;custom_backend&lt;/a&gt; example.&lt;/p&gt; 
&lt;h2&gt;Backends&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;WASAPI&lt;/li&gt; 
 &lt;li&gt;DirectSound&lt;/li&gt; 
 &lt;li&gt;WinMM&lt;/li&gt; 
 &lt;li&gt;Core Audio (Apple)&lt;/li&gt; 
 &lt;li&gt;ALSA&lt;/li&gt; 
 &lt;li&gt;PulseAudio&lt;/li&gt; 
 &lt;li&gt;JACK&lt;/li&gt; 
 &lt;li&gt;sndio (OpenBSD)&lt;/li&gt; 
 &lt;li&gt;audio(4) (NetBSD and OpenBSD)&lt;/li&gt; 
 &lt;li&gt;OSS (FreeBSD)&lt;/li&gt; 
 &lt;li&gt;AAudio (Android 8.0+)&lt;/li&gt; 
 &lt;li&gt;OpenSL|ES (Android only)&lt;/li&gt; 
 &lt;li&gt;Web Audio (Emscripten)&lt;/li&gt; 
 &lt;li&gt;Null (Silence)&lt;/li&gt; 
 &lt;li&gt;Custom&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Security&lt;/h1&gt; 
&lt;p&gt;I deal with all security related issues publicly and transparently, and it can sometimes take a while before I get a chance to address it. If this is an issue for you, you need to use another library. The fastest way to get a bug fixed is to submit a pull request, but if this is impractical for you please post a ticket to the public GitHub issue tracker.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Your choice of either public domain or &lt;a href=&quot;https://github.com/aws/mit-0&quot;&gt;MIT No Attribution&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bellard/quickjs</title>
      <link>https://github.com/bellard/quickjs</link>
      <description>&lt;p&gt;Public repository of the QuickJS Javascript Engine.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The main documentation is in doc/quickjs.pdf or doc/quickjs.html.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>espressif/esp-idf</title>
      <link>https://github.com/espressif/esp-idf</link>
      <description>&lt;p&gt;Espressif IoT Development Framework. Official development framework for Espressif SoCs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Espressif IoT Development Framework&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/README_CN.md&quot;&gt;中文版&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS.&lt;/p&gt; 
&lt;h1&gt;ESP-IDF Release Support Schedule&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://dl.espressif.com/dl/esp-idf/support-periods.svg?v=1&quot; alt=&quot;Support Schedule&quot; /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please read &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/SUPPORT_POLICY.md&quot;&gt;the support policy&lt;/a&gt; and &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&quot;&gt;the documentation&lt;/a&gt; for more information about ESP-IDF versions.&lt;/li&gt; 
 &lt;li&gt;Please see the &lt;a href=&quot;https://www.espressif.com/en/support/documents/advisories?keys=&amp;amp;field_type_of_advisory_tid%5B%5D=817&quot;&gt;End-of-Life Advisories&lt;/a&gt; for information about ESP-IDF releases with discontinued support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;ESP-IDF Release and SoC Compatibility&lt;/h1&gt; 
&lt;p&gt;The following table shows ESP-IDF support of Espressif SoCs where &lt;img src=&quot;https://img.shields.io/badge/-preview-orange&quot; alt=&quot;alt text&quot; title=&quot;preview&quot; /&gt; and &lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt; denote preview status and support, respectively. The preview support is usually limited in time and intended for beta versions of chips. Please use an ESP-IDF release where the desired SoC is already supported.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;left&quot;&gt;Chip&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.1&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.2&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.3&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.4&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v5.5&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;v6.0&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-S2&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C3&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-S3&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32_S3&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C2&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32-C2&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C6&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32_C6&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-H2&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32_H2&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-P4&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32-P4&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C5&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32-C5&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-C61&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-supported-green&quot; alt=&quot;alt text&quot; title=&quot;supported&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/products/socs/esp32-c61&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;left&quot;&gt;ESP32-H4&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/-preview-orange&quot; alt=&quot;alt text&quot; title=&quot;preview&quot; /&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.espressif.com/en/news/ESP32-H4&quot;&gt;Announcement&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;There are variants of revisions for a series of chips. See &lt;a href=&quot;https://github.com/espressif/esp-idf/raw/master/COMPATIBILITY.md&quot;&gt;Compatibility Between ESP-IDF Releases and Revisions of Espressif SoCs&lt;/a&gt; for the details of the compatibility between ESP-IDF and chip revisions.&lt;/p&gt; 
&lt;p&gt;Espressif SoCs released before 2016 (ESP8266 and ESP8285) are supported by &lt;a href=&quot;https://github.com/espressif/ESP8266_RTOS_SDK&quot;&gt;RTOS SDK&lt;/a&gt; instead.&lt;/p&gt; 
&lt;h1&gt;Developing With ESP-IDF&lt;/h1&gt; 
&lt;h2&gt;Setting Up ESP-IDF&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://idf.espressif.com/&quot;&gt;https://idf.espressif.com/&lt;/a&gt; for links to detailed instructions on how to set up the ESP-IDF depending on chip you use.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each SoC series and each ESP-IDF release has its own documentation. Please see Section &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&quot;&gt;Versions&lt;/a&gt; on how to find documentation and how to checkout specific release of ESP-IDF.&lt;/p&gt; 
&lt;h3&gt;Non-GitHub forks&lt;/h3&gt; 
&lt;p&gt;ESP-IDF uses relative locations as its submodules URLs (&lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/.gitmodules&quot;&gt;.gitmodules&lt;/a&gt;). So they link to GitHub. If ESP-IDF is forked to a Git repository which is not on GitHub, you will need to run the script &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/tools/set-submodules-to-github.sh&quot;&gt;tools/set-submodules-to-github.sh&lt;/a&gt; after git clone.&lt;/p&gt; 
&lt;p&gt;The script sets absolute URLs for all submodules, allowing &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to complete. If cloning ESP-IDF from GitHub, this step is not needed.&lt;/p&gt; 
&lt;h2&gt;Finding a Project&lt;/h2&gt; 
&lt;p&gt;As well as the &lt;a href=&quot;https://github.com/espressif/esp-idf-template&quot;&gt;esp-idf-template&lt;/a&gt; project mentioned in Getting Started, ESP-IDF comes with some example projects in the &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/examples&quot;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; 
&lt;p&gt;Once you&#39;ve found the project you want to work with, change to its directory and you can configure and build it.&lt;/p&gt; 
&lt;p&gt;To start your own project based on an example, copy the example project directory outside of the ESP-IDF directory.&lt;/p&gt; 
&lt;h1&gt;Quick Reference&lt;/h1&gt; 
&lt;p&gt;See the Getting Started guide links above for a detailed setup guide. This is a quick reference for common commands when working with ESP-IDF projects:&lt;/p&gt; 
&lt;h2&gt;Setup Build Environment&lt;/h2&gt; 
&lt;p&gt;(See the Getting Started guide listed above for a full list of required steps with more details.)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install host build dependencies mentioned in the Getting Started guide.&lt;/li&gt; 
 &lt;li&gt;Run the install script to set up the build environment. The options include &lt;code&gt;install.bat&lt;/code&gt; or &lt;code&gt;install.ps1&lt;/code&gt; for Windows, and &lt;code&gt;install.sh&lt;/code&gt; or &lt;code&gt;install.fish&lt;/code&gt; for Unix shells.&lt;/li&gt; 
 &lt;li&gt;Run the export script on Windows (&lt;code&gt;export.bat&lt;/code&gt;) or source it on Unix (&lt;code&gt;source export.sh&lt;/code&gt;) in every shell environment before using ESP-IDF.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuring the Project&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;idf.py set-target &amp;lt;chip_name&amp;gt;&lt;/code&gt; sets the target of the project to &lt;code&gt;&amp;lt;chip_name&amp;gt;&lt;/code&gt;. Run &lt;code&gt;idf.py set-target&lt;/code&gt; without any arguments to see a list of supported targets.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;idf.py menuconfig&lt;/code&gt; opens a text-based configuration menu where you can configure the project.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Compiling the Project&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;idf.py build&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;... will compile app, bootloader and generate a partition table based on the config.&lt;/p&gt; 
&lt;h2&gt;Flashing the Project&lt;/h2&gt; 
&lt;p&gt;When the build finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this automatically by running:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;idf.py -p PORT flash&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Replace PORT with the name of your serial port (like &lt;code&gt;COM3&lt;/code&gt; on Windows, &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; on Linux, or &lt;code&gt;/dev/cu.usbserial-X&lt;/code&gt; on MacOS. If the &lt;code&gt;-p&lt;/code&gt; option is left out, &lt;code&gt;idf.py flash&lt;/code&gt; will try to flash the first available serial port.&lt;/p&gt; 
&lt;p&gt;This will flash the entire project (app, bootloader and partition table) to a new chip. The settings for serial port flashing can be configured with &lt;code&gt;idf.py menuconfig&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You don&#39;t need to run &lt;code&gt;idf.py build&lt;/code&gt; before running &lt;code&gt;idf.py flash&lt;/code&gt;, &lt;code&gt;idf.py flash&lt;/code&gt; will automatically rebuild anything which needs it.&lt;/p&gt; 
&lt;h2&gt;Viewing Serial Output&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;idf.py monitor&lt;/code&gt; target uses the &lt;a href=&quot;https://github.com/espressif/esp-idf-monitor&quot;&gt;esp-idf-monitor tool&lt;/a&gt; to display serial output from Espressif SoCs. esp-idf-monitor also has a range of features to decode crash output and interact with the device. &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&quot;&gt;Check the documentation page for details&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Exit the monitor by typing Ctrl-].&lt;/p&gt; 
&lt;p&gt;To build, flash and monitor output in one pass, you can run:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;idf.py flash monitor&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Compiling &amp;amp; Flashing Only the App&lt;/h2&gt; 
&lt;p&gt;After the initial flash, you may just want to build and flash just your app, not the bootloader and partition table:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;idf.py app&lt;/code&gt; - build just the app.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; - flash just the app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; will automatically rebuild the app if any source files have changed.&lt;/p&gt; 
&lt;p&gt;(In normal development there&#39;s no downside to reflashing the bootloader and partition table each time, if they haven&#39;t changed.)&lt;/p&gt; 
&lt;h2&gt;Erasing Flash&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;idf.py flash&lt;/code&gt; target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state, particularly when making partition table changes or OTA app updates. To erase the entire flash, run &lt;code&gt;idf.py erase-flash&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This can be combined with other targets, ie &lt;code&gt;idf.py -p PORT erase-flash flash&lt;/code&gt; will erase everything and then re-flash the new app, bootloader and partition table.&lt;/p&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Documentation for the latest version: &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/&quot;&gt;https://docs.espressif.com/projects/esp-idf/&lt;/a&gt;. This documentation is built from the &lt;a href=&quot;https://raw.githubusercontent.com/espressif/esp-idf/master/docs&quot;&gt;docs directory&lt;/a&gt; of this repository.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://youtu.be/J8zc8mMNKtc?feature=shared&quot;&gt;Beginner&#39;s Guide to Key Concepts and Resources of ESP-IDF&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;a href=&quot;https://esp32.com/&quot;&gt;esp32.com forum&lt;/a&gt; is a place to ask questions and find community resources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/espressif/esp-idf/issues&quot;&gt;Check the Issues section on github&lt;/a&gt; if you find a bug or have a feature request. Please check existing Issues before opening a new one.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you&#39;re interested in contributing to ESP-IDF, please check the &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/contribute/index.html&quot;&gt;Contributions Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>openssl/openssl</title>
      <link>https://github.com/openssl/openssl</link>
      <description>&lt;p&gt;TLS/SSL and crypto library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the OpenSSL Project&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.openssl.org&quot; title=&quot;OpenSSL Homepage&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/openssl/openssl/master/doc/images/openssl.svg?sanitize=true&quot; alt=&quot;openssl logo&quot; title=&quot;OpenSSL Logo&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/openssl/openssl/actions/workflows/ci.yml&quot; title=&quot;GitHub Actions CI&quot;&gt;&lt;img src=&quot;https://github.com/openssl/openssl/workflows/GitHub%20CI/badge.svg?sanitize=true&quot; alt=&quot;github actions ci badge&quot; title=&quot;GitHub Actions CI Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/openssl/openssl/actions/workflows/os-zoo.yml&quot;&gt;&lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/os-zoo.yml/badge.svg?sanitize=true&quot; alt=&quot;Nightly OS Zoo ci badge&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/openssl/openssl/actions/workflows/provider-compatibility.yml&quot;&gt;&lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/provider-compatibility.yml/badge.svg?sanitize=true&quot; alt=&quot;Provider Compatibility&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/openssl/openssl/actions/workflows/run_quic_interop.yml&quot;&gt;&lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/run_quic_interop.yml/badge.svg?sanitize=true&quot; alt=&quot;Quic Interop&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/openssl/openssl/actions/workflows/run-checker-daily.yml&quot;&gt;&lt;img src=&quot;https://github.com/openssl/openssl/actions/workflows/run-checker-daily.yml/badge.svg?sanitize=true&quot; alt=&quot;Daily checks&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://insights.linuxfoundation.org/project/openssl&quot;&gt;&lt;img src=&quot;https://insights.linuxfoundation.org/api/badge/health-score?project=openssl&quot; alt=&quot;LFX Health Score&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenSSL is a robust, commercial-grade, full-featured Open Source Toolkit for the TLS (formerly SSL), DTLS and QUIC protocols.&lt;/p&gt; 
&lt;p&gt;The protocol implementations are based on a full-strength general purpose cryptographic library, which can also be used stand-alone. Also included is a cryptographic module validated to conform with FIPS standards.&lt;/p&gt; 
&lt;p&gt;OpenSSL is descended from the SSLeay library developed by Eric A. Young and Tim J. Hudson.&lt;/p&gt; 
&lt;p&gt;The official Home Page of the OpenSSL Project is &lt;a href=&quot;https://www.openssl.org&quot; title=&quot;OpenSSL Homepage&quot;&gt;www.openssl.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#download&quot;&gt;Download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#build-and-install&quot;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#legalities&quot;&gt;Legalities&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;The OpenSSL toolkit includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libssl&lt;/strong&gt; an implementation of all TLS protocol versions up to TLSv1.3 (&lt;a href=&quot;https://tools.ietf.org/html/rfc8446&quot;&gt;RFC 8446&lt;/a&gt;), DTLS protocol versions up to DTLSv1.2 (&lt;a href=&quot;https://tools.ietf.org/html/rfc6347&quot;&gt;RFC 6347&lt;/a&gt;) and the QUIC version 1 protocol (&lt;a href=&quot;https://tools.ietf.org/html/rfc9000&quot;&gt;RFC 9000&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libcrypto&lt;/strong&gt; a full-strength general purpose cryptographic library. It constitutes the basis of the TLS implementation, but can also be used independently.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;openssl&lt;/strong&gt; the OpenSSL command line tool, a swiss army knife for cryptographic tasks, testing and analyzing. It can be used for&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;creation of key parameters&lt;/li&gt; 
   &lt;li&gt;creation of X.509 certificates, CSRs and CRLs&lt;/li&gt; 
   &lt;li&gt;calculation of message digests&lt;/li&gt; 
   &lt;li&gt;encryption and decryption&lt;/li&gt; 
   &lt;li&gt;SSL/TLS/DTLS and client and server tests&lt;/li&gt; 
   &lt;li&gt;QUIC client tests&lt;/li&gt; 
   &lt;li&gt;handling of S/MIME signed or encrypted mail&lt;/li&gt; 
   &lt;li&gt;and more...&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Download&lt;/h1&gt; 
&lt;h2&gt;For Production Use&lt;/h2&gt; 
&lt;p&gt;Source code tarballs of the official releases can be downloaded from &lt;a href=&quot;https://openssl-library.org/source/&quot;&gt;openssl-library.org/source/&lt;/a&gt;. The OpenSSL project does not distribute the toolkit in binary form.&lt;/p&gt; 
&lt;p&gt;However, for a large variety of operating systems precompiled versions of the OpenSSL toolkit are available. In particular, on Linux and other Unix operating systems, it is normally recommended to link against the precompiled shared libraries provided by the distributor or vendor.&lt;/p&gt; 
&lt;p&gt;We also maintain a list of third parties that produce OpenSSL binaries for various Operating Systems (including Windows) on the &lt;a href=&quot;https://github.com/openssl/openssl/wiki/Binaries&quot; title=&quot;List of third party OpenSSL binaries&quot;&gt;Binaries&lt;/a&gt; page on our wiki.&lt;/p&gt; 
&lt;h2&gt;For Testing and Development&lt;/h2&gt; 
&lt;p&gt;Although testing and development could in theory also be done using the source tarballs, having a local copy of the git repository with the entire project history gives you much more insight into the code base.&lt;/p&gt; 
&lt;p&gt;The main OpenSSL Git repository is private. There is a public GitHub mirror of it at &lt;a href=&quot;https://github.com/openssl/openssl&quot; title=&quot;OpenSSL GitHub Mirror&quot;&gt;github.com/openssl/openssl&lt;/a&gt;, which is updated automatically from the former on every commit.&lt;/p&gt; 
&lt;p&gt;A local copy of the Git repository can be obtained by cloning it from the GitHub mirror using&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/openssl/openssl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you intend to contribute to OpenSSL, either to fix bugs or contribute new features, you need to fork the GitHub mirror and clone your public fork instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/yourname/openssl.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is necessary because all development of OpenSSL nowadays is done via GitHub pull requests. For more details, see &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&quot;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Build and Install&lt;/h1&gt; 
&lt;p&gt;After obtaining the Source, have a look at the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/INSTALL.md&quot;&gt;INSTALL&lt;/a&gt; file for detailed instructions about building and installing OpenSSL. For some platforms, the installation instructions are amended by a platform specific document.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-UNIX.md&quot;&gt;Notes for UNIX-like platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-ANDROID.md&quot;&gt;Notes for Android platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-WINDOWS.md&quot;&gt;Notes for Windows platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-DJGPP.md&quot;&gt;Notes for the DOS platform with DJGPP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VMS.md&quot;&gt;Notes for the OpenVMS platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-PERL.md&quot;&gt;Notes on Perl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VALGRIND.md&quot;&gt;Notes on Valgrind&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Specific notes on upgrading to OpenSSL 3.x from previous versions can be found in the &lt;a href=&quot;https://docs.openssl.org/master/man7/ossl-guide-migration&quot; title=&quot;OpenSSL Migration Guide&quot;&gt;ossl-guide-migration(7ossl)&lt;/a&gt; manual page.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;h2&gt;README Files&lt;/h2&gt; 
&lt;p&gt;There are some README.md files in the top level of the source distribution containing additional information on specific topics.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-QUIC.md&quot;&gt;Information about the OpenSSL QUIC protocol implementation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-PROVIDERS.md&quot;&gt;Information about the OpenSSL Provider architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-FIPS.md&quot;&gt;Information about using the OpenSSL FIPS validated module&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/README-ENGINES.md&quot;&gt;Information about the legacy OpenSSL Engine architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The OpenSSL Guide&lt;/h2&gt; 
&lt;p&gt;There are some tutorial and introductory pages on some important OpenSSL topics within the &lt;a href=&quot;https://docs.openssl.org/master/man7/ossl-guide-introduction&quot; title=&quot;An introduction to OpenSSL&quot;&gt;OpenSSL Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual Pages&lt;/h2&gt; 
&lt;p&gt;The manual pages for the master branch and all current stable releases are available online.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openssl.org/master/&quot;&gt;OpenSSL master&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openssl.org/3.5/&quot;&gt;OpenSSL 3.5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openssl.org/3.4/&quot;&gt;OpenSSL 3.4&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openssl.org/3.3/&quot;&gt;OpenSSL 3.3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openssl.org/3.2/&quot;&gt;OpenSSL 3.2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openssl.org/3.0/&quot;&gt;OpenSSL 3.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demos&lt;/h2&gt; 
&lt;p&gt;There are numerous source code demos for using various OpenSSL capabilities in the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/demos&quot;&gt;demos subfolder&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Wiki&lt;/h2&gt; 
&lt;p&gt;There is a &lt;a href=&quot;https://github.com/openssl/openssl/wiki&quot; title=&quot;OpenSSL Wiki&quot;&gt;GitHub Wiki&lt;/a&gt; which is currently not very active.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;OpenSSL is licensed under the Apache License 2.0, which means that you are free to get and use it for commercial and non-commercial purposes as long as you fulfill its conditions.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/LICENSE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; file for more details.&lt;/p&gt; 
&lt;h1&gt;Support&lt;/h1&gt; 
&lt;p&gt;There are various ways to get in touch. The correct channel depends on your requirement. See the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/SUPPORT.md&quot;&gt;SUPPORT&lt;/a&gt; file for more details.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;If you are interested and willing to contribute to the OpenSSL project, please take a look at the &lt;a href=&quot;https://raw.githubusercontent.com/openssl/openssl/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; 
&lt;h1&gt;Legalities&lt;/h1&gt; 
&lt;p&gt;A number of nations restrict the use or export of cryptography. If you are potentially subject to such restrictions, you should seek legal advice before attempting to develop or distribute cryptographic code.&lt;/p&gt; 
&lt;h1&gt;Copyright&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 1998-2025 The OpenSSL Project Authors&lt;/p&gt; 
&lt;p&gt;Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson&lt;/p&gt; 
&lt;p&gt;All rights reserved.&lt;/p&gt; 
&lt;!-- Links  --&gt; 
&lt;!-- Logos and Badges --&gt;</description>
    </item>
    
    <item>
      <title>u-boot/u-boot</title>
      <link>https://github.com/u-boot/u-boot</link>
      <description>&lt;p&gt;&quot;Das U-Boot&quot; Source Tree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SPDX-License-Identifier: GPL-2.0+&lt;/h1&gt; 
&lt;h1&gt;&lt;/h1&gt; 
&lt;h1&gt;(C) Copyright 2000 - 2013&lt;/h1&gt; 
&lt;h1&gt;Wolfgang Denk, DENX Software Engineering, &lt;a href=&quot;mailto:wd@denx.de&quot;&gt;wd@denx.de&lt;/a&gt;.&lt;/h1&gt; 
&lt;h1&gt;Summary:&lt;/h1&gt; 
&lt;p&gt;This directory contains the source code for U-Boot, a boot loader for Embedded boards based on PowerPC, ARM, MIPS and several other processors, which can be installed in a boot ROM and used to initialize and test the hardware or to download and run application code.&lt;/p&gt; 
&lt;p&gt;The development of U-Boot is closely related to Linux: some parts of the source code originate in the Linux source tree, we have some header files in common, and special provision has been made to support booting of Linux images.&lt;/p&gt; 
&lt;p&gt;Some attention has been paid to make this software easily configurable and extendable. For instance, all monitor commands are implemented with the same call interface, so that it&#39;s very easy to add new commands. Also, instead of permanently adding rarely used code (for instance hardware test utilities) to the monitor, you can load and run it dynamically.&lt;/p&gt; 
&lt;h1&gt;Status:&lt;/h1&gt; 
&lt;p&gt;In general, all boards for which a default configuration file exists in the configs/ directory have been tested to some extent and can be considered &quot;working&quot;. In fact, many of them are used in production systems.&lt;/p&gt; 
&lt;p&gt;In case of problems you can use&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; scripts/get_maintainer.pl &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to identify the people or companies responsible for various boards and subsystems. Or have a look at the git log.&lt;/p&gt; 
&lt;h1&gt;Where to get help:&lt;/h1&gt; 
&lt;p&gt;In case you have questions about, problems with or contributions for U-Boot, you should send a message to the U-Boot mailing list at &lt;a href=&quot;mailto:u-boot@lists.denx.de&quot;&gt;u-boot@lists.denx.de&lt;/a&gt;. There is also an archive of previous traffic on the mailing list - please search the archive before asking FAQ&#39;s. Please see &lt;a href=&quot;https://lists.denx.de/pipermail/u-boot&quot;&gt;https://lists.denx.de/pipermail/u-boot&lt;/a&gt; and &lt;a href=&quot;https://marc.info/?l=u-boot&quot;&gt;https://marc.info/?l=u-boot&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Where to get source code:&lt;/h1&gt; 
&lt;p&gt;The U-Boot source code is maintained in the Git repository at &lt;a href=&quot;https://source.denx.de/u-boot/u-boot.git&quot;&gt;https://source.denx.de/u-boot/u-boot.git&lt;/a&gt; ; you can browse it online at &lt;a href=&quot;https://source.denx.de/u-boot/u-boot&quot;&gt;https://source.denx.de/u-boot/u-boot&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &quot;Tags&quot; links on this page allow you to download tarballs of any version you might be interested in. Official releases are also available from the DENX file server through HTTPS or FTP. &lt;a href=&quot;https://ftp.denx.de/pub/u-boot/&quot;&gt;https://ftp.denx.de/pub/u-boot/&lt;/a&gt; &lt;a href=&quot;ftp://ftp.denx.de/pub/u-boot/&quot;&gt;ftp://ftp.denx.de/pub/u-boot/&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Where we come from:&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;start from 8xxrom sources&lt;/li&gt; 
 &lt;li&gt;create PPCBoot project (&lt;a href=&quot;https://sourceforge.net/projects/ppcboot&quot;&gt;https://sourceforge.net/projects/ppcboot&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;clean up code&lt;/li&gt; 
 &lt;li&gt;make it easier to add custom boards&lt;/li&gt; 
 &lt;li&gt;make it possible to add other [PowerPC] CPUs&lt;/li&gt; 
 &lt;li&gt;extend functions, especially: 
  &lt;ul&gt; 
   &lt;li&gt;Provide extended interface to Linux boot loader&lt;/li&gt; 
   &lt;li&gt;S-Record download&lt;/li&gt; 
   &lt;li&gt;network boot&lt;/li&gt; 
   &lt;li&gt;ATA disk / SCSI ... boot&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;create ARMBoot project (&lt;a href=&quot;https://sourceforge.net/projects/armboot&quot;&gt;https://sourceforge.net/projects/armboot&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;add other CPU families (starting with ARM)&lt;/li&gt; 
 &lt;li&gt;create U-Boot project (&lt;a href=&quot;https://sourceforge.net/projects/u-boot&quot;&gt;https://sourceforge.net/projects/u-boot&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;current project page: see &lt;a href=&quot;https://www.denx.de/wiki/U-Boot&quot;&gt;https://www.denx.de/wiki/U-Boot&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Names and Spelling:&lt;/h1&gt; 
&lt;p&gt;The &quot;official&quot; name of this project is &quot;Das U-Boot&quot;. The spelling &quot;U-Boot&quot; shall be used in all written text (documentation, comments in source files etc.). Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;This is the README file for the U-Boot project.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;File names etc. shall be based on the string &quot;u-boot&quot;. Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;include/asm-ppc/u-boot.h

#include &amp;lt;asm/u-boot.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variable names, preprocessor constants etc. shall be either based on the string &quot;u_boot&quot; or on &quot;U_BOOT&quot;. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;U_BOOT_VERSION		u_boot_logo
IH_OS_U_BOOT		u_boot_hush_start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Software Configuration:&lt;/h1&gt; 
&lt;h2&gt;Selection of Processor Architecture and Board Type:&lt;/h2&gt; 
&lt;p&gt;For all supported boards there are ready-to-use default configurations available; just type &quot;make &amp;lt;board_name&amp;gt;_defconfig&quot;.&lt;/p&gt; 
&lt;p&gt;Example: For a TQM823L module type:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd u-boot
make TQM823L_defconfig
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: If you&#39;re looking for the default configuration file for a board you&#39;re sure used to be there but is now missing, check the file doc/README.scrapyard for a list of no longer supported boards.&lt;/p&gt; 
&lt;h2&gt;Sandbox Environment:&lt;/h2&gt; 
&lt;p&gt;U-Boot can be built natively to run on a Linux host using the &#39;sandbox&#39; board. This allows feature development which is not board- or architecture- specific to be undertaken on a native platform. The sandbox is also used to run some of U-Boot&#39;s tests.&lt;/p&gt; 
&lt;p&gt;See doc/arch/sandbox/sandbox.rst for more details.&lt;/p&gt; 
&lt;p&gt;The following options need to be configured:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CPU Type: Define exactly one, e.g. CONFIG_MPC85XX.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Board Type: Define exactly one, e.g. CONFIG_MPC8540ADS.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;85xx CPU Options: CONFIG_SYS_PPC64&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Specifies that the core is a 64-bit PowerPC implementation (implements
  the &quot;64&quot; category of the Power ISA). This is necessary for ePAPR
  compliance, among other possible reasons.

  CONFIG_SYS_FSL_ERRATUM_A004510

  Enables a workaround for erratum A004510.  If set,
  then CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV and
  CFG_SYS_FSL_CORENET_SNOOPVEC_COREONLY must be set.

  CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV
  CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV2 (optional)

  Defines one or two SoC revisions (low 8 bits of SVR)
  for which the A004510 workaround should be applied.

  The rest of SVR is either not relevant to the decision
  of whether the erratum is present (e.g. p2040 versus
  p2041) or is implied by the build target, which controls
  whether CONFIG_SYS_FSL_ERRATUM_A004510 is set.

  See Freescale App Note 4493 for more information about
  this erratum.

  CFG_SYS_FSL_CORENET_SNOOPVEC_COREONLY

  This is the value to write into CCSR offset 0x18600
  according to the A004510 workaround.

  CONFIG_SYS_FSL_SINGLE_SOURCE_CLK
  Single Source Clock is clocking mode present in some of FSL SoC&#39;s.
  In this mode, a single differential clock is used to supply
  clocks to the sysclock, ddrclock and usbclock.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Generic CPU options:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_SYS_FSL_DDR
  Freescale DDR driver in use. This type of DDR controller is
  found in mpc83xx, mpc85xx as well as some ARM core SoCs.

  CFG_SYS_FSL_DDR_ADDR
  Freescale DDR memory-mapped register base.

  CONFIG_SYS_FSL_IFC_CLK_DIV
  Defines divider of platform clock(clock input to IFC controller).

  CONFIG_SYS_FSL_LBC_CLK_DIV
  Defines divider of platform clock(clock input to eLBC controller).

  CFG_SYS_FSL_DDR_SDRAM_BASE_PHY
  Physical address from the view of DDR controllers. It is the
  same as CFG_SYS_DDR_SDRAM_BASE for  all Power SoCs. But
  it could be different for ARM SoCs.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ARM options: CFG_SYS_EXCEPTION_VECTORS_HIGH&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Select high exception vectors of the ARM core, e.g., do not
  clear the V bit of the c1 register of CP15.

  COUNTER_FREQUENCY
  Generic timer clock source frequency.

  COUNTER_FREQUENCY_REAL
  Generic timer clock source frequency if the real clock is
  different from COUNTER_FREQUENCY, and can only be determined
  at run time.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Linux Kernel Interface: CONFIG_OF_LIBFDT&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  New kernel versions are expecting firmware settings to be
  passed using flattened device trees (based on open firmware
  concepts).

  CONFIG_OF_LIBFDT
   * New libfdt-based support
   * Adds the &quot;fdt&quot; command
   * The bootm command automatically updates the fdt

  OF_TBCLK - The timebase frequency.

  boards with QUICC Engines require OF_QE to set UCC MAC
  addresses

  CONFIG_OF_IDE_FIXUP

  U-Boot can detect if an IDE device is present or not.
  If not, and this new config option is activated, U-Boot
  removes the ATA node from the DTS before booting Linux,
  so the Linux IDE driver does not probe the device and
  crash. This is needed for buggy hardware (uc101) where
  no pull down resistor is connected to the signal IDE5V_DD7.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;vxWorks boot parameters:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  bootvx constructs a valid bootline using the following
  environments variables: bootdev, bootfile, ipaddr, netmask,
  serverip, gatewayip, hostname, othbootargs.
  It loads the vxWorks image pointed bootfile.

  Note: If a &quot;bootargs&quot; environment is defined, it will override
  the defaults discussed just above.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Cache Configuration for ARM: CFG_SYS_PL310_BASE - Physical base address of PL310 controller register space&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Serial Ports: CFG_PL011_CLOCK&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have Amba PrimeCell PL011 UARTs, set this variable to
  the clock speed of the UARTs.

  CFG_PL01x_PORTS

  If you have Amba PrimeCell PL010 or PL011 UARTs on your board,
  define this to a list of base addresses for each (supported)
  port. See e.g. include/configs/versatile.h

  CONFIG_SERIAL_HW_FLOW_CONTROL

  Define this variable to enable hw flow control in serial driver.
  Current user of this option is drivers/serial/nsl16550.c driver
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Removal of commands If no commands are needed to boot, you can disable CONFIG_CMDLINE to remove them. In this case, the command line will not be available, and when U-Boot wants to execute the boot command (on start-up) it will call board_run_command() instead. This can reduce image size significantly for very simple boot procedures.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Regular expression support: CONFIG_REGEX If this variable is defined, U-Boot is linked against the SLRE (Super Light Regular Expression) library, which adds regex support to some commands, as for example &quot;env grep&quot; and &quot;setexpr&quot;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Watchdog: CFG_SYS_WATCHDOG_FREQ Some platforms automatically call WATCHDOG_RESET() from the timer interrupt handler every CFG_SYS_WATCHDOG_FREQ interrupts. If not set by the board configuration file, a default of CONFIG_SYS_HZ/2 (i.e. 500) is used. Setting CFG_SYS_WATCHDOG_FREQ to 0 disables calling WATCHDOG_RESET() from the timer interrupt.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;GPIO Support: The CFG_SYS_I2C_PCA953X_WIDTH option specifies a list of chip-ngpio pairs that tell the PCA953X driver the number of pins supported by a particular chip.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Note that if the GPIO device uses I2C, then the I2C interface
  must also be configured. See I2C Support, below.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;I/O tracing: When CONFIG_IO_TRACE is selected, U-Boot intercepts all I/O accesses and can checksum them or write a list of them out to memory. See the &#39;iotrace&#39; command for details. This is useful for testing device drivers since it can confirm that the driver behaves the same way before and after a code change. Currently this is supported on sandbox and arm. To add support for your architecture, add &#39;#include &amp;lt;iotrace.h&amp;gt;&#39; to the bottom of arch/
   &lt;arch&gt;
    /include/asm/io.h and test.
   &lt;/arch&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Example output from the &#39;iotrace stats&#39; command is below.
  Note that if the trace buffer is exhausted, the checksum will
  still continue to operate.

  	iotrace is enabled
  	Start:  10000000	(buffer start address)
  	Size:   00010000	(buffer size)
  	Offset: 00000120	(current buffer offset)
  	Output: 10000120	(start + offset)
  	Count:  00000018	(number of trace records)
  	CRC32:  9526fb66	(CRC32 of all trace records)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Timestamp Support:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  When CONFIG_TIMESTAMP is selected, the timestamp
  (date and time) of an image is printed by image
  commands like bootm or iminfo. This option is
  automatically enabled when you select CONFIG_CMD_DATE .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Partition Labels (disklabels) Supported: Zero or more of the following: CONFIG_MAC_PARTITION Apple&#39;s MacOS partition table. CONFIG_ISO_PARTITION ISO partition table, used on CDROM etc. CONFIG_EFI_PARTITION GPT partition table, common when EFI is the bootloader. Note 2TB partition limit; see disk/part_efi.c CONFIG_SCSI) you must configure support for at least one non-MTD partition type as well.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;NETWORK Support (PCI): CONFIG_E1000_SPI Utility code for direct access to the SPI bus on Intel 8257x. This does not do anything useful unless you set at least one of CONFIG_CMD_E1000 or CONFIG_E1000_SPI_GENERIC.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_NATSEMI
  Support for National dp83815 chips.

  CONFIG_NS8382X
  Support for National dp8382[01] gigabit chips.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;NETWORK Support (other): CONFIG_CALXEDA_XGMAC Support for the Calxeda XGMAC device&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_LAN91C96
  Support for SMSC&#39;s LAN91C96 chips.

  	CONFIG_LAN91C96_USE_32_BIT
  	Define this to enable 32 bit addressing

  	CFG_SYS_DAVINCI_EMAC_PHY_COUNT
  	Define this if you have more then 3 PHYs.

  CONFIG_FTGMAC100
  Support for Faraday&#39;s FTGMAC100 Gigabit SoC Ethernet

  	CONFIG_FTGMAC100_EGIGA
  	Define this to use GE link update with gigabit PHY.
  	Define this if FTGMAC100 is connected to gigabit PHY.
  	If your system has 10/100 PHY only, it might not occur
  	wrong behavior. Because PHY usually return timeout or
  	useless data when polling gigabit status and gigabit
  	control registers. This behavior won&#39;t affect the
  	correctnessof 10/100 link speed update.

  CONFIG_SH_ETHER
  Support for Renesas on-chip Ethernet controller
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;TPM Support: CONFIG_TPM Support TPM devices.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_TPM_TIS_INFINEON
  Support for Infineon i2c bus TPM devices. Only one device
  per system is supported at this time.

  	CONFIG_TPM_TIS_I2C_BURST_LIMITATION
  	Define the burst count bytes upper limit

  CONFIG_TPM_ST33ZP24
  Support for STMicroelectronics TPM devices. Requires DM_TPM support.

  	CONFIG_TPM_ST33ZP24_I2C
  	Support for STMicroelectronics ST33ZP24 I2C devices.
  	Requires TPM_ST33ZP24 and I2C.

  	CONFIG_TPM_ST33ZP24_SPI
  	Support for STMicroelectronics ST33ZP24 SPI devices.
  	Requires TPM_ST33ZP24 and SPI.

  CONFIG_TPM_ATMEL_TWI
  Support for Atmel TWI TPM device. Requires I2C support.

  CONFIG_TPM_TIS_LPC
  Support for generic parallel port TPM devices. Only one device
  per system is supported at this time.

  CONFIG_TPM
  Define this to enable the TPM support library which provides
  functional interfaces to some TPM commands.
  Requires support for a TPM device.

  CONFIG_TPM_AUTH_SESSIONS
  Define this to enable authorized functions in the TPM library.
  Requires CONFIG_TPM and CONFIG_SHA1.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;USB Support: At the moment only the UHCI host controller is supported (PIP405, MIP405); define CONFIG_USB_UHCI to enable it. define CONFIG_USB_KEYBOARD to enable the USB Keyboard and define CONFIG_USB_STORAGE to enable the USB storage devices. Note: Supported are USB Keyboards and USB Floppy drives (TEAC FD-05PUB).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_USB_DWC2_REG_ADDR the physical CPU address of the DWC2
  HW module registers.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;USB Device: Define the below if you wish to use the USB console. Once firmware is rebuilt from a serial console issue the command &quot;setenv stdin usbtty; setenv stdout usbtty&quot; and attach your USB cable. The Unix command &quot;dmesg&quot; should print it has found a new device. The environment variable usbtty can be set to gserial or cdc_acm to enable your device to appear to a USB host as a Linux gserial device or a Common Device Class Abstract Control Model serial device. If you select usbtty = gserial you should be able to enumerate a Linux host by # modprobe usbserial vendor=0xVendorID product=0xProductID else if using cdc_acm, simply setting the environment variable usbtty to be cdc_acm should suffice. The following might be defined in YourBoardName.h&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have a USB-IF assigned VendorID then you may wish to
  define your own vendor specific values either in BoardName.h
  or directly in usbd_vendor_info.h. If you don&#39;t define
  CONFIG_USBD_MANUFACTURER, CONFIG_USBD_PRODUCT_NAME,
  CONFIG_USBD_VENDORID and CONFIG_USBD_PRODUCTID, then U-Boot
  should pretend to be a Linux device to it&#39;s target host.

  	CONFIG_USBD_MANUFACTURER
  	Define this string as the name of your company for
  	- CONFIG_USBD_MANUFACTURER &quot;my company&quot;

  	CONFIG_USBD_PRODUCT_NAME
  	Define this string as the name of your product
  	- CONFIG_USBD_PRODUCT_NAME &quot;acme usb device&quot;

  	CONFIG_USBD_VENDORID
  	Define this as your assigned Vendor ID from the USB
  	Implementors Forum. This *must* be a genuine Vendor ID
  	to avoid polluting the USB namespace.
  	- CONFIG_USBD_VENDORID 0xFFFF

  	CONFIG_USBD_PRODUCTID
  	Define this as the unique Product ID
  	for your device
  	- CONFIG_USBD_PRODUCTID 0xFFFF
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MMC Support: CONFIG_SH_MMCIF Support for Renesas on-chip MMCIF controller&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  	CONFIG_SH_MMCIF_ADDR
  	Define the base address of MMCIF registers

  	CONFIG_SH_MMCIF_CLK
  	Define the clock frequency for MMCIF
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;USB Device Firmware Update (DFU) class support: CONFIG_DFU_OVER_USB This enables the USB portion of the DFU USB class&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_DFU_NAND
  This enables support for exposing NAND devices via DFU.

  CONFIG_DFU_RAM
  This enables support for exposing RAM via DFU.
  Note: DFU spec refer to non-volatile memory usage, but
  allow usages beyond the scope of spec - here RAM usage,
  one that would help mostly the developer.

  CONFIG_SYS_DFU_DATA_BUF_SIZE
  Dfu transfer uses a buffer before writing data to the
  raw storage device. Make the size (in bytes) of this buffer
  configurable. The size of this buffer is also configurable
  through the &quot;dfu_bufsiz&quot; environment variable.

  CONFIG_SYS_DFU_MAX_FILE_SIZE
  When updating files rather than the raw storage device,
  we use a static buffer to copy the file into and then write
  the buffer once we&#39;ve been given the whole file.  Define
  this to the maximum filesize (in bytes) for the buffer.
  Default is 4 MiB if undefined.

  DFU_DEFAULT_POLL_TIMEOUT
  Poll timeout [ms], is the timeout a device can send to the
  host. The host must wait for this timeout before sending
  a subsequent DFU_GET_STATUS request to the device.

  DFU_MANIFEST_POLL_TIMEOUT
  Poll timeout [ms], which the device sends to the host when
  entering dfuMANIFEST state. Host waits this timeout, before
  sending again an USB request to the device.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Keyboard Support: See Kconfig help for available keyboard drivers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MII/PHY support: CONFIG_PHY_CLOCK_FREQ (ppc4xx)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  The clock frequency of the MII bus

  CONFIG_PHY_CMD_DELAY (ppc4xx)

  Some PHY like Intel LXT971A need extra delay after
  command issued before MII status register can be read
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;BOOTP Recovery Mode: CONFIG_BOOTP_RANDOM_DELAY&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  If you have many targets in a network that try to
  boot using BOOTP, you may want to avoid that all
  systems send out BOOTP requests at precisely the same
  moment (which would happen for instance at recovery
  from a power failure, when all systems will try to
  boot, thus flooding the BOOTP server. Defining
  CONFIG_BOOTP_RANDOM_DELAY causes a random delay to be
  inserted before sending out BOOTP requests. The
  following delays are inserted then:

  1st BOOTP request:	delay 0 ... 1 sec
  2nd BOOTP request:	delay 0 ... 2 sec
  3rd BOOTP request:	delay 0 ... 4 sec
  4th and following
  BOOTP requests:		delay 0 ... 8 sec

  CFG_BOOTP_ID_CACHE_SIZE

  BOOTP packets are uniquely identified using a 32-bit ID. The
  server will copy the ID from client requests to responses and
  U-Boot will use this to determine if it is the destination of
  an incoming response. Some servers will check that addresses
  aren&#39;t in use before handing them out (usually using an ARP
  ping) and therefore take up to a few hundred milliseconds to
  respond. Network congestion may also influence the time it
  takes for a response to make it back to the client. If that
  time is too long, U-Boot will retransmit requests. In order
  to allow earlier responses to still be accepted after these
  retransmissions, U-Boot&#39;s BOOTP client keeps a small cache of
  IDs. The CFG_BOOTP_ID_CACHE_SIZE controls the size of this
  cache. The default is to keep IDs for up to four outstanding
  requests. Increasing this will allow U-Boot to accept offers
  from a BOOTP client in networks with unusually high latency.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;DHCP Advanced Options:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Link-local IP address negotiation: Negotiate with other link-local clients on the local network for an address that doesn&#39;t require explicit configuration. This is especially useful if a DHCP server cannot be guaranteed to exist in all environments that the device must operate.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; See doc/README.link-local for more information.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MAC address from environment variables&lt;/p&gt; &lt;pre&gt;&lt;code&gt; FDT_SEQ_MACADDR_FROM_ENV

 Fix-up device tree with MAC addresses fetched sequentially from
 environment variables. This config work on assumption that
 non-usable ethernet node of device-tree are either not present
 or their status has been marked as &quot;disabled&quot;.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CDP Options: CONFIG_CDP_DEVICE_ID&lt;/p&gt; &lt;pre&gt;&lt;code&gt; The device id used in CDP trigger frames.

 CONFIG_CDP_DEVICE_ID_PREFIX

 A two character string which is prefixed to the MAC address
 of the device.

 CONFIG_CDP_PORT_ID

 A printf format string which contains the ascii name of
 the port. Normally is set to &quot;eth%d&quot; which sets
 eth0 for the first Ethernet, eth1 for the second etc.

 CONFIG_CDP_CAPABILITIES

 A 32bit integer which indicates the device capabilities;
 0x00000010 for a normal host which does not forwards.

 CONFIG_CDP_VERSION

 An ascii string containing the version of the software.

 CONFIG_CDP_PLATFORM

 An ascii string containing the name of the platform.

 CONFIG_CDP_TRIGGER

 A 32bit integer sent on the trigger.

 CONFIG_CDP_POWER_CONSUMPTION

 A 16bit integer containing the power consumption of the
 device in .1 of milliwatts.

 CONFIG_CDP_APPLIANCE_VLAN_TYPE

 A byte containing the id of the VLAN.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Status LED: CONFIG_LED_STATUS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Several configurations allow to display the current
  status using a LED. For instance, the LED will blink
  fast while running U-Boot code, stop blinking as
  soon as a reply to a BOOTP request was received, and
  start blinking slow once the Linux kernel is running
  (supported by a status LED driver in the Linux
  kernel). Defining CONFIG_LED_STATUS enables this
  feature in U-Boot.

  Additional options:

  CONFIG_LED_STATUS_GPIO
  The status LED can be connected to a GPIO pin.
  In such cases, the gpio_led driver can be used as a
  status LED backend implementation. Define CONFIG_LED_STATUS_GPIO
  to include the gpio_led driver in the U-Boot binary.

  CFG_GPIO_LED_INVERTED_TABLE
  Some GPIO connected LEDs may have inverted polarity in which
  case the GPIO high value corresponds to LED off state and
  GPIO low value corresponds to LED on state.
  In such cases CFG_GPIO_LED_INVERTED_TABLE may be defined
  with a list of GPIO LEDs that have inverted polarity.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;I2C Support: CFG_SYS_NUM_I2C_BUSES Hold the number of i2c buses you want to use.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CFG_SYS_I2C_BUSES
  hold a list of buses you want to use

   CFG_SYS_I2C_BUSES	{{0, {I2C_NULL_HOP}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 1}}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 2}}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 3}}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 4}}}, \
  			{0, {{I2C_MUX_PCA9547, 0x70, 5}}}, \
  			{1, {I2C_NULL_HOP}}, \
  			{1, {{I2C_MUX_PCA9544, 0x72, 1}}}, \
  			{1, {{I2C_MUX_PCA9544, 0x72, 2}}}, \
  			}

  which defines
  	bus 0 on adapter 0 without a mux
  	bus 1 on adapter 0 with a PCA9547 on address 0x70 port 1
  	bus 2 on adapter 0 with a PCA9547 on address 0x70 port 2
  	bus 3 on adapter 0 with a PCA9547 on address 0x70 port 3
  	bus 4 on adapter 0 with a PCA9547 on address 0x70 port 4
  	bus 5 on adapter 0 with a PCA9547 on address 0x70 port 5
  	bus 6 on adapter 1 without a mux
  	bus 7 on adapter 1 with a PCA9544 on address 0x72 port 1
  	bus 8 on adapter 1 with a PCA9544 on address 0x72 port 2

  If you do not have i2c muxes on your board, omit this define.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Legacy I2C Support: If you use the software i2c interface (CONFIG_SYS_I2C_SOFT) then the following macros need to be defined (examples are from include/configs/lwmon.h):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  I2C_INIT

  (Optional). Any commands necessary to enable the I2C
  controller or configure ports.

  eg: #define I2C_INIT (immr-&amp;gt;im_cpm.cp_pbdir |=	PB_SCL)

  I2C_ACTIVE

  The code necessary to make the I2C data line active
  (driven).  If the data line is open collector, this
  define can be null.

  eg: #define I2C_ACTIVE (immr-&amp;gt;im_cpm.cp_pbdir |=  PB_SDA)

  I2C_TRISTATE

  The code necessary to make the I2C data line tri-stated
  (inactive).  If the data line is open collector, this
  define can be null.

  eg: #define I2C_TRISTATE (immr-&amp;gt;im_cpm.cp_pbdir &amp;amp;= ~PB_SDA)

  I2C_READ

  Code that returns true if the I2C data line is high,
  false if it is low.

  eg: #define I2C_READ ((immr-&amp;gt;im_cpm.cp_pbdat &amp;amp; PB_SDA) != 0)

  I2C_SDA(bit)

  If &amp;lt;bit&amp;gt; is true, sets the I2C data line high. If it
  is false, it clears it (low).

  eg: #define I2C_SDA(bit) \
  	if(bit) immr-&amp;gt;im_cpm.cp_pbdat |=  PB_SDA; \
  	else	immr-&amp;gt;im_cpm.cp_pbdat &amp;amp;= ~PB_SDA

  I2C_SCL(bit)

  If &amp;lt;bit&amp;gt; is true, sets the I2C clock line high. If it
  is false, it clears it (low).

  eg: #define I2C_SCL(bit) \
  	if(bit) immr-&amp;gt;im_cpm.cp_pbdat |=  PB_SCL; \
  	else	immr-&amp;gt;im_cpm.cp_pbdat &amp;amp;= ~PB_SCL

  I2C_DELAY

  This delay is invoked four times per clock cycle so this
  controls the rate of data transfer.  The data rate thus
  is 1 / (I2C_DELAY * 4). Often defined to be something
  like:

  #define I2C_DELAY  udelay(2)

  CONFIG_SOFT_I2C_GPIO_SCL / CONFIG_SOFT_I2C_GPIO_SDA

  If your arch supports the generic GPIO framework (asm/gpio.h),
  then you may alternatively define the two GPIOs that are to be
  used as SCL / SDA.  Any of the previous I2C_xxx macros will
  have GPIO-based defaults assigned to them as appropriate.

  You should define these to the GPIO value as given directly to
  the generic GPIO functions.

  CFG_SYS_I2C_NOPROBES

  This option specifies a list of I2C devices that will be skipped
  when the &#39;i2c probe&#39; command is issued.

  e.g.
  	#define CFG_SYS_I2C_NOPROBES {0x50,0x68}

  will skip addresses 0x50 and 0x68 on a board with one I2C bus

  CONFIG_SOFT_I2C_READ_REPEATED_START

  defining this will force the i2c_read() function in
  the soft_i2c driver to perform an I2C repeated start
  between writing the address pointer and reading the
  data.  If this define is omitted the default behaviour
  of doing a stop-start sequence will be used.  Most I2C
  devices can use either method, but some require one or
  the other.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SPI Support: CONFIG_SPI&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Enables SPI driver (so far only tested with
  SPI EEPROM, also an instance works with Crystal A/D and
  D/As on the SACSng board)

  CFG_SYS_SPI_MXC_WAIT
  Timeout for waiting until spi transfer completed.
  default: (CONFIG_SYS_HZ/100)     /* 10 ms */
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;FPGA Support: CONFIG_FPGA&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Enables FPGA subsystem.

  CONFIG_FPGA_&amp;lt;vendor&amp;gt;

  Enables support for specific chip vendors.
  (ALTERA, XILINX)

  CONFIG_FPGA_&amp;lt;family&amp;gt;

  Enables support for FPGA family.
  (SPARTAN2, SPARTAN3, VIRTEX2, CYCLONE2, ACEX1K, ACEX)

  CONFIG_SYS_FPGA_CHECK_BUSY

  Enable checks on FPGA configuration interface busy
  status by the configuration function. This option
  will require a board or device specific function to
  be written.

  CFG_FPGA_DELAY

  If defined, a function that provides delays in the FPGA
  configuration driver.

  CFG_SYS_FPGA_CHECK_ERROR

  Check for configuration errors during FPGA bitfile
  loading. For example, abort during Virtex II
  configuration if the INIT_B line goes low (which
  indicated a CRC error).

  CFG_SYS_FPGA_WAIT_INIT

  Maximum time to wait for the INIT_B line to de-assert
  after PROB_B has been de-asserted during a Virtex II
  FPGA configuration sequence. The default time is 500
  ms.

  CFG_SYS_FPGA_WAIT_BUSY

  Maximum time to wait for BUSY to de-assert during
  Virtex II FPGA configuration. The default is 5 ms.

  CFG_SYS_FPGA_WAIT_CONFIG

  Time to wait after FPGA configuration. The default is
  200 ms.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Vendor Parameter Protection:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  U-Boot considers the values of the environment
  variables &quot;serial#&quot; (Board Serial Number) and
  &quot;ethaddr&quot; (Ethernet Address) to be parameters that
  are set once by the board vendor / manufacturer, and
  protects these variables from casual modification by
  the user. Once set, these variables are read-only,
  and write or delete attempts are rejected. You can
  change this behaviour:

  If CONFIG_ENV_OVERWRITE is #defined in your config
  file, the write protection for vendor parameters is
  completely disabled. Anybody can change or delete
  these parameters.

  The same can be accomplished in a more flexible way
  for any variable by configuring the type of access
  to allow for those variables in the &quot;.flags&quot; variable
  or define CFG_ENV_FLAGS_LIST_STATIC.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Protected RAM: CFG_PRAM&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Define this variable to enable the reservation of
  &quot;protected RAM&quot;, i. e. RAM which is not overwritten
  by U-Boot. Define CFG_PRAM to hold the number of
  kB you want to reserve for pRAM. You can overwrite
  this default value by defining an environment
  variable &quot;pram&quot; to the number of kB you want to
  reserve. Note that the board info structure will
  still show the full amount of RAM. If pRAM is
  reserved, a new environment variable &quot;mem&quot; will
  automatically be defined to hold the amount of
  remaining RAM in a form that can be passed as boot
  argument to Linux, for instance like that:

  	setenv bootargs ... mem=\${mem}
  	saveenv

  This way you can tell Linux not to use this memory,
  either, which results in a memory region that will
  not be affected by reboots.

  *WARNING* If your board configuration uses automatic
  detection of the RAM size, you must make sure that
  this memory test is non-destructive. So far, the
  following board configurations are known to be
  &quot;pRAM-clean&quot;:

  	IVMS8, IVML24, SPD8xx,
  	HERMES, IP860, RPXlite, LWMON,
  	FLAGADM
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Error Recovery: Note:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  In the current implementation, the local variables
  space and global environment variables space are
  separated. Local variables are those you define by
  simply typing `name=value&#39;. To access a local
  variable later on, you have write `$name&#39; or
  `${name}&#39;; to execute the contents of a variable
  directly type `$name&#39; at the command prompt.

  Global environment variables are those you use
  setenv/printenv to work with. To run a command stored
  in such a variable, you need to use the run command,
  and you must not use the &#39;$&#39; sign to access them.

  To store commands and special characters in a
  variable, please use double quotation marks
  surrounding the whole text of the variable, instead
  of the backslashes before semicolons and special
  symbols.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Default Environment: CFG_EXTRA_ENV_SETTINGS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Define this to contain any number of null terminated
  strings (variable = value pairs) that will be part of
  the default environment compiled into the boot image.

  For example, place something like this in your
  board&#39;s config file:

  #define CFG_EXTRA_ENV_SETTINGS \
  	&quot;myvar1=value1\0&quot; \
  	&quot;myvar2=value2\0&quot;

  Warning: This method is based on knowledge about the
  internal format how the environment is stored by the
  U-Boot code. This is NOT an official, exported
  interface! Although it is unlikely that this format
  will change soon, there is no guarantee either.
  You better know what you are doing here.

  Note: overly (ab)use of the default environment is
  discouraged. Make sure to check other ways to preset
  the environment like the &quot;source&quot; command or the
  boot command first.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Automatic software updates via TFTP server CONFIG_UPDATE_TFTP CONFIG_UPDATE_TFTP_CNT_MAX CONFIG_UPDATE_TFTP_MSEC_MAX&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  These options enable and control the auto-update feature;
  for a more detailed description refer to doc/README.update.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MTD Support (mtdparts command, UBI support) CONFIG_MTD_UBI_WL_THRESHOLD This parameter defines the maximum difference between the highest erase counter value and the lowest erase counter value of eraseblocks of UBI devices. When this threshold is exceeded, UBI starts performing wear leveling by means of moving data from eraseblock with low erase counter to eraseblocks with high erase counter.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  The default value should be OK for SLC NAND flashes, NOR flashes and
  other flashes which have eraseblock life-cycle 100000 or more.
  However, in case of MLC NAND flashes which typically have eraseblock
  life-cycle less than 10000, the threshold should be lessened (e.g.,
  to 128 or 256, although it does not have to be power of 2).

  default: 4096

  CONFIG_MTD_UBI_BEB_LIMIT
  This option specifies the maximum bad physical eraseblocks UBI
  expects on the MTD device (per 1024 eraseblocks). If the
  underlying flash does not admit of bad eraseblocks (e.g. NOR
  flash), this value is ignored.

  NAND datasheets often specify the minimum and maximum NVM
  (Number of Valid Blocks) for the flashes&#39; endurance lifetime.
  The maximum expected bad eraseblocks per 1024 eraseblocks
  then can be calculated as &quot;1024 * (1 - MinNVB / MaxNVB)&quot;,
  which gives 20 for most NANDs (MaxNVB is basically the total
  count of eraseblocks on the chip).

  To put it differently, if this value is 20, UBI will try to
  reserve about 1.9% of physical eraseblocks for bad blocks
  handling. And that will be 1.9% of eraseblocks on the entire
  NAND chip, not just the MTD partition UBI attaches. This means
  that if you have, say, a NAND flash chip admits maximum 40 bad
  eraseblocks, and it is split on two MTD partitions of the same
  size, UBI will reserve 40 eraseblocks when attaching a
  partition.

  default: 20

  CONFIG_MTD_UBI_FASTMAP
  Fastmap is a mechanism which allows attaching an UBI device
  in nearly constant time. Instead of scanning the whole MTD device it
  only has to locate a checkpoint (called fastmap) on the device.
  The on-flash fastmap contains all information needed to attach
  the device. Using fastmap makes only sense on large devices where
  attaching by scanning takes long. UBI will not automatically install
  a fastmap on old images, but you can set the UBI parameter
  CONFIG_MTD_UBI_FASTMAP_AUTOCONVERT to 1 if you want so. Please note
  that fastmap-enabled images are still usable with UBI implementations
  without	fastmap support. On typical flash devices the whole fastmap
  fits into one PEB. UBI will reserve PEBs to hold two fastmaps.

  CONFIG_MTD_UBI_FASTMAP_AUTOCONVERT
  Set this parameter to enable fastmap automatically on images
  without a fastmap.
  default: 0

  CONFIG_MTD_UBI_FM_DEBUG
  Enable UBI fastmap debug
  default: 0
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SPL framework CONFIG_SPL Enable building of SPL globally.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  CONFIG_SPL_PANIC_ON_RAW_IMAGE
  When defined, SPL will panic() if the image it has
  loaded does not have a signature.
  Defining this is useful when code which loads images
  in SPL cannot guarantee that absolutely all read errors
  will be caught.
  An example is the LPC32XX MLC NAND driver, which will
  consider that a completely unreadable NAND block is bad,
  and thus should be skipped silently.

  CONFIG_SPL_DISPLAY_PRINT
  For ARM, enable an optional function to print more information
  about the running system.

  CONFIG_SPL_MPC83XX_WAIT_FOR_NAND
  Set this for NAND SPL on PPC mpc83xx targets, so that
  start.S waits for the rest of the SPL to load before
  continuing (the hardware starts execution after just
  loading the first page rather than the full 4K).

  CONFIG_SPL_UBI
  Support for a lightweight UBI (fastmap) scanner and
  loader

  CONFIG_SYS_NAND_5_ADDR_CYCLE, CONFIG_SYS_NAND_PAGE_SIZE,
  CONFIG_SYS_NAND_OOBSIZE, CONFIG_SYS_NAND_BLOCK_SIZE,
  CONFIG_SYS_NAND_BAD_BLOCK_POS, CFG_SYS_NAND_ECCPOS,
  CFG_SYS_NAND_ECCSIZE, CFG_SYS_NAND_ECCBYTES
  Defines the size and behavior of the NAND that SPL uses
  to read U-Boot

  CFG_SYS_NAND_U_BOOT_DST
  Location in memory to load U-Boot to

  CFG_SYS_NAND_U_BOOT_SIZE
  Size of image to load

  CFG_SYS_NAND_U_BOOT_START
  Entry point in loaded image to jump to

  CONFIG_SPL_RAM_DEVICE
  Support for running image already present in ram, in SPL binary

  CONFIG_SPL_FIT_PRINT
  Printing information about a FIT image adds quite a bit of
  code to SPL. So this is normally disabled in SPL. Use this
  option to re-enable it. This will affect the output of the
  bootm command when booting a FIT image.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Interrupt support (PPC):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  There are common interrupt_init() and timer_interrupt()
  for all PPC archs. interrupt_init() calls interrupt_init_cpu()
  for CPU specific initialization. interrupt_init_cpu()
  should set decrementer_count to appropriate value. If
  CPU resets decrementer automatically after interrupt
  (ppc4xx) it should set decrementer_count to zero.
  timer_interrupt() calls timer_interrupt_cpu() for CPU
  specific handling. If board has watchdog / status_led
  / other_activity_monitor it works automatically from
  general timer_interrupt().
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Board initialization settings:&lt;/h2&gt; 
&lt;p&gt;During Initialization u-boot calls a number of board specific functions to allow the preparation of board specific prerequisites, e.g. pin setup before drivers are initialized. To enable these callbacks the following configuration macros have to be defined. Currently this is architecture specific, so please check arch/your_architecture/lib/board.c typically in board_init_f() and board_init_r().&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CONFIG_BOARD_EARLY_INIT_F: Call board_early_init_f()&lt;/li&gt; 
 &lt;li&gt;CONFIG_BOARD_EARLY_INIT_R: Call board_early_init_r()&lt;/li&gt; 
 &lt;li&gt;CONFIG_BOARD_LATE_INIT: Call board_late_init()&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration Settings:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_LONGHELP: Defined when you want long help messages included; undefine this when you&#39;re short of memory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_HELP_CMD_WIDTH: Defined when you want to override the default width of the commands listed in the &#39;help&#39; command output.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_PROMPT: This is what U-Boot prints on the console to prompt for user input.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_BAUDRATE_TABLE: List of legal baudrate settings for this board.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_MEM_RESERVE_SECURE Only implemented for ARMv8 for now. If defined, the size of CFG_SYS_MEM_RESERVE_SECURE memory is substracted from total RAM and won&#39;t be reported to OS. This memory can be used as secure memory. A variable gd-&amp;gt;arch.secure_ram is used to track the location. In systems the RAM base is not zero, or RAM is divided into banks, this variable needs to be recalcuated to get the address.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_SDRAM_BASE: Physical start address of SDRAM. &lt;em&gt;Must&lt;/em&gt; be 0 here.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_FLASH_BASE: Physical start address of Flash memory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_MALLOC_LEN: Size of DRAM reserved for malloc() use.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_BOOTMAPSZ: Maximum size of memory mapped by the startup code of the Linux kernel; all data that must be processed by the Linux kernel (bd_info, boot arguments, FDT blob if used) must be put below this limit, unless &quot;bootm_low&quot; environment variable is defined and non-zero. In such case all data for the Linux kernel must be between &quot;bootm_low&quot; and &quot;bootm_low&quot; + CFG_SYS_BOOTMAPSZ. The environment variable &quot;bootm_mapsize&quot; will override the value of CFG_SYS_BOOTMAPSZ. If CFG_SYS_BOOTMAPSZ is undefined, then the value in &quot;bootm_size&quot; will be used instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_BOOT_GET_CMDLINE: Enables allocating and saving kernel cmdline in space between &quot;bootm_low&quot; and &quot;bootm_low&quot; + BOOTMAPSZ.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_BOOT_GET_KBD: Enables allocating and saving a kernel copy of the bd_info in space between &quot;bootm_low&quot; and &quot;bootm_low&quot; + BOOTMAPSZ.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_PROTECTION If defined, hardware flash sectors protection is used instead of U-Boot software protection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_CFI: Define if the flash driver uses extra elements in the common flash structure for storing flash geometry.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FLASH_CFI_DRIVER This option also enables the building of the cfi_flash driver in the drivers directory&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FLASH_CFI_MTD This option enables the building of the cfi_mtd driver in the drivers directory. The driver exports CFI flash to the MTD layer.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FLASH_USE_BUFFER_WRITE Use buffered writes to flash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_ENV_FLAGS_LIST_DEFAULT&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_ENV_FLAGS_LIST_STATIC Enable validation of the values given to environment variables when calling env set. Variables can be restricted to only decimal, hexadecimal, or boolean. If CONFIG_CMD_NET is also defined, the variables can also be restricted to IP address or MAC address.&lt;/p&gt; &lt;p&gt;The format of the list is: type_attribute = [s|d|x|b|i|m] access_attribute = [a|r|o|c] attributes = type_attribute[access_attribute] entry = variable_name[:attributes] list = entry[,list]&lt;/p&gt; &lt;p&gt;The type attributes are: s - String (default) d - Decimal x - Hexadecimal b - Boolean ([1yYtT|0nNfF]) i - IP address m - MAC address&lt;/p&gt; &lt;p&gt;The access attributes are: a - Any (default) r - Read-only o - Write-once c - Change-default&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;CONFIG_ENV_FLAGS_LIST_DEFAULT Define this to a list (string) to define the &quot;.flags&quot; environment variable in the default or embedded environment.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;CFG_ENV_FLAGS_LIST_STATIC Define this to a list (string) to define validation that should be done if an entry is not found in the &quot;.flags&quot; environment variable. To override a setting in the static list, simply add an entry for the same variable name to the &quot;.flags&quot; variable.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;If CONFIG_REGEX is defined, the variable_name above is evaluated as a regular expression. This allows multiple variables to define the same flags without explicitly listing them for each variable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following definitions that deal with the placement and management of environment data (variable area); in general, we support the following configurations:&lt;/p&gt; 
&lt;p&gt;BE CAREFUL! The first access to the environment happens quite early in U-Boot initialization (when we try to get the setting of for the console baudrate). You &lt;em&gt;MUST&lt;/em&gt; have mapped your NVRAM area then, or U-Boot will hang.&lt;/p&gt; 
&lt;p&gt;Please note that even with NVRAM we still use a copy of the environment in RAM: we could work on NVRAM directly, but we want to keep settings there always unmodified except somebody uses &quot;saveenv&quot; to save the current settings.&lt;/p&gt; 
&lt;p&gt;BE CAREFUL! For some special cases, the local device can not use &quot;saveenv&quot; command. For example, the local device will get the environment stored in a remote NOR flash by SRIO or PCIE link, but it can not erase, write this NOR flash by SRIO or PCIE interface.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_NAND_ENV_DST&lt;/p&gt; &lt;p&gt;Defines address in RAM to which the nand_spl code should copy the environment. If redundant environment is used, it will be copied to CONFIG_NAND_ENV_DST + CONFIG_ENV_SIZE.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please note that the environment is read-only until the monitor has been relocated to RAM and a RAM copy of the environment has been created; also, when using EEPROM you will have to use env_get_f() until then to read environment variables.&lt;/p&gt; 
&lt;p&gt;The environment is protected by a CRC32 checksum. Before the monitor is relocated into RAM, as a result of a bad CRC you will be working with the compiled-in default environment - &lt;em&gt;silently&lt;/em&gt;!!! [This is necessary, because the first environment variable we need is the &quot;baudrate&quot; setting for the console - if we have a bad CRC, we don&#39;t have any device yet where we could complain.]&lt;/p&gt; 
&lt;p&gt;Note: once the monitor has been relocated, then it will complain if the default environment is used; a new CRC is computed as soon as you use the &quot;saveenv&quot; command to store a valid environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FAULT_MII_ADDR: MII address of the PHY to check for the Ethernet link state.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_DISPLAY_BOARDINFO Display information about the board that U-Boot is running on when U-Boot starts up. The board function checkboard() is called to do this.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_DISPLAY_BOARDINFO_LATE Similar to the previous option, but display this information later, once stdio is running and output goes to the LCD, if present.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Low Level (hardware related) configuration options:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_CACHELINE_SIZE: Cache Line Size of the CPU.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_CCSRBAR_DEFAULT: Default (power-on reset) physical address of CCSR on Freescale PowerPC SOCs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR: Virtual address of CCSR. On a 32-bit build, this is typically the same value as CONFIG_SYS_CCSRBAR_DEFAULT.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS: Physical address of CCSR. CCSR can be relocated to a new physical address, if desired. In this case, this macro should be set to that address. Otherwise, it should be set to the same value as CONFIG_SYS_CCSRBAR_DEFAULT. For example, CCSR is typically relocated on 36-bit builds. It is recommended that this macro be defined via the _HIGH and _LOW macros:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  #define CFG_SYS_CCSRBAR_PHYS ((CFG_SYS_CCSRBAR_PHYS_HIGH
  	* 1ull) &amp;lt;&amp;lt; 32 | CFG_SYS_CCSRBAR_PHYS_LOW)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS_HIGH: Bits 33-36 of CFG_SYS_CCSRBAR_PHYS. This value is typically either 0 (32-bit build) or 0xF (36-bit build). This macro is used in assembly code, so it must not contain typecasts or integer size suffixes (e.g. &quot;ULL&quot;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_CCSRBAR_PHYS_LOW: Lower 32-bits of CFG_SYS_CCSRBAR_PHYS. This macro is used in assembly code, so it must not contain typecasts or integer size suffixes (e.g. &quot;ULL&quot;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_IMMR: Physical address of the Internal Memory. DO NOT CHANGE unless you know exactly what you&#39;re doing! (11-4) [MPC8xx systems only]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CFG_SYS_INIT_RAM_ADDR:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Start address of memory area that can be used for
  initial data and stack; please note that this must be
  writable memory that is working WITHOUT special
  initialization, i. e. you CANNOT use normal RAM which
  will become available only after programming the
  memory controller and running certain initialization
  sequences.

  U-Boot uses the following memory types:
  - MPC8xx: IMMR (internal memory of the CPU)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SCCR: System Clock and reset Control Register (15-27)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_OR_TIMING_SDRAM: SDRAM timing&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_VIRT: Virtual Address of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_PHYxS: Physical Address of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SRIOn_MEM_SIZE: Size of SRIO port &#39;n&#39; memory region&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_NAND_BUSWIDTH_16BIT Defined to tell the NAND controller that the NAND chip is using a 16 bit bus. Not all NAND drivers use this symbol. Example of drivers that use it: - drivers/mtd/nand/raw/ndfc.c - drivers/mtd/nand/raw/mxc_nand.c&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_NDFC_EBC0_CFG Sets the EBC0_CFG register for the NDFC. If not defined a default value will be used.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_SPD_BUS_NUM If SPD EEPROM is on an I2C bus other than the first one, specify here. Note that the value must resolve to something your driver can deal with.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_INTERACTIVE Enable interactive DDR debugging. See doc/README.fsl-ddr.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_SYNC_REFRESH Enable sync of refresh for multiple controllers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_FSL_DDR_BIST Enable built-in memory test for Freescale DDR controllers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_RMII Enable RMII mode for all FECs. Note that this is a global option, we can&#39;t have one FEC in standard MII mode and another in RMII mode.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_CRC32_VERIFY Add a verify option to the crc32 command. The syntax is:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  =&amp;gt; crc32 -v &amp;lt;address&amp;gt; &amp;lt;count&amp;gt; &amp;lt;crc32&amp;gt;

  Where address/count indicate a memory area
  and crc32 is the correct crc32 which the
  area should have.
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_LOOPW Add the &quot;loopw&quot; memory command. This only takes effect if the memory commands are activated globally (CONFIG_CMD_MEMORY).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_CMD_MX_CYCLIC Add the &quot;mdc&quot; and &quot;mwc&quot; memory commands. These are cyclic &quot;md/mw&quot; commands. Examples:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  =&amp;gt; mdc.b 10 4 500
  This command will print 4 bytes (10,11,12,13) each 500 ms.

  =&amp;gt; mwc.l 100 12345678 10
  This command will write 12345678 to address 100 all 10 ms.

  This only takes effect if the memory commands are activated
  globally (CONFIG_CMD_MEMORY).
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_XPL_BUILD Set when the currently running compilation is for an artifact that will end up in one of the &#39;xPL&#39; builds, i.e. SPL, TPL or VPL. Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_TPL_BUILD Set when the currently running compilation is for an artifact that will end up in the TPL build (as opposed to SPL, VPL or U-Boot proper). Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_VPL_BUILD Set when the currently running compilation is for an artifact that will end up in the VPL build (as opposed to the SPL, TPL or U-Boot proper). Code that needs phase-specific behaviour can check this, or (where possible) use xpl_phase() instead.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_ARCH_MAP_SYSMEM Generally U-Boot (and in particular the md command) uses effective address. It is therefore not necessary to regard U-Boot address as virtual addresses that need to be translated to physical addresses. However, sandbox requires this, since it maintains its own little RAM buffer which contains all addressable memory. This option causes some memory accesses to be mapped through map_sysmem() / unmap_sysmem().&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_X86_RESET_VECTOR If defined, the x86 reset vector code is included. This is not needed when U-Boot is running from Coreboot.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Freescale QE/FMAN Firmware Support:&lt;/h2&gt; 
&lt;p&gt;The Freescale QUICCEngine (QE) and Frame Manager (FMAN) both support the loading of &quot;firmware&quot;, which is encoded in the QE firmware binary format. This firmware often needs to be loaded during U-Boot booting, so macros are used to identify the storage device (NOR flash, SPI, etc) and the address within that device.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_FMAN_FW_ADDR The address in the storage device where the FMAN microcode is located. The meaning of this address depends on which CONFIG_SYS_QE_FMAN_FW_IN_xxx macro is also specified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FW_ADDR The address in the storage device where the QE microcode is located. The meaning of this address depends on which CONFIG_SYS_QE_FMAN_FW_IN_xxx macro is also specified.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_LENGTH The maximum possible size of the firmware. The firmware binary format has a field that specifies the actual size of the firmware, but it might not be possible to read any part of the firmware unless some local storage is allocated to hold the entire firmware first.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_NOR Specifies that QE/FMAN firmware is located in NOR flash, mapped as normal addressable memory via the LBC. CONFIG_SYS_FMAN_FW_ADDR is the virtual address in NOR flash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_NAND Specifies that QE/FMAN firmware is located in NAND flash. CONFIG_SYS_FMAN_FW_ADDR is the offset within NAND flash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_MMC Specifies that QE/FMAN firmware is located on the primary SD/MMC device. CONFIG_SYS_FMAN_FW_ADDR is the byte offset on that device.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CONFIG_SYS_QE_FMAN_FW_IN_REMOTE Specifies that QE/FMAN firmware is located in the remote (master) memory space. CONFIG_SYS_FMAN_FW_ADDR is a virtual address which can be mapped from slave TLB-&amp;gt;slave LAW-&amp;gt;slave SRIO or PCIE outbound window-&amp;gt;master inbound window-&amp;gt;master LAW-&amp;gt;the ucode address in master&#39;s memory space.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Freescale Layerscape Management Complex Firmware Support:&lt;/h2&gt; 
&lt;p&gt;The Freescale Layerscape Management Complex (MC) supports the loading of &quot;firmware&quot;. This firmware often needs to be loaded during U-Boot booting, so macros are used to identify the storage device (NOR flash, SPI, etc) and the address within that device.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CONFIG_FSL_MC_ENET Enable the MC driver for Layerscape SoCs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Freescale Layerscape Debug Server Support:&lt;/h2&gt; 
&lt;p&gt;The Freescale Layerscape Debug Server Support supports the loading of &quot;Debug Server firmware&quot; and triggering SP boot-rom. This firmware often needs to be loaded during U-Boot booting.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CONFIG_SYS_MC_RSV_MEM_ALIGN Define alignment of reserved memory MC requires&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Building the Software:&lt;/h1&gt; 
&lt;p&gt;Building U-Boot has been tested in several native build environments and in many different cross environments. Of course we cannot support all possibly existing versions of cross development tools in all (potentially obsolete) versions. In case of tool chain problems we recommend to use the ELDK (see &lt;a href=&quot;https://www.denx.de/wiki/DULG/ELDK&quot;&gt;https://www.denx.de/wiki/DULG/ELDK&lt;/a&gt;) which is extensively used to build and test U-Boot.&lt;/p&gt; 
&lt;p&gt;If you are not using a native environment, it is assumed that you have GNU cross compiling tools available in your path. In this case, you must set the environment variable CROSS_COMPILE in your shell. Note that no changes to the Makefile or any other source files are necessary. For example using the ELDK on a 4xx CPU, please enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ CROSS_COMPILE=ppc_4xx-
$ export CROSS_COMPILE
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;U-Boot is intended to be simple to build. After installing the sources you must configure U-Boot for one specific board type. This is done by typing:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make NAME_defconfig
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where &quot;NAME_defconfig&quot; is the name of one of the existing configu- rations; see configs/*_defconfig for supported names.&lt;/p&gt; 
&lt;p&gt;Note: for some boards special configuration names may exist; check if additional information is available from the board vendor; for instance, the TQM823L systems are available without (standard) or with LCD support. You can select such additional &quot;features&quot; when choosing the configuration, i. e.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  make TQM823L_defconfig
- will configure for a plain TQM823L, i. e. no LCD support

  make TQM823L_LCD_defconfig
- will configure for a TQM823L with U-Boot console on LCD

  etc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, type &quot;make all&quot;, and you should get some working U-Boot images ready for download to / installation on your system:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&quot;u-boot.bin&quot; is a raw binary image&lt;/li&gt; 
 &lt;li&gt;&quot;u-boot&quot; is an image in ELF binary format&lt;/li&gt; 
 &lt;li&gt;&quot;u-boot.srec&quot; is in Motorola S-Record format&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;User specific CPPFLAGS, AFLAGS and CFLAGS can be passed to the compiler by setting the according environment variables KCPPFLAGS, KAFLAGS and KCFLAGS. For example to treat all compiler warnings as errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make KCFLAGS=-Werror
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please be aware that the Makefiles assume you are using GNU make, so for instance on NetBSD you might need to use &quot;gmake&quot; instead of native &quot;make&quot;.&lt;/p&gt; 
&lt;p&gt;If the system board that you have is not listed, then you will need to port U-Boot to your hardware platform. To do this, follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a new directory to hold your board specific code. Add any files you need. In your board directory, you will need at least the &quot;Makefile&quot; and a &quot;
  &lt;board&gt;
   .c&quot;.
  &lt;/board&gt;&lt;/li&gt; 
 &lt;li&gt;Create a new configuration file &quot;include/configs/
  &lt;board&gt;
   .h&quot; for your board.
  &lt;/board&gt;&lt;/li&gt; 
 &lt;li&gt;If you&#39;re porting U-Boot to a new CPU, then also create a new directory to hold your CPU specific code. Add any files you need.&lt;/li&gt; 
 &lt;li&gt;Run &quot;make 
  &lt;board&gt;
   _defconfig&quot; with your new name.
  &lt;/board&gt;&lt;/li&gt; 
 &lt;li&gt;Type &quot;make&quot;, and you should get a working &quot;u-boot.srec&quot; file to be installed on your target system.&lt;/li&gt; 
 &lt;li&gt;Debug and solve any problems that might arise. [Of course, this last step is much harder than it sounds.]&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Testing of U-Boot Modifications, Ports to New Hardware, etc.:&lt;/h1&gt; 
&lt;p&gt;If you have modified U-Boot sources (for instance added a new board or support for new devices, a new CPU, etc.) you are expected to provide feedback to the other developers. The feedback normally takes the form of a &quot;patch&quot;, i.e. a context diff against a certain (latest official or latest in the git repository) version of U-Boot sources.&lt;/p&gt; 
&lt;p&gt;But before you submit such a patch, please verify that your modifi- cation did not break existing code. At least make sure that &lt;em&gt;ALL&lt;/em&gt; of the supported boards compile WITHOUT ANY compiler warnings. To do so, just run the buildman script (tools/buildman/buildman), which will configure and build U-Boot for ALL supported system. Be warned, this will take a while. Please see the buildman README, or run &#39;buildman -H&#39; for documentation.&lt;/p&gt; 
&lt;p&gt;See also &quot;U-Boot Porting Guide&quot; below.&lt;/p&gt; 
&lt;h1&gt;Monitor Commands - Overview:&lt;/h1&gt; 
&lt;p&gt;go - start application at address &#39;addr&#39; run - run commands in an environment variable bootm - boot application image from memory bootp - boot image via network using BootP/TFTP protocol bootz - boot zImage from memory tftpboot- boot image via network using TFTP protocol and env variables &quot;ipaddr&quot; and &quot;serverip&quot; (and eventually &quot;gatewayip&quot;) tftpput - upload a file via network using TFTP protocol rarpboot- boot image via network using RARP/TFTP protocol diskboot- boot from IDE devicebootd - boot default, i.e., run &#39;bootcmd&#39; loads - load S-Record file over serial line loadb - load binary file over serial line (kermit mode) loadm - load binary blob from source address to destination address md - memory display mm - memory modify (auto-incrementing) nm - memory modify (constant address) mw - memory write (fill) ms - memory search cp - memory copy cmp - memory compare crc32 - checksum calculation i2c - I2C sub-system sspi - SPI utility commands base - print or set address offset printenv- print environment variables pwm - control pwm channels seama - load SEAMA NAND image setenv - set environment variables saveenv - save environment variables to persistent storage protect - enable or disable FLASH write protection erase - erase FLASH memory flinfo - print FLASH memory information nand - NAND memory operations (see doc/README.nand) bdinfo - print Board Info structure iminfo - print header information for application image coninfo - print console devices and informations ide - IDE sub-system loop - infinite loop on address range loopw - infinite write loop on address range mtest - simple RAM test icache - enable or disable instruction cache dcache - enable or disable data cache reset - Perform RESET of the CPU echo - echo args to console version - print monitor version help - print online help ? - alias for &#39;help&#39;&lt;/p&gt; 
&lt;h1&gt;Monitor Commands - Detailed Description:&lt;/h1&gt; 
&lt;p&gt;TODO.&lt;/p&gt; 
&lt;p&gt;For now: just type &quot;help &lt;command /&gt;&quot;.&lt;/p&gt; 
&lt;h1&gt;Note for Redundant Ethernet Interfaces:&lt;/h1&gt; 
&lt;p&gt;Some boards come with redundant Ethernet interfaces; U-Boot supports such configurations and is capable of automatic selection of a &quot;working&quot; interface when needed. MAC assignment works as follows:&lt;/p&gt; 
&lt;p&gt;Network interfaces are numbered eth0, eth1, eth2, ... Corresponding MAC addresses can be stored in the environment as &quot;ethaddr&quot; (=&amp;gt;eth0), &quot;eth1addr&quot; (=&amp;gt;eth1), &quot;eth2addr&quot;, ...&lt;/p&gt; 
&lt;p&gt;If the network interface stores some valid MAC address (for instance in SROM), this is used as default address if there is NO correspon- ding setting in the environment; if the corresponding environment variable is set, this overrides the settings in the card; that means:&lt;/p&gt; 
&lt;p&gt;o If the SROM has a valid MAC address, and there is no address in the environment, the SROM&#39;s address is used.&lt;/p&gt; 
&lt;p&gt;o If there is no valid address in the SROM, and a definition in the environment exists, then the value from the environment variable is used.&lt;/p&gt; 
&lt;p&gt;o If both the SROM and the environment contain a MAC address, and both addresses are the same, this MAC address is used.&lt;/p&gt; 
&lt;p&gt;o If both the SROM and the environment contain a MAC address, and the addresses differ, the value from the environment is used and a warning is printed.&lt;/p&gt; 
&lt;p&gt;o If neither SROM nor the environment contain a MAC address, an error is raised. If CONFIG_NET_RANDOM_ETHADDR is defined, then in this case a random, locally-assigned MAC is used.&lt;/p&gt; 
&lt;p&gt;If Ethernet drivers implement the &#39;write_hwaddr&#39; function, valid MAC addresses will be programmed into hardware as part of the initialization process. This may be skipped by setting the appropriate &#39;ethmacskip&#39; environment variable. The naming convention is as follows: &quot;ethmacskip&quot; (=&amp;gt;eth0), &quot;eth1macskip&quot; (=&amp;gt;eth1) etc.&lt;/p&gt; 
&lt;h1&gt;Image Formats:&lt;/h1&gt; 
&lt;p&gt;U-Boot is capable of booting (and performing other auxiliary operations on) images in two formats:&lt;/p&gt; 
&lt;h2&gt;New uImage format (FIT)&lt;/h2&gt; 
&lt;p&gt;Flexible and powerful format based on Flattened Image Tree -- FIT (similar to Flattened Device Tree). It allows the use of images with multiple components (several kernels, ramdisks, etc.), with contents protected by SHA1, MD5 or CRC32. More details are found in the doc/uImage.FIT directory.&lt;/p&gt; 
&lt;h2&gt;Old uImage format&lt;/h2&gt; 
&lt;p&gt;Old image format is based on binary files which can be basically anything, preceded by a special header; see the definitions in include/image.h for details; basically, the header defines the following image properties:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Target Operating System (Provisions for OpenBSD, NetBSD, FreeBSD, 4.4BSD, Linux, SVR4, Esix, Solaris, Irix, SCO, Dell, NCR, VxWorks, LynxOS, pSOS, QNX, RTEMS, INTEGRITY; Currently supported: Linux, NetBSD, VxWorks, QNX, RTEMS, INTEGRITY).&lt;/li&gt; 
 &lt;li&gt;Target CPU Architecture (Provisions for Alpha, ARM, Intel x86, IA64, MIPS, Nios II, PowerPC, IBM S390, SuperH, Sparc, Sparc 64 Bit; Currently supported: ARM, Intel x86, MIPS, Nios II, PowerPC).&lt;/li&gt; 
 &lt;li&gt;Compression Type (uncompressed, gzip, bzip2)&lt;/li&gt; 
 &lt;li&gt;Load Address&lt;/li&gt; 
 &lt;li&gt;Entry Point&lt;/li&gt; 
 &lt;li&gt;Image Name&lt;/li&gt; 
 &lt;li&gt;Image Timestamp&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The header is marked by a special Magic Number, and both the header and the data portions of the image are secured against corruption by CRC32 checksums.&lt;/p&gt; 
&lt;h1&gt;Linux Support:&lt;/h1&gt; 
&lt;p&gt;Although U-Boot should support any OS or standalone application easily, the main focus has always been on Linux during the design of U-Boot.&lt;/p&gt; 
&lt;p&gt;U-Boot includes many features that so far have been part of some special &quot;boot loader&quot; code within the Linux kernel. Also, any &quot;initrd&quot; images to be used are no longer part of one big Linux image; instead, kernel and &quot;initrd&quot; are separate images. This implementation serves several purposes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;the same features can be used for other OS or standalone applications (for instance: using compressed images to reduce the Flash memory footprint)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;it becomes much easier to port new Linux kernel versions because lots of low-level, hardware dependent stuff are done by U-Boot&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;the same Linux kernel image can now be used with different &quot;initrd&quot; images; of course this also means that different kernel images can be run with the same &quot;initrd&quot;. This makes testing easier (you don&#39;t have to build a new &quot;zImage.initrd&quot; Linux image when you just change a file in your &quot;initrd&quot;). Also, a field-upgrade of the software is easier now.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Linux HOWTO:&lt;/h1&gt; 
&lt;h2&gt;Porting Linux to U-Boot based systems:&lt;/h2&gt; 
&lt;p&gt;U-Boot cannot save you from doing all the necessary modifications to configure the Linux device drivers for use with your target hardware (no, we don&#39;t intend to provide a full virtual machine interface to Linux :-).&lt;/p&gt; 
&lt;p&gt;But now you can ignore ALL boot loader code (in arch/powerpc/mbxboot).&lt;/p&gt; 
&lt;p&gt;Just make sure your machine specific header file (for instance include/asm-ppc/tqm8xx.h) includes the same definition of the Board Information structure as we define in include/asm-
 &lt;arch&gt;
  /u-boot.h, and make sure that your definition of IMAP_ADDR uses the same value as your U-Boot configuration in CONFIG_SYS_IMMR.
 &lt;/arch&gt;&lt;/p&gt; 
&lt;p&gt;Note that U-Boot now has a driver model, a unified model for drivers. If you are adding a new driver, plumb it into driver model. If there is no uclass available, you are encouraged to create one. See doc/driver-model.&lt;/p&gt; 
&lt;h2&gt;Configuring the Linux kernel:&lt;/h2&gt; 
&lt;p&gt;No specific requirements for U-Boot. Make sure you have some root device (initial ramdisk, NFS) for your target system.&lt;/p&gt; 
&lt;h2&gt;Building a Linux Image:&lt;/h2&gt; 
&lt;p&gt;With U-Boot, &quot;normal&quot; build targets like &quot;zImage&quot; or &quot;bzImage&quot; are not used. If you use recent kernel source, a new build target &quot;uImage&quot; will exist which automatically builds an image usable by U-Boot. Most older kernels also have support for a &quot;pImage&quot; target, which was introduced for our predecessor project PPCBoot and uses a 100% compatible format.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make TQM850L_defconfig
make oldconfig
make dep
make uImage
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &quot;uImage&quot; build target uses a special tool (in &#39;tools/mkimage&#39;) to encapsulate a compressed Linux kernel image with header information, CRC32 checksum etc. for use with U-Boot. This is what we are doing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;build a standard &quot;vmlinux&quot; kernel image (in ELF binary format):&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;convert the kernel into a raw binary image:&lt;/p&gt; &lt;p&gt;${CROSS_COMPILE}-objcopy -O binary &lt;br /&gt; -R .note -R .comment &lt;br /&gt; -S vmlinux linux.bin&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;compress the binary image:&lt;/p&gt; &lt;p&gt;gzip -9 linux.bin&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;package compressed binary image for U-Boot:&lt;/p&gt; &lt;p&gt;mkimage -A ppc -O linux -T kernel -C gzip &lt;br /&gt; -a 0 -e 0 -n &quot;Linux Kernel Image&quot; &lt;br /&gt; -d linux.bin.gz uImage&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &quot;mkimage&quot; tool can also be used to create ramdisk images for use with U-Boot, either separated from the Linux kernel image, or combined into one file. &quot;mkimage&quot; encapsulates the images with a 64 byte header containing information about target architecture, operating system, image type, compression method, entry points, time stamp, CRC32 checksums, etc.&lt;/p&gt; 
&lt;p&gt;&quot;mkimage&quot; can be called in two ways: to verify existing images and print the header information, or to build new images.&lt;/p&gt; 
&lt;p&gt;In the first form (with &quot;-l&quot; option) mkimage lists the information contained in the header of an existing U-Boot image; this includes checksum verification:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tools/mkimage -l image
  -l ==&amp;gt; list image header information
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The second form (with &quot;-d&quot; option) is used to build a U-Boot image from a &quot;data file&quot; which is used as image payload:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tools/mkimage -A arch -O os -T type -C comp -a addr -e ep \
	      -n name -d data_file image
  -A ==&amp;gt; set architecture to &#39;arch&#39;
  -O ==&amp;gt; set operating system to &#39;os&#39;
  -T ==&amp;gt; set image type to &#39;type&#39;
  -C ==&amp;gt; set compression type &#39;comp&#39;
  -a ==&amp;gt; set load address to &#39;addr&#39; (hex)
  -e ==&amp;gt; set entry point to &#39;ep&#39; (hex)
  -n ==&amp;gt; set image name to &#39;name&#39;
  -d ==&amp;gt; use image data from &#39;datafile&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Right now, all Linux kernels for PowerPC systems use the same load address (0x00000000), but the entry point address depends on the kernel version:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2.2.x kernels have the entry point at 0x0000000C,&lt;/li&gt; 
 &lt;li&gt;2.3.x and later kernels have the entry point at 0x00000000.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So a typical call to build a U-Boot image would read:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -n &#39;2.4.4 kernel for TQM850L&#39; \
&amp;gt; -A ppc -O linux -T kernel -C gzip -a 0 -e 0 \
&amp;gt; -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz \
&amp;gt; examples/uImage.TQM850L
Image Name:   2.4.4 kernel for TQM850L
Created:      Wed Jul 19 02:34:59 2000
Image Type:   PowerPC Linux Kernel Image (gzip compressed)
Data Size:    335725 Bytes = 327.86 kB = 0.32 MB
Load Address: 0x00000000
Entry Point:  0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To verify the contents of the image (or check for corruption):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -l examples/uImage.TQM850L
Image Name:   2.4.4 kernel for TQM850L
Created:      Wed Jul 19 02:34:59 2000
Image Type:   PowerPC Linux Kernel Image (gzip compressed)
Data Size:    335725 Bytes = 327.86 kB = 0.32 MB
Load Address: 0x00000000
Entry Point:  0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NOTE: for embedded systems where boot time is critical you can trade speed for memory and install an UNCOMPRESSED image instead: this needs more space in Flash, but boots much faster since it does not need to be uncompressed:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-&amp;gt; gunzip /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz
-&amp;gt; tools/mkimage -n &#39;2.4.4 kernel for TQM850L&#39; \
&amp;gt; -A ppc -O linux -T kernel -C none -a 0 -e 0 \
&amp;gt; -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux \
&amp;gt; examples/uImage.TQM850L-uncompressed
Image Name:   2.4.4 kernel for TQM850L
Created:      Wed Jul 19 02:34:59 2000
Image Type:   PowerPC Linux Kernel Image (uncompressed)
Data Size:    792160 Bytes = 773.59 kB = 0.76 MB
Load Address: 0x00000000
Entry Point:  0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similar you can build U-Boot images from a &#39;ramdisk.image.gz&#39; file when your kernel is intended to use an initial ramdisk:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-&amp;gt; tools/mkimage -n &#39;Simple Ramdisk Image&#39; \
&amp;gt; -A ppc -O linux -T ramdisk -C gzip \
&amp;gt; -d /LinuxPPC/images/SIMPLE-ramdisk.image.gz examples/simple-initrd
Image Name:   Simple Ramdisk Image
Created:      Wed Jan 12 14:01:50 2000
Image Type:   PowerPC Linux RAMDisk Image (gzip compressed)
Data Size:    566530 Bytes = 553.25 kB = 0.54 MB
Load Address: 0x00000000
Entry Point:  0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &quot;dumpimage&quot; tool can be used to disassemble or list the contents of images built by mkimage. See dumpimage&#39;s help output (-h) for details.&lt;/p&gt; 
&lt;h2&gt;Installing a Linux Image:&lt;/h2&gt; 
&lt;p&gt;To downloading a U-Boot image over the serial (console) interface, you must convert the image to S-Record format:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;objcopy -I binary -O srec examples/image examples/image.srec
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &#39;objcopy&#39; does not understand the information in the U-Boot image header, so the resulting S-Record file will be relative to address 0x00000000. To load it to a given address, you need to specify the target address as &#39;offset&#39; parameter with the &#39;loads&#39; command.&lt;/p&gt; 
&lt;p&gt;Example: install the image to address 0x40100000 (which on the TQM8xxL is in the first Flash bank):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; erase 40100000 401FFFFF

.......... done
Erased 8 sectors

=&amp;gt; loads 40100000
## Ready for S-Record download ...
~&amp;gt;examples/image.srec
1 2 3 4 5 6 7 8 9 10 11 12 13 ...
...
15989 15990 15991 15992
[file transfer complete]
[connected]
## Start Addr = 0x00000000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check the success of the download using the &#39;iminfo&#39; command; this includes a checksum verification so you can be sure no data corruption happened:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; imi 40100000

## Checking Image at 40100000 ...
   Image Name:	 2.2.13 for initrd on TQM850L
   Image Type:	 PowerPC Linux Kernel Image (gzip compressed)
   Data Size:	 335725 Bytes = 327 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 0000000c
   Verifying Checksum ... OK
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Boot Linux:&lt;/h2&gt; 
&lt;p&gt;The &quot;bootm&quot; command is used to boot an application that is stored in memory (RAM or Flash). In case of a Linux kernel image, the contents of the &quot;bootargs&quot; environment variable is passed to the kernel as parameters. You can check and modify this variable using the &quot;printenv&quot; and &quot;setenv&quot; commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; printenv bootargs
bootargs=root=/dev/ram

=&amp;gt; setenv bootargs root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2

=&amp;gt; printenv bootargs
bootargs=root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2

=&amp;gt; bootm 40020000
## Booting Linux kernel at 40020000 ...
   Image Name:	 2.2.13 for NFS on TQM850L
   Image Type:	 PowerPC Linux Kernel Image (gzip compressed)
   Data Size:	 381681 Bytes = 372 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 0000000c
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK
Linux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:35:17 MEST 2000
Boot arguments: root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2
time_init: decrementer frequency = 187500000/60
Calibrating delay loop... 49.77 BogoMIPS
Memory: 15208k available (700k kernel code, 444k data, 32k init) [c0000000,c1000000]
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to boot a Linux kernel with initial RAM disk, you pass the memory addresses of both the kernel and the initrd image (PPBCOOT format!) to the &quot;bootm&quot; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; imi 40100000 40200000

## Checking Image at 40100000 ...
   Image Name:	 2.2.13 for initrd on TQM850L
   Image Type:	 PowerPC Linux Kernel Image (gzip compressed)
   Data Size:	 335725 Bytes = 327 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 0000000c
   Verifying Checksum ... OK

## Checking Image at 40200000 ...
   Image Name:	 Simple Ramdisk Image
   Image Type:	 PowerPC Linux RAMDisk Image (gzip compressed)
   Data Size:	 566530 Bytes = 553 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 00000000
   Verifying Checksum ... OK

=&amp;gt; bootm 40100000 40200000
## Booting Linux kernel at 40100000 ...
   Image Name:	 2.2.13 for initrd on TQM850L
   Image Type:	 PowerPC Linux Kernel Image (gzip compressed)
   Data Size:	 335725 Bytes = 327 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 0000000c
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK
## Loading RAMDisk Image at 40200000 ...
   Image Name:	 Simple Ramdisk Image
   Image Type:	 PowerPC Linux RAMDisk Image (gzip compressed)
   Data Size:	 566530 Bytes = 553 kB = 0 MB
   Load Address: 00000000
   Entry Point:	 00000000
   Verifying Checksum ... OK
   Loading Ramdisk ... OK
Linux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:32:08 MEST 2000
Boot arguments: root=/dev/ram
time_init: decrementer frequency = 187500000/60
Calibrating delay loop... 49.77 BogoMIPS
...
RAMDISK: Compressed image found at block 0
VFS: Mounted root (ext2 filesystem).

bash#
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Boot Linux and pass a flat device tree:&lt;/h2&gt; 
&lt;p&gt;First, U-Boot must be compiled with the appropriate defines. See the section titled &quot;Linux Kernel Interface&quot; above for a more in depth explanation. The following is an example of how to start a kernel and pass an updated flat device tree:&lt;/p&gt; 
&lt;p&gt;=&amp;gt; print oftaddr oftaddr=0x300000 =&amp;gt; print oft oft=oftrees/mpc8540ads.dtb =&amp;gt; tftp $oftaddr $oft Speed: 1000, full duplex Using TSEC0 device TFTP from server 192.168.1.1; our IP address is 192.168.1.101 Filename &#39;oftrees/mpc8540ads.dtb&#39;. Load address: 0x300000 Loading: # done Bytes transferred = 4106 (100a hex) =&amp;gt; tftp $loadaddr $bootfile Speed: 1000, full duplex Using TSEC0 device TFTP from server 192.168.1.1; our IP address is 192.168.1.2 Filename &#39;uImage&#39;. Load address: 0x200000 Loading:############ done Bytes transferred = 1029407 (fb51f hex) =&amp;gt; print loadaddr loadaddr=200000 =&amp;gt; print oftaddr oftaddr=0x300000 =&amp;gt; bootm $loadaddr - $oftaddr&lt;/p&gt; 
&lt;h2&gt;Booting image at 00200000 ...&lt;/h2&gt; 
&lt;p&gt;Image Name: Linux-2.6.17-dirty Image Type: PowerPC Linux Kernel Image (gzip compressed) Data Size: 1029343 Bytes = 1005.2 kB Load Address: 00000000 Entry Point: 00000000 Verifying Checksum ... OK Uncompressing Kernel Image ... OK Booting using flat device tree at 0x300000 Using MPC85xx ADS machine description Memory CAM mapping: CAM0=256Mb, CAM1=256Mb, CAM2=0Mb residual: 0Mb [snip]&lt;/p&gt; 
&lt;h2&gt;More About U-Boot Image Types:&lt;/h2&gt; 
&lt;p&gt;U-Boot supports the following image types:&lt;/p&gt; 
&lt;p&gt;&quot;Standalone Programs&quot; are directly runnable in the environment provided by U-Boot; it is expected that (if they behave well) you can continue to work in U-Boot after return from the Standalone Program. &quot;OS Kernel Images&quot; are usually images of some Embedded OS which will take over control completely. Usually these programs will install their own set of exception handlers, device drivers, set up the MMU, etc. - this means, that you cannot expect to re-enter U-Boot except by resetting the CPU. &quot;RAMDisk Images&quot; are more or less just data blocks, and their parameters (address, size) are passed to an OS kernel that is being started. &quot;Multi-File Images&quot; contain several images, typically an OS (Linux) kernel image and one or more data images like RAMDisks. This construct is useful for instance when you want to boot over the network using BOOTP etc., where the boot server provides just a single image file, but you want to get for instance an OS kernel and a RAMDisk image.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&quot;Multi-File Images&quot; start with a list of image sizes, each
image size (in bytes) specified by an &quot;uint32_t&quot; in network
byte order. This list is terminated by an &quot;(uint32_t)0&quot;.
Immediately after the terminating 0 follow the images, one by
one, all aligned on &quot;uint32_t&quot; boundaries (size rounded up to
a multiple of 4 bytes).
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&quot;Firmware Images&quot; are binary images containing firmware (like U-Boot or FPGA images) which usually will be programmed to flash memory.&lt;/p&gt; 
&lt;p&gt;&quot;Script files&quot; are command sequences that will be executed by U-Boot&#39;s command interpreter; this feature is especially useful when you configure U-Boot to use a real shell (hush) as command interpreter.&lt;/p&gt; 
&lt;h2&gt;Booting the Linux zImage:&lt;/h2&gt; 
&lt;p&gt;On some platforms, it&#39;s possible to boot Linux zImage. This is done using the &quot;bootz&quot; command. The syntax of &quot;bootz&quot; command is the same as the syntax of &quot;bootm&quot; command.&lt;/p&gt; 
&lt;p&gt;Note, defining the CONFIG_SUPPORT_RAW_INITRD allows user to supply kernel with raw initrd images. The syntax is slightly different, the address of the initrd must be augmented by it&#39;s size, in the following format: &quot;
 &lt;initrd addres&gt;
  :
  &lt;initrd size&gt;
   &quot;.
  &lt;/initrd&gt;
 &lt;/initrd&gt;&lt;/p&gt; 
&lt;h1&gt;Standalone HOWTO:&lt;/h1&gt; 
&lt;p&gt;One of the features of U-Boot is that you can dynamically load and run &quot;standalone&quot; applications, which can use some resources of U-Boot like console I/O functions or interrupt services.&lt;/p&gt; 
&lt;p&gt;Two simple examples are included with the sources:&lt;/p&gt; 
&lt;h2&gt;&quot;Hello World&quot; Demo:&lt;/h2&gt; 
&lt;p&gt;&#39;examples/hello_world.c&#39; contains a small &quot;Hello World&quot; Demo application; it is automatically compiled when you build U-Boot. It&#39;s configured to run at address 0x00040004, so you can play with it like that:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=&amp;gt; loads
## Ready for S-Record download ...
~&amp;gt;examples/hello_world.srec
1 2 3 4 5 6 7 8 9 10 11 ...
[file transfer complete]
[connected]
## Start Addr = 0x00040004

=&amp;gt; go 40004 Hello World! This is a test.
## Starting application at 0x00040004 ...
Hello World
argc = 7
argv[0] = &quot;40004&quot;
argv[1] = &quot;Hello&quot;
argv[2] = &quot;World!&quot;
argv[3] = &quot;This&quot;
argv[4] = &quot;is&quot;
argv[5] = &quot;a&quot;
argv[6] = &quot;test.&quot;
argv[7] = &quot;&amp;lt;NULL&amp;gt;&quot;
Hit any key to exit ...

## Application terminated, rc = 0x0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another example, which demonstrates how to register a CPM interrupt handler with the U-Boot code, can be found in &#39;examples/timer.c&#39;. Here, a CPM timer is set up to generate an interrupt every second. The interrupt service routine is trivial, just printing a &#39;.&#39; character, but this is just a demo program. The application can be controlled by the following keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;? - print current values og the CPM Timer registers
b - enable interrupts and start timer
e - stop timer and disable interrupts
q - quit application

=&amp;gt; loads
## Ready for S-Record download ...
~&amp;gt;examples/timer.srec
1 2 3 4 5 6 7 8 9 10 11 ...
[file transfer complete]
[connected]
## Start Addr = 0x00040004

=&amp;gt; go 40004
## Starting application at 0x00040004 ...
TIMERS=0xfff00980
Using timer 1
  tgcr @ 0xfff00980, tmr @ 0xfff00990, trr @ 0xfff00994, tcr @ 0xfff00998, tcn @ 0xfff0099c, ter @ 0xfff009b0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hit &#39;b&#39;: [q, b, e, ?] Set interval 1000000 us Enabling timer Hit &#39;?&#39;: [q, b, e, ?] ........ tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0xef6, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x2ad4, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x1efc, ter=0x0 Hit &#39;?&#39;: [q, b, e, ?] . tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x169d, ter=0x0 Hit &#39;e&#39;: [q, b, e, ?] ...Stopping timer Hit &#39;q&#39;: [q, b, e, ?] ## Application terminated, rc = 0x0&lt;/p&gt; 
&lt;h1&gt;Implementation Internals:&lt;/h1&gt; 
&lt;p&gt;The following is not intended to be a complete description of every implementation detail. However, it should help to understand the inner workings of U-Boot and make it easier to port it to custom hardware.&lt;/p&gt; 
&lt;h2&gt;Initial Stack, Global Data:&lt;/h2&gt; 
&lt;p&gt;The implementation of U-Boot is complicated by the fact that U-Boot starts running out of ROM (flash memory), usually without access to system RAM (because the memory controller is not initialized yet). This means that we don&#39;t have writable Data or BSS segments, and BSS is not initialized as zero. To be able to get a C environment working at all, we have to allocate at least a minimal stack. Implementation options for this are defined and restricted by the CPU used: Some CPU models provide on-chip memory (like the IMMR area on MPC8xx and MPC826x processors), on others (parts of) the data cache can be locked as (mis-) used as memory, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Chris Hallinan posted a good summary of these issues to the
U-Boot mailing list:

Subject: RE: [U-Boot-Users] RE: More On Memory Bank x (nothingness)?
From: &quot;Chris Hallinan&quot; &amp;lt;clh@net1plus.com&amp;gt;
Date: Mon, 10 Feb 2003 16:43:46 -0500 (22:43 MET)
...

Correct me if I&#39;m wrong, folks, but the way I understand it
is this: Using DCACHE as initial RAM for Stack, etc, does not
require any physical RAM backing up the cache. The cleverness
is that the cache is being used as a temporary supply of
necessary storage before the SDRAM controller is setup. It&#39;s
beyond the scope of this list to explain the details, but you
can see how this works by studying the cache architecture and
operation in the architecture and processor-specific manuals.

OCM is On Chip Memory, which I believe the 405GP has 4K. It
is another option for the system designer to use as an
initial stack/RAM area prior to SDRAM being available. Either
option should work for you. Using CS 4 should be fine if your
board designers haven&#39;t used it for something that would
cause you grief during the initial boot! It is frequently not
used.

CFG_SYS_INIT_RAM_ADDR should be somewhere that won&#39;t interfere
with your processor/board/system design. The default value
you will find in any recent u-boot distribution in
walnut.h should work for you. I&#39;d set it to a value larger
than your SDRAM module. If you have a 64MB SDRAM module, set
it above 400_0000. Just make sure your board has no resources
that are supposed to respond to that address! That code in
start.S has been around a while and should work as is when
you get the config right.

-Chris Hallinan
DS4.COM, Inc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is essential to remember this, since it has some impact on the C code for the initialization procedures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Initialized global data (data segment) is read-only. Do not attempt to write it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Do not use any uninitialized global data (or implicitly initialized as zero data - BSS segment) at all - this is undefined, initiali- zation is performed later (when relocating to RAM).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Stack space is very limited. Avoid big data buffers or things like that.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Having only the stack as writable memory limits means we cannot use normal global data to share information between the code. But it turned out that the implementation of U-Boot can be greatly simplified by making a global data structure (gd_t) available to all functions. We could pass a pointer to this data as argument to &lt;em&gt;all&lt;/em&gt; functions, but this would bloat the code. Instead we use a feature of the GCC compiler (Global Register Variables) to share the data: we place a pointer (gd) to the global data into a register which we reserve for this purpose.&lt;/p&gt; 
&lt;p&gt;When choosing a register for such a purpose we are restricted by the relevant (E)ABI specifications for the current architecture, and by GCC&#39;s implementation.&lt;/p&gt; 
&lt;p&gt;For PowerPC, the following registers have specific use: R1: stack pointer R2: reserved for system use R3-R4: parameter passing and return values R5-R10: parameter passing R13: small data area pointer R30: GOT pointer R31: frame pointer&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;(U-Boot also uses R12 as internal GOT pointer. r12
is a volatile register so r12 needs to be reset when
going back and forth between asm and C)

==&amp;gt; U-Boot will use R2 to hold a pointer to the global data

Note: on PPC, we could use a static initializer (since the
address of the global data structure is known at compile time),
but it turned out that reserving a register results in somewhat
smaller code - although the code savings are not that big (on
average for all boards 752 bytes for the whole U-Boot image,
624 text + 127 data).
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On ARM, the following registers are used:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;R0:	function argument word/integer result
R1-R3:	function argument word
R9:	platform specific
R10:	stack limit (used only if stack checking is enabled)
R11:	argument (frame) pointer
R12:	temporary workspace
R13:	stack pointer
R14:	link register
R15:	program counter

==&amp;gt; U-Boot will use R9 to hold a pointer to the global data

Note: on ARM, only R_ARM_RELATIVE relocations are supported.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Nios II, the ABI is documented here: &lt;a href=&quot;https://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf&quot;&gt;https://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;==&amp;gt; U-Boot will use gp to hold a pointer to the global data

Note: on Nios II, we give &quot;-G0&quot; option to gcc and don&#39;t use gp
to access small data sections, so gp is free.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On RISC-V, the following registers are used:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;x0: hard-wired zero (zero)
x1: return address (ra)
x2:	stack pointer (sp)
x3:	global pointer (gp)
x4:	thread pointer (tp)
x5:	link register (t0)
x8:	frame pointer (fp)
x10-x11:	arguments/return values (a0-1)
x12-x17:	arguments (a2-7)
x28-31:	 temporaries (t3-6)
pc:	program counter (pc)

==&amp;gt; U-Boot will use gp to hold a pointer to the global data
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;System Initialization:&lt;/h2&gt; 
&lt;p&gt;In the reset configuration, U-Boot starts at the reset entry point (on most PowerPC systems at address 0x00000100). Because of the reset configuration for CS0# this is a mirror of the on board Flash memory. To be able to re-map memory U-Boot then jumps to its link address. To be able to implement the initialization code in C, a (small!) initial stack is set up in the internal Dual Ported RAM (in case CPUs which provide such a feature like), or in a locked part of the data cache. After that, U-Boot initializes the CPU core, the caches and the SIU.&lt;/p&gt; 
&lt;p&gt;Next, all (potentially) available memory banks are mapped using a preliminary mapping. For example, we put them on 512 MB boundaries (multiples of 0x20000000: SDRAM on 0x00000000 and 0x20000000, Flash on 0x40000000 and 0x60000000, SRAM on 0x80000000). Then UPM A is programmed for SDRAM access. Using the temporary configuration, a simple memory test is run that determines the size of the SDRAM banks.&lt;/p&gt; 
&lt;p&gt;When there is more than one SDRAM bank, and the banks are of different size, the largest is mapped first. For equal size, the first bank (CS2#) is mapped first. The first mapping is always for address 0x00000000, with any additional banks following immediately to create contiguous memory starting from 0.&lt;/p&gt; 
&lt;p&gt;Then, the monitor installs itself at the upper end of the SDRAM area and allocates memory for use by malloc() and for the global Board Info data; also, the exception vector code is copied to the low RAM pages, and the final stack is set up.&lt;/p&gt; 
&lt;p&gt;Only after this relocation will you have a &quot;normal&quot; C environment; until that you are restricted in several ways, mostly because you are running from ROM, and because the code will have to be relocated to a new address in RAM.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;The U-Boot projects depends on contributions from the user community. If you want to participate, please, have a look at the &#39;General&#39; section of &lt;a href=&quot;https://docs.u-boot.org/en/latest/develop/index.html&quot;&gt;https://docs.u-boot.org/en/latest/develop/index.html&lt;/a&gt; where we describe coding standards and the patch submission process.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mbed-TLS/mbedtls</title>
      <link>https://github.com/Mbed-TLS/mbedtls</link>
      <description>&lt;p&gt;An open source, portable, easy to use, readable and flexible TLS library, and reference implementation of the PSA Cryptography API. Releases are on a varying cadence, typically around 3 - 6 months between releases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; 
&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&quot;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; 
&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The main Mbed TLS documentation is available via &lt;a href=&quot;https://mbed-tls.readthedocs.io/&quot;&gt;ReadTheDocs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Documentation for the PSA Cryptography API is available &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure that &lt;a href=&quot;http://www.doxygen.nl/&quot;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;cmake /path/to/mbedtls/source&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For other sources of documentation, see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Compiling&lt;/h2&gt; 
&lt;p&gt;We use CMake to configure and drive our build process. Three libraries are built: libtfpsacrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libtfpsacrypto, and libmbedx509 depends on libtfpsacrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -ltfpsacrypto&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Tool versions&lt;/h3&gt; 
&lt;p&gt;You need the following tools to build the library:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CMake 3.10.2 or later.&lt;/li&gt; 
 &lt;li&gt;A build system that CMake supports.&lt;/li&gt; 
 &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, Arm Compiler 6, IAR 8 and Visual Studio 2017. More recent versions should work. Slightly older versions may work.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 to generate the test code. Python is also needed to integrate PSA drivers and to build the development branch (see next section).&lt;/li&gt; 
 &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; 
 &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Git usage&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;development&lt;/code&gt; branch and the &lt;code&gt;mbedtls-3.6&lt;/code&gt; long-term support branch of Mbed TLS use a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules#_cloning_submodules&quot;&gt;Git submodule&lt;/a&gt; (&lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-framework&quot;&gt;framework&lt;/a&gt;). This is not needed to merely compile the library at a release tag. This is not needed to consume a release archive (zip or tar).&lt;/p&gt; 
&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; 
&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; 
&lt;p&gt;The following tools are required:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; 
 &lt;li&gt;Python 3.8 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run: &lt;pre&gt;&lt;code&gt;python3 -m pip install --user -r scripts/basic.requirements.txt
&lt;/code&gt;&lt;/pre&gt; Depending on your Python installation, you may need to invoke &lt;code&gt;python&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt;. To install the packages system-wide, omit the &lt;code&gt;--user&lt;/code&gt; option.&lt;/li&gt; 
 &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The scripts that generate the configuration-independent files will look for a host C compiler in the following places (in order of preference):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The &lt;code&gt;HOSTCC&lt;/code&gt; environment variable. This can be used if &lt;code&gt;CC&lt;/code&gt; is pointing to a cross-compiler.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;CC&lt;/code&gt; environment variable.&lt;/li&gt; 
 &lt;li&gt;An executable called &lt;code&gt;cc&lt;/code&gt; in the current path.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note: If you have multiple toolchains installed, it is recommended to set &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;HOSTCC&lt;/code&gt; to the intended host compiler before generating the files.&lt;/p&gt; 
&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake generates the required files automatically.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;framework/scripts/make_generated_files.py&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CMake&lt;/h3&gt; 
&lt;p&gt;In order to build the libraries using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir
cmake /path/to/mbedtls_source
cmake --build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ctest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;programs/test/selftest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are many different build types available with CMake. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Switching build types in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake -LH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; 
&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the legacy Makefiles still used for testing purposes (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can now make the desired change:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; 
&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; 
&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::tfpsacrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;add_executable(xyz)

target_link_libraries(xyz
    PUBLIC MbedTLS::mbedtls
           MbedTLS::tfpsacrypto
           MbedTLS::mbedx509)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; 
&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; 
&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; 
&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; 
&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2017.&lt;/p&gt; 
&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; 
&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&quot;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Example programs&lt;/h2&gt; 
&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&quot;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_ssl.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; 
&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/depends.py&lt;/code&gt; test builds in configurations with a single curve, key exchange, hash, cipher, or pkalg on.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instead of manually installing the required versions of all tools required for testing, it is possible to use the Docker images from our CI systems, as explained in &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls-test/raw/main/README.md#quick-start&quot;&gt;our testing infrastructure repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; 
&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS/&quot;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/development/what-external-dependencies-does-mbedtls-rely-on/&quot;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mbed-tls.readthedocs.io/en/latest/kb/compiling-and-building/how-do-i-configure-mbedtls/&quot;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; 
 &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; 
 &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; 
 &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; 
 &lt;li&gt;Mixed-endian platforms are not supported.&lt;/li&gt; 
 &lt;li&gt;SIZE_MAX must be at least as big as INT_MAX and UINT_MAX.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;PSA cryptography API&lt;/h2&gt; 
&lt;h3&gt;PSA API&lt;/h3&gt; 
&lt;p&gt;Arm&#39;s &lt;a href=&quot;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&quot;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://arm-software.github.io/psa-api/crypto/&quot;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; 
&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; 
 &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; 
 &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; 
 &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; 
 &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&quot;mailto:mbed-crypto@arm.com&quot;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; 
&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. However, it does not aim to implement the whole specification; in particular it does not implement all the algorithms.&lt;/p&gt; 
&lt;h3&gt;PSA drivers&lt;/h3&gt; 
&lt;p&gt;Mbed TLS supports drivers for cryptographic accelerators, secure elements and random generators. This is work in progress. Please note that the driver interfaces are not fully stable yet and may change without notice. We intend to preserve backward compatibility for application code (using the PSA Crypto API), but the code of the drivers may have to change in future minor releases of Mbed TLS.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/Mbed-TLS/TF-PSA-Crypto/raw/development/docs/psa-driver-example-and-guide.md&quot;&gt;PSA driver example and guide&lt;/a&gt; for information on writing a driver.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under a dual &lt;a href=&quot;https://spdx.org/licenses/Apache-2.0.html&quot;&gt;Apache-2.0&lt;/a&gt; OR &lt;a href=&quot;https://spdx.org/licenses/GPL-2.0-or-later.html&quot;&gt;GPL-2.0-or-later&lt;/a&gt; license. See the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for the full text of these licenses, and &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md#License-and-Copyright&quot;&gt;the &#39;License and Copyright&#39; section in the contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Third-party code included in Mbed TLS&lt;/h3&gt; 
&lt;p&gt;This project contains code from other projects. This code is located within the &lt;code&gt;tf-psa-crypto/drivers/&lt;/code&gt; directory. The original license text is included within project subdirectories, where it differs from the normal Mbed TLS license, and/or in source files. The projects are listed below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;drivers/everest/&lt;/code&gt;: Files stem from &lt;a href=&quot;https://project-everest.github.io/&quot;&gt;Project Everest&lt;/a&gt; and are distributed under the Apache 2.0 license.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;drivers/p256-m/p256-m/&lt;/code&gt;: Files have been taken from the &lt;a href=&quot;https://github.com/mpg/p256-m&quot;&gt;p256-m&lt;/a&gt; repository. The code in the original repository is distributed under the Apache 2.0 license. It is distributed in Mbed TLS under a dual Apache-2.0 OR GPL-2.0-or-later license with permission from the author.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&quot;mailto:mbed-tls-security@lists.trustedfirmware.org&quot;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&quot;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&quot;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&quot;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Please see &lt;a href=&quot;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&quot;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>xiph/opus</title>
      <link>https://github.com/xiph/opus</link>
      <description>&lt;p&gt;Modern audio compression for the internet.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;== Opus audio codec ==&lt;/p&gt; 
&lt;p&gt;Opus is a codec for interactive speech and audio transmission over the Internet.&lt;/p&gt; 
&lt;p&gt;Opus can handle a wide range of interactive audio applications, including Voice over IP, videoconferencing, in-game chat, and even remote live music performances. It can scale from low bit-rate narrowband speech to very high quality stereo music.&lt;/p&gt; 
&lt;p&gt;Opus, when coupled with an appropriate container format, is also suitable for non-realtime stored-file applications such as music distribution, game soundtracks, portable music players, jukeboxes, and other applications that have historically used high latency formats such as MP3, AAC, or Vorbis.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;                Opus is specified by IETF RFC 6716:
                https://tools.ietf.org/html/rfc6716
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Opus format and this implementation of it are subject to the royalty- free patent and copyright licenses specified in the file COPYING.&lt;/p&gt; 
&lt;p&gt;This package implements a shared library for encoding and decoding raw Opus bitstreams. Raw Opus bitstreams should be used over RTP according to &lt;a href=&quot;https://tools.ietf.org/html/rfc7587&quot;&gt;https://tools.ietf.org/html/rfc7587&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The package also includes a number of test tools used for testing the correct operation of the library. The bitstreams read/written by these tools should not be used for Opus file distribution: They include additional debugging data and cannot support seeking.&lt;/p&gt; 
&lt;p&gt;Opus stored in files should use the Ogg encapsulation for Opus which is described at: &lt;a href=&quot;https://tools.ietf.org/html/rfc7845&quot;&gt;https://tools.ietf.org/html/rfc7845&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An opus-tools package is available which provides encoding and decoding of Ogg encapsulated Opus files and includes a number of useful features.&lt;/p&gt; 
&lt;p&gt;Opus-tools can be found at: &lt;a href=&quot;https://gitlab.xiph.org/xiph/opus-tools.git&quot;&gt;https://gitlab.xiph.org/xiph/opus-tools.git&lt;/a&gt; or on the main Opus website: &lt;a href=&quot;https://opus-codec.org/&quot;&gt;https://opus-codec.org/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;== Deep Learning and Opus ==&lt;/p&gt; 
&lt;p&gt;Lossy networks continue to be a challenge for real-time communications. While the original implementation of Opus provides an excellent packet loss concealment mechanism, the team has continued to advance the methodology used to improve audio quality in challenge network environments.&lt;/p&gt; 
&lt;p&gt;In Opus 1.5, we added a deep learning based redundancy encoder that enhances audio in lossy networks by embedding one second of recovery data in the padding data of each packet. The underlying algorithm behind encoding and decoding the recovery data is called the deep redundancy (DRED) algorithm. By leveraging the padding data within the packet, Opus 1.5 is fully backward compatible with prior revisions of Opus. Please see the README under the &quot;dnn&quot; subdirectory to understand DRED.&lt;/p&gt; 
&lt;p&gt;DRED was developed by a team that Amazon Web Services initially sponsored, who open-sourced the implementation as well as began the standardization process at the IETF: &lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-mlcodec-opus-extension/&quot;&gt;https://datatracker.ietf.org/doc/draft-ietf-mlcodec-opus-extension/&lt;/a&gt; The license behind Opus or the intellectual property position of Opus does not change with Opus 1.5.&lt;/p&gt; 
&lt;p&gt;== Compiling libopus ==&lt;/p&gt; 
&lt;p&gt;To build from a distribution tarball, you only need to do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% ./configure
% make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build from the git repository, the following steps are necessary:&lt;/p&gt; 
&lt;ol start=&quot;0&quot;&gt; 
 &lt;li&gt;Set up a development environment:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;On an Ubuntu or Debian family Linux distribution:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% sudo apt-get install git autoconf automake libtool gcc make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On a Fedora/Redhat based Linux:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% sudo dnf install git autoconf automake libtool gcc make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or for older Redhat/Centos Linux releases:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% sudo yum install git autoconf automake libtool gcc make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Apple macOS, install Xcode and brew.sh, then in the Terminal enter:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% brew install autoconf automake libtool
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;p&gt;% git clone &lt;a href=&quot;https://gitlab.xiph.org/xiph/opus.git&quot;&gt;https://gitlab.xiph.org/xiph/opus.git&lt;/a&gt; % cd opus&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compiling the source&lt;/p&gt; &lt;p&gt;% ./autogen.sh % ./configure % make&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;On x86, it&#39;s a good idea to use a -march= option that allows the use of AVX2.&lt;/p&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt; &lt;p&gt;Install the codec libraries (optional)&lt;/p&gt; &lt;p&gt;% sudo make install&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Once you have compiled the codec, there will be a opus_demo executable in the top directory.&lt;/p&gt; 
&lt;p&gt;Usage: opus_demo [-e] 
 &lt;application&gt;
   &amp;lt;sampling rate (Hz)&amp;gt; &amp;lt;channels (1/2)&amp;gt; 
  &lt;bits per second&gt;
    [options] 
   &lt;input /&gt; 
   &lt;output&gt; opus_demo -d &amp;lt;sampling rate (Hz)&amp;gt; &amp;lt;channels (1/2)&amp;gt; [options] &lt;input /&gt; &lt;output&gt;&lt;/output&gt;&lt;/output&gt;
  &lt;/bits&gt;
 &lt;/application&gt;&lt;/p&gt; 
&lt;p&gt;mode: voip | audio | restricted-lowdelay options: -e : only runs the encoder (output the bit-stream) -d : only runs the decoder (reads the bit-stream as input) -cbr : enable constant bitrate; default: variable bitrate -cvbr : enable constrained variable bitrate; default: unconstrained -bandwidth &amp;lt;NB|MB|WB|SWB|FB&amp;gt; : audio bandwidth (from narrowband to fullband); default: sampling rate -framesize &amp;lt;2.5|5|10|20|40|60&amp;gt; : frame size in ms; default: 20 -max_payload 
 &lt;bytes&gt;
   : maximum payload size in bytes, default: 1024 -complexity 
  &lt;comp&gt;
    : complexity, 0 (lowest) ... 10 (highest); default: 10 -inbandfec : enable SILK inband FEC -forcemono : force mono encoding, even for stereo input -dtx : enable SILK DTX -loss 
   &lt;perc&gt;
     : simulate packet loss, in percent (0-100); default: 0
   &lt;/perc&gt;
  &lt;/comp&gt;
 &lt;/bytes&gt;&lt;/p&gt; 
&lt;p&gt;input and output are little-endian signed 16-bit PCM files or opus bitstreams with simple opus_demo proprietary framing.&lt;/p&gt; 
&lt;p&gt;== Testing ==&lt;/p&gt; 
&lt;p&gt;This package includes a collection of automated unit and system tests which SHOULD be run after compiling the package especially the first time it is run on a new platform.&lt;/p&gt; 
&lt;p&gt;To run the integrated tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% make check
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is also collection of standard test vectors which are not included in this package for size reasons but can be obtained from: &lt;a href=&quot;https://opus-codec.org/docs/opus_testvectors-rfc8251.tar.gz&quot;&gt;https://opus-codec.org/docs/opus_testvectors-rfc8251.tar.gz&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To run compare the code to these test vectors:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;% curl -OL https://opus-codec.org/docs/opus_testvectors-rfc8251.tar.gz
% tar -zxf opus_testvectors-rfc8251.tar.gz
% ./tests/run_vectors.sh ./ opus_newvectors 48000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;== Compiling libopus for Windows and alternative build systems ==&lt;/p&gt; 
&lt;p&gt;See cmake/README.md or meson/README.md.&lt;/p&gt; 
&lt;p&gt;== Portability notes ==&lt;/p&gt; 
&lt;p&gt;This implementation uses floating-point by default but can be compiled to use only fixed-point arithmetic by setting --enable-fixed-point (if using autoconf) or by defining the FIXED_POINT macro (if building manually). The fixed point implementation has somewhat lower audio quality and is slower on platforms with fast FPUs, it is normally only used in embedded environments.&lt;/p&gt; 
&lt;p&gt;The implementation can be compiled with either a C89 or a C99 compiler. While it does not rely on any &lt;em&gt;undefined behavior&lt;/em&gt; as defined by C89 or C99, it relies on common &lt;em&gt;implementation-defined behavior&lt;/em&gt; for two&#39;s complement architectures:&lt;/p&gt; 
&lt;p&gt;o Right shifts of negative values are consistent with two&#39;s complement arithmetic, so that a&amp;gt;&amp;gt;b is equivalent to floor(a/(2^b)),&lt;/p&gt; 
&lt;p&gt;o For conversion to a signed integer of N bits, the value is reduced modulo 2^N to be within range of the type,&lt;/p&gt; 
&lt;p&gt;o The result of integer division of a negative value is truncated towards zero, and&lt;/p&gt; 
&lt;p&gt;o The compiler provides a 64-bit integer type (a C99 requirement which is supported by most C89 compilers).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pbatard/rufus</title>
      <link>https://github.com/pbatard/rufus</link>
      <description>&lt;p&gt;The Reliable USB Formatting Utility&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rufus: The Reliable USB Formatting Utility&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/pbatard/rufus/actions/workflows/vs2022.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/pbatard/rufus/vs2022.yml?branch=master&amp;amp;style=flat-square&amp;amp;label=VS2022%20Build&quot; alt=&quot;VS2022 Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pbatard/rufus/actions/workflows/mingw.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/pbatard/rufus/mingw.yml?branch=master&amp;amp;style=flat-square&amp;amp;label=MinGW%20Build&quot; alt=&quot;MinGW Build Status&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://scan.coverity.com/projects/pbatard-rufus&quot;&gt;&lt;img src=&quot;https://img.shields.io/coverity/scan/2172.svg?style=flat-square&amp;amp;label=Coverity%20Analysis&quot; alt=&quot;Coverity Scan Status&quot; /&gt;&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;https://github.com/pbatard/rufus/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release-pre/pbatard/rufus.svg?style=flat-square&amp;amp;label=Latest%20Release&quot; alt=&quot;Latest Release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-GPLv3-blue.svg?style=flat-square&amp;amp;label=License&quot; alt=&quot;Licence&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pbatard/rufus/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/pbatard/rufus/total.svg?label=Downloads&amp;amp;style=flat-square&quot; alt=&quot;Download Stats&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/pbatard/rufus/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/pbatard/rufus.svg?style=flat-square&amp;amp;label=Contributors&quot; alt=&quot;Contributors&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pbatard/rufus/master/res/icons/rufus-128.png&quot; alt=&quot;Rufus logo&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Rufus is a utility that helps format and create bootable USB flash drives.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Format USB, flash card and virtual drives to FAT/FAT32/NTFS/UDF/exFAT/ReFS/ext2/ext3&lt;/li&gt; 
 &lt;li&gt;Create DOS bootable USB drives using &lt;a href=&quot;https://www.freedos.org&quot;&gt;FreeDOS&lt;/a&gt; or MS-DOS&lt;/li&gt; 
 &lt;li&gt;Create BIOS or UEFI bootable drives, including &lt;a href=&quot;https://github.com/pbatard/uefi-ntfs&quot;&gt;UEFI bootable NTFS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Create bootable drives from bootable ISOs (Windows, Linux, etc.)&lt;/li&gt; 
 &lt;li&gt;Create bootable drives from bootable disk images, including compressed ones&lt;/li&gt; 
 &lt;li&gt;Create Windows 11 installation drives for PCs that don&#39;t have TPM or Secure Boot&lt;/li&gt; 
 &lt;li&gt;Create &lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_To_Go&quot;&gt;Windows To Go&lt;/a&gt; drives&lt;/li&gt; 
 &lt;li&gt;Create VHD/DD, VHDX and FFU images of an existing drive&lt;/li&gt; 
 &lt;li&gt;Create persistent Linux partitions&lt;/li&gt; 
 &lt;li&gt;Compute MD5, SHA-1, SHA-256 and SHA-512 checksums of the selected image&lt;/li&gt; 
 &lt;li&gt;Perform runtime validation of UEFI bootable media&lt;/li&gt; 
 &lt;li&gt;Improve Windows installation experience by automatically setting up OOBE parameters (local account, privacy options, etc.)&lt;/li&gt; 
 &lt;li&gt;Perform bad blocks checks, including detection of &quot;fake&quot; flash drives&lt;/li&gt; 
 &lt;li&gt;Download official Microsoft Windows 8, Windows 10 or Windows 11 retail ISOs&lt;/li&gt; 
 &lt;li&gt;Download &lt;a href=&quot;https://github.com/pbatard/UEFI-Shell&quot;&gt;UEFI Shell&lt;/a&gt; ISOs&lt;/li&gt; 
 &lt;li&gt;Modern and familiar UI, with &lt;a href=&quot;https://github.com/pbatard/rufus/wiki/FAQ#What_languages_are_natively_supported_by_Rufus&quot;&gt;38 languages natively supported&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Small footprint. No installation required.&lt;/li&gt; 
 &lt;li&gt;Portable. Secure Boot compatible.&lt;/li&gt; 
 &lt;li&gt;100% &lt;a href=&quot;https://www.gnu.org/philosophy/free-sw&quot;&gt;Free Software&lt;/a&gt; (&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;GPL v3&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Compilation&lt;/h2&gt; 
&lt;p&gt;Use either Visual Studio 2022 or MinGW and then invoke the &lt;code&gt;.sln&lt;/code&gt; or &lt;code&gt;configure&lt;/code&gt;/&lt;code&gt;make&lt;/code&gt; respectively.&lt;/p&gt; 
&lt;h4&gt;Visual Studio&lt;/h4&gt; 
&lt;p&gt;Rufus is an OSI compliant Open Source project. You are entitled to download and use the &lt;em&gt;freely available&lt;/em&gt; &lt;a href=&quot;https://www.visualstudio.com/vs/community/&quot;&gt;Visual Studio Community Edition&lt;/a&gt; to build, run or develop for Rufus. As per the Visual Studio Community Edition license, this applies regardless of whether you are an individual or a corporate user.&lt;/p&gt; 
&lt;h2&gt;Additional information&lt;/h2&gt; 
&lt;p&gt;Rufus provides extensive information about what it is doing, either through its easily accessible log, or through the &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/debugview&quot;&gt;Windows debug facility&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rufus.ie&quot;&gt;&lt;strong&gt;Official Website&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pbatard/rufus/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Enhancements/Bugs&lt;/h2&gt; 
&lt;p&gt;Please use the &lt;a href=&quot;https://github.com/pbatard/rufus/issues&quot;&gt;GitHub issue tracker&lt;/a&gt; for reporting problems or suggesting new features.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>littlefs-project/littlefs</title>
      <link>https://github.com/littlefs-project/littlefs</link>
      <description>&lt;p&gt;A little fail-safe filesystem designed for microcontrollers&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;littlefs&lt;/h2&gt; 
&lt;p&gt;A little fail-safe filesystem designed for microcontrollers.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;   | | |     .---._____
  .-----.   |          |
--|o    |---| littlefs |
--|     |---|          |
  &#39;-----&#39;   &#39;----------&#39;
   | | |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Power-loss resilience&lt;/strong&gt; - littlefs is designed to handle random power failures. All file operations have strong copy-on-write guarantees and if power is lost the filesystem will fall back to the last known good state.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Dynamic wear leveling&lt;/strong&gt; - littlefs is designed with flash in mind, and provides wear leveling over dynamic blocks. Additionally, littlefs can detect bad blocks and work around them.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bounded RAM/ROM&lt;/strong&gt; - littlefs is designed to work with a small amount of memory. RAM usage is strictly bounded, which means RAM consumption does not change as the filesystem grows. The filesystem contains no unbounded recursion and dynamic memory is limited to configurable buffers that can be provided statically.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;Here&#39;s a simple example that updates a file named &lt;code&gt;boot_count&lt;/code&gt; every time main runs. The program can be interrupted at any time without losing track of how many times it has been booted and without corrupting the filesystem:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &quot;lfs.h&quot;

// variables used by the filesystem
lfs_t lfs;
lfs_file_t file;

// configuration of the filesystem is provided by this struct
const struct lfs_config cfg = {
    // block device operations
    .read  = user_provided_block_device_read,
    .prog  = user_provided_block_device_prog,
    .erase = user_provided_block_device_erase,
    .sync  = user_provided_block_device_sync,

    // block device configuration
    .read_size = 16,
    .prog_size = 16,
    .block_size = 4096,
    .block_count = 128,
    .cache_size = 16,
    .lookahead_size = 16,
    .block_cycles = 500,
};

// entry point
int main(void) {
    // mount the filesystem
    int err = lfs_mount(&amp;amp;lfs, &amp;amp;cfg);

    // reformat if we can&#39;t mount the filesystem
    // this should only happen on the first boot
    if (err) {
        lfs_format(&amp;amp;lfs, &amp;amp;cfg);
        lfs_mount(&amp;amp;lfs, &amp;amp;cfg);
    }

    // read current count
    uint32_t boot_count = 0;
    lfs_file_open(&amp;amp;lfs, &amp;amp;file, &quot;boot_count&quot;, LFS_O_RDWR | LFS_O_CREAT);
    lfs_file_read(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));

    // update boot count
    boot_count += 1;
    lfs_file_rewind(&amp;amp;lfs, &amp;amp;file);
    lfs_file_write(&amp;amp;lfs, &amp;amp;file, &amp;amp;boot_count, sizeof(boot_count));

    // remember the storage is not updated until the file is closed successfully
    lfs_file_close(&amp;amp;lfs, &amp;amp;file);

    // release any resources we were using
    lfs_unmount(&amp;amp;lfs);

    // print the boot count
    printf(&quot;boot_count: %d\n&quot;, boot_count);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Detailed documentation (or at least as much detail as is currently available) can be found in the comments in &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&quot;&gt;lfs.h&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;littlefs takes in a configuration structure that defines how the filesystem operates. The configuration struct provides the filesystem with the block device operations and dimensions, tweakable parameters that tradeoff memory usage for performance, and optional static buffers if the user wants to avoid dynamic memory.&lt;/p&gt; 
&lt;p&gt;The state of the littlefs is stored in the &lt;code&gt;lfs_t&lt;/code&gt; type which is left up to the user to allocate, allowing multiple filesystems to be in use simultaneously. With the &lt;code&gt;lfs_t&lt;/code&gt; and configuration struct, a user can format a block device or mount the filesystem.&lt;/p&gt; 
&lt;p&gt;Once mounted, the littlefs provides a full set of POSIX-like file and directory functions, with the deviation that the allocation of filesystem structures must be provided by the user.&lt;/p&gt; 
&lt;p&gt;All POSIX operations, such as remove and rename, are atomic, even in event of power-loss. Additionally, file updates are not actually committed to the filesystem until sync or close is called on the file.&lt;/p&gt; 
&lt;h2&gt;Other notes&lt;/h2&gt; 
&lt;p&gt;Littlefs is written in C, and specifically should compile with any compiler that conforms to the &lt;code&gt;C99&lt;/code&gt; standard.&lt;/p&gt; 
&lt;p&gt;All littlefs calls have the potential to return a negative error code. The errors can be either one of those found in the &lt;code&gt;enum lfs_error&lt;/code&gt; in &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/lfs.h&quot;&gt;lfs.h&lt;/a&gt;, or an error returned by the user&#39;s block device operations.&lt;/p&gt; 
&lt;p&gt;In the configuration struct, the &lt;code&gt;prog&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; function provided by the user may return a &lt;code&gt;LFS_ERR_CORRUPT&lt;/code&gt; error if the implementation already can detect corrupt blocks. However, the wear leveling does not depend on the return code of these functions, instead all data is read back and checked for integrity.&lt;/p&gt; 
&lt;p&gt;If your storage caches writes, make sure that the provided &lt;code&gt;sync&lt;/code&gt; function flushes all the data to memory and ensures that the next read fetches the data from memory, otherwise data integrity can not be guaranteed. If the &lt;code&gt;write&lt;/code&gt; function does not perform caching, and therefore each &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; call hits the memory, the &lt;code&gt;sync&lt;/code&gt; function can simply return 0.&lt;/p&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;At a high level, littlefs is a block based filesystem that uses small logs to store metadata and larger copy-on-write (COW) structures to store file data.&lt;/p&gt; 
&lt;p&gt;In littlefs, these ingredients form a sort of two-layered cake, with the small logs (called metadata pairs) providing fast updates to metadata anywhere on storage, while the COW structures store file data compactly and without any wear amplification cost.&lt;/p&gt; 
&lt;p&gt;Both of these data structures are built out of blocks, which are fed by a common block allocator. By limiting the number of erases allowed on a block per allocation, the allocator provides dynamic wear leveling over the entire filesystem.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;                    root
                   .--------.--------.
                   | A&#39;| B&#39;|         |
                   |   |   |-&amp;gt;       |
                   |   |   |         |
                   &#39;--------&#39;--------&#39;
                .----&#39;   &#39;--------------.
       A       v                 B       v
      .--------.--------.       .--------.--------.
      | C&#39;| D&#39;|         |       | E&#39;|new|         |
      |   |   |-&amp;gt;       |       |   | E&#39;|-&amp;gt;       |
      |   |   |         |       |   |   |         |
      &#39;--------&#39;--------&#39;       &#39;--------&#39;--------&#39;
      .-&#39;   &#39;--.                  |   &#39;------------------.
     v          v              .-&#39;                        v
.--------.  .--------.        v                       .--------.
|   C    |  |   D    |   .--------.       write       | new E  |
|        |  |        |   |   E    |        ==&amp;gt;        |        |
|        |  |        |   |        |                   |        |
&#39;--------&#39;  &#39;--------&#39;   |        |                   &#39;--------&#39;
                         &#39;--------&#39;                   .-&#39;    |
                         .-&#39;    &#39;-.    .-------------|------&#39;
                        v          v  v              v
                   .--------.  .--------.       .--------.
                   |   F    |  |   G    |       | new F  |
                   |        |  |        |       |        |
                   |        |  |        |       |        |
                   &#39;--------&#39;  &#39;--------&#39;       &#39;--------&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More details on how littlefs works can be found in &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&quot;&gt;DESIGN.md&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&quot;&gt;SPEC.md&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/DESIGN.md&quot;&gt;DESIGN.md&lt;/a&gt; - A fully detailed dive into how littlefs works. I would suggest reading it as the tradeoffs at work are quite interesting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/SPEC.md&quot;&gt;SPEC.md&lt;/a&gt; - The on-disk specification of littlefs with all the nitty-gritty details. May be useful for tooling development.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;The littlefs comes with a test suite designed to run on a PC using the &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/bd/lfs_testbd.h&quot;&gt;emulated block device&lt;/a&gt; found in the &lt;code&gt;bd&lt;/code&gt; directory. The tests assume a Linux environment and can be started with make:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Tests are implemented in C in the .toml files found in the &lt;code&gt;tests&lt;/code&gt; directory. When developing a feature or fixing a bug, it is frequently useful to run a single test case or suite of tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./scripts/test.py -l runners/test_runner  # list available test suites
./scripts/test.py -L runners/test_runner test_dirs  # list available test cases
./scripts/test.py runners/test_runner test_dirs  # run a specific test suite
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If an assert fails in a test, test.py will try to print information about the failure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;tests/test_dirs.toml:1:failure: test_dirs_root:1g12gg2 (PROG_SIZE=16, ERASE_SIZE=512) failed
tests/test_dirs.toml:5:assert: assert failed with 0, expected eq 42
    lfs_mount(&amp;amp;lfs, cfg) =&amp;gt; 42;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This includes the test id, which can be passed to test.py to run only that specific test permutation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./scripts/test.py runners/test_runner test_dirs_root:1g12gg2  # run a specific test permutation
./scripts/test.py runners/test_runner test_dirs_root:1g12gg2 --gdb  # drop into gdb on failure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some other flags that may be useful:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./scripts/test.py runners/test_runner -b -j  # run tests in parallel
./scripts/test.py runners/test_runner -v -O-  # redirect stdout to stdout
./scripts/test.py runners/test_runner -ddisk  # capture resulting disk image
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;code&gt;-h/--help&lt;/code&gt; for a full list of available flags:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./scripts/test.py --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The littlefs is provided under the &lt;a href=&quot;https://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt; license. See &lt;a href=&quot;https://raw.githubusercontent.com/littlefs-project/littlefs/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt; for more information. Contributions to this project are accepted under the same license.&lt;/p&gt; 
&lt;p&gt;Individual files contain the following tag instead of the full license text.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SPDX-License-Identifier:    BSD-3-Clause
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This enables machine processing of license information based on the SPDX License Identifiers that are here available: &lt;a href=&quot;http://spdx.org/licenses/&quot;&gt;http://spdx.org/licenses/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Related projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/geky/littlefs-fuse&quot;&gt;littlefs-fuse&lt;/a&gt; - A &lt;a href=&quot;https://github.com/libfuse/libfuse&quot;&gt;FUSE&lt;/a&gt; wrapper for littlefs. The project allows you to mount littlefs directly on a Linux machine. Can be useful for debugging littlefs if you have an SD card handy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/geky/littlefs-js&quot;&gt;littlefs-js&lt;/a&gt; - A javascript wrapper for littlefs. I&#39;m not sure why you would want this, but it is handy for demos. You can see it in action &lt;a href=&quot;http://littlefs.geky.net/demo.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://pypi.org/project/littlefs-python/&quot;&gt;littlefs-python&lt;/a&gt; - A Python wrapper for littlefs. The project allows you to create images of the filesystem on your PC. Check if littlefs will fit your needs, create images for a later download to the target memory or inspect the content of a binary image of the target memory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://crates.io/crates/littlefs2&quot;&gt;littlefs2-rust&lt;/a&gt; - A Rust wrapper for littlefs. This project allows you to use littlefs in a Rust-friendly API, reaping the benefits of Rust&#39;s memory safety and other guarantees.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Graveflo/nim-littlefs&quot;&gt;nim-littlefs&lt;/a&gt; - A Nim wrapper and API for littlefs. Includes a fuse implementation based on &lt;a href=&quot;https://github.com/geky/littlefs-fuse&quot;&gt;littlefs-fuse&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/yomimono/chamelon&quot;&gt;chamelon&lt;/a&gt; - A pure-OCaml implementation of (most of) littlefs, designed for use with the MirageOS library operating system project. It is interoperable with the reference implementation, with some caveats.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/tniessen/littlefs-disk-img-viewer&quot;&gt;littlefs-disk-img-viewer&lt;/a&gt; - A memory-efficient web application for viewing littlefs disk images in your web browser.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/whitecatboard/Lua-RTOS-ESP32/tree/master/components/mklfs/src&quot;&gt;mklfs&lt;/a&gt; - A command line tool for creating littlefs images. Used in the Lua RTOS ecosystem.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/earlephilhower/mklittlefs&quot;&gt;mklittlefs&lt;/a&gt; - A command line tool for creating littlefs images. Used in the ESP8266 and RP2040 ecosystem.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/oyama/pico-littlefs-usb&quot;&gt;pico-littlefs-usb&lt;/a&gt; - An interface for littlefs that emulates a FAT12 filesystem over USB. Allows mounting littlefs on a host PC without additional drivers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/geky/ramcrc32bd&quot;&gt;ramcrc32bd&lt;/a&gt; - An example block device using littlefs&#39;s 32-bit CRC for error-correction.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/geky/ramrsbd&quot;&gt;ramrsbd&lt;/a&gt; - An example block device using Reed-Solomon codes for error-correction.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/armmbed/mbed-os&quot;&gt;Mbed OS&lt;/a&gt; - The easiest way to get started with littlefs is to jump into Mbed which already has block device drivers for most forms of embedded storage. littlefs is available in Mbed OS as the &lt;a href=&quot;https://os.mbed.com/docs/mbed-os/latest/apis/littlefilesystem.html&quot;&gt;LittleFileSystem&lt;/a&gt; class.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/pellepl/spiffs&quot;&gt;SPIFFS&lt;/a&gt; - Another excellent embedded filesystem for NOR flash. As a more traditional logging filesystem with full static wear-leveling, SPIFFS will likely outperform littlefs on small memories such as the internal flash on microcontrollers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/dlbeer/dhara&quot;&gt;Dhara&lt;/a&gt; - An interesting NAND flash translation layer designed for small MCUs. It offers static wear-leveling and power-resilience with only a fixed &lt;em&gt;O(|address|)&lt;/em&gt; pointer structure stored on each block and in RAM.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://elm-chan.org/fsw/ff/00index_e.html&quot;&gt;ChaN&#39;s FatFs&lt;/a&gt; - A lightweight reimplementation of the infamous FAT filesystem for microcontroller-scale devices. Due to limitations of FAT it can&#39;t provide power-loss resilience, but it does allow easy interop with PCs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nrfconnect/sdk-nrf</title>
      <link>https://github.com/nrfconnect/sdk-nrf</link>
      <description>&lt;p&gt;nRF Connect SDK main repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;nRF Connect SDK: sdk-nrf ########################&lt;/p&gt; 
&lt;p&gt;.. contents:: :local: :depth: 2&lt;/p&gt; 
&lt;p&gt;This repository contains the core of nRF Connect SDK, including subsystems, libraries, samples, and applications. It is also the SDK&#39;s west manifest repository, containing the nRF Connect SDK manifest (west.yml).&lt;/p&gt; 
&lt;p&gt;Documentation&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Official latest documentation at &lt;a href=&quot;https://docs.nordicsemi.com/bundle/ncs-latest/page/nrf/index.html&quot;&gt;https://docs.nordicsemi.com/bundle/ncs-latest/page/nrf/index.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For earlier versions, open the latest version and use the drop-down under the title header.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AFLplusplus/AFLplusplus</title>
      <link>https://github.com/AFLplusplus/AFLplusplus</link>
      <description>&lt;p&gt;The fuzzer afl++ is afl with community patches, qemu 5.1 upgrade, collision-free coverage, enhanced laf-intel &amp; redqueen, AFLfast++ power schedules, MOpt mutators, unicorn_mode, and a lot more!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;American Fuzzy Lop plus plus (AFL++)&lt;/h1&gt; 
&lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/AFLplusplus/Website/main/static/aflpp_bg.svg?sanitize=true&quot; alt=&quot;AFL++ logo&quot; width=&quot;250&quot; height=&quot;250&quot; /&gt; 
&lt;p&gt;Release version: &lt;a href=&quot;https://github.com/AFLplusplus/AFLplusplus/releases&quot;&gt;4.33c&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GitHub version: 4.34a&lt;/p&gt; 
&lt;p&gt;Repository: &lt;a href=&quot;https://github.com/AFLplusplus/AFLplusplus&quot;&gt;https://github.com/AFLplusplus/AFLplusplus&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;AFL++ is maintained by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Marc &quot;van Hauser&quot; Heuse &lt;a href=&quot;mailto:mh@mh-sec.de&quot;&gt;mh@mh-sec.de&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dominik Maier &lt;a href=&quot;mailto:mail@dmnk.co&quot;&gt;mail@dmnk.co&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Andrea Fioraldi &lt;a href=&quot;mailto:andreafioraldi@gmail.com&quot;&gt;andreafioraldi@gmail.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Heiko &quot;hexcoder-&quot; Eissfeldt &lt;a href=&quot;mailto:heiko.eissfeldt@hexco.de&quot;&gt;heiko.eissfeldt@hexco.de&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;frida_mode is maintained by @Worksbutnottested&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Originally developed by Michal &quot;lcamtuf&quot; Zalewski.&lt;/p&gt; 
&lt;p&gt;AFL++ is a superior fork to Google&#39;s AFL - more speed, more and better mutations, more and better instrumentation, custom module support, etc.&lt;/p&gt; 
&lt;p&gt;You are free to copy, modify, and distribute AFL++ with attribution under the terms of the Apache-2.0 License. See the &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;Here is some information to get you started:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For an overview of the AFL++ documentation and a very helpful graphical guide, please visit &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/README.md&quot;&gt;docs/README.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;To get you started with tutorials, go to &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/tutorials.md&quot;&gt;docs/tutorials.md&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For releases, see the &lt;a href=&quot;https://github.com/AFLplusplus/AFLplusplus/releases&quot;&gt;Releases tab&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#branches&quot;&gt;branches&lt;/a&gt;. The best branches to use are, however, &lt;code&gt;stable&lt;/code&gt; or &lt;code&gt;dev&lt;/code&gt; - depending on your risk appetite. Also take a look at the list of &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/important_changes.md&quot;&gt;important changes in AFL++&lt;/a&gt; and the list of &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/features.md&quot;&gt;features&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you want to use AFL++ for your academic work, check the &lt;a href=&quot;https://aflplus.plus/papers/&quot;&gt;papers page&lt;/a&gt; on the website.&lt;/li&gt; 
 &lt;li&gt;To cite our work, look at the &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#cite&quot;&gt;Cite&lt;/a&gt; section.&lt;/li&gt; 
 &lt;li&gt;For comparisons, use the fuzzbench &lt;code&gt;aflplusplus&lt;/code&gt; setup, or use &lt;code&gt;afl-clang-fast&lt;/code&gt; with &lt;code&gt;AFL_LLVM_CMPLOG=1&lt;/code&gt;. You can find the &lt;code&gt;aflplusplus&lt;/code&gt; default configuration on Google&#39;s &lt;a href=&quot;https://github.com/google/fuzzbench/tree/master/fuzzers/aflplusplus&quot;&gt;fuzzbench&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building and installing AFL++&lt;/h2&gt; 
&lt;p&gt;To have AFL++ easily available with everything compiled, pull the image directly from the Docker Hub (available for both x86_64 and arm64):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;docker pull aflplusplus/aflplusplus
docker run -ti -v /location/of/your/target:/src aflplusplus/aflplusplus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This image is automatically published when a push to the stable branch happens (see &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/#branches&quot;&gt;branches&lt;/a&gt;). If you use the command above, you will find your target source code in &lt;code&gt;/src&lt;/code&gt; in the container.&lt;/p&gt; 
&lt;p&gt;Note: you can also pull &lt;code&gt;aflplusplus/aflplusplus:dev&lt;/code&gt; which is the most current development state of AFL++.&lt;/p&gt; 
&lt;p&gt;To build AFL++ yourself - &lt;em&gt;which we recommend&lt;/em&gt; - continue at &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/INSTALL.md&quot;&gt;docs/INSTALL.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick start: Fuzzing with AFL++&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;NOTE: Before you start, please read about the &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md#0-common-sense-risks&quot;&gt;common sense risks of fuzzing&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This is a quick start for fuzzing targets with the source code available. To read about the process in detail, see &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md&quot;&gt;docs/fuzzing_in_depth.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To learn about fuzzing other targets, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Binary-only targets: &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_binary-only_targets.md&quot;&gt;docs/fuzzing_binary-only_targets.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Network services: &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/best_practices.md#fuzzing-a-network-service&quot;&gt;docs/best_practices.md#fuzzing-a-network-service&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GUI programs: &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/best_practices.md#fuzzing-a-gui-program&quot;&gt;docs/best_practices.md#fuzzing-a-gui-program&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Step-by-step quick start:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Compile the program or library to be fuzzed using &lt;code&gt;afl-cc&lt;/code&gt;. A common way to do this would be:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CC=/path/to/afl-cc CXX=/path/to/afl-c++ ./configure --disable-shared
make clean all
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Get a small but valid input file that makes sense to the program. When fuzzing verbose syntax (SQL, HTTP, etc.), create a dictionary as described in &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/dictionaries/README.md&quot;&gt;dictionaries/README.md&lt;/a&gt;, too.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If the program reads from stdin, run &lt;code&gt;afl-fuzz&lt;/code&gt; like so:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./afl-fuzz -i seeds_dir -o output_dir -- \
/path/to/tested/program [...program&#39;s cmdline...]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To add a dictionary, add &lt;code&gt;-x /path/to/dictionary.txt&lt;/code&gt; to afl-fuzz.&lt;/p&gt; &lt;p&gt;If the program takes input from a file, you can put &lt;code&gt;@@&lt;/code&gt; in the program&#39;s command line; AFL++ will put an auto-generated file name in there for you.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Investigate anything shown in red in the fuzzer UI by promptly consulting &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/afl-fuzz_approach.md#understanding-the-status-screen&quot;&gt;docs/afl-fuzz_approach.md#understanding-the-status-screen&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You will find found crashes and hangs in the subdirectories &lt;code&gt;crashes/&lt;/code&gt; and &lt;code&gt;hangs/&lt;/code&gt; in the &lt;code&gt;-o output_dir&lt;/code&gt; directory. You can replay the crashes by feeding them to the target, e.g. if your target is using stdin:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat output_dir/crashes/id:000000,* | /path/to/tested/program [...program&#39;s cmdline...]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can generate cores or use gdb directly to follow up the crashes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We cannot stress this enough - if you want to fuzz effectively, read the &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/fuzzing_in_depth.md&quot;&gt;docs/fuzzing_in_depth.md&lt;/a&gt; document!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Questions? Concerns? Bug reports?&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The contributors can be reached via (e.g., by creating an issue): &lt;a href=&quot;https://github.com/AFLplusplus/AFLplusplus&quot;&gt;https://github.com/AFLplusplus/AFLplusplus&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Take a look at our &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/FAQ.md&quot;&gt;FAQ&lt;/a&gt;. If you find an interesting or important question missing, submit it via &lt;a href=&quot;https://github.com/AFLplusplus/AFLplusplus/discussions&quot;&gt;https://github.com/AFLplusplus/AFLplusplus/discussions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Best: join the &lt;a href=&quot;https://discord.gg/gCraWct&quot;&gt;Awesome Fuzzing&lt;/a&gt; Discord server.&lt;/li&gt; 
 &lt;li&gt;There is a (not really used) mailing list for the AFL/AFL++ project (&lt;a href=&quot;https://groups.google.com/group/afl-users&quot;&gt;browse archive&lt;/a&gt;). To compare notes with other users or to get notified about major new features, send an email to &lt;a href=&quot;mailto:afl-users+subscribe@googlegroups.com&quot;&gt;afl-users+subscribe@googlegroups.com&lt;/a&gt;, but note that this is not managed by us.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Branches&lt;/h2&gt; 
&lt;p&gt;The following branches exist:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AFLplusplus/AFLplusplus/tree/release&quot;&gt;release&lt;/a&gt;: the latest release&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AFLplusplus/AFLplusplus/&quot;&gt;stable/trunk&lt;/a&gt;: stable state of AFL++ - it is synced from dev from time to time when we are satisfied with its stability&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AFLplusplus/AFLplusplus/tree/dev&quot;&gt;dev&lt;/a&gt;: development state of AFL++ - bleeding edge and you might catch a checkout which does not compile or has a bug. &lt;strong&gt;We only accept PRs (pull requests) for the &#39;dev&#39; branch!&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;(any other): experimental branches to work on specific features or testing new functionality or changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Help wanted&lt;/h2&gt; 
&lt;p&gt;We have several &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/docs/ideas.md&quot;&gt;ideas&lt;/a&gt; we would like to see in AFL++ to make it even better. However, we already work on so many things that we do not have the time for all the big ideas.&lt;/p&gt; 
&lt;p&gt;This can be your way to support and contribute to AFL++ - extend it to do something cool.&lt;/p&gt; 
&lt;p&gt;For everyone who wants to contribute (and send pull requests), please read our &lt;a href=&quot;https://raw.githubusercontent.com/AFLplusplus/AFLplusplus/stable/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; before you submit.&lt;/p&gt; 
&lt;h2&gt;Special thanks&lt;/h2&gt; 
&lt;p&gt;Many of the improvements to the original AFL and AFL++ wouldn&#39;t be possible without feedback, bug reports, or patches from our contributors.&lt;/p&gt; 
&lt;p&gt;Thank you! (For people sending pull requests - please add yourself to this list :-)&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;List of contributors&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;  Jann Horn                             Hanno Boeck
  Felix Groebert                        Jakub Wilk
  Richard W. M. Jones                   Alexander Cherepanov
  Tom Ritter                            Hovik Manucharyan
  Sebastian Roschke                     Eberhard Mattes
  Padraig Brady                         Ben Laurie
  @dronesec                             Luca Barbato
  Tobias Ospelt                         Thomas Jarosch
  Martin Carpenter                      Mudge Zatko
  Joe Zbiciak                           Ryan Govostes
  Michael Rash                          William Robinet
  Jonathan Gray                         Filipe Cabecinhas
  Nico Weber                            Jodie Cunningham
  Andrew Griffiths                      Parker Thompson
  Jonathan Neuschaefer                  Tyler Nighswander
  Ben Nagy                              Samir Aguiar
  Aidan Thornton                        Aleksandar Nikolich
  Sam Hakim                             Laszlo Szekeres
  David A. Wheeler                      Turo Lamminen
  Andreas Stieger                       Richard Godbee
  Louis Dassy                           teor2345
  Alex Moneger                          Dmitry Vyukov
  Keegan McAllister                     Kostya Serebryany
  Richo Healey                          Martijn Bogaard
  rc0r                                  Jonathan Foote
  Christian Holler                      Dominique Pelle
  Jacek Wielemborek                     Leo Barnes
  Jeremy Barnes                         Jeff Trull
  Guillaume Endignoux                   ilovezfs
  Daniel Godas-Lopez                    Franjo Ivancic
  Austin Seipp                          Daniel Komaromy
  Daniel Binderman                      Jonathan Metzman
  Vegard Nossum                         Jan Kneschke
  Kurt Roeckx                           Marcel Boehme
  Van-Thuan Pham                        Abhik Roychoudhury
  Joshua J. Drake                       Toby Hutton
  Rene Freingruber                      Sergey Davidoff
  Sami Liedes                           Craig Young
  Andrzej Jackowski                     Daniel Hodson
  Nathan Voss                           Dominik Maier
  Andrea Biondo                         Vincent Le Garrec
  Khaled Yakdan                         Kuang-che Wu
  Josephine Calliotte                   Konrad Welc
  Thomas Rooijakkers                    David Carlier
  Ruben ten Hove                        Joey Jiao
  fuzzah                                @intrigus-lgtm
  Yaakov Saxon                          Sergej Schumilo
  Ziqiao Kong                           Ryan Berger
  Sangjun Park                          Scott Guest
  Fabian Keil
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Cite&lt;/h2&gt; 
&lt;p&gt;If you use AFL++ in scientific work, consider citing &lt;a href=&quot;https://www.usenix.org/conference/woot20/presentation/fioraldi&quot;&gt;our paper&lt;/a&gt; presented at WOOT&#39;20:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and Marc Heuse. “AFL++: Combining incremental steps of fuzzing research”. In 14th USENIX Workshop on Offensive Technologies (WOOT 20). USENIX Association, Aug. 2020.
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;BibTeX&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bibtex&quot;&gt;@inproceedings {AFLplusplus-Woot20,
author = {Andrea Fioraldi and Dominik Maier and Heiko Ei{\ss}feldt and Marc Heuse},
title = {{AFL++}: Combining Incremental Steps of Fuzzing Research},
booktitle = {14th {USENIX} Workshop on Offensive Technologies ({WOOT} 20)},
year = {2020},
publisher = {{USENIX} Association},
month = aug,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;a href=&quot;https://deepwiki.com/AFLplusplus/AFLplusplus&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg?sanitize=true&quot; alt=&quot;Ask DeepWiki&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microsoft/mimalloc</title>
      <link>https://github.com/microsoft/mimalloc</link>
      <description>&lt;p&gt;mimalloc is a compact general purpose allocator with excellent performance.&lt;/p&gt;&lt;hr&gt;&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/mimalloc-logo.png&quot; /&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/Daan0324/mimalloc/_build?definitionId=1&amp;amp;_a=summary&quot;&gt;&lt;img align=&quot;right&quot; src=&quot;https://dev.azure.com/Daan0324/mimalloc/_apis/build/status/microsoft.mimalloc?branchName=dev&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;mimalloc&lt;/h1&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;mimalloc (pronounced &quot;me-malloc&quot;) is a general purpose allocator with excellent &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#performance&quot;&gt;performance&lt;/a&gt; characteristics. Initially developed by Daan Leijen for the runtime systems of the &lt;a href=&quot;https://koka-lang.github.io&quot;&gt;Koka&lt;/a&gt; and &lt;a href=&quot;https://github.com/leanprover/lean&quot;&gt;Lean&lt;/a&gt; languages.&lt;/p&gt; 
&lt;p&gt;Latest release : &lt;code&gt;v3.1.5&lt;/code&gt; (beta) (2025-06-13).&lt;br /&gt; Latest v2 release: &lt;code&gt;v2.2.4&lt;/code&gt; (2025-06-09).&lt;br /&gt; Latest v1 release: &lt;code&gt;v1.9.4&lt;/code&gt; (2024-06-09).&lt;/p&gt; 
&lt;p&gt;mimalloc is a drop-in replacement for &lt;code&gt;malloc&lt;/code&gt; and can be used in other programs without code changes, for example, on dynamically linked ELF-based systems (Linux, BSD, etc.) you can use it as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; LD_PRELOAD=/usr/lib/libmimalloc.so  myprogram
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It also includes a way to dynamically override the default allocator in &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#override_on_windows&quot;&gt;Windows&lt;/a&gt;. Notable aspects of the design include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;small and consistent&lt;/strong&gt;: the library is about 10k LOC using simple and consistent data structures. This makes it very suitable to integrate and adapt in other projects. For runtime systems it provides hooks for a monotonic &lt;em&gt;heartbeat&lt;/em&gt; and deferred freeing (for bounded worst-case times with reference counting). Partly due to its simplicity, mimalloc has been ported to many systems (Windows, macOS, Linux, WASM, various BSD&#39;s, Haiku, MUSL, etc) and has excellent support for dynamic overriding. At the same time, it is an industrial strength allocator that runs (very) large scale distributed services on thousands of machines with excellent worst case latencies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;free list sharding&lt;/strong&gt;: instead of one big free list (per size class) we have many smaller lists per &quot;mimalloc page&quot; which reduces fragmentation and increases locality -- things that are allocated close in time get allocated close in memory. (A mimalloc page contains blocks of one size class and is usually 64KiB on a 64-bit system).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;free list multi-sharding&lt;/strong&gt;: the big idea! Not only do we shard the free list per mimalloc page, but for each page we have multiple free lists. In particular, there is one list for thread-local &lt;code&gt;free&lt;/code&gt; operations, and another one for concurrent &lt;code&gt;free&lt;/code&gt; operations. Free-ing from another thread can now be a single CAS without needing sophisticated coordination between threads. Since there will be thousands of separate free lists, contention is naturally distributed over the heap, and the chance of contending on a single location will be low -- this is quite similar to randomized algorithms like skip lists where adding a random oracle removes the need for a more complex algorithm.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;eager page purging&lt;/strong&gt;: when a &quot;page&quot; becomes empty (with increased chance due to free list sharding) the memory is marked to the OS as unused (reset or decommitted) reducing (real) memory pressure and fragmentation, especially in long running programs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;secure&lt;/strong&gt;: &lt;em&gt;mimalloc&lt;/em&gt; can be built in secure mode, adding guard pages, randomized allocation, encrypted free lists, etc. to protect against various heap vulnerabilities. The performance penalty is usually around 10% on average over our benchmarks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;first-class heaps&lt;/strong&gt;: efficiently create and use multiple heaps to allocate across different regions. A heap can be destroyed at once instead of deallocating each object separately.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;bounded&lt;/strong&gt;: it does not suffer from &lt;em&gt;blowup&lt;/em&gt; [1], has bounded worst-case allocation times (&lt;em&gt;wcat&lt;/em&gt;) (upto OS primitives), bounded space overhead (~0.2% meta-data, with low internal fragmentation), and has no internal points of contention using only atomic operations.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;fast&lt;/strong&gt;: In our benchmarks (see &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#performance&quot;&gt;below&lt;/a&gt;), &lt;em&gt;mimalloc&lt;/em&gt; outperforms other leading allocators (&lt;em&gt;jemalloc&lt;/em&gt;, &lt;em&gt;tcmalloc&lt;/em&gt;, &lt;em&gt;Hoard&lt;/em&gt;, etc), and often uses less memory. A nice property is that it does consistently well over a wide range of benchmarks. There is also good huge OS page support for larger server programs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;a href=&quot;https://microsoft.github.io/mimalloc&quot;&gt;documentation&lt;/a&gt; gives a full overview of the API. You can read more on the design of &lt;em&gt;mimalloc&lt;/em&gt; in the &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/mimalloc-free-list-sharding-in-action&quot;&gt;technical report&lt;/a&gt; which also has detailed benchmark results.&lt;/p&gt; 
&lt;p&gt;Enjoy!&lt;/p&gt; 
&lt;h3&gt;Branches&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;main&lt;/code&gt;: latest stable release (still based on &lt;code&gt;dev2&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: development branch for mimalloc v1. Use this branch for submitting PR&#39;s.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dev2&lt;/code&gt;: development branch for mimalloc v2. This branch is downstream of &lt;code&gt;dev&lt;/code&gt; (and is essentially equal to &lt;code&gt;dev&lt;/code&gt; except for &lt;code&gt;src/segment.c&lt;/code&gt;). Uses larger sliced segments to manage mimalloc pages that can reduce fragmentation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dev3&lt;/code&gt;: development branch for mimalloc v3 beta. This branch is downstream of &lt;code&gt;dev&lt;/code&gt;. This version simplifies the lock-free ownership of previous versions, and improves sharing of memory between threads. On certain large workloads this version may use (much) less memory.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Releases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;2025-06-13, &lt;code&gt;v3.1.5&lt;/code&gt;: Bug fix release where memory was not always correctly committed (issue #1098).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2025-06-09, &lt;code&gt;v1.9.4&lt;/code&gt;, &lt;code&gt;v2.2.4&lt;/code&gt;, &lt;code&gt;v3.1.4&lt;/code&gt; (beta) : Some important bug fixes, including a case where OS memory was not always fully released. Improved v3 performance, build on XBox, fix build on Android, support interpose for older macOS versions, use MADV_FREE_REUSABLE on macOS, always check commit success, better support for Windows fixed TLS offset, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2025-03-28, &lt;code&gt;v1.9.3&lt;/code&gt;, &lt;code&gt;v2.2.3&lt;/code&gt;, &lt;code&gt;v3.0.3&lt;/code&gt; (beta) : Various small bug and build fixes, including: fix arm32 pre v7 builds, fix mingw build, get runtime statistics, improve statistic commit counts, fix execution on non BMI1 x64 systems.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2025-03-06, &lt;code&gt;v1.9.2&lt;/code&gt;, &lt;code&gt;v2.2.2&lt;/code&gt;, &lt;code&gt;v3.0.2-beta&lt;/code&gt;: Various small bug and build fixes. Add &lt;code&gt;mi_options_print&lt;/code&gt;, &lt;code&gt;mi_arenas_print&lt;/code&gt;, and the experimental &lt;code&gt;mi_stat_get&lt;/code&gt; and &lt;code&gt;mi_stat_get_json&lt;/code&gt;. Add &lt;code&gt;mi_thread_set_in_threadpool&lt;/code&gt; and &lt;code&gt;mi_heap_set_numa_affinity&lt;/code&gt; (v3 only). Add vcpkg portfile. Upgrade mimalloc-redirect to v1.3.2. &lt;code&gt;MI_OPT_ARCH&lt;/code&gt; is off by default now but still assumes armv8.1-a on arm64 for fast atomic operations. Add QNX support.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2025-01-03, &lt;code&gt;v1.8.9&lt;/code&gt;, &lt;code&gt;v2.1.9&lt;/code&gt;, &lt;code&gt;v3.0.1-alpha&lt;/code&gt;: Interim release. Support Windows arm64. New &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#guarded&quot;&gt;guarded&lt;/a&gt; build that can place OS guard pages behind objects to catch buffer overflows as they occur. Many small fixes: build on Windows arm64, cygwin, riscV, and dragonfly; fix Windows static library initialization to account for thread local destructors (in Rust/C++); macOS tag change; macOS TLS slot fix; improve stats; consistent &lt;code&gt;mimalloc.dll&lt;/code&gt; on Windows (instead of &lt;code&gt;mimalloc-override.dll&lt;/code&gt;); fix mimalloc-redirect on Win11 H2; add 0-byte to canary; upstream CPython fixes; reduce .bss size; allow fixed TLS slot on Windows for improved performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2024-05-21, &lt;code&gt;v1.8.7&lt;/code&gt;, &lt;code&gt;v2.1.7&lt;/code&gt;: Fix build issues on less common platforms. Started upstreaming patches from the CPython &lt;a href=&quot;https://github.com/python/cpython/issues/113141#issuecomment-2119255217&quot;&gt;integration&lt;/a&gt;. Upstream &lt;code&gt;vcpkg&lt;/code&gt; patches.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#older-release-notes&quot;&gt;Older release notes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Special thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sergiy Kuryata for his contributions on reducing memory commit -- especially on Windows with the Windows thread pool (now implemented in v3).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://devnexen.blogspot.com/&quot;&gt;David Carlier&lt;/a&gt; (@devnexen) for his &lt;em&gt;many&lt;/em&gt; contributions, and making mimalloc work better on many less common operating systems, like Haiku, Dragonfly, etc.&lt;/li&gt; 
 &lt;li&gt;Mary Feofanova (@mary3000), Evgeniy Moiseenko, and Manuel Pöter (@mpoeter) for making mimalloc TSAN checkable, and finding memory model bugs using the &lt;a href=&quot;https://plv.mpi-sws.org/genmc/&quot;&gt;genMC&lt;/a&gt; model checker.&lt;/li&gt; 
 &lt;li&gt;Weipeng Liu (@pongba), Zhuowei Li, Junhua Wang, and Jakub Szymanski, for their early support of mimalloc and deployment at large scale services, leading to many improvements in the mimalloc algorithms for large workloads.&lt;/li&gt; 
 &lt;li&gt;Jason Gibson (@jasongibson) for exhaustive testing on large scale workloads and server environments, and finding complex bugs in (early versions of) &lt;code&gt;mimalloc&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Manuel Pöter (@mpoeter) and Sam Gross(@colesbury) for finding an ABA concurrency issue in abandoned segment reclamation. Sam also created the &lt;a href=&quot;https://github.com/colesbury/nogil&quot;&gt;no GIL&lt;/a&gt; Python fork which uses mimalloc internally.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;mimalloc is used in various large scale low-latency services and programs, for example:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bing.com&quot;&gt;&lt;img height=&quot;50&quot; align=&quot;left&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/e/e9/Bing_logo.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://azure.microsoft.com/&quot;&gt;&lt;img height=&quot;50&quot; align=&quot;left&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/a/a8/Microsoft_Azure_Logo.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://deathstrandingpc.505games.com&quot;&gt;&lt;img height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/ds-logo.png&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://docs.unrealengine.com/4.26/en-US/WhatsNew/Builds/ReleaseNotes/4_25/&quot;&gt;&lt;img height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/unreal-logo.svg?sanitize=true&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://cab.spbu.ru/software/spades/&quot;&gt;&lt;img height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/spades-logo.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;h2&gt;Windows&lt;/h2&gt; 
&lt;p&gt;Open &lt;code&gt;ide/vs2022/mimalloc.sln&lt;/code&gt; in Visual Studio 2022 and build. The &lt;code&gt;mimalloc-lib&lt;/code&gt; project builds a static library (in &lt;code&gt;out/msvc-x64&lt;/code&gt;), while the &lt;code&gt;mimalloc-override-dll&lt;/code&gt; project builds a DLL for overriding malloc in the entire program.&lt;/p&gt; 
&lt;h2&gt;Linux, macOS, BSD, etc.&lt;/h2&gt; 
&lt;p&gt;We use &lt;a href=&quot;https://cmake.org&quot;&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/a&gt; as the build system:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/release
&amp;gt; cd out/release
&amp;gt; cmake ../..
&amp;gt; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This builds the library as a shared (dynamic) library (&lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dylib&lt;/code&gt;), a static library (&lt;code&gt;.a&lt;/code&gt;), and as a single object file (&lt;code&gt;.o&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;&amp;gt; sudo make install&lt;/code&gt; (install the library and header files in &lt;code&gt;/usr/local/lib&lt;/code&gt; and &lt;code&gt;/usr/local/include&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;You can build the debug version which does many internal checks and maintains detailed statistics as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/debug
&amp;gt; cd out/debug
&amp;gt; cmake -DCMAKE_BUILD_TYPE=Debug ../..
&amp;gt; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will name the shared library as &lt;code&gt;libmimalloc-debug.so&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, you can build a &lt;em&gt;secure&lt;/em&gt; version that uses guard pages, encrypted free lists, etc., as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/secure
&amp;gt; cd out/secure
&amp;gt; cmake -DMI_SECURE=ON ../..
&amp;gt; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will name the shared library as &lt;code&gt;libmimalloc-secure.so&lt;/code&gt;. Use &lt;code&gt;cmake ../.. -LH&lt;/code&gt; to see all the available build options.&lt;/p&gt; 
&lt;p&gt;The examples use the default compiler. If you like to use another, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; CC=clang CXX=clang++ cmake ../..
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Cmake with Visual Studio&lt;/h2&gt; 
&lt;p&gt;You can also use cmake on Windows. Open a Visual Studio 2022 development prompt and invoke &lt;code&gt;cmake&lt;/code&gt; with the right &lt;a href=&quot;https://cmake.org/cmake/help/latest/generator/Visual%20Studio%2017%202022.html&quot;&gt;generator&lt;/a&gt; and architecture, like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; cmake ..\.. -G &quot;Visual Studio 17 2022&quot; -A x64 -DMI_OVERRIDE=ON
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The cmake build type is specified when actually building, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; cmake --build . --config=Release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install the &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/build/clang-support-msbuild?view=msvc-170#install-1&quot;&gt;LLVM toolset&lt;/a&gt; on Windows to build with the &lt;code&gt;clang-cl&lt;/code&gt; compiler directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; cmake ../.. -G &quot;Visual Studio 17 2022&quot; -T ClangCl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Single Source&lt;/h2&gt; 
&lt;p&gt;You can also directly build the single &lt;code&gt;src/static.c&lt;/code&gt; file as part of your project without needing &lt;code&gt;cmake&lt;/code&gt; at all. Make sure to also add the mimalloc &lt;code&gt;include&lt;/code&gt; directory to the include path.&lt;/p&gt; 
&lt;h1&gt;Using the Library&lt;/h1&gt; 
&lt;p&gt;The preferred usage is including &lt;code&gt;&amp;lt;mimalloc.h&amp;gt;&lt;/code&gt;, linking with the shared- or static library, and using the &lt;code&gt;mi_malloc&lt;/code&gt; API exclusively for allocation. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; gcc -o myprogram -lmimalloc myfile.c
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;mimalloc uses only safe OS calls (&lt;code&gt;mmap&lt;/code&gt; and &lt;code&gt;VirtualAlloc&lt;/code&gt;) and can co-exist with other allocators linked to the same program. If you use &lt;code&gt;cmake&lt;/code&gt;, you can simply use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;find_package(mimalloc 1.8 REQUIRED)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;in your &lt;code&gt;CMakeLists.txt&lt;/code&gt; to find a locally installed mimalloc. Then use either:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;target_link_libraries(myapp PUBLIC mimalloc)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to link with the shared (dynamic) library, or:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;target_link_libraries(myapp PUBLIC mimalloc-static)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to link with the static library. See &lt;code&gt;test\CMakeLists.txt&lt;/code&gt; for an example.&lt;/p&gt; 
&lt;p&gt;For best performance in C++ programs, it is also recommended to override the global &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; operators. For convenience, mimalloc provides &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/include/mimalloc-new-delete.h&quot;&gt;&lt;code&gt;mimalloc-new-delete.h&lt;/code&gt;&lt;/a&gt; which does this for you -- just include it in a single(!) source file in your project. In C++, mimalloc also provides the &lt;code&gt;mi_stl_allocator&lt;/code&gt; struct which implements the &lt;code&gt;std::allocator&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;You can pass environment variables to print verbose messages (&lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt;) and statistics (&lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt;) (in the debug version):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_SHOW_STATS=1 ./cfrac 175451865205073170563711388363

175451865205073170563711388363 = 374456281610909315237213 * 468551

heap stats:     peak      total      freed       unit
normal   2:    16.4 kb    17.5 mb    17.5 mb      16 b   ok
normal   3:    16.3 kb    15.2 mb    15.2 mb      24 b   ok
normal   4:      64 b      4.6 kb     4.6 kb      32 b   ok
normal   5:      80 b    118.4 kb   118.4 kb      40 b   ok
normal   6:      48 b       48 b       48 b       48 b   ok
normal  17:     960 b      960 b      960 b      320 b   ok

heap stats:     peak      total      freed       unit
    normal:    33.9 kb    32.8 mb    32.8 mb       1 b   ok
      huge:       0 b        0 b        0 b        1 b   ok
     total:    33.9 kb    32.8 mb    32.8 mb       1 b   ok
malloc requested:         32.8 mb

 committed:    58.2 kb    58.2 kb    58.2 kb       1 b   ok
  reserved:     2.0 mb     2.0 mb     2.0 mb       1 b   ok
     reset:       0 b        0 b        0 b        1 b   ok
  segments:       1          1          1
-abandoned:       0
     pages:       6          6          6
-abandoned:       0
     mmaps:       3
 mmap fast:       0
 mmap slow:       1
   threads:       0
   elapsed:     2.022s
   process: user: 1.781s, system: 0.016s, faults: 756, reclaims: 0, rss: 2.7 mb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above model of using the &lt;code&gt;mi_&lt;/code&gt; prefixed API is not always possible though in existing programs that already use the standard malloc interface, and another option is to override the standard malloc interface completely and redirect all calls to the &lt;em&gt;mimalloc&lt;/em&gt; library instead .&lt;/p&gt; 
&lt;h2&gt;Environment Options&lt;/h2&gt; 
&lt;p&gt;You can set further options either programmatically (using &lt;a href=&quot;https://microsoft.github.io/mimalloc/group__options.html&quot;&gt;&lt;code&gt;mi_option_set&lt;/code&gt;&lt;/a&gt;), or via environment variables:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt;: show statistics when the program terminates.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt;: show verbose messages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_SHOW_ERRORS=1&lt;/code&gt;: show error and warning messages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Advanced options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_ARENA_EAGER_COMMIT=2&lt;/code&gt;: turns on eager commit for the large arenas (usually 1GiB) from which mimalloc allocates segments and pages. Set this to 2 (default) to only enable this on overcommit systems (e.g. Linux). Set this to 1 to enable explicitly on other systems as well (like Windows or macOS) which may improve performance (as the whole arena is committed at once). Note that eager commit only increases the commit but not the actual the peak resident set (rss) so it is generally ok to enable this.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_PURGE_DELAY=N&lt;/code&gt;: the delay in &lt;code&gt;N&lt;/code&gt; milli-seconds (by default &lt;code&gt;10&lt;/code&gt;) after which mimalloc will purge OS pages that are not in use. This signals to the OS that the underlying physical memory can be reused which can reduce memory fragmentation especially in long running (server) programs. Setting &lt;code&gt;N&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; purges immediately when a page becomes unused which can improve memory usage but also decreases performance. Setting &lt;code&gt;N&lt;/code&gt; to a higher value like &lt;code&gt;100&lt;/code&gt; can improve performance (sometimes by a lot) at the cost of potentially using more memory at times. Setting it to &lt;code&gt;-1&lt;/code&gt; disables purging completely.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_PURGE_DECOMMITS=1&lt;/code&gt;: By default &quot;purging&quot; memory means unused memory is decommitted (&lt;code&gt;MEM_DECOMMIT&lt;/code&gt; on Windows, &lt;code&gt;MADV_DONTNEED&lt;/code&gt; (which decresease rss immediately) on &lt;code&gt;mmap&lt;/code&gt; systems). Set this to 0 to instead &quot;reset&quot; unused memory on a purge (&lt;code&gt;MEM_RESET&lt;/code&gt; on Windows, generally &lt;code&gt;MADV_FREE&lt;/code&gt; (which does not decrease rss immediately) on &lt;code&gt;mmap&lt;/code&gt; systems). Mimalloc generally does not &quot;free&quot; OS memory but only &quot;purges&quot; OS memory, in other words, it tries to keep virtual address ranges and decommits within those ranges (to make the underlying physical memory available to other processes).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Further options for large workloads and services:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_USE_NUMA_NODES=N&lt;/code&gt;: pretend there are at most &lt;code&gt;N&lt;/code&gt; NUMA nodes. If not set, the actual NUMA nodes are detected at runtime. Setting &lt;code&gt;N&lt;/code&gt; to 1 may avoid problems in some virtual environments. Also, setting it to a lower number than the actual NUMA nodes is fine and will only cause threads to potentially allocate more memory across actual NUMA nodes (but this can happen in any case as NUMA local allocation is always a best effort but not guaranteed).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_ALLOW_LARGE_OS_PAGES=0&lt;/code&gt;: Set to 1 to use large OS pages (2 or 4MiB) when available; for some workloads this can significantly improve performance. When this option is disabled (default), it also disables transparent huge pages (THP) for the process (on Linux and Android). On Linux the default setting is 2 -- this enables the use of large pages through THP only. Use &lt;code&gt;MIMALLOC_VERBOSE&lt;/code&gt; to check if the large OS pages are enabled -- usually one needs to explicitly give permissions for large OS pages (as on &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/enable-the-lock-pages-in-memory-option-windows?view=sql-server-2017&quot;&gt;Windows&lt;/a&gt; and &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/tuning_and_optimizing_red_hat_enterprise_linux_for_oracle_9i_and_10g_databases/sect-oracle_9i_and_10g_tuning_guide-large_memory_optimization_big_pages_and_huge_pages-configuring_huge_pages_in_red_hat_enterprise_linux_4_or_5&quot;&gt;Linux&lt;/a&gt;). However, sometimes the OS is very slow to reserve contiguous physical memory for large OS pages so use with care on systems that can have fragmented memory (for that reason, we generally recommend to use &lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES&lt;/code&gt; instead whenever possible).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES=N&lt;/code&gt;: where &lt;code&gt;N&lt;/code&gt; is the number of 1GiB &lt;em&gt;huge&lt;/em&gt; OS pages. This reserves the huge pages at startup and sometimes this can give a large (latency) performance improvement on big workloads. Usually it is better to not use &lt;code&gt;MIMALLOC_ALLOW_LARGE_OS_PAGES=1&lt;/code&gt; in combination with this setting. Just like large OS pages, use with care as reserving contiguous physical memory can take a long time when memory is fragmented (but reserving the huge pages is done at startup only once). Note that we usually need to explicitly give permission for huge OS pages (as on &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/enable-the-lock-pages-in-memory-option-windows?view=sql-server-2017&quot;&gt;Windows&lt;/a&gt; and &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/tuning_and_optimizing_red_hat_enterprise_linux_for_oracle_9i_and_10g_databases/sect-oracle_9i_and_10g_tuning_guide-large_memory_optimization_big_pages_and_huge_pages-configuring_huge_pages_in_red_hat_enterprise_linux_4_or_5&quot;&gt;Linux&lt;/a&gt;)). With huge OS pages, it may be beneficial to set the setting &lt;code&gt;MIMALLOC_EAGER_COMMIT_DELAY=N&lt;/code&gt; (&lt;code&gt;N&lt;/code&gt; is 1 by default) to delay the initial &lt;code&gt;N&lt;/code&gt; segments (of 4MiB) of a thread to not allocate in the huge OS pages; this prevents threads that are short lived and allocate just a little to take up space in the huge OS page area (which cannot be purged as huge OS pages are pinned to physical memory). The huge pages are usually allocated evenly among NUMA nodes. We can use &lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES_AT=N&lt;/code&gt; where &lt;code&gt;N&lt;/code&gt; is the numa node (starting at 0) to allocate all the huge pages at a specific numa node instead.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use caution when using &lt;code&gt;fork&lt;/code&gt; in combination with either large or huge OS pages: on a fork, the OS uses copy-on-write for all pages in the original process including the huge OS pages. When any memory is now written in that area, the OS will copy the entire 1GiB huge page (or 2MiB large page) which can cause the memory usage to grow in large increments.&lt;/p&gt; 
&lt;h2&gt;Secure Mode&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;mimalloc&lt;/em&gt; can be build in secure mode by using the &lt;code&gt;-DMI_SECURE=ON&lt;/code&gt; flags in &lt;code&gt;cmake&lt;/code&gt;. This build enables various mitigations to make mimalloc more robust against exploits. In particular:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All internal mimalloc pages are surrounded by guard pages and the heap metadata is behind a guard page as well (so a buffer overflow exploit cannot reach into the metadata).&lt;/li&gt; 
 &lt;li&gt;All free list pointers are &lt;a href=&quot;https://github.com/microsoft/mimalloc/raw/783e3377f79ee82af43a0793910a9f2d01ac7863/include/mimalloc-internal.h#L396&quot;&gt;encoded&lt;/a&gt; with per-page keys which is used both to prevent overwrites with a known pointer, as well as to detect heap corruption.&lt;/li&gt; 
 &lt;li&gt;Double free&#39;s are detected (and ignored).&lt;/li&gt; 
 &lt;li&gt;The free lists are initialized in a random order and allocation randomly chooses between extension and reuse within a page to mitigate against attacks that rely on a predicable allocation order. Similarly, the larger heap blocks allocated by mimalloc from the OS are also address randomized.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As always, evaluate with care as part of an overall security strategy as all of the above are mitigations but not guarantees.&lt;/p&gt; 
&lt;h2&gt;Debug Mode&lt;/h2&gt; 
&lt;p&gt;When &lt;em&gt;mimalloc&lt;/em&gt; is built using debug mode, (&lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt;), various checks are done at runtime to catch development errors.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Statistics are maintained in detail for each object size. They can be shown using &lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt; at runtime.&lt;/li&gt; 
 &lt;li&gt;All objects have padding at the end to detect (byte precise) heap block overflows.&lt;/li&gt; 
 &lt;li&gt;Double free&#39;s, and freeing invalid heap pointers are detected.&lt;/li&gt; 
 &lt;li&gt;Corrupted free-lists and some forms of use-after-free are detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Guarded Mode&lt;/h2&gt; 
&lt;p&gt;&lt;span id=&quot;guarded&quot;&gt;&lt;em&gt;mimalloc&lt;/em&gt; can be build in guarded mode using the &lt;code&gt;-DMI_GUARDED=ON&lt;/code&gt; flags in &lt;code&gt;cmake&lt;/code&gt;.&lt;/span&gt; This enables placing OS guard pages behind certain object allocations to catch buffer overflows as they occur. This can be invaluable to catch buffer-overflow bugs in large programs. However, it also means that any object allocated with a guard page takes at least 8 KiB memory for the guard page and its alignment. As such, allocating a guard page for every allocation may be too expensive both in terms of memory, and in terms of performance with many system calls. Therefore, there are various environment variables (and options) to tune this:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MIMALLOC_GUARDED_SAMPLE_RATE=N&lt;/code&gt;: Set the sample rate to &lt;code&gt;N&lt;/code&gt; (by default 4000). This mode places a guard page behind every &lt;code&gt;N&lt;/code&gt; suitable object allocations (per thread). Since the performance in guarded mode without placing guard pages is close to release mode, this can be used to enable guard pages even in production to catch latent buffer overflow bugs. Set the sample rate to &lt;code&gt;1&lt;/code&gt; to guard every object, and to &lt;code&gt;0&lt;/code&gt; to place no guard pages at all.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MIMALLOC_GUARDED_SAMPLE_SEED=N&lt;/code&gt;: Start sampling at &lt;code&gt;N&lt;/code&gt; (by default random). Can be used to reproduce a buffer overflow if needed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MIMALLOC_GUARDED_MIN=N&lt;/code&gt;, &lt;code&gt;MIMALLOC_GUARDED_MAX=N&lt;/code&gt;: Minimal and maximal &lt;em&gt;rounded&lt;/em&gt; object sizes for which a guard page is considered (&lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1GiB&lt;/code&gt; respectively). If you suspect a buffer overflow occurs with an object of size 141, set the minimum and maximum to &lt;code&gt;148&lt;/code&gt; and the sample rate to &lt;code&gt;1&lt;/code&gt; to have all of those guarded.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;MIMALLOC_GUARDED_PRECISE=1&lt;/code&gt;: If we have an object of size 13, we would usually place it an aligned 16 bytes in front of the guard page. Using &lt;code&gt;MIMALLOC_GUARDED_PRECISE&lt;/code&gt; places it exactly 13 bytes before a page so that even a 1 byte overflow is detected. This violates the C/C++ minimal alignment guarantees though so use with care.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Overriding Standard Malloc&lt;/h1&gt; 
&lt;p&gt;Overriding the standard &lt;code&gt;malloc&lt;/code&gt; (and &lt;code&gt;new&lt;/code&gt;) can be done either &lt;em&gt;dynamically&lt;/em&gt; or &lt;em&gt;statically&lt;/em&gt;.&lt;/p&gt; 
&lt;h2&gt;Dynamic override&lt;/h2&gt; 
&lt;p&gt;This is the recommended way to override the standard malloc interface.&lt;/p&gt; 
&lt;h3&gt;Dynamic Override on Linux, BSD&lt;/h3&gt; 
&lt;p&gt;On these ELF-based systems we preload the mimalloc shared library so all calls to the standard &lt;code&gt;malloc&lt;/code&gt; interface are resolved to the &lt;em&gt;mimalloc&lt;/em&gt; library.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; env LD_PRELOAD=/usr/lib/libmimalloc.so myprogram
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can set extra environment variables to check that mimalloc is running, like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_VERBOSE=1 LD_PRELOAD=/usr/lib/libmimalloc.so myprogram
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or run with the debug version to get detailed statistics:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_SHOW_STATS=1 LD_PRELOAD=/usr/lib/libmimalloc-debug.so myprogram
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dynamic Override on MacOS&lt;/h3&gt; 
&lt;p&gt;On macOS we can also preload the mimalloc shared library so all calls to the standard &lt;code&gt;malloc&lt;/code&gt; interface are resolved to the &lt;em&gt;mimalloc&lt;/em&gt; library.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; env DYLD_INSERT_LIBRARIES=/usr/lib/libmimalloc.dylib myprogram
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that certain security restrictions may apply when doing this from the &lt;a href=&quot;https://stackoverflow.com/questions/43941322/dyld-insert-libraries-ignored-when-calling-application-through-bash&quot;&gt;shell&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Dynamic Override on Windows&lt;/h3&gt; 
&lt;p&gt;&lt;span id=&quot;override_on_windows&quot;&gt;We use a separate redirection DLL to override mimalloc on Windows&lt;/span&gt; such that we redirect all malloc/free calls that go through the (dynamic) C runtime allocator, including those from other DLL&#39;s or libraries. As it intercepts all allocation calls on a low level, it can be used on large programs that include other 3rd party components. There are four requirements to make the overriding work well:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Use the C-runtime library as a DLL (using the &lt;code&gt;/MD&lt;/code&gt; or &lt;code&gt;/MDd&lt;/code&gt; switch).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Link your program explicitly with the &lt;code&gt;mimalloc.dll.lib&lt;/code&gt; export library for the &lt;code&gt;mimalloc.dll&lt;/code&gt;. (which must be compiled with &lt;code&gt;-DMI_OVERRIDE=ON&lt;/code&gt;, which is the default though). To ensure the &lt;code&gt;mimalloc.dll&lt;/code&gt; is actually loaded at run-time it is easiest to insert some call to the mimalloc API in the &lt;code&gt;main&lt;/code&gt; function, like &lt;code&gt;mi_version()&lt;/code&gt; (or use the &lt;code&gt;/include:mi_version&lt;/code&gt; switch on the linker command, or similarly, &lt;code&gt;#pragma comment(linker, &quot;/include:mi_version&quot;)&lt;/code&gt; in some source file). See the &lt;code&gt;mimalloc-test-override&lt;/code&gt; project for an example on how to use this.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;mimalloc-redirect.dll&lt;/code&gt; must be put in the same directory as the main &lt;code&gt;mimalloc.dll&lt;/code&gt; at runtime (as it is a dependency of that DLL). The redirection DLL ensures that all calls to the C runtime malloc API get redirected to mimalloc functions (which reside in &lt;code&gt;mimalloc.dll&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure the &lt;code&gt;mimalloc.dll&lt;/code&gt; comes as early as possible in the import list of the final executable (so it can intercept all potential allocations). You can use &lt;code&gt;minject -l &amp;lt;exe&amp;gt;&lt;/code&gt; to check this if needed.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For best performance on Windows with C++, it is also recommended to also override the &lt;code&gt;new&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt; operations (by including &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/include/mimalloc-new-delete.h&quot;&gt;&lt;code&gt;mimalloc-new-delete.h&lt;/code&gt;&lt;/a&gt; a single(!) source file in your project).&lt;/p&gt; 
&lt;p&gt;The environment variable &lt;code&gt;MIMALLOC_DISABLE_REDIRECT=1&lt;/code&gt; can be used to disable dynamic overriding at run-time. Use &lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt; to check if mimalloc was successfully redirected.&lt;/p&gt; 
&lt;p&gt;For different platforms than x64, you may need a specific &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/bin&quot;&gt;redirection dll&lt;/a&gt;. Furthermore, we cannot always re-link an executable or ensure &lt;code&gt;mimalloc.dll&lt;/code&gt; comes first in the import table. In such cases the &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/bin&quot;&gt;&lt;code&gt;minject&lt;/code&gt;&lt;/a&gt; tool can be used to patch the executable&#39;s import tables.&lt;/p&gt; 
&lt;h2&gt;Static override&lt;/h2&gt; 
&lt;p&gt;On Unix-like systems, you can also statically link with &lt;em&gt;mimalloc&lt;/em&gt; to override the standard malloc interface. The recommended way is to link the final program with the &lt;em&gt;mimalloc&lt;/em&gt; single object file (&lt;code&gt;mimalloc.o&lt;/code&gt;). We use an object file instead of a library file as linkers give preference to that over archives to resolve symbols. To ensure that the standard malloc interface resolves to the &lt;em&gt;mimalloc&lt;/em&gt; library, link it as the first object file. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; gcc -o myprogram mimalloc.o  myfile1.c ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another way to override statically that works on all platforms, is to link statically to mimalloc (as shown in the introduction) and include a header file in each source file that re-defines &lt;code&gt;malloc&lt;/code&gt; etc. to &lt;code&gt;mi_malloc&lt;/code&gt;. This is provided by &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/include/mimalloc-override.h&quot;&gt;&lt;code&gt;mimalloc-override.h&lt;/code&gt;&lt;/a&gt;. This only works reliably though if all sources are under your control or otherwise mixing of pointers from different heaps may occur!&lt;/p&gt; 
&lt;h1&gt;Tools&lt;/h1&gt; 
&lt;p&gt;Generally, we recommend using the standard allocator with memory tracking tools, but mimalloc can also be build to support the &lt;a href=&quot;https://github.com/google/sanitizers/wiki/AddressSanitizer&quot;&gt;address sanitizer&lt;/a&gt; or the excellent &lt;a href=&quot;https://valgrind.org/&quot;&gt;Valgrind&lt;/a&gt; tool. Moreover, it can be build to support Windows event tracing (&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/test/wpt/event-tracing-for-windows&quot;&gt;ETW&lt;/a&gt;). This has a small performance overhead but does allow detecting memory leaks and byte-precise buffer overflows directly on final executables. See also the &lt;code&gt;test/test-wrong.c&lt;/code&gt; file to test with various tools.&lt;/p&gt; 
&lt;h2&gt;Valgrind&lt;/h2&gt; 
&lt;p&gt;To build with &lt;a href=&quot;https://valgrind.org/&quot;&gt;valgrind&lt;/a&gt; support, use the &lt;code&gt;MI_TRACK_VALGRIND=ON&lt;/code&gt; cmake option:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; cmake ../.. -DMI_TRACK_VALGRIND=ON
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can also be combined with secure mode or debug mode. You can then run your programs directly under valgrind:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; valgrind &amp;lt;myprogram&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you rely on overriding &lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt; by mimalloc (instead of using the &lt;code&gt;mi_malloc&lt;/code&gt;/&lt;code&gt;mi_free&lt;/code&gt; API directly), you also need to tell &lt;code&gt;valgrind&lt;/code&gt; to not intercept those calls itself, and use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; MIMALLOC_SHOW_STATS=1 valgrind  --soname-synonyms=somalloc=*mimalloc* -- &amp;lt;myprogram&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By setting the &lt;code&gt;MIMALLOC_SHOW_STATS&lt;/code&gt; environment variable you can check that mimalloc is indeed used and not the standard allocator. Even though the &lt;a href=&quot;https://valgrind.org/docs/manual/manual-core.html#opt.soname-synonyms&quot;&gt;Valgrind option&lt;/a&gt; is called &lt;code&gt;--soname-synonyms&lt;/code&gt;, this also works when overriding with a static library or object file. To dynamically override mimalloc using &lt;code&gt;LD_PRELOAD&lt;/code&gt; together with &lt;code&gt;valgrind&lt;/code&gt;, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; valgrind --trace-children=yes --soname-synonyms=somalloc=*mimalloc* /usr/bin/env LD_PRELOAD=/usr/lib/libmimalloc.so -- &amp;lt;myprogram&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also the &lt;code&gt;test/test-wrong.c&lt;/code&gt; file to test with &lt;code&gt;valgrind&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Valgrind support is in its initial development -- please report any issues.&lt;/p&gt; 
&lt;h2&gt;ASAN&lt;/h2&gt; 
&lt;p&gt;To build with the address sanitizer, use the &lt;code&gt;-DMI_TRACK_ASAN=ON&lt;/code&gt; cmake option:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; cmake ../.. -DMI_TRACK_ASAN=ON
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can also be combined with secure mode or debug mode. You can then run your programs as:&#39;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; ASAN_OPTIONS=verbosity=1 &amp;lt;myprogram&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you link a program with an address sanitizer build of mimalloc, you should generally compile that program too with the address sanitizer enabled. For example, assuming you build mimalloc in &lt;code&gt;out/debug&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;clang -g -o test-wrong -Iinclude test/test-wrong.c out/debug/libmimalloc-asan-debug.a -lpthread -fsanitize=address -fsanitize-recover=address
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since the address sanitizer redirects the standard allocation functions, on some platforms (macOSX for example) it is required to compile mimalloc with &lt;code&gt;-DMI_OVERRIDE=OFF&lt;/code&gt;. Address sanitizer support is in its initial development -- please report any issues.&lt;/p&gt; 
&lt;h2&gt;ETW&lt;/h2&gt; 
&lt;p&gt;Event tracing for Windows (&lt;a href=&quot;https://learn.microsoft.com/en-us/windows-hardware/test/wpt/event-tracing-for-windows&quot;&gt;ETW&lt;/a&gt;) provides a high performance way to capture all allocations though mimalloc and analyze them later. To build with ETW support, use the &lt;code&gt;-DMI_TRACK_ETW=ON&lt;/code&gt; cmake option.&lt;/p&gt; 
&lt;p&gt;You can then capture an allocation trace using the Windows performance recorder (WPR), using the &lt;code&gt;src/prim/windows/etw-mimalloc.wprp&lt;/code&gt; profile. In an admin prompt, you can use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; wpr -start src\prim\windows\etw-mimalloc.wprp -filemode
&amp;gt; &amp;lt;my_mimalloc_program&amp;gt;
&amp;gt; wpr -stop &amp;lt;my_mimalloc_program&amp;gt;.etl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then open &lt;code&gt;&amp;lt;my_mimalloc_program&amp;gt;.etl&lt;/code&gt; in the Windows Performance Analyzer (WPA), or use a tool like &lt;a href=&quot;https://github.com/xinglonghe/TraceControl&quot;&gt;TraceControl&lt;/a&gt; that is specialized for analyzing mimalloc traces.&lt;/p&gt; 
&lt;h1&gt;Performance&lt;/h1&gt; 
&lt;p&gt;Last update: 2021-01-30&lt;/p&gt; 
&lt;p&gt;We tested &lt;em&gt;mimalloc&lt;/em&gt; against many other top allocators over a wide range of benchmarks, ranging from various real world programs to synthetic benchmarks that see how the allocator behaves under more extreme circumstances. In our benchmark suite, &lt;em&gt;mimalloc&lt;/em&gt; outperforms other leading allocators (&lt;em&gt;jemalloc&lt;/em&gt;, &lt;em&gt;tcmalloc&lt;/em&gt;, &lt;em&gt;Hoard&lt;/em&gt;, etc), and has a similar memory footprint. A nice property is that it does consistently well over the wide range of benchmarks.&lt;/p&gt; 
&lt;p&gt;General memory allocators are interesting as there exists no algorithm that is optimal -- for a given allocator one can usually construct a workload where it does not do so well. The goal is thus to find an allocation strategy that performs well over a wide range of benchmarks without suffering from (too much) underperformance in less common situations.&lt;/p&gt; 
&lt;p&gt;As always, interpret these results with care since some benchmarks test synthetic or uncommon situations that may never apply to your workloads. For example, most allocators do not do well on &lt;code&gt;xmalloc-testN&lt;/code&gt; but that includes even the best industrial allocators like &lt;em&gt;jemalloc&lt;/em&gt; and &lt;em&gt;tcmalloc&lt;/em&gt; that are used in some of the world&#39;s largest systems (like Chrome or FreeBSD).&lt;/p&gt; 
&lt;p&gt;Also, the benchmarks here do not measure the behaviour on very large and long-running server workloads, or worst-case latencies of allocation. Much work has gone into &lt;code&gt;mimalloc&lt;/code&gt; to work well on such workloads (for example, to reduce virtual memory fragmentation on long-running services) but such optimizations are not always reflected in the current benchmark suite.&lt;/p&gt; 
&lt;p&gt;We show here only an overview -- for more specific details and further benchmarks we refer to the &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/mimalloc-free-list-sharding-in-action&quot;&gt;technical report&lt;/a&gt;. The benchmark suite is automated and available separately as &lt;a href=&quot;https://github.com/daanx/mimalloc-bench&quot;&gt;mimalloc-bench&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Benchmark Results on a 16-core AMD 5950x (Zen3)&lt;/h2&gt; 
&lt;p&gt;Testing on the 16-core AMD 5950x processor at 3.4Ghz (4.9Ghz boost), with with 32GiB memory at 3600Mhz, running Ubuntu 20.04 with glibc 2.31 and GCC 9.3.0.&lt;/p&gt; 
&lt;p&gt;We measure three versions of &lt;em&gt;mimalloc&lt;/em&gt;: the main version &lt;code&gt;mi&lt;/code&gt; (tag:v1.7.0), the new v2.0 beta version as &lt;code&gt;xmi&lt;/code&gt; (tag:v2.0.0), and the main version in secure mode as &lt;code&gt;smi&lt;/code&gt; (tag:v1.7.0).&lt;/p&gt; 
&lt;p&gt;The other allocators are Google&#39;s &lt;a href=&quot;https://github.com/gperftools/gperftools&quot;&gt;&lt;em&gt;tcmalloc&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;tc&lt;/code&gt;, tag:gperftools-2.8.1) used in Chrome, Facebook&#39;s &lt;a href=&quot;https://github.com/jemalloc/jemalloc&quot;&gt;&lt;em&gt;jemalloc&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;je&lt;/code&gt;, tag:5.2.1) by Jason Evans used in Firefox and FreeBSD, the Intel thread building blocks &lt;a href=&quot;https://github.com/intel/tbb&quot;&gt;allocator&lt;/a&gt; (&lt;code&gt;tbb&lt;/code&gt;, tag:v2020.3), &lt;a href=&quot;https://github.com/mjansson/rpmalloc&quot;&gt;rpmalloc&lt;/a&gt; (&lt;code&gt;rp&lt;/code&gt;,tag:1.4.1) by Mattias Jansson, the original scalable &lt;a href=&quot;https://github.com/emeryberger/Hoard&quot;&gt;&lt;em&gt;Hoard&lt;/em&gt;&lt;/a&gt; (git:d880f72) allocator by Emery Berger [1], the memory compacting &lt;a href=&quot;https://github.com/plasma-umass/Mesh&quot;&gt;&lt;em&gt;Mesh&lt;/em&gt;&lt;/a&gt; (git:67ff31a) allocator by Bobby Powers &lt;em&gt;et al&lt;/em&gt; [8], and finally the default system allocator (&lt;code&gt;glibc&lt;/code&gt;, 2.31) (based on &lt;em&gt;PtMalloc2&lt;/em&gt;).&lt;/p&gt; 
&lt;img width=&quot;90%&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/bench-2021/bench-amd5950x-2021-01-30-a.svg?sanitize=true&quot; /&gt; 
&lt;img width=&quot;90%&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/bench-2021/bench-amd5950x-2021-01-30-b.svg?sanitize=true&quot; /&gt; 
&lt;p&gt;Any benchmarks ending in &lt;code&gt;N&lt;/code&gt; run on all 32 logical cores in parallel. Results are averaged over 10 runs and reported relative to mimalloc (where 1.2 means it took 1.2× longer to run). The legend also contains the &lt;em&gt;overall relative score&lt;/em&gt; between the allocators where 100 points is the maximum if an allocator is fastest on all benchmarks.&lt;/p&gt; 
&lt;p&gt;The single threaded &lt;em&gt;cfrac&lt;/em&gt; benchmark by Dave Barrett is an implementation of continued fraction factorization which uses many small short-lived allocations. All allocators do well on such common usage, where &lt;em&gt;mimalloc&lt;/em&gt; is just a tad faster than &lt;em&gt;tcmalloc&lt;/em&gt; and &lt;em&gt;jemalloc&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;leanN&lt;/em&gt; program is interesting as a large realistic and concurrent workload of the &lt;a href=&quot;https://github.com/leanprover/lean&quot;&gt;Lean&lt;/a&gt; theorem prover compiling its own standard library, and there is a 13% speedup over &lt;em&gt;tcmalloc&lt;/em&gt;. This is quite significant: if Lean spends 20% of its time in the allocator that means that &lt;em&gt;mimalloc&lt;/em&gt; is 1.6× faster than &lt;em&gt;tcmalloc&lt;/em&gt; here. (This is surprising as that is not measured in a pure allocation benchmark like &lt;em&gt;alloc-test&lt;/em&gt;. We conjecture that we see this outsized improvement here because &lt;em&gt;mimalloc&lt;/em&gt; has better locality in the allocation which improves performance for the &lt;em&gt;other&lt;/em&gt; computations in a program as well).&lt;/p&gt; 
&lt;p&gt;The single threaded &lt;em&gt;redis&lt;/em&gt; benchmark again show that most allocators do well on such workloads.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;larsonN&lt;/em&gt; server benchmark by Larson and Krishnan [2] allocates and frees between threads. They observed this behavior (which they call &lt;em&gt;bleeding&lt;/em&gt;) in actual server applications, and the benchmark simulates this. Here, &lt;em&gt;mimalloc&lt;/em&gt; is quite a bit faster than &lt;em&gt;tcmalloc&lt;/em&gt; and &lt;em&gt;jemalloc&lt;/em&gt; probably due to the object migration between different threads.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;mstressN&lt;/em&gt; workload performs many allocations and re-allocations, and migrates objects between threads (as in &lt;em&gt;larsonN&lt;/em&gt;). However, it also creates and destroys the &lt;em&gt;N&lt;/em&gt; worker threads a few times keeping some objects alive beyond the life time of the allocating thread. We observed this behavior in many larger server applications.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/mjansson/rpmalloc-benchmark&quot;&gt;&lt;em&gt;rptestN&lt;/em&gt;&lt;/a&gt; benchmark by Mattias Jansson is a allocator test originally designed for &lt;em&gt;rpmalloc&lt;/em&gt;, and tries to simulate realistic allocation patterns over multiple threads. Here the differences between allocators become more apparent.&lt;/p&gt; 
&lt;p&gt;The second benchmark set tests specific aspects of the allocators and shows even more extreme differences between them.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;alloc-test&lt;/em&gt;, by &lt;a href=&quot;http://ithare.com/testing-memory-allocators-ptmalloc2-tcmalloc-hoard-jemalloc-while-trying-to-simulate-real-world-loads/&quot;&gt;OLogN Technologies AG&lt;/a&gt;, is a very allocation intensive benchmark doing millions of allocations in various size classes. The test is scaled such that when an allocator performs almost identically on &lt;em&gt;alloc-test1&lt;/em&gt; as &lt;em&gt;alloc-testN&lt;/em&gt; it means that it scales linearly.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;sh6bench&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; benchmarks are developed by &lt;a href=&quot;http://www.microquill.com/&quot;&gt;MicroQuill&lt;/a&gt; as part of SmartHeap. In &lt;em&gt;sh6bench&lt;/em&gt; &lt;em&gt;mimalloc&lt;/em&gt; does much better than the others (more than 2.5× faster than &lt;em&gt;jemalloc&lt;/em&gt;). We cannot explain this well but believe it is caused in part by the &quot;reverse&quot; free-ing pattern in &lt;em&gt;sh6bench&lt;/em&gt;. The &lt;em&gt;sh8bench&lt;/em&gt; is a variation with object migration between threads; whereas &lt;em&gt;tcmalloc&lt;/em&gt; did well on &lt;em&gt;sh6bench&lt;/em&gt;, the addition of object migration causes it to be 10× slower than before.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;xmalloc-testN&lt;/em&gt; benchmark by Lever and Boreham [5] and Christian Eder, simulates an asymmetric workload where some threads only allocate, and others only free -- they observed this pattern in larger server applications. Here we see that the &lt;em&gt;mimalloc&lt;/em&gt; technique of having non-contended sharded thread free lists pays off as it outperforms others by a very large margin. Only &lt;em&gt;rpmalloc&lt;/em&gt;, &lt;em&gt;tbb&lt;/em&gt;, and &lt;em&gt;glibc&lt;/em&gt; also scale well on this benchmark.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;cache-scratch&lt;/em&gt; benchmark by Emery Berger [1], and introduced with the Hoard allocator to test for &lt;em&gt;passive-false&lt;/em&gt; sharing of cache lines. With a single thread they all perform the same, but when running with multiple threads the potential allocator induced false sharing of the cache lines can cause large run-time differences. Crundal [6] describes in detail why the false cache line sharing occurs in the &lt;em&gt;tcmalloc&lt;/em&gt; design, and also discusses how this can be avoided with some small implementation changes. Only the &lt;em&gt;tbb&lt;/em&gt;, &lt;em&gt;rpmalloc&lt;/em&gt; and &lt;em&gt;mesh&lt;/em&gt; allocators also avoid the cache line sharing completely, while &lt;em&gt;Hoard&lt;/em&gt; and &lt;em&gt;glibc&lt;/em&gt; seem to mitigate the effects. Kukanov and Voss [7] describe in detail how the design of &lt;em&gt;tbb&lt;/em&gt; avoids the false cache line sharing.&lt;/p&gt; 
&lt;h2&gt;On a 36-core Intel Xeon&lt;/h2&gt; 
&lt;p&gt;For completeness, here are the results on a big Amazon &lt;a href=&quot;https://aws.amazon.com/ec2/instance-types/#Compute_Optimized&quot;&gt;c5.18xlarge&lt;/a&gt; instance consisting of a 2×18-core Intel Xeon (Cascade Lake) at 3.4GHz (boost 3.5GHz) with 144GiB ECC memory, running Ubuntu 20.04 with glibc 2.31, GCC 9.3.0, and Clang 10.0.0. This time, the mimalloc allocators (mi, xmi, and smi) were compiled with the Clang compiler instead of GCC. The results are similar to the AMD results but it is interesting to see the differences in the &lt;em&gt;larsonN&lt;/em&gt;, &lt;em&gt;mstressN&lt;/em&gt;, and &lt;em&gt;xmalloc-testN&lt;/em&gt; benchmarks.&lt;/p&gt; 
&lt;img width=&quot;90%&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/bench-2021/bench-c5-18xlarge-2021-01-30-a.svg?sanitize=true&quot; /&gt; 
&lt;img width=&quot;90%&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/bench-2021/bench-c5-18xlarge-2021-01-30-b.svg?sanitize=true&quot; /&gt; 
&lt;h2&gt;Peak Working Set&lt;/h2&gt; 
&lt;p&gt;The following figure shows the peak working set (rss) of the allocators on the benchmarks (on the c5.18xlarge instance).&lt;/p&gt; 
&lt;img width=&quot;90%&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/bench-2021/bench-c5-18xlarge-2021-01-30-rss-a.svg?sanitize=true&quot; /&gt; 
&lt;img width=&quot;90%&quot; src=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/doc/bench-2021/bench-c5-18xlarge-2021-01-30-rss-b.svg?sanitize=true&quot; /&gt; 
&lt;p&gt;Note that the &lt;em&gt;xmalloc-testN&lt;/em&gt; memory usage should be disregarded as it allocates more the faster the program runs. Similarly, memory usage of &lt;em&gt;larsonN&lt;/em&gt;, &lt;em&gt;mstressN&lt;/em&gt;, &lt;em&gt;rptestN&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; can vary depending on scheduling and speed. Nevertheless, we hope to improve the memory usage on &lt;em&gt;mstressN&lt;/em&gt; and &lt;em&gt;rptestN&lt;/em&gt; (just as &lt;em&gt;cfrac&lt;/em&gt;, &lt;em&gt;larsonN&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; have a small working set which skews the results).&lt;/p&gt; 
&lt;!--
# Previous Benchmarks

Todo: should we create a separate page for this?

## Benchmark Results on 36-core Intel: 2020-01-20

Testing on a big Amazon EC2 compute instance
([c5.18xlarge](https://aws.amazon.com/ec2/instance-types/#Compute_Optimized))
consisting of a 72 processor Intel Xeon at 3GHz
with 144GiB ECC memory, running	Ubuntu 18.04.1 with glibc 2.27 and GCC 7.4.0.
The measured allocators are _mimalloc_ (xmi, tag:v1.4.0, page reset enabled)
and its secure build as _smi_,
Google&#39;s [_tcmalloc_](https://github.com/gperftools/gperftools) (tc, tag:gperftools-2.7) used in Chrome,
Facebook&#39;s [_jemalloc_](https://github.com/jemalloc/jemalloc) (je, tag:5.2.1) by Jason Evans used in Firefox and FreeBSD,
the Intel thread building blocks [allocator](https://github.com/intel/tbb) (tbb, tag:2020),
[rpmalloc](https://github.com/mjansson/rpmalloc) (rp,tag:1.4.0) by Mattias Jansson,
the original scalable [_Hoard_](https://github.com/emeryberger/Hoard) (tag:3.13) allocator by Emery Berger \[1],
the memory compacting [_Mesh_](https://github.com/plasma-umass/Mesh) (git:51222e7) allocator by
Bobby Powers _et al_ \[8],
and finally the default system allocator (glibc, 2.27) (based on _PtMalloc2_).

&lt;img width=&quot;90%&quot; src=&quot;doc/bench-2020/bench-c5-18xlarge-2020-01-20-a.svg&quot;/&gt;
&lt;img width=&quot;90%&quot; src=&quot;doc/bench-2020/bench-c5-18xlarge-2020-01-20-b.svg&quot;/&gt;

The following figure shows the peak working set (rss) of the allocators
on the benchmarks (on the c5.18xlarge instance).

&lt;img width=&quot;90%&quot; src=&quot;doc/bench-2020/bench-c5-18xlarge-2020-01-20-rss-a.svg&quot;/&gt;
&lt;img width=&quot;90%&quot; src=&quot;doc/bench-2020/bench-c5-18xlarge-2020-01-20-rss-b.svg&quot;/&gt;


## On 24-core AMD Epyc, 2020-01-16

For completeness, here are the results on a
[r5a.12xlarge](https://aws.amazon.com/ec2/instance-types/#Memory_Optimized) instance
having a 48 processor AMD Epyc 7000 at 2.5GHz with 384GiB of memory.
The results are similar to the Intel results but it is interesting to
see the differences in the _larsonN_, _mstressN_, and _xmalloc-testN_ benchmarks.

&lt;img width=&quot;90%&quot; src=&quot;doc/bench-2020/bench-r5a-12xlarge-2020-01-16-a.svg&quot;/&gt;
&lt;img width=&quot;90%&quot; src=&quot;doc/bench-2020/bench-r5a-12xlarge-2020-01-16-b.svg&quot;/&gt;

--&gt; 
&lt;h1&gt;References&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;[1] Emery D. Berger, Kathryn S. McKinley, Robert D. Blumofe, and Paul R. Wilson. &lt;em&gt;Hoard: A Scalable Memory Allocator for Multithreaded Applications&lt;/em&gt; the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-IX). Cambridge, MA, November 2000. &lt;a href=&quot;http://www.cs.utexas.edu/users/mckinley/papers/asplos-2000.pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[2] P. Larson and M. Krishnan. &lt;em&gt;Memory allocation for long-running server applications&lt;/em&gt;. In ISMM, Vancouver, B.C., Canada, 1998. &lt;a href=&quot;http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.45.1947&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[3] D. Grunwald, B. Zorn, and R. Henderson. &lt;em&gt;Improving the cache locality of memory allocation&lt;/em&gt;. In R. Cartwright, editor, Proceedings of the Conference on Programming Language Design and Implementation, pages 177–186, New York, NY, USA, June 1993. &lt;a href=&quot;http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.43.6621&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[4] J. Barnes and P. Hut. &lt;em&gt;A hierarchical O(n*log(n)) force-calculation algorithm&lt;/em&gt;. Nature, 324:446-449, 1986.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[5] C. Lever, and D. Boreham. &lt;em&gt;Malloc() Performance in a Multithreaded Linux Environment.&lt;/em&gt; In USENIX Annual Technical Conference, Freenix Session. San Diego, CA. Jun. 2000. Available at &lt;a href=&quot;https://github.com/kuszmaul/SuperMalloc/tree/master/tests&quot;&gt;https://github.com/kuszmaul/SuperMalloc/tree/master/tests&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[6] Timothy Crundal. &lt;em&gt;Reducing Active-False Sharing in TCMalloc&lt;/em&gt;. 2016. CS16S1 project at the Australian National University. &lt;a href=&quot;http://courses.cecs.anu.edu.au/courses/CSPROJECTS/16S1/Reports/Timothy_Crundal_Report.pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[7] Alexey Kukanov, and Michael J Voss. &lt;em&gt;The Foundations for Scalable Multi-Core Software in Intel Threading Building Blocks.&lt;/em&gt; Intel Technology Journal 11 (4). 2007&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;[8] Bobby Powers, David Tench, Emery D. Berger, and Andrew McGregor. &lt;em&gt;Mesh: Compacting Memory Management for C/C++&lt;/em&gt; In Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI&#39;19), June 2019, pages 333-–346.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!--
- \[9] Paul Liétar, Theodore Butler, Sylvan Clebsch, Sophia Drossopoulou, Juliana Franco, Matthew J Parkinson,
  Alex Shamis, Christoph M Wintersteiger, and David Chisnall.
  _Snmalloc: A Message Passing Allocator._
  In Proceedings of the 2019 ACM SIGPLAN International Symposium on Memory Management, 122–135. ACM. 2019.
--&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&quot;https://cla.microsoft.com&quot;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; 
&lt;h1&gt;Older Release Notes&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;2024-05-13, &lt;code&gt;v1.8.6&lt;/code&gt;, &lt;code&gt;v2.1.6&lt;/code&gt;: Fix build errors on various (older) platforms. Refactored aligned allocation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2024-04-22, &lt;code&gt;v1.8.4&lt;/code&gt;, &lt;code&gt;v2.1.4&lt;/code&gt;: Fixes various bugs and build issues. Add &lt;code&gt;MI_LIBC_MUSL&lt;/code&gt; cmake flag for musl builds. Free-ing code is refactored into a separate module (&lt;code&gt;free.c&lt;/code&gt;). Mimalloc page info is simplified with the block size directly available (and new &lt;code&gt;block_size_shift&lt;/code&gt; to improve aligned block free-ing). New approach to collection of abandoned segments: When a thread terminates the segments it owns are abandoned (containing still live objects) and these can be reclaimed by other threads. We no longer use a list of abandoned segments but this is now done using bitmaps in arena&#39;s which is more concurrent (and more aggressive). Abandoned memory can now also be reclaimed if a thread frees an object in an abandoned page (which can be disabled using &lt;code&gt;mi_option_abandoned_reclaim_on_free&lt;/code&gt;). The option &lt;code&gt;mi_option_max_segment_reclaim&lt;/code&gt; gives a maximum percentage of abandoned segments that can be reclaimed per try (=10%).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2023-04-24, &lt;code&gt;v1.8.2&lt;/code&gt;, &lt;code&gt;v2.1.2&lt;/code&gt;: Fixes build issues on freeBSD, musl, and C17 (UE 5.1.1). Reduce code size/complexity by removing regions and segment-cache&#39;s and only use arenas with improved memory purging -- this may improve memory usage as well for larger services. Renamed options for consistency. Improved Valgrind and ASAN checking.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2023-04-03, &lt;code&gt;v1.8.1&lt;/code&gt;, &lt;code&gt;v2.1.1&lt;/code&gt;: Fixes build issues on some platforms.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2023-03-29, &lt;code&gt;v1.8.0&lt;/code&gt;, &lt;code&gt;v2.1.0&lt;/code&gt;: Improved support dynamic overriding on Windows 11. Improved tracing precision with &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#asan&quot;&gt;asan&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#valgrind&quot;&gt;Valgrind&lt;/a&gt;, and added Windows event tracing &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#ETW&quot;&gt;ETW&lt;/a&gt; (contributed by Xinglong He). Created an OS abstraction layer to make it easier to port and separate platform dependent code (in &lt;code&gt;src/prim&lt;/code&gt;). Fixed C++ STL compilation on older Microsoft C++ compilers, and various small bug fixes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2022-12-23, &lt;code&gt;v1.7.9&lt;/code&gt;, &lt;code&gt;v2.0.9&lt;/code&gt;: Supports building with &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#asan&quot;&gt;asan&lt;/a&gt; and improved &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#valgrind&quot;&gt;Valgrind&lt;/a&gt; support. Support arbitrary large alignments (in particular for &lt;code&gt;std::pmr&lt;/code&gt; pools). Added C++ STL allocators attached to a specific heap (thanks @vmarkovtsev). Heap walks now visit all object (including huge objects). Support Windows nano server containers (by Johannes Schindelin,@dscho). Various small bug fixes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2022-11-03, &lt;code&gt;v1.7.7&lt;/code&gt;, &lt;code&gt;v2.0.7&lt;/code&gt;: Initial support for &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/mimalloc/main/#valgrind&quot;&gt;Valgrind&lt;/a&gt; for leak testing and heap block overflow detection. Initial support for attaching heaps to a specific memory area (only in v2). Fix &lt;code&gt;realloc&lt;/code&gt; behavior for zero size blocks, remove restriction to integral multiple of the alignment in &lt;code&gt;alloc_align&lt;/code&gt;, improved aligned allocation performance, reduced contention with many threads on few processors (thank you @dposluns!), vs2022 support, support &lt;code&gt;pkg-config&lt;/code&gt;, .&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2022-04-14, &lt;code&gt;v1.7.6&lt;/code&gt;, &lt;code&gt;v2.0.6&lt;/code&gt;: fix fallback path for aligned OS allocation on Windows, improve Windows aligned allocation even when compiling with older SDK&#39;s, fix dynamic overriding on macOS Monterey, fix MSVC C++ dynamic overriding, fix warnings under Clang 14, improve performance if many OS threads are created and destroyed, fix statistics for large object allocations, using MIMALLOC_VERBOSE=1 has no maximum on the number of error messages, various small fixes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2022-02-14, &lt;code&gt;v1.7.5&lt;/code&gt;, &lt;code&gt;v2.0.5&lt;/code&gt; (alpha): fix malloc override on Windows 11, fix compilation with musl, potentially reduced committed memory, add &lt;code&gt;bin/minject&lt;/code&gt; for Windows, improved wasm support, faster aligned allocation, various small fixes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2021-11-14, &lt;code&gt;v1.7.3&lt;/code&gt;, &lt;code&gt;v2.0.3&lt;/code&gt; (beta): improved WASM support, improved macOS support and performance (including M1), improved performance for v2 for large objects, Python integration improvements, more standard installation directories, various small fixes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2021-06-17, &lt;code&gt;v1.7.2&lt;/code&gt;, &lt;code&gt;v2.0.2&lt;/code&gt; (beta): support M1, better installation layout on Linux, fix thread_id on Android, prefer 2-6TiB area for aligned allocation to work better on pre-windows 8, various small fixes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2021-04-06, &lt;code&gt;v1.7.1&lt;/code&gt;, &lt;code&gt;v2.0.1&lt;/code&gt; (beta): fix bug in arena allocation for huge pages, improved aslr on large allocations, initial M1 support (still experimental).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2021-01-31, &lt;code&gt;v2.0.0&lt;/code&gt;: beta release 2.0: new slice algorithm for managing internal mimalloc pages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2021-01-31, &lt;code&gt;v1.7.0&lt;/code&gt;: stable release 1.7: support explicit user provided memory regions, more precise statistics, improve macOS overriding, initial support for Apple M1, improved DragonFly support, faster memcpy on Windows, various small fixes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-09-24, &lt;code&gt;v1.6.7&lt;/code&gt;: stable release 1.6: using standard C atomics, passing tsan testing, improved handling of failing to commit on Windows, add &lt;a href=&quot;https://github.com/microsoft/mimalloc/raw/master/include/mimalloc.h#L156&quot;&gt;&lt;code&gt;mi_process_info&lt;/code&gt;&lt;/a&gt; api call.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-08-06, &lt;code&gt;v1.6.4&lt;/code&gt;: stable release 1.6: improved error recovery in low-memory situations, support for IllumOS and Haiku, NUMA support for Vista/XP, improved NUMA detection for AMD Ryzen, ubsan support.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-05-05, &lt;code&gt;v1.6.3&lt;/code&gt;: stable release 1.6: improved behavior in out-of-memory situations, improved malloc zones on macOS, build PIC static libraries by default, add option to abort on out-of-memory, line buffered statistics.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-04-20, &lt;code&gt;v1.6.2&lt;/code&gt;: stable release 1.6: fix compilation on Android, MingW, Raspberry, and Conda, stability fix for Windows 7, fix multiple mimalloc instances in one executable, fix &lt;code&gt;strnlen&lt;/code&gt; overload, fix aligned debug padding.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-02-17, &lt;code&gt;v1.6.1&lt;/code&gt;: stable release 1.6: minor updates (build with clang-cl, fix alignment issue for small objects).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-02-09, &lt;code&gt;v1.6.0&lt;/code&gt;: stable release 1.6: fixed potential memory leak, improved overriding and thread local support on FreeBSD, NetBSD, DragonFly, and macOSX. New byte-precise heap block overflow detection in debug mode (besides the double-free detection and free-list corruption detection). Add &lt;code&gt;nodiscard&lt;/code&gt; attribute to most allocation functions. Enable &lt;code&gt;MIMALLOC_PAGE_RESET&lt;/code&gt; by default. New reclamation strategy for abandoned heap pages for better memory footprint.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-02-09, &lt;code&gt;v1.5.0&lt;/code&gt;: stable release 1.5: improved free performance, small bug fixes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-01-22, &lt;code&gt;v1.4.0&lt;/code&gt;: stable release 1.4: improved performance for delayed OS page reset, more eager concurrent free, addition of STL allocator, fixed potential memory leak.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2020-01-15, &lt;code&gt;v1.3.0&lt;/code&gt;: stable release 1.3: bug fixes, improved randomness and &lt;a href=&quot;https://github.com/microsoft/mimalloc/raw/783e3377f79ee82af43a0793910a9f2d01ac7863/include/mimalloc-internal.h#L396&quot;&gt;stronger free list encoding&lt;/a&gt; in secure mode.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2019-12-22, &lt;code&gt;v1.2.2&lt;/code&gt;: stable release 1.2: minor updates.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2019-11-22, &lt;code&gt;v1.2.0&lt;/code&gt;: stable release 1.2: bug fixes, improved secure mode (free list corruption checks, double free mitigation). Improved dynamic overriding on Windows.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2019-10-07, &lt;code&gt;v1.1.0&lt;/code&gt;: stable release 1.1.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2019-09-01, &lt;code&gt;v1.0.8&lt;/code&gt;: pre-release 8: more robust windows dynamic overriding, initial huge page support.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2019-08-10, &lt;code&gt;v1.0.6&lt;/code&gt;: pre-release 6: various performance improvements.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>fluent/fluent-bit</title>
      <link>https://github.com/fluent/fluent-bit</link>
      <description>&lt;p&gt;Fast and Lightweight Logs, Metrics and Traces processor for Linux, BSD, OSX and Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fluent/fluent-bit/master/fluentbit_logo.png&quot; alt=&quot;logo&quot; /&gt;&lt;/h1&gt; 
&lt;h3&gt;CI Status&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;CI Workflow&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Unit Tests (&lt;code&gt;master&lt;/code&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fluent/fluent-bit/actions/workflows/unit-tests.yaml&quot;&gt;&lt;img src=&quot;https://github.com/fluent/fluent-bit/actions/workflows/unit-tests.yaml/badge.svg?branch=master&quot; alt=&quot;CI/Unit Tests&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Integration Tests&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fluent/fluent-bit/actions/workflows/master-integration-test.yaml&quot;&gt;&lt;img src=&quot;https://github.com/fluent/fluent-bit/actions/workflows/master-integration-test.yaml/badge.svg?sanitize=true&quot; alt=&quot;CI/Integration Tests&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Arm builds&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://actuated.dev/&quot;&gt;&lt;img alt=&quot;Arm CI sponsored by Actuated&quot; src=&quot;https://docs.actuated.dev/images/actuated-badge.png&quot; width=&quot;120px&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Latest Release Pipeline&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/fluent/fluent-bit/actions/workflows/staging-release.yaml&quot;&gt;&lt;img src=&quot;https://github.com/fluent/fluent-bit/actions/workflows/staging-release.yaml/badge.svg?sanitize=true&quot; alt=&quot;CI/Build&quot; /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://fluentbit.io&quot;&gt;Fluent Bit&lt;/a&gt; is a lightweight and high-performance Telemetry Agent designed to collect, process, and forward &lt;strong&gt;Logs&lt;/strong&gt;, &lt;strong&gt;Metrics&lt;/strong&gt;, and &lt;strong&gt;Traces&lt;/strong&gt; from any source to any destination.&lt;/p&gt; 
&lt;p&gt;It&#39;s part of the Graduated &lt;a href=&quot;https://fluentd.org&quot;&gt;Fluentd&lt;/a&gt; Ecosystem and a CNCF &lt;a href=&quot;https://cncf.io&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt; project.&lt;/p&gt; 
&lt;p&gt;Fluent Bit supports a wide array of platforms, including Linux, Windows, MacOS, BSD, and Embedded environments, and is built for maximum efficiency with minimal CPU and memory footprint.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fluent/fluent-bit/master/documentation/fluentbit_ecosystem.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📌 Roadmap &amp;amp; Maintenance&lt;/h2&gt; 
&lt;p&gt;We follow a fast-paced development cycle, with major releases every 3–4 months. The active development branch (&lt;code&gt;master&lt;/code&gt;) is currently focused on &lt;strong&gt;v4.1&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;For version-specific maintenance timelines and policies, see our &lt;a href=&quot;https://github.com/fluent/fluent-bit/raw/master/MAINTENANCE.md&quot;&gt;MAINTENANCE.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To track upcoming milestones, visit the &lt;a href=&quot;https://github.com/fluent/fluent-bit/wiki/Roadmap&quot;&gt;project roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;High Performance&lt;/strong&gt; with low memory footprint&lt;/li&gt; 
 &lt;li&gt;📦 &lt;strong&gt;Pluggable Architecture&lt;/strong&gt;: 70+ built-in plugins for Inputs, Filters, and Outputs&lt;/li&gt; 
 &lt;li&gt;🧠 &lt;strong&gt;SQL Stream Processing&lt;/strong&gt;: Perform analytics and transformations with SQL queries&lt;/li&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Secure Networking&lt;/strong&gt;: Built-in TLS/SSL support and async I/O&lt;/li&gt; 
 &lt;li&gt;📊 &lt;strong&gt;Monitoring&lt;/strong&gt;: Expose internal metrics over HTTP/Prometheus&lt;/li&gt; 
 &lt;li&gt;🧩 &lt;strong&gt;Extensibility&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Write plugins in &lt;strong&gt;C&lt;/strong&gt;, filters in &lt;strong&gt;Lua&lt;/strong&gt;, and outputs in &lt;strong&gt;Go&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;🔌 &lt;strong&gt;Supports Logs, Metrics, and Traces&lt;/strong&gt; with unified processing and delivery&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Our official documentation includes installation guides, plugin usage, developer resources, and more:&lt;/p&gt; 
&lt;p&gt;📚 &lt;a href=&quot;https://docs.fluentbit.io&quot;&gt;https://docs.fluentbit.io&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Build from source:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd build
cmake ..
make
bin/fluent-bit -i cpu -o stdout -f 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More details: &lt;a href=&quot;https://docs.fluentbit.io/manual/installation/sources/build-and-install&quot;&gt;Build &amp;amp; Install&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Requirements&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;CMake &amp;gt;= 3.0&lt;/li&gt; 
 &lt;li&gt;Flex &amp;amp; Bison&lt;/li&gt; 
 &lt;li&gt;YAML and OpenSSL headers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Install Fluent Bit&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.fluentbit.io/manual/installation/linux&quot;&gt;Linux packages (Debian, Ubuntu, RHEL, etc.)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.fluentbit.io/manual/installation/docker&quot;&gt;Docker images&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.fluentbit.io/manual/installation/windows&quot;&gt;Windows binaries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.fluentbit.io/manual/installation/linux/s390x&quot;&gt;IBM Z (s390x)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Plugins: Inputs, Filters, Outputs&lt;/h2&gt; 
&lt;p&gt;Fluent Bit is fully modular. It supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.fluentbit.io/manual/pipeline/inputs&quot;&gt;Input Plugins&lt;/a&gt;: collect logs/metrics/traces&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.fluentbit.io/manual/pipeline/filters&quot;&gt;Filter Plugins&lt;/a&gt;: enrich and transform data&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.fluentbit.io/manual/pipeline/outputs&quot;&gt;Output Plugins&lt;/a&gt;: deliver data to external services&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the full plugin list in our &lt;a href=&quot;https://docs.fluentbit.io/manual/pipeline/inputs&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🚀 Production Usage&lt;/h2&gt; 
&lt;p&gt;Fluent Bit is deployed &lt;strong&gt;over 10 million times daily&lt;/strong&gt; and has surpassed &lt;strong&gt;15 billion downloads&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Used by companies like:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fluent/fluent-bit/master/documentation/fluentbit_users.png&quot; alt=&quot;users&quot; /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Want to add your logo? &lt;a href=&quot;https://github.com/fluent/fluent-bit/issues&quot;&gt;Open an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Fluent Bit is open to community contributions!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🤝 &lt;a href=&quot;https://fluentbit.io/community/&quot;&gt;Join our community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🛠 &lt;a href=&quot;https://raw.githubusercontent.com/fluent/fluent-bit/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;a href=&quot;https://raw.githubusercontent.com/fluent/fluent-bit/master/DEVELOPER_GUIDE.md&quot;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Community &amp;amp; Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;💬 &lt;a href=&quot;http://slack.fluentd.org&quot;&gt;Slack&lt;/a&gt; (&lt;code&gt;#fluent-bit&lt;/code&gt; channel)&lt;/li&gt; 
 &lt;li&gt;🐦 &lt;a href=&quot;https://twitter.com/fluentbit&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache License v2.0&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;p&gt;Fluent Bit is a CNCF sub-project, sponsored and maintained by major cloud providers and a growing community of contributors and maintainers from across the Cloud Native ecosystem.&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href=&quot;https://github.com/fluent/fluent-bit/graphs/contributors&quot;&gt;See Contributors&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>netdata/netdata</title>
      <link>https://github.com/netdata/netdata</link>
      <description>&lt;p&gt;The fastest path to AI-powered full stack observability, even for lean teams.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.netdata.cloud#gh-light-mode-only&quot;&gt; &lt;img src=&quot;https://www.netdata.cloud/img/readme-images/netdata_readme_logo_light.png&quot; alt=&quot;Netdata&quot; width=&quot;300&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://www.netdata.cloud#gh-dark-mode-only&quot;&gt; &lt;img src=&quot;https://www.netdata.cloud/img/readme-images/netdata_readme_logo_dark.png&quot; alt=&quot;Netdata&quot; width=&quot;300&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt;X-Ray Vision for your infrastructure!&lt;/h3&gt; 
&lt;h4 align=&quot;center&quot;&gt;Every Metric, Every Second. No BS.&lt;/h4&gt; 
&lt;br /&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/netdata/netdata/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/netdata/netdata?style=social&quot; alt=&quot;GitHub Stars&quot; /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://app.netdata.cloud/spaces/netdata-demo?utm_campaign=github_readme_demo_badge&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Live%20Demo-green&quot; alt=&quot;Live Demo&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/netdata/netdata/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/netdata/netdata.svg?sanitize=true&quot; alt=&quot;Latest release&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/netdata/netdata-nightlies/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/netdata/netdata-nightlies.svg?sanitize=true&quot; alt=&quot;Latest nightly build&quot; /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://community.netdata.cloud&quot;&gt;&lt;img alt=&quot;Discourse topics&quot; src=&quot;https://img.shields.io/discourse/topics?server=https%3A%2F%2Fcommunity.netdata.cloud%2F&amp;amp;logo=discourse&amp;amp;label=discourse%20forum&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/netdata/netdata/discussions&quot;&gt;&lt;img alt=&quot;GitHub Discussions&quot; src=&quot;https://img.shields.io/github/discussions/netdata/netdata?logo=github&amp;amp;label=github%20discussions&quot; /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/2231&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/2231/badge&quot; alt=&quot;CII Best Practices&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://scan.coverity.com/projects/netdata-netdata?tab=overview&quot;&gt;&lt;img alt=&quot;Coverity Scan&quot; src=&quot;https://img.shields.io/coverity/scan/netdata&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://registry.my-netdata.io/#menu_netdata_submenu_registry&quot;&gt;&lt;img src=&quot;https://registry.my-netdata.io/api/v3/badge.svg?chart=netdata.registry_entries&amp;amp;dimensions=persons&amp;amp;label=user%20base&amp;amp;units=M&amp;amp;value_color=blue&amp;amp;precision=2&amp;amp;divide=1000000&amp;amp;options=unaligned&amp;amp;tier=1&amp;amp;v44&quot; alt=&quot;User base&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://registry.my-netdata.io/#menu_netdata_submenu_registry&quot;&gt;&lt;img src=&quot;https://registry.my-netdata.io/api/v3/badge.svg?chart=netdata.registry_entries&amp;amp;dimensions=machines&amp;amp;label=servers%20monitored&amp;amp;units=M&amp;amp;divide=1000000&amp;amp;value_color=orange&amp;amp;precision=2&amp;amp;options=unaligned&amp;amp;tier=1&amp;amp;v44&quot; alt=&quot;Servers monitored&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://registry.my-netdata.io/#menu_netdata_submenu_registry&quot;&gt;&lt;img src=&quot;https://registry.my-netdata.io/api/v3/badge.svg?chart=netdata.registry_sessions&amp;amp;label=sessions%20served&amp;amp;units=M&amp;amp;value_color=yellowgreen&amp;amp;precision=2&amp;amp;divide=1000000&amp;amp;options=unaligned&amp;amp;tier=1&amp;amp;v44&quot; alt=&quot;Sessions served&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/netdata/netdata&quot;&gt;&lt;img src=&quot;https://registry.my-netdata.io/api/v3/badge.svg?chart=dockerhub.pulls_sum&amp;amp;divide=1000000&amp;amp;precision=1&amp;amp;units=M&amp;amp;label=docker+hub+pulls&amp;amp;options=unaligned&amp;amp;tier=1&amp;amp;v44&quot; alt=&quot;Docker Hub pulls&quot; /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Visit our &lt;a href=&quot;https://www.netdata.cloud&quot;&gt;Home Page&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; 
&lt;hr class=&quot;solid&quot; /&gt; 
&lt;p&gt;MENU: &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#who-we-are&quot;&gt;WHO WE ARE&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#key-features&quot;&gt;KEY FEATURES&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#getting-started&quot;&gt;GETTING STARTED&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#how-it-works&quot;&gt;HOW IT WORKS&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#book-documentation&quot;&gt;DOCS&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#tada-community&quot;&gt;COMMUNITY&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#pray-contribute&quot;&gt;CONTRIBUTE&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/#scroll-license&quot;&gt;LICENSE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] People &lt;strong&gt;get addicted to Netdata.&lt;/strong&gt; Once you use it on your systems, &lt;em&gt;there&#39;s no going back.&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Platforms-Linux%20%7C%20macOS%20%7C%20FreeBSD%20%7C%20Windows-blue&quot; alt=&quot;Platforms&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;WHO WE ARE&lt;/h2&gt; 
&lt;p&gt;Netdata is an open-source, real-time infrastructure monitoring platform. Monitor, detect, and act across your entire infrastructure.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Core Advantages:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Instant Insights&lt;/strong&gt; – With Netdata you can access per-second metrics and visualizations.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Zero Configuration&lt;/strong&gt; – You can deploy immediately without complex setup.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ML-Powered&lt;/strong&gt; – You can detect anomalies, predict issues, and automate analysis.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Efficient&lt;/strong&gt; – You can monitor with minimal resource usage and maximum scalability.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure &amp;amp; Distributed&lt;/strong&gt; – You can keep your data local with no central collection needed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With Netdata, you get real-time, per-second updates. Clear &lt;strong&gt;insights at a glance&lt;/strong&gt;, no complexity.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;All heroes have a great origin story. Click to discover ours.&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;In 2013, at the company where Costa Tsaousis was COO, a significant percentage of their cloud-based transactions failed silently, severely impacting business performance.&lt;/p&gt; 
 &lt;p&gt;Costa and his team tried every troubleshooting tool available at the time. None could identify the root cause. As Costa later wrote:&lt;/p&gt; 
 &lt;p&gt;“&lt;em&gt;I couldn’t believe that monitoring systems provide so few metrics and with such low resolution, scale so badly, and cost so much to run.&lt;/em&gt;”&lt;/p&gt; 
 &lt;p&gt;Frustrated, he decided to build his own monitoring tool, starting from scratch.&lt;/p&gt; 
 &lt;p&gt;That decision led to countless late nights and weekends. It also sparked a fundamental shift in how infrastructure monitoring and troubleshooting are approached, both in method and in cost.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Most Energy-Efficient Monitoring Tool&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.ivanomalavolta.com/files/papers/ICSOC_2023.pdf#gh-dark-mode-only&quot;&gt; &lt;img src=&quot;https://github.com/netdata/netdata/assets/139226121/7118757a-38fb-48d7-b12a-53e709a8e8c0&quot; alt=&quot;Energy Efficiency&quot; width=&quot;800&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://www.ivanomalavolta.com/files/papers/ICSOC_2023.pdf#gh-light-mode-only&quot;&gt; &lt;img src=&quot;https://github.com/netdata/netdata/assets/139226121/4f64cbb6-05e4-48e3-b7c0-d1b79e37e219&quot; alt=&quot;Energy efficiency&quot; width=&quot;800&quot; /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;According to the &lt;a href=&quot;https://www.ivanomalavolta.com/files/papers/ICSOC_2023.pdf&quot;&gt;University of Amsterdam study&lt;/a&gt;, Netdata is the most energy-efficient tool for monitoring Docker-based systems. The study also shows Netdata excels in CPU usage, RAM usage, and execution time compared to other monitoring solutions.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;What Makes It Unique&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Real-Time&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Per-second data collection and processing&lt;/td&gt; 
   &lt;td&gt;Works in a beat – click and see results instantly&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Zero-Configuration&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Automatic detection and discovery&lt;/td&gt; 
   &lt;td&gt;Auto-discovers everything on the nodes it runs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;ML-Powered&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Unsupervised anomaly detection&lt;/td&gt; 
   &lt;td&gt;Trains multiple ML models per metric at the edge&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Long-Term Retention&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;High-performance storage&lt;/td&gt; 
   &lt;td&gt;~0.5 bytes per sample with tiered storage for archiving&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Advanced Visualization&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Rich, interactive dashboards&lt;/td&gt; 
   &lt;td&gt;Slice and dice data without query language&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Extreme Scalability&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Native horizontal scaling&lt;/td&gt; 
   &lt;td&gt;Parent-Child centralization with multi-million samples/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Complete Visibility&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;From infrastructure to applications&lt;/td&gt; 
   &lt;td&gt;Simplifies operations and eliminates silos&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Edge-Based&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Processing at your premises&lt;/td&gt; 
   &lt;td&gt;Distributes code instead of centralizing data&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; Want to put Netdata to the test against Prometheus? Explore the &lt;a href=&quot;https://www.netdata.cloud/blog/netdata-vs-prometheus-2025/&quot;&gt;full comparison&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Netdata Ecosystem&lt;/h2&gt; 
&lt;p&gt;This three-part architecture enables you to scale from single nodes to complex multi-cloud environments:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;License&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Netdata Agent&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Core monitoring engine&lt;br /&gt;• Handles collection, storage, ML, alerts, exports&lt;br /&gt;• Runs on servers, cloud, K8s, IoT&lt;br /&gt;• Zero production impact&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0&quot;&gt;GPL v3+&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Netdata Cloud&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Enterprise features&lt;br /&gt;• User management, RBAC, horizontal scaling&lt;br /&gt;• Centralized alerts&lt;br /&gt;• Free community tier&lt;br /&gt;• No metric storage centralization&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Netdata UI&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Dashboards and visualizations&lt;br /&gt;• Free to use&lt;br /&gt;• Included in standard packages&lt;br /&gt;• Latest version via CDN&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://app.netdata.cloud/LICENSE.txt&quot;&gt;NCUL1&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;What You Can Monitor&lt;/h2&gt; 
&lt;p&gt;With Netdata you can monitor all these components across platforms:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;right&quot;&gt;Component&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Linux&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;FreeBSD&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;macOS&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Windows&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;System Resources&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;CPU, Memory and system shared resources&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Full&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;Disks, Mount points, Filesystems, RAID arrays&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Full&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Network&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;Network Interfaces, Protocols, Firewall, etc&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Full&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Hardware &amp;amp; Sensors&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;Fans, Temperatures, Controllers, GPUs, etc&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Full&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Some&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;O/S Services&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;Resources, Performance and Status&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;small&gt;&lt;br /&gt;&lt;code&gt;systemd&lt;/code&gt;&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Processes&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;Resources, Performance, OOM, and more&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;System and Application &lt;strong&gt;Logs&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;small&gt;&lt;br /&gt;&lt;code&gt;systemd&lt;/code&gt;-journal&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;small&gt;&lt;br /&gt;&lt;code&gt;Windows Event Log&lt;/code&gt;, &lt;code&gt;ETW&lt;/code&gt;&lt;/small&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Network Connections&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;Live TCP and UDP sockets per PID&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Containers&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;Docker/containerd, LXC/LXD, Kubernetes, etc&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;VMs&lt;/strong&gt; (from the host)&lt;small&gt;&lt;br /&gt;KVM, qemu, libvirt, Proxmox, etc&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;small&gt;&lt;br /&gt;&lt;code&gt;cgroups&lt;/code&gt;&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;small&gt;&lt;br /&gt;&lt;code&gt;Hyper-V&lt;/code&gt;&lt;/small&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Synthetic Checks&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;Test APIs, TCP ports, Ping, Certificates, etc&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Packaged Applications&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;nginx, apache, postgres, redis, mongodb,&lt;br /&gt;and hundreds more&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Cloud Provider Infrastructure&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;AWS, GCP, Azure, and more&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;right&quot;&gt;&lt;strong&gt;Custom Applications&lt;/strong&gt;&lt;small&gt;&lt;br /&gt;OpenMetrics, StatsD and soon OpenTelemetry&lt;/small&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;On Linux, you can continuously monitor all kernel features and hardware sensors for errors, including Intel/AMD/Nvidia GPUs, PCI AER, RAM EDAC, IPMI, S.M.A.R.T, Intel RAPL, NVMe, fans, power supplies, and voltage readings.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can install Netdata on all major operating systems. To begin:&lt;/p&gt; 
&lt;h3&gt;1. Install Netdata&lt;/h3&gt; 
&lt;p&gt;Choose your platform and follow the installation guide:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/installing/one-line-installer-for-all-linux-systems&quot;&gt;Linux Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/installing/macos&quot;&gt;macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/installing/freebsd&quot;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/netdata-agent/installation/windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/netdata/netdata/master/packaging/docker/README.md&quot;&gt;Docker Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/installation/install-on-specific-environments/kubernetes&quot;&gt;Kubernetes Setup&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You can access the Netdata UI at &lt;code&gt;http://localhost:19999&lt;/code&gt; (or &lt;code&gt;http://NODE:19999&lt;/code&gt; if remote).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;2. Configure Collectors&lt;/h3&gt; 
&lt;p&gt;Netdata auto-discovers most metrics, but you can manually configure some collectors:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/data-collection/&quot;&gt;All collectors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/data-collection/monitor-anything/networking/snmp&quot;&gt;SNMP monitoring&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. Configure Alerts&lt;/h3&gt; 
&lt;p&gt;You can use hundreds of built-in alerts and integrate with:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;email&lt;/code&gt;, &lt;code&gt;Slack&lt;/code&gt;, &lt;code&gt;Telegram&lt;/code&gt;, &lt;code&gt;PagerDuty&lt;/code&gt;, &lt;code&gt;Discord&lt;/code&gt;, &lt;code&gt;Microsoft Teams&lt;/code&gt;, and more.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; Email alerts work by default if there&#39;s a configured MTA.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;4. Configure Parents&lt;/h3&gt; 
&lt;p&gt;You can centralize dashboards, alerts, and storage with Netdata Parents:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/streaming/streaming-configuration-reference&quot;&gt;Streaming Reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; You can use Netdata Parents for central dashboards, longer retention, and alert configuration.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;5. Connect to Netdata Cloud&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.netdata.cloud/sign-in&quot;&gt;Sign in to Netdata Cloud&lt;/a&gt; and connect your nodes for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Access from anywhere&lt;/li&gt; 
 &lt;li&gt;Horizontal scalability and multi-node dashboards&lt;/li&gt; 
 &lt;li&gt;UI configuration for alerts and data collection&lt;/li&gt; 
 &lt;li&gt;Role-based access control&lt;/li&gt; 
 &lt;li&gt;Free tier available&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; Netdata Cloud is optional. Your data stays in your infrastructure.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Live Demo Sites&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;b&gt;See Netdata in action&lt;/b&gt;&lt;br /&gt; &lt;a href=&quot;https://frankfurt.netdata.rocks&quot;&gt;&lt;b&gt;FRANKFURT&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://newyork.netdata.rocks&quot;&gt;&lt;b&gt;NEWYORK&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://atlanta.netdata.rocks&quot;&gt;&lt;b&gt;ATLANTA&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://sanfrancisco.netdata.rocks&quot;&gt;&lt;b&gt;SANFRANCISCO&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://toronto.netdata.rocks&quot;&gt;&lt;b&gt;TORONTO&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://singapore.netdata.rocks&quot;&gt;&lt;b&gt;SINGAPORE&lt;/b&gt;&lt;/a&gt; | &lt;a href=&quot;https://bangalore.netdata.rocks&quot;&gt;&lt;b&gt;BANGALORE&lt;/b&gt;&lt;/a&gt; &lt;br /&gt; &lt;i&gt;These demo clusters run with default configuration and show real monitoring data.&lt;/i&gt; &lt;br /&gt; &lt;i&gt;Choose the instance closest to you for the best performance.&lt;/i&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;How It Works&lt;/h2&gt; 
&lt;p&gt;With Netdata you can run a modular pipeline for metrics collection, processing, and visualization.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;flowchart TB
  A[Netdata Agent]:::mainNode
  A1(Collect):::green --&amp;gt; A
  A2(Store):::green --&amp;gt; A
  A3(Learn):::green --&amp;gt; A
  A4(Detect):::green --&amp;gt; A
  A5(Check):::green --&amp;gt; A
  A6(Stream):::green --&amp;gt; A
  A7(Archive):::green --&amp;gt; A
  A8(Query):::green --&amp;gt; A
  A9(Score):::green --&amp;gt; A

  classDef green fill:#bbf3bb,stroke:#333,stroke-width:1px,color:#000
  classDef mainNode fill:#f0f0f0,stroke:#333,stroke-width:1px,color:#333
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With each Agent you can:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Collect&lt;/strong&gt; – Gather metrics from systems, containers, apps, logs, APIs, and synthetic checks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt; – Save metrics to a high-efficiency, tiered time-series database.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Learn&lt;/strong&gt; – Train ML models per metric using recent behavior.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Detect&lt;/strong&gt; – Identify anomalies using trained ML models.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Check&lt;/strong&gt; – Evaluate metrics against pre-set or custom alert rules.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stream&lt;/strong&gt; – Send metrics to Netdata Parents in real time.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Archive&lt;/strong&gt; – Export metrics to Prometheus, InfluxDB, OpenTSDB, Graphite, and others.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Query&lt;/strong&gt; – Access metrics via an API for dashboards or third-party tools.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Score&lt;/strong&gt; – Use a scoring engine to find patterns and correlations across metrics.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; Learn more: &lt;a href=&quot;https://learn.netdata.cloud/docs/netdata-agent/#distributed-observability-pipeline&quot;&gt;Netdata&#39;s architecture&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Agent Capabilities&lt;/h2&gt; 
&lt;p&gt;With the Netdata Agent, you can use these core capabilities out-of-the-box:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Capability&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Comprehensive Collection&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• 800+ integrations&lt;br /&gt;• Systems, containers, VMs, hardware sensors&lt;br /&gt;• OpenMetrics, StatsD, and logs&lt;br /&gt;• OpenTelemetry support coming soon&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Performance &amp;amp; Precision&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Per-second collection&lt;br /&gt;• Real-time visualization with 1-second latency&lt;br /&gt;• High-resolution metrics&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Edge-Based ML&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• ML models trained at the edge&lt;br /&gt;• Automatic anomaly detection per metric&lt;br /&gt;• Pattern recognition based on historical behavior&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Advanced Log Management&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Direct systemd-journald and Windows Event Log integration&lt;br /&gt;• Process logs at the edge&lt;br /&gt;• Rich log visualization&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Observability Pipeline&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Parent-Child relationships&lt;br /&gt;• Flexible centralization&lt;br /&gt;• Multi-level replication and retention&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Automated Visualization&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• NIDL data model&lt;br /&gt;• Auto-generated dashboards&lt;br /&gt;• No query language needed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Smart Alerting&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Pre-configured alerts&lt;br /&gt;• Multiple notification methods&lt;br /&gt;• Proactive detection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Low Maintenance&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Auto-detection&lt;br /&gt;• Zero-touch ML&lt;br /&gt;• Easy scalability&lt;br /&gt;• CI/CD friendly&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Open &amp;amp; Extensible&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;• Modular architecture&lt;br /&gt;• Easy to customize&lt;br /&gt;• Integrates with existing tools&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h2&gt;CNCF Membership&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; 
 &lt;picture&gt; 
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/cncf/artwork/master/other/cncf/horizontal/white/cncf-white.svg&quot; /&gt; 
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/cncf/artwork/master/other/cncf/horizontal/color/cncf-color.svg&quot; /&gt; 
  &lt;img alt=&quot;CNCF Logo&quot; src=&quot;https://raw.githubusercontent.com/cncf/artwork/master/other/cncf/horizontal/color/cncf-color.svg?sanitize=true&quot; width=&quot;300&quot; /&gt; 
 &lt;/picture&gt; &lt;br /&gt; Netdata actively supports and is a member of the Cloud Native Computing Foundation (CNCF).&lt;br /&gt; It is one of the most starred projects in the &lt;a href=&quot;https://landscape.cncf.io/?item=observability-and-analysis--observability--netdata&quot;&gt;CNCF landscape&lt;/a&gt;. &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Is Netdata secure?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Yes. Netdata follows &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/en/projects/2231&quot;&gt;OpenSSF best practices&lt;/a&gt;, has a security-first design, and is regularly audited by the community.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://learn.netdata.cloud/docs/security-and-privacy-design&quot;&gt;Security design&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/netdata/netdata/security&quot;&gt;Security policies and advisories&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Does Netdata use a lot of resources?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;No. Even with ML and per-second metrics, Netdata uses minimal resources.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;~5% CPU and 150MiB RAM by default on production systems&lt;/li&gt; 
  &lt;li&gt;&amp;lt;1% CPU and ~100MiB RAM when ML and alerts are disabled and using ephemeral storage&lt;/li&gt; 
  &lt;li&gt;Parents scale to millions of metrics per second with appropriate hardware&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;You can use the &lt;strong&gt;Netdata Monitoring&lt;/strong&gt; section in the dashboard to inspect its resource usage.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;How much data retention is possible?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;As much as your disk allows.&lt;/p&gt; 
 &lt;p&gt;With Netdata you can use tiered retention:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Tier 0: per-second resolution&lt;/li&gt; 
  &lt;li&gt;Tier 1: per-minute resolution&lt;/li&gt; 
  &lt;li&gt;Tier 2: per-hour resolution&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;These are queried automatically based on the zoom level.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Can Netdata scale to many servers?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Yes. With Netdata you can:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Scale horizontally with many Agents&lt;/li&gt; 
  &lt;li&gt;Scale vertically with powerful Parents&lt;/li&gt; 
  &lt;li&gt;Scale infinitely via Netdata Cloud&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;You can use Netdata Cloud to merge many independent infrastructures into one logical view.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Is disk I/O a concern?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;No. Netdata minimizes disk usage:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Metrics are flushed to disk every 17 minutes, spread out evenly&lt;/li&gt; 
  &lt;li&gt;Uses direct I/O and compression (ZSTD)&lt;/li&gt; 
  &lt;li&gt;Can run entirely in RAM or stream to a Parent&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;You can use &lt;code&gt;alloc&lt;/code&gt; or &lt;code&gt;ram&lt;/code&gt; mode for no disk writes.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;How is Netdata different from Prometheus + Grafana?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;With Netdata you get a complete monitoring solution—not just tools.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;No manual setup or dashboards needed&lt;/li&gt; 
  &lt;li&gt;Built-in ML, alerts, dashboards, and correlations&lt;/li&gt; 
  &lt;li&gt;More efficient and easier to deploy&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;a href=&quot;https://blog.netdata.cloud/netdata-vs-prometheus-performance-analysis/&quot;&gt;Performance comparison&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;How is Netdata different from commercial SaaS tools?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;With Netdata you can store all metrics on your infrastructure—no sampling, no aggregation, no loss.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;High-resolution metrics by default&lt;/li&gt; 
  &lt;li&gt;ML per metric, not shared models&lt;/li&gt; 
  &lt;li&gt;Unlimited scalability without skyrocketing cost&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Can Netdata run alongside Nagios, Zabbix, etc.?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Yes. You can use Netdata together with traditional tools.&lt;/p&gt; 
 &lt;p&gt;With Netdata you get:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Real-time, high-resolution monitoring&lt;/li&gt; 
  &lt;li&gt;Zero configuration and auto-generated dashboards&lt;/li&gt; 
  &lt;li&gt;Anomaly detection and advanced visualization&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;What if I feel overwhelmed?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;You can start small:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use the dashboard&#39;s table of contents and search&lt;/li&gt; 
  &lt;li&gt;Explore anomaly scoring (&quot;AR&quot; toggle)&lt;/li&gt; 
  &lt;li&gt;Create custom dashboards in Netdata Cloud&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;a href=&quot;https://learn.netdata.cloud/guides&quot;&gt;Docs and guides&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Do I have to use Netdata Cloud?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;No. Netdata Cloud is optional.&lt;/p&gt; 
 &lt;p&gt;Netdata works without it, but with Cloud you can:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Access remotely with SSO&lt;/li&gt; 
  &lt;li&gt;Save dashboard customizations&lt;/li&gt; 
  &lt;li&gt;Configure alerts centrally&lt;/li&gt; 
  &lt;li&gt;Collaborate with role-based access&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;What telemetry does Netdata collect?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;Anonymous telemetry helps improve the product. You can disable it:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add &lt;code&gt;--disable-telemetry&lt;/code&gt; to the installer, or&lt;/li&gt; 
  &lt;li&gt;Create &lt;code&gt;/etc/netdata/.opt-out-from-anonymous-statistics&lt;/code&gt; and restart Netdata&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Telemetry helps us understand usage, not track users. No private data is collected.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Who uses Netdata?&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;You&#39;ll join users including:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Major companies (Amazon, ABN AMRO Bank, Facebook, Google, IBM, Intel, Netflix, Samsung)&lt;/li&gt; 
  &lt;li&gt;Universities (NYU, Columbia, Seoul National, UCL)&lt;/li&gt; 
  &lt;li&gt;Government organizations worldwide&lt;/li&gt; 
  &lt;li&gt;Infrastructure-intensive organizations&lt;/li&gt; 
  &lt;li&gt;Technology operators&lt;/li&gt; 
  &lt;li&gt;Startups and freelancers&lt;/li&gt; 
  &lt;li&gt;SysAdmins and DevOps professionals&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;&lt;span&gt;📖&lt;/span&gt; Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://learn.netdata.cloud&quot;&gt;Netdata Learn&lt;/a&gt; for full documentation and guides.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; Includes deployment, configuration, alerting, exporting, troubleshooting, and more.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;&lt;span&gt;🎉&lt;/span&gt; Community&lt;/h2&gt; 
&lt;p&gt;Join the Netdata community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.com/invite/2mEmfW735j&quot;&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://community.netdata.cloud&quot;&gt;Forum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/netdata/netdata/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; &lt;a href=&quot;https://github.com/netdata/.github/raw/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Follow us on: &lt;a href=&quot;https://twitter.com/netdatahq&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://www.reddit.com/r/netdata/&quot;&gt;Reddit&lt;/a&gt; | &lt;a href=&quot;https://www.youtube.com/c/Netdata&quot;&gt;YouTube&lt;/a&gt; | &lt;a href=&quot;https://www.linkedin.com/company/netdata-cloud/&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;&lt;span&gt;🙏&lt;/span&gt; Contribute&lt;/h2&gt; 
&lt;p&gt;We welcome your contributions.&lt;/p&gt; 
&lt;p&gt;Ways you help us stay sharp:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Share best practices and monitoring insights&lt;/li&gt; 
 &lt;li&gt;Report issues or missing features&lt;/li&gt; 
 &lt;li&gt;Improve documentation&lt;/li&gt; 
 &lt;li&gt;Develop new integrations or collectors&lt;/li&gt; 
 &lt;li&gt;Help users in forums and chats&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br /&gt; &lt;a href=&quot;https://github.com/netdata/.github/raw/main/CONTRIBUTING.md&quot;&gt;Contribution guide&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;&lt;span&gt;📜&lt;/span&gt; License&lt;/h2&gt; 
&lt;p&gt;The Netdata ecosystem includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Netdata Agent&lt;/strong&gt; – Open-source core (GPLv3+). &lt;strong&gt;Includes&lt;/strong&gt; data collection, storage, ML, alerting, APIs and &lt;strong&gt;redistributes&lt;/strong&gt; several other open-source tools and libraries. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/netdata/netdata/raw/master/LICENSE&quot;&gt;Netdata Agent License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/netdata/netdata/raw/master/REDISTRIBUTED.md&quot;&gt;Netdata Agent Redistributed&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Netdata UI&lt;/strong&gt; – Closed-source but free to use with Netdata Agent and Cloud. Delivered via CDN. It integrates third-party open-source components. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://app.netdata.cloud/LICENSE.txt&quot;&gt;Netdata Cloud UI License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://app.netdata.cloud/3D_PARTY_LICENSES.txt&quot;&gt;Netdata UI third-party licenses&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Netdata Cloud&lt;/strong&gt; – Closed-source, with free and paid tiers. Adds remote access, SSO, scalability.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>riscv-collab/riscv-gnu-toolchain</title>
      <link>https://github.com/riscv-collab/riscv-gnu-toolchain</link>
      <description>&lt;p&gt;GNU toolchain for RISC-V, including GCC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RISC-V GNU Compiler Toolchain&lt;/h1&gt; 
&lt;p&gt;This is the RISC-V C and C++ cross-compiler. It supports two build modes: a generic ELF/Newlib toolchain and a more sophisticated Linux-ELF/glibc toolchain.&lt;/p&gt; 
&lt;h3&gt;Getting the sources&lt;/h3&gt; 
&lt;p&gt;This repository uses submodules, but submodules will fetch automatically on demand, so &lt;code&gt;--recursive&lt;/code&gt; or &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; is not needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/riscv/riscv-gnu-toolchain
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Warning: git clone takes around 6.65 GB of disk and download size&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;Several standard packages are needed to build the toolchain.&lt;/p&gt; 
&lt;p&gt;On Ubuntu, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install autoconf automake autotools-dev curl python3 python3-pip python3-tomli libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev ninja-build git cmake libglib2.0-dev libslirp-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora/CentOS/RHEL OS, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install autoconf automake python3 libmpc-devel mpfr-devel gmp-devel gawk  bison flex texinfo patchutils gcc gcc-c++ zlib-devel expat-devel libslirp-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Arch Linux, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -Syu curl python3 libmpc mpfr gmp base-devel texinfo gperf patchutils bc zlib expat libslirp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also available for Arch users on the AUR: &lt;a href=&quot;https://aur.archlinux.org/packages/riscv-gnu-toolchain-bin&quot;&gt;https://aur.archlinux.org/packages/riscv-gnu-toolchain-bin&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;On macOS, you can use &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt; to install the dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install python3 gawk gnu-sed make gmp mpfr libmpc isl zlib expat texinfo flock libslirp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When executing the instructions in this README, please use &lt;code&gt;gmake&lt;/code&gt; instead of &lt;code&gt;make&lt;/code&gt; to use the newly installed version of make. To build the glibc (Linux) on macOS, you will need to build within a case-sensitive file system. The simplest approach is to create and mount a new disk image with a case sensitive format. Make sure that the mount point does not contain spaces. This is not necessary to build newlib or gcc itself on macOS.&lt;/p&gt; 
&lt;p&gt;This process will start by downloading about 200 MiB of upstream sources, then will patch, build, and install the toolchain. If a local cache of the upstream sources exists in $(DISTDIR), it will be used; the default location is /var/cache/distfiles. Your computer will need about 8 GiB of disk space to complete the process.&lt;/p&gt; 
&lt;h3&gt;Installation (Newlib)&lt;/h3&gt; 
&lt;p&gt;To build the Newlib cross-compiler, pick an install path (that is writeable). If you choose, say, &lt;code&gt;/opt/riscv&lt;/code&gt;, then add &lt;code&gt;/opt/riscv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;. Then, simply run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv
make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should now be able to use riscv64-unknown-elf-gcc and its cousins.&lt;/p&gt; 
&lt;p&gt;Note: If you&#39;re planning to use an external library that replaces part of newlib (for example &lt;code&gt;libgloss-htif&lt;/code&gt;), &lt;a href=&quot;https://raw.githubusercontent.com/riscv-collab/riscv-gnu-toolchain/master/#ensuring-code-model-consistency&quot;&gt;read the FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation (Linux)&lt;/h3&gt; 
&lt;p&gt;To build the Linux cross-compiler, pick an install path (that is writeable). If you choose, say, &lt;code&gt;/opt/riscv&lt;/code&gt;, then add &lt;code&gt;/opt/riscv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;. Then, simply run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv
make linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The build defaults to targeting RV64GC (64-bit) with glibc, even on a 32-bit build environment. To build the 32-bit RV32GC toolchain, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv --with-arch=rv32gc --with-abi=ilp32d
make linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case you prefer musl libc over glibc, configure just like above and opt for &lt;code&gt;make musl&lt;/code&gt; instead of &lt;code&gt;make linux&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Supported architectures are rv32i or rv64i plus standard extensions (a)tomics, (m)ultiplication and division, (f)loat, (d)ouble, or (g)eneral for MAFD.&lt;/p&gt; 
&lt;p&gt;Supported ABIs are ilp32 (32-bit soft-float), ilp32d (32-bit hard-float), ilp32f (32-bit with single-precision in registers and double in memory, niche use only), lp64 lp64f lp64d (same but with 64-bit long and pointers).&lt;/p&gt; 
&lt;h3&gt;Installation (Newlib/Linux multilib)&lt;/h3&gt; 
&lt;p&gt;To build either cross-compiler with support for both 32-bit and 64-bit, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=/opt/riscv --enable-multilib
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then either &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;make linux&lt;/code&gt; or &lt;code&gt;make musl&lt;/code&gt; for the Newlib, Linux glibc-based or Linux musl libc-based cross-compiler, respectively.&lt;/p&gt; 
&lt;p&gt;The multilib compiler will have the prefix riscv64-unknown-elf- or riscv64-unknown-linux-gnu- but will be able to target both 32-bit and 64-bit systems. It will support the most common &lt;code&gt;-march&lt;/code&gt;/&lt;code&gt;-mabi&lt;/code&gt; options, which can be seen by using the &lt;code&gt;--print-multi-lib&lt;/code&gt; flag on either cross-compiler.&lt;/p&gt; 
&lt;p&gt;Linux toolchain has an additional option &lt;code&gt;--enable-default-pie&lt;/code&gt; to control the default PIE enablement for GCC, which is disable by default.&lt;/p&gt; 
&lt;p&gt;To customize the enabled languages, use option &lt;code&gt;--with-languages=&lt;/code&gt;. For example, if you want to enable &lt;code&gt;c,c++,fortran&lt;/code&gt;, use &lt;code&gt;./configure --with-languages=c,c++,fortran&lt;/code&gt;. This option only takes effect for the GNU toolchain.&lt;/p&gt; 
&lt;p&gt;The toolchain has an option &lt;code&gt;--enable-strip&lt;/code&gt; to control strip of host binaries, strip is disabled by default.&lt;/p&gt; 
&lt;h3&gt;Troubleshooting Build Problems&lt;/h3&gt; 
&lt;p&gt;Builds work best if installing into an empty directory. If you build a hard-float toolchain and then try to build a soft-float toolchain with the same --prefix directory, then the build scripts may get confused and exit with a linker error complaining that hard float code can&#39;t be linked with soft float code. Removing the existing toolchain first, or using a different prefix for the second build, avoids the problem. It is OK to build one newlib and one linux toolchain with the same prefix. But you should avoid building two newlib or two linux toolchains with the same prefix.&lt;/p&gt; 
&lt;p&gt;If building a linux toolchain on a MacOS system, or on a Windows system using the Linux subsystem or cygwin, you must ensure that the filesystem is case-sensitive. A build on a case-insensitive filesystem will fail when building glibc because *.os and *.oS files will clobber each other during the build eventually resulting in confusing link errors.&lt;/p&gt; 
&lt;p&gt;CentOS (and RHEL) provide old GNU tools versions that may be too old to build a RISC-V toolchain. There is an alternate toolset provided that includes current versions of the GNU tools. This is the devtoolset provided as part of the Software Collection service. For more info, see the &lt;a href=&quot;https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/&quot;&gt;devtoolset-7&lt;/a&gt; URL. There are various versions of the devtoolset that are available, so you can also try other versions of it, but we have at least one report that devtoolset-7 works.&lt;/p&gt; 
&lt;h3&gt;Advanced Options&lt;/h3&gt; 
&lt;p&gt;There are a number of additional options that may be passed to configure. See &#39;./configure --help&#39; for more details.&lt;/p&gt; 
&lt;p&gt;Also you can define extra flags to pass to specific projects: &lt;code&gt;BINUTILS_NATIVE_FLAGS_EXTRA, BINUTILS_TARGET_FLAGS_EXTRA, GCC_EXTRA_CONFIGURE_FLAGS, GDB_NATIVE_FLAGS_EXTRA, GDB_TARGET_FLAGS_EXTRA, GLIBC_TARGET_FLAGS_EXTRA, NEWLIB_TARGET_FLAGS_EXTRA, LLVM_EXTRA_CONFIGURE_FLAGS, QEMU_EXTRA_CONFIGURE_FLAGS&lt;/code&gt;. Example: &lt;code&gt;GCC_EXTRA_CONFIGURE_FLAGS=--with-gmp=/opt/gmp make linux&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Set default ISA spec version&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;--with-isa-spec=&lt;/code&gt; can specify the default version of the RISC-V Unprivileged (formerly User-Level) ISA specification.&lt;/p&gt; 
&lt;p&gt;Possible options are: &lt;code&gt;2.2&lt;/code&gt;, &lt;code&gt;20190608&lt;/code&gt; and &lt;code&gt;20191213&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The default version is &lt;code&gt;20191213&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;More details about this option you can refer this post &lt;a href=&quot;https://groups.google.com/a/groups.riscv.org/g/sw-dev/c/aE1ZeHHCYf4&quot;&gt;RISC-V GNU toolchain bumping default ISA spec to 20191213&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Build with customized multi-lib configure.&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;--with-multilib-generator=&lt;/code&gt; can specify what multilibs to build. The argument is a semicolon separated list of values, possibly consisting of a single value. Currently only supported for riscv*-&lt;em&gt;-elf&lt;/em&gt;. The accepted values and meanings are given below.&lt;/p&gt; 
&lt;p&gt;Every config is constructed with four components: architecture string, ABI, reuse rule with architecture string and reuse rule with sub-extension.&lt;/p&gt; 
&lt;p&gt;Re-use part support expansion operator (*) to simplify the combination of different sub-extensions, example 4 demonstrate how it uses and works.&lt;/p&gt; 
&lt;p&gt;Example 1: Add multi-lib support for rv32i with ilp32.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&quot;rv32i-ilp32--&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example 2: Add multi-lib support for rv32i with ilp32 and rv32imafd with ilp32.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&quot;rv32i-ilp32--;rv32imafd-ilp32--&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example 3: Add multi-lib support for rv32i with ilp32; rv32im with ilp32 and rv32ic with ilp32 will reuse this multi-lib set.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&quot;rv32i-ilp32-rv32im-c&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example 4: Add multi-lib support for rv64ima with lp64; rv64imaf with lp64, rv64imac with lp64 and rv64imafc with lp64 will reuse this multi-lib set.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --with-multilib-generator=&quot;rv64ima-lp64--f*c&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Enabling QEMU System Targets&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;--enable-qemu-system&lt;/code&gt; configuration flag allows you to include QEMU system emulation targets in addition to the default user-mode emulation.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enabled targets&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;riscv64-linux-user&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;riscv32-linux-user&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;riscv64-softmmu&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;riscv32-softmmu&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Default targets&lt;/strong&gt; (without this flag):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;riscv64-linux-user&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;riscv32-linux-user&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use this option if you need full system emulation for RISC-V. Example configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./configure --enable-qemu-system --prefix=/opt/riscv
make build-sim SIM=qemu
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This flag is particularly useful for developers testing and emulating full RISC-V systems rather than just user-space applications.&lt;/p&gt; 
&lt;h3&gt;Test Suite&lt;/h3&gt; 
&lt;p&gt;The Dejagnu test suite has been ported to RISC-V. This can be run with a simulator for the elf and linux toolchains. The simulator can be selected by the SIM variable in the Makefile, e.g. SIM=qemu, SIM=gdb, or SIM=spike (experimental).In addition, the simulator can also be selected with the configure time option &lt;code&gt;--with-sim=&lt;/code&gt;.However, the testsuite allowlist is only maintained for qemu.Other simulators might get extra failures.&lt;/p&gt; 
&lt;h4&gt;Additional Prerequisite&lt;/h4&gt; 
&lt;p&gt;A helper script to setup testing environment requires &lt;a href=&quot;https://github.com/eliben/pyelftools&quot;&gt;pyelftools&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On newer versions of Ubuntu, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python3-pyelftools
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On newer versions of Fedora and CentOS/RHEL OS (9 or later), executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo yum install python3-pyelftools
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Arch Linux, executing the following command should suffice:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ sudo pacman -Syyu python-pyelftools python-sphinx python-sphinx_rtd_theme ninja
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your distribution/OS does not have pyelftools package, you can install it using PIP.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Assuming that PIP is installed
$ pip3 install --user pyelftools
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Testing GCC&lt;/h4&gt; 
&lt;p&gt;To test GCC, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure --prefix=$RISCV --disable-linux --with-arch=rv64ima # or --with-arch=rv32ima
make newlib
make report-newlib SIM=gdb # Run with gdb simulator

./configure --prefix=$RISCV
make linux
make report-linux SIM=qemu # Run with qemu

./configure --prefix=$RISCV --with-sim=spike
make linux
make report               # Run with spike
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;spike only support rv64* bare-metal/elf toolchain.&lt;/li&gt; 
 &lt;li&gt;gdb simulator only support bare-metal/elf toolchain.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Selecting the tests to run in GCC&#39;s regression test suite&lt;/h4&gt; 
&lt;p&gt;By default GCC will execute all tests of its regression test suite. While running them in parallel (e.g. &lt;code&gt;make -j$(nproc) report&lt;/code&gt;) will significantly speed up the execution time on multi-processor systems, the required time for executing all tests is usually too high for typical development cycles. Therefore GCC allows to select the tests that are being executed using the environment variable &lt;code&gt;RUNTESTFLAGS&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To restrict a test run to only RISC-V specific tests the following command can be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;RUNTESTFLAGS=&quot;riscv.exp&quot; make report
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To restrict a test run to only RISC-V specific tests with match the pattern &quot;zb*.c&quot; and &quot;sm*.c&quot; the following command can be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;RUNTESTFLAGS=&quot;riscv.exp=zb*.c\ sm*.c&quot; make report
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Testing GCC, Binutils, and glibc of a Linux toolchain&lt;/h4&gt; 
&lt;p&gt;The default Makefile target to run toolchain tests is &lt;code&gt;report&lt;/code&gt;. This will run all tests of the GCC regression test suite. Alternatively, the following command can be used to do the same:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check-gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following command can be used to run the Binutils tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check-binutils
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command below can be used to run the glibc tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make check-glibc-linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Adding more arch/abi combination for testing without introducing multilib&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; can be used when you want to test more combination of arch/ABI, for example: built a linux toolchain with multilib with &lt;code&gt;rv64gc/lp64d&lt;/code&gt; and &lt;code&gt;rv64imac/lp64&lt;/code&gt;, but you want to test more configuration like &lt;code&gt;rv64gcv/lp64d&lt;/code&gt; or &lt;code&gt;rv64gcv_zba/lp64d&lt;/code&gt;, then you can use --with-extra-multilib-test to specify that via &lt;code&gt;--with-extra-multilib-test=&quot;rv64gcv-lp64d;rv64gcv_zba-lp64d&quot;&lt;/code&gt;, then the testing will run for &lt;code&gt;rv64gc/lp64d&lt;/code&gt;, &lt;code&gt;rv64imac/lp64&lt;/code&gt;, &lt;code&gt;rv64gcv/lp64d&lt;/code&gt; and &lt;code&gt;rv64gcv_zba/lp64d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; support bare-metal and linux toolchain and support even multilib is disable, but the user must ensure extra multilib test configuration can be work with existing lib/multilib, e.g. rv32gcv/ilp32 test can&#39;t work if multilib didn&#39;t have any rv32 multilib.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;--with-extra-multilib-test&lt;/code&gt; also support more complicated format to fit the requirements of end-users. First of all, the argument is a list of test configurations. Each test configuration are separated by &lt;code&gt;;&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;rv64gcv-lp64d;rv64_zvl256b_zvfh-lp64d&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For each test configuration, it has two parts, aka required arch-abi part and optional build flags. We leverage &lt;code&gt;:&lt;/code&gt; to separate them with some restrictions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;arch-abi should be required and there must be only one at the begining of the test configuration.&lt;/li&gt; 
 &lt;li&gt;build flags is a array-like flags after the arch-abi, there will be two ways to arrange them, aka AND, OR operation.&lt;/li&gt; 
 &lt;li&gt;If you would like the flags in build flags array acts on arch-abi &lt;strong&gt;simultaneously&lt;/strong&gt;, you can use &lt;code&gt;:&lt;/code&gt; to separate them. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic:--param=riscv-autovec-preference=fixed-vlmax
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will be consider as one target board same as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic/--param=riscv-autovec-preference=fixed-vlmax
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you would like the flags in build flags array acts on arch-abi &lt;strong&gt;respectively&lt;/strong&gt;, you can use &#39;,&#39; to separate them. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic,--param=riscv-autovec-preference=fixed-vlmax
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will be consider as two target boards same as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-preference=fixed-vlmax
riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;However, you can also leverage AND(&lt;code&gt;:&lt;/code&gt;), OR(&lt;code&gt;,&lt;/code&gt;) operator together but the OR(&lt;code&gt;,&lt;/code&gt;) will always have the higher priority. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;rv64gcv-lp64d:--param=riscv-autovec-lmul=dynamic:--param=riscv-autovec-preference=fixed-vlmax,--param=riscv-autovec-lmul=m2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will be consider as tow target boars same as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=dynamic/--param=riscv-autovec-preference=fixed-vlmax
riscv-sim/-march=rv64gcv/-mabi=lp64d/-mcmodel=medlow/--param=riscv-autovec-lmul=m2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LLVM / clang&lt;/h3&gt; 
&lt;p&gt;LLVM can be used in combination with the RISC-V GNU Compiler Toolchain to build RISC-V applications. To build LLVM with C and C++ support the configure flag &lt;code&gt;--enable-llvm&lt;/code&gt; can be used.&lt;/p&gt; 
&lt;p&gt;E.g. to build LLVM on top of a RV64 Linux toolchain the following commands can be used:&lt;/p&gt; 
&lt;p&gt;./configure --prefix=$RISCV --enable-llvm --enable-linux make&lt;/p&gt; 
&lt;p&gt;Note, that a combination of &lt;code&gt;--enable-llvm&lt;/code&gt; and multilib configuration flags is not supported.&lt;/p&gt; 
&lt;p&gt;Below are examples how to build a rv64gc Linux/newlib toolchain with LLVM support, how to use it to build a C and a C++ application using clang, and how to execute the generated binaries using QEMU.&lt;/p&gt; 
&lt;p&gt;Build Linux toolchain and run examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Build rv64gc toolchain with LLVM
./configure --prefix=$RISCV --enable-llvm --enable-linux --with-arch=rv64gc --with-abi=lp64d
make -j$(nproc) all build-sim SIM=qemu
# Build C application with clang
$RISCV/bin/clang -march=rv64imafdc -o hello_world hello_world.c
$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world
# Build C++ application with clang
$RISCV/bin/clang++ -march=rv64imafdc -stdlib=libc++ -o hello_world_cpp hello_world_cpp.cxx
$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world_cpp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build newlib toolchain and run examples (don&#39;t work with &lt;code&gt;--with-multilib-generator=&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Build rv64gc bare-metal toolchain with LLVM
./configure --prefix=$RISCV --enable-llvm --disable-linux --with-arch=rv64gc --with-abi=lp64d
make -j$(nproc) all build-sim SIM=qemu
# Build C application with clang
$RISCV/bin/clang -march=rv64imafdc -o hello_world hello_world.c
$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world
# Build C++ application with clang using static link
$RISCV/bin/clang++ -march=rv64imafdc -static -o hello_world_cpp hello_world_cpp.cxx
$RISCV/bin/qemu-riscv64 -L $RISCV/sysroot ./hello_world_cpp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development&lt;/h3&gt; 
&lt;p&gt;This section is only for developer or advanced user, or you want to build toolchain with your own source tree.&lt;/p&gt; 
&lt;h4&gt;Update Source Tree&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; contain stable but not latest source for each submodule, in case you want to using latest development tree, you can use following command to upgrade all submodule.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git submodule update --remote
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can upgrade specific submodule only.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git submodule update --remote &amp;lt;component&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, upgrade gcc only, you can using following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git submodule update --remote gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;How to Check Which Branch are Used for Specific submodule&lt;/h4&gt; 
&lt;p&gt;The branch info has recorded in &lt;code&gt;.gitmodules&lt;/code&gt; file, which can set or update via &lt;code&gt;git submodule add -b&lt;/code&gt; or &lt;code&gt;git submodule set-branch&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;However the only way to check which branch are using is to check &lt;code&gt;.gitmodules&lt;/code&gt; file, here is the example for &lt;code&gt;gcc&lt;/code&gt;, it&#39;s using releases/gcc-12 branch, so it will has a section named &lt;code&gt;gcc&lt;/code&gt; and has a field &lt;code&gt;branch&lt;/code&gt; is &lt;code&gt;releases/gcc-12&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[submodule &quot;gcc&quot;]
        path = gcc
        url = ../gcc.git
        branch = releases/gcc-12
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Use Source Tree Other Than &lt;code&gt;riscv-gnu-toolchain&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; also supports using out-of-tree source to build the toolchain. There are several configure options for specifying the source tree of each submodule/component.&lt;/p&gt; 
&lt;p&gt;For example, if you have GCC sources in &lt;code&gt;$HOME/gcc&lt;/code&gt;, use &lt;code&gt;--with-gcc-src&lt;/code&gt; to build the toolchain using those sources:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./configure ... --with-gcc-src=$HOME/gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here is the list of configure options for specifying alternative sources for the various submodules/components:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--with-binutils-src
--with-dejagnu-src
--with-gcc-src
--with-gdb-src
--with-glibc-src
--with-linux-headers-src
--with-llvm-src
--with-musl-src
--with-newlib-src
--with-pk-src
--with-qemu-src
--with-spike-src
--with-uclibc-src
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Build host GCC to check for compiler warnings&lt;/h4&gt; 
&lt;p&gt;GCC contributions have to meet several requirements to qualify for upstream inclusion. Warning free compilation with a compiler build from the same sources is among them. The flag &lt;code&gt;--enable-host-gcc&lt;/code&gt; does exaclty that:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Initially a host GCC will be built&lt;/li&gt; 
 &lt;li&gt;This host GCC is then used to build the cross compiler&lt;/li&gt; 
 &lt;li&gt;The cross compiler will be built with &lt;code&gt;-Werror&lt;/code&gt; to identify code issues&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;h4&gt;Ensuring Code Model Consistency&lt;/h4&gt; 
&lt;p&gt;If parts of newlib are going to be replaced with an external library (such as with &lt;a href=&quot;https://github.com/ucb-bar/libgloss-htif&quot;&gt;libgloss-htif&lt;/a&gt; for Berkeley Host-Target Interface), you should take care to ensure that both newlib and the external library are built using the same code model. For more information about RISC-V code models, &lt;a href=&quot;https://www.sifive.com/blog/all-aboard-part-4-risc-v-code-models&quot;&gt;read this SiFive blog article&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Errors that indicate a code model mismatch include &quot;relocation overflow&quot; or &quot;relocation truncated&quot; errors from the linker being unable to successfully relocate symbols in the executable.&lt;/p&gt; 
&lt;p&gt;By default, &lt;code&gt;riscv-gnu-toolchain&lt;/code&gt; builds newlib with &lt;code&gt;-mcmodel=medlow&lt;/code&gt;. You can use the alternative &lt;code&gt;medany&lt;/code&gt; code model (as used in libgloss-htif) by passing &lt;code&gt;--with-cmodel=medany&lt;/code&gt; to the configure script.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sonic-net/sonic-buildimage</title>
      <link>https://github.com/sonic-net/sonic-buildimage</link>
      <description>&lt;p&gt;Scripts which perform an installable binary image build for SONiC&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;master builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=master&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=master&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=master&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.marvell-teralynx?branchName=master&amp;amp;label=Marvell-Teralynx&quot; alt=&quot;Marvell-Teralynx&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=master&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell-prestera/Azure.sonic-buildimage.official.marvell-prestera-armhf?branchName=master&amp;amp;label=Marvell-Prestera-armhf&quot; alt=&quot;Marvell-Prestera(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=999&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell-prestera/Azure.sonic-buildimage.official.marvell-prestera-arm64?branchName=master&amp;amp;label=Marvell-Prestera-arm64&quot; alt=&quot;Marvell-Prestera(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=master&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1665&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nvidia/Azure.sonic-buildimage.official.nvidia-bluefield?branchName=master&amp;amp;label=Nvidia-Bluefield&quot; alt=&quot;Nvidia-Bluefield&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1366&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/pensando/Azure.sonic-buildimage.official.pensando?branchName=master&amp;amp;label=Pensando&quot; alt=&quot;Pensando&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=master&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=master&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202505 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202505&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202505&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202505&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202505&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202505&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202505&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=999&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-arm64?branchName=202505&amp;amp;label=Marvell-arm64&quot; alt=&quot;Marvell(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202505&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1665&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nvidia/Azure.sonic-buildimage.official.nvidia-bluefield?branchName=202505&amp;amp;label=Nvidia-Bluefield&quot; alt=&quot;Nvidia-Bluefield&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1366&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/pensando/Azure.sonic-buildimage.official.pensando?branchName=202505&amp;amp;label=Pensando&quot; alt=&quot;Pensando&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202505&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202505&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202405 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202405&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202405&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202405&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202405&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202405&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202405&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=999&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-arm64?branchName=202405&amp;amp;label=Marvell-arm64&quot; alt=&quot;Marvell(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202405&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1665&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nvidia/Azure.sonic-buildimage.official.nvidia-bluefield?branchName=202405&amp;amp;label=Nvidia-Bluefield&quot; alt=&quot;Nvidia-Bluefield&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=1366&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/pensando/Azure.sonic-buildimage.official.pensando?branchName=202405&amp;amp;label=Pensando&quot; alt=&quot;Pensando&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202405&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202405&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202311 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202311&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202311&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202311&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202311&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202311&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202311&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=999&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-arm64?branchName=202311&amp;amp;label=Marvell-arm64&quot; alt=&quot;Marvell(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202311&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202311&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202305 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202205&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202305&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202305&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202305&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202305&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202305&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202305&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202305&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202305&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202305&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202211 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202205&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202211&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202211&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202211&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202211&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202211&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202211&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202211&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202211&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202211&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202205 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202205&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202205&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202205&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202205&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202205&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202205&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202205&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202205&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202205&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202205&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202111 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202111&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202111&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202111&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202111&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202111&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202111&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202111&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202111&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202111&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202111&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;202012 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202012&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202012&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202012&amp;amp;label=Centec&quot; alt=&quot;Centec&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202012&amp;amp;label=Centec-arm64&quot; alt=&quot;Centec(arm64)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202012&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202012&amp;amp;label=Marvell-armhf&quot; alt=&quot;Marvell(armhf)&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202012&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202012&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=202012&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202012&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;201911 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=201911&amp;amp;label=Barefoot&quot; alt=&quot;Barefoot&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=201911&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=201911&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=201911&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=201911&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=201911&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=201911&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;201811 builds&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=201811&amp;amp;label=Broadcom&quot; alt=&quot;Broadcom&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=201811&amp;amp;label=Mellanox&quot; alt=&quot;Mellanox&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=201811&amp;amp;label=Innovium&quot; alt=&quot;Innovium&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=201811&amp;amp;label=Nephos&quot; alt=&quot;Nephos&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&amp;amp;branchName=201811&quot;&gt;&lt;img src=&quot;https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=201811&amp;amp;label=VS&quot; alt=&quot;VS&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;SONiC Image Azure Pipelines&lt;/h2&gt; 
&lt;p&gt;All SONiC project build pipeline could be found at &lt;a href=&quot;https://sonic-build.azurewebsites.net&quot;&gt;Download Portal for SONiC Images&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;sonic-buildimage&lt;/h1&gt; 
&lt;h2&gt;Build SONiC Switch Images&lt;/h2&gt; 
&lt;h1&gt;Description&lt;/h1&gt; 
&lt;p&gt;Following are the instructions on how to build an &lt;a href=&quot;https://github.com/opencomputeproject/onie&quot;&gt;(ONIE)&lt;/a&gt; compatible network operating system (NOS) installer image for network switches, and also how to build docker images running inside the NOS. Note that SONiC images are build per ASIC platform. Switches using the same ASIC platform share a common image. For a list of supported switches and ASIC, please refer to this &lt;a href=&quot;https://github.com/sonic-net/SONiC/wiki/Supported-Devices-and-Platforms&quot;&gt;list&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Hardware&lt;/h1&gt; 
&lt;p&gt;Any server can be a build image server as long as it has:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Multiple cores to increase build speed&lt;/li&gt; 
 &lt;li&gt;Plenty of RAM (less than 8 GiB is likely to cause issues)&lt;/li&gt; 
 &lt;li&gt;300G of free disk space&lt;/li&gt; 
 &lt;li&gt;KVM Virtualization Support.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you are in a VM, make sure you have support for nested virtualization. Some cases (e.g. building OVS image) also requires extra configuration options to expose the full KVM interface to the VM (e.g. &lt;a href=&quot;https://www.virtualbox.org/manual/ch10.html#gimproviders&quot;&gt;the KVM paravirtualization support on VirtualBox&lt;/a&gt;).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;A good choice of OS for building SONiC is currently Ubuntu 20.04.&lt;/p&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install pip and jinja in host build machine, execute below commands if j2/jinjanator is not available:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo apt install -y python3-pip
pip3 install --user jinjanator
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Docker&lt;/a&gt; and configure your system to allow running the &#39;docker&#39; command without &#39;sudo&#39;: 
  &lt;ul&gt; 
   &lt;li&gt;Add current user to the docker group: &lt;code&gt;sudo gpasswd -a ${USER} docker&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Log out and log back in so that your group membership is re-evaluated&lt;/li&gt; 
   &lt;li&gt;If you are using Linux kernel 5.3 or newer, then you must use Docker 20.10.10 or newer. This is because older Docker versions did not allow the &lt;code&gt;clone3&lt;/code&gt; syscall, which is now used in Bookworm.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If a previous installation of Docker using snap was present on the system, remove it and also remove docker from snap before reinstallating docker. This will avoid &lt;a href=&quot;https://stackoverflow.com/questions/52526219/docker-mkdir-read-only-file-system&quot;&gt;known bugs that falsely report read-only filesystems issues&lt;/a&gt; during the build process.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Clone the repository with all the git submodules&lt;/h2&gt; 
&lt;p&gt;To clone the code repository recursively:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone --recurse-submodules https://github.com/sonic-net/sonic-buildimage.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To build SONiC installer image and docker images, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Ensure the &#39;overlay&#39; module is loaded on your development system
sudo modprobe overlay

# Enter the source directory
cd sonic-buildimage

# (Optional) Checkout a specific branch. By default, it uses master branch.
# For example, to checkout the branch 201911, use &quot;git checkout 201911&quot;
git checkout [branch_name]

# Execute make init once after cloning the repo,
# or after fetching remote repo with submodule updates
make init

# Execute make configure once to configure ASIC
make configure PLATFORM=[ASIC_VENDOR]

# Build SONiC image with 4 jobs in parallel.
# Note: You can set this higher, but 4 is a good number for most cases
#       and is well-tested.
make SONIC_BUILD_JOBS=4 all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The supported ASIC vendors are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;PLATFORM=barefoot&lt;/li&gt; 
 &lt;li&gt;PLATFORM=broadcom&lt;/li&gt; 
 &lt;li&gt;PLATFORM=marvell-prestera&lt;/li&gt; 
 &lt;li&gt;PLATFORM=marvell-teralynx&lt;/li&gt; 
 &lt;li&gt;PLATFORM=mellanox&lt;/li&gt; 
 &lt;li&gt;PLATFORM=centec&lt;/li&gt; 
 &lt;li&gt;PLATFORM=nephos&lt;/li&gt; 
 &lt;li&gt;PLATFORM=nvidia-bluefield&lt;/li&gt; 
 &lt;li&gt;PLATFORM=vs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage for ARM Architecture&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo apt-get install --allow-downgrades -y docker-ce=5:18.09.0~3-0~ubuntu-xenial
sudo apt-get install --allow-downgrades -y docker-ce-cli=5:18.09.0~3-0~ubuntu-xenial
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build Arm32 bit for (ARMHF) platform&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Execute make configure once to configure ASIC and ARCH
make configure PLATFORM=[ASIC_VENDOR] PLATFORM_ARCH=armhf
make target/sonic-[ASIC_VENDER]-armhf.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make configure PLATFORM=marvell-prestera PLATFORM_ARCH=armhf
make target/sonic-marvell-prestera-armhf.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build Arm32 bit for (ARMHF) Marvell Prestera platform on amd64 host for debian buster using cross-compilation, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Execute make configure once to configure ASIC and ARCH for cross-compilation build

NOJESSIE=1 NOSTRETCH=1 BLDENV=buster CROSS_BLDENV=1 \
make configure PLATFORM=marvell-prestera PLATFORM_ARCH=armhf

# Execute Arm32 build using cross-compilation environment

NOJESSIE=1 NOSTRETCH=1 BLDENV=buster CROSS_BLDENV=1 make target/sonic-marvell-prestera-armhf.bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Running the above Arm32 build using cross-compilation instead of qemu emulator drastically reduces the build time.&lt;/p&gt; 
&lt;p&gt;To build Arm64 bit for platform&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Execute make configure once to configure ASIC and ARCH

make configure PLATFORM=[ASIC_VENDOR] PLATFORM_ARCH=arm64

# example:

make configure PLATFORM=marvell-prestera PLATFORM_ARCH=arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Recommend reserving at least 100G free space to build one platform with a single job. The build process will use more disk if you are setting &lt;code&gt;SONIC_BUILD_JOBS&lt;/code&gt; to more than 1.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If Docker&#39;s workspace folder, &lt;code&gt;/var/lib/docker&lt;/code&gt;, resides on a partition without sufficient free space, you may encounter an error like the following during a Docker container build job:&lt;/p&gt; &lt;p&gt;&lt;code&gt;/usr/bin/tar: /path/to/sonic-buildimage/&amp;lt;some_file&amp;gt;: Cannot write: No space left on device&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The solution is to &lt;a href=&quot;https://www.ibm.com/docs/en/z-logdata-analytics/5.1.0?topic=compose-relocating-docker-root-directory&quot;&gt;move the directory&lt;/a&gt; to a partition with more free space.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;http_proxy=[your_proxy] https_proxy=[your_proxy] no_proxy=[your_no_proxy] make&lt;/code&gt; to enable http(s) proxy in the build process.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add your user account to &lt;code&gt;docker&lt;/code&gt; group and use your user account to make. &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;sudo&lt;/code&gt; are not supported.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For more details on cross-compilation errors, please refer to &lt;a href=&quot;https://github.com/sonic-net/sonic-buildimage/raw/master/README.arm64_build_on_amd64.md&quot;&gt;README.arm64_build_on_amd64.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The SONiC installer contains all docker images needed. SONiC uses one image for all devices of a same ASIC vendor.&lt;/p&gt; 
&lt;p&gt;For Broadcom ASIC, we build ONIE and EOS image. EOS image is used for Arista devices, ONIE image is used for all other Broadcom ASIC based devices.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make configure PLATFORM=broadcom
# build debian stretch required targets
BLDENV=stretch make stretch
# build ONIE image
make target/sonic-broadcom.bin
# build EOS image
make target/sonic-aboot-broadcom.swi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may find the rules/config file useful. It contains configuration options for the build process, like adding more verbosity or showing dependencies, username and password for base image etc.&lt;/p&gt; 
&lt;p&gt;Every docker image is built and saved to target/ directory. So, for instance, to build only docker-database, execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make target/docker-database.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Same goes for debian packages, which are under target/debs/:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make target/debs/swss_1.0.0_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every target has a clean target, so in order to clean swss, execute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;make target/debs/swss_1.0.0_amd64.deb-clean
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is recommended to use clean targets to clean all packages that are built together, like dev packages for instance. In order to be more familiar with build process and make some changes to it, it is recommended to read this short &lt;a href=&quot;https://raw.githubusercontent.com/sonic-net/sonic-buildimage/master/README.buildsystem.md&quot;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Build debug dockers and debug SONiC installer image&lt;/h2&gt; 
&lt;p&gt;SONiC build system supports building dockers and ONIE-image with debug tools and debug symbols, to help with live &amp;amp; core debugging. For details refer to &lt;a href=&quot;https://github.com/sonic-net/sonic-buildimage/raw/master/README.buildsystem.md&quot;&gt;SONiC Buildimage Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;SAI Version&lt;/h2&gt; 
&lt;p&gt;Please refer to &lt;a href=&quot;https://github.com/sonic-net/SONiC/wiki/Sonic-Roadmap-Planning&quot;&gt;SONiC roadmap&lt;/a&gt; on the SAI version for each SONiC release.&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are running make for the first time, a sonic-slave-${USER} docker image will be built automatically. This may take a while, but it is a one-time action, so please be patient.&lt;/li&gt; 
 &lt;li&gt;The root user account is disabled. However, the created user can &lt;code&gt;sudo&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;The target directory is &lt;code&gt;./target&lt;/code&gt;, containing the NOS installer image and docker images. 
  &lt;ul&gt; 
   &lt;li&gt;sonic-generic.bin: SONiC switch installer image (ONIE compatible)&lt;/li&gt; 
   &lt;li&gt;sonic-aboot.bin: SONiC switch installer image (Aboot compatible)&lt;/li&gt; 
   &lt;li&gt;docker-base.gz: base docker image where other docker images are built from, only used in build process (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-database.gz: docker image for in-memory key-value store, used as inter-process communication (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-fpm.gz: docker image for quagga with fpm module enabled (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-orchagent.gz: docker image for SWitch State Service (SWSS) (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-brcm.gz: docker image for the daemon to sync database and Broadcom switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-cavm.gz: docker image for the daemon to sync database and Cavium switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-mlnx.gz: docker image for the daemon to sync database and Mellanox switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-nephos.gz: docker image for the daemon to sync database and Nephos switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-mrvl-teralynx.gz: docker image for the daemon to sync database and Marvell-Teralynx switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-syncd-mrvl-prestera.gz: docker image for the daemon to sync database and Marvell-Prestera switch ASIC (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-sonic-p4.gz: docker image for all-in-one for p4 software switch (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-sonic-vs.gz: docker image for all-in-one for software virtual switch (gzip tar archive)&lt;/li&gt; 
   &lt;li&gt;docker-sonic-mgmt.gz: docker image for &lt;a href=&quot;https://github.com/sonic-net/sonic-mgmt&quot;&gt;managing, configuring and monitoring SONiC&lt;/a&gt; (gzip tar archive)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution Guide&lt;/h2&gt; 
&lt;p&gt;All contributors must sign a contribution license agreement before contributions can be accepted. Visit &lt;a href=&quot;https://easycla.lfx.linuxfoundation.org&quot;&gt;EasyCLA - Linux Foundation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;GitHub Workflow&lt;/h2&gt; 
&lt;p&gt;We&#39;re following basic GitHub Flow. If you have no idea what we&#39;re talking about, check out &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub&#39;s official guide&lt;/a&gt;. Note that merge is only performed by the repository maintainer.&lt;/p&gt; 
&lt;p&gt;Guide for performing commits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Isolate each commit to one component/bugfix/issue/feature&lt;/li&gt; 
 &lt;li&gt;Use a standard commit message format:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[component/folder touched]: Description intent of your changes&lt;/p&gt; 
 &lt;p&gt;[List of changes]&lt;/p&gt; 
 &lt;p&gt;Signed-off-by: Your Name &lt;a href=&quot;mailto:your@email.com&quot;&gt;your@email.com&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;swss-common: Stabilize the ConsumerTable&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Fixing autoreconf&lt;/li&gt; 
  &lt;li&gt;Fixing unit-tests by adding checkers and initialize the DB before start&lt;/li&gt; 
  &lt;li&gt;Adding the ability to select from multiple channels&lt;/li&gt; 
  &lt;li&gt;Health-Monitor - The idea of the patch is that if something went wrong with the notification channel, we will have the option to know about it (Query the LLEN table length).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Signed-off-by: &lt;a href=&quot;mailto:user@dev.null&quot;&gt;user@dev.null&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Each developer should fork this repository and &lt;a href=&quot;https://help.github.com/articles/adding-collaborators-to-a-personal-repository&quot;&gt;add the team as a Contributor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Push your changes to your private fork and do &quot;pull-request&quot; to this repository&lt;/li&gt; 
 &lt;li&gt;Use a pull request to do code review&lt;/li&gt; 
 &lt;li&gt;Use issues to keep track of what is going on&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This project has adopted the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/&quot;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/faq/&quot;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&quot;mailto:opencode@microsoft.com&quot;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
